cscope 15 $HOME/linux-4.4.0/drivers/net/wireless/ath/ath9k               0002003050
	@ahb.c

19 
	~<löux/∆80211.h
>

20 
	~<löux/∂©f‹m_devi˚.h
>

21 
	~<löux/©h9k_∂©f‹m.h
>

22 
	~<löux/moduÀ.h
>

23 
	~"©h9k.h
"

25 c⁄° 
∂©f‹m_devi˚_id
 
	g©h9k_∂©f‹m_id_èbÀ
[] = {

27 .
«me
 = "ath9k",

28 .
	gdrivî_d©a
 = 
AR5416_AR9100_DEVID
,

31 .
	g«me
 = "ar933x_wmac",

32 .
	gdrivî_d©a
 = 
AR9300_DEVID_AR9330
,

35 .
	g«me
 = "ar934x_wmac",

36 .
	gdrivî_d©a
 = 
AR9300_DEVID_AR9340
,

39 .
	g«me
 = "qca955x_wmac",

40 .
	gdrivî_d©a
 = 
AR9300_DEVID_QCA955X
,

43 .
	g«me
 = "qca953x_wmac",

44 .
	gdrivî_d©a
 = 
AR9300_DEVID_AR953X
,

47 .
	g«me
 = "qca956x_wmac",

48 .
	gdrivî_d©a
 = 
AR9300_DEVID_QCA956X
,

54 
	$©h_ahb_ªad_ˇchesize
(
©h_comm⁄
 *
comm⁄
, *
csz
)

56 *
csz
 = 
L1_CACHE_BYTES
 >> 2;

57 
	}
}

59 
boﬁ
 
	$©h_ahb_ì¥om_ªad
(
©h_comm⁄
 *
comm⁄
, 
u32
 
off
, 
u16
 *
d©a
)

61 
©h_so·c
 *
sc
 = (©h_so·¯*)
comm⁄
->
¥iv
;

62 
∂©f‹m_devi˚
 *
pdev
 = 
	`to_∂©f‹m_devi˚
(
sc
->
dev
);

63 
©h9k_∂©f‹m_d©a
 *
pd©a
;

65 
pd©a
 = 
	`dev_gë_∂©d©a
(&
pdev
->
dev
);

66 i‡(
off
 >(
	`ARRAY_SIZE
(
pd©a
->
ì¥om_d©a
))) {

67 
	`©h_îr
(
comm⁄
,

69 
__func__
, 
off
);

70  
Ál£
;

73 *
d©a
 = 
pd©a
->
ì¥om_d©a
[
off
];

74  
åue
;

75 
	}
}

77 
©h_bus_›s
 
	g©h_ahb_bus_›s
 = {

78 .
©h_bus_ty≥
 = 
ATH_AHB
,

79 .
	gªad_ˇchesize
 = 
©h_ahb_ªad_ˇchesize
,

80 .
	gì¥om_ªad
 = 
©h_ahb_ì¥om_ªad
,

83 
	$©h_ahb_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

85 
__iomem
 *
mem
;

86 
©h_so·c
 *
sc
;

87 
õì80211_hw
 *
hw
;

88 
ªsour˚
 *
ªs
;

89 c⁄° 
∂©f‹m_devi˚_id
 *
id
 = 
	`∂©f‹m_gë_devi˚_id
(
pdev
);

90 
úq
;

91 
ªt
 = 0;

92 
©h_hw
 *
ah
;

93 
hw_«me
[64];

95 i‡(!
	`dev_gë_∂©d©a
(&
pdev
->
dev
)) {

96 
	`dev_îr
(&
pdev
->
dev
, "noÖlatform data specified\n");

97  -
EINVAL
;

100 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

101 i‡(
ªs
 =
NULL
) {

102 
	`dev_îr
(&
pdev
->
dev
, "no memoryÑesource found\n");

103  -
ENXIO
;

106 
mem
 = 
	`devm_i‹em≠_noˇche
(&
pdev
->
dev
, 
ªs
->
°¨t
, 
	`ªsour˚_size
(res));

107 i‡(
mem
 =
NULL
) {

108 
	`dev_îr
(&
pdev
->
dev
, "ioremap failed\n");

109  -
ENOMEM
;

112 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_IRQ
, 0);

113 i‡(
ªs
 =
NULL
) {

114 
	`dev_îr
(&
pdev
->
dev
, "no IRQÑesource found\n");

115  -
ENXIO
;

118 
úq
 = 
ªs
->
°¨t
;

120 
	`©h9k_fûl_ch™˘x_›s
();

121 
hw
 = 
	`õì80211_Æloc_hw
((
©h_so·c
), &
©h9k_›s
);

122 i‡(
hw
 =
NULL
) {

123 
	`dev_îr
(&
pdev
->
dev
, "no memory for ieee80211_hw\n");

124  -
ENOMEM
;

127 
	`SET_IEEE80211_DEV
(
hw
, &
pdev
->
dev
);

128 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
hw
);

130 
sc
 = 
hw
->
¥iv
;

131 
sc
->
hw
 = hw;

132 
sc
->
dev
 = &
pdev
->dev;

133 
sc
->
mem
 = mem;

134 
sc
->
úq
 = irq;

136 
ªt
 = 
	`ªque°_úq
(
úq
, 
©h_i§
, 
IRQF_SHARED
, "©h9k", 
sc
);

137 i‡(
ªt
) {

138 
	`dev_îr
(&
pdev
->
dev
, "request_irq failed\n");

139 
îr_‰ì_hw
;

142 
ªt
 = 
	`©h9k_öô_devi˚
(
id
->
drivî_d©a
, 
sc
, &
©h_ahb_bus_›s
);

143 i‡(
ªt
) {

144 
	`dev_îr
(&
pdev
->
dev
, "failedÅo initialize device\n");

145 
îr_úq
;

148 
ah
 = 
sc
->
sc_ah
;

149 
	`©h9k_hw_«me
(
ah
, 
hw_«me
, (hw_name));

150 
	`wùhy_öfo
(
hw
->
wùhy
, "%s mem=0x%lx, irq=%d\n",

151 
hw_«me
, ()
mem
, 
úq
);

155 
îr_úq
:

156 
	`‰ì_úq
(
úq
, 
sc
);

157 
îr_‰ì_hw
:

158 
	`õì80211_‰ì_hw
(
hw
);

159  
ªt
;

160 
	}
}

162 
	$©h_ahb_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

164 
õì80211_hw
 *
hw
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

166 i‡(
hw
) {

167 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

169 
	`©h9k_deöô_devi˚
(
sc
);

170 
	`‰ì_úq
(
sc
->
úq
, sc);

171 
	`õì80211_‰ì_hw
(
sc
->
hw
);

175 
	}
}

177 
∂©f‹m_drivî
 
	g©h_ahb_drivî
 = {

178 .
¥obe
 = 
©h_ahb_¥obe
,

179 .
	gªmove
 = 
©h_ahb_ªmove
,

180 .
	gdrivî
 = {

181 .
«me
 = "ath9k",

183 .
	gid_èbÀ
 = 
©h9k_∂©f‹m_id_èbÀ
,

186 
MODULE_DEVICE_TABLE
(
∂©f‹m
, 
©h9k_∂©f‹m_id_èbÀ
);

188 
	$©h_ahb_öô
()

190  
	`∂©f‹m_drivî_ªgi°î
(&
©h_ahb_drivî
);

191 
	}
}

193 
	$©h_ahb_exô
()

195 
	`∂©f‹m_drivî_uƒegi°î
(&
©h_ahb_drivî
);

196 
	}
}

	@ani.c

17 
	~<löux/kî√l.h
>

18 
	~<löux/exp‹t.h
>

19 
	~"hw.h
"

20 
	~"hw-›s.h
"

22 
	s™i_ofdm_Àvñ_íåy
 {

23 
	m•ur_immunôy_Àvñ
;

24 
	mfú_°ï_Àvñ
;

25 
	mofdm_wók_sig«l_⁄
;

39 c⁄° 
™i_ofdm_Àvñ_íåy
 
	gofdm_Àvñ_èbÀ
[] = {

52 
	#ATH9K_ANI_OFDM_NUM_LEVEL
 \

53 
	`ARRAY_SIZE
(
ofdm_Àvñ_èbÀ
)

	)

54 
	#ATH9K_ANI_OFDM_MAX_LEVEL
 \

55 (
ATH9K_ANI_OFDM_NUM_LEVEL
-1)

	)

56 
	#ATH9K_ANI_OFDM_DEF_LEVEL
 \

57 3

	)

80 
	s™i_cck_Àvñ_íåy
 {

81 
	mfú_°ï_Àvñ
;

82 
	mmrc_cck_⁄
;

85 c⁄° 
™i_cck_Àvñ_íåy
 
	gcck_Àvñ_èbÀ
[] = {

98 
	#ATH9K_ANI_CCK_NUM_LEVEL
 \

99 
	`ARRAY_SIZE
(
cck_Àvñ_èbÀ
)

	)

100 
	#ATH9K_ANI_CCK_MAX_LEVEL
 \

101 (
ATH9K_ANI_CCK_NUM_LEVEL
-1)

	)

102 
	#ATH9K_ANI_CCK_MAX_LEVEL_LOW_RSSI
 \

103 (
ATH9K_ANI_CCK_NUM_LEVEL
-3)

	)

104 
	#ATH9K_ANI_CCK_DEF_LEVEL
 \

105 2

	)

107 
	$©h9k_hw_upd©e_mib°©s
(
©h_hw
 *
ah
,

108 
©h9k_mib_°©s
 *
°©s
)

110 
u32
 
addr
[5] = {
AR_RTS_OK
, 
AR_RTS_FAIL
, 
AR_ACK_FAIL
,

111 
AR_FCS_FAIL
, 
AR_BEACON_CNT
};

112 
u32
 
d©a
[5];

114 
	`REG_READ_MULTI
(
ah
, &
addr
[0], &
d©a
[0], 5);

116 
°©s
->
πs_good
 +
d©a
[0];

118 
°©s
->
πs_bad
 +
d©a
[1];

120 
°©s
->
ackrcv_bad
 +
d©a
[2];

122 
°©s
->
fcs_bad
 +
d©a
[3];

124 
°©s
->
bóc⁄s
 +
d©a
[4];

125 
	}
}

127 
	$©h9k_™i_ª°¨t
(
©h_hw
 *
ah
)

129 
¨5416AniSèã
 *
™iSèã
;

131 i‡(!
ah
->
curch™
)

134 
™iSèã
 = &
ah
->
™i
;

135 
™iSèã
->
li°íTime
 = 0;

137 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

139 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR_1
, 0);

140 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR_2
, 0);

141 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR_MASK_1
, 
AR_PHY_ERR_OFDM_TIMING
);

142 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR_MASK_2
, 
AR_PHY_ERR_CCK_TIMING
);

144 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

146 
	`©h9k_hw_upd©e_mib°©s
(
ah
, &ah->
ah_mibSèts
);

148 
™iSèã
->
ofdmPhyEºCou¡
 = 0;

149 
™iSèã
->
cckPhyEºCou¡
 = 0;

150 
	}
}

153 
	$©h9k_hw_£t_ofdm_nû
(
©h_hw
 *
ah
, 
u8
 
immunôyLevñ
,

154 
boﬁ
 
sˇn
)

156 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

157 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

158 c⁄° 
™i_ofdm_Àvñ_íåy
 *
íåy_ofdm
;

159 c⁄° 
™i_cck_Àvñ_íåy
 *
íåy_cck
;

160 
boﬁ
 
wók_sig
;

162 
	`©h_dbg
(
comm⁄
, 
ANI
, "**** ofdmlevel %d=>%d,Ñssi=%d[lo=%d hi=%d]\n",

163 
™iSèã
->
ofdmNoi£ImmunôyLevñ
,

164 
immunôyLevñ
, 
	`BEACON_RSSI
(
ah
),

165 
ATH9K_ANI_RSSI_THR_LOW
,

166 
ATH9K_ANI_RSSI_THR_HIGH
);

168 i‡(
	`AR_SREV_9100
(
ah
Ë&& 
immunôyLevñ
 < 
ATH9K_ANI_OFDM_DEF_LEVEL
)

169 
immunôyLevñ
 = 
ATH9K_ANI_OFDM_DEF_LEVEL
;

171 i‡(!
sˇn
)

172 
™iSèã
->
ofdmNoi£ImmunôyLevñ
 = 
immunôyLevñ
;

174 
íåy_ofdm
 = &
ofdm_Àvñ_èbÀ
[
™iSèã
->
ofdmNoi£ImmunôyLevñ
];

175 
íåy_cck
 = &
cck_Àvñ_èbÀ
[
™iSèã
->
cckNoi£ImmunôyLevñ
];

177 i‡(
™iSèã
->
•urImmunôyLevñ
 !
íåy_ofdm
->
•ur_immunôy_Àvñ
)

178 
	`©h9k_hw_™i_c⁄åﬁ
(
ah
,

179 
ATH9K_ANI_SPUR_IMMUNITY_LEVEL
,

180 
íåy_ofdm
->
•ur_immunôy_Àvñ
);

182 i‡(
™iSèã
->
fú°ïLevñ
 !
íåy_ofdm
->
fú_°ï_Àvñ
 &&

183 
íåy_ofdm
->
fú_°ï_Àvñ
 >
íåy_cck
->fir_step_level)

184 
	`©h9k_hw_™i_c⁄åﬁ
(
ah
,

185 
ATH9K_ANI_FIRSTEP_LEVEL
,

186 
íåy_ofdm
->
fú_°ï_Àvñ
);

188 
wók_sig
 = 
íåy_ofdm
->
ofdm_wók_sig«l_⁄
;

189 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_STATION
 &&

190 
	`BEACON_RSSI
(
ah
Ë<
ATH9K_ANI_RSSI_THR_HIGH
)

191 
wók_sig
 = 
åue
;

197 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
) &&

198 
ah
->
›mode
 !
NL80211_IFTYPE_STATION
)

199 
wók_sig
 = 
åue
;

202 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
) &&

203 
™iSèã
->
ofdmNoi£ImmunôyLevñ
 >= 8)

204 
wók_sig
 = 
Ál£
;

206 i‡(
™iSèã
->
ofdmWókSigDëe˘
 !
wók_sig
)

207 
	`©h9k_hw_™i_c⁄åﬁ
(
ah
, 
ATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION
,

208 
wók_sig
);

210 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

213 i‡(
™iSèã
->
ofdmNoi£ImmunôyLevñ
 >
ATH9K_ANI_OFDM_DEF_LEVEL
) {

214 
ah
->
c⁄fig
.
ofdm_åig_high
 = 
ATH9K_ANI_OFDM_TRIG_HIGH
;

215 
ah
->
c⁄fig
.
ofdm_åig_low
 = 
ATH9K_ANI_OFDM_TRIG_LOW_ABOVE_INI
;

217 
ah
->
c⁄fig
.
ofdm_åig_high
 = 
ATH9K_ANI_OFDM_TRIG_HIGH_BELOW_INI
;

218 
ah
->
c⁄fig
.
ofdm_åig_low
 = 
ATH9K_ANI_OFDM_TRIG_LOW
;

220 
	}
}

222 
	$©h9k_hw_™i_ofdm_îr_åiggî
(
©h_hw
 *
ah
)

224 
¨5416AniSèã
 *
™iSèã
;

226 i‡(!
ah
->
curch™
)

229 
™iSèã
 = &
ah
->
™i
;

231 i‡(
™iSèã
->
ofdmNoi£ImmunôyLevñ
 < 
ATH9K_ANI_OFDM_MAX_LEVEL
)

232 
	`©h9k_hw_£t_ofdm_nû
(
ah
, 
™iSèã
->
ofdmNoi£ImmunôyLevñ
 + 1, 
Ál£
);

233 
	}
}

238 
	$©h9k_hw_£t_cck_nû
(
©h_hw
 *
ah
, 
u_öt8_t
 
immunôyLevñ
,

239 
boﬁ
 
sˇn
)

241 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

242 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

243 c⁄° 
™i_ofdm_Àvñ_íåy
 *
íåy_ofdm
;

244 c⁄° 
™i_cck_Àvñ_íåy
 *
íåy_cck
;

246 
	`©h_dbg
(
comm⁄
, 
ANI
, "**** ccklevel %d=>%d,Ñssi=%d[lo=%d hi=%d]\n",

247 
™iSèã
->
cckNoi£ImmunôyLevñ
, 
immunôyLevñ
,

248 
	`BEACON_RSSI
(
ah
), 
ATH9K_ANI_RSSI_THR_LOW
,

249 
ATH9K_ANI_RSSI_THR_HIGH
);

251 i‡(
	`AR_SREV_9100
(
ah
Ë&& 
immunôyLevñ
 < 
ATH9K_ANI_CCK_DEF_LEVEL
)

252 
immunôyLevñ
 = 
ATH9K_ANI_CCK_DEF_LEVEL
;

254 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_STATION
 &&

255 
	`BEACON_RSSI
(
ah
Ë<
ATH9K_ANI_RSSI_THR_LOW
 &&

256 
immunôyLevñ
 > 
ATH9K_ANI_CCK_MAX_LEVEL_LOW_RSSI
)

257 
immunôyLevñ
 = 
ATH9K_ANI_CCK_MAX_LEVEL_LOW_RSSI
;

259 i‡(!
sˇn
)

260 
™iSèã
->
cckNoi£ImmunôyLevñ
 = 
immunôyLevñ
;

262 
íåy_ofdm
 = &
ofdm_Àvñ_èbÀ
[
™iSèã
->
ofdmNoi£ImmunôyLevñ
];

263 
íåy_cck
 = &
cck_Àvñ_èbÀ
[
™iSèã
->
cckNoi£ImmunôyLevñ
];

265 i‡(
™iSèã
->
fú°ïLevñ
 !
íåy_cck
->
fú_°ï_Àvñ
 &&

266 
íåy_cck
->
fú_°ï_Àvñ
 >
íåy_ofdm
->fir_step_level)

267 
	`©h9k_hw_™i_c⁄åﬁ
(
ah
,

268 
ATH9K_ANI_FIRSTEP_LEVEL
,

269 
íåy_cck
->
fú_°ï_Àvñ
);

272 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9485
(ah) ||

273 
	`AR_SREV_9565
(
ah
Ë|| 
	`AR_SREV_9561
(ah))

276 i‡(
™iSèã
->
mrcCCK
 !
íåy_cck
->
mrc_cck_⁄
)

277 
	`©h9k_hw_™i_c⁄åﬁ
(
ah
,

278 
ATH9K_ANI_MRC_CCK
,

279 
íåy_cck
->
mrc_cck_⁄
);

280 
	}
}

282 
	$©h9k_hw_™i_cck_îr_åiggî
(
©h_hw
 *
ah
)

284 
¨5416AniSèã
 *
™iSèã
;

286 i‡(!
ah
->
curch™
)

289 
™iSèã
 = &
ah
->
™i
;

291 i‡(
™iSèã
->
cckNoi£ImmunôyLevñ
 < 
ATH9K_ANI_CCK_MAX_LEVEL
)

292 
	`©h9k_hw_£t_cck_nû
(
ah
, 
™iSèã
->
cckNoi£ImmunôyLevñ
 + 1,

293 
Ál£
);

294 
	}
}

300 
	$©h9k_hw_™i_lowî_immunôy
(
©h_hw
 *
ah
)

302 
¨5416AniSèã
 *
™iSèã
;

304 
™iSèã
 = &
ah
->
™i
;

307 i‡(
™iSèã
->
ofdmNoi£ImmunôyLevñ
 > 0 &&

308 (
™iSèã
->
ofdmsTu∫
 ||ániSèã->
cckNoi£ImmunôyLevñ
 == 0)) {

309 
	`©h9k_hw_£t_ofdm_nû
(
ah
, 
™iSèã
->
ofdmNoi£ImmunôyLevñ
 - 1,

310 
Ál£
);

315 i‡(
™iSèã
->
cckNoi£ImmunôyLevñ
 > 0)

316 
	`©h9k_hw_£t_cck_nû
(
ah
, 
™iSèã
->
cckNoi£ImmunôyLevñ
 - 1,

317 
Ál£
);

318 
	}
}

325 
	$©h9k_™i_ª£t
(
©h_hw
 *
ah
, 
boﬁ
 
is_sˇ¬ög
)

327 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

328 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

329 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

330 
ofdm_nû
, 
cck_nû
;

332 i‡(!
ah
->
curch™
)

335 
	`BUG_ON
(
™iSèã
 =
NULL
);

336 
ah
->
°©s
.
a°_™i_ª£t
++;

338 
ofdm_nû
 = 
	`max_t
(, 
ATH9K_ANI_OFDM_DEF_LEVEL
,

339 
™iSèã
->
ofdmNoi£ImmunôyLevñ
);

340 
cck_nû
 = 
	`max_t
(, 
ATH9K_ANI_CCK_DEF_LEVEL
,

341 
™iSèã
->
cckNoi£ImmunôyLevñ
);

343 i‡(
is_sˇ¬ög
 ||

344 (
ah
->
›mode
 !
NL80211_IFTYPE_STATION
 &&

345 
ah
->
›mode
 !
NL80211_IFTYPE_ADHOC
)) {

352 i‡(
™iSèã
->
ofdmNoi£ImmunôyLevñ
 !=

353 
ATH9K_ANI_OFDM_DEF_LEVEL
 ||

354 
™iSèã
->
cckNoi£ImmunôyLevñ
 !=

355 
ATH9K_ANI_CCK_DEF_LEVEL
) {

356 
	`©h_dbg
(
comm⁄
, 
ANI
,

358 
ah
->
›mode
,

359 
ch™
->
ch™√l
,

360 
is_sˇ¬ög
,

361 
™iSèã
->
ofdmNoi£ImmunôyLevñ
,

362 
™iSèã
->
cckNoi£ImmunôyLevñ
);

364 
ofdm_nû
 = 
ATH9K_ANI_OFDM_DEF_LEVEL
;

365 
cck_nû
 = 
ATH9K_ANI_CCK_DEF_LEVEL
;

371 
	`©h_dbg
(
comm⁄
, 
ANI
,

373 
ah
->
›mode
,

374 
ch™
->
ch™√l
,

375 
is_sˇ¬ög
,

376 
™iSèã
->
ofdmNoi£ImmunôyLevñ
,

377 
™iSèã
->
cckNoi£ImmunôyLevñ
);

379 
	`©h9k_hw_£t_ofdm_nû
(
ah
, 
ofdm_nû
, 
is_sˇ¬ög
);

380 
	`©h9k_hw_£t_cck_nû
(
ah
, 
cck_nû
, 
is_sˇ¬ög
);

382 
	`©h9k_™i_ª°¨t
(
ah
);

383 
	}
}

385 
boﬁ
 
	$©h9k_hw_™i_ªad_cou¡îs
(
©h_hw
 *
ah
)

387 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

388 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

389 
u32
 
phyC¡1
, 
phyC¡2
;

390 
öt32_t
 
li°íTime
;

392 
	`©h_hw_cy˛e_cou¡îs_upd©e
(
comm⁄
);

393 
li°íTime
 = 
	`©h_hw_gë_li°í_time
(
comm⁄
);

395 i‡(
li°íTime
 <= 0) {

396 
ah
->
°©s
.
a°_™i_ eg_‹_lzîo
++;

397 
	`©h9k_™i_ª°¨t
(
ah
);

398  
Ál£
;

401 
™iSèã
->
li°íTime
 +=ÜistenTime;

403 
	`©h9k_hw_upd©e_mib°©s
(
ah
, &ah->
ah_mibSèts
);

405 
phyC¡1
 = 
	`REG_READ
(
ah
, 
AR_PHY_ERR_1
);

406 
phyC¡2
 = 
	`REG_READ
(
ah
, 
AR_PHY_ERR_2
);

408 
ah
->
°©s
.
a°_™i_ofdmîrs
 +
phyC¡1
 - 
™iSèã
->
ofdmPhyEºCou¡
;

409 
™iSèã
->
ofdmPhyEºCou¡
 = 
phyC¡1
;

411 
ah
->
°©s
.
a°_™i_cckîrs
 +
phyC¡2
 - 
™iSèã
->
cckPhyEºCou¡
;

412 
™iSèã
->
cckPhyEºCou¡
 = 
phyC¡2
;

414  
åue
;

415 
	}
}

417 
	$©h9k_hw_™i_m⁄ô‹
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

419 
¨5416AniSèã
 *
™iSèã
;

420 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

421 
u32
 
ofdmPhyEºR©e
, 
cckPhyEºR©e
;

423 i‡(!
ah
->
curch™
)

426 
™iSèã
 = &
ah
->
™i
;

427 i‡(!
	`©h9k_hw_™i_ªad_cou¡îs
(
ah
))

430 
ofdmPhyEºR©e
 = 
™iSèã
->
ofdmPhyEºCou¡
 * 1000 /

431 
™iSèã
->
li°íTime
;

432 
cckPhyEºR©e
 = 
™iSèã
->
cckPhyEºCou¡
 * 1000 /

433 
™iSèã
->
li°íTime
;

435 
	`©h_dbg
(
comm⁄
, 
ANI
,

437 
™iSèã
->
li°íTime
,

438 
™iSèã
->
ofdmNoi£ImmunôyLevñ
,

439 
ofdmPhyEºR©e
, 
™iSèã
->
cckNoi£ImmunôyLevñ
,

440 
cckPhyEºR©e
, 
™iSèã
->
ofdmsTu∫
);

442 i‡(
™iSèã
->
li°íTime
 > 
ah
->
™ùîiod
) {

443 i‡(
cckPhyEºR©e
 < 
ah
->
c⁄fig
.
cck_åig_low
 &&

444 
ofdmPhyEºR©e
 < 
ah
->
c⁄fig
.
ofdm_åig_low
) {

445 
	`©h9k_hw_™i_lowî_immunôy
(
ah
);

446 
™iSèã
->
ofdmsTu∫
 = !aniState->ofdmsTurn;

447 } i‡(
ofdmPhyEºR©e
 > 
ah
->
c⁄fig
.
ofdm_åig_high
) {

448 
	`©h9k_hw_™i_ofdm_îr_åiggî
(
ah
);

449 
™iSèã
->
ofdmsTu∫
 = 
Ál£
;

450 } i‡(
cckPhyEºR©e
 > 
ah
->
c⁄fig
.
cck_åig_high
) {

451 
	`©h9k_hw_™i_cck_îr_åiggî
(
ah
);

452 
™iSèã
->
ofdmsTu∫
 = 
åue
;

454 
	`©h9k_™i_ª°¨t
(
ah
);

456 
	}
}

457 
EXPORT_SYMBOL
(
©h9k_hw_™i_m⁄ô‹
);

459 
	$©h9k_íabÀ_mib_cou¡îs
(
©h_hw
 *
ah
)

461 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

463 
	`©h_dbg
(
comm⁄
, 
ANI
, "Enable MIB counters\n");

465 
	`©h9k_hw_upd©e_mib°©s
(
ah
, &ah->
ah_mibSèts
);

467 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

469 
	`REG_WRITE
(
ah
, 
AR_FILT_OFDM
, 0);

470 
	`REG_WRITE
(
ah
, 
AR_FILT_CCK
, 0);

471 
	`REG_WRITE
(
ah
, 
AR_MIBC
,

472 ~(
AR_MIBC_COW
 | 
AR_MIBC_FMC
 | 
AR_MIBC_CMC
 | 
AR_MIBC_MCS
)

474 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR_MASK_1
, 
AR_PHY_ERR_OFDM_TIMING
);

475 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR_MASK_2
, 
AR_PHY_ERR_CCK_TIMING
);

477 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

478 
	}
}

481 
	$©h9k_hw_dißbÀ_mib_cou¡îs
(
©h_hw
 *
ah
)

483 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

485 
	`©h_dbg
(
comm⁄
, 
ANI
, "Disable MIB counters\n");

487 
	`REG_WRITE
(
ah
, 
AR_MIBC
, 
AR_MIBC_FMC
);

488 
	`©h9k_hw_upd©e_mib°©s
(
ah
, &ah->
ah_mibSèts
);

489 
	`REG_WRITE
(
ah
, 
AR_MIBC
, 
AR_MIBC_CMC
);

490 
	`REG_WRITE
(
ah
, 
AR_FILT_OFDM
, 0);

491 
	`REG_WRITE
(
ah
, 
AR_FILT_CCK
, 0);

492 
	}
}

493 
EXPORT_SYMBOL
(
©h9k_hw_dißbÀ_mib_cou¡îs
);

495 
	$©h9k_hw_™i_öô
(
©h_hw
 *
ah
)

497 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

498 
¨5416AniSèã
 *
™i
 = &
ah
->ani;

500 
	`©h_dbg
(
comm⁄
, 
ANI
, "Initialize ANI\n");

502 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

503 
ah
->
c⁄fig
.
ofdm_åig_high
 = 
ATH9K_ANI_OFDM_TRIG_HIGH
;

504 
ah
->
c⁄fig
.
ofdm_åig_low
 = 
ATH9K_ANI_OFDM_TRIG_LOW
;

505 
ah
->
c⁄fig
.
cck_åig_high
 = 
ATH9K_ANI_CCK_TRIG_HIGH
;

506 
ah
->
c⁄fig
.
cck_åig_low
 = 
ATH9K_ANI_CCK_TRIG_LOW
;

508 
ah
->
c⁄fig
.
ofdm_åig_high
 = 
ATH9K_ANI_OFDM_TRIG_HIGH_OLD
;

509 
ah
->
c⁄fig
.
ofdm_åig_low
 = 
ATH9K_ANI_OFDM_TRIG_LOW_OLD
;

510 
ah
->
c⁄fig
.
cck_åig_high
 = 
ATH9K_ANI_CCK_TRIG_HIGH_OLD
;

511 
ah
->
c⁄fig
.
cck_åig_low
 = 
ATH9K_ANI_CCK_TRIG_LOW_OLD
;

514 
™i
->
•urImmunôyLevñ
 = 
ATH9K_ANI_SPUR_IMMUNE_LVL
;

515 
™i
->
fú°ïLevñ
 = 
ATH9K_ANI_FIRSTEP_LVL
;

516 
™i
->
mrcCCK
 = 
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 
åue
 : 
Ál£
;

517 
™i
->
ofdmsTu∫
 = 
åue
;

518 
™i
->
ofdmWókSigDëe˘
 = 
åue
;

519 
™i
->
cckNoi£ImmunôyLevñ
 = 
ATH9K_ANI_CCK_DEF_LEVEL
;

520 
™i
->
ofdmNoi£ImmunôyLevñ
 = 
ATH9K_ANI_OFDM_DEF_LEVEL
;

526 
ah
->
™ùîiod
 = 
ATH9K_ANI_PERIOD
;

527 
ah
->
c⁄fig
.
™i_pﬁl_öãrvÆ
 = 
ATH9K_ANI_POLLINTERVAL
;

529 
	`©h9k_™i_ª°¨t
(
ah
);

530 
	`©h9k_íabÀ_mib_cou¡îs
(
ah
);

531 
	}
}

	@ani.h

17 #i‚de‡
ANI_H


18 
	#ANI_H


	)

20 
	#BEACON_RSSI
(
ahp
Ë◊hp->
°©s
.
avgbrssi
)

	)

23 
	#ATH9K_ANI_OFDM_TRIG_HIGH
 3500

	)

24 
	#ATH9K_ANI_OFDM_TRIG_HIGH_BELOW_INI
 1000

	)

25 
	#ATH9K_ANI_OFDM_TRIG_HIGH_OLD
 500

	)

27 
	#ATH9K_ANI_OFDM_TRIG_LOW
 400

	)

28 
	#ATH9K_ANI_OFDM_TRIG_LOW_ABOVE_INI
 900

	)

29 
	#ATH9K_ANI_OFDM_TRIG_LOW_OLD
 200

	)

31 
	#ATH9K_ANI_CCK_TRIG_HIGH
 600

	)

32 
	#ATH9K_ANI_CCK_TRIG_HIGH_OLD
 200

	)

33 
	#ATH9K_ANI_CCK_TRIG_LOW
 300

	)

34 
	#ATH9K_ANI_CCK_TRIG_LOW_OLD
 100

	)

36 
	#ATH9K_ANI_SPUR_IMMUNE_LVL
 3

	)

37 
	#ATH9K_ANI_FIRSTEP_LVL
 2

	)

39 
	#ATH9K_ANI_RSSI_THR_HIGH
 40

	)

40 
	#ATH9K_ANI_RSSI_THR_LOW
 7

	)

42 
	#ATH9K_ANI_PERIOD
 300

	)

45 
	#ATH9K_ANI_POLLINTERVAL
 1000

	)

47 
	#ATH9K_SIG_FIRSTEP_SETTING_MIN
 0

	)

48 
	#ATH9K_SIG_FIRSTEP_SETTING_MAX
 20

	)

49 
	#ATH9K_SIG_SPUR_IMM_SETTING_MIN
 0

	)

50 
	#ATH9K_SIG_SPUR_IMM_SETTING_MAX
 22

	)

54 
	e©h9k_™i_cmd
 {

55 
	mATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION
 = 0x1,

56 
	mATH9K_ANI_FIRSTEP_LEVEL
 = 0x2,

57 
	mATH9K_ANI_SPUR_IMMUNITY_LEVEL
 = 0x4,

58 
	mATH9K_ANI_MRC_CCK
 = 0x8,

59 
	mATH9K_ANI_ALL
 = 0xfff

62 
	s©h9k_mib_°©s
 {

63 
u32
 
	mackrcv_bad
;

64 
u32
 
	mπs_bad
;

65 
u32
 
	mπs_good
;

66 
u32
 
	mfcs_bad
;

67 
u32
 
	mbóc⁄s
;

71 
	s©h9k_™i_deÁu…
 {

72 
u16
 
	mm1ThªshLow
;

73 
u16
 
	mm2ThªshLow
;

74 
u16
 
	mm1Thªsh
;

75 
u16
 
	mm2Thªsh
;

76 
u16
 
	mm2Cou¡Thr
;

77 
u16
 
	mm2Cou¡ThrLow
;

78 
u16
 
	mm1ThªshLowExt
;

79 
u16
 
	mm2ThªshLowExt
;

80 
u16
 
	mm1ThªshExt
;

81 
u16
 
	mm2ThªshExt
;

82 
u16
 
	mfú°ï
;

83 
u16
 
	mfú°ïLow
;

84 
u16
 
	mcy˝wrThr1
;

85 
u16
 
	mcy˝wrThr1Ext
;

88 
	s¨5416AniSèã
 {

89 
u8
 
	mnoi£ImmunôyLevñ
;

90 
u8
 
	mofdmNoi£ImmunôyLevñ
;

91 
u8
 
	mcckNoi£ImmunôyLevñ
;

92 
boﬁ
 
	mofdmsTu∫
;

93 
u8
 
	mmrcCCK
;

94 
u8
 
	m•urImmunôyLevñ
;

95 
u8
 
	mfú°ïLevñ
;

96 
boﬁ
 
	mofdmWókSigDëe˘
;

97 
u32
 
	mli°íTime
;

98 
u32
 
	mofdmPhyEºCou¡
;

99 
u32
 
	mcckPhyEºCou¡
;

100 
©h9k_™i_deÁu…
 
	möiDef
;

103 
	s¨5416Sèts
 {

104 
u32
 
	ma°_™i_•urup
;

105 
u32
 
	ma°_™i_•urdown
;

106 
u32
 
	ma°_™i_ofdm⁄
;

107 
u32
 
	ma°_™i_ofdmoff
;

108 
u32
 
	ma°_™i_cckhigh
;

109 
u32
 
	ma°_™i_ccklow
;

110 
u32
 
	ma°_™i_°ïup
;

111 
u32
 
	ma°_™i_°ïdown
;

112 
u32
 
	ma°_™i_ofdmîrs
;

113 
u32
 
	ma°_™i_cckîrs
;

114 
u32
 
	ma°_™i_ª£t
;

115 
u32
 
	ma°_™i_ eg_‹_lzîo
;

116 
u32
 
	mavgbrssi
;

117 
©h9k_mib_°©s
 
	ma°_mib°©s
;

119 
	#ah_mibSèts
 
°©s
.
a°_mib°©s


	)

121 
©h9k_íabÀ_mib_cou¡îs
(
©h_hw
 *
ah
);

122 
©h9k_hw_dißbÀ_mib_cou¡îs
(
©h_hw
 *
ah
);

123 
©h9k_hw_™i_öô
(
©h_hw
 *
ah
);

	@antenna.c

17 
	~"©h9k.h
"

71 
ölöe
 
boﬁ
 
	$©h_is_Æt_™t_øtio_bëãr
(
©h_™t_comb
 *
™tcomb
,

72 
Æt_øtio
, 
maxdñè
,

73 
mödñè
, 
maö_rssi_avg
,

74 
Æt_rssi_avg
, 
pkt_cou¡
)

76 i‡(
pkt_cou¡
 <= 50)

77  
Ál£
;

79 i‡(
Æt_rssi_avg
 > 
maö_rssi_avg
 + 
mödñè
)

80  
åue
;

82 i‡(
Æt_øtio
 >
™tcomb
->
™t_øtio2
 &&

83 
Æt_rssi_avg
 >
™tcomb
->
low_rssi_thªsh
 &&

84 (
Æt_rssi_avg
 > 
maö_rssi_avg
 + 
maxdñè
))

85  
åue
;

87  
Ál£
;

88 
	}
}

90 
ölöe
 
boﬁ
 
	$©h_™t_div_comb_Æt_check
(
©h_hw_™tcomb_c⁄f
 *
c⁄f
,

91 
©h_™t_comb
 *
™tcomb
,

92 
Æt_øtio
, 
Æt_rssi_avg
,

93 
maö_rssi_avg
)

95 
boﬁ
 
ªsu…
, 
£t1
, 
£t2
;

97 
ªsu…
 = 
£t1
 = 
£t2
 = 
Ál£
;

99 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
 &&

100 
c⁄f
->
Æt_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
)

101 
£t1
 = 
åue
;

103 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
 &&

104 
c⁄f
->
Æt_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

105 
£t2
 = 
åue
;

107 
c⁄f
->
div_group
) {

109 i‡(
Æt_øtio
 > 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO
)

110 
ªsu…
 = 
åue
;

114 i‡(
Æt_rssi_avg
 < 4 ||á…_rssi_avg < 
™tcomb
->
low_rssi_thªsh
)

117 i‡((
£t1
 && (
Æt_rssi_avg
 >(
maö_rssi_avg
 - 5))) ||

118 (
£t2
 && (
Æt_rssi_avg
 >(
maö_rssi_avg
 - 2))) ||

119 (
Æt_øtio
 > 
™tcomb
->
™t_øtio
))

120 
ªsu…
 = 
åue
;

124 i‡(
Æt_rssi_avg
 < 4 ||á…_rssi_avg < 
™tcomb
->
low_rssi_thªsh
)

127 i‡((
£t1
 && (
Æt_rssi_avg
 >(
maö_rssi_avg
 - 3))) ||

128 (
£t2
 && (
Æt_rssi_avg
 >(
maö_rssi_avg
 + 3))) ||

129 (
Æt_øtio
 > 
™tcomb
->
™t_øtio
))

130 
ªsu…
 = 
åue
;

135  
ªsu…
;

136 
	}
}

138 
	$©h_ ac⁄f_Æt_good_sˇn
(
©h_™t_comb
 *
™tcomb
,

139 
©h_hw_™tcomb_c⁄f
 
™t_c⁄f
,

140 
maö_rssi_avg
)

142 
™tcomb
->
quick_sˇn_˙t
 = 0;

144 i‡(
™t_c⁄f
.
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

145 
™tcomb
->
rssi_ a2
 = 
maö_rssi_avg
;

146 i‡(
™t_c⁄f
.
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
)

147 
™tcomb
->
rssi_ a1
 = 
maö_rssi_avg
;

149 (
™t_c⁄f
.
maö_ a_c⁄f
 << 4Ë|á¡_c⁄f.
Æt_ a_c⁄f
) {

151 
™tcomb
->
maö_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

152 
™tcomb
->
fú°_quick_sˇn_c⁄f
 =

153 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

154 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

157 
™tcomb
->
maö_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

158 
™tcomb
->
fú°_quick_sˇn_c⁄f
 =

159 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

160 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

163 
™tcomb
->
maö_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

164 
™tcomb
->
fú°_quick_sˇn_c⁄f
 =

165 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

166 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 =

167 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

170 
™tcomb
->
maö_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

171 
™tcomb
->
fú°_quick_sˇn_c⁄f
 =

172 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

173 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 =

174 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

177 
™tcomb
->
maö_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

178 
™tcomb
->
fú°_quick_sˇn_c⁄f
 =

179 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

180 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

183 
™tcomb
->
maö_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

184 
™tcomb
->
fú°_quick_sˇn_c⁄f
 =

185 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

186 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

191 
	}
}

193 
	$©h_™t_£t_Æt_øtio
(
©h_™t_comb
 *
™tcomb
,

194 
©h_hw_™tcomb_c⁄f
 *
c⁄f
)

197 i‡(
™tcomb
->
fú°_øtio
 &&á¡comb->
£c⁄d_øtio
) {

198 i‡(
™tcomb
->
rssi_£c⁄d
 >á¡comb->
rssi_thúd
) {

200 i‡((
™tcomb
->
fú°_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) ||

201 (
™tcomb
->
fú°_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
))

203 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

204 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

206 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

209 
c⁄f
->
Æt_ a_c⁄f
 =

210 
™tcomb
->
fú°_quick_sˇn_c⁄f
;

211 } i‡((
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) ||

212 (
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)) {

214 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

215 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

217 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

220 
c⁄f
->
Æt_ a_c⁄f
 = 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
;

222 } i‡(
™tcomb
->
fú°_øtio
) {

224 i‡((
™tcomb
->
fú°_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) ||

225 (
™tcomb
->
fú°_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
))

227 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

228 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

230 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

233 
c⁄f
->
Æt_ a_c⁄f
 = 
™tcomb
->
fú°_quick_sˇn_c⁄f
;

234 } i‡(
™tcomb
->
£c⁄d_øtio
) {

236 i‡((
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) ||

237 (
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
))

239 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

240 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

242 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

245 
c⁄f
->
Æt_ a_c⁄f
 = 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
;

248 i‡((
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) ||

249 (
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
))

251 i‡(
c⁄f
->
maö_ a_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

252 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

254 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

257 
c⁄f
->
Æt_ a_c⁄f
 = 
™tcomb
->
maö_c⁄f
;

259 
	}
}

261 
	$©h_£À˘_™t_div_‰om_quick_sˇn
(
©h_™t_comb
 *
™tcomb
,

262 
©h_hw_™tcomb_c⁄f
 *
div_™t_c⁄f
,

263 
maö_rssi_avg
, 
Æt_rssi_avg
,

264 
Æt_øtio
)

267 
™tcomb
->
quick_sˇn_˙t
) {

270 
div_™t_c⁄f
->
maö_ a_c⁄f
 = 
™tcomb
->
maö_c⁄f
;

271 
div_™t_c⁄f
->
Æt_ a_c⁄f
 = 
™tcomb
->
fú°_quick_sˇn_c⁄f
;

275 
div_™t_c⁄f
->
maö_ a_c⁄f
 = 
™tcomb
->
maö_c⁄f
;

276 
div_™t_c⁄f
->
Æt_ a_c⁄f
 = 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
;

277 
™tcomb
->
rssi_fú°
 = 
maö_rssi_avg
;

278 
™tcomb
->
rssi_£c⁄d
 = 
Æt_rssi_avg
;

280 i‡(
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) {

282 i‡(
	`©h_is_Æt_™t_øtio_bëãr
(
™tcomb
, 
Æt_øtio
,

283 
ATH_ANT_DIV_COMB_LNA1_DELTA_HI
,

284 
ATH_ANT_DIV_COMB_LNA1_DELTA_LOW
,

285 
maö_rssi_avg
, 
Æt_rssi_avg
,

286 
™tcomb
->
tŸÆ_pkt_cou¡
))

287 
™tcomb
->
fú°_øtio
 = 
åue
;

289 
™tcomb
->
fú°_øtio
 = 
Ál£
;

290 } i‡(
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
) {

291 i‡(
	`©h_is_Æt_™t_øtio_bëãr
(
™tcomb
, 
Æt_øtio
,

292 
ATH_ANT_DIV_COMB_LNA1_DELTA_MID
,

293 
ATH_ANT_DIV_COMB_LNA1_DELTA_LOW
,

294 
maö_rssi_avg
, 
Æt_rssi_avg
,

295 
™tcomb
->
tŸÆ_pkt_cou¡
))

296 
™tcomb
->
fú°_øtio
 = 
åue
;

298 
™tcomb
->
fú°_øtio
 = 
Ál£
;

300 i‡(
	`©h_is_Æt_™t_øtio_bëãr
(
™tcomb
, 
Æt_øtio
,

301 
ATH_ANT_DIV_COMB_LNA1_DELTA_HI
,

303 
maö_rssi_avg
, 
Æt_rssi_avg
,

304 
™tcomb
->
tŸÆ_pkt_cou¡
))

305 
™tcomb
->
fú°_øtio
 = 
åue
;

307 
™tcomb
->
fú°_øtio
 = 
Ál£
;

311 
™tcomb
->
Æt_good
 = 
Ál£
;

312 
™tcomb
->
sˇn_nŸ_°¨t
 = 
Ál£
;

313 
™tcomb
->
sˇn
 = 
Ál£
;

314 
™tcomb
->
rssi_fú°
 = 
maö_rssi_avg
;

315 
™tcomb
->
rssi_thúd
 = 
Æt_rssi_avg
;

317 
™tcomb
->
£c⁄d_quick_sˇn_c⁄f
) {

318 
ATH_ANT_DIV_COMB_LNA1
:

319 
™tcomb
->
rssi_ a1
 = 
Æt_rssi_avg
;

321 
ATH_ANT_DIV_COMB_LNA2
:

322 
™tcomb
->
rssi_ a2
 = 
Æt_rssi_avg
;

324 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
:

325 i‡(
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
)

326 
™tcomb
->
rssi_ a2
 = 
maö_rssi_avg
;

327 i‡(
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
)

328 
™tcomb
->
rssi_ a1
 = 
maö_rssi_avg
;

334 i‡(
™tcomb
->
rssi_ a2
 >á¡comb->
rssi_ a1
 +

335 
div_™t_c⁄f
->
 a1_ a2_swôch_dñè
)

336 
div_™t_c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

338 
div_™t_c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

340 i‡(
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA1
) {

341 i‡(
	`©h_is_Æt_™t_øtio_bëãr
(
™tcomb
, 
Æt_øtio
,

342 
ATH_ANT_DIV_COMB_LNA1_DELTA_HI
,

343 
ATH_ANT_DIV_COMB_LNA1_DELTA_LOW
,

344 
maö_rssi_avg
, 
Æt_rssi_avg
,

345 
™tcomb
->
tŸÆ_pkt_cou¡
))

346 
™tcomb
->
£c⁄d_øtio
 = 
åue
;

348 
™tcomb
->
£c⁄d_øtio
 = 
Ál£
;

349 } i‡(
™tcomb
->
maö_c⁄f
 =
ATH_ANT_DIV_COMB_LNA2
) {

350 i‡(
	`©h_is_Æt_™t_øtio_bëãr
(
™tcomb
, 
Æt_øtio
,

351 
ATH_ANT_DIV_COMB_LNA1_DELTA_MID
,

352 
ATH_ANT_DIV_COMB_LNA1_DELTA_LOW
,

353 
maö_rssi_avg
, 
Æt_rssi_avg
,

354 
™tcomb
->
tŸÆ_pkt_cou¡
))

355 
™tcomb
->
£c⁄d_øtio
 = 
åue
;

357 
™tcomb
->
£c⁄d_øtio
 = 
Ál£
;

359 i‡(
	`©h_is_Æt_™t_øtio_bëãr
(
™tcomb
, 
Æt_øtio
,

360 
ATH_ANT_DIV_COMB_LNA1_DELTA_HI
,

362 
maö_rssi_avg
, 
Æt_rssi_avg
,

363 
™tcomb
->
tŸÆ_pkt_cou¡
))

364 
™tcomb
->
£c⁄d_øtio
 = 
åue
;

366 
™tcomb
->
£c⁄d_øtio
 = 
Ál£
;

369 
	`©h_™t_£t_Æt_øtio
(
™tcomb
, 
div_™t_c⁄f
);

375 
	}
}

377 
	$©h_™t_div_c⁄f_Á°_divbüs
(
©h_hw_™tcomb_c⁄f
 *
™t_c⁄f
,

378 
©h_™t_comb
 *
™tcomb
,

379 
Æt_øtio
)

381 
™t_c⁄f
->
maö_gaötb
 = 0;

382 
™t_c⁄f
->
Æt_gaötb
 = 0;

384 i‡(
™t_c⁄f
->
div_group
 == 0) {

386 (
™t_c⁄f
->
maö_ a_c⁄f
 << 4) |

387 
™t_c⁄f
->
Æt_ a_c⁄f
) {

389 
™t_c⁄f
->
Á°_div_büs
 = 0x3b;

392 
™t_c⁄f
->
Á°_div_büs
 = 0x3d;

395 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

398 
™t_c⁄f
->
Á°_div_büs
 = 0x7;

401 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

404 
™t_c⁄f
->
Á°_div_büs
 = 0x7;

407 
™t_c⁄f
->
Á°_div_büs
 = 0x6;

410 
™t_c⁄f
->
Á°_div_büs
 = 0x0;

413 
™t_c⁄f
->
Á°_div_büs
 = 0x6;

416 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

419 
™t_c⁄f
->
Á°_div_büs
 = 0x3b;

422 
™t_c⁄f
->
Á°_div_büs
 = 0x3d;

427 } i‡(
™t_c⁄f
->
div_group
 == 1) {

429 (
™t_c⁄f
->
maö_ a_c⁄f
 << 4) |

430 
™t_c⁄f
->
Æt_ a_c⁄f
) {

432 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

435 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

438 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

441 i‡(!(
™tcomb
->
sˇn
) &&

442 (
Æt_øtio
 > 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO
))

443 
™t_c⁄f
->
Á°_div_büs
 = 0x3f;

445 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

448 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

451 i‡(!(
™tcomb
->
sˇn
) &&

452 (
Æt_øtio
 > 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO
))

453 
™t_c⁄f
->
Á°_div_büs
 = 0x3f;

455 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

458 i‡(!(
™tcomb
->
sˇn
) &&

459 (
Æt_øtio
 > 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO
))

460 
™t_c⁄f
->
Á°_div_büs
 = 0x3f;

462 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

465 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

468 i‡(!(
™tcomb
->
sˇn
) &&

469 (
Æt_øtio
 > 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO
))

470 
™t_c⁄f
->
Á°_div_büs
 = 0x3f;

472 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

475 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

478 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

481 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

486 } i‡(
™t_c⁄f
->
div_group
 == 2) {

488 (
™t_c⁄f
->
maö_ a_c⁄f
 << 4) |

489 
™t_c⁄f
->
Æt_ a_c⁄f
) {

491 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

494 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

497 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

500 i‡(!
™tcomb
->
sˇn
 && (
Æt_øtio
 >á¡comb->
™t_øtio
))

501 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

503 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

506 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

509 i‡(!
™tcomb
->
sˇn
 && (
Æt_øtio
 >á¡comb->
™t_øtio
))

510 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

512 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

515 i‡(!
™tcomb
->
sˇn
 && (
Æt_øtio
 >á¡comb->
™t_øtio
))

516 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

518 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

521 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

524 i‡(!
™tcomb
->
sˇn
 && (
Æt_øtio
 >á¡comb->
™t_øtio
))

525 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

527 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

530 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

533 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

536 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

542 i‡(
™tcomb
->
Á°_div_büs
)

543 
™t_c⁄f
->
Á°_div_büs
 = 
™tcomb
->fast_div_bias;

544 } i‡(
™t_c⁄f
->
div_group
 == 3) {

545 (
™t_c⁄f
->
maö_ a_c⁄f
 << 4) |

546 
™t_c⁄f
->
Æt_ a_c⁄f
) {

548 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

551 
™t_c⁄f
->
Á°_div_büs
 = 0x39;

554 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

557 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

560 
™t_c⁄f
->
Á°_div_büs
 = 0x3f;

563 
™t_c⁄f
->
Á°_div_büs
 = 0x2;

566 
™t_c⁄f
->
Á°_div_büs
 = 0x3;

569 
™t_c⁄f
->
Á°_div_büs
 = 0x3;

572 
™t_c⁄f
->
Á°_div_büs
 = 0x3;

575 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

578 
™t_c⁄f
->
Á°_div_büs
 = 0x6;

581 
™t_c⁄f
->
Á°_div_büs
 = 0x1;

587 
	}
}

589 
	$©h_™t_åy_sˇn
(
©h_™t_comb
 *
™tcomb
,

590 
©h_hw_™tcomb_c⁄f
 *
c⁄f
,

591 
cuº_Æt_£t
, 
Æt_rssi_avg
,

592 
maö_rssi_avg
)

594 
cuº_Æt_£t
) {

595 
ATH_ANT_DIV_COMB_LNA2
:

596 
™tcomb
->
rssi_ a2
 = 
Æt_rssi_avg
;

597 
™tcomb
->
rssi_ a1
 = 
maö_rssi_avg
;

598 
™tcomb
->
sˇn
 = 
åue
;

600 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

601 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

603 
ATH_ANT_DIV_COMB_LNA1
:

604 
™tcomb
->
rssi_ a1
 = 
Æt_rssi_avg
;

605 
™tcomb
->
rssi_ a2
 = 
maö_rssi_avg
;

606 
™tcomb
->
sˇn
 = 
åue
;

608 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

609 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

611 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
:

612 
™tcomb
->
rssi_add
 = 
Æt_rssi_avg
;

613 
™tcomb
->
sˇn
 = 
åue
;

615 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

617 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
:

618 
™tcomb
->
rssi_sub
 = 
Æt_rssi_avg
;

619 
™tcomb
->
sˇn
 = 
Ál£
;

620 i‡(
™tcomb
->
rssi_ a2
 >

621 (
™tcomb
->
rssi_ a1
 + 
c⁄f
->
 a1_ a2_swôch_dñè
)) {

623 i‡((
™tcomb
->
rssi_add
 >á¡comb->
rssi_ a1
) &&

624 (
™tcomb
->
rssi_add
 >á¡comb->
rssi_sub
)) {

626 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

627 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

628 } i‡(
™tcomb
->
rssi_sub
 >

629 
™tcomb
->
rssi_ a1
) {

631 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

632 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

635 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

636 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

640 i‡((
™tcomb
->
rssi_add
 >á¡comb->
rssi_ a2
) &&

641 (
™tcomb
->
rssi_add
 >á¡comb->
rssi_sub
)) {

643 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

644 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
;

645 } i‡(
™tcomb
->
rssi_sub
 >

646 
™tcomb
->
rssi_ a1
) {

648 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

649 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
;

652 
c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

653 
c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

660 
	}
}

662 
boﬁ
 
	$©h_™t_åy_swôch
(
©h_hw_™tcomb_c⁄f
 *
div_™t_c⁄f
,

663 
©h_™t_comb
 *
™tcomb
,

664 
Æt_øtio
, 
Æt_rssi_avg
,

665 
maö_rssi_avg
, 
cuº_maö_£t
,

666 
cuº_Æt_£t
)

668 
boﬁ
 
ªt
 = 
Ál£
;

670 i‡(
	`©h_™t_div_comb_Æt_check
(
div_™t_c⁄f
, 
™tcomb
, 
Æt_øtio
,

671 
Æt_rssi_avg
, 
maö_rssi_avg
)) {

672 i‡(
cuº_Æt_£t
 =
ATH_ANT_DIV_COMB_LNA2
) {

676 
div_™t_c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

677 
div_™t_c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

678 } i‡(
cuº_Æt_£t
 =
ATH_ANT_DIV_COMB_LNA1
) {

679 
div_™t_c⁄f
->
maö_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

680 
div_™t_c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

683 
ªt
 = 
åue
;

684 } i‡((
cuº_Æt_£t
 !
ATH_ANT_DIV_COMB_LNA1
) &&

685 (
cuº_Æt_£t
 !
ATH_ANT_DIV_COMB_LNA2
)) {

689 i‡(
cuº_maö_£t
 =
ATH_ANT_DIV_COMB_LNA2
)

690 
div_™t_c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA1
;

691 i‡(
cuº_maö_£t
 =
ATH_ANT_DIV_COMB_LNA1
)

692 
div_™t_c⁄f
->
Æt_ a_c⁄f
 = 
ATH_ANT_DIV_COMB_LNA2
;

694 
ªt
 = 
åue
;

697  
ªt
;

698 
	}
}

700 
boﬁ
 
	$©h_™t_sh‹t_sˇn_check
(
©h_™t_comb
 *
™tcomb
)

702 
Æt_øtio
;

704 i‡(!
™tcomb
->
sˇn
 || !™tcomb->
Æt_good
)

705  
Ál£
;

707 i‡(
	`time_a·î
(
jiffõs
, 
™tcomb
->
sˇn_°¨t_time
 +

708 
	`m£cs_to_jiffõs
(
ATH_ANT_DIV_COMB_SHORT_SCAN_INTR
)))

709  
åue
;

711 i‡(
™tcomb
->
tŸÆ_pkt_cou¡
 =
ATH_ANT_DIV_COMB_SHORT_SCAN_PKTCOUNT
) {

712 
Æt_øtio
 = ((
™tcomb
->
Æt_ªcv_˙t
 * 100) /

713 
™tcomb
->
tŸÆ_pkt_cou¡
);

714 i‡(
Æt_øtio
 < 
™tcomb
->
™t_øtio
)

715  
åue
;

718  
Ál£
;

719 
	}
}

721 
	$©h_™t_comb_sˇn
(
©h_so·c
 *
sc
, 
©h_rx_°©us
 *
rs
)

723 
©h_hw_™tcomb_c⁄f
 
div_™t_c⁄f
;

724 
©h_™t_comb
 *
™tcomb
 = &
sc
->
™t_comb
;

725 
Æt_øtio
 = 0, 
Æt_rssi_avg
 = 0, 
maö_rssi_avg
 = 0, 
cuº_Æt_£t
;

726 
cuº_maö_£t
;

727 
maö_rssi
 = 
rs
->
rs_rssi_˘l
[0];

728 
Æt_rssi
 = 
rs
->
rs_rssi_˘l
[1];

729 
rx_™t_c⁄f
, 
maö_™t_c⁄f
;

730 
boﬁ
 
sh‹t_sˇn
 = 
Ál£
, 
ªt
;

732 
rx_™t_c⁄f
 = (
rs
->
rs_rssi_˘l
[2] >> 
ATH_ANT_RX_CURRENT_SHIFT
) &

733 
ATH_ANT_RX_MASK
;

734 
maö_™t_c⁄f
 = (
rs
->
rs_rssi_˘l
[2] >> 
ATH_ANT_RX_MAIN_SHIFT
) &

735 
ATH_ANT_RX_MASK
;

737 i‡(
Æt_rssi
 >
™tcomb
->
low_rssi_thªsh
) {

738 
™tcomb
->
™t_øtio
 = 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO
;

739 
™tcomb
->
™t_øtio2
 = 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO2
;

741 
™tcomb
->
™t_øtio
 = 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO_LOW_RSSI
;

742 
™tcomb
->
™t_øtio2
 = 
ATH_ANT_DIV_COMB_ALT_ANT_RATIO2_LOW_RSSI
;

746 i‡(
maö_rssi
 > 0 && 
Æt_rssi
 > 0) {

747 
™tcomb
->
tŸÆ_pkt_cou¡
++;

748 
™tcomb
->
maö_tŸÆ_rssi
 +
maö_rssi
;

749 
™tcomb
->
Æt_tŸÆ_rssi
 +
Æt_rssi
;

751 i‡(
maö_™t_c⁄f
 =
rx_™t_c⁄f
)

752 
™tcomb
->
maö_ªcv_˙t
++;

754 
™tcomb
->
Æt_ªcv_˙t
++;

757 i‡(
maö_™t_c⁄f
 =
rx_™t_c⁄f
) {

758 
	`ANT_STAT_INC
(
ANT_MAIN
, 
ªcv_˙t
);

759 
	`ANT_LNA_INC
(
ANT_MAIN
, 
rx_™t_c⁄f
);

761 
	`ANT_STAT_INC
(
ANT_ALT
, 
ªcv_˙t
);

762 
	`ANT_LNA_INC
(
ANT_ALT
, 
rx_™t_c⁄f
);

766 
sh‹t_sˇn
 = 
	`©h_™t_sh‹t_sˇn_check
(
™tcomb
);

768 i‡(((
™tcomb
->
tŸÆ_pkt_cou¡
 < 
ATH_ANT_DIV_COMB_MAX_PKTCOUNT
) ||

769 
rs
->
rs_m‹óggr
Ë&& !
sh‹t_sˇn
)

772 i‡(
™tcomb
->
tŸÆ_pkt_cou¡
) {

773 
Æt_øtio
 = ((
™tcomb
->
Æt_ªcv_˙t
 * 100) /

774 
™tcomb
->
tŸÆ_pkt_cou¡
);

775 
maö_rssi_avg
 = (
™tcomb
->
maö_tŸÆ_rssi
 /

776 
™tcomb
->
tŸÆ_pkt_cou¡
);

777 
Æt_rssi_avg
 = (
™tcomb
->
Æt_tŸÆ_rssi
 /

778 
™tcomb
->
tŸÆ_pkt_cou¡
);

781 
	`©h9k_hw_™tdiv_comb_c⁄f_gë
(
sc
->
sc_ah
, &
div_™t_c⁄f
);

782 
cuº_Æt_£t
 = 
div_™t_c⁄f
.
Æt_ a_c⁄f
;

783 
cuº_maö_£t
 = 
div_™t_c⁄f
.
maö_ a_c⁄f
;

784 
™tcomb
->
cou¡
++;

786 i‡(
™tcomb
->
cou¡
 =
ATH_ANT_DIV_COMB_MAX_COUNT
) {

787 i‡(
Æt_øtio
 > 
™tcomb
->
™t_øtio
) {

788 
	`©h_ ac⁄f_Æt_good_sˇn
(
™tcomb
, 
div_™t_c⁄f
,

789 
maö_rssi_avg
);

790 
™tcomb
->
Æt_good
 = 
åue
;

792 
™tcomb
->
Æt_good
 = 
Ál£
;

795 
™tcomb
->
cou¡
 = 0;

796 
™tcomb
->
sˇn
 = 
åue
;

797 
™tcomb
->
sˇn_nŸ_°¨t
 = 
åue
;

800 i‡(!
™tcomb
->
sˇn
) {

801 
ªt
 = 
	`©h_™t_åy_swôch
(&
div_™t_c⁄f
, 
™tcomb
, 
Æt_øtio
,

802 
Æt_rssi_avg
, 
maö_rssi_avg
,

803 
cuº_maö_£t
, 
cuº_Æt_£t
);

804 i‡(
ªt
)

805 
div_comb_d⁄e
;

808 i‡(!
™tcomb
->
sˇn
 &&

809 (
Æt_rssi_avg
 < (
maö_rssi_avg
 + 
div_™t_c⁄f
.
 a1_ a2_dñè
)))

810 
div_comb_d⁄e
;

812 i‡(!
™tcomb
->
sˇn_nŸ_°¨t
) {

813 
	`©h_™t_åy_sˇn
(
™tcomb
, &
div_™t_c⁄f
, 
cuº_Æt_£t
,

814 
Æt_rssi_avg
, 
maö_rssi_avg
);

816 i‡(!
™tcomb
->
Æt_good
) {

817 
™tcomb
->
sˇn_nŸ_°¨t
 = 
Ál£
;

819 i‡(
cuº_maö_£t
 =
ATH_ANT_DIV_COMB_LNA2
) {

820 
div_™t_c⁄f
.
maö_ a_c⁄f
 =

821 
ATH_ANT_DIV_COMB_LNA2
;

822 
div_™t_c⁄f
.
Æt_ a_c⁄f
 =

823 
ATH_ANT_DIV_COMB_LNA1
;

824 } i‡(
cuº_maö_£t
 =
ATH_ANT_DIV_COMB_LNA1
) {

825 
div_™t_c⁄f
.
maö_ a_c⁄f
 =

826 
ATH_ANT_DIV_COMB_LNA1
;

827 
div_™t_c⁄f
.
Æt_ a_c⁄f
 =

828 
ATH_ANT_DIV_COMB_LNA2
;

830 
div_comb_d⁄e
;

832 
	`©h_£À˘_™t_div_‰om_quick_sˇn
(
™tcomb
, &
div_™t_c⁄f
,

833 
maö_rssi_avg
, 
Æt_rssi_avg
,

834 
Æt_øtio
);

835 
™tcomb
->
quick_sˇn_˙t
++;

838 
div_comb_d⁄e
:

839 
	`©h_™t_div_c⁄f_Á°_divbüs
(&
div_™t_c⁄f
, 
™tcomb
, 
Æt_øtio
);

840 
	`©h9k_hw_™tdiv_comb_c⁄f_£t
(
sc
->
sc_ah
, &
div_™t_c⁄f
);

841 
	`©h9k_debug_°©_™t
(
sc
, &
div_™t_c⁄f
, 
maö_rssi_avg
, 
Æt_rssi_avg
);

843 
™tcomb
->
sˇn_°¨t_time
 = 
jiffõs
;

844 
™tcomb
->
tŸÆ_pkt_cou¡
 = 0;

845 
™tcomb
->
maö_tŸÆ_rssi
 = 0;

846 
™tcomb
->
Æt_tŸÆ_rssi
 = 0;

847 
™tcomb
->
maö_ªcv_˙t
 = 0;

848 
™tcomb
->
Æt_ªcv_˙t
 = 0;

849 
	}
}

	@ar5008_initvals.h

17 c⁄° 
u32
 
	g¨5416Modes
[][5] = {

84 c⁄° 
u32
 
	g¨5416Comm⁄
[][2] = {

462 c⁄° 
u32
 
	g¨5416B™k0
[][2] = {

468 c⁄° 
u32
 
	g¨5416BB_RfGaö
[][3] = {

536 c⁄° 
u32
 
	g¨5416B™k1
[][2] = {

542 c⁄° 
u32
 
	g¨5416B™k2
[][2] = {

548 c⁄° 
u32
 
	g¨5416B™k3
[][3] = {

553 c⁄° 
u32
 
	g¨5416B™k6
[][3] = {

590 c⁄° 
u32
 
	g¨5416B™k6TPC
[][3] = {

627 c⁄° 
u32
 
	g¨5416B™k7
[][2] = {

634 c⁄° 
u32
 
	g¨5416Addac
[][2] = {

	@ar5008_phy.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~"../ªgd.h
"

20 
	~"¨9002_phy.h
"

21 
	~"¨5008_öôvÆs.h
"

25 
	#AR5008_OFDM_RATES
 8

	)

26 
	#AR5008_HT_SS_RATES
 8

	)

27 
	#AR5008_HT_DS_RATES
 8

	)

29 
	#AR5008_HT20_SHIFT
 16

	)

30 
	#AR5008_HT40_SHIFT
 24

	)

32 
	#AR5008_11NA_OFDM_SHIFT
 0

	)

33 
	#AR5008_11NA_HT_SS_SHIFT
 8

	)

34 
	#AR5008_11NA_HT_DS_SHIFT
 16

	)

36 
	#AR5008_11NG_OFDM_SHIFT
 4

	)

37 
	#AR5008_11NG_HT_SS_SHIFT
 12

	)

38 
	#AR5008_11NG_HT_DS_SHIFT
 20

	)

40 c⁄° 
	gfú°ï_èbÀ
[] =

47 c⁄° 
	gm1ThªshLow_off
 = 127;

48 c⁄° 
	gm2ThªshLow_off
 = 127;

49 c⁄° 
	gm1Thªsh_off
 = 127;

50 c⁄° 
	gm2Thªsh_off
 = 127;

51 c⁄° 
	gm2Cou¡Thr_off
 = 31;

52 c⁄° 
	gm2Cou¡ThrLow_off
 = 63;

53 c⁄° 
	gm1ThªshLowExt_off
 = 127;

54 c⁄° 
	gm2ThªshLowExt_off
 = 127;

55 c⁄° 
	gm1ThªshExt_off
 = 127;

56 c⁄° 
	gm2ThªshExt_off
 = 127;

58 c⁄° 
¨5416IniAºay
 
	gb™k0
 = 
STATIC_INI_ARRAY
(
¨5416B™k0
);

59 c⁄° 
¨5416IniAºay
 
	gb™k1
 = 
STATIC_INI_ARRAY
(
¨5416B™k1
);

60 c⁄° 
¨5416IniAºay
 
	gb™k2
 = 
STATIC_INI_ARRAY
(
¨5416B™k2
);

61 c⁄° 
¨5416IniAºay
 
	gb™k3
 = 
STATIC_INI_ARRAY
(
¨5416B™k3
);

62 c⁄° 
¨5416IniAºay
 
	gb™k7
 = 
STATIC_INI_ARRAY
(
¨5416B™k7
);

64 
	$¨5008_wrôe_b™k6
(
©h_hw
 *
ah
, *
wrôe˙t
)

66 
¨5416IniAºay
 *
¨øy
 = &
ah
->
öiB™k6
;

67 
u32
 *
d©a
 = 
ah
->
™ÆogB™k6D©a
;

68 
r
;

70 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

72 
r
 = 0;Ñ < 
¨øy
->
ü_rows
;Ñ++) {

73 
	`REG_WRITE
(
ah
, 
	`INI_RA
(
¨øy
, 
r
, 0), 
d©a
[r]);

74 
	`DO_DELAY
(*
wrôe˙t
);

77 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

78 
	}
}

91 
	$¨5008_hw_phy_modify_rx_buf„r
(
u32
 *
rfBuf
, u32 
ªg32
,

92 
u32
 
numBôs
, u32 
fú°Bô
,

93 
u32
 
cﬁumn
)

95 
u32
 
tmp32
, 
mask
, 
¨øyE¡ry
, 
œ°Bô
;

96 
öt32_t
 
bôPosôi⁄
, 
bôsLe·
;

98 
tmp32
 = 
	`©h9k_hw_ªvî£_bôs
(
ªg32
, 
numBôs
);

99 
¨øyE¡ry
 = (
fú°Bô
 - 1) / 8;

100 
bôPosôi⁄
 = (
fú°Bô
 - 1) % 8;

101 
bôsLe·
 = 
numBôs
;

102 
bôsLe·
 > 0) {

103 
œ°Bô
 = (
bôPosôi⁄
 + 
bôsLe·
 > 8) ?

104 8 : 
bôPosôi⁄
 + 
bôsLe·
;

105 
mask
 = (((1 << 
œ°Bô
Ë- 1Ë^ ((1 << 
bôPosôi⁄
) - 1)) <<

106 (
cﬁumn
 * 8);

107 
rfBuf
[
¨øyE¡ry
] &~
mask
;

108 
rfBuf
[
¨øyE¡ry
] |((
tmp32
 << 
bôPosôi⁄
) <<

109 (
cﬁumn
 * 8)Ë& 
mask
;

110 
bôsLe·
 -8 - 
bôPosôi⁄
;

111 
tmp32
 =Åmp32 >> (8 - 
bôPosôi⁄
);

112 
bôPosôi⁄
 = 0;

113 
¨øyE¡ry
++;

115 
	}
}

144 
	$¨5008_hw_f‹˚_büs
(
©h_hw
 *
ah
, 
u16
 
sy¡h_‰eq
)

146 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

147 
u32
 
tmp_ªg
;

148 
ªg_wrôes
 = 0;

149 
u32
 
√w_büs
 = 0;

151 i‡(!
	`AR_SREV_5416
(
ah
Ë|| 
sy¡h_‰eq
 >= 3000)

154 
	`BUG_ON
(
	`AR_SREV_9280_20_OR_LATER
(
ah
));

156 i‡(
sy¡h_‰eq
 < 2412)

157 
√w_büs
 = 0;

158 i‡(
sy¡h_‰eq
 < 2422)

159 
√w_büs
 = 1;

161 
√w_büs
 = 2;

164 
tmp_ªg
 = 
	`©h9k_hw_ªvî£_bôs
(
√w_büs
, 3);

166 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "ForceÑf_pwd_icsyndivÅo %1d on %4d\n",

167 
√w_büs
, 
sy¡h_‰eq
);

170 
	`¨5008_hw_phy_modify_rx_buf„r
(
ah
->
™ÆogB™k6D©a
, 
tmp_ªg
, 3, 181, 3);

173 
	`¨5008_wrôe_b™k6
(
ah
, &
ªg_wrôes
);

174 
	}
}

185 
	$¨5008_hw_£t_ch™√l
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

187 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

188 
u32
 
ch™√lSñ
 = 0;

189 
u32
 
bModeSy¡h
 = 0;

190 
u32
 
aModeRefSñ
 = 0;

191 
u32
 
ªg32
 = 0;

192 
u16
 
‰eq
;

193 
ch™_˚¡îs
 
˚¡îs
;

195 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

196 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

198 i‡(
‰eq
 < 4800) {

199 
u32
 
tx˘l
;

201 i‡(((
‰eq
 - 2192) % 5) == 0) {

202 
ch™√lSñ
 = ((
‰eq
 - 672) * 2 - 3040) / 10;

203 
bModeSy¡h
 = 0;

204 } i‡(((
‰eq
 - 2224) % 5) == 0) {

205 
ch™√lSñ
 = ((
‰eq
 - 704) * 2 - 3040) / 10;

206 
bModeSy¡h
 = 1;

208 
	`©h_îr
(
comm⁄
, "InvÆid ch™√»%u MHz\n", 
‰eq
);

209  -
EINVAL
;

212 
ch™√lSñ
 = (channelSel << 2) & 0xff;

213 
ch™√lSñ
 = 
	`©h9k_hw_ªvî£_bôs
(channelSel, 8);

215 
tx˘l
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_TX_CTRL
);

216 i‡(
‰eq
 == 2484) {

218 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_TX_CTRL
,

219 
tx˘l
 | 
AR_PHY_CCK_TX_CTRL_JAPAN
);

221 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_TX_CTRL
,

222 
tx˘l
 & ~
AR_PHY_CCK_TX_CTRL_JAPAN
);

225 } i‡((
‰eq
 % 20) == 0 && freq >= 5120) {

226 
ch™√lSñ
 =

227 
	`©h9k_hw_ªvî£_bôs
(((
‰eq
 - 4800) / 20 << 2), 8);

228 
aModeRefSñ
 = 
	`©h9k_hw_ªvî£_bôs
(1, 2);

229 } i‡((
‰eq
 % 10) == 0) {

230 
ch™√lSñ
 =

231 
	`©h9k_hw_ªvî£_bôs
(((
‰eq
 - 4800) / 10 << 1), 8);

232 i‡(
	`AR_SREV_9100
(
ah
Ë|| 
	`AR_SREV_9160_10_OR_LATER
(ah))

233 
aModeRefSñ
 = 
	`©h9k_hw_ªvî£_bôs
(2, 2);

235 
aModeRefSñ
 = 
	`©h9k_hw_ªvî£_bôs
(1, 2);

236 } i‡((
‰eq
 % 5) == 0) {

237 
ch™√lSñ
 = 
	`©h9k_hw_ªvî£_bôs
((
‰eq
 - 4800) / 5, 8);

238 
aModeRefSñ
 = 
	`©h9k_hw_ªvî£_bôs
(1, 2);

240 
	`©h_îr
(
comm⁄
, "InvÆid ch™√»%u MHz\n", 
‰eq
);

241  -
EINVAL
;

244 
	`¨5008_hw_f‹˚_büs
(
ah
, 
‰eq
);

246 
ªg32
 =

247 (
ch™√lSñ
 << 8Ë| (
aModeRefSñ
 << 2Ë| (
bModeSy¡h
 << 1) |

250 
	`REG_WRITE
(
ah
, 
	`AR_PHY
(0x37), 
ªg32
);

252 
ah
->
curch™
 = 
ch™
;

255 
	}
}

257 
	$¨5008_hw_cmn_•ur_môig©e
(
©h_hw
 *
ah
,

258 
©h9k_ch™√l
 *
ch™
, 
bö
)

260 
cur_bö
;

261 
uµî
, 
lowî
, 
cur_vô_mask
;

262 
i
;

263 
öt8_t
 
mask_m
[123];

264 
öt8_t
 
mask_p
[123];

265 
öt8_t
 
mask_amt
;

266 
tmp_mask
;

267 c⁄° 
pûŸ_mask_ªg
[4] = {

268 
AR_PHY_TIMING7
, 
AR_PHY_TIMING8
,

269 
AR_PHY_PILOT_MASK_01_30
, 
AR_PHY_PILOT_MASK_31_60


271 c⁄° 
ch™_mask_ªg
[4] = {

272 
AR_PHY_TIMING9
, 
AR_PHY_TIMING10
,

273 
AR_PHY_CHANNEL_MASK_01_30
, 
AR_PHY_CHANNEL_MASK_31_60


275 c⁄° 
öc
[4] = { 0, 100, 0, 0 };

277 
	`mem£t
(&
mask_m
, 0, (
öt8_t
) * 123);

278 
	`mem£t
(&
mask_p
, 0, (
öt8_t
) * 123);

280 
cur_bö
 = -6000;

281 
uµî
 = 
bö
 + 100;

282 
lowî
 = 
bö
 - 100;

284 
i
 = 0; i < 4; i++) {

285 
pûŸ_mask
 = 0;

286 
ch™_mask
 = 0;

287 
bp
 = 0;

289 
bp
 = 0; bp < 30; bp++) {

290 i‡((
cur_bö
 > 
lowî
Ë&& (cur_bö < 
uµî
)) {

291 
pûŸ_mask
 =ÖûŸ_mask | 0x1 << 
bp
;

292 
ch™_mask
 = ch™_mask | 0x1 << 
bp
;

294 
cur_bö
 += 100;

296 
cur_bö
 +
öc
[
i
];

297 
	`REG_WRITE
(
ah
, 
pûŸ_mask_ªg
[
i
], 
pûŸ_mask
);

298 
	`REG_WRITE
(
ah
, 
ch™_mask_ªg
[
i
], 
ch™_mask
);

301 
cur_vô_mask
 = 6100;

302 
uµî
 = 
bö
 + 120;

303 
lowî
 = 
bö
 - 120;

305 
i
 = 0; i < 123; i++) {

306 i‡((
cur_vô_mask
 > 
lowî
Ë&& (cur_vô_mask < 
uµî
)) {

308 vﬁ©ûê
tmp_v
 = 
	`abs
(
cur_vô_mask
 - 
bö
);

310 i‡(
tmp_v
 < 75)

311 
mask_amt
 = 1;

313 
mask_amt
 = 0;

314 i‡(
cur_vô_mask
 < 0)

315 
mask_m
[
	`abs
(
cur_vô_mask
 / 100)] = 
mask_amt
;

317 
mask_p
[
cur_vô_mask
 / 100] = 
mask_amt
;

319 
cur_vô_mask
 -= 100;

322 
tmp_mask
 = (
mask_m
[46] << 30) | (mask_m[47] << 28)

323 | (
mask_m
[48] << 26) | (mask_m[49] << 24)

324 | (
mask_m
[50] << 22) | (mask_m[51] << 20)

325 | (
mask_m
[52] << 18) | (mask_m[53] << 16)

326 | (
mask_m
[54] << 14) | (mask_m[55] << 12)

327 | (
mask_m
[56] << 10) | (mask_m[57] << 8)

328 | (
mask_m
[58] << 6) | (mask_m[59] << 4)

329 | (
mask_m
[60] << 2) | (mask_m[61] << 0);

330 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK_1
, 
tmp_mask
);

331 
	`REG_WRITE
(
ah
, 
AR_PHY_VIT_MASK2_M_46_61
, 
tmp_mask
);

333 
tmp_mask
 = (
mask_m
[31] << 28)

334 | (
mask_m
[32] << 26) | (mask_m[33] << 24)

335 | (
mask_m
[34] << 22) | (mask_m[35] << 20)

336 | (
mask_m
[36] << 18) | (mask_m[37] << 16)

337 | (
mask_m
[48] << 14) | (mask_m[39] << 12)

338 | (
mask_m
[40] << 10) | (mask_m[41] << 8)

339 | (
mask_m
[42] << 6) | (mask_m[43] << 4)

340 | (
mask_m
[44] << 2) | (mask_m[45] << 0);

341 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK_2
, 
tmp_mask
);

342 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_M_31_45
, 
tmp_mask
);

344 
tmp_mask
 = (
mask_m
[16] << 30) | (mask_m[16] << 28)

345 | (
mask_m
[18] << 26) | (mask_m[18] << 24)

346 | (
mask_m
[20] << 22) | (mask_m[20] << 20)

347 | (
mask_m
[22] << 18) | (mask_m[22] << 16)

348 | (
mask_m
[24] << 14) | (mask_m[24] << 12)

349 | (
mask_m
[25] << 10) | (mask_m[26] << 8)

350 | (
mask_m
[27] << 6) | (mask_m[28] << 4)

351 | (
mask_m
[29] << 2) | (mask_m[30] << 0);

352 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK_3
, 
tmp_mask
);

353 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_M_16_30
, 
tmp_mask
);

355 
tmp_mask
 = (
mask_m
[0] << 30) | (mask_m[1] << 28)

356 | (
mask_m
[2] << 26) | (mask_m[3] << 24)

357 | (
mask_m
[4] << 22) | (mask_m[5] << 20)

358 | (
mask_m
[6] << 18) | (mask_m[7] << 16)

359 | (
mask_m
[8] << 14) | (mask_m[9] << 12)

360 | (
mask_m
[10] << 10) | (mask_m[11] << 8)

361 | (
mask_m
[12] << 6) | (mask_m[13] << 4)

362 | (
mask_m
[14] << 2) | (mask_m[15] << 0);

363 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK_CTL
, 
tmp_mask
);

364 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_M_00_15
, 
tmp_mask
);

366 
tmp_mask
 = (
mask_p
[15] << 28)

367 | (
mask_p
[14] << 26) | (mask_p[13] << 24)

368 | (
mask_p
[12] << 22) | (mask_p[11] << 20)

369 | (
mask_p
[10] << 18) | (mask_p[9] << 16)

370 | (
mask_p
[8] << 14) | (mask_p[7] << 12)

371 | (
mask_p
[6] << 10) | (mask_p[5] << 8)

372 | (
mask_p
[4] << 6) | (mask_p[3] << 4)

373 | (
mask_p
[2] << 2) | (mask_p[1] << 0);

374 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK2_1
, 
tmp_mask
);

375 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_P_15_01
, 
tmp_mask
);

377 
tmp_mask
 = (
mask_p
[30] << 28)

378 | (
mask_p
[29] << 26) | (mask_p[28] << 24)

379 | (
mask_p
[27] << 22) | (mask_p[26] << 20)

380 | (
mask_p
[25] << 18) | (mask_p[24] << 16)

381 | (
mask_p
[23] << 14) | (mask_p[22] << 12)

382 | (
mask_p
[21] << 10) | (mask_p[20] << 8)

383 | (
mask_p
[19] << 6) | (mask_p[18] << 4)

384 | (
mask_p
[17] << 2) | (mask_p[16] << 0);

385 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK2_2
, 
tmp_mask
);

386 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_P_30_16
, 
tmp_mask
);

388 
tmp_mask
 = (
mask_p
[45] << 28)

389 | (
mask_p
[44] << 26) | (mask_p[43] << 24)

390 | (
mask_p
[42] << 22) | (mask_p[41] << 20)

391 | (
mask_p
[40] << 18) | (mask_p[39] << 16)

392 | (
mask_p
[38] << 14) | (mask_p[37] << 12)

393 | (
mask_p
[36] << 10) | (mask_p[35] << 8)

394 | (
mask_p
[34] << 6) | (mask_p[33] << 4)

395 | (
mask_p
[32] << 2) | (mask_p[31] << 0);

396 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK2_3
, 
tmp_mask
);

397 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_P_45_31
, 
tmp_mask
);

399 
tmp_mask
 = (
mask_p
[61] << 30) | (mask_p[60] << 28)

400 | (
mask_p
[59] << 26) | (mask_p[58] << 24)

401 | (
mask_p
[57] << 22) | (mask_p[56] << 20)

402 | (
mask_p
[55] << 18) | (mask_p[54] << 16)

403 | (
mask_p
[53] << 14) | (mask_p[52] << 12)

404 | (
mask_p
[51] << 10) | (mask_p[50] << 8)

405 | (
mask_p
[49] << 6) | (mask_p[48] << 4)

406 | (
mask_p
[47] << 2) | (mask_p[46] << 0);

407 
	`REG_WRITE
(
ah
, 
AR_PHY_BIN_MASK2_4
, 
tmp_mask
);

408 
	`REG_WRITE
(
ah
, 
AR_PHY_MASK2_P_61_45
, 
tmp_mask
);

409 
	}
}

419 
	$¨5008_hw_•ur_môig©e
(
©h_hw
 *
ah
,

420 
©h9k_ch™√l
 *
ch™
)

422 
bb_•ur
 = 
AR_NO_SPUR
;

423 
bö
;

424 
•ur_‰eq_sd
;

425 
•ur_dñè_pha£
;

426 
díomö©‹
;

427 
tmp
, 
√w
;

428 
i
;

430 
cur_bb_•ur
;

431 
boﬁ
 
is2GHz
 = 
	`IS_CHAN_2GHZ
(
ch™
);

433 
i
 = 0; i < 
AR_EEPROM_MODAL_SPURS
; i++) {

434 
cur_bb_•ur
 = 
ah
->
ìp_›s
->
	`gë_•ur_ch™√l
◊h, 
i
, 
is2GHz
);

435 i‡(
AR_NO_SPUR
 =
cur_bb_•ur
)

437 
cur_bb_•ur
 = cur_bb_•u∏- (
ch™
->
ch™√l
 * 10);

438 i‡((
cur_bb_•ur
 > -95) && (cur_bb_spur < 95)) {

439 
bb_•ur
 = 
cur_bb_•ur
;

444 i‡(
AR_NO_SPUR
 =
bb_•ur
)

447 
bö
 = 
bb_•ur
 * 32;

449 
tmp
 = 
	`REG_READ
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0));

450 
√w
 = 
tmp
 | (
AR_PHY_TIMING_CTRL4_ENABLE_SPUR_RSSI
 |

451 
AR_PHY_TIMING_CTRL4_ENABLE_SPUR_FILTER
 |

452 
AR_PHY_TIMING_CTRL4_ENABLE_CHAN_MASK
 |

453 
AR_PHY_TIMING_CTRL4_ENABLE_PILOT_MASK
);

455 
	`REG_WRITE
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0), 
√w
);

457 
√w
 = (
AR_PHY_SPUR_REG_MASK_RATE_CNTL
 |

458 
AR_PHY_SPUR_REG_ENABLE_MASK_PPM
 |

459 
AR_PHY_SPUR_REG_MASK_RATE_SELECT
 |

460 
AR_PHY_SPUR_REG_ENABLE_VIT_SPUR_RSSI
 |

461 
	`SM
(
SPUR_RSSI_THRESH
, 
AR_PHY_SPUR_REG_SPUR_RSSI_THRESH
));

462 
	`REG_WRITE
(
ah
, 
AR_PHY_SPUR_REG
, 
√w
);

464 
•ur_dñè_pha£
 = ((
bb_•ur
 * 524288) / 100) &

465 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
;

467 
díomö©‹
 = 
	`IS_CHAN_2GHZ
(
ch™
) ? 440 : 400;

468 
•ur_‰eq_sd
 = ((
bb_•ur
 * 2048Ë/ 
díomö©‹
) & 0x3ff;

470 
√w
 = (
AR_PHY_TIMING11_USE_SPUR_IN_AGC
 |

471 
	`SM
(
•ur_‰eq_sd
, 
AR_PHY_TIMING11_SPUR_FREQ_SD
) |

472 
	`SM
(
•ur_dñè_pha£
, 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
));

473 
	`REG_WRITE
(
ah
, 
AR_PHY_TIMING11
, 
√w
);

475 
	`¨5008_hw_cmn_•ur_môig©e
(
ah
, 
ch™
, 
bö
);

476 
	}
}

484 
	$¨5008_hw_rf_Æloc_ext_b™ks
(
©h_hw
 *
ah
)

486 
size
 = 
ah
->
öiB™k6
.
ü_rows
 * (
u32
);

488 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

491 
ah
->
™ÆogB™k6D©a
 = 
	`devm_kzÆloc
◊h->
dev
, 
size
, 
GFP_KERNEL
);

492 i‡(!
ah
->
™ÆogB™k6D©a
)

493  -
ENOMEM
;

496 
	}
}

511 
boﬁ
 
	$¨5008_hw_£t_rf_ªgs
(
©h_hw
 *
ah
,

512 
©h9k_ch™√l
 *
ch™
,

513 
u16
 
modesIndex
)

515 
u32
 
ìpMö‹Rev
;

516 
u32
 
ob5GHz
 = 0, 
db5GHz
 = 0;

517 
u32
 
ob2GHz
 = 0, 
db2GHz
 = 0;

518 
ªgWrôes
 = 0;

519 
i
;

526 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

527  
åue
;

530 
ìpMö‹Rev
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_MINOR_REV
);

532 
i
 = 0; i < 
ah
->
öiB™k6
.
ü_rows
; i++)

533 
ah
->
™ÆogB™k6D©a
[
i
] = 
	`INI_RA
(&ah->
öiB™k6
, i, 
modesIndex
);

536 i‡(
ìpMö‹Rev
 >= 2) {

537 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

538 
ob2GHz
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_OB_2
);

539 
db2GHz
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_DB_2
);

540 
	`¨5008_hw_phy_modify_rx_buf„r
(
ah
->
™ÆogB™k6D©a
,

541 
ob2GHz
, 3, 197, 0);

542 
	`¨5008_hw_phy_modify_rx_buf„r
(
ah
->
™ÆogB™k6D©a
,

543 
db2GHz
, 3, 194, 0);

545 
ob5GHz
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_OB_5
);

546 
db5GHz
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_DB_5
);

547 
	`¨5008_hw_phy_modify_rx_buf„r
(
ah
->
™ÆogB™k6D©a
,

548 
ob5GHz
, 3, 203, 0);

549 
	`¨5008_hw_phy_modify_rx_buf„r
(
ah
->
™ÆogB™k6D©a
,

550 
db5GHz
, 3, 200, 0);

555 
	`REG_WRITE_ARRAY
(&
b™k0
, 1, 
ªgWrôes
);

556 
	`REG_WRITE_ARRAY
(&
b™k1
, 1, 
ªgWrôes
);

557 
	`REG_WRITE_ARRAY
(&
b™k2
, 1, 
ªgWrôes
);

558 
	`REG_WRITE_ARRAY
(&
b™k3
, 
modesIndex
, 
ªgWrôes
);

559 
	`¨5008_wrôe_b™k6
(
ah
, &
ªgWrôes
);

560 
	`REG_WRITE_ARRAY
(&
b™k7
, 1, 
ªgWrôes
);

562  
åue
;

563 
	}
}

565 
	$¨5008_hw_öô_bb
(
©h_hw
 *
ah
,

566 
©h9k_ch™√l
 *
ch™
)

568 
u32
 
sy¡hDñay
;

570 
sy¡hDñay
 = 
	`REG_READ
(
ah
, 
AR_PHY_RX_DELAY
Ë& 
AR_PHY_RX_DELAY_DELAY
;

572 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

574 
	`©h9k_hw_sy¡h_dñay
(
ah
, 
ch™
, 
sy¡hDñay
);

575 
	}
}

577 
	$¨5008_hw_öô_chaö_masks
(
©h_hw
 *
ah
)

579 
rx_chaömask
, 
tx_chaömask
;

581 
rx_chaömask
 = 
ah
->
rxchaömask
;

582 
tx_chaömask
 = 
ah
->
txchaömask
;

585 
rx_chaömask
) {

587 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ANALOG_SWAP
,

588 
AR_PHY_SWAP_ALT_CHAIN
);

590 i‡(
ah
->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_REVISION_5416_10
) {

591 
	`REG_WRITE
(
ah
, 
AR_PHY_RX_CHAINMASK
, 0x7);

592 
	`REG_WRITE
(
ah
, 
AR_PHY_CAL_CHAINMASK
, 0x7);

598 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

599 
	`REG_WRITE
(
ah
, 
AR_PHY_RX_CHAINMASK
, 
rx_chaömask
);

600 
	`REG_WRITE
(
ah
, 
AR_PHY_CAL_CHAINMASK
, 
rx_chaömask
);

603 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

607 
	`REG_WRITE
(
ah
, 
AR_SELFGEN_MASK
, 
tx_chaömask
);

609 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

611 i‡(
tx_chaömask
 == 0x5) {

612 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ANALOG_SWAP
,

613 
AR_PHY_SWAP_ALT_CHAIN
);

615 i‡(
	`AR_SREV_9100
(
ah
))

616 
	`REG_WRITE
(
ah
, 
AR_PHY_ANALOG_SWAP
,

617 
	`REG_READ
(
ah
, 
AR_PHY_ANALOG_SWAP
) | 0x00000001);

618 
	}
}

620 
	$¨5008_hw_ovîride_öi
(
©h_hw
 *
ah
,

621 
©h9k_ch™√l
 *
ch™
)

623 
u32
 
vÆ
;

630 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
, (
AR_DIAG_RX_DIS
 | 
AR_DIAG_RX_ABORT
));

632 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

640 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PCU_MISC_MODE2
) &

641 (~
AR_ADHOC_MCAST_KEYID_ENABLE
);

643 i‡(!
	`AR_SREV_9271
(
ah
))

644 
vÆ
 &~
AR_PCU_MISC_MODE2_HWWAR1
;

646 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
))

647 
vÆ
 = vÆ & (~
AR_PCU_MISC_MODE2_HWWAR2
);

649 
vÆ
 |
AR_PCU_MISC_MODE2_CFP_IGNORE
;

651 
	`REG_WRITE
(
ah
, 
AR_PCU_MISC_MODE2
, 
vÆ
);

654 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

660 
	`REG_WRITE
(
ah
, 0x9800 + (651 << 2), 0x11);

666 i‡(
	`AR_SREV_9100
(
ah
Ë|| 
	`AR_SREV_9160
(ah)) {

667 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_HEAVY_CLIP_FACTOR_RIFS
);

668 
vÆ
 &~
AR_PHY_RIFS_INIT_DELAY
;

669 
	`REG_WRITE
(
ah
, 
AR_PHY_HEAVY_CLIP_FACTOR_RIFS
, 
vÆ
);

671 
	}
}

673 
	$¨5008_hw_£t_ch™√l_ªgs
(
©h_hw
 *
ah
,

674 
©h9k_ch™√l
 *
ch™
)

676 
u32
 
phymode
;

677 
u32
 
íabÀDacFifo
 = 0;

679 i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
))

680 
íabÀDacFifo
 = (
	`REG_READ
(
ah
, 
AR_PHY_TURBO
) &

681 
AR_PHY_FC_ENABLE_DAC_FIFO
);

683 
phymode
 = 
AR_PHY_FC_HT_EN
 | 
AR_PHY_FC_SHORT_GI_40


684 | 
AR_PHY_FC_SINGLE_HT_LTF1
 | 
AR_PHY_FC_WALSH
 | 
íabÀDacFifo
;

686 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

687 
phymode
 |
AR_PHY_FC_DYN2040_EN
;

689 i‡(
	`IS_CHAN_HT40PLUS
(
ch™
))

690 
phymode
 |
AR_PHY_FC_DYN2040_PRI_CH
;

693 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

694 
	`REG_WRITE
(
ah
, 
AR_PHY_TURBO
, 
phymode
);

698 
	`©h9k_hw_£t11nmac2040
(
ah
, 
ch™
);

700 
	`REG_WRITE
(
ah
, 
AR_GTXTO
, 25 << 
AR_GTXTO_TIMEOUT_LIMIT_S
);

701 
	`REG_WRITE
(
ah
, 
AR_CST
, 0xF << 
AR_CST_TIMEOUT_LIMIT_S
);

703 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

704 
	}
}

707 
	$¨5008_hw_¥o˚ss_öi
(
©h_hw
 *
ah
,

708 
©h9k_ch™√l
 *
ch™
)

710 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

711 
i
, 
ªgWrôes
 = 0;

712 
u32
 
modesIndex
, 
‰eqIndex
;

714 i‡(
	`IS_CHAN_5GHZ
(
ch™
)) {

715 
‰eqIndex
 = 1;

716 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 2 : 1;

718 
‰eqIndex
 = 2;

719 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 3 : 4;

726 
	`REG_WRITE
(
ah
, 
	`AR_PHY
(0), 0x00000007);

729 
	`REG_WRITE
(
ah
, 
AR_PHY_ADC_SERIAL_CTL
, 
AR_PHY_SEL_EXTERNAL_RADIO
);

730 i‡(
ah
->
ìp_›s
->
£t_addac
)

731 
ah
->
ìp_›s
->
	`£t_addac
◊h, 
ch™
);

733 
	`REG_WRITE_ARRAY
(&
ah
->
öiAddac
, 1, 
ªgWrôes
);

734 
	`REG_WRITE
(
ah
, 
AR_PHY_ADC_SERIAL_CTL
, 
AR_PHY_SEL_INTERNAL_ADDAC
);

736 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

738 
i
 = 0; i < 
ah
->
öiModes
.
ü_rows
; i++) {

739 
u32
 
ªg
 = 
	`INI_RA
(&
ah
->
öiModes
, 
i
, 0);

740 
u32
 
vÆ
 = 
	`INI_RA
(&
ah
->
öiModes
, 
i
, 
modesIndex
);

742 i‡(
ªg
 =
AR_AN_TOP2
 && 
ah
->
√ed_™_t›2_fixup
)

743 
vÆ
 &~
AR_AN_TOP2_PWDCLKIND
;

745 
	`REG_WRITE
(
ah
, 
ªg
, 
vÆ
);

747 i‡(
ªg
 >= 0x7800 &&Ñeg < 0x78a0

748 && 
ah
->
c⁄fig
.
™Æog_shi·ªg


749 && (
comm⁄
->
bus_›s
->
©h_bus_ty≥
 !
ATH_USB
)) {

750 
	`udñay
(100);

753 
	`DO_DELAY
(
ªgWrôes
);

756 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

758 i‡(
	`AR_SREV_9280
(
ah
Ë|| 
	`AR_SREV_9287_11_OR_LATER
(ah))

759 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesRxGaö
, 
modesIndex
, 
ªgWrôes
);

761 i‡(
	`AR_SREV_9280
(
ah
Ë|| 
	`AR_SREV_9285_12_OR_LATER
(ah) ||

762 
	`AR_SREV_9287_11_OR_LATER
(
ah
))

763 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesTxGaö
, 
modesIndex
, 
ªgWrôes
);

765 i‡(
	`AR_SREV_9271_10
(
ah
)) {

766 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
, 
AR_PHY_SPECTRAL_SCAN_ENA
);

767 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL3
, 
AR_PHY_TX_END_TO_ADC_ON
, 0xa);

770 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

773 
i
 = 0; i < 
ah
->
öiComm⁄
.
ü_rows
; i++) {

774 
u32
 
ªg
 = 
	`INI_RA
(&
ah
->
öiComm⁄
, 
i
, 0);

775 
u32
 
vÆ
 = 
	`INI_RA
(&
ah
->
öiComm⁄
, 
i
, 1);

777 
	`REG_WRITE
(
ah
, 
ªg
, 
vÆ
);

779 i‡(
ªg
 >= 0x7800 &&Ñeg < 0x78a0

780 && 
ah
->
c⁄fig
.
™Æog_shi·ªg


781 && (
comm⁄
->
bus_›s
->
©h_bus_ty≥
 !
ATH_USB
)) {

782 
	`udñay
(100);

785 
	`DO_DELAY
(
ªgWrôes
);

788 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

790 
	`REG_WRITE_ARRAY
(&
ah
->
öiBB_RfGaö
, 
‰eqIndex
, 
ªgWrôes
);

792 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

793 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesFa°Clock
, 
modesIndex
,

794 
ªgWrôes
);

796 
	`¨5008_hw_ovîride_öi
(
ah
, 
ch™
);

797 
	`¨5008_hw_£t_ch™√l_ªgs
(
ah
, 
ch™
);

798 
	`¨5008_hw_öô_chaö_masks
(
ah
);

799 
	`©h9k_ﬁc_öô
(
ah
);

800 
	`©h9k_hw_≠∂y_txpowî
(
ah
, 
ch™
, 
Ál£
);

803 i‡(!
	`©h9k_hw_£t_rf_ªgs
(
ah
, 
ch™
, 
‰eqIndex
)) {

804 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
), "ar5416SetRfRegs failed\n");

805  -
EIO
;

809 
	}
}

811 
	$¨5008_hw_£t_rfmode
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

813 
u32
 
rfMode
 = 0;

815 i‡(
ch™
 =
NULL
)

818 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

819 
rfMode
 |
AR_PHY_MODE_DYNAMIC
;

821 
rfMode
 |
AR_PHY_MODE_OFDM
;

823 i‡(!
	`AR_SREV_9280_20_OR_LATER
(
ah
))

824 
rfMode
 |(
	`IS_CHAN_5GHZ
(
ch™
)) ?

825 
AR_PHY_MODE_RF5GHZ
 : 
AR_PHY_MODE_RF2GHZ
;

827 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

828 
rfMode
 |(
AR_PHY_MODE_DYNAMIC
 | 
AR_PHY_MODE_DYN_CCK_DISABLE
);

830 
	`REG_WRITE
(
ah
, 
AR_PHY_MODE
, 
rfMode
);

831 
	}
}

833 
	$¨5008_hw_m¨k_phy_öa˘ive
(
©h_hw
 *
ah
)

835 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_DIS
);

836 
	}
}

838 
	$¨5008_hw_£t_dñè_¶›e
(
©h_hw
 *
ah
,

839 
©h9k_ch™√l
 *
ch™
)

841 
u32
 
c€f_sˇÀd
, 
ds_c€f_exp
, 
ds_c€f_m™
;

842 
u32
 
˛ockMhzSˇÀd
 = 0x64000000;

843 
ch™_˚¡îs
 
˚¡îs
;

845 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
))

846 
˛ockMhzSˇÀd
 = clockMhzScaled >> 1;

847 i‡(
	`IS_CHAN_QUARTER_RATE
(
ch™
))

848 
˛ockMhzSˇÀd
 = clockMhzScaled >> 2;

850 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

851 
c€f_sˇÀd
 = 
˛ockMhzSˇÀd
 / 
˚¡îs
.
sy¡h_˚¡î
;

853 
	`©h9k_hw_gë_dñè_¶›e_vÆs
(
ah
, 
c€f_sˇÀd
, &
ds_c€f_m™
,

854 &
ds_c€f_exp
);

856 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING3
,

857 
AR_PHY_TIMING3_DSC_MAN
, 
ds_c€f_m™
);

858 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING3
,

859 
AR_PHY_TIMING3_DSC_EXP
, 
ds_c€f_exp
);

861 
c€f_sˇÀd
 = (9 * coef_scaled) / 10;

863 
	`©h9k_hw_gë_dñè_¶›e_vÆs
(
ah
, 
c€f_sˇÀd
, &
ds_c€f_m™
,

864 &
ds_c€f_exp
);

866 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_HALFGI
,

867 
AR_PHY_HALFGI_DSC_MAN
, 
ds_c€f_m™
);

868 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_HALFGI
,

869 
AR_PHY_HALFGI_DSC_EXP
, 
ds_c€f_exp
);

870 
	}
}

872 
boﬁ
 
	$¨5008_hw_rfbus_ªq
(
©h_hw
 *
ah
)

874 
	`REG_WRITE
(
ah
, 
AR_PHY_RFBUS_REQ
, 
AR_PHY_RFBUS_REQ_EN
);

875  
	`©h9k_hw_waô
(
ah
, 
AR_PHY_RFBUS_GRANT
, 
AR_PHY_RFBUS_GRANT_EN
,

876 
AR_PHY_RFBUS_GRANT_EN
, 
AH_WAIT_TIMEOUT
);

877 
	}
}

879 
	$¨5008_hw_rfbus_d⁄e
(
©h_hw
 *
ah
)

881 
u32
 
sy¡hDñay
 = 
	`REG_READ
(
ah
, 
AR_PHY_RX_DELAY
Ë& 
AR_PHY_RX_DELAY_DELAY
;

883 
	`©h9k_hw_sy¡h_dñay
(
ah
,áh->
curch™
, 
sy¡hDñay
);

885 
	`REG_WRITE
(
ah
, 
AR_PHY_RFBUS_REQ
, 0);

886 
	}
}

888 
	$¨5008_ª°‹e_chaömask
(
©h_hw
 *
ah
)

890 
rx_chaömask
 = 
ah
->
rxchaömask
;

892 i‡((
rx_chaömask
 == 0x5) || (rx_chainmask == 0x3)) {

893 
	`REG_WRITE
(
ah
, 
AR_PHY_RX_CHAINMASK
, 
rx_chaömask
);

894 
	`REG_WRITE
(
ah
, 
AR_PHY_CAL_CHAINMASK
, 
rx_chaömask
);

896 
	}
}

898 
u32
 
	$¨9160_hw_compuã_∂l_c⁄åﬁ
(
©h_hw
 *
ah
,

899 
©h9k_ch™√l
 *
ch™
)

901 
u32
 
∂l
;

903 
∂l
 = 
	`SM
(0x5, 
AR_RTC_9160_PLL_REFDIV
);

905 i‡(
ch™
 && 
	`IS_CHAN_HALF_RATE
(chan))

906 
∂l
 |
	`SM
(0x1, 
AR_RTC_9160_PLL_CLKSEL
);

907 i‡(
ch™
 && 
	`IS_CHAN_QUARTER_RATE
(chan))

908 
∂l
 |
	`SM
(0x2, 
AR_RTC_9160_PLL_CLKSEL
);

910 i‡(
ch™
 && 
	`IS_CHAN_5GHZ
(chan))

911 
∂l
 |
	`SM
(0x50, 
AR_RTC_9160_PLL_DIV
);

913 
∂l
 |
	`SM
(0x58, 
AR_RTC_9160_PLL_DIV
);

915  
∂l
;

916 
	}
}

918 
u32
 
	$¨5008_hw_compuã_∂l_c⁄åﬁ
(
©h_hw
 *
ah
,

919 
©h9k_ch™√l
 *
ch™
)

921 
u32
 
∂l
;

923 
∂l
 = 
AR_RTC_PLL_REFDIV_5
 | 
AR_RTC_PLL_DIV2
;

925 i‡(
ch™
 && 
	`IS_CHAN_HALF_RATE
(chan))

926 
∂l
 |
	`SM
(0x1, 
AR_RTC_PLL_CLKSEL
);

927 i‡(
ch™
 && 
	`IS_CHAN_QUARTER_RATE
(chan))

928 
∂l
 |
	`SM
(0x2, 
AR_RTC_PLL_CLKSEL
);

930 i‡(
ch™
 && 
	`IS_CHAN_5GHZ
(chan))

931 
∂l
 |
	`SM
(0xa, 
AR_RTC_PLL_DIV
);

933 
∂l
 |
	`SM
(0xb, 
AR_RTC_PLL_DIV
);

935  
∂l
;

936 
	}
}

938 
boﬁ
 
	$¨5008_hw_™i_c⁄åﬁ_√w
(
©h_hw
 *
ah
,

939 
©h9k_™i_cmd
 
cmd
,

940 
∑øm
)

942 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

943 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

944 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

945 
s32
 
vÆue
;

947 
cmd
 & 
ah
->
™i_fun˘i⁄
) {

948 
ATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION
:{

956 
u32
 
⁄
 = 
∑øm
 ? 1 : 0;

961 
m1ThªshLow
 = 
⁄
 ?

962 
™iSèã
->
öiDef
.
m1ThªshLow
 : 
m1ThªshLow_off
;

963 
m2ThªshLow
 = 
⁄
 ?

964 
™iSèã
->
öiDef
.
m2ThªshLow
 : 
m2ThªshLow_off
;

965 
m1Thªsh
 = 
⁄
 ?

966 
™iSèã
->
öiDef
.
m1Thªsh
 : 
m1Thªsh_off
;

967 
m2Thªsh
 = 
⁄
 ?

968 
™iSèã
->
öiDef
.
m2Thªsh
 : 
m2Thªsh_off
;

969 
m2Cou¡Thr
 = 
⁄
 ?

970 
™iSèã
->
öiDef
.
m2Cou¡Thr
 : 
m2Cou¡Thr_off
;

971 
m2Cou¡ThrLow
 = 
⁄
 ?

972 
™iSèã
->
öiDef
.
m2Cou¡ThrLow
 : 
m2Cou¡ThrLow_off
;

973 
m1ThªshLowExt
 = 
⁄
 ?

974 
™iSèã
->
öiDef
.
m1ThªshLowExt
 : 
m1ThªshLowExt_off
;

975 
m2ThªshLowExt
 = 
⁄
 ?

976 
™iSèã
->
öiDef
.
m2ThªshLowExt
 : 
m2ThªshLowExt_off
;

977 
m1ThªshExt
 = 
⁄
 ?

978 
™iSèã
->
öiDef
.
m1ThªshExt
 : 
m1ThªshExt_off
;

979 
m2ThªshExt
 = 
⁄
 ?

980 
™iSèã
->
öiDef
.
m2ThªshExt
 : 
m2ThªshExt_off
;

982 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_LOW
,

983 
AR_PHY_SFCORR_LOW_M1_THRESH_LOW
,

984 
m1ThªshLow
);

985 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_LOW
,

986 
AR_PHY_SFCORR_LOW_M2_THRESH_LOW
,

987 
m2ThªshLow
);

988 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR
,

989 
AR_PHY_SFCORR_M1_THRESH
, 
m1Thªsh
);

990 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR
,

991 
AR_PHY_SFCORR_M2_THRESH
, 
m2Thªsh
);

992 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR
,

993 
AR_PHY_SFCORR_M2COUNT_THR
, 
m2Cou¡Thr
);

994 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_LOW
,

995 
AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW
,

996 
m2Cou¡ThrLow
);

998 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

999 
AR_PHY_SFCORR_EXT_M1_THRESH_LOW
, 
m1ThªshLowExt
);

1000 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1001 
AR_PHY_SFCORR_EXT_M2_THRESH_LOW
, 
m2ThªshLowExt
);

1002 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1003 
AR_PHY_SFCORR_EXT_M1_THRESH
, 
m1ThªshExt
);

1004 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1005 
AR_PHY_SFCORR_EXT_M2_THRESH
, 
m2ThªshExt
);

1007 i‡(
⁄
)

1008 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SFCORR_LOW
,

1009 
AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW
);

1011 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_SFCORR_LOW
,

1012 
AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW
);

1014 i‡(
⁄
 !
™iSèã
->
ofdmWókSigDëe˘
) {

1015 
	`©h_dbg
(
comm⁄
, 
ANI
,

1017 
ch™
->
ch™√l
,

1018 
™iSèã
->
ofdmWókSigDëe˘
 ?

1020 
⁄
 ? "on" : "off");

1021 i‡(
⁄
)

1022 
ah
->
°©s
.
a°_™i_ofdm⁄
++;

1024 
ah
->
°©s
.
a°_™i_ofdmoff
++;

1025 
™iSèã
->
ofdmWókSigDëe˘
 = 
⁄
;

1029 
ATH9K_ANI_FIRSTEP_LEVEL
:{

1030 
u32
 
Àvñ
 = 
∑øm
;

1032 
vÆue
 = 
Àvñ
 * 2;

1033 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_FIND_SIG
,

1034 
AR_PHY_FIND_SIG_FIRSTEP
, 
vÆue
);

1035 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_FIND_SIG_LOW
,

1036 
AR_PHY_FIND_SIG_FIRSTEP_LOW
, 
vÆue
);

1038 i‡(
Àvñ
 !
™iSèã
->
fú°ïLevñ
) {

1039 
	`©h_dbg
(
comm⁄
, 
ANI
,

1041 
ch™
->
ch™√l
,

1042 
™iSèã
->
fú°ïLevñ
,

1043 
Àvñ
,

1044 
ATH9K_ANI_FIRSTEP_LVL
,

1045 
vÆue
,

1046 
™iSèã
->
öiDef
.
fú°ï
);

1047 
	`©h_dbg
(
comm⁄
, 
ANI
,

1049 
ch™
->
ch™√l
,

1050 
™iSèã
->
fú°ïLevñ
,

1051 
Àvñ
,

1052 
ATH9K_ANI_FIRSTEP_LVL
,

1053 
vÆue
,

1054 
™iSèã
->
öiDef
.
fú°ïLow
);

1055 i‡(
Àvñ
 > 
™iSèã
->
fú°ïLevñ
)

1056 
ah
->
°©s
.
a°_™i_°ïup
++;

1057 i‡(
Àvñ
 < 
™iSèã
->
fú°ïLevñ
)

1058 
ah
->
°©s
.
a°_™i_°ïdown
++;

1059 
™iSèã
->
fú°ïLevñ
 = 
Àvñ
;

1063 
ATH9K_ANI_SPUR_IMMUNITY_LEVEL
:{

1064 
u32
 
Àvñ
 = 
∑øm
;

1066 
vÆue
 = (
Àvñ
 + 1) * 2;

1067 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING5
,

1068 
AR_PHY_TIMING5_CYCPWR_THR1
, 
vÆue
);

1070 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_CCA
,

1071 
AR_PHY_EXT_TIMING5_CYCPWR_THR1
, 
vÆue
 - 1);

1073 i‡(
Àvñ
 !
™iSèã
->
•urImmunôyLevñ
) {

1074 
	`©h_dbg
(
comm⁄
, 
ANI
,

1076 
ch™
->
ch™√l
,

1077 
™iSèã
->
•urImmunôyLevñ
,

1078 
Àvñ
,

1079 
ATH9K_ANI_SPUR_IMMUNE_LVL
,

1080 
vÆue
,

1081 
™iSèã
->
öiDef
.
cy˝wrThr1
);

1082 
	`©h_dbg
(
comm⁄
, 
ANI
,

1084 
ch™
->
ch™√l
,

1085 
™iSèã
->
•urImmunôyLevñ
,

1086 
Àvñ
,

1087 
ATH9K_ANI_SPUR_IMMUNE_LVL
,

1088 
vÆue
,

1089 
™iSèã
->
öiDef
.
cy˝wrThr1Ext
);

1090 i‡(
Àvñ
 > 
™iSèã
->
•urImmunôyLevñ
)

1091 
ah
->
°©s
.
a°_™i_•urup
++;

1092 i‡(
Àvñ
 < 
™iSèã
->
•urImmunôyLevñ
)

1093 
ah
->
°©s
.
a°_™i_•urdown
++;

1094 
™iSèã
->
•urImmunôyLevñ
 = 
Àvñ
;

1098 
ATH9K_ANI_MRC_CCK
:

1103 
	`WARN_ON
(1);

1106 
	`©h_dbg
(
comm⁄
, 
ANI
, "övÆid cmd %u\n", 
cmd
);

1107  
Ál£
;

1110 
	`©h_dbg
(
comm⁄
, 
ANI
,

1112 
™iSèã
->
•urImmunôyLevñ
,

1113 
™iSèã
->
ofdmWókSigDëe˘
 ? "on" : "off",

1114 
™iSèã
->
fú°ïLevñ
,

1115 
™iSèã
->
mrcCCK
 ? "on" : "off",

1116 
™iSèã
->
li°íTime
,

1117 
™iSèã
->
ofdmPhyEºCou¡
,

1118 
™iSèã
->
cckPhyEºCou¡
);

1119  
åue
;

1120 
	}
}

1122 
	$¨5008_hw_do_gënf
(
©h_hw
 *
ah
,

1123 
öt16_t
 
nÁºay
[
NUM_NF_READINGS
])

1125 
öt16_t
 
nf
;

1127 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CCA
), 
AR_PHY_MINCCA_PWR
);

1128 
nÁºay
[0] = 
	`sign_exãnd32
(
nf
, 8);

1130 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CH1_CCA
), 
AR_PHY_CH1_MINCCA_PWR
);

1131 
nÁºay
[1] = 
	`sign_exãnd32
(
nf
, 8);

1133 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CH2_CCA
), 
AR_PHY_CH2_MINCCA_PWR
);

1134 
nÁºay
[2] = 
	`sign_exãnd32
(
nf
, 8);

1136 i‡(!
	`IS_CHAN_HT40
(
ah
->
curch™
))

1139 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_EXT_CCA
), 
AR_PHY_EXT_MINCCA_PWR
);

1140 
nÁºay
[3] = 
	`sign_exãnd32
(
nf
, 8);

1142 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CH1_EXT_CCA
), 
AR_PHY_CH1_EXT_MINCCA_PWR
);

1143 
nÁºay
[4] = 
	`sign_exãnd32
(
nf
, 8);

1145 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CH2_EXT_CCA
), 
AR_PHY_CH2_EXT_MINCCA_PWR
);

1146 
nÁºay
[5] = 
	`sign_exãnd32
(
nf
, 8);

1147 
	}
}

1154 
	$¨5008_hw_™i_ˇche_öi_ªgs
(
©h_hw
 *
ah
)

1156 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1157 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

1158 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

1159 
©h9k_™i_deÁu…
 *
öiDef
;

1160 
u32
 
vÆ
;

1162 
öiDef
 = &
™iSèã
->iniDef;

1164 
	`©h_dbg
(
comm⁄
, 
ANI
, "ver %d.%d opmode %u chan %d Mhz\n",

1165 
ah
->
hw_vîsi⁄
.
macVîsi⁄
,

1166 
ah
->
hw_vîsi⁄
.
macRev
,

1167 
ah
->
›mode
,

1168 
ch™
->
ch™√l
);

1170 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_SFCORR
);

1171 
öiDef
->
m1Thªsh
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_M1_THRESH
);

1172 
öiDef
->
m2Thªsh
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_M2_THRESH
);

1173 
öiDef
->
m2Cou¡Thr
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_M2COUNT_THR
);

1175 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_SFCORR_LOW
);

1176 
öiDef
->
m1ThªshLow
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_LOW_M1_THRESH_LOW
);

1177 
öiDef
->
m2ThªshLow
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_LOW_M2_THRESH_LOW
);

1178 
öiDef
->
m2Cou¡ThrLow
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW
);

1180 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_SFCORR_EXT
);

1181 
öiDef
->
m1ThªshExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M1_THRESH
);

1182 
öiDef
->
m2ThªshExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M2_THRESH
);

1183 
öiDef
->
m1ThªshLowExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M1_THRESH_LOW
);

1184 
öiDef
->
m2ThªshLowExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M2_THRESH_LOW
);

1185 
öiDef
->
fú°ï
 = 
	`REG_READ_FIELD
(
ah
,

1186 
AR_PHY_FIND_SIG
,

1187 
AR_PHY_FIND_SIG_FIRSTEP
);

1188 
öiDef
->
fú°ïLow
 = 
	`REG_READ_FIELD
(
ah
,

1189 
AR_PHY_FIND_SIG_LOW
,

1190 
AR_PHY_FIND_SIG_FIRSTEP_LOW
);

1191 
öiDef
->
cy˝wrThr1
 = 
	`REG_READ_FIELD
(
ah
,

1192 
AR_PHY_TIMING5
,

1193 
AR_PHY_TIMING5_CYCPWR_THR1
);

1194 
öiDef
->
cy˝wrThr1Ext
 = 
	`REG_READ_FIELD
(
ah
,

1195 
AR_PHY_EXT_CCA
,

1196 
AR_PHY_EXT_TIMING5_CYCPWR_THR1
);

1199 
™iSèã
->
•urImmunôyLevñ
 = 
ATH9K_ANI_SPUR_IMMUNE_LVL
;

1200 
™iSèã
->
fú°ïLevñ
 = 
ATH9K_ANI_FIRSTEP_LVL
;

1201 
™iSèã
->
ofdmWókSigDëe˘
 = 
åue
;

1202 
™iSèã
->
mrcCCK
 = 
Ál£
;

1203 
	}
}

1205 
	$¨5008_hw_£t_nf_limôs
(
©h_hw
 *
ah
)

1207 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_5416_2GHZ
;

1208 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_5416_2GHZ
;

1209 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_5416_2GHZ
;

1210 
ah
->
nf_5g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_5416_5GHZ
;

1211 
ah
->
nf_5g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_5416_5GHZ
;

1212 
ah
->
nf_5g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_5416_5GHZ
;

1213 
	}
}

1215 
	$¨5008_hw_£t_ød¨_∑øms
(
©h_hw
 *
ah
,

1216 
©h_hw_ød¨_c⁄f
 *
c⁄f
)

1218 
u32
 
ød¨_0
 = 0, 
ød¨_1
;

1220 i‡(!
c⁄f
) {

1221 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_RADAR_0
, 
AR_PHY_RADAR_0_ENA
);

1225 
ød¨_0
 |
AR_PHY_RADAR_0_ENA
 | 
AR_PHY_RADAR_0_FFT_ENA
;

1226 
ød¨_0
 |
	`SM
(
c⁄f
->
fú_powî
, 
AR_PHY_RADAR_0_FIRPWR
);

1227 
ød¨_0
 |
	`SM
(
c⁄f
->
ød¨_rssi
, 
AR_PHY_RADAR_0_RRSSI
);

1228 
ød¨_0
 |
	`SM
(
c⁄f
->
pul£_height
, 
AR_PHY_RADAR_0_HEIGHT
);

1229 
ød¨_0
 |
	`SM
(
c⁄f
->
pul£_rssi
, 
AR_PHY_RADAR_0_PRSSI
);

1230 
ød¨_0
 |
	`SM
(
c⁄f
->
pul£_öb™d
, 
AR_PHY_RADAR_0_INBAND
);

1232 
ød¨_1
 = 
	`REG_READ
(
ah
, 
AR_PHY_RADAR_1
);

1233 
ød¨_1
 &~(
AR_PHY_RADAR_1_MAXLEN
 | 
AR_PHY_RADAR_1_RELSTEP_THRESH
 |

1234 
AR_PHY_RADAR_1_RELPWR_THRESH
);

1235 
ød¨_1
 |
AR_PHY_RADAR_1_MAX_RRSSI
;

1236 
ød¨_1
 |
AR_PHY_RADAR_1_BLOCK_CHECK
;

1237 
ød¨_1
 |
	`SM
(
c⁄f
->
pul£_maxÀn
, 
AR_PHY_RADAR_1_MAXLEN
);

1238 
ød¨_1
 |
	`SM
(
c⁄f
->
pul£_öb™d_°ï
, 
AR_PHY_RADAR_1_RELSTEP_THRESH
);

1239 
ød¨_1
 |
	`SM
(
c⁄f
->
ød¨_öb™d
, 
AR_PHY_RADAR_1_RELPWR_THRESH
);

1241 
	`REG_WRITE
(
ah
, 
AR_PHY_RADAR_0
, 
ød¨_0
);

1242 
	`REG_WRITE
(
ah
, 
AR_PHY_RADAR_1
, 
ød¨_1
);

1243 i‡(
c⁄f
->
ext_ch™√l
)

1244 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RADAR_EXT
, 
AR_PHY_RADAR_EXT_ENA
);

1246 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_RADAR_EXT
, 
AR_PHY_RADAR_EXT_ENA
);

1247 
	}
}

1249 
	$¨5008_hw_£t_ød¨_c⁄f
(
©h_hw
 *
ah
)

1251 
©h_hw_ød¨_c⁄f
 *
c⁄f
 = &
ah
->
ød¨_c⁄f
;

1253 
c⁄f
->
fú_powî
 = -33;

1254 
c⁄f
->
ød¨_rssi
 = 20;

1255 
c⁄f
->
pul£_height
 = 10;

1256 
c⁄f
->
pul£_rssi
 = 15;

1257 
c⁄f
->
pul£_öb™d
 = 15;

1258 
c⁄f
->
pul£_maxÀn
 = 255;

1259 
c⁄f
->
pul£_öb™d_°ï
 = 12;

1260 
c⁄f
->
ød¨_öb™d
 = 8;

1261 
	}
}

1263 
	$¨5008_hw_öô_txpowî_cck
(
©h_hw
 *
ah
, 
öt16_t
 *
øã_¨øy
)

1265 
	#CCK_DELTA
(
x
Ë((
OLC_FOR_AR9280_20_LATER
Ë? 
	`max
((xË- 2, 0Ë: (x))

	)

1266 
ah
->
tx_powî
[0] = 
	`CCK_DELTA
(
øã_¨øy
[
øã1l
]);

1267 
ah
->
tx_powî
[1] = 
	`CCK_DELTA
(
	`mö
(
øã_¨øy
[
øã2l
],

1268 
øã_¨øy
[
øã2s
]));

1269 
ah
->
tx_powî
[2] = 
	`CCK_DELTA
(
	`mö
(
øã_¨øy
[
øã5_5l
],

1270 
øã_¨øy
[
øã5_5s
]));

1271 
ah
->
tx_powî
[3] = 
	`CCK_DELTA
(
	`mö
(
øã_¨øy
[
øã11l
],

1272 
øã_¨øy
[
øã11s
]));

1273 #unde‡
CCK_DELTA


1274 
	}
}

1276 
	$¨5008_hw_öô_txpowî_ofdm
(
©h_hw
 *
ah
, 
öt16_t
 *
øã_¨øy
,

1277 
off£t
)

1279 
i
, 
idx
 = 0;

1281 
i
 = 
off£t
; i < off£à+ 
AR5008_OFDM_RATES
; i++) {

1282 
ah
->
tx_powî
[
i
] = 
øã_¨øy
[
idx
];

1283 
idx
++;

1285 
	}
}

1287 
	$¨5008_hw_öô_txpowî_ht
(
©h_hw
 *
ah
, 
öt16_t
 *
øã_¨øy
,

1288 
ss_off£t
, 
ds_off£t
,

1289 
boﬁ
 
is_40
, 
ht40_dñè
)

1291 
i
, 
mcs_idx
 = (
is_40
Ë? 
AR5008_HT40_SHIFT
 : 
AR5008_HT20_SHIFT
;

1293 
i
 = 
ss_off£t
; i < ss_off£à+ 
AR5008_HT_SS_RATES
; i++) {

1294 
ah
->
tx_powî
[
i
] = 
øã_¨øy
[
mcs_idx
] + 
ht40_dñè
;

1295 
mcs_idx
++;

1297 
	`mem˝y
(&
ah
->
tx_powî
[
ds_off£t
], &ah->tx_powî[
ss_off£t
],

1298 
AR5008_HT_SS_RATES
);

1299 
	}
}

1301 
	$¨5008_hw_öô_øã_txpowî
(
©h_hw
 *
ah
, 
öt16_t
 *
øã_¨øy
,

1302 
©h9k_ch™√l
 *
ch™
, 
ht40_dñè
)

1304 i‡(
	`IS_CHAN_5GHZ
(
ch™
)) {

1305 
	`¨5008_hw_öô_txpowî_ofdm
(
ah
, 
øã_¨øy
,

1306 
AR5008_11NA_OFDM_SHIFT
);

1307 i‡(
	`IS_CHAN_HT20
(
ch™
Ë|| 
	`IS_CHAN_HT40
(chan)) {

1308 
	`¨5008_hw_öô_txpowî_ht
(
ah
, 
øã_¨øy
,

1309 
AR5008_11NA_HT_SS_SHIFT
,

1310 
AR5008_11NA_HT_DS_SHIFT
,

1311 
	`IS_CHAN_HT40
(
ch™
),

1312 
ht40_dñè
);

1315 
	`¨5008_hw_öô_txpowî_cck
(
ah
, 
øã_¨øy
);

1316 
	`¨5008_hw_öô_txpowî_ofdm
(
ah
, 
øã_¨øy
,

1317 
AR5008_11NG_OFDM_SHIFT
);

1318 i‡(
	`IS_CHAN_HT20
(
ch™
Ë|| 
	`IS_CHAN_HT40
(chan)) {

1319 
	`¨5008_hw_öô_txpowî_ht
(
ah
, 
øã_¨øy
,

1320 
AR5008_11NG_HT_SS_SHIFT
,

1321 
AR5008_11NG_HT_DS_SHIFT
,

1322 
	`IS_CHAN_HT40
(
ch™
),

1323 
ht40_dñè
);

1326 
	}
}

1328 
	$¨5008_hw_©èch_phy_›s
(
©h_hw
 *
ah
)

1330 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

1331 c⁄° 
u32
 
¨5416_cˇ_ªgs
[6] = {

1332 
AR_PHY_CCA
,

1333 
AR_PHY_CH1_CCA
,

1334 
AR_PHY_CH2_CCA
,

1335 
AR_PHY_EXT_CCA
,

1336 
AR_PHY_CH1_EXT_CCA
,

1337 
AR_PHY_CH2_EXT_CCA


1339 
ªt
;

1341 
ªt
 = 
	`¨5008_hw_rf_Æloc_ext_b™ks
(
ah
);

1342 i‡(
ªt
)

1343  
ªt
;

1345 
¥iv_›s
->
rf_£t_‰eq
 = 
¨5008_hw_£t_ch™√l
;

1346 
¥iv_›s
->
•ur_môig©e_‰eq
 = 
¨5008_hw_•ur_môig©e
;

1348 
¥iv_›s
->
£t_rf_ªgs
 = 
¨5008_hw_£t_rf_ªgs
;

1349 
¥iv_›s
->
£t_ch™√l_ªgs
 = 
¨5008_hw_£t_ch™√l_ªgs
;

1350 
¥iv_›s
->
öô_bb
 = 
¨5008_hw_öô_bb
;

1351 
¥iv_›s
->
¥o˚ss_öi
 = 
¨5008_hw_¥o˚ss_öi
;

1352 
¥iv_›s
->
£t_rfmode
 = 
¨5008_hw_£t_rfmode
;

1353 
¥iv_›s
->
m¨k_phy_öa˘ive
 = 
¨5008_hw_m¨k_phy_öa˘ive
;

1354 
¥iv_›s
->
£t_dñè_¶›e
 = 
¨5008_hw_£t_dñè_¶›e
;

1355 
¥iv_›s
->
rfbus_ªq
 = 
¨5008_hw_rfbus_ªq
;

1356 
¥iv_›s
->
rfbus_d⁄e
 = 
¨5008_hw_rfbus_d⁄e
;

1357 
¥iv_›s
->
ª°‹e_chaömask
 = 
¨5008_ª°‹e_chaömask
;

1358 
¥iv_›s
->
do_gënf
 = 
¨5008_hw_do_gënf
;

1359 
¥iv_›s
->
£t_ød¨_∑øms
 = 
¨5008_hw_£t_ød¨_∑øms
;

1361 
¥iv_›s
->
™i_c⁄åﬁ
 = 
¨5008_hw_™i_c⁄åﬁ_√w
;

1362 
¥iv_›s
->
™i_ˇche_öi_ªgs
 = 
¨5008_hw_™i_ˇche_öi_ªgs
;

1364 i‡(
	`AR_SREV_9100
(
ah
Ë|| 
	`AR_SREV_9160_10_OR_LATER
(ah))

1365 
¥iv_›s
->
compuã_∂l_c⁄åﬁ
 = 
¨9160_hw_compuã_∂l_c⁄åﬁ
;

1367 
¥iv_›s
->
compuã_∂l_c⁄åﬁ
 = 
¨5008_hw_compuã_∂l_c⁄åﬁ
;

1369 
	`¨5008_hw_£t_nf_limôs
(
ah
);

1370 
	`¨5008_hw_£t_ød¨_c⁄f
(
ah
);

1371 
	`mem˝y
(
ah
->
nf_ªgs
, 
¨5416_cˇ_ªgs
, (ah->nf_regs));

1373 
	}
}

	@ar9001_initvals.h

17 c⁄° 
u32
 
	g¨5416Modes_9100
[][5] = {

87 c⁄° 
u32
 
	g¨5416Comm⁄_9100
[][2] = {

462 c⁄° 
u32
 
	g¨5416B™k6_9100
[][3] = {

499 c⁄° 
u32
 
	g¨5416B™k6TPC_9100
[][3] = {

536 c⁄° 
u32
 
	g¨5416Addac_9100
[][2] = {

572 c⁄° 
u32
 
	g¨5416Modes_9160
[][5] = {

640 c⁄° 
u32
 
	g¨5416Comm⁄_9160
[][2] = {

1018 c⁄° 
u32
 
	g¨5416Addac_9160
[][2] = {

1054 c⁄° 
u32
 
	g¨5416Addac_9160_1_1
[][2] = {

	@ar9002_calib.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~"¨9002_phy.h
"

21 
	#AR9285_CLCAL_REDO_THRESH
 1

	)

23 
	e¨9002_ˇl_ty≥s
 {

24 
	mADC_GAIN_CAL
 = 
BIT
(0),

25 
	mADC_DC_CAL
 = 
BIT
(1),

26 
	mIQ_MISMATCH_CAL
 = 
BIT
(2),

29 
boﬁ
 
	$¨9002_hw_is_ˇl_suµ‹ãd
(
©h_hw
 *
ah
,

30 
©h9k_ch™√l
 *
ch™
,

31 
¨9002_ˇl_ty≥s
 
ˇl_ty≥
)

33 
boﬁ
 
suµ‹ãd
 = 
Ál£
;

34 
ah
->
suµ_ˇls
 & 
ˇl_ty≥
) {

35 
IQ_MISMATCH_CAL
:

36 
suµ‹ãd
 = 
åue
;

38 
ADC_GAIN_CAL
:

39 
ADC_DC_CAL
:

41 i‡(!((
	`IS_CHAN_2GHZ
(
ch™
Ë|| 
	`IS_CHAN_A_FAST_CLOCK
(
ah
, chan)) &&

42 
	`IS_CHAN_HT20
(
ch™
)))

43 
suµ‹ãd
 = 
åue
;

46  
suµ‹ãd
;

47 
	}
}

49 
	$¨9002_hw_£tup_ˇlibøti⁄
(
©h_hw
 *
ah
,

50 
©h9k_ˇl_li°
 *
cuºCÆ
)

52 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

54 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0),

55 
AR_PHY_TIMING_CTRL4_IQCAL_LOG_COUNT_MAX
,

56 
cuºCÆ
->
ˇlD©a
->
ˇlCou¡Max
);

58 
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
) {

59 
IQ_MISMATCH_CAL
:

60 
	`REG_WRITE
(
ah
, 
AR_PHY_CALMODE
, 
AR_PHY_CALMODE_IQ
);

61 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

64 
ADC_GAIN_CAL
:

65 
	`REG_WRITE
(
ah
, 
AR_PHY_CALMODE
, 
AR_PHY_CALMODE_ADC_GAIN
);

66 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "starting ADC Gain Calibration\n");

68 
ADC_DC_CAL
:

69 
	`REG_WRITE
(
ah
, 
AR_PHY_CALMODE
, 
AR_PHY_CALMODE_ADC_DC_PER
);

70 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "starting ADC DC Calibration\n");

74 
	`REG_SET_BIT
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0),

75 
AR_PHY_TIMING_CTRL4_DO_CAL
);

76 
	}
}

78 
boﬁ
 
	$¨9002_hw_≥r_ˇlibøti⁄
(
©h_hw
 *
ah
,

79 
©h9k_ch™√l
 *
ich™
,

80 
u8
 
rxchaömask
,

81 
©h9k_ˇl_li°
 *
cuºCÆ
)

83 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

84 
boﬁ
 
isˇld⁄e
 = 
Ál£
;

86 i‡(
cuºCÆ
->
ˇlSèã
 =
CAL_RUNNING
) {

87 i‡(!(
	`REG_READ
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0)) &

88 
AR_PHY_TIMING_CTRL4_DO_CAL
)) {

90 
cuºCÆ
->
ˇlD©a
->
	`ˇlCﬁÀ˘
(
ah
);

91 
ah
->
ˇl_ßm∂es
++;

93 i‡(
ah
->
ˇl_ßm∂es
 >=

94 
cuºCÆ
->
ˇlD©a
->
ˇlNumSam∂es
) {

95 
i
, 
numChaös
 = 0;

96 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

97 i‡(
rxchaömask
 & (1 << 
i
))

98 
numChaös
++;

101 
cuºCÆ
->
ˇlD©a
->
	`ˇlPo°Proc
(
ah
, 
numChaös
);

102 
ˇld©a
->
CÆVÆid
 |
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
;

103 
cuºCÆ
->
ˇlSèã
 = 
CAL_DONE
;

104 
isˇld⁄e
 = 
åue
;

106 
	`¨9002_hw_£tup_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

109 } i‡(!(
ˇld©a
->
CÆVÆid
 & 
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
)) {

110 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

113  
isˇld⁄e
;

114 
	}
}

116 
	$¨9002_hw_iqˇl_cﬁÀ˘
(
©h_hw
 *
ah
)

118 
i
;

120 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

121 
ah
->
tŸÆPowîMósI
[
i
] +=

122 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_0
(
i
));

123 
ah
->
tŸÆPowîMósQ
[
i
] +=

124 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_1
(
i
));

125 
ah
->
tŸÆIqC‹rMós
[
i
] +=

126 (
öt32_t
Ë
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_2
(
i
));

127 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

129 
ah
->
ˇl_ßm∂es
, 
i
,áh->
tŸÆPowîMósI
[i],

130 
ah
->
tŸÆPowîMósQ
[
i
],

131 
ah
->
tŸÆIqC‹rMós
[
i
]);

133 
	}
}

135 
	$¨9002_hw_adc_gaöˇl_cﬁÀ˘
(
©h_hw
 *
ah
)

137 
i
;

139 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

140 
ah
->
tŸÆAdcIOddPha£
[
i
] +=

141 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_0
(
i
));

142 
ah
->
tŸÆAdcIEvíPha£
[
i
] +=

143 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_1
(
i
));

144 
ah
->
tŸÆAdcQOddPha£
[
i
] +=

145 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_2
(
i
));

146 
ah
->
tŸÆAdcQEvíPha£
[
i
] +=

147 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_3
(
i
));

149 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

151 
ah
->
ˇl_ßm∂es
, 
i
,

152 
ah
->
tŸÆAdcIOddPha£
[
i
],

153 
ah
->
tŸÆAdcIEvíPha£
[
i
],

154 
ah
->
tŸÆAdcQOddPha£
[
i
],

155 
ah
->
tŸÆAdcQEvíPha£
[
i
]);

157 
	}
}

159 
	$¨9002_hw_adc_dcˇl_cﬁÀ˘
(
©h_hw
 *
ah
)

161 
i
;

163 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

164 
ah
->
tŸÆAdcDcOff£tIOddPha£
[
i
] +=

165 (
öt32_t
Ë
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_0
(
i
));

166 
ah
->
tŸÆAdcDcOff£tIEvíPha£
[
i
] +=

167 (
öt32_t
Ë
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_1
(
i
));

168 
ah
->
tŸÆAdcDcOff£tQOddPha£
[
i
] +=

169 (
öt32_t
Ë
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_2
(
i
));

170 
ah
->
tŸÆAdcDcOff£tQEvíPha£
[
i
] +=

171 (
öt32_t
Ë
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_3
(
i
));

173 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

175 
ah
->
ˇl_ßm∂es
, 
i
,

176 
ah
->
tŸÆAdcDcOff£tIOddPha£
[
i
],

177 
ah
->
tŸÆAdcDcOff£tIEvíPha£
[
i
],

178 
ah
->
tŸÆAdcDcOff£tQOddPha£
[
i
],

179 
ah
->
tŸÆAdcDcOff£tQEvíPha£
[
i
]);

181 
	}
}

183 
	$¨9002_hw_iqˇlibøã
(
©h_hw
 *
ah
, 
u8
 
numChaös
)

185 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

186 
u32
 
powîMósQ
, 
powîMósI
, 
iqC‹rMós
;

187 
u32
 
qCoffDíom
, 
iCoffDíom
;

188 
öt32_t
 
qCoff
, 
iCoff
;

189 
iqC‹rNeg
, 
i
;

191 
i
 = 0; i < 
numChaös
; i++) {

192 
powîMósI
 = 
ah
->
tŸÆPowîMósI
[
i
];

193 
powîMósQ
 = 
ah
->
tŸÆPowîMósQ
[
i
];

194 
iqC‹rMós
 = 
ah
->
tŸÆIqC‹rMós
[
i
];

196 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

198 
i
);

200 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

202 
i
, 
ah
->
tŸÆIqC‹rMós
[i]);

204 
iqC‹rNeg
 = 0;

206 i‡(
iqC‹rMós
 > 0x80000000) {

207 
iqC‹rMós
 = (0xffffffff - iqCorrMeas) + 1;

208 
iqC‹rNeg
 = 1;

211 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_i = 0x%08x\n",

212 
i
, 
powîMósI
);

213 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_q = 0x%08x\n",

214 
i
, 
powîMósQ
);

215 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "iqC‹rNeg i†0x%08x\n", 
iqC‹rNeg
);

217 
iCoffDíom
 = (
powîMósI
 / 2 + 
powîMósQ
 / 2) / 128;

218 
qCoffDíom
 = 
powîMósQ
 / 64;

220 i‡((
powîMósQ
 !0Ë&& (
iCoffDíom
 != 0) &&

221 (
qCoffDíom
 != 0)) {

222 
iCoff
 = 
iqC‹rMós
 / 
iCoffDíom
;

223 
qCoff
 = 
powîMósI
 / 
qCoffDíom
 - 64;

224 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %d iCoff = 0x%08x\n",

225 
i
, 
iCoff
);

226 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %d qCoff = 0x%08x\n",

227 
i
, 
qCoff
);

229 
iCoff
 = iCoff & 0x3f;

230 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

231 "New: Ch¿%d iCof‡0x%08x\n", 
i
, 
iCoff
);

232 i‡(
iqC‹rNeg
 == 0x0)

233 
iCoff
 = 0x40 - iCoff;

235 i‡(
qCoff
 > 15)

236 
qCoff
 = 15;

237 i‡(
qCoff
 <= -16)

238 
qCoff
 = -16;

240 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

242 
i
, 
iCoff
, 
qCoff
);

244 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(
i
),

245 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
,

246 
iCoff
);

247 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(
i
),

248 
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
,

249 
qCoff
);

250 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

252 
i
);

256 
	`REG_SET_BIT
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0),

257 
AR_PHY_TIMING_CTRL4_IQCORR_ENABLE
);

258 
	}
}

260 
	$¨9002_hw_adc_gaöˇl_ˇlibøã
(
©h_hw
 *
ah
, 
u8
 
numChaös
)

262 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

263 
u32
 
iOddMósOff£t
, 
iEvíMósOff£t
, 
qOddMósOff£t
, 
qEvíMósOff£t
;

264 
u32
 
qGaöMism©ch
, 
iGaöMism©ch
, 
vÆ
, 
i
;

266 
i
 = 0; i < 
numChaös
; i++) {

267 
iOddMósOff£t
 = 
ah
->
tŸÆAdcIOddPha£
[
i
];

268 
iEvíMósOff£t
 = 
ah
->
tŸÆAdcIEvíPha£
[
i
];

269 
qOddMósOff£t
 = 
ah
->
tŸÆAdcQOddPha£
[
i
];

270 
qEvíMósOff£t
 = 
ah
->
tŸÆAdcQEvíPha£
[
i
];

272 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

273 "Sèπög ADC Gaö CÆ f‹ Chaö %d\n", 
i
);

275 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_odd_i = 0x%08x\n",

276 
i
, 
iOddMósOff£t
);

277 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_even_i = 0x%08x\n",

278 
i
, 
iEvíMósOff£t
);

279 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_odd_q = 0x%08x\n",

280 
i
, 
qOddMósOff£t
);

281 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_even_q = 0x%08x\n",

282 
i
, 
qEvíMósOff£t
);

284 i‡(
iOddMósOff£t
 !0 && 
qEvíMósOff£t
 != 0) {

285 
iGaöMism©ch
 =

286 ((
iEvíMósOff£t
 * 32) /

287 
iOddMósOff£t
) & 0x3f;

288 
qGaöMism©ch
 =

289 ((
qOddMósOff£t
 * 32) /

290 
qEvíMósOff£t
) & 0x3f;

292 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

294 
i
, 
iGaöMism©ch
);

295 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

297 
i
, 
qGaöMism©ch
);

299 
vÆ
 = 
	`REG_READ
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(
i
));

300 
vÆ
 &= 0xfffff000;

301 
vÆ
 |(
qGaöMism©ch
Ë| (
iGaöMism©ch
 << 6);

302 
	`REG_WRITE
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(
i
), 
vÆ
);

304 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

305 "ADC Gaö CÆ d⁄êf‹ Chaö %d\n", 
i
);

309 
	`REG_WRITE
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(0),

310 
	`REG_READ
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(0)) |

311 
AR_PHY_NEW_ADC_GAIN_CORR_ENABLE
);

312 
	}
}

314 
	$¨9002_hw_adc_dcˇl_ˇlibøã
(
©h_hw
 *
ah
, 
u8
 
numChaös
)

316 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

317 
u32
 
iOddMósOff£t
, 
iEvíMósOff£t
, 
vÆ
, 
i
;

318 
öt32_t
 
qOddMósOff£t
, 
qEvíMósOff£t
, 
qDcMism©ch
, 
iDcMism©ch
;

319 c⁄° 
©h9k_≥rˇl_d©a
 *
ˇlD©a
 =

320 
ah
->
ˇl_li°_cuº
->
ˇlD©a
;

321 
u32
 
numSam∂es
 =

322 (1 << (
ˇlD©a
->
ˇlCou¡Max
 + 5)Ë* cÆD©a->
ˇlNumSam∂es
;

324 
i
 = 0; i < 
numChaös
; i++) {

325 
iOddMósOff£t
 = 
ah
->
tŸÆAdcDcOff£tIOddPha£
[
i
];

326 
iEvíMósOff£t
 = 
ah
->
tŸÆAdcDcOff£tIEvíPha£
[
i
];

327 
qOddMósOff£t
 = 
ah
->
tŸÆAdcDcOff£tQOddPha£
[
i
];

328 
qEvíMósOff£t
 = 
ah
->
tŸÆAdcDcOff£tQEvíPha£
[
i
];

330 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

331 "Sèπög ADC DC Off£àCÆ f‹ Chaö %d\n", 
i
);

333 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_odd_i = %d\n",

334 
i
, 
iOddMósOff£t
);

335 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_even_i = %d\n",

336 
i
, 
iEvíMósOff£t
);

337 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_odd_q = %d\n",

338 
i
, 
qOddMósOff£t
);

339 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_even_q = %d\n",

340 
i
, 
qEvíMósOff£t
);

342 
iDcMism©ch
 = (((
iEvíMósOff£t
 - 
iOddMósOff£t
) * 2) /

343 
numSam∂es
) & 0x1ff;

344 
qDcMism©ch
 = (((
qOddMósOff£t
 - 
qEvíMósOff£t
) * 2) /

345 
numSam∂es
) & 0x1ff;

347 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

349 
i
, 
iDcMism©ch
);

350 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

352 
i
, 
qDcMism©ch
);

354 
vÆ
 = 
	`REG_READ
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(
i
));

355 
vÆ
 &= 0xc0000fff;

356 
vÆ
 |(
qDcMism©ch
 << 12Ë| (
iDcMism©ch
 << 21);

357 
	`REG_WRITE
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(
i
), 
vÆ
);

359 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

360 "ADC DC Off£àCÆ d⁄êf‹ Chaö %d\n", 
i
);

363 
	`REG_WRITE
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(0),

364 
	`REG_READ
(
ah
, 
	`AR_PHY_NEW_ADC_DC_GAIN_CORR
(0)) |

365 
AR_PHY_NEW_ADC_DC_OFFSET_CORR_ENABLE
);

366 
	}
}

368 
	$¨9287_hw_ﬁc_ãmp_com≥nßti⁄
(
©h_hw
 *
ah
)

370 
u32
 
rdd©a
;

371 
öt32_t
 
dñè
, 
cuºPDADC
, 
¶›e
;

373 
rdd©a
 = 
	`REG_READ
(
ah
, 
AR_PHY_TX_PWRCTRL4
);

374 
cuºPDADC
 = 
	`MS
(
rdd©a
, 
AR_PHY_TX_PWRCTRL_PD_AVG_OUT
);

376 i‡(
ah
->
öôPDADC
 =0 || 
cuºPDADC
 == 0) {

384 
¶›e
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_TEMPSENSE_SLOPE
);

386 i‡(
¶›e
 == 0) {

387 
dñè
 = 0;

389 
dñè
 = ((
cuºPDADC
 - 
ah
->
öôPDADC
)*4Ë/ 
¶›e
;

391 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CH0_TX_PWRCTRL11
,

392 
AR_PHY_TX_PWRCTRL_OLPC_TEMP_COMP
, 
dñè
);

393 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CH1_TX_PWRCTRL11
,

394 
AR_PHY_TX_PWRCTRL_OLPC_TEMP_COMP
, 
dñè
);

396 
	}
}

398 
	$¨9280_hw_ﬁc_ãmp_com≥nßti⁄
(
©h_hw
 *
ah
)

400 
u32
 
rdd©a
, 
i
;

401 
dñè
, 
cuºPDADC
, 
ªgvÆ
;

403 
rdd©a
 = 
	`REG_READ
(
ah
, 
AR_PHY_TX_PWRCTRL4
);

404 
cuºPDADC
 = 
	`MS
(
rdd©a
, 
AR_PHY_TX_PWRCTRL_PD_AVG_OUT
);

406 i‡(
ah
->
öôPDADC
 =0 || 
cuºPDADC
 == 0)

409 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_DAC_HPWR_5G
))

410 
dñè
 = (
cuºPDADC
 - 
ah
->
öôPDADC
 + 4) / 8;

412 
dñè
 = (
cuºPDADC
 - 
ah
->
öôPDADC
 + 5) / 10;

414 i‡(
dñè
 !
ah
->
PDADCdñè
) {

415 
ah
->
PDADCdñè
 = 
dñè
;

416 
i
 = 1; i < 
AR9280_TX_GAIN_TABLE_SIZE
; i++) {

417 
ªgvÆ
 = 
ah
->
‹igöÆGaö
[
i
] - 
dñè
;

418 i‡(
ªgvÆ
 < 0)

419 
ªgvÆ
 = 0;

421 
	`REG_RMW_FIELD
(
ah
,

422 
AR_PHY_TX_GAIN_TBL1
 + 
i
 * 4,

423 
AR_PHY_TX_GAIN
, 
ªgvÆ
);

426 
	}
}

428 
	$¨9271_hw_∑_ˇl
(
©h_hw
 *
ah
, 
boﬁ
 
is_ª£t
)

430 
u32
 
ªgVÆ
;

431 
i
;

432 
u32
 
ªgLi°
[][2] = {

433 { 
AR9285_AN_TOP3
, 0 },

434 { 
AR9285_AN_RXTXBB1
, 0 },

435 { 
AR9285_AN_RF2G1
, 0 },

436 { 
AR9285_AN_RF2G2
, 0 },

437 { 
AR9285_AN_TOP2
, 0 },

438 { 
AR9285_AN_RF2G8
, 0 },

439 { 
AR9285_AN_RF2G7
, 0 },

440 { 
AR9285_AN_RF2G3
, 0 },

443 
	`REG_READ_ARRAY
(
ah
, 
ªgLi°
, 
	`ARRAY_SIZE
(regList));

445 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

447 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G6
, 1 << 0);

449 
	`REG_SET_BIT
(
ah
, 0x9808, 1 << 27);

451 
	`REG_SET_BIT
(
ah
, 
AR9285_AN_TOP3
, 
AR9285_AN_TOP3_PWDDAC
);

453 
	`REG_SET_BIT
(
ah
, 
AR9285_AN_RXTXBB1
, 
AR9285_AN_RXTXBB1_PDRXTXBB1
);

455 
	`REG_SET_BIT
(
ah
, 
AR9285_AN_RXTXBB1
, 
AR9285_AN_RXTXBB1_PDV2I
);

457 
	`REG_SET_BIT
(
ah
, 
AR9285_AN_RXTXBB1
, 
AR9285_AN_RXTXBB1_PDDACIF
);

459 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G2
, 
AR9285_AN_RF2G2_OFFCAL
);

461 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G7
, 
AR9285_AN_RF2G7_PWDDB
);

463 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_ENPACAL
);

465 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_PDPADRV1
);

467 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_PDPADRV2
);

469 
	`REG_CLR_BIT
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_PDPAOUT
);

471 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G8
, 
AR9285_AN_RF2G8_PADRVGN2TAB0
, 7);

476 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G7
, 
AR9285_AN_RF2G7_PADRVGN2TAB0
, 0);

478 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G3
, 
AR9271_AN_RF2G3_CCOMP
, 0xfff);

479 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

485 
	`REG_WRITE
(
ah
, 
AR9285_AN_TOP2
, 0xca0358a0);

486 
	`udñay
(30);

487 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G6
, 
AR9271_AN_RF2G6_OFFS
, 0);

490 
i
 = 6; i > 0; i--) {

491 
ªgVÆ
 = 
	`REG_READ
(
ah
, 
AR9285_AN_RF2G6
);

492 
ªgVÆ
 |(1 << (20 + 
i
));

493 
	`REG_WRITE
(
ah
, 
AR9285_AN_RF2G6
, 
ªgVÆ
);

494 
	`udñay
(1);

496 
ªgVÆ
 &(~(0x1 << (20 + 
i
)));

497 
ªgVÆ
 |(
	`MS
(
	`REG_READ
(
ah
, 
AR9285_AN_RF2G9
),

498 
AR9285_AN_RXTXBB1_SPARE9
)

499 << (20 + 
i
));

500 
	`REG_WRITE
(
ah
, 
AR9285_AN_RF2G6
, 
ªgVÆ
);

503 
ªgVÆ
 = (regVal >> 20) & 0x7f;

506 i‡((!
is_ª£t
Ë&& (
ah
->
∑ˇl_öfo
.
¥ev_off£t
 =
ªgVÆ
)) {

507 i‡(
ah
->
∑ˇl_öfo
.
max_skùcou¡
 < 
MAX_PACAL_SKIPCOUNT
)

508 
ah
->
∑ˇl_öfo
.
max_skùcou¡
 =

509 2 * 
ah
->
∑ˇl_öfo
.
max_skùcou¡
;

510 
ah
->
∑ˇl_öfo
.
skùcou¡
 =áh->∑ˇl_öfo.
max_skùcou¡
;

512 
ah
->
∑ˇl_öfo
.
max_skùcou¡
 = 1;

513 
ah
->
∑ˇl_öfo
.
skùcou¡
 = 0;

514 
ah
->
∑ˇl_öfo
.
¥ev_off£t
 = 
ªgVÆ
;

518 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

520 
	`REG_SET_BIT
(
ah
, 
AR9285_AN_RF2G6
, 1 << 0);

522 
	`REG_CLR_BIT
(
ah
, 0x9808, 1 << 27);

523 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

525 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

526 
i
 = 0; i < 
	`ARRAY_SIZE
(
ªgLi°
); i++)

527 
	`REG_WRITE
(
ah
, 
ªgLi°
[
i
][0],ÑegList[i][1]);

529 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

530 
	}
}

532 
ölöe
 
	$¨9285_hw_∑_ˇl
(
©h_hw
 *
ah
, 
boﬁ
 
is_ª£t
)

534 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

535 
u32
 
ªgVÆ
;

536 
i
, 
off£t
, 
offs_6_1
, 
offs_0
;

537 
u32
 
ccomp_‹g
, 
ªg_fõld
;

538 
u32
 
ªgLi°
[][2] = {

548 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Running PA Calibration\n");

551 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_TXGAIN_TYPE
) ==

552 
AR5416_EEP_TXGAIN_HIGH_POWER
)

555 
i
 = 0; i < 
	`ARRAY_SIZE
(
ªgLi°
); i++)

556 
ªgLi°
[
i
][1] = 
	`REG_READ
(
ah
,ÑegList[i][0]);

558 
ªgVÆ
 = 
	`REG_READ
(
ah
, 0x7834);

559 
ªgVÆ
 &= (~(0x1));

560 
	`REG_WRITE
(
ah
, 0x7834, 
ªgVÆ
);

561 
ªgVÆ
 = 
	`REG_READ
(
ah
, 0x9808);

562 
ªgVÆ
 |= (0x1 << 27);

563 
	`REG_WRITE
(
ah
, 0x9808, 
ªgVÆ
);

565 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_TOP3
, 
AR9285_AN_TOP3_PWDDAC
, 1);

566 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RXTXBB1
, 
AR9285_AN_RXTXBB1_PDRXTXBB1
, 1);

567 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RXTXBB1
, 
AR9285_AN_RXTXBB1_PDV2I
, 1);

568 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RXTXBB1
, 
AR9285_AN_RXTXBB1_PDDACIF
, 1);

569 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G2
, 
AR9285_AN_RF2G2_OFFCAL
, 0);

570 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G7
, 
AR9285_AN_RF2G7_PWDDB
, 0);

571 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_ENPACAL
, 0);

572 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_PDPADRV1
, 0);

573 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_PDPADRV2
, 0);

574 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G1
, 
AR9285_AN_RF2G1_PDPAOUT
, 0);

575 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G8
, 
AR9285_AN_RF2G8_PADRVGN2TAB0
, 7);

576 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G7
, 
AR9285_AN_RF2G7_PADRVGN2TAB0
, 0);

577 
ccomp_‹g
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR9285_AN_RF2G6
), 
AR9285_AN_RF2G6_CCOMP
);

578 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G6
, 
AR9285_AN_RF2G6_CCOMP
, 0xf);

580 
	`REG_WRITE
(
ah
, 
AR9285_AN_TOP2
, 0xca0358a0);

581 
	`udñay
(30);

582 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G6
, 
AR9285_AN_RF2G6_OFFS
, 0);

583 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G3
, 
AR9285_AN_RF2G3_PDVCCOMP
, 0);

585 
i
 = 6; i > 0; i--) {

586 
ªgVÆ
 = 
	`REG_READ
(
ah
, 0x7834);

587 
ªgVÆ
 |(1 << (19 + 
i
));

588 
	`REG_WRITE
(
ah
, 0x7834, 
ªgVÆ
);

589 
	`udñay
(1);

590 
ªgVÆ
 = 
	`REG_READ
(
ah
, 0x7834);

591 
ªgVÆ
 &(~(0x1 << (19 + 
i
)));

592 
ªg_fõld
 = 
	`MS
(
	`REG_READ
(
ah
, 0x7840), 
AR9285_AN_RXTXBB1_SPARE9
);

593 
ªgVÆ
 |(
ªg_fõld
 << (19 + 
i
));

594 
	`REG_WRITE
(
ah
, 0x7834, 
ªgVÆ
);

597 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G3
, 
AR9285_AN_RF2G3_PDVCCOMP
, 1);

598 
	`udñay
(1);

599 
ªg_fõld
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR9285_AN_RF2G9
), 
AR9285_AN_RXTXBB1_SPARE9
);

600 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G3
, 
AR9285_AN_RF2G3_PDVCCOMP
, 
ªg_fõld
);

601 
offs_6_1
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR9285_AN_RF2G6
), 
AR9285_AN_RF2G6_OFFS
);

602 
offs_0
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR9285_AN_RF2G3
), 
AR9285_AN_RF2G3_PDVCCOMP
);

604 
off£t
 = (
offs_6_1
<<1Ë| 
offs_0
;

605 
off£t
 = offset - 0;

606 
offs_6_1
 = 
off£t
>>1;

607 
offs_0
 = 
off£t
 & 1;

609 i‡((!
is_ª£t
Ë&& (
ah
->
∑ˇl_öfo
.
¥ev_off£t
 =
off£t
)) {

610 i‡(
ah
->
∑ˇl_öfo
.
max_skùcou¡
 < 
MAX_PACAL_SKIPCOUNT
)

611 
ah
->
∑ˇl_öfo
.
max_skùcou¡
 =

612 2 * 
ah
->
∑ˇl_öfo
.
max_skùcou¡
;

613 
ah
->
∑ˇl_öfo
.
skùcou¡
 =áh->∑ˇl_öfo.
max_skùcou¡
;

615 
ah
->
∑ˇl_öfo
.
max_skùcou¡
 = 1;

616 
ah
->
∑ˇl_öfo
.
skùcou¡
 = 0;

617 
ah
->
∑ˇl_öfo
.
¥ev_off£t
 = 
off£t
;

620 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G6
, 
AR9285_AN_RF2G6_OFFS
, 
offs_6_1
);

621 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G3
, 
AR9285_AN_RF2G3_PDVCCOMP
, 
offs_0
);

623 
ªgVÆ
 = 
	`REG_READ
(
ah
, 0x7834);

624 
ªgVÆ
 |= 0x1;

625 
	`REG_WRITE
(
ah
, 0x7834, 
ªgVÆ
);

626 
ªgVÆ
 = 
	`REG_READ
(
ah
, 0x9808);

627 
ªgVÆ
 &= (~(0x1 << 27));

628 
	`REG_WRITE
(
ah
, 0x9808, 
ªgVÆ
);

630 
i
 = 0; i < 
	`ARRAY_SIZE
(
ªgLi°
); i++)

631 
	`REG_WRITE
(
ah
, 
ªgLi°
[
i
][0],ÑegList[i][1]);

633 
	`REG_RMW_FIELD
(
ah
, 
AR9285_AN_RF2G6
, 
AR9285_AN_RF2G6_CCOMP
, 
ccomp_‹g
);

634 
	}
}

636 
	$¨9002_hw_∑_ˇl
(
©h_hw
 *
ah
, 
boﬁ
 
is_ª£t
)

638 i‡(
	`AR_SREV_9271
(
ah
)) {

639 i‡(
is_ª£t
 || !
ah
->
∑ˇl_öfo
.
skùcou¡
)

640 
	`¨9271_hw_∑_ˇl
(
ah
, 
is_ª£t
);

642 
ah
->
∑ˇl_öfo
.
skùcou¡
--;

643 } i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
)) {

644 i‡(
is_ª£t
 || !
ah
->
∑ˇl_öfo
.
skùcou¡
)

645 
	`¨9285_hw_∑_ˇl
(
ah
, 
is_ª£t
);

647 
ah
->
∑ˇl_öfo
.
skùcou¡
--;

649 
	}
}

651 
	$¨9002_hw_ﬁc_ãmp_com≥nßti⁄
(
©h_hw
 *
ah
)

653 i‡(
OLC_FOR_AR9287_10_LATER
)

654 
	`¨9287_hw_ﬁc_ãmp_com≥nßti⁄
(
ah
);

655 i‡(
OLC_FOR_AR9280_20_LATER
)

656 
	`¨9280_hw_ﬁc_ãmp_com≥nßti⁄
(
ah
);

657 
	}
}

659 
	$¨9002_hw_ˇlibøã
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

660 
u8
 
rxchaömask
, 
boﬁ
 
l⁄gˇl
)

662 
©h9k_ˇl_li°
 *
cuºCÆ
 = 
ah
->
ˇl_li°_cuº
;

663 
boﬁ
 
nfˇl
, 
nfˇl_≥ndög
 = 
Ál£
, 
≥rˇl_≥ndög
;

664 
ªt
;

666 
nfˇl
 = !!(
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
Ë& 
AR_PHY_AGC_CONTROL_NF
);

667 i‡(
ah
->
ˇld©a
)

668 
nfˇl_≥ndög
 = 
	`ã°_bô
(
NFCAL_PENDING
, &
ah
->
ˇld©a
->
ˇl_Êags
);

670 
≥rˇl_≥ndög
 = (
cuºCÆ
 &&

671 (
cuºCÆ
->
ˇlSèã
 =
CAL_RUNNING
 ||

672 
cuºCÆ
->
ˇlSèã
 =
CAL_WAITING
));

674 i‡(
≥rˇl_≥ndög
 && !
nfˇl
) {

675 i‡(!
	`¨9002_hw_≥r_ˇlibøti⁄
(
ah
, 
ch™
, 
rxchaömask
, 
cuºCÆ
))

678 
ah
->
ˇl_li°_cuº
 = 
cuºCÆ
 = cuºCÆ->
ˇlNext
;

679 i‡(
cuºCÆ
->
ˇlSèã
 =
CAL_WAITING
) {

680 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

686 i‡(
l⁄gˇl
 || 
nfˇl_≥ndög
) {

691 i‡(
	`©h9k_hw_gënf
(
ah
, 
ch™
)) {

698 
ªt
 = 
	`©h9k_hw_lﬂdnf
(
ah
,áh->
curch™
);

699 i‡(
ªt
 < 0)

700  
ªt
;

703 i‡(
l⁄gˇl
) {

704 
	`©h9k_hw_°¨t_nfˇl
(
ah
, 
Ál£
);

706 
	`¨9002_hw_∑_ˇl
(
ah
, 
Ál£
);

707 
	`¨9002_hw_ﬁc_ãmp_com≥nßti⁄
(
ah
);

711  !
≥rˇl_≥ndög
;

712 
	}
}

715 
boﬁ
 
	$¨9285_hw_˛_ˇl
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

717 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

719 
	`REG_SET_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
, 
AR_PHY_CL_CAL_ENABLE
);

720 i‡(
	`IS_CHAN_HT20
(
ch™
)) {

721 
	`REG_SET_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
, 
AR_PHY_PARALLEL_CAL_ENABLE
);

722 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TURBO
, 
AR_PHY_FC_DYN2040_EN
);

723 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

724 
AR_PHY_AGC_CONTROL_FLTR_CAL
);

725 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_CAL_ENABLE
);

726 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_CAL
);

727 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
,

728 
AR_PHY_AGC_CONTROL_CAL
, 0, 
AH_WAIT_TIMEOUT
)) {

729 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

731 
AH_WAIT_TIMEOUT
 / 1000);

732  
Ál£
;

734 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_TURBO
, 
AR_PHY_FC_DYN2040_EN
);

735 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
, 
AR_PHY_PARALLEL_CAL_ENABLE
);

736 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
, 
AR_PHY_CL_CAL_ENABLE
);

738 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_ADC_CTL
, 
AR_PHY_ADC_CTL_OFF_PWDADC
);

739 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_FLTR_CAL
);

740 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_CAL_ENABLE
);

741 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_CAL
);

742 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_CAL
,

743 0, 
AH_WAIT_TIMEOUT
)) {

744 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

746 
AH_WAIT_TIMEOUT
 / 1000);

747  
Ál£
;

750 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ADC_CTL
, 
AR_PHY_ADC_CTL_OFF_PWDADC
);

751 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
, 
AR_PHY_CL_CAL_ENABLE
);

752 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_FLTR_CAL
);

754  
åue
;

755 
	}
}

757 
boﬁ
 
	$¨9285_hw_˛c
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

759 
i
;

760 
u_öt32_t
 
txgaö_max
;

761 
u_öt32_t
 
˛c_gaö
, 
gaö_mask
 = 0, 
˛c_num
 = 0;

762 
u_öt32_t
 
ªg_˛c_I0
, 
ªg_˛c_Q0
;

763 
u_öt32_t
 
i0_num
 = 0;

764 
u_öt32_t
 
q0_num
 = 0;

765 
u_öt32_t
 
tŸÆ_num
 = 0;

766 
u_öt32_t
 
ªg_rf2g5_‹g
;

767 
boﬁ
 
ªtv
 = 
åue
;

769 i‡(!(
	`¨9285_hw_˛_ˇl
(
ah
, 
ch™
)))

770  
Ál£
;

772 
txgaö_max
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_TX_PWRCTRL7
),

773 
AR_PHY_TX_PWRCTRL_TX_GAIN_TAB_MAX
);

775 
i
 = 0; i < (
txgaö_max
+1); i++) {

776 
˛c_gaö
 = (
	`REG_READ
(
ah
, (
AR_PHY_TX_GAIN_TBL1
+(
i
<<2))) &

777 
AR_PHY_TX_GAIN_CLC
Ë>> 
AR_PHY_TX_GAIN_CLC_S
;

778 i‡(!(
gaö_mask
 & (1 << 
˛c_gaö
))) {

779 
gaö_mask
 |(1 << 
˛c_gaö
);

780 
˛c_num
++;

784 
i
 = 0; i < 
˛c_num
; i++) {

785 
ªg_˛c_I0
 = (
	`REG_READ
(
ah
, (
AR_PHY_CLC_TBL1
 + (
i
 << 2)))

786 & 
AR_PHY_CLC_I0
Ë>> 
AR_PHY_CLC_I0_S
;

787 
ªg_˛c_Q0
 = (
	`REG_READ
(
ah
, (
AR_PHY_CLC_TBL1
 + (
i
 << 2)))

788 & 
AR_PHY_CLC_Q0
Ë>> 
AR_PHY_CLC_Q0_S
;

789 i‡(
ªg_˛c_I0
 == 0)

790 
i0_num
++;

792 i‡(
ªg_˛c_Q0
 == 0)

793 
q0_num
++;

795 
tŸÆ_num
 = 
i0_num
 + 
q0_num
;

796 i‡(
tŸÆ_num
 > 
AR9285_CLCAL_REDO_THRESH
) {

797 
ªg_rf2g5_‹g
 = 
	`REG_READ
(
ah
, 
AR9285_RF2G5
);

798 i‡(
	`AR_SREV_9285E_20
(
ah
)) {

799 
	`REG_WRITE
(
ah
, 
AR9285_RF2G5
,

800 (
ªg_rf2g5_‹g
 & 
AR9285_RF2G5_IC50TX
) |

801 
AR9285_RF2G5_IC50TX_XE_SET
);

803 
	`REG_WRITE
(
ah
, 
AR9285_RF2G5
,

804 (
ªg_rf2g5_‹g
 & 
AR9285_RF2G5_IC50TX
) |

805 
AR9285_RF2G5_IC50TX_SET
);

807 
ªtv
 = 
	`¨9285_hw_˛_ˇl
(
ah
, 
ch™
);

808 
	`REG_WRITE
(
ah
, 
AR9285_RF2G5
, 
ªg_rf2g5_‹g
);

810  
ªtv
;

811 
	}
}

813 
boﬁ
 
	$¨9002_hw_öô_ˇl
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

815 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

817 i‡(
	`AR_SREV_9271
(
ah
)) {

818 i‡(!
	`¨9285_hw_˛_ˇl
(
ah
, 
ch™
))

819  
Ál£
;

820 } i‡(
	`AR_SREV_9285
(
ah
Ë&& 
	`AR_SREV_9285_12_OR_LATER
(ah)) {

821 i‡(!
	`¨9285_hw_˛c
(
ah
, 
ch™
))

822  
Ál£
;

824 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

825 i‡(!
	`AR_SREV_9287_11_OR_LATER
(
ah
))

826 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_ADC_CTL
,

827 
AR_PHY_ADC_CTL_OFF_PWDADC
);

828 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

829 
AR_PHY_AGC_CONTROL_FLTR_CAL
);

833 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
,

834 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
) |

835 
AR_PHY_AGC_CONTROL_CAL
);

838 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
,

839 
AR_PHY_AGC_CONTROL_CAL
,

840 0, 
AH_WAIT_TIMEOUT
)) {

841 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

843 
AH_WAIT_TIMEOUT
 / 1000);

844  
Ál£
;

847 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

848 i‡(!
	`AR_SREV_9287_11_OR_LATER
(
ah
))

849 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ADC_CTL
,

850 
AR_PHY_ADC_CTL_OFF_PWDADC
);

851 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

852 
AR_PHY_AGC_CONTROL_FLTR_CAL
);

857 
	`¨9002_hw_∑_ˇl
(
ah
, 
åue
);

858 
	`©h9k_hw_lﬂdnf
(
ah
, 
ch™
);

859 
	`©h9k_hw_°¨t_nfˇl
(
ah
, 
åue
);

861 i‡(
ah
->
ˇld©a
)

862 
	`£t_bô
(
NFCAL_PENDING
, &
ah
->
ˇld©a
->
ˇl_Êags
);

864 
ah
->
ˇl_li°
 =áh->
ˇl_li°_œ°
 =áh->
ˇl_li°_cuº
 = 
NULL
;

867 i‡(
	`AR_SREV_9100
(
ah
Ë|| 
	`AR_SREV_9160_10_OR_LATER
(ah)) {

868 
ah
->
suµ_ˇls
 = 
IQ_MISMATCH_CAL
;

870 i‡(
	`AR_SREV_9160_10_OR_LATER
(
ah
))

871 
ah
->
suµ_ˇls
 |
ADC_GAIN_CAL
 | 
ADC_DC_CAL
;

873 i‡(
	`AR_SREV_9287
(
ah
))

874 
ah
->
suµ_ˇls
 &~
ADC_GAIN_CAL
;

876 i‡(
	`¨9002_hw_is_ˇl_suµ‹ãd
(
ah
, 
ch™
, 
ADC_GAIN_CAL
)) {

877 
	`INIT_CAL
(&
ah
->
adcgaö_ˇld©a
);

878 
	`INSERT_CAL
(
ah
, &ah->
adcgaö_ˇld©a
);

879 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

883 i‡(
	`¨9002_hw_is_ˇl_suµ‹ãd
(
ah
, 
ch™
, 
ADC_DC_CAL
)) {

884 
	`INIT_CAL
(&
ah
->
adcdc_ˇld©a
);

885 
	`INSERT_CAL
(
ah
, &ah->
adcdc_ˇld©a
);

886 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

890 i‡(
	`¨9002_hw_is_ˇl_suµ‹ãd
(
ah
, 
ch™
, 
IQ_MISMATCH_CAL
)) {

891 
	`INIT_CAL
(&
ah
->
iq_ˇld©a
);

892 
	`INSERT_CAL
(
ah
, &ah->
iq_ˇld©a
);

893 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "enabling IQ Calibration\n");

896 
ah
->
ˇl_li°_cuº
 =áh->
ˇl_li°
;

898 i‡(
ah
->
ˇl_li°_cuº
)

899 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
,áh->
ˇl_li°_cuº
);

902 i‡(
ah
->
ˇld©a
)

903 
ah
->
ˇld©a
->
CÆVÆid
 = 0;

905  
åue
;

906 
	}
}

908 c⁄° 
©h9k_≥rˇl_d©a
 
	giq_ˇl_mu…i_ßm∂e
 = {

909 
IQ_MISMATCH_CAL
,

910 
MAX_CAL_SAMPLES
,

911 
PER_MIN_LOG_COUNT
,

912 
¨9002_hw_iqˇl_cﬁÀ˘
,

913 
¨9002_hw_iqˇlibøã


915 c⁄° 
©h9k_≥rˇl_d©a
 
	giq_ˇl_sögÀ_ßm∂e
 = {

916 
IQ_MISMATCH_CAL
,

917 
MIN_CAL_SAMPLES
,

918 
PER_MAX_LOG_COUNT
,

919 
¨9002_hw_iqˇl_cﬁÀ˘
,

920 
¨9002_hw_iqˇlibøã


922 c⁄° 
©h9k_≥rˇl_d©a
 
	gadc_gaö_ˇl_mu…i_ßm∂e
 = {

923 
ADC_GAIN_CAL
,

924 
MAX_CAL_SAMPLES
,

925 
PER_MIN_LOG_COUNT
,

926 
¨9002_hw_adc_gaöˇl_cﬁÀ˘
,

927 
¨9002_hw_adc_gaöˇl_ˇlibøã


929 c⁄° 
©h9k_≥rˇl_d©a
 
	gadc_gaö_ˇl_sögÀ_ßm∂e
 = {

930 
ADC_GAIN_CAL
,

931 
MIN_CAL_SAMPLES
,

932 
PER_MAX_LOG_COUNT
,

933 
¨9002_hw_adc_gaöˇl_cﬁÀ˘
,

934 
¨9002_hw_adc_gaöˇl_ˇlibøã


936 c⁄° 
©h9k_≥rˇl_d©a
 
	gadc_dc_ˇl_mu…i_ßm∂e
 = {

937 
ADC_DC_CAL
,

938 
MAX_CAL_SAMPLES
,

939 
PER_MIN_LOG_COUNT
,

940 
¨9002_hw_adc_dcˇl_cﬁÀ˘
,

941 
¨9002_hw_adc_dcˇl_ˇlibøã


943 c⁄° 
©h9k_≥rˇl_d©a
 
	gadc_dc_ˇl_sögÀ_ßm∂e
 = {

944 
ADC_DC_CAL
,

945 
MIN_CAL_SAMPLES
,

946 
PER_MAX_LOG_COUNT
,

947 
¨9002_hw_adc_dcˇl_cﬁÀ˘
,

948 
¨9002_hw_adc_dcˇl_ˇlibøã


951 
	$¨9002_hw_öô_ˇl_£âögs
(
©h_hw
 *
ah
)

953 i‡(
	`AR_SREV_9100
(
ah
)) {

954 
ah
->
iq_ˇld©a
.
ˇlD©a
 = &
iq_ˇl_mu…i_ßm∂e
;

955 
ah
->
suµ_ˇls
 = 
IQ_MISMATCH_CAL
;

959 i‡(
	`AR_SREV_9160_10_OR_LATER
(
ah
)) {

960 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

961 
ah
->
iq_ˇld©a
.
ˇlD©a
 = &
iq_ˇl_sögÀ_ßm∂e
;

962 
ah
->
adcgaö_ˇld©a
.
ˇlD©a
 =

963 &
adc_gaö_ˇl_sögÀ_ßm∂e
;

964 
ah
->
adcdc_ˇld©a
.
ˇlD©a
 =

965 &
adc_dc_ˇl_sögÀ_ßm∂e
;

967 
ah
->
iq_ˇld©a
.
ˇlD©a
 = &
iq_ˇl_mu…i_ßm∂e
;

968 
ah
->
adcgaö_ˇld©a
.
ˇlD©a
 =

969 &
adc_gaö_ˇl_mu…i_ßm∂e
;

970 
ah
->
adcdc_ˇld©a
.
ˇlD©a
 =

971 &
adc_dc_ˇl_mu…i_ßm∂e
;

973 
ah
->
suµ_ˇls
 = 
ADC_GAIN_CAL
 | 
ADC_DC_CAL
 | 
IQ_MISMATCH_CAL
;

975 i‡(
	`AR_SREV_9287
(
ah
))

976 
ah
->
suµ_ˇls
 &~
ADC_GAIN_CAL
;

978 
	}
}

980 
	$¨9002_hw_©èch_ˇlib_›s
(
©h_hw
 *
ah
)

982 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

983 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

985 
¥iv_›s
->
öô_ˇl_£âögs
 = 
¨9002_hw_öô_ˇl_£âögs
;

986 
¥iv_›s
->
öô_ˇl
 = 
¨9002_hw_öô_ˇl
;

987 
¥iv_›s
->
£tup_ˇlibøti⁄
 = 
¨9002_hw_£tup_ˇlibøti⁄
;

989 
›s
->
ˇlibøã
 = 
¨9002_hw_ˇlibøã
;

990 
	}
}

	@ar9002_hw.c

17 
	~<löux/moduÀ∑øm.h
>

18 
	~"hw.h
"

19 
	~"¨5008_öôvÆs.h
"

20 
	~"¨9001_öôvÆs.h
"

21 
	~"¨9002_öôvÆs.h
"

22 
	~"¨9002_phy.h
"

26 
	$¨9002_hw_öô_mode_ªgs
(
©h_hw
 *
ah
)

28 i‡(
	`AR_SREV_9271
(
ah
)) {

29 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨9271Modes_9271
);

30 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨9271Comm⁄_9271
);

31 
	`INIT_INI_ARRAY
(&
ah
->
öiModes_9271_ANI_ªg
, 
¨9271Modes_9271_ANI_ªg
);

35 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

36 
¨9280PcõPhy_˛kªq_Æways_⁄_L1_9280
);

38 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
)) {

39 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨9287Modes_9287_1_1
);

40 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨9287Comm⁄_9287_1_1
);

41 } i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
)) {

42 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨9285Modes_9285_1_2
);

43 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨9285Comm⁄_9285_1_2
);

44 } i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

45 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨9280Modes_9280_2
);

46 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨9280Comm⁄_9280_2
);

48 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

49 
¨9280Modes_Á°_˛ock_9280_2
);

50 } i‡(
	`AR_SREV_9160_10_OR_LATER
(
ah
)) {

51 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨5416Modes_9160
);

52 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨5416Comm⁄_9160
);

53 i‡(
	`AR_SREV_9160_11
(
ah
)) {

54 
	`INIT_INI_ARRAY
(&
ah
->
öiAddac
,

55 
¨5416Addac_9160_1_1
);

57 
	`INIT_INI_ARRAY
(&
ah
->
öiAddac
, 
¨5416Addac_9160
);

59 } i‡(
	`AR_SREV_9100_OR_LATER
(
ah
)) {

60 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨5416Modes_9100
);

61 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨5416Comm⁄_9100
);

62 
	`INIT_INI_ARRAY
(&
ah
->
öiAddac
, 
¨5416Addac_9100
);

64 
	`INIT_INI_ARRAY
(&
ah
->
öiModes
, 
¨5416Modes
);

65 
	`INIT_INI_ARRAY
(&
ah
->
öiComm⁄
, 
¨5416Comm⁄
);

66 
	`INIT_INI_ARRAY
(&
ah
->
öiAddac
, 
¨5416Addac
);

69 i‡(!
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

71 
	`INIT_INI_ARRAY
(&
ah
->
öiBB_RfGaö
, 
¨5416BB_RfGaö
);

74 i‡(!
	`AR_SREV_5416
(
ah
))

75 
	`INIT_INI_ARRAY
(&
ah
->
öiB™k6
, 
¨5416B™k6TPC_9100
);

77 
	`INIT_INI_ARRAY
(&
ah
->
öiB™k6
, 
¨5416B™k6TPC
);

81 i‡(
	`AR_SREV_9160
(
ah
Ë|| !
	`AR_SREV_5416_22_OR_LATER
(ah)) {

82 
¨5416IniAºay
 *
addac
 = &
ah
->
öiAddac
;

83 
u32
 
size
 = (u32Ë* 
addac
->
ü_rows
 *áddac->
ü_cﬁumns
;

84 
u32
 *
d©a
;

86 
d©a
 = 
	`devm_kzÆloc
(
ah
->
dev
, 
size
, 
GFP_KERNEL
);

87 i‡(!
d©a
)

88  -
ENOMEM
;

90 
	`mem˝y
(
d©a
, 
addac
->
ü_¨øy
, 
size
);

91 
addac
->
ü_¨øy
 = 
d©a
;

93 i‡(!
	`AR_SREV_5416_22_OR_LATER
(
ah
)) {

95 
	`INI_RA
(
addac
, 31,1) = 0;

98 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
)) {

99 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúN‹mÆ
,

100 
¨9287Comm⁄_n‹mÆ_cck_fú_c€ff_9287_1_1
);

101 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

102 
¨9287Comm⁄_j≠™_2484_cck_fú_c€ff_9287_1_1
);

105 
	}
}

107 
	$¨9280_20_hw_öô_rxgaö_öi
(
©h_hw
 *
ah
)

109 
u32
 
rxgaö_ty≥
;

111 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_MINOR_REV
) >=

112 
AR5416_EEP_MINOR_VER_17
) {

113 
rxgaö_ty≥
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_RXGAIN_TYPE
);

115 i‡(
rxgaö_ty≥
 =
AR5416_EEP_RXGAIN_13DB_BACKOFF
)

116 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

117 
¨9280Modes_backoff_13db_rxgaö_9280_2
);

118 i‡(
rxgaö_ty≥
 =
AR5416_EEP_RXGAIN_23DB_BACKOFF
)

119 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

120 
¨9280Modes_backoff_23db_rxgaö_9280_2
);

122 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

123 
¨9280Modes_‹igöÆ_rxgaö_9280_2
);

125 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

126 
¨9280Modes_‹igöÆ_rxgaö_9280_2
);

128 
	}
}

130 
	$¨9280_20_hw_öô_txgaö_öi
(
©h_hw
 *
ah
, 
u32
 
txgaö_ty≥
)

132 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_MINOR_REV
) >=

133 
AR5416_EEP_MINOR_VER_19
) {

134 i‡(
txgaö_ty≥
 =
AR5416_EEP_TXGAIN_HIGH_POWER
)

135 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

136 
¨9280Modes_high_powî_tx_gaö_9280_2
);

138 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

139 
¨9280Modes_‹igöÆ_tx_gaö_9280_2
);

141 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

142 
¨9280Modes_‹igöÆ_tx_gaö_9280_2
);

144 
	}
}

146 
	$¨9271_hw_öô_txgaö_öi
(
©h_hw
 *
ah
, 
u32
 
txgaö_ty≥
)

148 i‡(
txgaö_ty≥
 =
AR5416_EEP_TXGAIN_HIGH_POWER
)

149 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

150 
¨9271Modes_high_powî_tx_gaö_9271
);

152 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

153 
¨9271Modes_n‹mÆ_powî_tx_gaö_9271
);

154 
	}
}

156 
	$¨9002_hw_öô_mode_gaö_ªgs
(
©h_hw
 *
ah
)

158 
u32
 
txgaö_ty≥
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_TXGAIN_TYPE
);

160 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
))

161 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

162 
¨9287Modes_rx_gaö_9287_1_1
);

163 i‡(
	`AR_SREV_9280_20
(
ah
))

164 
	`¨9280_20_hw_öô_rxgaö_öi
(
ah
);

166 i‡(
	`AR_SREV_9271
(
ah
)) {

167 
	`¨9271_hw_öô_txgaö_öi
(
ah
, 
txgaö_ty≥
);

168 } i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
)) {

169 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

170 
¨9287Modes_tx_gaö_9287_1_1
);

171 } i‡(
	`AR_SREV_9280_20
(
ah
)) {

172 
	`¨9280_20_hw_öô_txgaö_öi
(
ah
, 
txgaö_ty≥
);

173 } i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
)) {

175 i‡(
txgaö_ty≥
 =
AR5416_EEP_TXGAIN_HIGH_POWER
) {

176 i‡(
	`AR_SREV_9285E_20
(
ah
)) {

177 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

178 
¨9285Modes_XE2_0_high_powî
);

180 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

181 
¨9285Modes_high_powî_tx_gaö_9285_1_2
);

184 i‡(
	`AR_SREV_9285E_20
(
ah
)) {

185 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

186 
¨9285Modes_XE2_0_n‹mÆ_powî
);

188 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

189 
¨9285Modes_‹igöÆ_tx_gaö_9285_1_2
);

193 
	}
}

204 
	$¨9002_hw_c⁄figpcùowîßve
(
©h_hw
 *
ah
,

205 
boﬁ
 
powî_off
)

207 
u8
 
i
;

208 
u32
 
vÆ
;

211 i‡(!
powî_off
 ) {

212 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

218 
i
 = 0; i < 
ah
->
öiPcõSîdes
.
ü_rows
; i++) {

219 
	`REG_WRITE
(
ah
, 
	`INI_RA
(&ah->
öiPcõSîdes
, 
i
, 0),

220 
	`INI_RA
(&
ah
->
öiPcõSîdes
, 
i
, 1));

223 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

225 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x9248fc00);

226 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x24924924);

229 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x28000039);

230 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x53160824);

231 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0xe5980579);

237 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x001defff);

239 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x1aaabe40);

240 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0xbe105554);

241 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x000e3007);

244 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES2
, 0x00000000);

246 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

249 
	`udñay
(1000);

252 i‡(
powî_off
) {

254 
	`REG_CLR_BIT
(
ah
, 
AR_PCIE_PM_CTRL
, 
AR_PCIE_PM_CTRL_ENA
);

256 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_WA
);

264 i‡(
ah
->
c⁄fig
.
pcõ_w´n
) {

265 i‡(
ah
->
c⁄fig
.
pcõ_w´n
 & 
AR_WA_D3_L1_DISABLE
)

266 
vÆ
 |
AR_WA_D3_L1_DISABLE
;

268 i‡(
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9271
◊hË|| 
	`AR_SREV_9287
(ah)) {

269 i‡(
AR9285_WA_DEFAULT
 & 
AR_WA_D3_L1_DISABLE
)

270 
vÆ
 |
AR_WA_D3_L1_DISABLE
;

271 } i‡(
	`AR_SREV_9280
(
ah
)) {

272 i‡(
AR9280_WA_DEFAULT
 & 
AR_WA_D3_L1_DISABLE
)

273 
vÆ
 |
AR_WA_D3_L1_DISABLE
;

277 i‡(
	`AR_SREV_9280
(
ah
Ë|| 
	`AR_SREV_9285
◊hË|| 
	`AR_SREV_9287
(ah)) {

282 
vÆ
 &~(
AR_WA_BIT6
 | 
AR_WA_BIT7
);

285 i‡(
	`AR_SREV_9280
(
ah
))

286 
vÆ
 |
AR_WA_BIT22
;

288 i‡(
	`AR_SREV_9285E_20
(
ah
))

289 
vÆ
 |
AR_WA_BIT23
;

291 
	`REG_WRITE
(
ah
, 
AR_WA
, 
vÆ
);

293 i‡(
ah
->
c⁄fig
.
pcõ_w´n
) {

294 
vÆ
 = 
ah
->
c⁄fig
.
pcõ_w´n
;

295 
vÆ
 &(~
AR_WA_D3_L1_DISABLE
);

297 i‡(
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9271
◊hË|| 
	`AR_SREV_9287
(ah)) {

298 
vÆ
 = 
AR9285_WA_DEFAULT
;

299 
vÆ
 &(~
AR_WA_D3_L1_DISABLE
);

300 } i‡(
	`AR_SREV_9280
(
ah
)) {

305 
vÆ
 = 
AR9280_WA_DEFAULT
;

306 
vÆ
 &(~
AR_WA_D3_L1_DISABLE
);

308 
vÆ
 = 
AR_WA_DEFAULT
;

313 i‡(
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9287
(ah))

314 
vÆ
 |(
AR_WA_BIT6
 | 
AR_WA_BIT7
);

316 i‡(
	`AR_SREV_9285E_20
(
ah
))

317 
vÆ
 |
AR_WA_BIT23
;

319 
	`REG_WRITE
(
ah
, 
AR_WA
, 
vÆ
);

322 
	`REG_SET_BIT
(
ah
, 
AR_PCIE_PM_CTRL
, 
AR_PCIE_PM_CTRL_ENA
);

324 
	}
}

326 
	$¨9002_hw_gë_ødi‹ev
(
©h_hw
 *
ah
)

328 
u32
 
vÆ
;

329 
i
;

331 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

333 
	`REG_WRITE
(
ah
, 
	`AR_PHY
(0x36), 0x00007058);

334 
i
 = 0; i < 8; i++)

335 
	`REG_WRITE
(
ah
, 
	`AR_PHY
(0x20), 0x00010000);

337 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

339 
vÆ
 = (
	`REG_READ
(
ah
, 
	`AR_PHY
(256)) >> 24) & 0xff;

340 
vÆ
 = ((val & 0xf0) >> 4) | ((val & 0x0f) << 4);

342  
	`©h9k_hw_ªvî£_bôs
(
vÆ
, 8);

343 
	}
}

345 
	$¨9002_hw_rf_˛aim
(
©h_hw
 *
ah
)

347 
u32
 
vÆ
;

349 
	`REG_WRITE
(
ah
, 
	`AR_PHY
(0), 0x00000007);

351 
vÆ
 = 
	`¨9002_hw_gë_ødi‹ev
(
ah
);

352 
vÆ
 & 
AR_RADIO_SREV_MAJOR
) {

354 
vÆ
 = 
AR_RAD5133_SREV_MAJOR
;

356 
AR_RAD5133_SREV_MAJOR
:

357 
AR_RAD5122_SREV_MAJOR
:

358 
AR_RAD2133_SREV_MAJOR
:

359 
AR_RAD2122_SREV_MAJOR
:

362 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

364 
vÆ
 & 
AR_RADIO_SREV_MAJOR
);

365  -
EOPNOTSUPP
;

368 
ah
->
hw_vîsi⁄
.
™Æog5GhzRev
 = 
vÆ
;

371 
	}
}

373 
	$¨9002_hw_íabÀ_async_fifo
(
©h_hw
 *
ah
)

375 i‡(
	`AR_SREV_9287_13_OR_LATER
(
ah
)) {

376 
	`REG_SET_BIT
(
ah
, 
AR_MAC_PCU_ASYNC_FIFO_REG3
,

377 
AR_MAC_PCU_ASYNC_FIFO_REG3_DATAPATH_SEL
);

378 
	`REG_SET_BIT
(
ah
, 
AR_PHY_MODE
, 
AR_PHY_MODE_ASYNCFIFO
);

379 
	`REG_CLR_BIT
(
ah
, 
AR_MAC_PCU_ASYNC_FIFO_REG3
,

380 
AR_MAC_PCU_ASYNC_FIFO_REG3_SOFT_RESET
);

381 
	`REG_SET_BIT
(
ah
, 
AR_MAC_PCU_ASYNC_FIFO_REG3
,

382 
AR_MAC_PCU_ASYNC_FIFO_REG3_SOFT_RESET
);

384 
	}
}

386 
	$¨9002_hw_öô_h™g_checks
(
©h_hw
 *
ah
)

388 i‡(
	`AR_SREV_9100
(
ah
Ë|| 
	`AR_SREV_9160
(ah)) {

389 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_BB_RIFS_HANG
;

390 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_BB_DFS_HANG
;

393 i‡(
	`AR_SREV_9280
(
ah
))

394 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_BB_RX_CLEAR_STUCK_HANG
;

396 i‡(
	`AR_SREV_5416
(
ah
Ë|| 
	`AR_SREV_9100
◊hË|| 
	`AR_SREV_9160
(ah))

397 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_MAC_HANG
;

398 
	}
}

401 
	$¨9002_hw_©èch_›s
(
©h_hw
 *
ah
)

403 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

404 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

405 
ªt
;

407 
ªt
 = 
	`¨9002_hw_öô_mode_ªgs
(
ah
);

408 i‡(
ªt
)

409  
ªt
;

411 
¥iv_›s
->
öô_mode_gaö_ªgs
 = 
¨9002_hw_öô_mode_gaö_ªgs
;

412 
¥iv_›s
->
öô_h™g_checks
 = 
¨9002_hw_öô_h™g_checks
;

414 
›s
->
c⁄fig_pci_powîßve
 = 
¨9002_hw_c⁄figpcùowîßve
;

416 
ªt
 = 
	`¨5008_hw_©èch_phy_›s
(
ah
);

417 i‡(
ªt
)

418  
ªt
;

420 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

421 
	`¨9002_hw_©èch_phy_›s
(
ah
);

423 
	`¨9002_hw_©èch_ˇlib_›s
(
ah
);

424 
	`¨9002_hw_©èch_mac_›s
(
ah
);

426 
	}
}

428 
	$¨9002_hw_lﬂd_™i_ªg
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

430 
u32
 
modesIndex
;

431 
i
;

433 i‡(
	`IS_CHAN_5GHZ
(
ch™
))

434 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 2 : 1;

436 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 3 : 4;

438 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

440 
i
 = 0; i < 
ah
->
öiModes_9271_ANI_ªg
.
ü_rows
; i++) {

441 
u32
 
ªg
 = 
	`INI_RA
(&
ah
->
öiModes_9271_ANI_ªg
, 
i
, 0);

442 
u32
 
vÆ
 = 
	`INI_RA
(&
ah
->
öiModes_9271_ANI_ªg
, 
i
, 
modesIndex
);

443 
u32
 
vÆ_‹ig
;

445 i‡(
ªg
 =
AR_PHY_CCK_DETECT
) {

446 
vÆ_‹ig
 = 
	`REG_READ
(
ah
, 
ªg
);

447 
vÆ
 &
AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK
;

448 
vÆ_‹ig
 &~
AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK
;

450 
	`REG_WRITE
(
ah
, 
ªg
, 
vÆ
|
vÆ_‹ig
);

452 
	`REG_WRITE
(
ah
, 
ªg
, 
vÆ
);

455 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

456 
	}
}

	@ar9002_initvals.h

17 c⁄° 
u32
 
	g¨9280Modes_9280_2
[][5] = {

67 c⁄° 
u32
 
	g¨9280Comm⁄_9280_2
[][2] = {

411 c⁄° 
u32
 
	g¨9280Modes_Á°_˛ock_9280_2
[][3] = {

428 c⁄° 
u32
 
	g¨9280Modes_backoff_23db_rxgaö_9280_2
[][5] = {

562 c⁄° 
u32
 
	g¨9280Modes_‹igöÆ_rxgaö_9280_2
[][5] = {

696 c⁄° 
u32
 
	g¨9280Modes_backoff_13db_rxgaö_9280_2
[][5] = {

830 c⁄° 
u32
 
	g¨9280Modes_high_powî_tx_gaö_9280_2
[][5] = {

865 c⁄° 
u32
 
	g¨9280Modes_‹igöÆ_tx_gaö_9280_2
[][5] = {

900 c⁄° 
u32
 
	g¨9280PcõPhy_˛kªq_off_L1_9280
[][2] = {

914 c⁄° 
u32
 
	g¨9280PcõPhy_˛kªq_Æways_⁄_L1_9280
[][2] = {

928 c⁄° 
u32
 
	g¨9285Modes_9285_1_2
[][5] = {

1234 c⁄° 
u32
 
	g¨9285Comm⁄_9285_1_2
[][2] = {

1554 c⁄° 
u32
 
	g¨9285Modes_high_powî_tx_gaö_9285_1_2
[][5] = {

1595 c⁄° 
u32
 
	g¨9285Modes_‹igöÆ_tx_gaö_9285_1_2
[][5] = {

1636 c⁄° 
u32
 
	g¨9285Modes_XE2_0_n‹mÆ_powî
[][5] = {

1677 c⁄° 
u32
 
	g¨9285Modes_XE2_0_high_powî
[][5] = {

1718 c⁄° 
u32
 
	g¨9287Modes_9287_1_1
[][5] = {

1765 c⁄° 
u32
 
	g¨9287Comm⁄_9287_1_1
[][2] = {

2134 c⁄° 
u32
 
	g¨9287Comm⁄_n‹mÆ_cck_fú_c€ff_9287_1_1
[][2] = {

2141 c⁄° 
u32
 
	g¨9287Comm⁄_j≠™_2484_cck_fú_c€ff_9287_1_1
[][2] = {

2148 c⁄° 
u32
 
	g¨9287Modes_tx_gaö_9287_1_1
[][5] = {

2197 c⁄° 
u32
 
	g¨9287Modes_rx_gaö_9287_1_1
[][5] = {

2459 c⁄° 
u32
 
	g¨9271Modes_9271
[][5] = {

2766 c⁄° 
u32
 
	g¨9271Comm⁄_9271
[][2] = {

3095 c⁄° 
u32
 
	g¨9271Modes_9271_ANI_ªg
[][5] = {

3107 c⁄° 
u32
 
	g¨9271Modes_n‹mÆ_powî_tx_gaö_9271
[][5] = {

3144 c⁄° 
u32
 
	g¨9271Modes_high_powî_tx_gaö_9271
[][5] = {

	@ar9002_mac.c

17 
	~"hw.h
"

18 
	~<löux/exp‹t.h
>

20 
	#AR_BufLí
 0x00000fff

	)

22 
	$¨9002_hw_rx_íabÀ
(
©h_hw
 *
ah
)

24 
	`REG_WRITE
(
ah
, 
AR_CR
, 
AR_CR_RXE
);

25 
	}
}

27 
	$¨9002_hw_£t_desc_lök
(*
ds
, 
u32
 
ds_lök
)

29 ((
©h_desc
*Ë
ds
)->
ds_lök
 = ds_link;

30 
	}
}

32 
boﬁ
 
	$¨9002_hw_gë_i§
(
©h_hw
 *
ah
, 
©h9k_öt
 *
masked
,

33 
u32
 *
sync_ˇu£_p
)

35 
u32
 
i§
 = 0;

36 
u32
 
mask2
 = 0;

37 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

38 
u32
 
sync_ˇu£
 = 0;

39 
boﬁ
 
Áèl_öt
 = 
Ál£
;

40 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

42 i‡(!
	`AR_SREV_9100
(
ah
)) {

43 i‡(
	`REG_READ
(
ah
, 
AR_INTR_ASYNC_CAUSE
Ë& 
AR_INTR_MAC_IRQ
) {

44 i‡((
	`REG_READ
(
ah
, 
AR_RTC_STATUS
Ë& 
AR_RTC_STATUS_M
)

45 =
AR_RTC_STATUS_ON
) {

46 
i§
 = 
	`REG_READ
(
ah
, 
AR_ISR
);

50 
sync_ˇu£
 = 
	`REG_READ
(
ah
, 
AR_INTR_SYNC_CAUSE
) &

51 
AR_INTR_SYNC_DEFAULT
;

53 *
masked
 = 0;

55 i‡(!
i§
 && !
sync_ˇu£
)

56  
Ál£
;

58 *
masked
 = 0;

59 
i§
 = 
	`REG_READ
(
ah
, 
AR_ISR
);

62 i‡(
i§
) {

63 i‡(
i§
 & 
AR_ISR_BCNMISC
) {

64 
u32
 
i§2
;

65 
i§2
 = 
	`REG_READ
(
ah
, 
AR_ISR_S2
);

66 i‡(
i§2
 & 
AR_ISR_S2_TIM
)

67 
mask2
 |
ATH9K_INT_TIM
;

68 i‡(
i§2
 & 
AR_ISR_S2_DTIM
)

69 
mask2
 |
ATH9K_INT_DTIM
;

70 i‡(
i§2
 & 
AR_ISR_S2_DTIMSYNC
)

71 
mask2
 |
ATH9K_INT_DTIMSYNC
;

72 i‡(
i§2
 & (
AR_ISR_S2_CABEND
))

73 
mask2
 |
ATH9K_INT_CABEND
;

74 i‡(
i§2
 & 
AR_ISR_S2_GTT
)

75 
mask2
 |
ATH9K_INT_GTT
;

76 i‡(
i§2
 & 
AR_ISR_S2_CST
)

77 
mask2
 |
ATH9K_INT_CST
;

78 i‡(
i§2
 & 
AR_ISR_S2_TSFOOR
)

79 
mask2
 |
ATH9K_INT_TSFOOR
;

81 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

82 
	`REG_WRITE
(
ah
, 
AR_ISR_S2
, 
i§2
);

83 
i§
 &~
AR_ISR_BCNMISC
;

87 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)

88 
i§
 = 
	`REG_READ
(
ah
, 
AR_ISR_RAC
);

90 i‡(
i§
 == 0xffffffff) {

91 *
masked
 = 0;

92  
Ál£
;

95 *
masked
 = 
i§
 & 
ATH9K_INT_COMMON
;

97 i‡(
i§
 & (
AR_ISR_RXMINTR
 | 
AR_ISR_RXINTM
 |

98 
AR_ISR_RXOK
 | 
AR_ISR_RXERR
))

99 *
masked
 |
ATH9K_INT_RX
;

101 i‡(
i§
 &

102 (
AR_ISR_TXOK
 | 
AR_ISR_TXDESC
 | 
AR_ISR_TXERR
 |

103 
AR_ISR_TXEOL
)) {

104 
u32
 
s0_s
, 
s1_s
;

106 *
masked
 |
ATH9K_INT_TX
;

108 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
) {

109 
s0_s
 = 
	`REG_READ
(
ah
, 
AR_ISR_S0_S
);

110 
s1_s
 = 
	`REG_READ
(
ah
, 
AR_ISR_S1_S
);

112 
s0_s
 = 
	`REG_READ
(
ah
, 
AR_ISR_S0
);

113 
	`REG_WRITE
(
ah
, 
AR_ISR_S0
, 
s0_s
);

114 
s1_s
 = 
	`REG_READ
(
ah
, 
AR_ISR_S1
);

115 
	`REG_WRITE
(
ah
, 
AR_ISR_S1
, 
s1_s
);

117 
i§
 &~(
AR_ISR_TXOK
 |

118 
AR_ISR_TXDESC
 |

119 
AR_ISR_TXERR
 |

120 
AR_ISR_TXEOL
);

123 
ah
->
öå_txqs
 |
	`MS
(
s0_s
, 
AR_ISR_S0_QCU_TXOK
);

124 
ah
->
öå_txqs
 |
	`MS
(
s0_s
, 
AR_ISR_S0_QCU_TXDESC
);

125 
ah
->
öå_txqs
 |
	`MS
(
s1_s
, 
AR_ISR_S1_QCU_TXERR
);

126 
ah
->
öå_txqs
 |
	`MS
(
s1_s
, 
AR_ISR_S1_QCU_TXEOL
);

129 i‡(
i§
 & 
AR_ISR_RXORN
) {

130 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
,

134 *
masked
 |
mask2
;

137 i‡(!
	`AR_SREV_9100
(
ah
Ë&& (
i§
 & 
AR_ISR_GENTMR
)) {

138 
u32
 
s5_s
;

140 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
) {

141 
s5_s
 = 
	`REG_READ
(
ah
, 
AR_ISR_S5_S
);

143 
s5_s
 = 
	`REG_READ
(
ah
, 
AR_ISR_S5
);

146 
ah
->
öå_gí_timî_åiggî
 =

147 
	`MS
(
s5_s
, 
AR_ISR_S5_GENTIMER_TRIG
);

149 
ah
->
öå_gí_timî_thªsh
 =

150 
	`MS
(
s5_s
, 
AR_ISR_S5_GENTIMER_THRESH
);

152 i‡(
ah
->
öå_gí_timî_åiggî
)

153 *
masked
 |
ATH9K_INT_GENTIMER
;

155 i‡((
s5_s
 & 
AR_ISR_S5_TIM_TIMER
) &&

156 !(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
))

157 *
masked
 |
ATH9K_INT_TIM_TIMER
;

159 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

160 
	`REG_WRITE
(
ah
, 
AR_ISR_S5
, 
s5_s
);

161 
i§
 &~
AR_ISR_GENTMR
;

165 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

166 
	`REG_WRITE
(
ah
, 
AR_ISR
, 
i§
);

167 
	`REG_READ
(
ah
, 
AR_ISR
);

170 i‡(
	`AR_SREV_9100
(
ah
))

171  
åue
;

173 i‡(
sync_ˇu£
) {

174 i‡(
sync_ˇu£_p
)

175 *
sync_ˇu£_p
 = 
sync_ˇu£
;

176 
Áèl_öt
 =

177 (
sync_ˇu£
 &

178 (
AR_INTR_SYNC_HOST1_FATAL
 | 
AR_INTR_SYNC_HOST1_PERR
))

179 ? 
åue
 : 
Ál£
;

181 i‡(
Áèl_öt
) {

182 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_HOST1_FATAL
) {

183 
	`©h_dbg
(
comm⁄
, 
ANY
,

186 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_HOST1_PERR
) {

187 
	`©h_dbg
(
comm⁄
, 
ANY
,

190 *
masked
 |
ATH9K_INT_FATAL
;

192 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_TIMEOUT
) {

193 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
,

195 
	`REG_WRITE
(
ah
, 
AR_RC
, 
AR_RC_HOSTIF
);

196 
	`REG_WRITE
(
ah
, 
AR_RC
, 0);

197 *
masked
 |
ATH9K_INT_FATAL
;

199 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_LOCAL_TIMEOUT
) {

200 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
,

204 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_CAUSE_CLR
, 
sync_ˇu£
);

205 (Ë
	`REG_READ
(
ah
, 
AR_INTR_SYNC_CAUSE_CLR
);

208  
åue
;

209 
	}
}

212 
	$¨9002_£t_txdesc
(
©h_hw
 *
ah
, *
ds
, 
©h_tx_öfo
 *
i
)

214 
¨5416_desc
 *
ads
 = 
	`AR5416DESC
(
ds
);

215 
u32
 
˘l1
, 
˘l6
;

217 
ads
->
ds_tx°©us0
 =áds->
ds_tx°©us1
 = 0;

218 
ads
->
ds_tx°©us2
 =áds->
ds_tx°©us3
 = 0;

219 
ads
->
ds_tx°©us4
 =áds->
ds_tx°©us5
 = 0;

220 
ads
->
ds_tx°©us6
 =áds->
ds_tx°©us7
 = 0;

221 
ads
->
ds_tx°©us8
 =áds->
ds_tx°©us9
 = 0;

223 
	`ACCESS_ONCE
(
ads
->
ds_lök
Ë
i
->
lök
;

224 
	`ACCESS_ONCE
(
ads
->
ds_d©a
Ë
i
->
buf_addr
[0];

226 
˘l1
 = 
i
->
buf_Àn
[0] | (i->
is_œ°
 ? 0 : 
AR_TxM‹e
);

227 
˘l6
 = 
	`SM
(
i
->
keyty≥
, 
AR_En¸Ty≥
);

229 i‡(
	`AR_SREV_9285
(
ah
)) {

230 
ads
->
ds_˘l8
 = 0;

231 
ads
->
ds_˘l9
 = 0;

232 
ads
->
ds_˘l10
 = 0;

233 
ads
->
ds_˘l11
 = 0;

236 i‡((
i
->
is_fú°
 || i->
is_œ°
) &&

237 
i
->
aggr
 !
AGGR_BUF_MIDDLE
 && i->agg∏!
AGGR_BUF_LAST
) {

238 
	`ACCESS_ONCE
(
ads
->
ds_˘l2
Ë
	`£t11nTrõs
(
i
->
øãs
, 0)

239 | 
	`£t11nTrõs
(
i
->
øãs
, 1)

240 | 
	`£t11nTrõs
(
i
->
øãs
, 2)

241 | 
	`£t11nTrõs
(
i
->
øãs
, 3)

242 | (
i
->
dur_upd©e
 ? 
AR_DurUpd©eE«
 : 0)

243 | 
	`SM
(0, 
AR_Bur°Dur
);

245 
	`ACCESS_ONCE
(
ads
->
ds_˘l3
Ë
	`£t11nR©e
(
i
->
øãs
, 0)

246 | 
	`£t11nR©e
(
i
->
øãs
, 1)

247 | 
	`£t11nR©e
(
i
->
øãs
, 2)

248 | 
	`£t11nR©e
(
i
->
øãs
, 3);

250 
	`ACCESS_ONCE
(
ads
->
ds_˘l2
) = 0;

251 
	`ACCESS_ONCE
(
ads
->
ds_˘l3
) = 0;

254 i‡(!
i
->
is_fú°
) {

255 
	`ACCESS_ONCE
(
ads
->
ds_˘l0
) = 0;

256 
	`ACCESS_ONCE
(
ads
->
ds_˘l1
Ë
˘l1
;

257 
	`ACCESS_ONCE
(
ads
->
ds_˘l6
Ë
˘l6
;

261 
˘l1
 |(
i
->
keyix
 !
ATH9K_TXKEYIX_INVALID
 ? 
	`SM
(i->keyix, 
AR_De°Idx
) : 0)

262 | 
	`SM
(
i
->
ty≥
, 
AR_FømeTy≥
)

263 | (
i
->
Êags
 & 
ATH9K_TXDESC_NOACK
 ? 
AR_NoAck
 : 0)

264 | (
i
->
Êags
 & 
ATH9K_TXDESC_EXT_ONLY
 ? 
AR_ExtO∆y
 : 0)

265 | (
i
->
Êags
 & 
ATH9K_TXDESC_EXT_AND_CTL
 ? 
AR_ExtAndCé
 : 0);

267 
i
->
aggr
) {

268 
AGGR_BUF_FIRST
:

269 
˘l6
 |
	`SM
(
i
->
aggr_Àn
, 
AR_AggrLí
);

271 
AGGR_BUF_MIDDLE
:

272 
˘l1
 |
AR_IsAggr
 | 
AR_M‹eAggr
;

273 
˘l6
 |
	`SM
(
i
->
ndñim
, 
AR_PadDñim
);

275 
AGGR_BUF_LAST
:

276 
˘l1
 |
AR_IsAggr
;

278 
AGGR_BUF_NONE
:

282 
	`ACCESS_ONCE
(
ads
->
ds_˘l0
Ë(
i
->
pkt_Àn
 & 
AR_FømeLí
)

283 | (
i
->
Êags
 & 
ATH9K_TXDESC_VMF
 ? 
AR_VútM‹eFøg
 : 0)

284 | 
	`SM
(
i
->
txpowî
[0], 
AR_XmôPowî0
)

285 | (
i
->
Êags
 & 
ATH9K_TXDESC_VEOL
 ? 
AR_VEOL
 : 0)

286 | (
i
->
Êags
 & 
ATH9K_TXDESC_INTREQ
 ? 
AR_TxI¡rReq
 : 0)

287 | (
i
->
keyix
 !
ATH9K_TXKEYIX_INVALID
 ? 
AR_De°IdxVÆid
 : 0)

288 | (
i
->
Êags
 & 
ATH9K_TXDESC_CLRDMASK
 ? 
AR_CÃDe°Mask
 : 0)

289 | (
i
->
Êags
 & 
ATH9K_TXDESC_RTSENA
 ? 
AR_RTSE«bÀ
 :

290 (
i
->
Êags
 & 
ATH9K_TXDESC_CTSENA
 ? 
AR_CTSE«bÀ
 : 0));

292 
	`ACCESS_ONCE
(
ads
->
ds_˘l1
Ë
˘l1
;

293 
	`ACCESS_ONCE
(
ads
->
ds_˘l6
Ë
˘l6
;

295 i‡(
i
->
aggr
 =
AGGR_BUF_MIDDLE
 || i->agg∏=
AGGR_BUF_LAST
)

298 
	`ACCESS_ONCE
(
ads
->
ds_˘l4
Ë
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 0)

299 | 
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 1);

301 
	`ACCESS_ONCE
(
ads
->
ds_˘l5
Ë
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 2)

302 | 
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 3);

304 
	`ACCESS_ONCE
(
ads
->
ds_˘l7
Ë
	`£t11nR©eFœgs
(
i
->
øãs
, 0)

305 | 
	`£t11nR©eFœgs
(
i
->
øãs
, 1)

306 | 
	`£t11nR©eFœgs
(
i
->
øãs
, 2)

307 | 
	`£t11nR©eFœgs
(
i
->
øãs
, 3)

308 | 
	`SM
(
i
->
πs˘s_øã
, 
AR_RTSCTSR©e
);

310 
	`ACCESS_ONCE
(
ads
->
ds_˘l9
Ë
	`SM
(
i
->
txpowî
[1], 
AR_XmôPowî1
);

311 
	`ACCESS_ONCE
(
ads
->
ds_˘l10
Ë
	`SM
(
i
->
txpowî
[2], 
AR_XmôPowî2
);

312 
	`ACCESS_ONCE
(
ads
->
ds_˘l11
Ë
	`SM
(
i
->
txpowî
[3], 
AR_XmôPowî3
);

313 
	}
}

315 
	$¨9002_hw_¥oc_txdesc
(
©h_hw
 *
ah
, *
ds
,

316 
©h_tx_°©us
 *
ts
)

318 
¨5416_desc
 *
ads
 = 
	`AR5416DESC
(
ds
);

319 
u32
 
°©us
;

321 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
ds_tx°©us9
);

322 i‡((
°©us
 & 
AR_TxD⁄e
) == 0)

323  -
EINPROGRESS
;

325 
ts
->
ts_t°amp
 = 
ads
->
AR_SídTime°amp
;

326 
ts
->
ts_°©us
 = 0;

327 
ts
->
ts_Êags
 = 0;

329 i‡(
°©us
 & 
AR_TxOpEx˚eded
)

330 
ts
->
ts_°©us
 |
ATH9K_TXERR_XTXOP
;

331 
ts
->
tid
 = 
	`MS
(
°©us
, 
AR_TxTid
);

332 
ts
->
ts_øãödex
 = 
	`MS
(
°©us
, 
AR_FöÆTxIdx
);

333 
ts
->
ts_£qnum
 = 
	`MS
(
°©us
, 
AR_SeqNum
);

335 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
ds_tx°©us0
);

336 
ts
->
ts_rssi_˘l0
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡00
);

337 
ts
->
ts_rssi_˘l1
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡01
);

338 
ts
->
ts_rssi_˘l2
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡02
);

339 i‡(
°©us
 & 
AR_TxBaSètus
) {

340 
ts
->
ts_Êags
 |
ATH9K_TX_BA
;

341 
ts
->
ba_low
 = 
ads
->
AR_BaBôm≠Low
;

342 
ts
->
ba_high
 = 
ads
->
AR_BaBôm≠High
;

345 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
ds_tx°©us1
);

346 i‡(
°©us
 & 
AR_FrmXmôOK
)

347 
ts
->
ts_°©us
 |
ATH9K_TX_ACKED
;

349 i‡(
°©us
 & 
AR_Ex˚ssiveRërõs
)

350 
ts
->
ts_°©us
 |
ATH9K_TXERR_XRETRY
;

351 i‡(
°©us
 & 
AR_Fûãªd
)

352 
ts
->
ts_°©us
 |
ATH9K_TXERR_FILT
;

353 i‡(
°©us
 & 
AR_FIFOUndîrun
) {

354 
ts
->
ts_°©us
 |
ATH9K_TXERR_FIFO
;

355 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

358 i‡(
°©us
 & 
AR_TxTimîExpúed
)

359 
ts
->
ts_°©us
 |
ATH9K_TXERR_TIMER_EXPIRED
;

360 i‡(
°©us
 & 
AR_DescCfgEº
)

361 
ts
->
ts_Êags
 |
ATH9K_TX_DESC_CFG_ERR
;

362 i‡(
°©us
 & 
AR_TxD©aUndîrun
) {

363 
ts
->
ts_Êags
 |
ATH9K_TX_DATA_UNDERRUN
;

364 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

366 i‡(
°©us
 & 
AR_TxDñimUndîrun
) {

367 
ts
->
ts_Êags
 |
ATH9K_TX_DELIM_UNDERRUN
;

368 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

370 
ts
->
ts_sh‹åëry
 = 
	`MS
(
°©us
, 
AR_RTSFaûC¡
);

371 
ts
->
ts_l⁄gªåy
 = 
	`MS
(
°©us
, 
AR_D©aFaûC¡
);

372 
ts
->
ts_vútcﬁ
 = 
	`MS
(
°©us
, 
AR_VútRëryC¡
);

374 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
ds_tx°©us5
);

375 
ts
->
ts_rssi
 = 
	`MS
(
°©us
, 
AR_TxRSSIComböed
);

376 
ts
->
ts_rssi_ext0
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡10
);

377 
ts
->
ts_rssi_ext1
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡11
);

378 
ts
->
ts_rssi_ext2
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡12
);

380 
ts
->
evm0
 = 
ads
->
AR_TxEVM0
;

381 
ts
->
evm1
 = 
ads
->
AR_TxEVM1
;

382 
ts
->
evm2
 = 
ads
->
AR_TxEVM2
;

385 
	}
}

387 
	$¨9002_hw_gë_duøti⁄
(
©h_hw
 *
ah
, c⁄° *
ds
, 
ödex
)

389 
¨5416_desc
 *
ads
 = 
	`AR5416DESC
(
ds
);

391 
ödex
) {

393  
	`MS
(
	`ACCESS_ONCE
(
ads
->
ds_˘l4
), 
AR_PackëDur0
);

395  
	`MS
(
	`ACCESS_ONCE
(
ads
->
ds_˘l4
), 
AR_PackëDur1
);

397  
	`MS
(
	`ACCESS_ONCE
(
ads
->
ds_˘l5
), 
AR_PackëDur2
);

399  
	`MS
(
	`ACCESS_ONCE
(
ads
->
ds_˘l5
), 
AR_PackëDur3
);

403 
	}
}

405 
	$©h9k_hw_£tu¥xdesc
(
©h_hw
 *
ah
, 
©h_desc
 *
ds
,

406 
u32
 
size
, u32 
Êags
)

408 
¨5416_desc
 *
ads
 = 
	`AR5416DESC
(
ds
);

410 
ads
->
ds_˘l1
 = 
size
 & 
AR_BufLí
;

411 i‡(
Êags
 & 
ATH9K_RXDESC_INTREQ
)

412 
ads
->
ds_˘l1
 |
AR_RxI¡rReq
;

414 
	`mem£t
(&
ads
->
u
.
rx
, 0, (ads->u.rx));

415 
	}
}

416 
EXPORT_SYMBOL
(
©h9k_hw_£tu¥xdesc
);

418 
	$¨9002_hw_©èch_mac_›s
(
©h_hw
 *
ah
)

420 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

422 
›s
->
rx_íabÀ
 = 
¨9002_hw_rx_íabÀ
;

423 
›s
->
£t_desc_lök
 = 
¨9002_hw_£t_desc_lök
;

424 
›s
->
gë_i§
 = 
¨9002_hw_gë_i§
;

425 
›s
->
£t_txdesc
 = 
¨9002_£t_txdesc
;

426 
›s
->
¥oc_txdesc
 = 
¨9002_hw_¥oc_txdesc
;

427 
›s
->
gë_duøti⁄
 = 
¨9002_hw_gë_duøti⁄
;

428 
	}
}

	@ar9002_phy.c

42 
	~"hw.h
"

43 
	~"¨9002_phy.h
"

66 
	$¨9002_hw_£t_ch™√l
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

68 
u16
 
bMode
, 
‰acMode
, 
aModeRefSñ
 = 0;

69 
u32
 
‰eq
, 
ndiv
, 
ch™√lSñ
 = 0, 
ch™√lFøc
 = 0, 
ªg32
 = 0;

70 
ch™_˚¡îs
 
˚¡îs
;

71 
u32
 
ªfDivA
 = 24;

73 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

74 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

76 
ªg32
 = 
	`REG_READ
(
ah
, 
AR_PHY_SYNTH_CONTROL
);

77 
ªg32
 &= 0xc0000000;

79 i‡(
‰eq
 < 4800) {

80 
u32
 
tx˘l
;

81 
ªgWrôes
 = 0;

83 
bMode
 = 1;

84 
‰acMode
 = 1;

85 
aModeRefSñ
 = 0;

86 
ch™√lSñ
 = 
	`CHANSEL_2G
(
‰eq
);

88 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
)) {

89 i‡(
‰eq
 == 2484) {

91 
	`REG_WRITE_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

92 1, 
ªgWrôes
);

94 
	`REG_WRITE_ARRAY
(&
ah
->
öiCckfúN‹mÆ
,

95 1, 
ªgWrôes
);

98 
tx˘l
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_TX_CTRL
);

99 i‡(
‰eq
 == 2484) {

101 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_TX_CTRL
,

102 
tx˘l
 | 
AR_PHY_CCK_TX_CTRL_JAPAN
);

104 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_TX_CTRL
,

105 
tx˘l
 & ~
AR_PHY_CCK_TX_CTRL_JAPAN
);

109 
bMode
 = 0;

110 
‰acMode
 = 0;

112 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_FRAC_N_5G
)) {

114 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
Ë|| 
	`IS_CHAN_QUARTER_RATE
(chan))

115 
aModeRefSñ
 = 0;

116 i‡((
‰eq
 % 20) == 0)

117 
aModeRefSñ
 = 3;

118 i‡((
‰eq
 % 10) == 0)

119 
aModeRefSñ
 = 2;

120 i‡(
aModeRefSñ
)

124 
aModeRefSñ
 = 0;

129 
‰acMode
 = 1;

130 
ªfDivA
 = 1;

131 
ch™√lSñ
 = 
	`CHANSEL_5G
(
‰eq
);

134 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_SYNTH9
,

135 
AR_AN_SYNTH9_REFDIVA
,

136 
AR_AN_SYNTH9_REFDIVA_S
, 
ªfDivA
);

140 i‡(!
‰acMode
) {

141 
ndiv
 = (
‰eq
 * (
ªfDivA
 >> 
aModeRefSñ
)) / 60;

142 
ch™√lSñ
 = 
ndiv
 & 0x1ff;

143 
ch™√lFøc
 = (
ndiv
 & 0xfffffe00) * 2;

144 
ch™√lSñ
 = (ch™√lSñ << 17Ë| 
ch™√lFøc
;

148 
ªg32
 =Ñeg32 |

149 (
bMode
 << 29) |

150 (
‰acMode
 << 28Ë| (
aModeRefSñ
 << 26Ë| (
ch™√lSñ
);

152 
	`REG_WRITE
(
ah
, 
AR_PHY_SYNTH_CONTROL
, 
ªg32
);

154 
ah
->
curch™
 = 
ch™
;

157 
	}
}

167 
	$¨9002_hw_•ur_môig©e
(
©h_hw
 *
ah
,

168 
©h9k_ch™√l
 *
ch™
)

170 
bb_•ur
 = 
AR_NO_SPUR
;

171 
‰eq
;

172 
bö
;

173 
bb_•ur_off
, 
•ur_subch™√l_sd
;

174 
•ur_‰eq_sd
;

175 
•ur_dñè_pha£
;

176 
díomö©‹
;

177 
tmp
, 
√wVÆ
;

178 
i
;

179 
ch™_˚¡îs
 
˚¡îs
;

181 
cur_bb_•ur
;

182 
boﬁ
 
is2GHz
 = 
	`IS_CHAN_2GHZ
(
ch™
);

184 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

185 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

187 
i
 = 0; i < 
AR_EEPROM_MODAL_SPURS
; i++) {

188 
cur_bb_•ur
 = 
ah
->
ìp_›s
->
	`gë_•ur_ch™√l
◊h, 
i
, 
is2GHz
);

190 i‡(
AR_NO_SPUR
 =
cur_bb_•ur
)

193 i‡(
is2GHz
)

194 
cur_bb_•ur
 = (cur_bb_•u∏/ 10Ë+ 
AR_BASE_FREQ_2GHZ
;

196 
cur_bb_•ur
 = (cur_bb_•u∏/ 10Ë+ 
AR_BASE_FREQ_5GHZ
;

198 
cur_bb_•ur
 = cur_bb_•u∏- 
‰eq
;

200 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

201 i‡((
cur_bb_•ur
 > -
AR_SPUR_FEEQ_BOUND_HT40
) &&

202 (
cur_bb_•ur
 < 
AR_SPUR_FEEQ_BOUND_HT40
)) {

203 
bb_•ur
 = 
cur_bb_•ur
;

206 } i‡((
cur_bb_•ur
 > -
AR_SPUR_FEEQ_BOUND_HT20
) &&

207 (
cur_bb_•ur
 < 
AR_SPUR_FEEQ_BOUND_HT20
)) {

208 
bb_•ur
 = 
cur_bb_•ur
;

213 i‡(
AR_NO_SPUR
 =
bb_•ur
) {

214 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_FORCE_CLKEN_CCK
,

215 
AR_PHY_FORCE_CLKEN_CCK_MRC_MUX
);

218 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_FORCE_CLKEN_CCK
,

219 
AR_PHY_FORCE_CLKEN_CCK_MRC_MUX
);

222 
bö
 = 
bb_•ur
 * 320;

224 
tmp
 = 
	`REG_READ
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0));

226 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

228 
√wVÆ
 = 
tmp
 | (
AR_PHY_TIMING_CTRL4_ENABLE_SPUR_RSSI
 |

229 
AR_PHY_TIMING_CTRL4_ENABLE_SPUR_FILTER
 |

230 
AR_PHY_TIMING_CTRL4_ENABLE_CHAN_MASK
 |

231 
AR_PHY_TIMING_CTRL4_ENABLE_PILOT_MASK
);

232 
	`REG_WRITE
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0), 
√wVÆ
);

234 
√wVÆ
 = (
AR_PHY_SPUR_REG_MASK_RATE_CNTL
 |

235 
AR_PHY_SPUR_REG_ENABLE_MASK_PPM
 |

236 
AR_PHY_SPUR_REG_MASK_RATE_SELECT
 |

237 
AR_PHY_SPUR_REG_ENABLE_VIT_SPUR_RSSI
 |

238 
	`SM
(
SPUR_RSSI_THRESH
, 
AR_PHY_SPUR_REG_SPUR_RSSI_THRESH
));

239 
	`REG_WRITE
(
ah
, 
AR_PHY_SPUR_REG
, 
√wVÆ
);

241 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

242 i‡(
bb_•ur
 < 0) {

243 
•ur_subch™√l_sd
 = 1;

244 
bb_•ur_off
 = 
bb_•ur
 + 10;

246 
•ur_subch™√l_sd
 = 0;

247 
bb_•ur_off
 = 
bb_•ur
 - 10;

250 
•ur_subch™√l_sd
 = 0;

251 
bb_•ur_off
 = 
bb_•ur
;

254 i‡(
	`IS_CHAN_HT40
(
ch™
))

255 
•ur_dñè_pha£
 =

256 ((
bb_•ur
 * 262144) /

257 10Ë& 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
;

259 
•ur_dñè_pha£
 =

260 ((
bb_•ur
 * 524288) /

261 10Ë& 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
;

263 
díomö©‹
 = 
	`IS_CHAN_2GHZ
(
ch™
) ? 44 : 40;

264 
•ur_‰eq_sd
 = ((
bb_•ur_off
 * 2048Ë/ 
díomö©‹
) & 0x3ff;

266 
√wVÆ
 = (
AR_PHY_TIMING11_USE_SPUR_IN_AGC
 |

267 
	`SM
(
•ur_‰eq_sd
, 
AR_PHY_TIMING11_SPUR_FREQ_SD
) |

268 
	`SM
(
•ur_dñè_pha£
, 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
));

269 
	`REG_WRITE
(
ah
, 
AR_PHY_TIMING11
, 
√wVÆ
);

271 
√wVÆ
 = 
•ur_subch™√l_sd
 << 
AR_PHY_SFCORR_SPUR_SUBCHNL_SD_S
;

272 
	`REG_WRITE
(
ah
, 
AR_PHY_SFCORR_EXT
, 
√wVÆ
);

274 
	`¨5008_hw_cmn_•ur_môig©e
(
ah
, 
ch™
, 
bö
);

276 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

277 
	}
}

279 
	$¨9002_ﬁc_öô
(
©h_hw
 *
ah
)

281 
u32
 
i
;

283 i‡(!
OLC_FOR_AR9280_20_LATER
)

286 i‡(
OLC_FOR_AR9287_10_LATER
) {

287 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TX_PWRCTRL9
,

288 
AR_PHY_TX_PWRCTRL9_RES_DC_REMOVAL
);

289 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR9287_AN_TXPC0
,

290 
AR9287_AN_TXPC0_TXPCMODE
,

291 
AR9287_AN_TXPC0_TXPCMODE_S
,

292 
AR9287_AN_TXPC0_TXPCMODE_TEMPSENSE
);

293 
	`udñay
(100);

295 
i
 = 0; i < 
AR9280_TX_GAIN_TABLE_SIZE
; i++)

296 
ah
->
‹igöÆGaö
[
i
] =

297 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_TX_GAIN_TBL1
 + 
i
 * 4),

298 
AR_PHY_TX_GAIN
);

299 
ah
->
PDADCdñè
 = 0;

301 
	}
}

303 
u32
 
	$¨9002_hw_compuã_∂l_c⁄åﬁ
(
©h_hw
 *
ah
,

304 
©h9k_ch™√l
 *
ch™
)

306 
ªf_div
 = 5;

307 
∂l_div
 = 0x2c;

308 
u32
 
∂l
;

310 i‡(
ch™
 && 
	`IS_CHAN_5GHZ
(ch™Ë&& !
	`IS_CHAN_A_FAST_CLOCK
(
ah
, chan)) {

311 i‡(
	`AR_SREV_9280_20
(
ah
)) {

312 
ªf_div
 = 10;

313 
∂l_div
 = 0x50;

315 
∂l_div
 = 0x28;

319 
∂l
 = 
	`SM
(
ªf_div
, 
AR_RTC_9160_PLL_REFDIV
);

320 
∂l
 |
	`SM
(
∂l_div
, 
AR_RTC_9160_PLL_DIV
);

322 i‡(
ch™
 && 
	`IS_CHAN_HALF_RATE
(chan))

323 
∂l
 |
	`SM
(0x1, 
AR_RTC_9160_PLL_CLKSEL
);

324 i‡(
ch™
 && 
	`IS_CHAN_QUARTER_RATE
(chan))

325 
∂l
 |
	`SM
(0x2, 
AR_RTC_9160_PLL_CLKSEL
);

327  
∂l
;

328 
	}
}

330 
	$¨9002_hw_do_gënf
(
©h_hw
 *
ah
,

331 
öt16_t
 
nÁºay
[
NUM_NF_READINGS
])

333 
öt16_t
 
nf
;

335 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CCA
), 
AR9280_PHY_MINCCA_PWR
);

336 
nÁºay
[0] = 
	`sign_exãnd32
(
nf
, 8);

338 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_EXT_CCA
), 
AR9280_PHY_EXT_MINCCA_PWR
);

339 i‡(
	`IS_CHAN_HT40
(
ah
->
curch™
))

340 
nÁºay
[3] = 
	`sign_exãnd32
(
nf
, 8);

342 i‡(!(
ah
->
rxchaömask
 & 
	`BIT
(1)))

345 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CH1_CCA
), 
AR9280_PHY_CH1_MINCCA_PWR
);

346 
nÁºay
[1] = 
	`sign_exãnd32
(
nf
, 8);

348 
nf
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_CH1_EXT_CCA
), 
AR9280_PHY_CH1_EXT_MINCCA_PWR
);

349 i‡(
	`IS_CHAN_HT40
(
ah
->
curch™
))

350 
nÁºay
[4] = 
	`sign_exãnd32
(
nf
, 8);

351 
	}
}

353 
	$¨9002_hw_£t_nf_limôs
(
©h_hw
 *
ah
)

355 i‡(
	`AR_SREV_9285
(
ah
)) {

356 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9285_2GHZ
;

357 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9285_2GHZ
;

358 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9285_2GHZ
;

359 } i‡(
	`AR_SREV_9287
(
ah
)) {

360 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9287_2GHZ
;

361 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9287_2GHZ
;

362 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9287_2GHZ
;

363 } i‡(
	`AR_SREV_9271
(
ah
)) {

364 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9271_2GHZ
;

365 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9271_2GHZ
;

366 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9271_2GHZ
;

368 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9280_2GHZ
;

369 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9280_2GHZ
;

370 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9280_2GHZ
;

371 
ah
->
nf_5g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9280_5GHZ
;

372 
ah
->
nf_5g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9280_5GHZ
;

373 
ah
->
nf_5g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9280_5GHZ
;

375 
	}
}

377 
	$¨9002_hw_™tdiv_comb_c⁄f_gë
(
©h_hw
 *
ah
,

378 
©h_hw_™tcomb_c⁄f
 *
™tc⁄f
)

380 
u32
 
ªgvÆ
;

382 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
);

383 
™tc⁄f
->
maö_ a_c⁄f
 = (
ªgvÆ
 & 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF
) >>

384 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF_S
;

385 
™tc⁄f
->
Æt_ a_c⁄f
 = (
ªgvÆ
 & 
AR_PHY_9285_ANT_DIV_ALT_LNACONF
) >>

386 
AR_PHY_9285_ANT_DIV_ALT_LNACONF_S
;

387 
™tc⁄f
->
Á°_div_büs
 = (
ªgvÆ
 & 
AR_PHY_9285_FAST_DIV_BIAS
) >>

388 
AR_PHY_9285_FAST_DIV_BIAS_S
;

389 
™tc⁄f
->
 a1_ a2_swôch_dñè
 = -1;

390 
™tc⁄f
->
 a1_ a2_dñè
 = -3;

391 
™tc⁄f
->
div_group
 = 0;

392 
	}
}

394 
	$¨9002_hw_™tdiv_comb_c⁄f_£t
(
©h_hw
 *
ah
,

395 
©h_hw_™tcomb_c⁄f
 *
™tc⁄f
)

397 
u32
 
ªgvÆ
;

399 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
);

400 
ªgvÆ
 &~(
AR_PHY_9285_ANT_DIV_MAIN_LNACONF
 |

401 
AR_PHY_9285_ANT_DIV_ALT_LNACONF
 |

402 
AR_PHY_9285_FAST_DIV_BIAS
);

403 
ªgvÆ
 |((
™tc⁄f
->
maö_ a_c⁄f
 << 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF_S
)

404 & 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF
);

405 
ªgvÆ
 |((
™tc⁄f
->
Æt_ a_c⁄f
 << 
AR_PHY_9285_ANT_DIV_ALT_LNACONF_S
)

406 & 
AR_PHY_9285_ANT_DIV_ALT_LNACONF
);

407 
ªgvÆ
 |((
™tc⁄f
->
Á°_div_büs
 << 
AR_PHY_9285_FAST_DIV_BIAS_S
)

408 & 
AR_PHY_9285_FAST_DIV_BIAS
);

410 
	`REG_WRITE
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
, 
ªgvÆ
);

411 
	}
}

413 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


415 
	$¨9002_hw_£t_bt_™t_divîsôy
(
©h_hw
 *
ah
, 
boﬁ
 
íabÀ
)

417 
©h_btc€x_hw
 *
btc€x
 = &
ah
->
btc€x_hw
;

418 
u8
 
™tdiv_˘æ1
, 
™tdiv_˘æ2
;

419 
u32
 
ªgvÆ
;

421 i‡(
íabÀ
) {

422 
™tdiv_˘æ1
 = 
ATH_BT_COEX_ANTDIV_CONTROL1_ENABLE
;

423 
™tdiv_˘æ2
 = 
ATH_BT_COEX_ANTDIV_CONTROL2_ENABLE
;

428 
btc€x
->
bt_c€x_mode2
 &(~(
AR_BT_DISABLE_BT_ANT
));

429 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_MODE2
, 
btc€x
->
bt_c€x_mode2
);

431 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_COM
, 
ATH_BT_COEX_ANT_DIV_SWITCH_COM
);

432 
	`REG_RMW
(
ah
, 
AR_PHY_SWITCH_CHAIN_0
, 0, 0xf0000000);

437 
™tdiv_˘æ1
 = 
ATH_BT_COEX_ANTDIV_CONTROL1_FIXED_A
;

438 
™tdiv_˘æ2
 = 
ATH_BT_COEX_ANTDIV_CONTROL2_FIXED_A
;

443 
btc€x
->
bt_c€x_mode2
 |
AR_BT_DISABLE_BT_ANT
;

444 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_MODE2
, 
btc€x
->
bt_c€x_mode2
);

450 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_COM
, 0);

451 
	`REG_RMW
(
ah
, 
AR_PHY_SWITCH_CHAIN_0
, 0, 0xf0000000);

454 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
);

455 
ªgvÆ
 &(~(
AR_PHY_9285_ANT_DIV_CTL_ALL
));

460 
ªgvÆ
 &(~(
AR_PHY_9285_FAST_DIV_BIAS
));

461 
ªgvÆ
 |
	`SM
(
™tdiv_˘æ1
, 
AR_PHY_9285_ANT_DIV_CTL
);

462 
ªgvÆ
 |
	`SM
(
™tdiv_˘æ2
, 
AR_PHY_9285_ANT_DIV_ALT_LNACONF
);

463 
ªgvÆ
 |
	`SM
((
™tdiv_˘æ2
 >> 2), 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF
);

464 
ªgvÆ
 |
	`SM
((
™tdiv_˘æ1
 >> 1), 
AR_PHY_9285_ANT_DIV_ALT_GAINTB
);

465 
ªgvÆ
 |
	`SM
((
™tdiv_˘æ1
 >> 2), 
AR_PHY_9285_ANT_DIV_MAIN_GAINTB
);

466 
	`REG_WRITE
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
, 
ªgvÆ
);

468 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_DETECT
);

469 
ªgvÆ
 &(~
AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV
);

470 
ªgvÆ
 |
	`SM
((
™tdiv_˘æ1
 >> 3), 
AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV
);

471 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_DETECT
, 
ªgvÆ
);

472 
	}
}

476 
	$¨9002_hw_•e˘øl_sˇn_c⁄fig
(
©h_hw
 *
ah
,

477 
©h_•ec_sˇn
 *
∑øm
)

479 
u8
 
cou¡
;

481 i‡(!
∑øm
->
íabÀd
) {

482 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

483 
AR_PHY_SPECTRAL_SCAN_ENABLE
);

486 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RADAR_0
, 
AR_PHY_RADAR_0_FFT_ENA
);

487 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
, 
AR_PHY_SPECTRAL_SCAN_ENABLE
);

489 i‡(
∑øm
->
sh‹t_ª≥©
)

490 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

491 
AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT
);

493 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

494 
AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT
);

500 
cou¡
 = 
∑øm
->count;

501 i‡(
∑øm
->
ídÀss
) {

502 i‡(
	`AR_SREV_9271
(
ah
))

503 
cou¡
 = 0;

505 
cou¡
 = 0x80;

506 } i‡(
cou¡
 & 0x80)

507 
cou¡
 = 0x7f;

509 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

510 
AR_PHY_SPECTRAL_SCAN_COUNT
, 
cou¡
);

511 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

512 
AR_PHY_SPECTRAL_SCAN_PERIOD
, 
∑øm
->
≥riod
);

513 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

514 
AR_PHY_SPECTRAL_SCAN_FFT_PERIOD
, 
∑øm
->
f·_≥riod
);

517 
	}
}

519 
	$¨9002_hw_•e˘øl_sˇn_åiggî
(
©h_hw
 *
ah
)

521 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
, 
AR_PHY_SPECTRAL_SCAN_ENABLE
);

523 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

524 
AR_PHY_SPECTRAL_SCAN_ACTIVE
);

525 
	}
}

527 
	$¨9002_hw_•e˘øl_sˇn_waô
(
©h_hw
 *
ah
)

529 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

532 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

533 
AR_PHY_SPECTRAL_SCAN_ACTIVE
,

534 0, 
AH_WAIT_TIMEOUT
)) {

535 
	`©h_îr
(
comm⁄
, "spectral scan wait failed\n");

538 
	}
}

540 
	$¨9002_hw_tx99_°¨t
(
©h_hw
 *
ah
, 
u32
 
qnum
)

542 
	`REG_SET_BIT
(
ah
, 0x9864, 0x7f000);

543 
	`REG_SET_BIT
(
ah
, 0x9924, 0x7f00fe);

544 
	`REG_CLR_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_RX_DIS
);

545 
	`REG_WRITE
(
ah
, 
AR_CR
, 
AR_CR_RXD
);

546 
	`REG_WRITE
(
ah
, 
	`AR_DLCL_IFS
(
qnum
), 0);

547 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_SIFS
, 20);

548 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_EIFS
, 20);

549 
	`REG_WRITE
(
ah
, 
AR_D_FPCTL
, 0x10|
qnum
);

550 
	`REG_WRITE
(
ah
, 
AR_TIME_OUT
, 0x00000400);

551 
	`REG_WRITE
(
ah
, 
	`AR_DRETRY_LIMIT
(
qnum
), 0xffffffff);

552 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
qnum
), 
AR_Q_MISC_DCU_EARLY_TERM_REQ
);

553 
	}
}

555 
	$¨9002_hw_tx99_°›
(
©h_hw
 *
ah
)

557 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_RX_DIS
);

558 
	}
}

560 
	$¨9002_hw_©èch_phy_›s
(
©h_hw
 *
ah
)

562 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

563 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

565 
¥iv_›s
->
£t_rf_ªgs
 = 
NULL
;

566 
¥iv_›s
->
rf_£t_‰eq
 = 
¨9002_hw_£t_ch™√l
;

567 
¥iv_›s
->
•ur_môig©e_‰eq
 = 
¨9002_hw_•ur_môig©e
;

568 
¥iv_›s
->
ﬁc_öô
 = 
¨9002_ﬁc_öô
;

569 
¥iv_›s
->
compuã_∂l_c⁄åﬁ
 = 
¨9002_hw_compuã_∂l_c⁄åﬁ
;

570 
¥iv_›s
->
do_gënf
 = 
¨9002_hw_do_gënf
;

572 
›s
->
™tdiv_comb_c⁄f_gë
 = 
¨9002_hw_™tdiv_comb_c⁄f_gë
;

573 
›s
->
™tdiv_comb_c⁄f_£t
 = 
¨9002_hw_™tdiv_comb_c⁄f_£t
;

574 
›s
->
•e˘øl_sˇn_c⁄fig
 = 
¨9002_hw_•e˘øl_sˇn_c⁄fig
;

575 
›s
->
•e˘øl_sˇn_åiggî
 = 
¨9002_hw_•e˘øl_sˇn_åiggî
;

576 
›s
->
•e˘øl_sˇn_waô
 = 
¨9002_hw_•e˘øl_sˇn_waô
;

578 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


579 
›s
->
£t_bt_™t_divîsôy
 = 
¨9002_hw_£t_bt_™t_divîsôy
;

581 
›s
->
tx99_°¨t
 = 
¨9002_hw_tx99_°¨t
;

582 
›s
->
tx99_°›
 = 
¨9002_hw_tx99_°›
;

584 
	`¨9002_hw_£t_nf_limôs
(
ah
);

585 
	}
}

	@ar9002_phy.h

16 #i‚de‡
AR9002_PHY_H


17 
	#AR9002_PHY_H


	)

19 
	#AR_PHY_TEST
 0x9800

	)

20 
	#PHY_AGC_CLR
 0x10000000

	)

21 
	#RFSILENT_BB
 0x00002000

	)

23 
	#AR_PHY_TURBO
 0x9804

	)

24 
	#AR_PHY_FC_TURBO_MODE
 0x00000001

	)

25 
	#AR_PHY_FC_TURBO_SHORT
 0x00000002

	)

26 
	#AR_PHY_FC_DYN2040_EN
 0x00000004

	)

27 
	#AR_PHY_FC_DYN2040_PRI_ONLY
 0x00000008

	)

28 
	#AR_PHY_FC_DYN2040_PRI_CH
 0x00000010

	)

30 
	#AR_PHY_FC_DYN2040_EXT_CH
 0x00000020

	)

31 
	#AR_PHY_FC_HT_EN
 0x00000040

	)

32 
	#AR_PHY_FC_SHORT_GI_40
 0x00000080

	)

33 
	#AR_PHY_FC_WALSH
 0x00000100

	)

34 
	#AR_PHY_FC_SINGLE_HT_LTF1
 0x00000200

	)

35 
	#AR_PHY_FC_ENABLE_DAC_FIFO
 0x00000800

	)

37 
	#AR_PHY_TEST2
 0x9808

	)

39 
	#AR_PHY_TIMING2
 0x9810

	)

40 
	#AR_PHY_TIMING3
 0x9814

	)

41 
	#AR_PHY_TIMING3_DSC_MAN
 0xFFFE0000

	)

42 
	#AR_PHY_TIMING3_DSC_MAN_S
 17

	)

43 
	#AR_PHY_TIMING3_DSC_EXP
 0x0001E000

	)

44 
	#AR_PHY_TIMING3_DSC_EXP_S
 13

	)

46 
	#AR_PHY_CHIP_ID_REV_0
 0x80

	)

47 
	#AR_PHY_CHIP_ID_REV_1
 0x81

	)

48 
	#AR_PHY_CHIP_ID_9160_REV_0
 0xb0

	)

50 
	#AR_PHY_ACTIVE
 0x981C

	)

51 
	#AR_PHY_ACTIVE_EN
 0x00000001

	)

52 
	#AR_PHY_ACTIVE_DIS
 0x00000000

	)

54 
	#AR_PHY_RF_CTL2
 0x9824

	)

55 
	#AR_PHY_TX_END_DATA_START
 0x000000FF

	)

56 
	#AR_PHY_TX_END_DATA_START_S
 0

	)

57 
	#AR_PHY_TX_END_PA_ON
 0x0000FF00

	)

58 
	#AR_PHY_TX_END_PA_ON_S
 8

	)

60 
	#AR_PHY_RF_CTL3
 0x9828

	)

61 
	#AR_PHY_TX_END_TO_A2_RX_ON
 0x00FF0000

	)

62 
	#AR_PHY_TX_END_TO_A2_RX_ON_S
 16

	)

63 
	#AR_PHY_TX_END_TO_ADC_ON
 0xFF000000

	)

64 
	#AR_PHY_TX_END_TO_ADC_ON_S
 24

	)

66 
	#AR_PHY_ADC_CTL
 0x982C

	)

67 
	#AR_PHY_ADC_CTL_OFF_INBUFGAIN
 0x00000003

	)

68 
	#AR_PHY_ADC_CTL_OFF_INBUFGAIN_S
 0

	)

69 
	#AR_PHY_ADC_CTL_OFF_PWDDAC
 0x00002000

	)

70 
	#AR_PHY_ADC_CTL_OFF_PWDBANDGAP
 0x00004000

	)

71 
	#AR_PHY_ADC_CTL_OFF_PWDADC
 0x00008000

	)

72 
	#AR_PHY_ADC_CTL_ON_INBUFGAIN
 0x00030000

	)

73 
	#AR_PHY_ADC_CTL_ON_INBUFGAIN_S
 16

	)

75 
	#AR_PHY_ADC_SERIAL_CTL
 0x9830

	)

76 
	#AR_PHY_SEL_INTERNAL_ADDAC
 0x00000000

	)

77 
	#AR_PHY_SEL_EXTERNAL_RADIO
 0x00000001

	)

79 
	#AR_PHY_RF_CTL4
 0x9834

	)

80 
	#AR_PHY_RF_CTL4_TX_END_XPAB_OFF
 0xFF000000

	)

81 
	#AR_PHY_RF_CTL4_TX_END_XPAB_OFF_S
 24

	)

82 
	#AR_PHY_RF_CTL4_TX_END_XPAA_OFF
 0x00FF0000

	)

83 
	#AR_PHY_RF_CTL4_TX_END_XPAA_OFF_S
 16

	)

84 
	#AR_PHY_RF_CTL4_FRAME_XPAB_ON
 0x0000FF00

	)

85 
	#AR_PHY_RF_CTL4_FRAME_XPAB_ON_S
 8

	)

86 
	#AR_PHY_RF_CTL4_FRAME_XPAA_ON
 0x000000FF

	)

87 
	#AR_PHY_RF_CTL4_FRAME_XPAA_ON_S
 0

	)

89 
	#AR_PHY_TSTDAC_CONST
 0x983c

	)

91 
	#AR_PHY_SETTLING
 0x9844

	)

92 
	#AR_PHY_SETTLING_SWITCH
 0x00003F80

	)

93 
	#AR_PHY_SETTLING_SWITCH_S
 7

	)

95 
	#AR_PHY_RXGAIN
 0x9848

	)

96 
	#AR_PHY_RXGAIN_TXRX_ATTEN
 0x0003F000

	)

97 
	#AR_PHY_RXGAIN_TXRX_ATTEN_S
 12

	)

98 
	#AR_PHY_RXGAIN_TXRX_RF_MAX
 0x007C0000

	)

99 
	#AR_PHY_RXGAIN_TXRX_RF_MAX_S
 18

	)

100 
	#AR9280_PHY_RXGAIN_TXRX_ATTEN
 0x00003F80

	)

101 
	#AR9280_PHY_RXGAIN_TXRX_ATTEN_S
 7

	)

102 
	#AR9280_PHY_RXGAIN_TXRX_MARGIN
 0x001FC000

	)

103 
	#AR9280_PHY_RXGAIN_TXRX_MARGIN_S
 14

	)

105 
	#AR_PHY_DESIRED_SZ
 0x9850

	)

106 
	#AR_PHY_DESIRED_SZ_ADC
 0x000000FF

	)

107 
	#AR_PHY_DESIRED_SZ_ADC_S
 0

	)

108 
	#AR_PHY_DESIRED_SZ_PGA
 0x0000FF00

	)

109 
	#AR_PHY_DESIRED_SZ_PGA_S
 8

	)

110 
	#AR_PHY_DESIRED_SZ_TOT_DES
 0x0FF00000

	)

111 
	#AR_PHY_DESIRED_SZ_TOT_DES_S
 20

	)

113 
	#AR_PHY_FIND_SIG
 0x9858

	)

114 
	#AR_PHY_FIND_SIG_FIRSTEP
 0x0003F000

	)

115 
	#AR_PHY_FIND_SIG_FIRSTEP_S
 12

	)

116 
	#AR_PHY_FIND_SIG_FIRPWR
 0x03FC0000

	)

117 
	#AR_PHY_FIND_SIG_FIRPWR_S
 18

	)

119 
	#AR_PHY_FIND_SIG_LOW
 0x9840

	)

120 
	#AR_PHY_FIND_SIG_FIRSTEP_LOW
 0x00000FC0L

	)

121 
	#AR_PHY_FIND_SIG_FIRSTEP_LOW_S
 6

	)

123 
	#AR_PHY_AGC_CTL1
 0x985C

	)

124 
	#AR_PHY_AGC_CTL1_COARSE_LOW
 0x00007F80

	)

125 
	#AR_PHY_AGC_CTL1_COARSE_LOW_S
 7

	)

126 
	#AR_PHY_AGC_CTL1_COARSE_HIGH
 0x003F8000

	)

127 
	#AR_PHY_AGC_CTL1_COARSE_HIGH_S
 15

	)

129 
	#AR_PHY_CCA
 0x9864

	)

130 
	#AR_PHY_MINCCA_PWR
 0x0FF80000

	)

131 
	#AR_PHY_MINCCA_PWR_S
 19

	)

132 
	#AR_PHY_CCA_THRESH62
 0x0007F000

	)

133 
	#AR_PHY_CCA_THRESH62_S
 12

	)

134 
	#AR9280_PHY_MINCCA_PWR
 0x1FF00000

	)

135 
	#AR9280_PHY_MINCCA_PWR_S
 20

	)

136 
	#AR9280_PHY_CCA_THRESH62
 0x000FF000

	)

137 
	#AR9280_PHY_CCA_THRESH62_S
 12

	)

139 
	#AR_PHY_SFCORR_LOW
 0x986C

	)

140 
	#AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW
 0x00000001

	)

141 
	#AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW
 0x00003F00

	)

142 
	#AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW_S
 8

	)

143 
	#AR_PHY_SFCORR_LOW_M1_THRESH_LOW
 0x001FC000

	)

144 
	#AR_PHY_SFCORR_LOW_M1_THRESH_LOW_S
 14

	)

145 
	#AR_PHY_SFCORR_LOW_M2_THRESH_LOW
 0x0FE00000

	)

146 
	#AR_PHY_SFCORR_LOW_M2_THRESH_LOW_S
 21

	)

148 
	#AR_PHY_SFCORR
 0x9868

	)

149 
	#AR_PHY_SFCORR_M2COUNT_THR
 0x0000001F

	)

150 
	#AR_PHY_SFCORR_M2COUNT_THR_S
 0

	)

151 
	#AR_PHY_SFCORR_M1_THRESH
 0x00FE0000

	)

152 
	#AR_PHY_SFCORR_M1_THRESH_S
 17

	)

153 
	#AR_PHY_SFCORR_M2_THRESH
 0x7F000000

	)

154 
	#AR_PHY_SFCORR_M2_THRESH_S
 24

	)

156 
	#AR_PHY_SLEEP_CTR_CONTROL
 0x9870

	)

157 
	#AR_PHY_SLEEP_CTR_LIMIT
 0x9874

	)

158 
	#AR_PHY_SYNTH_CONTROL
 0x9874

	)

159 
	#AR_PHY_SLEEP_SCAL
 0x9878

	)

161 
	#AR_PHY_PLL_CTL
 0x987c

	)

162 
	#AR_PHY_PLL_CTL_40
 0xØ

	)

163 
	#AR_PHY_PLL_CTL_40_5413
 0x04

	)

164 
	#AR_PHY_PLL_CTL_44
 0xab

	)

165 
	#AR_PHY_PLL_CTL_44_2133
 0xeb

	)

166 
	#AR_PHY_PLL_CTL_40_2133
 0xó

	)

168 
	#AR_PHY_SPECTRAL_SCAN
 0x9910

	)

169 
	#AR_PHY_SPECTRAL_SCAN_ENABLE
 0x1

	)

170 
	#AR_PHY_SPECTRAL_SCAN_ENA
 0x00000001

	)

171 
	#AR_PHY_SPECTRAL_SCAN_ENA_S
 0

	)

172 
	#AR_PHY_SPECTRAL_SCAN_ACTIVE
 0x00000002

	)

173 
	#AR_PHY_SPECTRAL_SCAN_ACTIVE_S
 1

	)

174 
	#AR_PHY_SPECTRAL_SCAN_FFT_PERIOD
 0x000000F0

	)

175 
	#AR_PHY_SPECTRAL_SCAN_FFT_PERIOD_S
 4

	)

176 
	#AR_PHY_SPECTRAL_SCAN_PERIOD
 0x0000FF00

	)

177 
	#AR_PHY_SPECTRAL_SCAN_PERIOD_S
 8

	)

178 
	#AR_PHY_SPECTRAL_SCAN_COUNT
 0x00FF0000

	)

179 
	#AR_PHY_SPECTRAL_SCAN_COUNT_S
 16

	)

180 
	#AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT
 0x01000000

	)

181 
	#AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT_S
 24

	)

183 
	#AR_PHY_RX_DELAY
 0x9914

	)

184 
	#AR_PHY_SEARCH_START_DELAY
 0x9918

	)

185 
	#AR_PHY_RX_DELAY_DELAY
 0x00003FFF

	)

187 
	#AR_PHY_TIMING_CTRL4
(
_i
Ë(0x9920 + ((_iË<< 12))

	)

188 
	#AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
 0x01F

	)

189 
	#AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF_S
 0

	)

190 
	#AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
 0x7E0

	)

191 
	#AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF_S
 5

	)

192 
	#AR_PHY_TIMING_CTRL4_IQCORR_ENABLE
 0x800

	)

193 
	#AR_PHY_TIMING_CTRL4_IQCAL_LOG_COUNT_MAX
 0xF000

	)

194 
	#AR_PHY_TIMING_CTRL4_IQCAL_LOG_COUNT_MAX_S
 12

	)

195 
	#AR_PHY_TIMING_CTRL4_DO_CAL
 0x10000

	)

197 
	#AR_PHY_TIMING_CTRL4_ENABLE_SPUR_RSSI
 0x80000000

	)

198 
	#AR_PHY_TIMING_CTRL4_ENABLE_SPUR_FILTER
 0x40000000

	)

199 
	#AR_PHY_TIMING_CTRL4_ENABLE_CHAN_MASK
 0x20000000

	)

200 
	#AR_PHY_TIMING_CTRL4_ENABLE_PILOT_MASK
 0x10000000

	)

202 
	#AR_PHY_TIMING5
 0x9924

	)

203 
	#AR_PHY_TIMING5_CYCPWR_THR1
 0x000000FE

	)

204 
	#AR_PHY_TIMING5_CYCPWR_THR1_S
 1

	)

206 
	#AR_PHY_POWER_TX_RATE1
 0x9934

	)

207 
	#AR_PHY_POWER_TX_RATE2
 0x9938

	)

208 
	#AR_PHY_POWER_TX_RATE_MAX
 0x993c

	)

209 
	#AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE
 0x00000040

	)

211 
	#AR_PHY_FRAME_CTL
 0x9944

	)

212 
	#AR_PHY_FRAME_CTL_TX_CLIP
 0x00000038

	)

213 
	#AR_PHY_FRAME_CTL_TX_CLIP_S
 3

	)

215 
	#AR_PHY_TXPWRADJ
 0x994C

	)

216 
	#AR_PHY_TXPWRADJ_CCK_GAIN_DELTA
 0x00000FC0

	)

217 
	#AR_PHY_TXPWRADJ_CCK_GAIN_DELTA_S
 6

	)

218 
	#AR_PHY_TXPWRADJ_CCK_PCDAC_INDEX
 0x00FC0000

	)

219 
	#AR_PHY_TXPWRADJ_CCK_PCDAC_INDEX_S
 18

	)

221 
	#AR_PHY_RADAR_EXT
 0x9940

	)

222 
	#AR_PHY_RADAR_EXT_ENA
 0x00004000

	)

224 
	#AR_PHY_RADAR_0
 0x9954

	)

225 
	#AR_PHY_RADAR_0_ENA
 0x00000001

	)

226 
	#AR_PHY_RADAR_0_FFT_ENA
 0x80000000

	)

227 
	#AR_PHY_RADAR_0_INBAND
 0x0000003e

	)

228 
	#AR_PHY_RADAR_0_INBAND_S
 1

	)

229 
	#AR_PHY_RADAR_0_PRSSI
 0x00000FC0

	)

230 
	#AR_PHY_RADAR_0_PRSSI_S
 6

	)

231 
	#AR_PHY_RADAR_0_HEIGHT
 0x0003F000

	)

232 
	#AR_PHY_RADAR_0_HEIGHT_S
 12

	)

233 
	#AR_PHY_RADAR_0_RRSSI
 0x00FC0000

	)

234 
	#AR_PHY_RADAR_0_RRSSI_S
 18

	)

235 
	#AR_PHY_RADAR_0_FIRPWR
 0x7F000000

	)

236 
	#AR_PHY_RADAR_0_FIRPWR_S
 24

	)

238 
	#AR_PHY_RADAR_1
 0x9958

	)

239 
	#AR_PHY_RADAR_1_RELPWR_ENA
 0x00800000

	)

240 
	#AR_PHY_RADAR_1_USE_FIR128
 0x00400000

	)

241 
	#AR_PHY_RADAR_1_RELPWR_THRESH
 0x003F0000

	)

242 
	#AR_PHY_RADAR_1_RELPWR_THRESH_S
 16

	)

243 
	#AR_PHY_RADAR_1_BLOCK_CHECK
 0x00008000

	)

244 
	#AR_PHY_RADAR_1_MAX_RRSSI
 0x00004000

	)

245 
	#AR_PHY_RADAR_1_RELSTEP_CHECK
 0x00002000

	)

246 
	#AR_PHY_RADAR_1_RELSTEP_THRESH
 0x00001F00

	)

247 
	#AR_PHY_RADAR_1_RELSTEP_THRESH_S
 8

	)

248 
	#AR_PHY_RADAR_1_MAXLEN
 0x000000FF

	)

249 
	#AR_PHY_RADAR_1_MAXLEN_S
 0

	)

251 
	#AR_PHY_SWITCH_CHAIN_0
 0x9960

	)

252 
	#AR_PHY_SWITCH_COM
 0x9964

	)

254 
	#AR_PHY_SIGMA_DELTA
 0x996C

	)

255 
	#AR_PHY_SIGMA_DELTA_ADC_SEL
 0x00000003

	)

256 
	#AR_PHY_SIGMA_DELTA_ADC_SEL_S
 0

	)

257 
	#AR_PHY_SIGMA_DELTA_FILT2
 0x000000F8

	)

258 
	#AR_PHY_SIGMA_DELTA_FILT2_S
 3

	)

259 
	#AR_PHY_SIGMA_DELTA_FILT1
 0x00001F00

	)

260 
	#AR_PHY_SIGMA_DELTA_FILT1_S
 8

	)

261 
	#AR_PHY_SIGMA_DELTA_ADC_CLIP
 0x01FFE000

	)

262 
	#AR_PHY_SIGMA_DELTA_ADC_CLIP_S
 13

	)

264 
	#AR_PHY_RESTART
 0x9970

	)

265 
	#AR_PHY_RESTART_DIV_GC
 0x001C0000

	)

266 
	#AR_PHY_RESTART_DIV_GC_S
 18

	)

268 
	#AR_PHY_RFBUS_REQ
 0x997C

	)

269 
	#AR_PHY_RFBUS_REQ_EN
 0x00000001

	)

271 
	#AR_PHY_TIMING7
 0x9980

	)

272 
	#AR_PHY_TIMING8
 0x9984

	)

273 
	#AR_PHY_TIMING8_PILOT_MASK_2
 0x000FFFFF

	)

274 
	#AR_PHY_TIMING8_PILOT_MASK_2_S
 0

	)

276 
	#AR_PHY_BIN_MASK2_1
 0x9988

	)

277 
	#AR_PHY_BIN_MASK2_2
 0x998c

	)

278 
	#AR_PHY_BIN_MASK2_3
 0x9990

	)

279 
	#AR_PHY_BIN_MASK2_4
 0x9994

	)

281 
	#AR_PHY_BIN_MASK_1
 0x9900

	)

282 
	#AR_PHY_BIN_MASK_2
 0x9904

	)

283 
	#AR_PHY_BIN_MASK_3
 0x9908

	)

285 
	#AR_PHY_MASK_CTL
 0x990c

	)

287 
	#AR_PHY_BIN_MASK2_4_MASK_4
 0x00003FFF

	)

288 
	#AR_PHY_BIN_MASK2_4_MASK_4_S
 0

	)

290 
	#AR_PHY_TIMING9
 0x9998

	)

291 
	#AR_PHY_TIMING10
 0x999c

	)

292 
	#AR_PHY_TIMING10_PILOT_MASK_2
 0x000FFFFF

	)

293 
	#AR_PHY_TIMING10_PILOT_MASK_2_S
 0

	)

295 
	#AR_PHY_TIMING11
 0x99a0

	)

296 
	#AR_PHY_TIMING11_SPUR_DELTA_PHASE
 0x000FFFFF

	)

297 
	#AR_PHY_TIMING11_SPUR_DELTA_PHASE_S
 0

	)

298 
	#AR_PHY_TIMING11_USE_SPUR_IN_AGC
 0x40000000

	)

299 
	#AR_PHY_TIMING11_USE_SPUR_IN_SELFCOR
 0x80000000

	)

301 
	#AR_PHY_RX_CHAINMASK
 0x99a4

	)

302 
	#AR_PHY_NEW_ADC_DC_GAIN_CORR
(
_i
Ë(0x99b4 + ((_iË<< 12))

	)

303 
	#AR_PHY_NEW_ADC_GAIN_CORR_ENABLE
 0x40000000

	)

304 
	#AR_PHY_NEW_ADC_DC_OFFSET_CORR_ENABLE
 0x80000000

	)

306 
	#AR_PHY_MULTICHAIN_GAIN_CTL
 0x99ac

	)

307 
	#AR_PHY_9285_FAST_DIV_BIAS
 0x00007E00

	)

308 
	#AR_PHY_9285_FAST_DIV_BIAS_S
 9

	)

309 
	#AR_PHY_9285_ANT_DIV_CTL_ALL
 0x7f000000

	)

310 
	#AR_PHY_9285_ANT_DIV_CTL
 0x01000000

	)

311 
	#AR_PHY_9285_ANT_DIV_CTL_S
 24

	)

312 
	#AR_PHY_9285_ANT_DIV_ALT_LNACONF
 0x06000000

	)

313 
	#AR_PHY_9285_ANT_DIV_ALT_LNACONF_S
 25

	)

314 
	#AR_PHY_9285_ANT_DIV_MAIN_LNACONF
 0x18000000

	)

315 
	#AR_PHY_9285_ANT_DIV_MAIN_LNACONF_S
 27

	)

316 
	#AR_PHY_9285_ANT_DIV_ALT_GAINTB
 0x20000000

	)

317 
	#AR_PHY_9285_ANT_DIV_ALT_GAINTB_S
 29

	)

318 
	#AR_PHY_9285_ANT_DIV_MAIN_GAINTB
 0x40000000

	)

319 
	#AR_PHY_9285_ANT_DIV_MAIN_GAINTB_S
 30

	)

320 
	#AR_PHY_9285_ANT_DIV_GAINTB_0
 0

	)

321 
	#AR_PHY_9285_ANT_DIV_GAINTB_1
 1

	)

323 
	#ATH_BT_COEX_ANTDIV_CONTROL1_ENABLE
 0x0b

	)

324 
	#ATH_BT_COEX_ANTDIV_CONTROL2_ENABLE
 0x09

	)

325 
	#ATH_BT_COEX_ANTDIV_CONTROL1_FIXED_A
 0x04

	)

326 
	#ATH_BT_COEX_ANTDIV_CONTROL2_FIXED_A
 0x09

	)

327 
	#ATH_BT_COEX_ANT_DIV_SWITCH_COM
 0x66666666

	)

329 
	#AR_PHY_EXT_CCA0
 0x99b8

	)

330 
	#AR_PHY_EXT_CCA0_THRESH62
 0x000000FF

	)

331 
	#AR_PHY_EXT_CCA0_THRESH62_S
 0

	)

333 
	#AR_PHY_EXT_CCA
 0x99bc

	)

334 
	#AR_PHY_EXT_CCA_CYCPWR_THR1
 0x0000FE00

	)

335 
	#AR_PHY_EXT_CCA_CYCPWR_THR1_S
 9

	)

336 
	#AR_PHY_EXT_CCA_THRESH62
 0x007F0000

	)

337 
	#AR_PHY_EXT_CCA_THRESH62_S
 16

	)

338 
	#AR_PHY_EXT_TIMING5_CYCPWR_THR1
 0x0000FE00L

	)

339 
	#AR_PHY_EXT_TIMING5_CYCPWR_THR1_S
 9

	)

341 
	#AR_PHY_EXT_MINCCA_PWR
 0xFF800000

	)

342 
	#AR_PHY_EXT_MINCCA_PWR_S
 23

	)

343 
	#AR9280_PHY_EXT_MINCCA_PWR
 0x01FF0000

	)

344 
	#AR9280_PHY_EXT_MINCCA_PWR_S
 16

	)

346 
	#AR_PHY_SFCORR_EXT
 0x99c0

	)

347 
	#AR_PHY_SFCORR_EXT_M1_THRESH
 0x0000007F

	)

348 
	#AR_PHY_SFCORR_EXT_M1_THRESH_S
 0

	)

349 
	#AR_PHY_SFCORR_EXT_M2_THRESH
 0x00003F80

	)

350 
	#AR_PHY_SFCORR_EXT_M2_THRESH_S
 7

	)

351 
	#AR_PHY_SFCORR_EXT_M1_THRESH_LOW
 0x001FC000

	)

352 
	#AR_PHY_SFCORR_EXT_M1_THRESH_LOW_S
 14

	)

353 
	#AR_PHY_SFCORR_EXT_M2_THRESH_LOW
 0x0FE00000

	)

354 
	#AR_PHY_SFCORR_EXT_M2_THRESH_LOW_S
 21

	)

355 
	#AR_PHY_SFCORR_SPUR_SUBCHNL_SD_S
 28

	)

357 
	#AR_PHY_HALFGI
 0x99D0

	)

358 
	#AR_PHY_HALFGI_DSC_MAN
 0x0007FFF0

	)

359 
	#AR_PHY_HALFGI_DSC_MAN_S
 4

	)

360 
	#AR_PHY_HALFGI_DSC_EXP
 0x0000000F

	)

361 
	#AR_PHY_HALFGI_DSC_EXP_S
 0

	)

363 
	#AR_PHY_CHAN_INFO_MEMORY
 0x99DC

	)

364 
	#AR_PHY_CHAN_INFO_MEMORY_CAPTURE_MASK
 0x0001

	)

366 
	#AR_PHY_HEAVY_CLIP_ENABLE
 0x99E0

	)

368 
	#AR_PHY_HEAVY_CLIP_FACTOR_RIFS
 0x99EC

	)

369 
	#AR_PHY_RIFS_INIT_DELAY
 0x03ff0000

	)

371 
	#AR_PHY_M_SLEEP
 0x99f0

	)

372 
	#AR_PHY_REFCLKDLY
 0x99f4

	)

373 
	#AR_PHY_REFCLKPD
 0x99f8

	)

375 
	#AR_PHY_CALMODE
 0x99f0

	)

377 
	#AR_PHY_CALMODE_IQ
 0x00000000

	)

378 
	#AR_PHY_CALMODE_ADC_GAIN
 0x00000001

	)

379 
	#AR_PHY_CALMODE_ADC_DC_PER
 0x00000002

	)

380 
	#AR_PHY_CALMODE_ADC_DC_INIT
 0x00000003

	)

382 
	#AR_PHY_CAL_MEAS_0
(
_i
Ë(0x9c10 + ((_iË<< 12))

	)

383 
	#AR_PHY_CAL_MEAS_1
(
_i
Ë(0x9c14 + ((_iË<< 12))

	)

384 
	#AR_PHY_CAL_MEAS_2
(
_i
Ë(0x9c18 + ((_iË<< 12))

	)

385 
	#AR_PHY_CAL_MEAS_3
(
_i
Ë(0x9c1¯+ ((_iË<< 12))

	)

387 
	#AR_PHY_CURRENT_RSSI
 0x9c1c

	)

388 
	#AR9280_PHY_CURRENT_RSSI
 0x9c3c

	)

390 
	#AR_PHY_RFBUS_GRANT
 0x9C20

	)

391 
	#AR_PHY_RFBUS_GRANT_EN
 0x00000001

	)

393 
	#AR_PHY_CHAN_INFO_GAIN_DIFF
 0x9CF4

	)

394 
	#AR_PHY_CHAN_INFO_GAIN_DIFF_UPPER_LIMIT
 320

	)

396 
	#AR_PHY_CHAN_INFO_GAIN
 0x9CFC

	)

398 
	#AR_PHY_MODE
 0xA200

	)

399 
	#AR_PHY_MODE_ASYNCFIFO
 0x80

	)

400 
	#AR_PHY_MODE_AR2133
 0x08

	)

401 
	#AR_PHY_MODE_AR5111
 0x00

	)

402 
	#AR_PHY_MODE_AR5112
 0x08

	)

403 
	#AR_PHY_MODE_DYNAMIC
 0x04

	)

404 
	#AR_PHY_MODE_RF2GHZ
 0x02

	)

405 
	#AR_PHY_MODE_RF5GHZ
 0x00

	)

406 
	#AR_PHY_MODE_CCK
 0x01

	)

407 
	#AR_PHY_MODE_OFDM
 0x00

	)

408 
	#AR_PHY_MODE_DYN_CCK_DISABLE
 0x100

	)

410 
	#AR_PHY_CCK_TX_CTRL
 0xA204

	)

411 
	#AR_PHY_CCK_TX_CTRL_JAPAN
 0x00000010

	)

412 
	#AR_PHY_CCK_TX_CTRL_TX_DAC_SCALE_CCK
 0x0000000C

	)

413 
	#AR_PHY_CCK_TX_CTRL_TX_DAC_SCALE_CCK_S
 2

	)

415 
	#AR_PHY_CCK_DETECT
 0xA208

	)

416 
	#AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK
 0x0000003F

	)

417 
	#AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK_S
 0

	)

419 
	#AR_PHY_CCK_DETECT_ANT_SWITCH_TIME
 0x00001FC0

	)

420 
	#AR_PHY_CCK_DETECT_ANT_SWITCH_TIME_S
 6

	)

421 
	#AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV
 0x2000

	)

422 
	#AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV_S
 13

	)

424 
	#AR_PHY_GAIN_2GHZ
 0xA20C

	)

425 
	#AR_PHY_GAIN_2GHZ_RXTX_MARGIN
 0x00FC0000

	)

426 
	#AR_PHY_GAIN_2GHZ_RXTX_MARGIN_S
 18

	)

427 
	#AR_PHY_GAIN_2GHZ_BSW_MARGIN
 0x00003C00

	)

428 
	#AR_PHY_GAIN_2GHZ_BSW_MARGIN_S
 10

	)

429 
	#AR_PHY_GAIN_2GHZ_BSW_ATTEN
 0x0000001F

	)

430 
	#AR_PHY_GAIN_2GHZ_BSW_ATTEN_S
 0

	)

432 
	#AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN
 0x003E0000

	)

433 
	#AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN_S
 17

	)

434 
	#AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN
 0x0001F000

	)

435 
	#AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN_S
 12

	)

436 
	#AR_PHY_GAIN_2GHZ_XATTEN2_DB
 0x00000FC0

	)

437 
	#AR_PHY_GAIN_2GHZ_XATTEN2_DB_S
 6

	)

438 
	#AR_PHY_GAIN_2GHZ_XATTEN1_DB
 0x0000003F

	)

439 
	#AR_PHY_GAIN_2GHZ_XATTEN1_DB_S
 0

	)

441 
	#AR_PHY_CCK_RXCTRL4
 0xA21C

	)

442 
	#AR_PHY_CCK_RXCTRL4_FREQ_EST_SHORT
 0x01F80000

	)

443 
	#AR_PHY_CCK_RXCTRL4_FREQ_EST_SHORT_S
 19

	)

445 
	#AR_PHY_DAG_CTRLCCK
 0xA228

	)

446 
	#AR_PHY_DAG_CTRLCCK_EN_RSSI_THR
 0x00000200

	)

447 
	#AR_PHY_DAG_CTRLCCK_RSSI_THR
 0x0001FC00

	)

448 
	#AR_PHY_DAG_CTRLCCK_RSSI_THR_S
 10

	)

450 
	#AR_PHY_FORCE_CLKEN_CCK
 0xA22C

	)

451 
	#AR_PHY_FORCE_CLKEN_CCK_MRC_MUX
 0x00000040

	)

453 
	#AR_PHY_POWER_TX_RATE3
 0xA234

	)

454 
	#AR_PHY_POWER_TX_RATE4
 0xA238

	)

456 
	#AR_PHY_SCRM_SEQ_XR
 0xA23C

	)

457 
	#AR_PHY_HEADER_DETECT_XR
 0xA240

	)

458 
	#AR_PHY_CHIRP_DETECTED_XR
 0xA244

	)

459 
	#AR_PHY_BLUETOOTH
 0xA254

	)

461 
	#AR_PHY_TPCRG1
 0xA258

	)

462 
	#AR_PHY_TPCRG1_NUM_PD_GAIN
 0x0000c000

	)

463 
	#AR_PHY_TPCRG1_NUM_PD_GAIN_S
 14

	)

465 
	#AR_PHY_TPCRG1_PD_GAIN_1
 0x00030000

	)

466 
	#AR_PHY_TPCRG1_PD_GAIN_1_S
 16

	)

467 
	#AR_PHY_TPCRG1_PD_GAIN_2
 0x000C0000

	)

468 
	#AR_PHY_TPCRG1_PD_GAIN_2_S
 18

	)

469 
	#AR_PHY_TPCRG1_PD_GAIN_3
 0x00300000

	)

470 
	#AR_PHY_TPCRG1_PD_GAIN_3_S
 20

	)

472 
	#AR_PHY_TPCRG1_PD_CAL_ENABLE
 0x00400000

	)

473 
	#AR_PHY_TPCRG1_PD_CAL_ENABLE_S
 22

	)

475 
	#AR_PHY_TX_PWRCTRL4
 0xa264

	)

476 
	#AR_PHY_TX_PWRCTRL_PD_AVG_VALID
 0x00000001

	)

477 
	#AR_PHY_TX_PWRCTRL_PD_AVG_VALID_S
 0

	)

478 
	#AR_PHY_TX_PWRCTRL_PD_AVG_OUT
 0x000001FE

	)

479 
	#AR_PHY_TX_PWRCTRL_PD_AVG_OUT_S
 1

	)

481 
	#AR_PHY_TX_PWRCTRL6_0
 0xa270

	)

482 
	#AR_PHY_TX_PWRCTRL6_1
 0xb270

	)

483 
	#AR_PHY_TX_PWRCTRL_ERR_EST_MODE
 0x03000000

	)

484 
	#AR_PHY_TX_PWRCTRL_ERR_EST_MODE_S
 24

	)

486 
	#AR_PHY_TX_PWRCTRL7
 0xa274

	)

487 
	#AR_PHY_TX_PWRCTRL_INIT_TX_GAIN
 0x01F80000

	)

488 
	#AR_PHY_TX_PWRCTRL_INIT_TX_GAIN_S
 19

	)

490 
	#AR_PHY_TX_PWRCTRL8
 0xa278

	)

492 
	#AR_PHY_TX_PWRCTRL9
 0xa27C

	)

494 
	#AR_PHY_TX_PWRCTRL10
 0xa394

	)

495 
	#AR_PHY_TX_DESIRED_SCALE_CCK
 0x00007C00

	)

496 
	#AR_PHY_TX_DESIRED_SCALE_CCK_S
 10

	)

497 
	#AR_PHY_TX_PWRCTRL9_RES_DC_REMOVAL
 0x80000000

	)

498 
	#AR_PHY_TX_PWRCTRL9_RES_DC_REMOVAL_S
 31

	)

500 
	#AR_PHY_TX_GAIN_TBL1
 0xa300

	)

501 
	#AR_PHY_TX_GAIN
 0x0007F000

	)

502 
	#AR_PHY_TX_GAIN_S
 12

	)

504 
	#AR_PHY_CH0_TX_PWRCTRL11
 0xa398

	)

505 
	#AR_PHY_CH1_TX_PWRCTRL11
 0xb398

	)

506 
	#AR_PHY_CH0_TX_PWRCTRL12
 0xa3dc

	)

507 
	#AR_PHY_CH0_TX_PWRCTRL13
 0xa3e0

	)

508 
	#AR_PHY_TX_PWRCTRL_OLPC_TEMP_COMP
 0x0000FC00

	)

509 
	#AR_PHY_TX_PWRCTRL_OLPC_TEMP_COMP_S
 10

	)

511 
	#AR_PHY_VIT_MASK2_M_46_61
 0xa3a0

	)

512 
	#AR_PHY_MASK2_M_31_45
 0xa3a4

	)

513 
	#AR_PHY_MASK2_M_16_30
 0xa3a8

	)

514 
	#AR_PHY_MASK2_M_00_15
 0xa3ac

	)

515 
	#AR_PHY_MASK2_P_15_01
 0xa3b8

	)

516 
	#AR_PHY_MASK2_P_30_16
 0xa3bc

	)

517 
	#AR_PHY_MASK2_P_45_31
 0xa3c0

	)

518 
	#AR_PHY_MASK2_P_61_45
 0xa3c4

	)

519 
	#AR_PHY_SPUR_REG
 0x994c

	)

521 
	#AR_PHY_SPUR_REG_MASK_RATE_CNTL
 (0xFF << 18)

	)

522 
	#AR_PHY_SPUR_REG_MASK_RATE_CNTL_S
 18

	)

524 
	#AR_PHY_SPUR_REG_ENABLE_MASK_PPM
 0x20000

	)

525 
	#AR_PHY_SPUR_REG_MASK_RATE_SELECT
 (0xFF << 9)

	)

526 
	#AR_PHY_SPUR_REG_MASK_RATE_SELECT_S
 9

	)

527 
	#AR_PHY_SPUR_REG_ENABLE_VIT_SPUR_RSSI
 0x100

	)

528 
	#AR_PHY_SPUR_REG_SPUR_RSSI_THRESH
 0x7F

	)

529 
	#AR_PHY_SPUR_REG_SPUR_RSSI_THRESH_S
 0

	)

531 
	#AR_PHY_PILOT_MASK_01_30
 0xa3b0

	)

532 
	#AR_PHY_PILOT_MASK_31_60
 0xa3b4

	)

534 
	#AR_PHY_CHANNEL_MASK_01_30
 0x99d4

	)

535 
	#AR_PHY_CHANNEL_MASK_31_60
 0x99d8

	)

537 
	#AR_PHY_ANALOG_SWAP
 0xa268

	)

538 
	#AR_PHY_SWAP_ALT_CHAIN
 0x00000040

	)

540 
	#AR_PHY_TPCRG5
 0xA26C

	)

541 
	#AR_PHY_TPCRG5_PD_GAIN_OVERLAP
 0x0000000F

	)

542 
	#AR_PHY_TPCRG5_PD_GAIN_OVERLAP_S
 0

	)

543 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1
 0x000003F0

	)

544 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1_S
 4

	)

545 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2
 0x0000FC00

	)

546 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2_S
 10

	)

547 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3
 0x003F0000

	)

548 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3_S
 16

	)

549 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4
 0x0FC00000

	)

550 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4_S
 22

	)

553 
	#AR_PHY_CL_CAL_CTL
 0xA358

	)

554 
	#AR_PHY_CL_CAL_ENABLE
 0x00000002

	)

555 
	#AR_PHY_PARALLEL_CAL_ENABLE
 0x00000001

	)

557 
	#AR_PHY_POWER_TX_RATE5
 0xA38C

	)

558 
	#AR_PHY_POWER_TX_RATE6
 0xA390

	)

560 
	#AR_PHY_CAL_CHAINMASK
 0xA39C

	)

562 
	#AR_PHY_POWER_TX_SUB
 0xA3C8

	)

563 
	#AR_PHY_POWER_TX_RATE7
 0xA3CC

	)

564 
	#AR_PHY_POWER_TX_RATE8
 0xA3D0

	)

565 
	#AR_PHY_POWER_TX_RATE9
 0xA3D4

	)

567 
	#AR_PHY_XPA_CFG
 0xA3D8

	)

568 
	#AR_PHY_FORCE_XPA_CFG
 0x000000001

	)

569 
	#AR_PHY_FORCE_XPA_CFG_S
 0

	)

571 
	#AR_PHY_CH1_CCA
 0xa864

	)

572 
	#AR_PHY_CH1_MINCCA_PWR
 0x0FF80000

	)

573 
	#AR_PHY_CH1_MINCCA_PWR_S
 19

	)

574 
	#AR9280_PHY_CH1_MINCCA_PWR
 0x1FF00000

	)

575 
	#AR9280_PHY_CH1_MINCCA_PWR_S
 20

	)

577 
	#AR_PHY_CH2_CCA
 0xb864

	)

578 
	#AR_PHY_CH2_MINCCA_PWR
 0x0FF80000

	)

579 
	#AR_PHY_CH2_MINCCA_PWR_S
 19

	)

581 
	#AR_PHY_CH1_EXT_CCA
 0xa9bc

	)

582 
	#AR_PHY_CH1_EXT_MINCCA_PWR
 0xFF800000

	)

583 
	#AR_PHY_CH1_EXT_MINCCA_PWR_S
 23

	)

584 
	#AR9280_PHY_CH1_EXT_MINCCA_PWR
 0x01FF0000

	)

585 
	#AR9280_PHY_CH1_EXT_MINCCA_PWR_S
 16

	)

587 
	#AR_PHY_CH2_EXT_CCA
 0xb9bc

	)

588 
	#AR_PHY_CH2_EXT_MINCCA_PWR
 0xFF800000

	)

589 
	#AR_PHY_CH2_EXT_MINCCA_PWR_S
 23

	)

591 
	#AR_PHY_CCA_NOM_VAL_5416_2GHZ
 -90

	)

592 
	#AR_PHY_CCA_NOM_VAL_5416_5GHZ
 -100

	)

593 
	#AR_PHY_CCA_MIN_GOOD_VAL_5416_2GHZ
 -100

	)

594 
	#AR_PHY_CCA_MIN_GOOD_VAL_5416_5GHZ
 -110

	)

595 
	#AR_PHY_CCA_MAX_GOOD_VAL_5416_2GHZ
 -80

	)

596 
	#AR_PHY_CCA_MAX_GOOD_VAL_5416_5GHZ
 -90

	)

598 
	#AR_PHY_CCA_NOM_VAL_9280_2GHZ
 -112

	)

599 
	#AR_PHY_CCA_NOM_VAL_9280_5GHZ
 -112

	)

600 
	#AR_PHY_CCA_MIN_GOOD_VAL_9280_2GHZ
 -127

	)

601 
	#AR_PHY_CCA_MIN_GOOD_VAL_9280_5GHZ
 -122

	)

602 
	#AR_PHY_CCA_MAX_GOOD_VAL_9280_2GHZ
 -97

	)

603 
	#AR_PHY_CCA_MAX_GOOD_VAL_9280_5GHZ
 -102

	)

605 
	#AR_PHY_CCA_NOM_VAL_9285_2GHZ
 -118

	)

606 
	#AR_PHY_CCA_MIN_GOOD_VAL_9285_2GHZ
 -127

	)

607 
	#AR_PHY_CCA_MAX_GOOD_VAL_9285_2GHZ
 -108

	)

609 
	#AR_PHY_CCA_NOM_VAL_9271_2GHZ
 -118

	)

610 
	#AR_PHY_CCA_MIN_GOOD_VAL_9271_2GHZ
 -127

	)

611 
	#AR_PHY_CCA_MAX_GOOD_VAL_9271_2GHZ
 -116

	)

613 
	#AR_PHY_CCA_NOM_VAL_9287_2GHZ
 -112

	)

614 
	#AR_PHY_CCA_MIN_GOOD_VAL_9287_2GHZ
 -127

	)

615 
	#AR_PHY_CCA_MAX_GOOD_VAL_9287_2GHZ
 -97

	)

	@ar9003_2p2_initvals.h

18 #i‚de‡
INITVALS_9003_2P2_H


19 
	#INITVALS_9003_2P2_H


	)

23 c⁄° 
u32
 
	g¨9300_2p2_ødio_po°ambÀ
[][5] = {

36 c⁄° 
u32
 
	g¨9300Modes_lowe°_ob_db_tx_gaö_èbÀ_2p2
[][5] = {

142 c⁄° 
u32
 
	g¨9300Modes_Á°_˛ock_2p2
[][3] = {

155 c⁄° 
u32
 
	g¨9300_2p2_ødio_c‹e
[][2] = {

299 c⁄° 
u32
 
	g¨9300_2p2_mac_po°ambÀ
[][5] = {

311 c⁄° 
u32
 
	g¨9300_2p2_soc_po°ambÀ
[][5] = {

316 c⁄° 
u32
 
	g¨9300_2p2_ba£b™d_po°ambÀ
[][5] = {

372 c⁄° 
u32
 
	g¨9300_2p2_ba£b™d_c‹e
[][2] = {

535 c⁄° 
u32
 
	g¨9300Modes_high_powî_tx_gaö_èbÀ_2p2
[][5] = {

641 c⁄° 
u32
 
	g¨9300Modes_high_ob_db_tx_gaö_èbÀ_2p2
[][5] = {

747 c⁄° 
u32
 
	g¨9300Modes_mixed_ob_db_tx_gaö_èbÀ_2p2
[][5] = {

853 c⁄° 
u32
 
	g¨9300Modes_ty≥5_tx_gaö_èbÀ_2p2
[][5] = {

927 c⁄° 
u32
 
	g¨9300Comm⁄_rx_gaö_èbÀ_2p2
[][2] = {

1187 c⁄° 
u32
 
	g¨9300Modes_low_ob_db_tx_gaö_èbÀ_2p2
[][5] = {

1293 c⁄° 
u32
 
	g¨9300_2p2_mac_c‹e
[][2] = {

1450 c⁄° 
u32
 
	g¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2
[][2] = {

1710 c⁄° 
u32
 
	g¨9300_2p2_soc_¥ómbÀ
[][2] = {

1720 c⁄° 
u32
 
	g¨9300PcõPhy_∂l_⁄_˛kªq_dißbÀ_L1_2p2
[][2] = {

1727 c⁄° 
u32
 
	g¨9300PcõPhy_˛kªq_íabÀ_L1_2p2
[][2] = {

1734 c⁄° 
u32
 
	g¨9300PcõPhy_˛kªq_dißbÀ_L1_2p2
[][2] = {

1741 c⁄° 
u32
 
	g¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
[][2] = {

1748 c⁄° 
u32
 
	g¨9300_2p2_ba£b™d_po°ambÀ_dfs_ch™√l
[][3] = {

	@ar9003_aic.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~"¨9003_mci.h
"

20 
	~"¨9003_aic.h
"

21 
	~"¨9003_phy.h
"

22 
	~"ªg_aic.h
"

24 c⁄° 
u8
 
	gcom_©t_db_èbÀ
[
ATH_AIC_MAX_COM_ATT_DB_TABLE
] = {

28 c⁄° 
u16
 
	gaic_lö_èbÀ
[
ATH_AIC_MAX_AIC_LIN_TABLE
] = {

40 
boﬁ
 
	$¨9003_hw_is_aic_íabÀd
(
©h_hw
 *
ah
)

42 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

48  
Ál£
;

50 i‡(
mci_hw
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_AIC
)

51  
Ál£
;

53  
åue
;

54 
	}
}

56 
öt16_t
 
	$¨9003_aic_föd_vÆid
(
©h_aic_§am_öfo
 *
ˇl_§am
,

57 
boﬁ
 
dú
, 
u8
 
ödex
)

59 
öt16_t
 
i
;

61 i‡(
dú
) {

62 
i
 = 
ödex
 + 1; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

63 i‡(
ˇl_§am
[
i
].
vÆid
)

67 
i
 = 
ödex
 - 1; i >= 0; i--) {

68 i‡(
ˇl_§am
[
i
].
vÆid
)

73 i‡((
i
 >
ATH_AIC_MAX_BT_CHANNEL
) || (i < 0))

74 
i
 = -1;

76  
i
;

77 
	}
}

82 
öt16_t
 
	$¨9003_aic_föd_ödex
(
u8
 
ty≥
, 
öt16_t
 
vÆue
)

84 
öt16_t
 
i
 = -1;

86 i‡(
ty≥
 == 0) {

87 
i
 = 
ATH_AIC_MAX_AIC_LIN_TABLE
 - 1; i >= 0; i--) {

88 i‡(
aic_lö_èbÀ
[
i
] >
vÆue
)

91 } i‡(
ty≥
 == 1) {

92 
i
 = 0; i < 
ATH_AIC_MAX_COM_ATT_DB_TABLE
; i++) {

93 i‡(
com_©t_db_èbÀ
[
i
] > 
vÆue
) {

94 
i
--;

99 i‡(
i
 >
ATH_AIC_MAX_COM_ATT_DB_TABLE
)

100 
i
 = -1;

103  
i
;

104 
	}
}

106 
	$¨9003_aic_gaö_èbÀ
(
©h_hw
 *
ah
)

108 
u32
 
aic_©ãn_w‹d
[19], 
i
;

111 
	`REG_WRITE
(
ah
, 
AR_PHY_BT_COEX_4
, 0x2c200a00);

112 
	`REG_WRITE
(
ah
, 
AR_PHY_BT_COEX_5
, 0x5c4e4438);

115 
aic_©ãn_w‹d
[0] = (0x1 & 0xf) << 14 | (0x1f & 0x1f) << 9 | (0x0 & 0xf) << 5 |

117 
aic_©ãn_w‹d
[1] = (0x3 & 0xf) << 14 | (0x1f & 0x1f) << 9 | (0x2 & 0xf) << 5 |

119 
aic_©ãn_w‹d
[2] = (0x5 & 0xf) << 14 | (0x1f & 0x1f) << 9 | (0x4 & 0xf) << 5 |

121 
aic_©ãn_w‹d
[3] = (0x1 & 0xf) << 14 | (0x1e & 0x1f) << 9 | (0x0 & 0xf) << 5 |

123 
aic_©ãn_w‹d
[4] = (0x3 & 0xf) << 14 | (0x1e & 0x1f) << 9 | (0x2 & 0xf) << 5 |

125 
aic_©ãn_w‹d
[5] = (0x5 & 0xf) << 14 | (0x1e & 0x1f) << 9 | (0x4 & 0xf) << 5 |

127 
aic_©ãn_w‹d
[6] = (0x1 & 0xf) << 14 | (0xf & 0x1f) << 9 | (0x0 & 0xf) << 5 |

129 
aic_©ãn_w‹d
[7] = (0x3 & 0xf) << 14 | (0xf & 0x1f) << 9 | (0x2 & 0xf) << 5 |

131 
aic_©ãn_w‹d
[8] = (0x5 & 0xf) << 14 | (0xf & 0x1f) << 9 | (0x4 & 0xf) << 5 |

133 
aic_©ãn_w‹d
[9] = (0x1 & 0xf) << 14 | (0x7 & 0x1f) << 9 | (0x0 & 0xf) << 5 |

135 
aic_©ãn_w‹d
[10] = (0x3 & 0xf) << 14 | (0x7 & 0x1f) << 9 | (0x2 & 0xf) << 5 |

137 
aic_©ãn_w‹d
[11] = (0x5 & 0xf) << 14 | (0x7 & 0x1f) << 9 | (0x4 & 0xf) << 5 |

139 
aic_©ãn_w‹d
[12] = (0x7 & 0xf) << 14 | (0x7 & 0x1f) << 9 | (0x6 & 0xf) << 5 |

141 
aic_©ãn_w‹d
[13] = (0x3 & 0xf) << 14 | (0x3 & 0x1f) << 9 | (0x2 & 0xf) << 5 |

143 
aic_©ãn_w‹d
[14] = (0x5 & 0xf) << 14 | (0x3 & 0x1f) << 9 | (0x4 & 0xf) << 5 |

145 
aic_©ãn_w‹d
[15] = (0x1 & 0xf) << 14 | (0x1 & 0x1f) << 9 | (0x0 & 0xf) << 5 |

147 
aic_©ãn_w‹d
[16] = (0x3 & 0xf) << 14 | (0x1 & 0x1f) << 9 | (0x2 & 0xf) << 5 |

149 
aic_©ãn_w‹d
[17] = (0x5 & 0xf) << 14 | (0x1 & 0x1f) << 9 | (0x4 & 0xf) << 5 |

151 
aic_©ãn_w‹d
[18] = (0x7 & 0xf) << 14 | (0x1 & 0x1f) << 9 | (0x6 & 0xf) << 5 |

155 
	`REG_WRITE
(
ah
, (
AR_PHY_AIC_SRAM_ADDR_B0
 + 0x3000),

156 (
ATH_AIC_SRAM_AUTO_INCREMENT
 |

157 
ATH_AIC_SRAM_GAIN_TABLE_OFFSET
));

159 
i
 = 0; i < 19; i++) {

160 
	`REG_WRITE
(
ah
, (
AR_PHY_AIC_SRAM_DATA_B0
 + 0x3000),

161 
aic_©ãn_w‹d
[
i
]);

163 
	}
}

165 
u8
 
	$¨9003_aic_ˇl_°¨t
(
©h_hw
 *
ah
, 
u8
 
mö_vÆid_cou¡
)

167 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

168 
i
;

171 
	`REG_WRITE
(
ah
, (
AR_PHY_AIC_SRAM_ADDR_B0
 + 0x3000),

172 (
ATH_AIC_SRAM_AUTO_INCREMENT
 |

173 
ATH_AIC_SRAM_CAL_OFFSET
));

175 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

176 
	`REG_WRITE
(
ah
, (
AR_PHY_AIC_SRAM_DATA_B0
 + 0x3000), 0);

177 
aic
->
aic_§am
[
i
] = 0;

180 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_0_B0
,

181 (
	`SM
(0, 
AR_PHY_AIC_MON_ENABLE
) |

182 
	`SM
(127, 
AR_PHY_AIC_CAL_MAX_HOP_COUNT
) |

183 
	`SM
(
mö_vÆid_cou¡
, 
AR_PHY_AIC_CAL_MIN_VALID_COUNT
) |

184 
	`SM
(37, 
AR_PHY_AIC_F_WLAN
) |

185 
	`SM
(1, 
AR_PHY_AIC_CAL_CH_VALID_RESET
) |

186 
	`SM
(0, 
AR_PHY_AIC_CAL_ENABLE
) |

187 
	`SM
(0x40, 
AR_PHY_AIC_BTTX_PWR_THR
) |

188 
	`SM
(0, 
AR_PHY_AIC_ENABLE
)));

190 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
,

191 (
	`SM
(0, 
AR_PHY_AIC_MON_ENABLE
) |

192 
	`SM
(1, 
AR_PHY_AIC_CAL_CH_VALID_RESET
) |

193 
	`SM
(0, 
AR_PHY_AIC_CAL_ENABLE
) |

194 
	`SM
(0x40, 
AR_PHY_AIC_BTTX_PWR_THR
) |

195 
	`SM
(0, 
AR_PHY_AIC_ENABLE
)));

197 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_1_B0
,

198 (
	`SM
(8, 
AR_PHY_AIC_CAL_BT_REF_DELAY
) |

199 
	`SM
(0, 
AR_PHY_AIC_BT_IDLE_CFG
) |

200 
	`SM
(1, 
AR_PHY_AIC_STDBY_COND
) |

201 
	`SM
(37, 
AR_PHY_AIC_STDBY_ROT_ATT_DB
) |

202 
	`SM
(5, 
AR_PHY_AIC_STDBY_COM_ATT_DB
) |

203 
	`SM
(15, 
AR_PHY_AIC_RSSI_MAX
) |

204 
	`SM
(0, 
AR_PHY_AIC_RSSI_MIN
)));

206 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_1_B1
,

207 (
	`SM
(15, 
AR_PHY_AIC_RSSI_MAX
) |

208 
	`SM
(0, 
AR_PHY_AIC_RSSI_MIN
)));

210 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_2_B0
,

211 (
	`SM
(44, 
AR_PHY_AIC_RADIO_DELAY
) |

212 
	`SM
(8, 
AR_PHY_AIC_CAL_STEP_SIZE_CORR
) |

213 
	`SM
(12, 
AR_PHY_AIC_CAL_ROT_IDX_CORR
) |

214 
	`SM
(2, 
AR_PHY_AIC_CAL_CONV_CHECK_FACTOR
) |

215 
	`SM
(5, 
AR_PHY_AIC_ROT_IDX_COUNT_MAX
) |

216 
	`SM
(0, 
AR_PHY_AIC_CAL_SYNTH_TOGGLE
) |

217 
	`SM
(0, 
AR_PHY_AIC_CAL_SYNTH_AFTER_BTRX
) |

218 
	`SM
(200, 
AR_PHY_AIC_CAL_SYNTH_SETTLING
)));

220 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_3_B0
,

221 (
	`SM
(2, 
AR_PHY_AIC_MON_MAX_HOP_COUNT
) |

222 
	`SM
(1, 
AR_PHY_AIC_MON_MIN_STALE_COUNT
) |

223 
	`SM
(1, 
AR_PHY_AIC_MON_PWR_EST_LONG
) |

224 
	`SM
(2, 
AR_PHY_AIC_MON_PD_TALLY_SCALING
) |

225 
	`SM
(10, 
AR_PHY_AIC_MON_PERF_THR
) |

226 
	`SM
(2, 
AR_PHY_AIC_CAL_TARGET_MAG_SETTING
) |

227 
	`SM
(1, 
AR_PHY_AIC_CAL_PERF_CHECK_FACTOR
) |

228 
	`SM
(1, 
AR_PHY_AIC_CAL_PWR_EST_LONG
)));

230 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_4_B0
,

231 (
	`SM
(2, 
AR_PHY_AIC_CAL_ROT_ATT_DB_EST_ISO
) |

232 
	`SM
(3, 
AR_PHY_AIC_CAL_COM_ATT_DB_EST_ISO
) |

233 
	`SM
(0, 
AR_PHY_AIC_CAL_ISO_EST_INIT_SETTING
) |

234 
	`SM
(2, 
AR_PHY_AIC_CAL_COM_ATT_DB_BACKOFF
) |

235 
	`SM
(1, 
AR_PHY_AIC_CAL_COM_ATT_DB_FIXED
)));

237 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_CTRL_4_B1
,

238 (
	`SM
(2, 
AR_PHY_AIC_CAL_ROT_ATT_DB_EST_ISO
) |

239 
	`SM
(3, 
AR_PHY_AIC_CAL_COM_ATT_DB_EST_ISO
) |

240 
	`SM
(0, 
AR_PHY_AIC_CAL_ISO_EST_INIT_SETTING
) |

241 
	`SM
(2, 
AR_PHY_AIC_CAL_COM_ATT_DB_BACKOFF
) |

242 
	`SM
(1, 
AR_PHY_AIC_CAL_COM_ATT_DB_FIXED
)));

244 
	`¨9003_aic_gaö_èbÀ
(
ah
);

247 
	`REG_WRITE
(
ah
, 
ATH_AIC_BT_JUPITER_CTRL
,

248 (
	`REG_READ
(
ah
, 
ATH_AIC_BT_JUPITER_CTRL
) |

249 
ATH_AIC_BT_AIC_ENABLE
));

251 
aic
->
aic_ˇl_°¨t_time
 = 
	`REG_READ
(
ah
, 
AR_TSF_L32
);

254 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
, 
AR_PHY_AIC_CAL_ENABLE
);

255 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
, 
AR_PHY_AIC_CAL_CH_VALID_RESET
);

256 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
, 
AR_PHY_AIC_CAL_ENABLE
);

258 
aic
->
aic_ˇÀd_ch™
 = 0;

259 
aic
->
aic_ˇl_°©e
 = 
AIC_CAL_STATE_STARTED
;

261  
aic
->
aic_ˇl_°©e
;

262 
	}
}

264 
boﬁ
 
	$¨9003_aic_ˇl_po°_¥o˚ss
(
©h_hw
 *
ah
)

266 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

267 
©h_aic_§am_öfo
 
ˇl_§am
[
ATH_AIC_MAX_BT_CHANNEL
];

268 
©h_aic_out_öfo
 
aic_§am
[
ATH_AIC_MAX_BT_CHANNEL
];

269 
u32
 
dú_∑th_gaö_idx
, 
quad_∑th_gaö_idx
, 
vÆue
;

270 
u32
 
fixed_com_©t_db
;

271 
öt8_t
 
dú_∑th_sign
, 
quad_∑th_sign
;

272 
öt16_t
 
i
;

273 
boﬁ
 
ªt
 = 
åue
;

275 
	`mem£t
(&
ˇl_§am
, 0, (cal_sram));

276 
	`mem£t
(&
aic_§am
, 0, (aic_sram));

278 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

279 
vÆue
 = 
aic
->
aic_§am
[
i
];

281 
ˇl_§am
[
i
].
vÆid
 =

282 
	`MS
(
vÆue
, 
AR_PHY_AIC_SRAM_VALID
);

283 
ˇl_§am
[
i
].
rŸ_quad_©t_db
 =

284 
	`MS
(
vÆue
, 
AR_PHY_AIC_SRAM_ROT_QUAD_ATT_DB
);

285 
ˇl_§am
[
i
].
vga_quad_sign
 =

286 
	`MS
(
vÆue
, 
AR_PHY_AIC_SRAM_VGA_QUAD_SIGN
);

287 
ˇl_§am
[
i
].
rŸ_dú_©t_db
 =

288 
	`MS
(
vÆue
, 
AR_PHY_AIC_SRAM_ROT_DIR_ATT_DB
);

289 
ˇl_§am
[
i
].
vga_dú_sign
 =

290 
	`MS
(
vÆue
, 
AR_PHY_AIC_SRAM_VGA_DIR_SIGN
);

291 
ˇl_§am
[
i
].
com_©t_6db
 =

292 
	`MS
(
vÆue
, 
AR_PHY_AIC_SRAM_COM_ATT_6DB
);

294 i‡(
ˇl_§am
[
i
].
vÆid
) {

295 
dú_∑th_gaö_idx
 = 
ˇl_§am
[
i
].
rŸ_dú_©t_db
 +

296 
com_©t_db_èbÀ
[
ˇl_§am
[
i
].
com_©t_6db
];

297 
quad_∑th_gaö_idx
 = 
ˇl_§am
[
i
].
rŸ_quad_©t_db
 +

298 
com_©t_db_èbÀ
[
ˇl_§am
[
i
].
com_©t_6db
];

300 
dú_∑th_sign
 = (
ˇl_§am
[
i
].
vga_dú_sign
) ? 1 : -1;

301 
quad_∑th_sign
 = (
ˇl_§am
[
i
].
vga_quad_sign
) ? 1 : -1;

303 
aic_§am
[
i
].
dú_∑th_gaö_lö
 = 
dú_∑th_sign
 *

304 
aic_lö_èbÀ
[
dú_∑th_gaö_idx
];

305 
aic_§am
[
i
].
quad_∑th_gaö_lö
 = 
quad_∑th_sign
 *

306 
aic_lö_èbÀ
[
quad_∑th_gaö_idx
];

310 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

311 
öt16_t
 
°¨t_idx
, 
íd_idx
;

313 i‡(
ˇl_§am
[
i
].
vÆid
)

316 
°¨t_idx
 = 
	`¨9003_aic_föd_vÆid
(
ˇl_§am
, 0, 
i
);

317 
íd_idx
 = 
	`¨9003_aic_föd_vÆid
(
ˇl_§am
, 1, 
i
);

319 i‡(
°¨t_idx
 < 0) {

321 
°¨t_idx
 = 
íd_idx
;

322 
íd_idx
 = 
	`¨9003_aic_föd_vÆid
(
ˇl_§am
, 1, 
°¨t_idx
);

324 i‡(
íd_idx
 < 0) {

325 
ªt
 = 
Ál£
;

329 
aic_§am
[
i
].
dú_∑th_gaö_lö
 =

330 ((
aic_§am
[
°¨t_idx
].
dú_∑th_gaö_lö
 -

331 
aic_§am
[
íd_idx
].
dú_∑th_gaö_lö
) *

332 (
°¨t_idx
 - 
i
Ë+ ((
íd_idx
 - i) >> 1)) /

333 (
íd_idx
 - 
i
) +

334 
aic_§am
[
°¨t_idx
].
dú_∑th_gaö_lö
;

335 
aic_§am
[
i
].
quad_∑th_gaö_lö
 =

336 ((
aic_§am
[
°¨t_idx
].
quad_∑th_gaö_lö
 -

337 
aic_§am
[
íd_idx
].
quad_∑th_gaö_lö
) *

338 (
°¨t_idx
 - 
i
Ë+ ((
íd_idx
 - i) >> 1)) /

339 (
íd_idx
 - 
i
) +

340 
aic_§am
[
°¨t_idx
].
quad_∑th_gaö_lö
;

343 i‡(
íd_idx
 < 0) {

345 
íd_idx
 = 
	`¨9003_aic_föd_vÆid
(
ˇl_§am
, 0, 
°¨t_idx
);

347 i‡(
íd_idx
 < 0) {

348 
ªt
 = 
Ál£
;

352 
aic_§am
[
i
].
dú_∑th_gaö_lö
 =

353 ((
aic_§am
[
°¨t_idx
].
dú_∑th_gaö_lö
 -

354 
aic_§am
[
íd_idx
].
dú_∑th_gaö_lö
) *

355 (
i
 - 
°¨t_idx
Ë+ ((°¨t_idx - 
íd_idx
) >> 1)) /

356 (
°¨t_idx
 - 
íd_idx
) +

357 
aic_§am
[
°¨t_idx
].
dú_∑th_gaö_lö
;

358 
aic_§am
[
i
].
quad_∑th_gaö_lö
 =

359 ((
aic_§am
[
°¨t_idx
].
quad_∑th_gaö_lö
 -

360 
aic_§am
[
íd_idx
].
quad_∑th_gaö_lö
) *

361 (
i
 - 
°¨t_idx
Ë+ ((°¨t_idx - 
íd_idx
) >> 1)) /

362 (
°¨t_idx
 - 
íd_idx
) +

363 
aic_§am
[
°¨t_idx
].
quad_∑th_gaö_lö
;

365 } i‡(
°¨t_idx
 >= 0){

367 
aic_§am
[
i
].
dú_∑th_gaö_lö
 =

368 (((
íd_idx
 - 
i
Ë* 
aic_§am
[
°¨t_idx
].
dú_∑th_gaö_lö
) +

369 ((
i
 - 
°¨t_idx
Ë* 
aic_§am
[
íd_idx
].
dú_∑th_gaö_lö
) +

370 ((
íd_idx
 - 
°¨t_idx
) >> 1)) /

371 (
íd_idx
 - 
°¨t_idx
);

372 
aic_§am
[
i
].
quad_∑th_gaö_lö
 =

373 (((
íd_idx
 - 
i
Ë* 
aic_§am
[
°¨t_idx
].
quad_∑th_gaö_lö
) +

374 ((
i
 - 
°¨t_idx
Ë* 
aic_§am
[
íd_idx
].
quad_∑th_gaö_lö
) +

375 ((
íd_idx
 - 
°¨t_idx
) >> 1))/

376 (
íd_idx
 - 
°¨t_idx
);

381 
i
 = 
	`¨9003_aic_föd_vÆid
(
ˇl_§am
, 1, 0);

382 i‡(
i
 < 0) {

383 
i
 = 0;

384 
ªt
 = 
Ál£
;

386 
fixed_com_©t_db
 = 
com_©t_db_èbÀ
[
ˇl_§am
[
i
].
com_©t_6db
];

388 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

389 
öt16_t
 
rŸ_dú_∑th_©t_db
, 
rŸ_quad_∑th_©t_db
;

391 
aic_§am
[
i
].
§am
.
vga_dú_sign
 =

392 (
aic_§am
[
i
].
dú_∑th_gaö_lö
 >= 0) ? 1 : 0;

393 
aic_§am
[
i
].
§am
.
vga_quad_sign
=

394 (
aic_§am
[
i
].
quad_∑th_gaö_lö
 >= 0) ? 1 : 0;

396 
rŸ_dú_∑th_©t_db
 =

397 
	`¨9003_aic_föd_ödex
(0, 
	`abs
(
aic_§am
[
i
].
dú_∑th_gaö_lö
)) -

398 
fixed_com_©t_db
;

399 
rŸ_quad_∑th_©t_db
 =

400 
	`¨9003_aic_föd_ödex
(0, 
	`abs
(
aic_§am
[
i
].
quad_∑th_gaö_lö
)) -

401 
fixed_com_©t_db
;

403 
aic_§am
[
i
].
§am
.
com_©t_6db
 =

404 
	`¨9003_aic_föd_ödex
(1, 
fixed_com_©t_db
);

406 
aic_§am
[
i
].
§am
.
vÆid
 = 1;

408 
aic_§am
[
i
].
§am
.
rŸ_dú_©t_db
 =

409 
	`mö
(
	`max
(
rŸ_dú_∑th_©t_db
,

410 (
öt16_t
)
ATH_AIC_MIN_ROT_DIR_ATT_DB
),

411 
ATH_AIC_MAX_ROT_DIR_ATT_DB
);

412 
aic_§am
[
i
].
§am
.
rŸ_quad_©t_db
 =

413 
	`mö
(
	`max
(
rŸ_quad_∑th_©t_db
,

414 (
öt16_t
)
ATH_AIC_MIN_ROT_QUAD_ATT_DB
),

415 
ATH_AIC_MAX_ROT_QUAD_ATT_DB
);

418 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

419 
aic
->
aic_§am
[
i
] = (
	`SM
◊ic_§am[i].
§am
.
vga_dú_sign
,

420 
AR_PHY_AIC_SRAM_VGA_DIR_SIGN
) |

421 
	`SM
(
aic_§am
[
i
].
§am
.
vga_quad_sign
,

422 
AR_PHY_AIC_SRAM_VGA_QUAD_SIGN
) |

423 
	`SM
(
aic_§am
[
i
].
§am
.
com_©t_6db
,

424 
AR_PHY_AIC_SRAM_COM_ATT_6DB
) |

425 
	`SM
(
aic_§am
[
i
].
§am
.
vÆid
,

426 
AR_PHY_AIC_SRAM_VALID
) |

427 
	`SM
(
aic_§am
[
i
].
§am
.
rŸ_dú_©t_db
,

428 
AR_PHY_AIC_SRAM_ROT_DIR_ATT_DB
) |

429 
	`SM
(
aic_§am
[
i
].
§am
.
rŸ_quad_©t_db
,

430 
AR_PHY_AIC_SRAM_ROT_QUAD_ATT_DB
));

433  
ªt
;

434 
	}
}

436 
	$¨9003_aic_ˇl_d⁄e
(
©h_hw
 *
ah
)

438 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

441 
	`REG_WRITE
(
ah
, 
ATH_AIC_BT_JUPITER_CTRL
,

442 (
	`REG_READ
(
ah
, 
ATH_AIC_BT_JUPITER_CTRL
) &

443 ~
ATH_AIC_BT_AIC_ENABLE
));

445 i‡(
	`¨9003_aic_ˇl_po°_¥o˚ss
(
ah
))

446 
aic
->
aic_ˇl_°©e
 = 
AIC_CAL_STATE_DONE
;

448 
aic
->
aic_ˇl_°©e
 = 
AIC_CAL_STATE_ERROR
;

449 
	}
}

451 
u8
 
	$¨9003_aic_ˇl_c⁄töue
(
©h_hw
 *
ah
, 
boﬁ
 
ˇl_⁄˚
)

453 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

454 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

455 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

456 
i
, 
num_ch™
;

458 
num_ch™
 = 
	`MS
(
mci_hw
->
c⁄fig
, 
ATH_MCI_CONFIG_AIC_CAL_NUM_CHAN
);

460 i‡(!
num_ch™
) {

461 
aic
->
aic_ˇl_°©e
 = 
AIC_CAL_STATE_ERROR
;

462  
aic
->
aic_ˇl_°©e
;

465 i‡(
ˇl_⁄˚
) {

466 
i
 = 0; i < 10000; i++) {

467 i‡((
	`REG_READ
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
) &

468 
AR_PHY_AIC_CAL_ENABLE
) == 0)

471 
	`udñay
(100);

479 i‡((
	`REG_READ
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
) &

480 
AR_PHY_AIC_CAL_ENABLE
) != 0) {

481 
	`©h_dbg
(
comm⁄
, 
MCI
, "AIC cal isÇot doneáfter 40ms");

482 
exô
;

485 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_SRAM_ADDR_B1
,

486 (
ATH_AIC_SRAM_CAL_OFFSET
 | 
ATH_AIC_SRAM_AUTO_INCREMENT
));

488 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

489 
u32
 
vÆue
;

491 
vÆue
 = 
	`REG_READ
(
ah
, 
AR_PHY_AIC_SRAM_DATA_B1
);

493 i‡(
vÆue
 & 0x01) {

494 i‡(
aic
->
aic_§am
[
i
] == 0)

495 
aic
->
aic_ˇÀd_ch™
++;

497 
aic
->
aic_§am
[
i
] = 
vÆue
;

499 i‡(!
ˇl_⁄˚
)

504 i‡((
aic
->
aic_ˇÀd_ch™
 >
num_ch™
Ë|| 
ˇl_⁄˚
) {

505 
	`¨9003_aic_ˇl_d⁄e
(
ah
);

508 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
, 
AR_PHY_AIC_CAL_ENABLE
);

509 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
,

510 
AR_PHY_AIC_CAL_CH_VALID_RESET
);

511 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AIC_CTRL_0_B1
, 
AR_PHY_AIC_CAL_ENABLE
);

513 
exô
:

514  
aic
->
aic_ˇl_°©e
;

516 
	}
}

518 
u8
 
	$¨9003_aic_ˇlibøti⁄
(
©h_hw
 *
ah
)

520 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

521 
u8
 
ˇl_ªt
 = 
AIC_CAL_STATE_ERROR
;

523 
aic
->
aic_ˇl_°©e
) {

524 
AIC_CAL_STATE_IDLE
:

525 
ˇl_ªt
 = 
	`¨9003_aic_ˇl_°¨t
(
ah
, 1);

527 
AIC_CAL_STATE_STARTED
:

528 
ˇl_ªt
 = 
	`¨9003_aic_ˇl_c⁄töue
(
ah
, 
Ál£
);

530 
AIC_CAL_STATE_DONE
:

531 
ˇl_ªt
 = 
AIC_CAL_STATE_DONE
;

537  
ˇl_ªt
;

538 
	}
}

540 
u8
 
	$¨9003_aic_°¨t_n‹mÆ
(
©h_hw
 *
ah
)

542 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

543 
öt16_t
 
i
;

545 i‡(
aic
->
aic_ˇl_°©e
 !
AIC_CAL_STATE_DONE
)

548 
	`¨9003_aic_gaö_èbÀ
(
ah
);

550 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_SRAM_ADDR_B1
, 
ATH_AIC_SRAM_AUTO_INCREMENT
);

552 
i
 = 0; i < 
ATH_AIC_MAX_BT_CHANNEL
; i++) {

553 
	`REG_WRITE
(
ah
, 
AR_PHY_AIC_SRAM_DATA_B1
, 
aic
->
aic_§am
[
i
]);

557 
	`REG_WRITE
(
ah
, 0xa6b0, 0x80);

558 
	`REG_WRITE
(
ah
, 0xa6b4, 0x5b2df0);

559 
	`REG_WRITE
(
ah
, 0xa6b8, 0x10762cc8);

560 
	`REG_WRITE
(
ah
, 0xa6bc, 0x1219a4b);

561 
	`REG_WRITE
(
ah
, 0xa6c0, 0x1e01);

562 
	`REG_WRITE
(
ah
, 0xb6b4, 0xf0);

563 
	`REG_WRITE
(
ah
, 0xb6c0, 0x1e01);

564 
	`REG_WRITE
(
ah
, 0xb6b0, 0x81);

565 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH1_RXTX4
, 0x40000000);

567 
aic
->
aic_íabÀd
 = 
åue
;

570 
	}
}

572 
u8
 
	$¨9003_aic_ˇl_ª£t
(
©h_hw
 *
ah
)

574 
©h9k_hw_aic
 *
aic
 = &
ah
->
btc€x_hw
.aic;

576 
aic
->
aic_ˇl_°©e
 = 
AIC_CAL_STATE_IDLE
;

577  
aic
->
aic_ˇl_°©e
;

578 
	}
}

580 
u8
 
	$¨9003_aic_ˇlibøti⁄_sögÀ
(
©h_hw
 *
ah
)

582 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

583 
u8
 
ˇl_ªt
;

584 
num_ch™
;

586 
num_ch™
 = 
	`MS
(
mci_hw
->
c⁄fig
, 
ATH_MCI_CONFIG_AIC_CAL_NUM_CHAN
);

588 (Ë
	`¨9003_aic_ˇl_°¨t
(
ah
, 
num_ch™
);

589 
ˇl_ªt
 = 
	`¨9003_aic_ˇl_c⁄töue
(
ah
, 
åue
);

591  
ˇl_ªt
;

592 
	}
}

594 
	$¨9003_hw_©èch_aic_›s
(
©h_hw
 *
ah
)

596 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

598 
¥iv_›s
->
is_aic_íabÀd
 = 
¨9003_hw_is_aic_íabÀd
;

599 
	}
}

	@ar9003_aic.h

17 #i‚de‡
AR9003_AIC_H


18 
	#AR9003_AIC_H


	)

20 
	#ATH_AIC_MAX_COM_ATT_DB_TABLE
 6

	)

21 
	#ATH_AIC_MAX_AIC_LIN_TABLE
 69

	)

22 
	#ATH_AIC_MIN_ROT_DIR_ATT_DB
 0

	)

23 
	#ATH_AIC_MIN_ROT_QUAD_ATT_DB
 0

	)

24 
	#ATH_AIC_MAX_ROT_DIR_ATT_DB
 37

	)

25 
	#ATH_AIC_MAX_ROT_QUAD_ATT_DB
 37

	)

26 
	#ATH_AIC_SRAM_AUTO_INCREMENT
 0x80000000

	)

27 
	#ATH_AIC_SRAM_GAIN_TABLE_OFFSET
 0x280

	)

28 
	#ATH_AIC_SRAM_CAL_OFFSET
 0x140

	)

29 
	#ATH_AIC_SRAM_OFFSET
 0x00

	)

30 
	#ATH_AIC_MEAS_MAG_THRESH
 20

	)

31 
	#ATH_AIC_BT_JUPITER_CTRL
 0x66820

	)

32 
	#ATH_AIC_BT_AIC_ENABLE
 0x02

	)

34 
	eaic_ˇl_°©e
 {

35 
	mAIC_CAL_STATE_IDLE
 = 0,

36 
	mAIC_CAL_STATE_STARTED
,

37 
	mAIC_CAL_STATE_DONE
,

38 
	mAIC_CAL_STATE_ERROR


41 
	s©h_aic_§am_öfo
 {

42 
boﬁ
 
	mvÆid
:1;

43 
boﬁ
 
	mvga_quad_sign
:1;

44 
boﬁ
 
	mvga_dú_sign
:1;

45 
u8
 
	mrŸ_quad_©t_db
;

46 
u8
 
	mrŸ_dú_©t_db
;

47 
u8
 
	mcom_©t_6db
;

50 
	s©h_aic_out_öfo
 {

51 
öt16_t
 
	mdú_∑th_gaö_lö
;

52 
öt16_t
 
	mquad_∑th_gaö_lö
;

53 
©h_aic_§am_öfo
 
	m§am
;

56 
u8
 
¨9003_aic_ˇlibøti⁄
(
©h_hw
 *
ah
);

57 
u8
 
¨9003_aic_°¨t_n‹mÆ
(
©h_hw
 *
ah
);

58 
u8
 
¨9003_aic_ˇl_ª£t
(
©h_hw
 *
ah
);

59 
u8
 
¨9003_aic_ˇlibøti⁄_sögÀ
(
©h_hw
 *
ah
);

	@ar9003_buffalo_initvals.h

17 #i‚de‡
INITVALS_9003_BUFFALO_H


18 
	#INITVALS_9003_BUFFALO_H


	)

20 c⁄° 
u32
 
	g¨9300Modes_high_powî_tx_gaö_èbÀ_bufÁlo
[][5] = {

	@ar9003_calib.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~"¨9003_phy.h
"

20 
	~"¨9003_πt.h
"

21 
	~"¨9003_mci.h
"

23 
	#MAX_MEASUREMENT
 
MAX_IQCAL_MEASUREMENT


	)

24 
	#MAX_MAG_DELTA
 11

	)

25 
	#MAX_PHS_DELTA
 10

	)

26 
	#MAXIQCAL
 3

	)

28 
	sc€ff
 {

29 
	mmag_c€ff
[
AR9300_MAX_CHAINS
][
MAX_MEASUREMENT
][
MAXIQCAL
];

30 
	mphs_c€ff
[
AR9300_MAX_CHAINS
][
MAX_MEASUREMENT
][
MAXIQCAL
];

31 
	miqc_c€ff
[2];

34 
	e¨9003_ˇl_ty≥s
 {

35 
	mIQ_MISMATCH_CAL
 = 
BIT
(0),

38 
	$¨9003_hw_£tup_ˇlibøti⁄
(
©h_hw
 *
ah
,

39 
©h9k_ˇl_li°
 *
cuºCÆ
)

41 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

44 
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
) {

45 
IQ_MISMATCH_CAL
:

50 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

51 
AR_PHY_TIMING4_IQCAL_LOG_COUNT_MAX
,

52 
cuºCÆ
->
ˇlD©a
->
ˇlCou¡Max
);

53 
	`REG_WRITE
(
ah
, 
AR_PHY_CALMODE
, 
AR_PHY_CALMODE_IQ
);

55 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

59 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TIMING4
, 
AR_PHY_TIMING4_DO_CAL
);

62 
	`©h_îr
(
comm⁄
, "Invalid calibrationÅype\n");

65 
	}
}

72 
boﬁ
 
	$¨9003_hw_≥r_ˇlibøti⁄
(
©h_hw
 *
ah
,

73 
©h9k_ch™√l
 *
ich™
,

74 
u8
 
rxchaömask
,

75 
©h9k_ˇl_li°
 *
cuºCÆ
)

77 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

79 
boﬁ
 
isˇld⁄e
 = 
Ál£
;

82 i‡(
cuºCÆ
->
ˇlSèã
 =
CAL_RUNNING
) {

84 i‡(!(
	`REG_READ
(
ah
, 
AR_PHY_TIMING4
Ë& 
AR_PHY_TIMING4_DO_CAL
)) {

88 
cuºCÆ
->
ˇlD©a
->
	`ˇlCﬁÀ˘
(
ah
);

89 
ah
->
ˇl_ßm∂es
++;

91 i‡(
ah
->
ˇl_ßm∂es
 >=

92 
cuºCÆ
->
ˇlD©a
->
ˇlNumSam∂es
) {

93 
i
, 
numChaös
 = 0;

94 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

95 i‡(
rxchaömask
 & (1 << 
i
))

96 
numChaös
++;

102 
cuºCÆ
->
ˇlD©a
->
	`ˇlPo°Proc
(
ah
, 
numChaös
);

105 
ˇld©a
->
CÆVÆid
 |
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
;

106 
cuºCÆ
->
ˇlSèã
 = 
CAL_DONE
;

107 
isˇld⁄e
 = 
åue
;

113 
	`¨9003_hw_£tup_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

116 } i‡(!(
ˇld©a
->
CÆVÆid
 & 
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
)) {

118 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

121  
isˇld⁄e
;

122 
	}
}

124 
	$¨9003_hw_ˇlibøã
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

125 
u8
 
rxchaömask
, 
boﬁ
 
l⁄gˇl
)

127 
boﬁ
 
isˇld⁄e
 = 
åue
;

128 
©h9k_ˇl_li°
 *
cuºCÆ
 = 
ah
->
ˇl_li°_cuº
;

129 
ªt
;

140 i‡(
cuºCÆ
 &&

141 (
cuºCÆ
->
ˇlSèã
 =
CAL_RUNNING
 ||

142 
cuºCÆ
->
ˇlSèã
 =
CAL_WAITING
)) {

143 
isˇld⁄e
 = 
	`¨9003_hw_≥r_ˇlibøti⁄
(
ah
, 
ch™
,

144 
rxchaömask
, 
cuºCÆ
);

145 i‡(
isˇld⁄e
) {

146 
ah
->
ˇl_li°_cuº
 = 
cuºCÆ
 = cuºCÆ->
ˇlNext
;

148 i‡(
cuºCÆ
->
ˇlSèã
 =
CAL_WAITING
) {

149 
isˇld⁄e
 = 
Ál£
;

150 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

159 i‡(
l⁄gˇl
 && 
	`©h9k_hw_gënf
(
ah
, 
ch™
)) {

165 
ªt
 = 
	`©h9k_hw_lﬂdnf
(
ah
,áh->
curch™
);

166 i‡(
ªt
 < 0)

167  
ªt
;

170 
	`©h9k_hw_°¨t_nfˇl
(
ah
, 
Ál£
);

173  
isˇld⁄e
;

174 
	}
}

176 
	$¨9003_hw_iqˇl_cﬁÀ˘
(
©h_hw
 *
ah
)

178 
i
;

181 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

182 i‡(
ah
->
txchaömask
 & 
	`BIT
(
i
)) {

183 
ah
->
tŸÆPowîMósI
[
i
] +=

184 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_0
(
i
));

185 
ah
->
tŸÆPowîMósQ
[
i
] +=

186 
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_1
(
i
));

187 
ah
->
tŸÆIqC‹rMós
[
i
] +=

188 (
öt32_t
Ë
	`REG_READ
(
ah
, 
	`AR_PHY_CAL_MEAS_2
(
i
));

189 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

191 
ah
->
ˇl_ßm∂es
, 
i
,áh->
tŸÆPowîMósI
[i],

192 
ah
->
tŸÆPowîMósQ
[
i
],

193 
ah
->
tŸÆIqC‹rMós
[
i
]);

196 
	}
}

198 
	$¨9003_hw_iqˇlibøã
(
©h_hw
 *
ah
, 
u8
 
numChaös
)

200 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

201 
u32
 
powîMósQ
, 
powîMósI
, 
iqC‹rMós
;

202 
u32
 
qCoffDíom
, 
iCoffDíom
;

203 
öt32_t
 
qCoff
, 
iCoff
;

204 
iqC‹rNeg
, 
i
;

205 c⁄° 
u_öt32_t
 
off£t_¨øy
[3] = {

206 
AR_PHY_RX_IQCAL_CORR_B0
,

207 
AR_PHY_RX_IQCAL_CORR_B1
,

208 
AR_PHY_RX_IQCAL_CORR_B2
,

211 
i
 = 0; i < 
numChaös
; i++) {

212 
powîMósI
 = 
ah
->
tŸÆPowîMósI
[
i
];

213 
powîMósQ
 = 
ah
->
tŸÆPowîMósQ
[
i
];

214 
iqC‹rMós
 = 
ah
->
tŸÆIqC‹rMós
[
i
];

216 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

217 "Sèπög IQ CÆánd C‹ª˘i⁄ f‹ Chaö %d\n", 
i
);

219 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

221 
i
, 
ah
->
tŸÆIqC‹rMós
[i]);

223 
iqC‹rNeg
 = 0;

225 i‡(
iqC‹rMós
 > 0x80000000) {

226 
iqC‹rMós
 = (0xffffffff - iqCorrMeas) + 1;

227 
iqC‹rNeg
 = 1;

230 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_i = 0x%08x\n",

231 
i
, 
powîMósI
);

232 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %dÖwr_meas_q = 0x%08x\n",

233 
i
, 
powîMósQ
);

234 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "iqC‹rNeg i†0x%08x\n", 
iqC‹rNeg
);

236 
iCoffDíom
 = (
powîMósI
 / 2 + 
powîMósQ
 / 2) / 256;

237 
qCoffDíom
 = 
powîMósQ
 / 64;

239 i‡((
iCoffDíom
 !0Ë&& (
qCoffDíom
 != 0)) {

240 
iCoff
 = 
iqC‹rMós
 / 
iCoffDíom
;

241 
qCoff
 = 
powîMósI
 / 
qCoffDíom
 - 64;

242 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %d iCoff = 0x%08x\n",

243 
i
, 
iCoff
);

244 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Chn %d qCoff = 0x%08x\n",

245 
i
, 
qCoff
);

248 i‡(
iCoff
 >= 63)

249 
iCoff
 = 63;

250 i‡(
iCoff
 <= -63)

251 
iCoff
 = -63;

254 i‡(
iqC‹rNeg
 == 0x0)

255 
iCoff
 = -iCoff;

258 i‡(
qCoff
 >= 63)

259 
qCoff
 = 63;

260 i‡(
qCoff
 <= -63)

261 
qCoff
 = -63;

263 
iCoff
 = iCoff & 0x7f;

264 
qCoff
 = qCoff & 0x7f;

266 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

268 
i
, 
iCoff
, 
qCoff
);

269 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

271 
off£t_¨øy
[
i
],

272 
	`REG_READ
(
ah
, 
off£t_¨øy
[
i
]));

274 i‡(
	`AR_SREV_9565
(
ah
) &&

275 (
iCoff
 =63 || 
qCoff
 == 63 ||

276 
iCoff
 =-63 || 
qCoff
 == -63))

279 
	`REG_RMW_FIELD
(
ah
, 
off£t_¨øy
[
i
],

280 
AR_PHY_RX_IQCAL_CORR_IQCORR_Q_I_COFF
,

281 
iCoff
);

282 
	`REG_RMW_FIELD
(
ah
, 
off£t_¨øy
[
i
],

283 
AR_PHY_RX_IQCAL_CORR_IQCORR_Q_Q_COFF
,

284 
qCoff
);

285 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

287 
off£t_¨øy
[
i
],

288 
AR_PHY_RX_IQCAL_CORR_IQCORR_Q_I_COFF
,

289 
	`REG_READ
(
ah
, 
off£t_¨øy
[
i
]));

290 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

292 
off£t_¨øy
[
i
],

293 
AR_PHY_RX_IQCAL_CORR_IQCORR_Q_Q_COFF
,

294 
	`REG_READ
(
ah
, 
off£t_¨øy
[
i
]));

296 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

297 "IQ CÆánd C‹ª˘i⁄ d⁄êf‹ Chaö %d\n", 
i
);

301 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RX_IQCAL_CORR_B0
,

302 
AR_PHY_RX_IQCAL_CORR_IQCORR_ENABLE
);

303 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

305 (Ë(
AR_PHY_RX_IQCAL_CORR_B0
),

306 
AR_PHY_RX_IQCAL_CORR_IQCORR_ENABLE
,

307 
	`REG_READ
(
ah
, 
AR_PHY_RX_IQCAL_CORR_B0
));

308 
	}
}

310 c⁄° 
©h9k_≥rˇl_d©a
 
	giq_ˇl_sögÀ_ßm∂e
 = {

311 
IQ_MISMATCH_CAL
,

312 
MIN_CAL_SAMPLES
,

313 
PER_MAX_LOG_COUNT
,

314 
¨9003_hw_iqˇl_cﬁÀ˘
,

315 
¨9003_hw_iqˇlibøã


318 
	$¨9003_hw_öô_ˇl_£âögs
(
©h_hw
 *
ah
)

320 
ah
->
iq_ˇld©a
.
ˇlD©a
 = &
iq_ˇl_sögÀ_ßm∂e
;

322 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

323 
ah
->
íabÀd_ˇls
 |
TX_IQ_CAL
;

324 i‡(
	`AR_SREV_9485_OR_LATER
(
ah
Ë&& !
	`AR_SREV_9340
(ah))

325 
ah
->
íabÀd_ˇls
 |
TX_IQ_ON_AGC_CAL
;

328 
ah
->
suµ_ˇls
 = 
IQ_MISMATCH_CAL
;

329 
	}
}

331 
	#OFF_UPPER_LT
 24

	)

332 
	#OFF_LOWER_LT
 7

	)

334 
boﬁ
 
	$¨9003_hw_dy«mic_osdac_£À˘i⁄
(
©h_hw
 *
ah
,

335 
boﬁ
 
txiqˇl_d⁄e
)

337 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

338 
ch0_d⁄e
, 
osdac_ch0
, 
dc_off_ch0_i1
, 
dc_off_ch0_q1
, 
dc_off_ch0_i2
,

339 
dc_off_ch0_q2
, 
dc_off_ch0_i3
, 
dc_off_ch0_q3
;

340 
ch1_d⁄e
, 
osdac_ch1
, 
dc_off_ch1_i1
, 
dc_off_ch1_q1
, 
dc_off_ch1_i2
,

341 
dc_off_ch1_q2
, 
dc_off_ch1_i3
, 
dc_off_ch1_q3
;

342 
ch2_d⁄e
, 
osdac_ch2
, 
dc_off_ch2_i1
, 
dc_off_ch2_q1
, 
dc_off_ch2_i2
,

343 
dc_off_ch2_q2
, 
dc_off_ch2_i3
, 
dc_off_ch2_q3
;

344 
boﬁ
 
°©us
;

345 
u32
 
ãmp
, 
vÆ
;

350 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

351 
AR_PHY_AGC_CONTROL_OFFSET_CAL
);

352 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_0
,

353 
AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
);

354 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
,

355 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
Ë| 
AR_PHY_AGC_CONTROL_CAL
);

357 
°©us
 = 
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
,

358 
AR_PHY_AGC_CONTROL_CAL
,

359 0, 
AH_WAIT_TIMEOUT
);

360 i‡(!
°©us
) {

361 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

363  
Ál£
;

371 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

372 
AR_PHY_AGC_CONTROL_OFFSET_CAL
);

373 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
,

374 
AR_PHY_CL_CAL_ENABLE
);

375 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

376 
AR_PHY_AGC_CONTROL_FLTR_CAL
);

377 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

378 
AR_PHY_AGC_CONTROL_PKDET_CAL
);

380 
ch0_d⁄e
 = 0;

381 
ch1_d⁄e
 = 0;

382 
ch2_d⁄e
 = 0;

384 (
ch0_d⁄e
 =0Ë|| (
ch1_d⁄e
 =0Ë|| (
ch2_d⁄e
 == 0)) {

385 
osdac_ch0
 = (
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB1
) >> 30) & 0x3;

386 
osdac_ch1
 = (
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB1
) >> 30) & 0x3;

387 
osdac_ch2
 = (
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB1
) >> 30) & 0x3;

389 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

391 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
,

392 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
Ë| 
AR_PHY_AGC_CONTROL_CAL
);

394 
°©us
 = 
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
,

395 
AR_PHY_AGC_CONTROL_CAL
,

396 0, 
AH_WAIT_TIMEOUT
);

397 i‡(!
°©us
) {

398 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

400  
Ál£
;

403 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

408 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BB3
,

409 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB3
) & 0xfffffcff) | (1 << 8)));

410 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH1_BB3
,

411 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB3
) & 0xfffffcff) | (1 << 8)));

412 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH2_BB3
,

413 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB3
) & 0xfffffcff) | (1 << 8)));

415 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB3
);

416 
dc_off_ch0_i1
 = (
ãmp
 >> 26) & 0x1f;

417 
dc_off_ch0_q1
 = (
ãmp
 >> 21) & 0x1f;

419 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB3
);

420 
dc_off_ch1_i1
 = (
ãmp
 >> 26) & 0x1f;

421 
dc_off_ch1_q1
 = (
ãmp
 >> 21) & 0x1f;

423 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB3
);

424 
dc_off_ch2_i1
 = (
ãmp
 >> 26) & 0x1f;

425 
dc_off_ch2_q1
 = (
ãmp
 >> 21) & 0x1f;

430 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BB3
,

431 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB3
) & 0xfffffcff) | (2 << 8)));

432 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH1_BB3
,

433 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB3
) & 0xfffffcff) | (2 << 8)));

434 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH2_BB3
,

435 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB3
) & 0xfffffcff) | (2 << 8)));

437 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB3
);

438 
dc_off_ch0_i2
 = (
ãmp
 >> 26) & 0x1f;

439 
dc_off_ch0_q2
 = (
ãmp
 >> 21) & 0x1f;

441 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB3
);

442 
dc_off_ch1_i2
 = (
ãmp
 >> 26) & 0x1f;

443 
dc_off_ch1_q2
 = (
ãmp
 >> 21) & 0x1f;

445 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB3
);

446 
dc_off_ch2_i2
 = (
ãmp
 >> 26) & 0x1f;

447 
dc_off_ch2_q2
 = (
ãmp
 >> 21) & 0x1f;

452 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BB3
,

453 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB3
) & 0xfffffcff) | (3 << 8)));

454 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH1_BB3
,

455 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB3
) & 0xfffffcff) | (3 << 8)));

456 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH2_BB3
,

457 ((
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB3
) & 0xfffffcff) | (3 << 8)));

459 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB3
);

460 
dc_off_ch0_i3
 = (
ãmp
 >> 26) & 0x1f;

461 
dc_off_ch0_q3
 = (
ãmp
 >> 21) & 0x1f;

463 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB3
);

464 
dc_off_ch1_i3
 = (
ãmp
 >> 26) & 0x1f;

465 
dc_off_ch1_q3
 = (
ãmp
 >> 21) & 0x1f;

467 
ãmp
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB3
);

468 
dc_off_ch2_i3
 = (
ãmp
 >> 26) & 0x1f;

469 
dc_off_ch2_q3
 = (
ãmp
 >> 21) & 0x1f;

471 i‡((
dc_off_ch0_i1
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch0_i1 < 
OFF_LOWER_LT
) ||

472 (
dc_off_ch0_i2
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch0_i2 < 
OFF_LOWER_LT
) ||

473 (
dc_off_ch0_i3
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch0_i3 < 
OFF_LOWER_LT
) ||

474 (
dc_off_ch0_q1
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch0_q1 < 
OFF_LOWER_LT
) ||

475 (
dc_off_ch0_q2
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch0_q2 < 
OFF_LOWER_LT
) ||

476 (
dc_off_ch0_q3
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch0_q3 < 
OFF_LOWER_LT
)) {

477 i‡(
osdac_ch0
 == 3) {

478 
ch0_d⁄e
 = 1;

480 
osdac_ch0
++;

482 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BB1
) & 0x3fffffff;

483 
vÆ
 |(
osdac_ch0
 << 30);

484 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BB1
, 
vÆ
);

486 
ch0_d⁄e
 = 0;

489 
ch0_d⁄e
 = 1;

492 i‡((
dc_off_ch1_i1
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch1_i1 < 
OFF_LOWER_LT
) ||

493 (
dc_off_ch1_i2
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch1_i2 < 
OFF_LOWER_LT
) ||

494 (
dc_off_ch1_i3
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch1_i3 < 
OFF_LOWER_LT
) ||

495 (
dc_off_ch1_q1
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch1_q1 < 
OFF_LOWER_LT
) ||

496 (
dc_off_ch1_q2
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch1_q2 < 
OFF_LOWER_LT
) ||

497 (
dc_off_ch1_q3
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch1_q3 < 
OFF_LOWER_LT
)) {

498 i‡(
osdac_ch1
 == 3) {

499 
ch1_d⁄e
 = 1;

501 
osdac_ch1
++;

503 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH1_BB1
) & 0x3fffffff;

504 
vÆ
 |(
osdac_ch1
 << 30);

505 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH1_BB1
, 
vÆ
);

507 
ch1_d⁄e
 = 0;

510 
ch1_d⁄e
 = 1;

513 i‡((
dc_off_ch2_i1
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch2_i1 < 
OFF_LOWER_LT
) ||

514 (
dc_off_ch2_i2
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch2_i2 < 
OFF_LOWER_LT
) ||

515 (
dc_off_ch2_i3
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch2_i3 < 
OFF_LOWER_LT
) ||

516 (
dc_off_ch2_q1
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch2_q1 < 
OFF_LOWER_LT
) ||

517 (
dc_off_ch2_q2
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch2_q2 < 
OFF_LOWER_LT
) ||

518 (
dc_off_ch2_q3
 > 
OFF_UPPER_LT
Ë|| (dc_off_ch2_q3 < 
OFF_LOWER_LT
)) {

519 i‡(
osdac_ch2
 == 3) {

520 
ch2_d⁄e
 = 1;

522 
osdac_ch2
++;

524 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH2_BB1
) & 0x3fffffff;

525 
vÆ
 |(
osdac_ch2
 << 30);

526 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH2_BB1
, 
vÆ
);

528 
ch2_d⁄e
 = 0;

531 
ch2_d⁄e
 = 1;

535 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

536 
AR_PHY_AGC_CONTROL_OFFSET_CAL
);

537 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

543 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_0
,

544 
AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
);

546  
åue
;

547 
	}
}

552 
boﬁ
 
	$¨9003_hw_sﬁve_iq_ˇl
(
©h_hw
 *
ah
,

553 
s32
 
sö_2phi_1
,

554 
s32
 
cos_2phi_1
,

555 
s32
 
sö_2phi_2
,

556 
s32
 
cos_2phi_2
,

557 
s32
 
mag_a0_d0
,

558 
s32
 
phs_a0_d0
,

559 
s32
 
mag_a1_d0
,

560 
s32
 
phs_a1_d0
,

561 
s32
 
sﬁved_eq
[])

563 
s32
 
f1
 = 
cos_2phi_1
 - 
cos_2phi_2
,

564 
f3
 = 
sö_2phi_1
 - 
sö_2phi_2
,

565 
f2
;

566 
s32
 
mag_tx
, 
phs_tx
, 
mag_rx
, 
phs_rx
;

567 c⁄° 
s32
 
ªsu…_shi·
 = 1 << 15;

568 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

570 
f2
 = ((
f1
 >> 3Ë* (f1 >> 3Ë+ (
f3
 >> 3) * (f3 >> 3)) >> 9;

572 i‡(!
f2
) {

573 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Divide by 0\n");

574  
Ál£
;

578 
mag_tx
 = 
f1
 * (
mag_a0_d0
 - 
mag_a1_d0
Ë+ 
f3
 * (
phs_a0_d0
 - 
phs_a1_d0
);

580 
phs_tx
 = 
f3
 * (-
mag_a0_d0
 + 
mag_a1_d0
Ë+ 
f1
 * (
phs_a0_d0
 - 
phs_a1_d0
);

582 
mag_tx
 = (mag_tx / 
f2
);

583 
phs_tx
 = (phs_tx / 
f2
);

586 
mag_rx
 = 
mag_a0_d0
 - (
cos_2phi_1
 * 
mag_tx
 + 
sö_2phi_1
 * 
phs_tx
) /

587 
ªsu…_shi·
;

589 
phs_rx
 = 
phs_a0_d0
 + (
sö_2phi_1
 * 
mag_tx
 - 
cos_2phi_1
 * 
phs_tx
) /

590 
ªsu…_shi·
;

592 
sﬁved_eq
[0] = 
mag_tx
;

593 
sﬁved_eq
[1] = 
phs_tx
;

594 
sﬁved_eq
[2] = 
mag_rx
;

595 
sﬁved_eq
[3] = 
phs_rx
;

597  
åue
;

598 
	}
}

600 
s32
 
	$¨9003_hw_föd_mag_≠¥ox
(
©h_hw
 *
ah
, 
s32
 
ö_ª
, s32 
ö_im
)

602 
s32
 
abs_i
 = 
	`abs
(
ö_ª
),

603 
abs_q
 = 
	`abs
(
ö_im
),

604 
max_abs
, 
mö_abs
;

606 i‡(
abs_i
 > 
abs_q
) {

607 
max_abs
 = 
abs_i
;

608 
mö_abs
 = 
abs_q
;

610 
max_abs
 = 
abs_q
;

611 
mö_abs
 = 
abs_i
;

614  
max_abs
 - (max_ab†/ 32Ë+ (
mö_abs
 / 8) + (min_abs / 4);

615 
	}
}

617 
	#DELPT
 32

	)

619 
boﬁ
 
	$¨9003_hw_ˇlc_iq_c‹r
(
©h_hw
 *
ah
,

620 
s32
 
chaö_idx
,

621 c⁄° 
s32
 
iq_ªs
[],

622 
s32
 
iqc_c€ff
[])

624 
s32
 
i2_m_q2_a0_d0
, 
i2_p_q2_a0_d0
, 
iq_c‹r_a0_d0
,

625 
i2_m_q2_a0_d1
, 
i2_p_q2_a0_d1
, 
iq_c‹r_a0_d1
,

626 
i2_m_q2_a1_d0
, 
i2_p_q2_a1_d0
, 
iq_c‹r_a1_d0
,

627 
i2_m_q2_a1_d1
, 
i2_p_q2_a1_d1
, 
iq_c‹r_a1_d1
;

628 
s32
 
mag_a0_d0
, 
mag_a1_d0
, 
mag_a0_d1
, 
mag_a1_d1
,

629 
phs_a0_d0
, 
phs_a1_d0
, 
phs_a0_d1
, 
phs_a1_d1
,

630 
sö_2phi_1
, 
cos_2phi_1
,

631 
sö_2phi_2
, 
cos_2phi_2
;

632 
s32
 
mag_tx
, 
phs_tx
, 
mag_rx
, 
phs_rx
;

633 
s32
 
sﬁved_eq
[4], 
mag_c‹r_tx
, 
phs_c‹r_tx
, 
mag_c‹r_rx
, 
phs_c‹r_rx
,

634 
q_q_coff
, 
q_i_coff
;

635 c⁄° 
s32
 
ªs_sˇÀ
 = 1 << 15;

636 c⁄° 
s32
 
dñ±_shi·
 = 1 << 8;

637 
s32
 
mag1
, 
mag2
;

638 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

640 
i2_m_q2_a0_d0
 = 
iq_ªs
[0] & 0xfff;

641 
i2_p_q2_a0_d0
 = (
iq_ªs
[0] >> 12) & 0xfff;

642 
iq_c‹r_a0_d0
 = ((
iq_ªs
[0] >> 24) & 0xff) + ((iq_res[1] & 0xf) << 8);

644 i‡(
i2_m_q2_a0_d0
 > 0x800)

645 
i2_m_q2_a0_d0
 = -((0xfff - i2_m_q2_a0_d0) + 1);

647 i‡(
i2_p_q2_a0_d0
 > 0x800)

648 
i2_p_q2_a0_d0
 = -((0xfff - i2_p_q2_a0_d0) + 1);

650 i‡(
iq_c‹r_a0_d0
 > 0x800)

651 
iq_c‹r_a0_d0
 = -((0xfff - iq_corr_a0_d0) + 1);

653 
i2_m_q2_a0_d1
 = (
iq_ªs
[1] >> 4) & 0xfff;

654 
i2_p_q2_a0_d1
 = (
iq_ªs
[2] & 0xfff);

655 
iq_c‹r_a0_d1
 = (
iq_ªs
[2] >> 12) & 0xfff;

657 i‡(
i2_m_q2_a0_d1
 > 0x800)

658 
i2_m_q2_a0_d1
 = -((0xfff - i2_m_q2_a0_d1) + 1);

660 i‡(
iq_c‹r_a0_d1
 > 0x800)

661 
iq_c‹r_a0_d1
 = -((0xfff - iq_corr_a0_d1) + 1);

663 
i2_m_q2_a1_d0
 = ((
iq_ªs
[2] >> 24) & 0xff) + ((iq_res[3] & 0xf) << 8);

664 
i2_p_q2_a1_d0
 = (
iq_ªs
[3] >> 4) & 0xfff;

665 
iq_c‹r_a1_d0
 = 
iq_ªs
[4] & 0xfff;

667 i‡(
i2_m_q2_a1_d0
 > 0x800)

668 
i2_m_q2_a1_d0
 = -((0xfff - i2_m_q2_a1_d0) + 1);

670 i‡(
i2_p_q2_a1_d0
 > 0x800)

671 
i2_p_q2_a1_d0
 = -((0xfff - i2_p_q2_a1_d0) + 1);

673 i‡(
iq_c‹r_a1_d0
 > 0x800)

674 
iq_c‹r_a1_d0
 = -((0xfff - iq_corr_a1_d0) + 1);

676 
i2_m_q2_a1_d1
 = (
iq_ªs
[4] >> 12) & 0xfff;

677 
i2_p_q2_a1_d1
 = ((
iq_ªs
[4] >> 24) & 0xff) + ((iq_res[5] & 0xf) << 8);

678 
iq_c‹r_a1_d1
 = (
iq_ªs
[5] >> 4) & 0xfff;

680 i‡(
i2_m_q2_a1_d1
 > 0x800)

681 
i2_m_q2_a1_d1
 = -((0xfff - i2_m_q2_a1_d1) + 1);

683 i‡(
i2_p_q2_a1_d1
 > 0x800)

684 
i2_p_q2_a1_d1
 = -((0xfff - i2_p_q2_a1_d1) + 1);

686 i‡(
iq_c‹r_a1_d1
 > 0x800)

687 
iq_c‹r_a1_d1
 = -((0xfff - iq_corr_a1_d1) + 1);

689 i‡((
i2_p_q2_a0_d0
 =0Ë|| (
i2_p_q2_a0_d1
 == 0) ||

690 (
i2_p_q2_a1_d0
 =0Ë|| (
i2_p_q2_a1_d1
 == 0)) {

691 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

697 
i2_p_q2_a0_d0
, 
i2_p_q2_a0_d1
,

698 
i2_p_q2_a1_d0
, 
i2_p_q2_a1_d1
);

699  
Ál£
;

702 i‡((
i2_p_q2_a0_d0
 < 1024) || (i2_p_q2_a0_d0 > 2047) ||

703 (
i2_p_q2_a1_d0
 < 0Ë|| (
i2_p_q2_a1_d1
 < 0) ||

704 (
i2_p_q2_a0_d0
 <
i2_m_q2_a0_d0
) ||

705 (
i2_p_q2_a0_d0
 <
iq_c‹r_a0_d0
) ||

706 (
i2_p_q2_a0_d1
 <
i2_m_q2_a0_d1
) ||

707 (
i2_p_q2_a0_d1
 <
iq_c‹r_a0_d1
) ||

708 (
i2_p_q2_a1_d0
 <
i2_m_q2_a1_d0
) ||

709 (
i2_p_q2_a1_d0
 <
iq_c‹r_a1_d0
) ||

710 (
i2_p_q2_a1_d1
 <
i2_m_q2_a1_d1
) ||

711 (
i2_p_q2_a1_d1
 <
iq_c‹r_a1_d1
)) {

712  
Ál£
;

715 
mag_a0_d0
 = (
i2_m_q2_a0_d0
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a0_d0
;

716 
phs_a0_d0
 = (
iq_c‹r_a0_d0
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a0_d0
;

718 
mag_a0_d1
 = (
i2_m_q2_a0_d1
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a0_d1
;

719 
phs_a0_d1
 = (
iq_c‹r_a0_d1
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a0_d1
;

721 
mag_a1_d0
 = (
i2_m_q2_a1_d0
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a1_d0
;

722 
phs_a1_d0
 = (
iq_c‹r_a1_d0
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a1_d0
;

724 
mag_a1_d1
 = (
i2_m_q2_a1_d1
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a1_d1
;

725 
phs_a1_d1
 = (
iq_c‹r_a1_d1
 * 
ªs_sˇÀ
Ë/ 
i2_p_q2_a1_d1
;

728 
sö_2phi_1
 = (((
mag_a0_d0
 - 
mag_a0_d1
Ë* 
dñ±_shi·
Ë/ 
DELPT
);

730 
cos_2phi_1
 = (((
phs_a0_d1
 - 
phs_a0_d0
Ë* 
dñ±_shi·
Ë/ 
DELPT
);

732 
sö_2phi_2
 = (((
mag_a1_d0
 - 
mag_a1_d1
Ë* 
dñ±_shi·
Ë/ 
DELPT
);

734 
cos_2phi_2
 = (((
phs_a1_d1
 - 
phs_a1_d0
Ë* 
dñ±_shi·
Ë/ 
DELPT
);

740 
mag1
 = 
	`¨9003_hw_föd_mag_≠¥ox
(
ah
, 
cos_2phi_1
, 
sö_2phi_1
);

741 
mag2
 = 
	`¨9003_hw_föd_mag_≠¥ox
(
ah
, 
cos_2phi_2
, 
sö_2phi_2
);

743 i‡((
mag1
 =0Ë|| (
mag2
 == 0)) {

744 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Divide by 0: mag1=%d, mag2=%d\n",

745 
mag1
, 
mag2
);

746  
Ál£
;

750 
sö_2phi_1
 = (sö_2phi_1 * 
ªs_sˇÀ
 / 
mag1
);

751 
cos_2phi_1
 = (cos_2phi_1 * 
ªs_sˇÀ
 / 
mag1
);

752 
sö_2phi_2
 = (sö_2phi_2 * 
ªs_sˇÀ
 / 
mag2
);

753 
cos_2phi_2
 = (cos_2phi_2 * 
ªs_sˇÀ
 / 
mag2
);

756 i‡(!
	`¨9003_hw_sﬁve_iq_ˇl
(
ah
,

757 
sö_2phi_1
, 
cos_2phi_1
,

758 
sö_2phi_2
, 
cos_2phi_2
,

759 
mag_a0_d0
, 
phs_a0_d0
,

760 
mag_a1_d0
,

761 
phs_a1_d0
, 
sﬁved_eq
)) {

762 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

764  
Ál£
;

767 
mag_tx
 = 
sﬁved_eq
[0];

768 
phs_tx
 = 
sﬁved_eq
[1];

769 
mag_rx
 = 
sﬁved_eq
[2];

770 
phs_rx
 = 
sﬁved_eq
[3];

772 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

774 
chaö_idx
, 
mag_tx
/
ªs_sˇÀ
, 
phs_tx
/res_scale);

776 i‡(
ªs_sˇÀ
 =
mag_tx
) {

777 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

779 
mag_tx
, 
ªs_sˇÀ
);

780  
Ál£
;

784 
mag_c‹r_tx
 = (
mag_tx
 * 
ªs_sˇÀ
) / (res_scale - mag_tx);

785 
phs_c‹r_tx
 = -
phs_tx
;

787 
q_q_coff
 = (
mag_c‹r_tx
 * 128 / 
ªs_sˇÀ
);

788 
q_i_coff
 = (
phs_c‹r_tx
 * 256 / 
ªs_sˇÀ
);

790 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "tx chain %d: mag corr=%dÖhase corr=%d\n",

791 
chaö_idx
, 
q_q_coff
, 
q_i_coff
);

793 i‡(
q_i_coff
 < -63)

794 
q_i_coff
 = -63;

795 i‡(
q_i_coff
 > 63)

796 
q_i_coff
 = 63;

797 i‡(
q_q_coff
 < -63)

798 
q_q_coff
 = -63;

799 i‡(
q_q_coff
 > 63)

800 
q_q_coff
 = 63;

802 
iqc_c€ff
[0] = (
q_q_coff
 * 128Ë+ (0x7‡& 
q_i_coff
);

804 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "tx chain %d: iq corr coeff=%x\n",

805 
chaö_idx
, 
iqc_c€ff
[0]);

807 i‡(-
mag_rx
 =
ªs_sˇÀ
) {

808 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

810 
mag_rx
, 
ªs_sˇÀ
);

811  
Ál£
;

815 
mag_c‹r_rx
 = (-
mag_rx
 * 
ªs_sˇÀ
) / (res_scale + mag_rx);

816 
phs_c‹r_rx
 = -
phs_rx
;

818 
q_q_coff
 = (
mag_c‹r_rx
 * 128 / 
ªs_sˇÀ
);

819 
q_i_coff
 = (
phs_c‹r_rx
 * 256 / 
ªs_sˇÀ
);

821 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "rx chain %d: mag corr=%dÖhase corr=%d\n",

822 
chaö_idx
, 
q_q_coff
, 
q_i_coff
);

824 i‡(
q_i_coff
 < -63)

825 
q_i_coff
 = -63;

826 i‡(
q_i_coff
 > 63)

827 
q_i_coff
 = 63;

828 i‡(
q_q_coff
 < -63)

829 
q_q_coff
 = -63;

830 i‡(
q_q_coff
 > 63)

831 
q_q_coff
 = 63;

833 
iqc_c€ff
[1] = (
q_q_coff
 * 128Ë+ (0x7‡& 
q_i_coff
);

835 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "rx chain %d: iq corr coeff=%x\n",

836 
chaö_idx
, 
iqc_c€ff
[1]);

838  
åue
;

839 
	}
}

841 
	$¨9003_hw_dëe˘_ouéõr
(
mp_c€ff
[][
MAXIQCAL
],

842 
nmósuªmít
,

843 
max_dñè
)

845 
mp_max
 = -64, 
max_idx
 = 0;

846 
mp_mö
 = 63, 
mö_idx
 = 0;

847 
mp_avg
 = 0, 
i
, 
ouéõr_idx
 = 0, 
mp_cou¡
 = 0;

850 
i
 = 0; i < 
nmósuªmít
; i++) {

851 i‡(
mp_c€ff
[
i
][0] > 
mp_max
) {

852 
mp_max
 = 
mp_c€ff
[
i
][0];

853 
max_idx
 = 
i
;

854 } i‡(
mp_c€ff
[
i
][0] < 
mp_mö
) {

855 
mp_mö
 = 
mp_c€ff
[
i
][0];

856 
mö_idx
 = 
i
;

861 
i
 = 0; i < 
nmósuªmít
; i++) {

862 i‡((
	`abs
(
mp_c€ff
[
i
][0]Ë<ábs(
mp_max
)) ||

863 (
	`abs
(
mp_c€ff
[
i
][0]Ë<ábs(
mp_mö
))) {

864 
mp_avg
 +
mp_c€ff
[
i
][0];

865 
mp_cou¡
++;

873 i‡(
mp_cou¡
)

874 
mp_avg
 /
mp_cou¡
;

876 
mp_avg
 = 
mp_c€ff
[
nmósuªmít
 - 1][0];

879 i‡(
	`abs
(
mp_max
 - 
mp_mö
Ë> 
max_dñè
) {

880 i‡(
	`abs
(
mp_max
 - 
mp_avg
Ë>ábs(
mp_mö
 - mp_avg))

881 
ouéõr_idx
 = 
max_idx
;

883 
ouéõr_idx
 = 
mö_idx
;

885 
mp_c€ff
[
ouéõr_idx
][0] = 
mp_avg
;

887 
	}
}

889 
	$¨9003_hw_tx_iq_ˇl_ouéõr_dëe˘i⁄
(
©h_hw
 *
ah
,

890 
c€ff
 *coeff,

891 
boﬁ
 
is_ªußbÀ
)

893 
i
, 
im
, 
nmósuªmít
;

894 
magnôude
, 
pha£
;

895 
u32
 
tx_c‹r_c€ff
[
MAX_MEASUREMENT
][
AR9300_MAX_CHAINS
];

896 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

898 
	`mem£t
(
tx_c‹r_c€ff
, 0, (tx_corr_coeff));

899 
i
 = 0; i < 
MAX_MEASUREMENT
 / 2; i++) {

900 
tx_c‹r_c€ff
[
i
 * 2][0] =Åx_corr_coeff[(i * 2) + 1][0] =

901 
	`AR_PHY_TX_IQCAL_CORR_COEFF_B0
(
i
);

902 i‡(!
	`AR_SREV_9485
(
ah
)) {

903 
tx_c‹r_c€ff
[
i
 * 2][1] =

904 
tx_c‹r_c€ff
[(
i
 * 2) + 1][1] =

905 
	`AR_PHY_TX_IQCAL_CORR_COEFF_B1
(
i
);

907 
tx_c‹r_c€ff
[
i
 * 2][2] =

908 
tx_c‹r_c€ff
[(
i
 * 2) + 1][2] =

909 
	`AR_PHY_TX_IQCAL_CORR_COEFF_B2
(
i
);

914 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

915 i‡(!(
ah
->
txchaömask
 & (1 << 
i
)))

917 
nmósuªmít
 = 
	`REG_READ_FIELD
(
ah
,

918 
AR_PHY_TX_IQCAL_STATUS_B0
,

919 
AR_PHY_CALIBRATED_GAINS_0
);

921 i‡(
nmósuªmít
 > 
MAX_MEASUREMENT
)

922 
nmósuªmít
 = 
MAX_MEASUREMENT
;

927 i‡(!
	`AR_SREV_9550
(
ah
)) {

929 i‡(
nmósuªmít
 > 1) {

931 
	`¨9003_hw_dëe˘_ouéõr
(
c€ff
->
mag_c€ff
[
i
],

932 
nmósuªmít
,

933 
MAX_MAG_DELTA
);

936 
	`¨9003_hw_dëe˘_ouéõr
(
c€ff
->
phs_c€ff
[
i
],

937 
nmósuªmít
,

938 
MAX_PHS_DELTA
);

942 
im
 = 0; im < 
nmósuªmít
; im++) {

943 
magnôude
 = 
c€ff
->
mag_c€ff
[
i
][
im
][0];

944 
pha£
 = 
c€ff
->
phs_c€ff
[
i
][
im
][0];

946 
c€ff
->
iqc_c€ff
[0] =

947 (
pha£
 & 0x7fË| ((
magnôude
 & 0x7f) << 7);

949 i‡((
im
 % 2) == 0)

950 
	`REG_RMW_FIELD
(
ah
, 
tx_c‹r_c€ff
[
im
][
i
],

951 
AR_PHY_TX_IQCAL_CORR_COEFF_00_COEFF_TABLE
,

952 
c€ff
->
iqc_c€ff
[0]);

954 
	`REG_RMW_FIELD
(
ah
, 
tx_c‹r_c€ff
[
im
][
i
],

955 
AR_PHY_TX_IQCAL_CORR_COEFF_01_COEFF_TABLE
,

956 
c€ff
->
iqc_c€ff
[0]);

958 i‡(
ˇld©a
)

959 
ˇld©a
->
tx_c‹r_c€ff
[
im
][
i
] =

960 
c€ff
->
iqc_c€ff
[0];

962 i‡(
ˇld©a
)

963 
ˇld©a
->
num_mósuªs
[
i
] = 
nmósuªmít
;

966 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_3
,

967 
AR_PHY_TX_IQCAL_CONTROL_3_IQCORR_EN
, 0x1);

968 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RX_IQCAL_CORR_B0
,

969 
AR_PHY_RX_IQCAL_CORR_B0_LOOPBACK_IQCORR_EN
, 0x1);

971 i‡(
ˇld©a
) {

972 i‡(
is_ªußbÀ
)

973 
	`£t_bô
(
TXIQCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

975 
	`˛ór_bô
(
TXIQCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

979 
	}
}

981 
boﬁ
 
	$¨9003_hw_tx_iq_ˇl_run
(
©h_hw
 *
ah
)

983 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

984 
u8
 
tx_gaö_f‹˚d
;

986 
tx_gaö_f‹˚d
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

987 
AR_PHY_TXGAIN_FORCE
);

988 i‡(
tx_gaö_f‹˚d
)

989 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

990 
AR_PHY_TXGAIN_FORCE
, 0);

992 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_START
,

993 
AR_PHY_TX_IQCAL_START_DO_CAL
, 1);

995 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_TX_IQCAL_START
,

996 
AR_PHY_TX_IQCAL_START_DO_CAL
, 0,

997 
AH_WAIT_TIMEOUT
)) {

998 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Tx IQ Cal isÇot completed\n");

999  
Ál£
;

1001  
åue
;

1002 
	}
}

1004 
	$__¨955x_tx_iq_ˇl_s‹t
(
©h_hw
 *
ah
,

1005 
c€ff
 *coeff,

1006 
i
, 
nmósuªmít
)

1008 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1009 
im
, 
ix
, 
iy
, 
ãmp
;

1011 
im
 = 0; im < 
nmósuªmít
; im++) {

1012 
ix
 = 0; ix < 
MAXIQCAL
 - 1; ix++) {

1013 
iy
 = 
ix
 + 1; iy <
MAXIQCAL
 - 1; iy++) {

1014 i‡(
c€ff
->
mag_c€ff
[
i
][
im
][
iy
] <

1015 
c€ff
->
mag_c€ff
[
i
][
im
][
ix
]) {

1016 
ãmp
 = 
c€ff
->
mag_c€ff
[
i
][
im
][
ix
];

1017 
c€ff
->
mag_c€ff
[
i
][
im
][
ix
] =

1018 
c€ff
->
mag_c€ff
[
i
][
im
][
iy
];

1019 
c€ff
->
mag_c€ff
[
i
][
im
][
iy
] = 
ãmp
;

1021 i‡(
c€ff
->
phs_c€ff
[
i
][
im
][
iy
] <

1022 
c€ff
->
phs_c€ff
[
i
][
im
][
ix
]) {

1023 
ãmp
 = 
c€ff
->
phs_c€ff
[
i
][
im
][
ix
];

1024 
c€ff
->
phs_c€ff
[
i
][
im
][
ix
] =

1025 
c€ff
->
phs_c€ff
[
i
][
im
][
iy
];

1026 
c€ff
->
phs_c€ff
[
i
][
im
][
iy
] = 
ãmp
;

1030 
c€ff
->
mag_c€ff
[
i
][
im
][0] = c€ff->mag_c€ff[i][im][
MAXIQCAL
 / 2];

1031 
c€ff
->
phs_c€ff
[
i
][
im
][0] = c€ff->phs_c€ff[i][im][
MAXIQCAL
 / 2];

1033 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1035 
i
, 
im
,

1036 
c€ff
->
mag_c€ff
[
i
][
im
][0],

1037 
c€ff
->
phs_c€ff
[
i
][
im
][0]);

1039 
	}
}

1041 
boﬁ
 
	$¨955x_tx_iq_ˇl_medün
(
©h_hw
 *
ah
,

1042 
c€ff
 *coeff,

1043 
iqˇl_idx
,

1044 
nmósuªmít
)

1046 
i
;

1048 i‡((
iqˇl_idx
 + 1Ë!
MAXIQCAL
)

1049  
Ál£
;

1051 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1052 
	`__¨955x_tx_iq_ˇl_s‹t
(
ah
, 
c€ff
, 
i
, 
nmósuªmít
);

1055  
åue
;

1056 
	}
}

1058 
	$¨9003_hw_tx_iq_ˇl_po°_¥oc
(
©h_hw
 *
ah
,

1059 
iqˇl_idx
,

1060 
boﬁ
 
is_ªußbÀ
)

1062 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1063 c⁄° 
u32
 
txiqˇl_°©us
[
AR9300_MAX_CHAINS
] = {

1064 
AR_PHY_TX_IQCAL_STATUS_B0
,

1065 
AR_PHY_TX_IQCAL_STATUS_B1
,

1066 
AR_PHY_TX_IQCAL_STATUS_B2
,

1068 c⁄° 
u_öt32_t
 
ch™_öfo_èb
[] = {

1069 
AR_PHY_CHAN_INFO_TAB_0
,

1070 
AR_PHY_CHAN_INFO_TAB_1
,

1071 
AR_PHY_CHAN_INFO_TAB_2
,

1073 
c€ff
 coeff;

1074 
s32
 
iq_ªs
[6];

1075 
i
, 
im
, 
j
;

1076 
nmósuªmít
 = 0;

1077 
boﬁ
 
ouéõr_dëe˘
 = 
åue
;

1079 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1080 i‡(!(
ah
->
txchaömask
 & (1 << 
i
)))

1083 
nmósuªmít
 = 
	`REG_READ_FIELD
(
ah
,

1084 
AR_PHY_TX_IQCAL_STATUS_B0
,

1085 
AR_PHY_CALIBRATED_GAINS_0
);

1086 i‡(
nmósuªmít
 > 
MAX_MEASUREMENT
)

1087 
nmósuªmít
 = 
MAX_MEASUREMENT
;

1089 
im
 = 0; im < 
nmósuªmít
; im++) {

1090 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1091 "Doög Tx IQ CÆ f‹ chaö %d\n", 
i
);

1093 i‡(
	`REG_READ
(
ah
, 
txiqˇl_°©us
[
i
]) &

1094 
AR_PHY_TX_IQCAL_STATUS_FAILED
) {

1095 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1096 "Tx IQ CÆ faûed f‹ chaö %d\n", 
i
);

1097 
tx_iqˇl_Áû
;

1100 
j
 = 0; j < 3; j++) {

1101 
u32
 
idx
 = 2 * 
j
, 
off£t
 = 4 * (3 * 
im
 + j);

1103 
	`REG_RMW_FIELD
(
ah
,

1104 
AR_PHY_CHAN_INFO_MEMORY
,

1105 
AR_PHY_CHAN_INFO_TAB_S2_READ
,

1109 
iq_ªs
[
idx
] = 
	`REG_READ
(
ah
,

1110 
ch™_öfo_èb
[
i
] +

1111 
off£t
);

1113 
	`REG_RMW_FIELD
(
ah
,

1114 
AR_PHY_CHAN_INFO_MEMORY
,

1115 
AR_PHY_CHAN_INFO_TAB_S2_READ
,

1119 
iq_ªs
[
idx
 + 1] = 0xfff‡& 
	`REG_READ
(
ah
,

1120 
ch™_öfo_èb
[
i
] + 
off£t
);

1122 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1124 
idx
, 
iq_ªs
[idx], idx + 1,

1125 
iq_ªs
[
idx
 + 1]);

1128 i‡(!
	`¨9003_hw_ˇlc_iq_c‹r
(
ah
, 
i
, 
iq_ªs
,

1129 
c€ff
.
iqc_c€ff
)) {

1130 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1132 
tx_iqˇl_Áû
;

1135 
c€ff
.
phs_c€ff
[
i
][
im
][
iqˇl_idx
] =

1136 
c€ff
.
iqc_c€ff
[0] & 0x7f;

1137 
c€ff
.
mag_c€ff
[
i
][
im
][
iqˇl_idx
] =

1138 (
c€ff
.
iqc_c€ff
[0] >> 7) & 0x7f;

1140 i‡(
c€ff
.
mag_c€ff
[
i
][
im
][
iqˇl_idx
] > 63)

1141 
c€ff
.
mag_c€ff
[
i
][
im
][
iqˇl_idx
] -= 128;

1142 i‡(
c€ff
.
phs_c€ff
[
i
][
im
][
iqˇl_idx
] > 63)

1143 
c€ff
.
phs_c€ff
[
i
][
im
][
iqˇl_idx
] -= 128;

1147 i‡(
	`AR_SREV_9550
(
ah
))

1148 
ouéõr_dëe˘
 = 
	`¨955x_tx_iq_ˇl_medün
(
ah
, &
c€ff
,

1149 
iqˇl_idx
, 
nmósuªmít
);

1150 i‡(
ouéõr_dëe˘
)

1151 
	`¨9003_hw_tx_iq_ˇl_ouéõr_dëe˘i⁄
(
ah
, &
c€ff
, 
is_ªußbÀ
);

1155 
tx_iqˇl_Áû
:

1156 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Tx IQ Cal failed\n");

1158 
	}
}

1160 
	$¨9003_hw_tx_iq_ˇl_ªlﬂd
(
©h_hw
 *
ah
)

1162 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

1163 
u32
 
tx_c‹r_c€ff
[
MAX_MEASUREMENT
][
AR9300_MAX_CHAINS
];

1164 
i
, 
im
;

1166 
	`mem£t
(
tx_c‹r_c€ff
, 0, (tx_corr_coeff));

1167 
i
 = 0; i < 
MAX_MEASUREMENT
 / 2; i++) {

1168 
tx_c‹r_c€ff
[
i
 * 2][0] =Åx_corr_coeff[(i * 2) + 1][0] =

1169 
	`AR_PHY_TX_IQCAL_CORR_COEFF_B0
(
i
);

1170 i‡(!
	`AR_SREV_9485
(
ah
)) {

1171 
tx_c‹r_c€ff
[
i
 * 2][1] =

1172 
tx_c‹r_c€ff
[(
i
 * 2) + 1][1] =

1173 
	`AR_PHY_TX_IQCAL_CORR_COEFF_B1
(
i
);

1175 
tx_c‹r_c€ff
[
i
 * 2][2] =

1176 
tx_c‹r_c€ff
[(
i
 * 2) + 1][2] =

1177 
	`AR_PHY_TX_IQCAL_CORR_COEFF_B2
(
i
);

1181 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1182 i‡(!(
ah
->
txchaömask
 & (1 << 
i
)))

1185 
im
 = 0; im < 
ˇld©a
->
num_mósuªs
[
i
]; im++) {

1186 i‡((
im
 % 2) == 0)

1187 
	`REG_RMW_FIELD
(
ah
, 
tx_c‹r_c€ff
[
im
][
i
],

1188 
AR_PHY_TX_IQCAL_CORR_COEFF_00_COEFF_TABLE
,

1189 
ˇld©a
->
tx_c‹r_c€ff
[
im
][
i
]);

1191 
	`REG_RMW_FIELD
(
ah
, 
tx_c‹r_c€ff
[
im
][
i
],

1192 
AR_PHY_TX_IQCAL_CORR_COEFF_01_COEFF_TABLE
,

1193 
ˇld©a
->
tx_c‹r_c€ff
[
im
][
i
]);

1197 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_3
,

1198 
AR_PHY_TX_IQCAL_CONTROL_3_IQCORR_EN
, 0x1);

1199 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RX_IQCAL_CORR_B0
,

1200 
AR_PHY_RX_IQCAL_CORR_B0_LOOPBACK_IQCORR_EN
, 0x1);

1201 
	}
}

1203 
	$¨9003_hw_m™uÆ_≥ak_ˇl
(
©h_hw
 *
ah
, 
u8
 
chaö
, 
boﬁ
 
is_2g
)

1205 
off£t
[8] = {0}, 
tŸÆ
 = 0, 
ã°
;

1206 
agc_out
, 
i
, 
≥ak_dëe˘_thªshﬁd
;

1208 i‡(
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9531
(ah))

1209 
≥ak_dëe˘_thªshﬁd
 = 8;

1211 
≥ak_dëe˘_thªshﬁd
 = 0;

1216 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_GAINSTAGES
(
chaö
),

1217 
AR_PHY_65NM_RXRF_GAINSTAGES_RX_OVERRIDE
, 0x1);

1218 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_GAINSTAGES
(
chaö
),

1219 
AR_PHY_65NM_RXRF_GAINSTAGES_LNAON_CALDC
, 0x0);

1221 i‡(
	`AR_SREV_9003_PCOEM
(
ah
Ë|| 
	`AR_SREV_9330_11
(ah)) {

1222 i‡(
is_2g
)

1223 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_GAINSTAGES
(
chaö
),

1224 
AR_PHY_65NM_RXRF_GAINSTAGES_LNA2G_GAIN_OVR
, 0x0);

1226 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_GAINSTAGES
(
chaö
),

1227 
AR_PHY_65NM_RXRF_GAINSTAGES_LNA5G_GAIN_OVR
, 0x0);

1233 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXTX2
(
chaö
),

1234 
AR_PHY_65NM_RXTX2_RXON_OVR
, 0x1);

1235 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXTX2
(
chaö
),

1236 
AR_PHY_65NM_RXTX2_RXON
, 0x0);

1241 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1242 
AR_PHY_65NM_RXRF_AGC_AGC_OVERRIDE
, 0x1);

1243 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1244 
AR_PHY_65NM_RXRF_AGC_AGC_ON_OVR
, 0x1);

1245 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1246 
AR_PHY_65NM_RXRF_AGC_AGC_CAL_OVR
, 0x1);

1248 i‡(
	`AR_SREV_9330_11
(
ah
))

1249 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1250 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
, 0x0);

1252 i‡(
	`AR_SREV_9003_PCOEM
(
ah
Ë|| 
	`AR_SREV_9550
◊hË|| 
	`AR_SREV_9531
(ah) ||

1253 
	`AR_SREV_9561
(
ah
)) {

1254 i‡(
is_2g
)

1255 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1256 
AR_PHY_65NM_RXRF_AGC_AGC2G_DBDAC_OVR
,

1257 
≥ak_dëe˘_thªshﬁd
);

1259 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1260 
AR_PHY_65NM_RXRF_AGC_AGC5G_DBDAC_OVR
,

1261 
≥ak_dëe˘_thªshﬁd
);

1264 
i
 = 6; i > 0; i--) {

1265 
off£t
[
i
] = 
	`BIT
(i - 1);

1266 
ã°
 = 
tŸÆ
 + 
off£t
[
i
];

1268 i‡(
is_2g
)

1269 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1270 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
,

1271 
ã°
);

1273 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1274 
AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
,

1275 
ã°
);

1276 
	`udñay
(100);

1277 
agc_out
 = 
	`REG_READ_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1278 
AR_PHY_65NM_RXRF_AGC_AGC_OUT
);

1279 
off£t
[
i
] = (
agc_out
) ? 0 : 1;

1280 
tŸÆ
 +(
off£t
[
i
] << (i - 1));

1283 i‡(
is_2g
)

1284 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1285 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
, 
tŸÆ
);

1287 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1288 
AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
, 
tŸÆ
);

1293 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_GAINSTAGES
(
chaö
),

1294 
AR_PHY_65NM_RXRF_GAINSTAGES_RX_OVERRIDE
, 0);

1298 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXTX2
(
chaö
),

1299 
AR_PHY_65NM_RXTX2_RXON_OVR
, 0);

1303 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

1304 
AR_PHY_65NM_RXRF_AGC_AGC_CAL_OVR
, 0);

1305 
	}
}

1307 
	$¨9003_hw_do_pc€m_m™uÆ_≥ak_ˇl
(
©h_hw
 *
ah
,

1308 
©h9k_ch™√l
 *
ch™
,

1309 
boﬁ
 
run_πt_ˇl
)

1311 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

1312 
i
;

1314 i‡(!
	`AR_SREV_9462
(
ah
Ë&& !
	`AR_SREV_9565
◊hË&& !
	`AR_SREV_9485
(ah))

1317 i‡((
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_RTT
Ë&& !
run_πt_ˇl
)

1320 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1321 i‡(!(
ah
->
rxchaömask
 & (1 << 
i
)))

1323 
	`¨9003_hw_m™uÆ_≥ak_ˇl
(
ah
, 
i
, 
	`IS_CHAN_2GHZ
(
ch™
));

1326 i‡(
ˇld©a
)

1327 
	`£t_bô
(
SW_PKDET_DONE
, &
ˇld©a
->
ˇl_Êags
);

1329 i‡((
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_RTT
Ë&& 
ˇld©a
) {

1330 i‡(
	`IS_CHAN_2GHZ
(
ch™
)){

1331 
ˇld©a
->
ˇldac
[0] = 
	`REG_READ_FIELD
(
ah
,

1332 
	`AR_PHY_65NM_RXRF_AGC
(0),

1333 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
);

1334 
ˇld©a
->
ˇldac
[1] = 
	`REG_READ_FIELD
(
ah
,

1335 
	`AR_PHY_65NM_RXRF_AGC
(1),

1336 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
);

1338 
ˇld©a
->
ˇldac
[0] = 
	`REG_READ_FIELD
(
ah
,

1339 
	`AR_PHY_65NM_RXRF_AGC
(0),

1340 
AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
);

1341 
ˇld©a
->
ˇldac
[1] = 
	`REG_READ_FIELD
(
ah
,

1342 
	`AR_PHY_65NM_RXRF_AGC
(1),

1343 
AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
);

1346 
	}
}

1348 
	$¨9003_hw_˛_ˇl_po°_¥oc
(
©h_hw
 *
ah
, 
boﬁ
 
is_ªußbÀ
)

1350 
u32
 
˛_idx
[
AR9300_MAX_CHAINS
] = { 
AR_PHY_CL_TAB_0
,

1351 
AR_PHY_CL_TAB_1
,

1352 
AR_PHY_CL_TAB_2
 };

1353 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

1354 
boﬁ
 
tx˛ˇl_d⁄e
 = 
Ál£
;

1355 
i
, 
j
;

1357 i‡(!
ˇld©a
 || !(
ah
->
íabÀd_ˇls
 & 
TX_CL_CAL
))

1360 
tx˛ˇl_d⁄e
 = !!(
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
) &

1361 
AR_PHY_AGC_CONTROL_CLC_SUCCESS
);

1363 i‡(
	`ã°_bô
(
TXCLCAL_DONE
, &
ˇld©a
->
ˇl_Êags
)) {

1364 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1365 i‡(!(
ah
->
txchaömask
 & (1 << 
i
)))

1367 
j
 = 0; j < 
MAX_CL_TAB_ENTRY
; j++)

1368 
	`REG_WRITE
(
ah
, 
	`CL_TAB_ENTRY
(
˛_idx
[
i
]),

1369 
ˇld©a
->
tx_˛ˇl
[
i
][
j
]);

1371 } i‡(
is_ªußbÀ
 && 
tx˛ˇl_d⁄e
) {

1372 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1373 i‡(!(
ah
->
txchaömask
 & (1 << 
i
)))

1375 
j
 = 0; j < 
MAX_CL_TAB_ENTRY
; j++)

1376 
ˇld©a
->
tx_˛ˇl
[
i
][
j
] =

1377 
	`REG_READ
(
ah
, 
	`CL_TAB_ENTRY
(
˛_idx
[
i
]));

1379 
	`£t_bô
(
TXCLCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

1381 
	}
}

1383 
boﬁ
 
	$¨9003_hw_öô_ˇl_pc€m
(
©h_hw
 *
ah
,

1384 
©h9k_ch™√l
 *
ch™
)

1386 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1387 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

1388 
boﬁ
 
txiqˇl_d⁄e
 = 
Ál£
;

1389 
boﬁ
 
is_ªußbÀ
 = 
åue
, 
°©us
 =Årue;

1390 
boﬁ
 
run_πt_ˇl
 = 
Ál£
, 
run_agc_ˇl
;

1391 
boﬁ
 
πt
 = !!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_RTT
);

1392 
u32
 
rx_dñay
 = 0;

1393 
u32
 
agc_˘æ
 = 0, 
agc_suµ_ˇls
 = 
AR_PHY_AGC_CONTROL_OFFSET_CAL
 |

1394 
AR_PHY_AGC_CONTROL_FLTR_CAL
 |

1395 
AR_PHY_AGC_CONTROL_PKDET_CAL
;

1398 
	`¨9003_hw_£t_chaö_masks
(
ah
,áh->
ˇps
.
rx_chaömask
,áh->ˇps.
tx_chaömask
);

1400 i‡(
πt
) {

1401 i‡(!
	`¨9003_hw_πt_ª°‹e
(
ah
, 
ch™
))

1402 
run_πt_ˇl
 = 
åue
;

1404 i‡(
run_πt_ˇl
)

1405 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "RTT calibrationÅo be done\n");

1408 
run_agc_ˇl
 = 
run_πt_ˇl
;

1410 i‡(
run_πt_ˇl
) {

1411 
	`¨9003_hw_πt_íabÀ
(
ah
);

1412 
	`¨9003_hw_πt_£t_mask
(
ah
, 0x00);

1413 
	`¨9003_hw_πt_˛ór_hi°
(
ah
);

1416 i‡(
πt
) {

1417 i‡(!
run_πt_ˇl
) {

1418 
agc_˘æ
 = 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
);

1419 
agc_suµ_ˇls
 &
agc_˘æ
;

1420 
agc_˘æ
 &~(
AR_PHY_AGC_CONTROL_OFFSET_CAL
 |

1421 
AR_PHY_AGC_CONTROL_FLTR_CAL
 |

1422 
AR_PHY_AGC_CONTROL_PKDET_CAL
);

1423 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
, 
agc_˘æ
);

1425 i‡(
ah
->
ah_Êags
 & 
AH_FASTCC
)

1426 
run_agc_ˇl
 = 
åue
;

1430 i‡(
ah
->
íabÀd_ˇls
 & 
TX_CL_CAL
) {

1431 i‡(
ˇld©a
 && 
	`ã°_bô
(
TXCLCAL_DONE
, &ˇld©a->
ˇl_Êags
))

1432 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
,

1433 
AR_PHY_CL_CAL_ENABLE
);

1435 
	`REG_SET_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
,

1436 
AR_PHY_CL_CAL_ENABLE
);

1437 
run_agc_ˇl
 = 
åue
;

1441 i‡((
	`IS_CHAN_HALF_RATE
(
ch™
Ë|| 
	`IS_CHAN_QUARTER_RATE
(chan)) ||

1442 !(
ah
->
íabÀd_ˇls
 & 
TX_IQ_CAL
))

1443 
skù_tx_iqˇl
;

1446 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_1
,

1447 
AR_PHY_TX_IQCAL_CONTROL_1_IQCORR_I_Q_COFF_DELPT
,

1448 
DELPT
);

1454 i‡(
ah
->
íabÀd_ˇls
 & 
TX_IQ_ON_AGC_CAL
) {

1455 i‡(
ˇld©a
 && !
	`ã°_bô
(
TXIQCAL_DONE
, &ˇld©a->
ˇl_Êags
))

1456 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_0
,

1457 
AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
);

1459 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_0
,

1460 
AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
);

1461 
txiqˇl_d⁄e
 = 
run_agc_ˇl
 = 
åue
;

1464 
skù_tx_iqˇl
:

1465 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
Ë&& 
	`IS_CHAN_2GHZ
(
ch™
Ë&& 
run_agc_ˇl
)

1466 
	`¨9003_mci_öô_ˇl_ªq
(
ah
, &
is_ªußbÀ
);

1468 i‡(
	`REG_READ
(
ah
, 
AR_PHY_CL_CAL_CTL
Ë& 
AR_PHY_CL_CAL_ENABLE
) {

1469 
rx_dñay
 = 
	`REG_READ
(
ah
, 
AR_PHY_RX_DELAY
);

1471 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_DIS
);

1472 
	`udñay
(5);

1473 
	`REG_WRITE
(
ah
, 
AR_PHY_RX_DELAY
, 
AR_PHY_RX_DELAY_DELAY
);

1474 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

1477 i‡(
run_agc_ˇl
 || !(
ah
->
ah_Êags
 & 
AH_FASTCC
)) {

1479 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
,

1480 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
) |

1481 
AR_PHY_AGC_CONTROL_CAL
);

1484 
°©us
 = 
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
,

1485 
AR_PHY_AGC_CONTROL_CAL
,

1486 0, 
AH_WAIT_TIMEOUT
);

1488 
	`¨9003_hw_do_pc€m_m™uÆ_≥ak_ˇl
(
ah
, 
ch™
, 
run_πt_ˇl
);

1491 i‡(
	`REG_READ
(
ah
, 
AR_PHY_CL_CAL_CTL
Ë& 
AR_PHY_CL_CAL_ENABLE
) {

1492 
	`REG_WRITE
(
ah
, 
AR_PHY_RX_DELAY
, 
rx_dñay
);

1493 
	`udñay
(5);

1496 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
Ë&& 
	`IS_CHAN_2GHZ
(
ch™
Ë&& 
run_agc_ˇl
)

1497 
	`¨9003_mci_öô_ˇl_d⁄e
(
ah
);

1499 i‡(
πt
 && !
run_πt_ˇl
) {

1500 
agc_˘æ
 |
agc_suµ_ˇls
;

1501 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
, 
agc_˘æ
);

1504 i‡(!
°©us
) {

1505 i‡(
run_πt_ˇl
)

1506 
	`¨9003_hw_πt_dißbÀ
(
ah
);

1508 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1510 
AH_WAIT_TIMEOUT
 / 1000);

1511  
Ál£
;

1514 i‡(
txiqˇl_d⁄e
)

1515 
	`¨9003_hw_tx_iq_ˇl_po°_¥oc
(
ah
, 0, 
is_ªußbÀ
);

1516 i‡(
ˇld©a
 && 
	`ã°_bô
(
TXIQCAL_DONE
, &ˇld©a->
ˇl_Êags
))

1517 
	`¨9003_hw_tx_iq_ˇl_ªlﬂd
(
ah
);

1519 
	`¨9003_hw_˛_ˇl_po°_¥oc
(
ah
, 
is_ªußbÀ
);

1521 i‡(
run_πt_ˇl
 && 
ˇld©a
) {

1522 i‡(
is_ªußbÀ
) {

1523 i‡(!
	`©h9k_hw_rfbus_ªq
(
ah
)) {

1524 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

1527 
	`¨9003_hw_πt_fûl_hi°
(
ah
);

1529 i‡(
	`ã°_bô
(
SW_PKDET_DONE
, &
ˇld©a
->
ˇl_Êags
))

1530 
	`¨9003_hw_πt_lﬂd_hi°
(
ah
);

1533 
	`©h9k_hw_rfbus_d⁄e
(
ah
);

1536 
	`¨9003_hw_πt_dißbÀ
(
ah
);

1540 
	`¨9003_hw_£t_chaö_masks
(
ah
,áh->
rxchaömask
,áh->
txchaömask
);

1543 
ah
->
ˇl_li°
 =áh->
ˇl_li°_œ°
 =áh->
ˇl_li°_cuº
 = 
NULL
;

1545 
	`INIT_CAL
(&
ah
->
iq_ˇld©a
);

1546 
	`INSERT_CAL
(
ah
, &ah->
iq_ˇld©a
);

1547 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "enabling IQ Calibration\n");

1550 
ah
->
ˇl_li°_cuº
 =áh->
ˇl_li°
;

1552 i‡(
ah
->
ˇl_li°_cuº
)

1553 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
,áh->
ˇl_li°_cuº
);

1555 i‡(
ˇld©a
)

1556 
ˇld©a
->
CÆVÆid
 = 0;

1558  
åue
;

1559 
	}
}

1561 
boﬁ
 
	$do_¨9003_agc_ˇl
(
©h_hw
 *
ah
)

1563 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1564 
boﬁ
 
°©us
;

1566 
	`REG_WRITE
(
ah
, 
AR_PHY_AGC_CONTROL
,

1567 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
) |

1568 
AR_PHY_AGC_CONTROL_CAL
);

1570 
°©us
 = 
	`©h9k_hw_waô
(
ah
, 
AR_PHY_AGC_CONTROL
,

1571 
AR_PHY_AGC_CONTROL_CAL
,

1572 0, 
AH_WAIT_TIMEOUT
);

1573 i‡(!
°©us
) {

1574 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

1577 
AH_WAIT_TIMEOUT
 / 1000);

1578  
Ál£
;

1581  
åue
;

1582 
	}
}

1584 
boﬁ
 
	$¨9003_hw_öô_ˇl_soc
(
©h_hw
 *
ah
,

1585 
©h9k_ch™√l
 *
ch™
)

1587 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1588 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

1589 
boﬁ
 
txiqˇl_d⁄e
 = 
Ál£
;

1590 
boﬁ
 
°©us
 = 
åue
;

1591 
boﬁ
 
run_agc_ˇl
 = 
Ál£
, 
£p_iq_ˇl
 = false;

1592 
i
 = 0;

1595 
	`¨9003_hw_£t_chaö_masks
(
ah
,áh->
ˇps
.
rx_chaömask
,áh->ˇps.
tx_chaömask
);

1597 i‡(
ah
->
íabÀd_ˇls
 & 
TX_CL_CAL
) {

1598 
	`REG_SET_BIT
(
ah
, 
AR_PHY_CL_CAL_CTL
, 
AR_PHY_CL_CAL_ENABLE
);

1599 
run_agc_ˇl
 = 
åue
;

1602 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
Ë|| 
	`IS_CHAN_QUARTER_RATE
(chan))

1603 
skù_tx_iqˇl
;

1606 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_1
,

1607 
AR_PHY_TX_IQCAL_CONTROL_1_IQCORR_I_Q_COFF_DELPT
,

1608 
DELPT
);

1614 i‡(
ah
->
íabÀd_ˇls
 & 
TX_IQ_ON_AGC_CAL
) {

1615 i‡(
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_0
,

1616 
AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
)) {

1617 
txiqˇl_d⁄e
 = 
åue
;

1619 
txiqˇl_d⁄e
 = 
Ál£
;

1621 
run_agc_ˇl
 = 
åue
;

1623 
£p_iq_ˇl
 = 
åue
;

1624 
run_agc_ˇl
 = 
åue
;

1630 i‡(
£p_iq_ˇl
) {

1631 
txiqˇl_d⁄e
 = 
	`¨9003_hw_tx_iq_ˇl_run
(
ah
);

1632 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_DIS
);

1633 
	`udñay
(5);

1634 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

1637 i‡(
	`AR_SREV_9550
(
ah
Ë&& 
	`IS_CHAN_2GHZ
(
ch™
)) {

1638 i‡(!
	`¨9003_hw_dy«mic_osdac_£À˘i⁄
(
ah
, 
txiqˇl_d⁄e
))

1639  
Ál£
;

1642 
skù_tx_iqˇl
:

1643 i‡(
run_agc_ˇl
 || !(
ah
->
ah_Êags
 & 
AH_FASTCC
)) {

1644 i‡(
	`AR_SREV_9330_11
(
ah
Ë|| 
	`AR_SREV_9531
◊hË|| 
	`AR_SREV_9550
(ah) ||

1645 
	`AR_SREV_9561
(
ah
)) {

1646 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1647 i‡(!(
ah
->
rxchaömask
 & (1 << 
i
)))

1649 
	`¨9003_hw_m™uÆ_≥ak_ˇl
(
ah
, 
i
,

1650 
	`IS_CHAN_2GHZ
(
ch™
));

1662 i‡(!
	`AR_SREV_9550
(
ah
)) {

1663 
°©us
 = 
	`do_¨9003_agc_ˇl
(
ah
);

1664 i‡(!
°©us
)

1665  
Ál£
;

1667 i‡(
txiqˇl_d⁄e
)

1668 
	`¨9003_hw_tx_iq_ˇl_po°_¥oc
(
ah
, 0, 
Ál£
);

1670 i‡(!
txiqˇl_d⁄e
) {

1671 
°©us
 = 
	`do_¨9003_agc_ˇl
(
ah
);

1672 i‡(!
°©us
)

1673  
Ál£
;

1675 
i
 = 0; i < 
MAXIQCAL
; i++) {

1676 
°©us
 = 
	`do_¨9003_agc_ˇl
(
ah
);

1677 i‡(!
°©us
)

1678  
Ál£
;

1679 
	`¨9003_hw_tx_iq_ˇl_po°_¥oc
(
ah
, 
i
, 
Ál£
);

1686 
	`¨9003_hw_£t_chaö_masks
(
ah
,áh->
rxchaömask
,áh->
txchaömask
);

1689 
ah
->
ˇl_li°
 =áh->
ˇl_li°_œ°
 =áh->
ˇl_li°_cuº
 = 
NULL
;

1691 
	`INIT_CAL
(&
ah
->
iq_ˇld©a
);

1692 
	`INSERT_CAL
(
ah
, &ah->
iq_ˇld©a
);

1693 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "enabling IQ Calibration\n");

1696 
ah
->
ˇl_li°_cuº
 =áh->
ˇl_li°
;

1698 i‡(
ah
->
ˇl_li°_cuº
)

1699 
	`©h9k_hw_ª£t_ˇlibøti⁄
(
ah
,áh->
ˇl_li°_cuº
);

1701 i‡(
ˇld©a
)

1702 
ˇld©a
->
CÆVÆid
 = 0;

1704  
åue
;

1705 
	}
}

1707 
	$¨9003_hw_©èch_ˇlib_›s
(
©h_hw
 *
ah
)

1709 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

1710 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

1712 i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9462
◊hË|| 
	`AR_SREV_9565
(ah))

1713 
¥iv_›s
->
öô_ˇl
 = 
¨9003_hw_öô_ˇl_pc€m
;

1715 
¥iv_›s
->
öô_ˇl
 = 
¨9003_hw_öô_ˇl_soc
;

1717 
¥iv_›s
->
öô_ˇl_£âögs
 = 
¨9003_hw_öô_ˇl_£âögs
;

1718 
¥iv_›s
->
£tup_ˇlibøti⁄
 = 
¨9003_hw_£tup_ˇlibøti⁄
;

1720 
›s
->
ˇlibøã
 = 
¨9003_hw_ˇlibøã
;

1721 
	}
}

	@ar9003_eeprom.c

17 
	~<asm/u«lig√d.h
>

18 
	~"hw.h
"

19 
	~"¨9003_phy.h
"

20 
	~"¨9003_ì¥om.h
"

21 
	~"¨9003_mci.h
"

23 
	#COMP_HDR_LEN
 4

	)

24 
	#COMP_CKSUM_LEN
 2

	)

26 
	#LE16
(
x
Ë
	`˝u_to_À16
(x)

	)

27 
	#LE32
(
x
Ë
	`˝u_to_À32
(x)

	)

30 
	#EXT_ADDITIVE
 (0x8000)

	)

31 
	#CTL_11A_EXT
 (
CTL_11A
 | 
EXT_ADDITIVE
)

	)

32 
	#CTL_11G_EXT
 (
CTL_11G
 | 
EXT_ADDITIVE
)

	)

33 
	#CTL_11B_EXT
 (
CTL_11B
 | 
EXT_ADDITIVE
)

	)

35 
	#SUB_NUM_CTL_MODES_AT_5G_40
 2

	)

36 
	#SUB_NUM_CTL_MODES_AT_2G_40
 3

	)

38 
	#CTL
(
_çowî
, 
_Êag
Ë((_çowîË| ((_ÊagË<< 6))

	)

40 
	#EEPROM_DATA_LEN_9485
 1088

	)

42 
¨9003_hw_powî_öãΩﬁ©e
(
öt32_t
 
x
,

43 
öt32_t
 *
px
, i¡32_à*
py
, 
u_öt16_t
 
≈
);

45 c⁄° 
¨9300_ì¥om
 
	g¨9300_deÁu…
 = {

46 .
ì¥omVîsi⁄
 = 2,

47 .
	gãm∂©eVîsi⁄
 = 2,

48 .
	gmacAddr
 = {0, 2, 3, 4, 5, 6},

49 .
	gcu°D©a
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

51 .
	gba£EïHódî
 = {

52 .
ªgDmn
 = { 
LE16
(0), LE16(0x1f) },

53 .
	gtxrxMask
 = 0x77,

54 .
	g›C≠Fœgs
 = {

55 .
›Fœgs
 = 
AR5416_OPFLAGS_11G
 | 
AR5416_OPFLAGS_11A
,

56 .
	gìpMisc
 = 0,

58 .
	grfSûít
 = 0,

59 .
	gblueToŸhO±i⁄s
 = 0,

60 .
	gdevi˚C≠
 = 0,

61 .
	gdevi˚Ty≥
 = 5,

62 .
	gpwrTabÀOff£t
 = 
AR9300_PWR_TABLE_OFFSET
,

63 .
	g∑øms_f‹_tunög_ˇps
 = {0, 0},

64 .
	g„©uªE«bÀ
 = 0x0c,

73 .
	gmiscC⁄figuøti⁄
 = 0,

74 .
	gì¥omWrôeE«bÀGpio
 = 3,

75 .
	gwœnDißbÀGpio
 = 0,

76 .
	gwœnLedGpio
 = 8,

77 .
	grxB™dSñe˘Gpio
 = 0xff,

78 .
	gtxrxgaö
 = 0,

79 .
	gswªg
 = 0,

81 .
	gmodÆHódî2G
 = {

84 .
™tCålComm⁄
 = 
LE32
(0x110),

86 .
	g™tCålComm⁄2
 = 
LE32
(0x22222),

92 .
	g™tCålChaö
 = { 
LE16
(0x150), LE16(0x150), LE16(0x150) },

98 .
	gx©ãn1DB
 = {0, 0, 0},

104 .
	gx©ãn1M¨gö
 = {0, 0, 0},

105 .
	gãmpSl›e
 = 36,

106 .
	gvﬁtSl›e
 = 0,

112 .
	g•urCh™s
 = {0, 0, 0, 0, 0},

118 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

119 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

120 .
	gquick_dr›
 = 0,

121 .
	gx∑BüsLvl
 = 0,

122 .
	gtxFømeToD©aSèπ
 = 0x0e,

123 .
	gtxFømeToPaOn
 = 0x0e,

124 .
	gtxClù
 = 3,

125 .
	g™ã¬aGaö
 = 0,

126 .
	gswôchSëéög
 = 0x2c,

127 .
	gadcDesúedSize
 = -30,

128 .
	gtxEndToX∑Off
 = 0,

129 .
	gtxEndToRxOn
 = 0x2,

130 .
	gtxFømeToX∑On
 = 0xe,

131 .
	gthªsh62
 = 28,

132 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0cf0e0e0),

133 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x6cf0e0e0),

134 .
	gswôchcom•dt
 = 0,

135 .
	gx a_büs_°ªngth
 = 0,

136 .
	gfutuªModÆ
 = {

140 .
	gba£_ext1
 = {

141 .
™t_div_c⁄åﬁ
 = 0,

142 .
	gfutuª
 = {0, 0},

143 .
	gãmp¶›exãnsi⁄
 = {0, 0, 0, 0, 0, 0, 0, 0}

145 .
	gˇlFªqPõr2G
 = {

146 
FREQ2FBIN
(2412, 1),

147 
FREQ2FBIN
(2437, 1),

148 
FREQ2FBIN
(2472, 1),

151 .
	gˇlPõrD©a2G
 = {

156 .
	gˇlT¨gë_‰eqbö_Cck
 = {

157 
FREQ2FBIN
(2412, 1),

158 
FREQ2FBIN
(2484, 1),

160 .
	gˇlT¨gë_‰eqbö_2G
 = {

161 
FREQ2FBIN
(2412, 1),

162 
FREQ2FBIN
(2437, 1),

163 
FREQ2FBIN
(2472, 1)

165 .
	gˇlT¨gë_‰eqbö_2GHT20
 = {

166 
FREQ2FBIN
(2412, 1),

167 
FREQ2FBIN
(2437, 1),

168 
FREQ2FBIN
(2472, 1)

170 .
	gˇlT¨gë_‰eqbö_2GHT40
 = {

171 
FREQ2FBIN
(2412, 1),

172 
FREQ2FBIN
(2437, 1),

173 
FREQ2FBIN
(2472, 1)

175 .
	gˇlT¨gëPowîCck
 = {

180 .
	gˇlT¨gëPowî2G
 = {

186 .
	gˇlT¨gëPowî2GHT20
 = {

191 .
	gˇlT¨gëPowî2GHT40
 = {

196 .
	g˘lIndex_2G
 = {

200 .
	g˘l_‰eqbö_2G
 = {

202 
FREQ2FBIN
(2412, 1),

203 
FREQ2FBIN
(2417, 1),

204 
FREQ2FBIN
(2457, 1),

205 
FREQ2FBIN
(2462, 1)

208 
FREQ2FBIN
(2412, 1),

209 
FREQ2FBIN
(2417, 1),

210 
FREQ2FBIN
(2462, 1),

215 
FREQ2FBIN
(2412, 1),

216 
FREQ2FBIN
(2417, 1),

217 
FREQ2FBIN
(2462, 1),

221 
FREQ2FBIN
(2422, 1),

222 
FREQ2FBIN
(2427, 1),

223 
FREQ2FBIN
(2447, 1),

224 
FREQ2FBIN
(2452, 1)

228  
FREQ2FBIN
(2412, 1),

229  
FREQ2FBIN
(2417, 1),

230  
FREQ2FBIN
(2472, 1),

231  
FREQ2FBIN
(2484, 1),

235  
FREQ2FBIN
(2412, 1),

236  
FREQ2FBIN
(2417, 1),

237  
FREQ2FBIN
(2472, 1),

242  
FREQ2FBIN
(2412, 1),

243  
FREQ2FBIN
(2417, 1),

244 
FREQ2FBIN
(2472, 1),

249  
FREQ2FBIN
(2422, 1),

250  
FREQ2FBIN
(2427, 1),

251  
FREQ2FBIN
(2447, 1),

252  
FREQ2FBIN
(2462, 1),

256  
FREQ2FBIN
(2412, 1),

257  
FREQ2FBIN
(2417, 1),

258  
FREQ2FBIN
(2472, 1),

262  
FREQ2FBIN
(2412, 1),

263  
FREQ2FBIN
(2417, 1),

264  
FREQ2FBIN
(2472, 1),

269  
FREQ2FBIN
(2412, 1),

270  
FREQ2FBIN
(2417, 1),

271  
FREQ2FBIN
(2472, 1),

276  
FREQ2FBIN
(2422, 1),

277  
FREQ2FBIN
(2427, 1),

278  
FREQ2FBIN
(2447, 1),

279  
FREQ2FBIN
(2462, 1),

282 .
	g˘lPowîD©a_2G
 = {

283 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

284 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

285 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 1) } },

287 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0) } },

288 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

289 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

291 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0) } },

292 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

293 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

295 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

296 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

297 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

299 .
	gmodÆHódî5G
 = {

301 .
™tCålComm⁄
 = 
LE32
(0x110),

303 .
	g™tCålComm⁄2
 = 
LE32
(0x22222),

305 .
	g™tCålChaö
 = {

306 
LE16
(0x000), LE16(0x000), LE16(0x000),

309 .
	gx©ãn1DB
 = {0, 0, 0},

315 .
	gx©ãn1M¨gö
 = {0, 0, 0},

316 .
	gãmpSl›e
 = 68,

317 .
	gvﬁtSl›e
 = 0,

319 .
	g•urCh™s
 = {0, 0, 0, 0, 0},

321 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

322 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

323 .
	gquick_dr›
 = 0,

324 .
	gx∑BüsLvl
 = 0,

325 .
	gtxFømeToD©aSèπ
 = 0x0e,

326 .
	gtxFømeToPaOn
 = 0x0e,

327 .
	gtxClù
 = 3,

328 .
	g™ã¬aGaö
 = 0,

329 .
	gswôchSëéög
 = 0x2d,

330 .
	gadcDesúedSize
 = -30,

331 .
	gtxEndToX∑Off
 = 0,

332 .
	gtxEndToRxOn
 = 0x2,

333 .
	gtxFømeToX∑On
 = 0xe,

334 .
	gthªsh62
 = 28,

335 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0c80c080),

336 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x0080c080),

337 .
	gswôchcom•dt
 = 0,

338 .
	gx a_büs_°ªngth
 = 0,

339 .
	gfutuªModÆ
 = {

343 .
	gba£_ext2
 = {

344 .
ãmpSl›eLow
 = 0,

345 .
	gãmpSl›eHigh
 = 0,

346 .
	gx©ãn1DBLow
 = {0, 0, 0},

347 .
	gx©ãn1M¨göLow
 = {0, 0, 0},

348 .
	gx©ãn1DBHigh
 = {0, 0, 0},

349 .
	gx©ãn1M¨göHigh
 = {0, 0, 0}

351 .
	gˇlFªqPõr5G
 = {

352 
FREQ2FBIN
(5180, 0),

353 
FREQ2FBIN
(5220, 0),

354 
FREQ2FBIN
(5320, 0),

355 
FREQ2FBIN
(5400, 0),

356 
FREQ2FBIN
(5500, 0),

357 
FREQ2FBIN
(5600, 0),

358 
FREQ2FBIN
(5725, 0),

359 
FREQ2FBIN
(5825, 0)

361 .
	gˇlPõrD©a5G
 = {

394 .
	gˇlT¨gë_‰eqbö_5G
 = {

395 
FREQ2FBIN
(5180, 0),

396 
FREQ2FBIN
(5220, 0),

397 
FREQ2FBIN
(5320, 0),

398 
FREQ2FBIN
(5400, 0),

399 
FREQ2FBIN
(5500, 0),

400 
FREQ2FBIN
(5600, 0),

401 
FREQ2FBIN
(5725, 0),

402 
FREQ2FBIN
(5825, 0)

404 .
	gˇlT¨gë_‰eqbö_5GHT20
 = {

405 
FREQ2FBIN
(5180, 0),

406 
FREQ2FBIN
(5240, 0),

407 
FREQ2FBIN
(5320, 0),

408 
FREQ2FBIN
(5500, 0),

409 
FREQ2FBIN
(5700, 0),

410 
FREQ2FBIN
(5745, 0),

411 
FREQ2FBIN
(5725, 0),

412 
FREQ2FBIN
(5825, 0)

414 .
	gˇlT¨gë_‰eqbö_5GHT40
 = {

415 
FREQ2FBIN
(5180, 0),

416 
FREQ2FBIN
(5240, 0),

417 
FREQ2FBIN
(5320, 0),

418 
FREQ2FBIN
(5500, 0),

419 
FREQ2FBIN
(5700, 0),

420 
FREQ2FBIN
(5745, 0),

421 
FREQ2FBIN
(5725, 0),

422 
FREQ2FBIN
(5825, 0)

424 .
	gˇlT¨gëPowî5G
 = {

435 .
	gˇlT¨gëPowî5GHT20
 = {

449 .
	gˇlT¨gëPowî5GHT40
 = {

463 .
	g˘lIndex_5G
 = {

467 .
	g˘l_‰eqbö_5G
 = {

469  
FREQ2FBIN
(5180, 0),

470  
FREQ2FBIN
(5260, 0),

471  
FREQ2FBIN
(5280, 0),

472  
FREQ2FBIN
(5500, 0),

473  
FREQ2FBIN
(5600, 0),

474  
FREQ2FBIN
(5700, 0),

475  
FREQ2FBIN
(5745, 0),

476  
FREQ2FBIN
(5825, 0)

479  
FREQ2FBIN
(5180, 0),

480  
FREQ2FBIN
(5260, 0),

481  
FREQ2FBIN
(5280, 0),

482  
FREQ2FBIN
(5500, 0),

483  
FREQ2FBIN
(5520, 0),

484  
FREQ2FBIN
(5700, 0),

485  
FREQ2FBIN
(5745, 0),

486  
FREQ2FBIN
(5825, 0)

490  
FREQ2FBIN
(5190, 0),

491  
FREQ2FBIN
(5230, 0),

492  
FREQ2FBIN
(5270, 0),

493  
FREQ2FBIN
(5310, 0),

494  
FREQ2FBIN
(5510, 0),

495  
FREQ2FBIN
(5550, 0),

496  
FREQ2FBIN
(5670, 0),

497  
FREQ2FBIN
(5755, 0)

501  
FREQ2FBIN
(5180, 0),

502  
FREQ2FBIN
(5200, 0),

503  
FREQ2FBIN
(5260, 0),

504  
FREQ2FBIN
(5320, 0),

505  
FREQ2FBIN
(5500, 0),

506  
FREQ2FBIN
(5700, 0),

512  
FREQ2FBIN
(5180, 0),

513  
FREQ2FBIN
(5260, 0),

514  
FREQ2FBIN
(5500, 0),

515  
FREQ2FBIN
(5700, 0),

523  
FREQ2FBIN
(5190, 0),

524  
FREQ2FBIN
(5270, 0),

525  
FREQ2FBIN
(5310, 0),

526  
FREQ2FBIN
(5510, 0),

527  
FREQ2FBIN
(5590, 0),

528  
FREQ2FBIN
(5670, 0),

534  
FREQ2FBIN
(5180, 0),

535  
FREQ2FBIN
(5200, 0),

536  
FREQ2FBIN
(5220, 0),

537  
FREQ2FBIN
(5260, 0),

538  
FREQ2FBIN
(5500, 0),

539  
FREQ2FBIN
(5600, 0),

540  
FREQ2FBIN
(5700, 0),

541  
FREQ2FBIN
(5745, 0)

545  
FREQ2FBIN
(5180, 0),

546  
FREQ2FBIN
(5260, 0),

547  
FREQ2FBIN
(5320, 0),

548  
FREQ2FBIN
(5500, 0),

549  
FREQ2FBIN
(5560, 0),

550  
FREQ2FBIN
(5700, 0),

551  
FREQ2FBIN
(5745, 0),

552  
FREQ2FBIN
(5825, 0)

556  
FREQ2FBIN
(5190, 0),

557  
FREQ2FBIN
(5230, 0),

558  
FREQ2FBIN
(5270, 0),

559  
FREQ2FBIN
(5510, 0),

560  
FREQ2FBIN
(5550, 0),

561  
FREQ2FBIN
(5670, 0),

562  
FREQ2FBIN
(5755, 0),

563  
FREQ2FBIN
(5795, 0)

566 .
	g˘lPowîD©a_5G
 = {

569 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

570 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

575 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

576 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

581 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 1),

582 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

587 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0),

588 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

593 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

594 
CTL
(60, 0), CTL(60, 0), CTL(60, 0), CTL(60, 0),

599 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

600 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

605 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

606 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

611 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

612 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

617 
CTL
(60, 1), CTL(60, 0), CTL(60, 1), CTL(60, 1),

618 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

624 c⁄° 
¨9300_ì¥om
 
	g¨9300_x113
 = {

625 .
ì¥omVîsi⁄
 = 2,

626 .
	gãm∂©eVîsi⁄
 = 6,

627 .
	gmacAddr
 = {0x00, 0x03, 0x7f, 0x0, 0x0, 0x0},

628 .
	gcu°D©a
 = {"x113-023-f0000"},

629 .
	gba£EïHódî
 = {

630 .
ªgDmn
 = { 
LE16
(0), LE16(0x1f) },

631 .
	gtxrxMask
 = 0x77,

632 .
	g›C≠Fœgs
 = {

633 .
›Fœgs
 = 
AR5416_OPFLAGS_11A
,

634 .
	gìpMisc
 = 0,

636 .
	grfSûít
 = 0,

637 .
	gblueToŸhO±i⁄s
 = 0,

638 .
	gdevi˚C≠
 = 0,

639 .
	gdevi˚Ty≥
 = 5,

640 .
	gpwrTabÀOff£t
 = 
AR9300_PWR_TABLE_OFFSET
,

641 .
	g∑øms_f‹_tunög_ˇps
 = {0, 0},

642 .
	g„©uªE«bÀ
 = 0x0d,

651 .
	gmiscC⁄figuøti⁄
 = 0,

652 .
	gì¥omWrôeE«bÀGpio
 = 6,

653 .
	gwœnDißbÀGpio
 = 0,

654 .
	gwœnLedGpio
 = 8,

655 .
	grxB™dSñe˘Gpio
 = 0xff,

656 .
	gtxrxgaö
 = 0x21,

657 .
	gswªg
 = 0,

659 .
	gmodÆHódî2G
 = {

662 .
™tCålComm⁄
 = 
LE32
(0x110),

664 .
	g™tCålComm⁄2
 = 
LE32
(0x44444),

670 .
	g™tCålChaö
 = { 
LE16
(0x150), LE16(0x150), LE16(0x150) },

676 .
	gx©ãn1DB
 = {0, 0, 0},

682 .
	gx©ãn1M¨gö
 = {0, 0, 0},

683 .
	gãmpSl›e
 = 25,

684 .
	gvﬁtSl›e
 = 0,

690 .
	g•urCh™s
 = {
FREQ2FBIN
(2464, 1), 0, 0, 0, 0},

696 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

697 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

698 .
	gquick_dr›
 = 0,

699 .
	gx∑BüsLvl
 = 0,

700 .
	gtxFømeToD©aSèπ
 = 0x0e,

701 .
	gtxFømeToPaOn
 = 0x0e,

702 .
	gtxClù
 = 3,

703 .
	g™ã¬aGaö
 = 0,

704 .
	gswôchSëéög
 = 0x2c,

705 .
	gadcDesúedSize
 = -30,

706 .
	gtxEndToX∑Off
 = 0,

707 .
	gtxEndToRxOn
 = 0x2,

708 .
	gtxFømeToX∑On
 = 0xe,

709 .
	gthªsh62
 = 28,

710 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0c80c080),

711 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x0080c080),

712 .
	gswôchcom•dt
 = 0,

713 .
	gx a_büs_°ªngth
 = 0,

714 .
	gfutuªModÆ
 = {

718 .
	gba£_ext1
 = {

719 .
™t_div_c⁄åﬁ
 = 0,

720 .
	gfutuª
 = {0, 0},

721 .
	gãmp¶›exãnsi⁄
 = {0, 0, 0, 0, 0, 0, 0, 0}

723 .
	gˇlFªqPõr2G
 = {

724 
FREQ2FBIN
(2412, 1),

725 
FREQ2FBIN
(2437, 1),

726 
FREQ2FBIN
(2472, 1),

729 .
	gˇlPõrD©a2G
 = {

734 .
	gˇlT¨gë_‰eqbö_Cck
 = {

735 
FREQ2FBIN
(2412, 1),

736 
FREQ2FBIN
(2472, 1),

738 .
	gˇlT¨gë_‰eqbö_2G
 = {

739 
FREQ2FBIN
(2412, 1),

740 
FREQ2FBIN
(2437, 1),

741 
FREQ2FBIN
(2472, 1)

743 .
	gˇlT¨gë_‰eqbö_2GHT20
 = {

744 
FREQ2FBIN
(2412, 1),

745 
FREQ2FBIN
(2437, 1),

746 
FREQ2FBIN
(2472, 1)

748 .
	gˇlT¨gë_‰eqbö_2GHT40
 = {

749 
FREQ2FBIN
(2412, 1),

750 
FREQ2FBIN
(2437, 1),

751 
FREQ2FBIN
(2472, 1)

753 .
	gˇlT¨gëPowîCck
 = {

758 .
	gˇlT¨gëPowî2G
 = {

764 .
	gˇlT¨gëPowî2GHT20
 = {

769 .
	gˇlT¨gëPowî2GHT40
 = {

774 .
	g˘lIndex_2G
 = {

778 .
	g˘l_‰eqbö_2G
 = {

780 
FREQ2FBIN
(2412, 1),

781 
FREQ2FBIN
(2417, 1),

782 
FREQ2FBIN
(2457, 1),

783 
FREQ2FBIN
(2462, 1)

786 
FREQ2FBIN
(2412, 1),

787 
FREQ2FBIN
(2417, 1),

788 
FREQ2FBIN
(2462, 1),

793 
FREQ2FBIN
(2412, 1),

794 
FREQ2FBIN
(2417, 1),

795 
FREQ2FBIN
(2462, 1),

799 
FREQ2FBIN
(2422, 1),

800 
FREQ2FBIN
(2427, 1),

801 
FREQ2FBIN
(2447, 1),

802 
FREQ2FBIN
(2452, 1)

806  
FREQ2FBIN
(2412, 1),

807  
FREQ2FBIN
(2417, 1),

808  
FREQ2FBIN
(2472, 1),

809  
FREQ2FBIN
(2484, 1),

813  
FREQ2FBIN
(2412, 1),

814  
FREQ2FBIN
(2417, 1),

815  
FREQ2FBIN
(2472, 1),

820  
FREQ2FBIN
(2412, 1),

821  
FREQ2FBIN
(2417, 1),

822 
FREQ2FBIN
(2472, 1),

827  
FREQ2FBIN
(2422, 1),

828  
FREQ2FBIN
(2427, 1),

829  
FREQ2FBIN
(2447, 1),

830  
FREQ2FBIN
(2462, 1),

834  
FREQ2FBIN
(2412, 1),

835  
FREQ2FBIN
(2417, 1),

836  
FREQ2FBIN
(2472, 1),

840  
FREQ2FBIN
(2412, 1),

841  
FREQ2FBIN
(2417, 1),

842  
FREQ2FBIN
(2472, 1),

847  
FREQ2FBIN
(2412, 1),

848  
FREQ2FBIN
(2417, 1),

849  
FREQ2FBIN
(2472, 1),

854  
FREQ2FBIN
(2422, 1),

855  
FREQ2FBIN
(2427, 1),

856  
FREQ2FBIN
(2447, 1),

857  
FREQ2FBIN
(2462, 1),

860 .
	g˘lPowîD©a_2G
 = {

861 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

862 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

863 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 1) } },

865 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0) } },

866 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

867 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

869 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0) } },

870 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

871 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

873 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

874 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

875 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

877 .
	gmodÆHódî5G
 = {

879 .
™tCålComm⁄
 = 
LE32
(0x220),

881 .
	g™tCålComm⁄2
 = 
LE32
(0x11111),

883 .
	g™tCålChaö
 = {

884 
LE16
(0x150), LE16(0x150), LE16(0x150),

887 .
	gx©ãn1DB
 = {0, 0, 0},

893 .
	gx©ãn1M¨gö
 = {0, 0, 0},

894 .
	gãmpSl›e
 = 68,

895 .
	gvﬁtSl›e
 = 0,

897 .
	g•urCh™s
 = {
FREQ2FBIN
(5500, 0), 0, 0, 0, 0},

899 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

900 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

901 .
	gquick_dr›
 = 0,

902 .
	gx∑BüsLvl
 = 0xf,

903 .
	gtxFømeToD©aSèπ
 = 0x0e,

904 .
	gtxFømeToPaOn
 = 0x0e,

905 .
	gtxClù
 = 3,

906 .
	g™ã¬aGaö
 = 0,

907 .
	gswôchSëéög
 = 0x2d,

908 .
	gadcDesúedSize
 = -30,

909 .
	gtxEndToX∑Off
 = 0,

910 .
	gtxEndToRxOn
 = 0x2,

911 .
	gtxFømeToX∑On
 = 0xe,

912 .
	gthªsh62
 = 28,

913 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0cf0e0e0),

914 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x6cf0e0e0),

915 .
	gswôchcom•dt
 = 0,

916 .
	gx a_büs_°ªngth
 = 0,

917 .
	gfutuªModÆ
 = {

921 .
	gba£_ext2
 = {

922 .
ãmpSl›eLow
 = 72,

923 .
	gãmpSl›eHigh
 = 105,

924 .
	gx©ãn1DBLow
 = {0, 0, 0},

925 .
	gx©ãn1M¨göLow
 = {0, 0, 0},

926 .
	gx©ãn1DBHigh
 = {0, 0, 0},

927 .
	gx©ãn1M¨göHigh
 = {0, 0, 0}

929 .
	gˇlFªqPõr5G
 = {

930 
FREQ2FBIN
(5180, 0),

931 
FREQ2FBIN
(5240, 0),

932 
FREQ2FBIN
(5320, 0),

933 
FREQ2FBIN
(5400, 0),

934 
FREQ2FBIN
(5500, 0),

935 
FREQ2FBIN
(5600, 0),

936 
FREQ2FBIN
(5745, 0),

937 
FREQ2FBIN
(5785, 0)

939 .
	gˇlPõrD©a5G
 = {

972 .
	gˇlT¨gë_‰eqbö_5G
 = {

973 
FREQ2FBIN
(5180, 0),

974 
FREQ2FBIN
(5220, 0),

975 
FREQ2FBIN
(5320, 0),

976 
FREQ2FBIN
(5400, 0),

977 
FREQ2FBIN
(5500, 0),

978 
FREQ2FBIN
(5600, 0),

979 
FREQ2FBIN
(5745, 0),

980 
FREQ2FBIN
(5785, 0)

982 .
	gˇlT¨gë_‰eqbö_5GHT20
 = {

983 
FREQ2FBIN
(5180, 0),

984 
FREQ2FBIN
(5240, 0),

985 
FREQ2FBIN
(5320, 0),

986 
FREQ2FBIN
(5400, 0),

987 
FREQ2FBIN
(5500, 0),

988 
FREQ2FBIN
(5700, 0),

989 
FREQ2FBIN
(5745, 0),

990 
FREQ2FBIN
(5825, 0)

992 .
	gˇlT¨gë_‰eqbö_5GHT40
 = {

993 
FREQ2FBIN
(5190, 0),

994 
FREQ2FBIN
(5230, 0),

995 
FREQ2FBIN
(5320, 0),

996 
FREQ2FBIN
(5410, 0),

997 
FREQ2FBIN
(5510, 0),

998 
FREQ2FBIN
(5670, 0),

999 
FREQ2FBIN
(5755, 0),

1000 
FREQ2FBIN
(5825, 0)

1002 .
	gˇlT¨gëPowî5G
 = {

1013 .
	gˇlT¨gëPowî5GHT20
 = {

1027 .
	gˇlT¨gëPowî5GHT40
 = {

1041 .
	g˘lIndex_5G
 = {

1045 .
	g˘l_‰eqbö_5G
 = {

1047  
FREQ2FBIN
(5180, 0),

1048  
FREQ2FBIN
(5260, 0),

1049  
FREQ2FBIN
(5280, 0),

1050  
FREQ2FBIN
(5500, 0),

1051  
FREQ2FBIN
(5600, 0),

1052  
FREQ2FBIN
(5700, 0),

1053  
FREQ2FBIN
(5745, 0),

1054  
FREQ2FBIN
(5825, 0)

1057  
FREQ2FBIN
(5180, 0),

1058  
FREQ2FBIN
(5260, 0),

1059  
FREQ2FBIN
(5280, 0),

1060  
FREQ2FBIN
(5500, 0),

1061  
FREQ2FBIN
(5520, 0),

1062  
FREQ2FBIN
(5700, 0),

1063  
FREQ2FBIN
(5745, 0),

1064  
FREQ2FBIN
(5825, 0)

1068  
FREQ2FBIN
(5190, 0),

1069  
FREQ2FBIN
(5230, 0),

1070  
FREQ2FBIN
(5270, 0),

1071  
FREQ2FBIN
(5310, 0),

1072  
FREQ2FBIN
(5510, 0),

1073  
FREQ2FBIN
(5550, 0),

1074  
FREQ2FBIN
(5670, 0),

1075  
FREQ2FBIN
(5755, 0)

1079  
FREQ2FBIN
(5180, 0),

1080  
FREQ2FBIN
(5200, 0),

1081  
FREQ2FBIN
(5260, 0),

1082  
FREQ2FBIN
(5320, 0),

1083  
FREQ2FBIN
(5500, 0),

1084  
FREQ2FBIN
(5700, 0),

1090  
FREQ2FBIN
(5180, 0),

1091  
FREQ2FBIN
(5260, 0),

1092  
FREQ2FBIN
(5500, 0),

1093  
FREQ2FBIN
(5700, 0),

1101  
FREQ2FBIN
(5190, 0),

1102  
FREQ2FBIN
(5270, 0),

1103  
FREQ2FBIN
(5310, 0),

1104  
FREQ2FBIN
(5510, 0),

1105  
FREQ2FBIN
(5590, 0),

1106  
FREQ2FBIN
(5670, 0),

1112  
FREQ2FBIN
(5180, 0),

1113  
FREQ2FBIN
(5200, 0),

1114  
FREQ2FBIN
(5220, 0),

1115  
FREQ2FBIN
(5260, 0),

1116  
FREQ2FBIN
(5500, 0),

1117  
FREQ2FBIN
(5600, 0),

1118  
FREQ2FBIN
(5700, 0),

1119  
FREQ2FBIN
(5745, 0)

1123  
FREQ2FBIN
(5180, 0),

1124  
FREQ2FBIN
(5260, 0),

1125  
FREQ2FBIN
(5320, 0),

1126  
FREQ2FBIN
(5500, 0),

1127  
FREQ2FBIN
(5560, 0),

1128  
FREQ2FBIN
(5700, 0),

1129  
FREQ2FBIN
(5745, 0),

1130  
FREQ2FBIN
(5825, 0)

1134  
FREQ2FBIN
(5190, 0),

1135  
FREQ2FBIN
(5230, 0),

1136  
FREQ2FBIN
(5270, 0),

1137  
FREQ2FBIN
(5510, 0),

1138  
FREQ2FBIN
(5550, 0),

1139  
FREQ2FBIN
(5670, 0),

1140  
FREQ2FBIN
(5755, 0),

1141  
FREQ2FBIN
(5795, 0)

1144 .
	g˘lPowîD©a_5G
 = {

1147 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1148 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1153 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1154 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1159 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 1),

1160 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1165 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1166 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

1171 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1172 
CTL
(60, 0), CTL(60, 0), CTL(60, 0), CTL(60, 0),

1177 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1178 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

1183 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1184 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1189 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

1190 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1195 
CTL
(60, 1), CTL(60, 0), CTL(60, 1), CTL(60, 1),

1196 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

1203 c⁄° 
¨9300_ì¥om
 
	g¨9300_h112
 = {

1204 .
ì¥omVîsi⁄
 = 2,

1205 .
	gãm∂©eVîsi⁄
 = 3,

1206 .
	gmacAddr
 = {0x00, 0x03, 0x7f, 0x0, 0x0, 0x0},

1207 .
	gcu°D©a
 = {"h112-241-f0000"},

1208 .
	gba£EïHódî
 = {

1209 .
ªgDmn
 = { 
LE16
(0), LE16(0x1f) },

1210 .
	gtxrxMask
 = 0x77,

1211 .
	g›C≠Fœgs
 = {

1212 .
›Fœgs
 = 
AR5416_OPFLAGS_11G
 | 
AR5416_OPFLAGS_11A
,

1213 .
	gìpMisc
 = 0,

1215 .
	grfSûít
 = 0,

1216 .
	gblueToŸhO±i⁄s
 = 0,

1217 .
	gdevi˚C≠
 = 0,

1218 .
	gdevi˚Ty≥
 = 5,

1219 .
	gpwrTabÀOff£t
 = 
AR9300_PWR_TABLE_OFFSET
,

1220 .
	g∑øms_f‹_tunög_ˇps
 = {0, 0},

1221 .
	g„©uªE«bÀ
 = 0x0d,

1230 .
	gmiscC⁄figuøti⁄
 = 0,

1231 .
	gì¥omWrôeE«bÀGpio
 = 6,

1232 .
	gwœnDißbÀGpio
 = 0,

1233 .
	gwœnLedGpio
 = 8,

1234 .
	grxB™dSñe˘Gpio
 = 0xff,

1235 .
	gtxrxgaö
 = 0x10,

1236 .
	gswªg
 = 0,

1238 .
	gmodÆHódî2G
 = {

1241 .
™tCålComm⁄
 = 
LE32
(0x110),

1243 .
	g™tCålComm⁄2
 = 
LE32
(0x44444),

1249 .
	g™tCålChaö
 = { 
LE16
(0x150), LE16(0x150), LE16(0x150) },

1255 .
	gx©ãn1DB
 = {0, 0, 0},

1261 .
	gx©ãn1M¨gö
 = {0, 0, 0},

1262 .
	gãmpSl›e
 = 25,

1263 .
	gvﬁtSl›e
 = 0,

1269 .
	g•urCh™s
 = {
FREQ2FBIN
(2464, 1), 0, 0, 0, 0},

1275 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

1276 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

1277 .
	gquick_dr›
 = 0,

1278 .
	gx∑BüsLvl
 = 0,

1279 .
	gtxFømeToD©aSèπ
 = 0x0e,

1280 .
	gtxFømeToPaOn
 = 0x0e,

1281 .
	gtxClù
 = 3,

1282 .
	g™ã¬aGaö
 = 0,

1283 .
	gswôchSëéög
 = 0x2c,

1284 .
	gadcDesúedSize
 = -30,

1285 .
	gtxEndToX∑Off
 = 0,

1286 .
	gtxEndToRxOn
 = 0x2,

1287 .
	gtxFømeToX∑On
 = 0xe,

1288 .
	gthªsh62
 = 28,

1289 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0c80c080),

1290 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x0080c080),

1291 .
	gswôchcom•dt
 = 0,

1292 .
	gx a_büs_°ªngth
 = 0,

1293 .
	gfutuªModÆ
 = {

1297 .
	gba£_ext1
 = {

1298 .
™t_div_c⁄åﬁ
 = 0,

1299 .
	gfutuª
 = {0, 0},

1300 .
	gãmp¶›exãnsi⁄
 = {0, 0, 0, 0, 0, 0, 0, 0}

1302 .
	gˇlFªqPõr2G
 = {

1303 
FREQ2FBIN
(2412, 1),

1304 
FREQ2FBIN
(2437, 1),

1305 
FREQ2FBIN
(2462, 1),

1308 .
	gˇlPõrD©a2G
 = {

1313 .
	gˇlT¨gë_‰eqbö_Cck
 = {

1314 
FREQ2FBIN
(2412, 1),

1315 
FREQ2FBIN
(2472, 1),

1317 .
	gˇlT¨gë_‰eqbö_2G
 = {

1318 
FREQ2FBIN
(2412, 1),

1319 
FREQ2FBIN
(2437, 1),

1320 
FREQ2FBIN
(2472, 1)

1322 .
	gˇlT¨gë_‰eqbö_2GHT20
 = {

1323 
FREQ2FBIN
(2412, 1),

1324 
FREQ2FBIN
(2437, 1),

1325 
FREQ2FBIN
(2472, 1)

1327 .
	gˇlT¨gë_‰eqbö_2GHT40
 = {

1328 
FREQ2FBIN
(2412, 1),

1329 
FREQ2FBIN
(2437, 1),

1330 
FREQ2FBIN
(2472, 1)

1332 .
	gˇlT¨gëPowîCck
 = {

1337 .
	gˇlT¨gëPowî2G
 = {

1343 .
	gˇlT¨gëPowî2GHT20
 = {

1348 .
	gˇlT¨gëPowî2GHT40
 = {

1353 .
	g˘lIndex_2G
 = {

1357 .
	g˘l_‰eqbö_2G
 = {

1359 
FREQ2FBIN
(2412, 1),

1360 
FREQ2FBIN
(2417, 1),

1361 
FREQ2FBIN
(2457, 1),

1362 
FREQ2FBIN
(2462, 1)

1365 
FREQ2FBIN
(2412, 1),

1366 
FREQ2FBIN
(2417, 1),

1367 
FREQ2FBIN
(2462, 1),

1372 
FREQ2FBIN
(2412, 1),

1373 
FREQ2FBIN
(2417, 1),

1374 
FREQ2FBIN
(2462, 1),

1378 
FREQ2FBIN
(2422, 1),

1379 
FREQ2FBIN
(2427, 1),

1380 
FREQ2FBIN
(2447, 1),

1381 
FREQ2FBIN
(2452, 1)

1385  
FREQ2FBIN
(2412, 1),

1386  
FREQ2FBIN
(2417, 1),

1387  
FREQ2FBIN
(2472, 1),

1388  
FREQ2FBIN
(2484, 1),

1392  
FREQ2FBIN
(2412, 1),

1393  
FREQ2FBIN
(2417, 1),

1394  
FREQ2FBIN
(2472, 1),

1399  
FREQ2FBIN
(2412, 1),

1400  
FREQ2FBIN
(2417, 1),

1401 
FREQ2FBIN
(2472, 1),

1406  
FREQ2FBIN
(2422, 1),

1407  
FREQ2FBIN
(2427, 1),

1408  
FREQ2FBIN
(2447, 1),

1409  
FREQ2FBIN
(2462, 1),

1413  
FREQ2FBIN
(2412, 1),

1414  
FREQ2FBIN
(2417, 1),

1415  
FREQ2FBIN
(2472, 1),

1419  
FREQ2FBIN
(2412, 1),

1420  
FREQ2FBIN
(2417, 1),

1421  
FREQ2FBIN
(2472, 1),

1426  
FREQ2FBIN
(2412, 1),

1427  
FREQ2FBIN
(2417, 1),

1428  
FREQ2FBIN
(2472, 1),

1433  
FREQ2FBIN
(2422, 1),

1434  
FREQ2FBIN
(2427, 1),

1435  
FREQ2FBIN
(2447, 1),

1436  
FREQ2FBIN
(2462, 1),

1439 .
	g˘lPowîD©a_2G
 = {

1440 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1441 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1442 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 1) } },

1444 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0) } },

1445 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1446 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1448 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0) } },

1449 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1450 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1452 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

1453 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

1454 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

1456 .
	gmodÆHódî5G
 = {

1458 .
™tCålComm⁄
 = 
LE32
(0x220),

1460 .
	g™tCålComm⁄2
 = 
LE32
(0x44444),

1462 .
	g™tCålChaö
 = {

1463 
LE16
(0x150), LE16(0x150), LE16(0x150),

1466 .
	gx©ãn1DB
 = {0, 0, 0},

1472 .
	gx©ãn1M¨gö
 = {0, 0, 0},

1473 .
	gãmpSl›e
 = 45,

1474 .
	gvﬁtSl›e
 = 0,

1476 .
	g•urCh™s
 = {0, 0, 0, 0, 0},

1478 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

1479 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

1480 .
	gquick_dr›
 = 0,

1481 .
	gx∑BüsLvl
 = 0,

1482 .
	gtxFømeToD©aSèπ
 = 0x0e,

1483 .
	gtxFømeToPaOn
 = 0x0e,

1484 .
	gtxClù
 = 3,

1485 .
	g™ã¬aGaö
 = 0,

1486 .
	gswôchSëéög
 = 0x2d,

1487 .
	gadcDesúedSize
 = -30,

1488 .
	gtxEndToX∑Off
 = 0,

1489 .
	gtxEndToRxOn
 = 0x2,

1490 .
	gtxFømeToX∑On
 = 0xe,

1491 .
	gthªsh62
 = 28,

1492 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0cf0e0e0),

1493 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x6cf0e0e0),

1494 .
	gswôchcom•dt
 = 0,

1495 .
	gx a_büs_°ªngth
 = 0,

1496 .
	gfutuªModÆ
 = {

1500 .
	gba£_ext2
 = {

1501 .
ãmpSl›eLow
 = 40,

1502 .
	gãmpSl›eHigh
 = 50,

1503 .
	gx©ãn1DBLow
 = {0, 0, 0},

1504 .
	gx©ãn1M¨göLow
 = {0, 0, 0},

1505 .
	gx©ãn1DBHigh
 = {0, 0, 0},

1506 .
	gx©ãn1M¨göHigh
 = {0, 0, 0}

1508 .
	gˇlFªqPõr5G
 = {

1509 
FREQ2FBIN
(5180, 0),

1510 
FREQ2FBIN
(5220, 0),

1511 
FREQ2FBIN
(5320, 0),

1512 
FREQ2FBIN
(5400, 0),

1513 
FREQ2FBIN
(5500, 0),

1514 
FREQ2FBIN
(5600, 0),

1515 
FREQ2FBIN
(5700, 0),

1516 
FREQ2FBIN
(5785, 0)

1518 .
	gˇlPõrD©a5G
 = {

1551 .
	gˇlT¨gë_‰eqbö_5G
 = {

1552 
FREQ2FBIN
(5180, 0),

1553 
FREQ2FBIN
(5240, 0),

1554 
FREQ2FBIN
(5320, 0),

1555 
FREQ2FBIN
(5400, 0),

1556 
FREQ2FBIN
(5500, 0),

1557 
FREQ2FBIN
(5600, 0),

1558 
FREQ2FBIN
(5700, 0),

1559 
FREQ2FBIN
(5825, 0)

1561 .
	gˇlT¨gë_‰eqbö_5GHT20
 = {

1562 
FREQ2FBIN
(5180, 0),

1563 
FREQ2FBIN
(5240, 0),

1564 
FREQ2FBIN
(5320, 0),

1565 
FREQ2FBIN
(5400, 0),

1566 
FREQ2FBIN
(5500, 0),

1567 
FREQ2FBIN
(5700, 0),

1568 
FREQ2FBIN
(5745, 0),

1569 
FREQ2FBIN
(5825, 0)

1571 .
	gˇlT¨gë_‰eqbö_5GHT40
 = {

1572 
FREQ2FBIN
(5180, 0),

1573 
FREQ2FBIN
(5240, 0),

1574 
FREQ2FBIN
(5320, 0),

1575 
FREQ2FBIN
(5400, 0),

1576 
FREQ2FBIN
(5500, 0),

1577 
FREQ2FBIN
(5700, 0),

1578 
FREQ2FBIN
(5745, 0),

1579 
FREQ2FBIN
(5825, 0)

1581 .
	gˇlT¨gëPowî5G
 = {

1592 .
	gˇlT¨gëPowî5GHT20
 = {

1606 .
	gˇlT¨gëPowî5GHT40
 = {

1620 .
	g˘lIndex_5G
 = {

1624 .
	g˘l_‰eqbö_5G
 = {

1626  
FREQ2FBIN
(5180, 0),

1627  
FREQ2FBIN
(5260, 0),

1628  
FREQ2FBIN
(5280, 0),

1629  
FREQ2FBIN
(5500, 0),

1630  
FREQ2FBIN
(5600, 0),

1631  
FREQ2FBIN
(5700, 0),

1632  
FREQ2FBIN
(5745, 0),

1633  
FREQ2FBIN
(5825, 0)

1636  
FREQ2FBIN
(5180, 0),

1637  
FREQ2FBIN
(5260, 0),

1638  
FREQ2FBIN
(5280, 0),

1639  
FREQ2FBIN
(5500, 0),

1640  
FREQ2FBIN
(5520, 0),

1641  
FREQ2FBIN
(5700, 0),

1642  
FREQ2FBIN
(5745, 0),

1643  
FREQ2FBIN
(5825, 0)

1647  
FREQ2FBIN
(5190, 0),

1648  
FREQ2FBIN
(5230, 0),

1649  
FREQ2FBIN
(5270, 0),

1650  
FREQ2FBIN
(5310, 0),

1651  
FREQ2FBIN
(5510, 0),

1652  
FREQ2FBIN
(5550, 0),

1653  
FREQ2FBIN
(5670, 0),

1654  
FREQ2FBIN
(5755, 0)

1658  
FREQ2FBIN
(5180, 0),

1659  
FREQ2FBIN
(5200, 0),

1660  
FREQ2FBIN
(5260, 0),

1661  
FREQ2FBIN
(5320, 0),

1662  
FREQ2FBIN
(5500, 0),

1663  
FREQ2FBIN
(5700, 0),

1669  
FREQ2FBIN
(5180, 0),

1670  
FREQ2FBIN
(5260, 0),

1671  
FREQ2FBIN
(5500, 0),

1672  
FREQ2FBIN
(5700, 0),

1680  
FREQ2FBIN
(5190, 0),

1681  
FREQ2FBIN
(5270, 0),

1682  
FREQ2FBIN
(5310, 0),

1683  
FREQ2FBIN
(5510, 0),

1684  
FREQ2FBIN
(5590, 0),

1685  
FREQ2FBIN
(5670, 0),

1691  
FREQ2FBIN
(5180, 0),

1692  
FREQ2FBIN
(5200, 0),

1693  
FREQ2FBIN
(5220, 0),

1694  
FREQ2FBIN
(5260, 0),

1695  
FREQ2FBIN
(5500, 0),

1696  
FREQ2FBIN
(5600, 0),

1697  
FREQ2FBIN
(5700, 0),

1698  
FREQ2FBIN
(5745, 0)

1702  
FREQ2FBIN
(5180, 0),

1703  
FREQ2FBIN
(5260, 0),

1704  
FREQ2FBIN
(5320, 0),

1705  
FREQ2FBIN
(5500, 0),

1706  
FREQ2FBIN
(5560, 0),

1707  
FREQ2FBIN
(5700, 0),

1708  
FREQ2FBIN
(5745, 0),

1709  
FREQ2FBIN
(5825, 0)

1713  
FREQ2FBIN
(5190, 0),

1714  
FREQ2FBIN
(5230, 0),

1715  
FREQ2FBIN
(5270, 0),

1716  
FREQ2FBIN
(5510, 0),

1717  
FREQ2FBIN
(5550, 0),

1718  
FREQ2FBIN
(5670, 0),

1719  
FREQ2FBIN
(5755, 0),

1720  
FREQ2FBIN
(5795, 0)

1723 .
	g˘lPowîD©a_5G
 = {

1726 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1727 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1732 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1733 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1738 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 1),

1739 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1744 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1745 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

1750 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1751 
CTL
(60, 0), CTL(60, 0), CTL(60, 0), CTL(60, 0),

1756 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1757 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

1762 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1763 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

1768 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

1769 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

1774 
CTL
(60, 1), CTL(60, 0), CTL(60, 1), CTL(60, 1),

1775 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

1782 c⁄° 
¨9300_ì¥om
 
	g¨9300_x112
 = {

1783 .
ì¥omVîsi⁄
 = 2,

1784 .
	gãm∂©eVîsi⁄
 = 5,

1785 .
	gmacAddr
 = {0x00, 0x03, 0x7f, 0x0, 0x0, 0x0},

1786 .
	gcu°D©a
 = {"x112-041-f0000"},

1787 .
	gba£EïHódî
 = {

1788 .
ªgDmn
 = { 
LE16
(0), LE16(0x1f) },

1789 .
	gtxrxMask
 = 0x77,

1790 .
	g›C≠Fœgs
 = {

1791 .
›Fœgs
 = 
AR5416_OPFLAGS_11G
 | 
AR5416_OPFLAGS_11A
,

1792 .
	gìpMisc
 = 0,

1794 .
	grfSûít
 = 0,

1795 .
	gblueToŸhO±i⁄s
 = 0,

1796 .
	gdevi˚C≠
 = 0,

1797 .
	gdevi˚Ty≥
 = 5,

1798 .
	gpwrTabÀOff£t
 = 
AR9300_PWR_TABLE_OFFSET
,

1799 .
	g∑øms_f‹_tunög_ˇps
 = {0, 0},

1800 .
	g„©uªE«bÀ
 = 0x0d,

1809 .
	gmiscC⁄figuøti⁄
 = 0,

1810 .
	gì¥omWrôeE«bÀGpio
 = 6,

1811 .
	gwœnDißbÀGpio
 = 0,

1812 .
	gwœnLedGpio
 = 8,

1813 .
	grxB™dSñe˘Gpio
 = 0xff,

1814 .
	gtxrxgaö
 = 0x0,

1815 .
	gswªg
 = 0,

1817 .
	gmodÆHódî2G
 = {

1820 .
™tCålComm⁄
 = 
LE32
(0x110),

1822 .
	g™tCålComm⁄2
 = 
LE32
(0x22222),

1828 .
	g™tCålChaö
 = { 
LE16
(0x10), LE16(0x10), LE16(0x10) },

1834 .
	gx©ãn1DB
 = {0x1b, 0x1b, 0x1b},

1840 .
	gx©ãn1M¨gö
 = {0x15, 0x15, 0x15},

1841 .
	gãmpSl›e
 = 50,

1842 .
	gvﬁtSl›e
 = 0,

1848 .
	g•urCh™s
 = {
FREQ2FBIN
(2464, 1), 0, 0, 0, 0},

1854 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

1855 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

1856 .
	gquick_dr›
 = 0,

1857 .
	gx∑BüsLvl
 = 0,

1858 .
	gtxFømeToD©aSèπ
 = 0x0e,

1859 .
	gtxFømeToPaOn
 = 0x0e,

1860 .
	gtxClù
 = 3,

1861 .
	g™ã¬aGaö
 = 0,

1862 .
	gswôchSëéög
 = 0x2c,

1863 .
	gadcDesúedSize
 = -30,

1864 .
	gtxEndToX∑Off
 = 0,

1865 .
	gtxEndToRxOn
 = 0x2,

1866 .
	gtxFømeToX∑On
 = 0xe,

1867 .
	gthªsh62
 = 28,

1868 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0c80c080),

1869 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x0080c080),

1870 .
	gswôchcom•dt
 = 0,

1871 .
	gx a_büs_°ªngth
 = 0,

1872 .
	gfutuªModÆ
 = {

1876 .
	gba£_ext1
 = {

1877 .
™t_div_c⁄åﬁ
 = 0,

1878 .
	gfutuª
 = {0, 0},

1879 .
	gãmp¶›exãnsi⁄
 = {0, 0, 0, 0, 0, 0, 0, 0}

1881 .
	gˇlFªqPõr2G
 = {

1882 
FREQ2FBIN
(2412, 1),

1883 
FREQ2FBIN
(2437, 1),

1884 
FREQ2FBIN
(2472, 1),

1887 .
	gˇlPõrD©a2G
 = {

1892 .
	gˇlT¨gë_‰eqbö_Cck
 = {

1893 
FREQ2FBIN
(2412, 1),

1894 
FREQ2FBIN
(2472, 1),

1896 .
	gˇlT¨gë_‰eqbö_2G
 = {

1897 
FREQ2FBIN
(2412, 1),

1898 
FREQ2FBIN
(2437, 1),

1899 
FREQ2FBIN
(2472, 1)

1901 .
	gˇlT¨gë_‰eqbö_2GHT20
 = {

1902 
FREQ2FBIN
(2412, 1),

1903 
FREQ2FBIN
(2437, 1),

1904 
FREQ2FBIN
(2472, 1)

1906 .
	gˇlT¨gë_‰eqbö_2GHT40
 = {

1907 
FREQ2FBIN
(2412, 1),

1908 
FREQ2FBIN
(2437, 1),

1909 
FREQ2FBIN
(2472, 1)

1911 .
	gˇlT¨gëPowîCck
 = {

1916 .
	gˇlT¨gëPowî2G
 = {

1922 .
	gˇlT¨gëPowî2GHT20
 = {

1927 .
	gˇlT¨gëPowî2GHT40
 = {

1932 .
	g˘lIndex_2G
 = {

1936 .
	g˘l_‰eqbö_2G
 = {

1938 
FREQ2FBIN
(2412, 1),

1939 
FREQ2FBIN
(2417, 1),

1940 
FREQ2FBIN
(2457, 1),

1941 
FREQ2FBIN
(2462, 1)

1944 
FREQ2FBIN
(2412, 1),

1945 
FREQ2FBIN
(2417, 1),

1946 
FREQ2FBIN
(2462, 1),

1951 
FREQ2FBIN
(2412, 1),

1952 
FREQ2FBIN
(2417, 1),

1953 
FREQ2FBIN
(2462, 1),

1957 
FREQ2FBIN
(2422, 1),

1958 
FREQ2FBIN
(2427, 1),

1959 
FREQ2FBIN
(2447, 1),

1960 
FREQ2FBIN
(2452, 1)

1964  
FREQ2FBIN
(2412, 1),

1965  
FREQ2FBIN
(2417, 1),

1966  
FREQ2FBIN
(2472, 1),

1967  
FREQ2FBIN
(2484, 1),

1971  
FREQ2FBIN
(2412, 1),

1972  
FREQ2FBIN
(2417, 1),

1973  
FREQ2FBIN
(2472, 1),

1978  
FREQ2FBIN
(2412, 1),

1979  
FREQ2FBIN
(2417, 1),

1980 
FREQ2FBIN
(2472, 1),

1985  
FREQ2FBIN
(2422, 1),

1986  
FREQ2FBIN
(2427, 1),

1987  
FREQ2FBIN
(2447, 1),

1988  
FREQ2FBIN
(2462, 1),

1992  
FREQ2FBIN
(2412, 1),

1993  
FREQ2FBIN
(2417, 1),

1994  
FREQ2FBIN
(2472, 1),

1998  
FREQ2FBIN
(2412, 1),

1999  
FREQ2FBIN
(2417, 1),

2000  
FREQ2FBIN
(2472, 1),

2005  
FREQ2FBIN
(2412, 1),

2006  
FREQ2FBIN
(2417, 1),

2007  
FREQ2FBIN
(2472, 1),

2012  
FREQ2FBIN
(2422, 1),

2013  
FREQ2FBIN
(2427, 1),

2014  
FREQ2FBIN
(2447, 1),

2015  
FREQ2FBIN
(2462, 1),

2018 .
	g˘lPowîD©a_2G
 = {

2019 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2020 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2021 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 1) } },

2023 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0) } },

2024 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2025 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2027 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0) } },

2028 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2029 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2031 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2032 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

2033 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

2035 .
	gmodÆHódî5G
 = {

2037 .
™tCålComm⁄
 = 
LE32
(0x110),

2039 .
	g™tCålComm⁄2
 = 
LE32
(0x22222),

2041 .
	g™tCålChaö
 = {

2042 
LE16
(0x0), LE16(0x0), LE16(0x0),

2045 .
	gx©ãn1DB
 = {0x13, 0x19, 0x17},

2051 .
	gx©ãn1M¨gö
 = {0x19, 0x19, 0x19},

2052 .
	gãmpSl›e
 = 70,

2053 .
	gvﬁtSl›e
 = 15,

2055 .
	g•urCh™s
 = {0, 0, 0, 0, 0},

2057 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

2058 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

2059 .
	gquick_dr›
 = 0,

2060 .
	gx∑BüsLvl
 = 0,

2061 .
	gtxFømeToD©aSèπ
 = 0x0e,

2062 .
	gtxFømeToPaOn
 = 0x0e,

2063 .
	gtxClù
 = 3,

2064 .
	g™ã¬aGaö
 = 0,

2065 .
	gswôchSëéög
 = 0x2d,

2066 .
	gadcDesúedSize
 = -30,

2067 .
	gtxEndToX∑Off
 = 0,

2068 .
	gtxEndToRxOn
 = 0x2,

2069 .
	gtxFømeToX∑On
 = 0xe,

2070 .
	gthªsh62
 = 28,

2071 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0cf0e0e0),

2072 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x6cf0e0e0),

2073 .
	gswôchcom•dt
 = 0,

2074 .
	gx a_büs_°ªngth
 = 0,

2075 .
	gfutuªModÆ
 = {

2079 .
	gba£_ext2
 = {

2080 .
ãmpSl›eLow
 = 72,

2081 .
	gãmpSl›eHigh
 = 105,

2082 .
	gx©ãn1DBLow
 = {0x10, 0x14, 0x10},

2083 .
	gx©ãn1M¨göLow
 = {0x19, 0x19 , 0x19},

2084 .
	gx©ãn1DBHigh
 = {0x1d, 0x20, 0x24},

2085 .
	gx©ãn1M¨göHigh
 = {0x10, 0x10, 0x10}

2087 .
	gˇlFªqPõr5G
 = {

2088 
FREQ2FBIN
(5180, 0),

2089 
FREQ2FBIN
(5220, 0),

2090 
FREQ2FBIN
(5320, 0),

2091 
FREQ2FBIN
(5400, 0),

2092 
FREQ2FBIN
(5500, 0),

2093 
FREQ2FBIN
(5600, 0),

2094 
FREQ2FBIN
(5700, 0),

2095 
FREQ2FBIN
(5785, 0)

2097 .
	gˇlPõrD©a5G
 = {

2130 .
	gˇlT¨gë_‰eqbö_5G
 = {

2131 
FREQ2FBIN
(5180, 0),

2132 
FREQ2FBIN
(5220, 0),

2133 
FREQ2FBIN
(5320, 0),

2134 
FREQ2FBIN
(5400, 0),

2135 
FREQ2FBIN
(5500, 0),

2136 
FREQ2FBIN
(5600, 0),

2137 
FREQ2FBIN
(5725, 0),

2138 
FREQ2FBIN
(5825, 0)

2140 .
	gˇlT¨gë_‰eqbö_5GHT20
 = {

2141 
FREQ2FBIN
(5180, 0),

2142 
FREQ2FBIN
(5220, 0),

2143 
FREQ2FBIN
(5320, 0),

2144 
FREQ2FBIN
(5400, 0),

2145 
FREQ2FBIN
(5500, 0),

2146 
FREQ2FBIN
(5600, 0),

2147 
FREQ2FBIN
(5725, 0),

2148 
FREQ2FBIN
(5825, 0)

2150 .
	gˇlT¨gë_‰eqbö_5GHT40
 = {

2151 
FREQ2FBIN
(5180, 0),

2152 
FREQ2FBIN
(5220, 0),

2153 
FREQ2FBIN
(5320, 0),

2154 
FREQ2FBIN
(5400, 0),

2155 
FREQ2FBIN
(5500, 0),

2156 
FREQ2FBIN
(5600, 0),

2157 
FREQ2FBIN
(5725, 0),

2158 
FREQ2FBIN
(5825, 0)

2160 .
	gˇlT¨gëPowî5G
 = {

2171 .
	gˇlT¨gëPowî5GHT20
 = {

2185 .
	gˇlT¨gëPowî5GHT40
 = {

2199 .
	g˘lIndex_5G
 = {

2203 .
	g˘l_‰eqbö_5G
 = {

2205  
FREQ2FBIN
(5180, 0),

2206  
FREQ2FBIN
(5260, 0),

2207  
FREQ2FBIN
(5280, 0),

2208  
FREQ2FBIN
(5500, 0),

2209  
FREQ2FBIN
(5600, 0),

2210  
FREQ2FBIN
(5700, 0),

2211  
FREQ2FBIN
(5745, 0),

2212  
FREQ2FBIN
(5825, 0)

2215  
FREQ2FBIN
(5180, 0),

2216  
FREQ2FBIN
(5260, 0),

2217  
FREQ2FBIN
(5280, 0),

2218  
FREQ2FBIN
(5500, 0),

2219  
FREQ2FBIN
(5520, 0),

2220  
FREQ2FBIN
(5700, 0),

2221  
FREQ2FBIN
(5745, 0),

2222  
FREQ2FBIN
(5825, 0)

2226  
FREQ2FBIN
(5190, 0),

2227  
FREQ2FBIN
(5230, 0),

2228  
FREQ2FBIN
(5270, 0),

2229  
FREQ2FBIN
(5310, 0),

2230  
FREQ2FBIN
(5510, 0),

2231  
FREQ2FBIN
(5550, 0),

2232  
FREQ2FBIN
(5670, 0),

2233  
FREQ2FBIN
(5755, 0)

2237  
FREQ2FBIN
(5180, 0),

2238  
FREQ2FBIN
(5200, 0),

2239  
FREQ2FBIN
(5260, 0),

2240  
FREQ2FBIN
(5320, 0),

2241  
FREQ2FBIN
(5500, 0),

2242  
FREQ2FBIN
(5700, 0),

2248  
FREQ2FBIN
(5180, 0),

2249  
FREQ2FBIN
(5260, 0),

2250  
FREQ2FBIN
(5500, 0),

2251  
FREQ2FBIN
(5700, 0),

2259  
FREQ2FBIN
(5190, 0),

2260  
FREQ2FBIN
(5270, 0),

2261  
FREQ2FBIN
(5310, 0),

2262  
FREQ2FBIN
(5510, 0),

2263  
FREQ2FBIN
(5590, 0),

2264  
FREQ2FBIN
(5670, 0),

2270  
FREQ2FBIN
(5180, 0),

2271  
FREQ2FBIN
(5200, 0),

2272  
FREQ2FBIN
(5220, 0),

2273  
FREQ2FBIN
(5260, 0),

2274  
FREQ2FBIN
(5500, 0),

2275  
FREQ2FBIN
(5600, 0),

2276  
FREQ2FBIN
(5700, 0),

2277  
FREQ2FBIN
(5745, 0)

2281  
FREQ2FBIN
(5180, 0),

2282  
FREQ2FBIN
(5260, 0),

2283  
FREQ2FBIN
(5320, 0),

2284  
FREQ2FBIN
(5500, 0),

2285  
FREQ2FBIN
(5560, 0),

2286  
FREQ2FBIN
(5700, 0),

2287  
FREQ2FBIN
(5745, 0),

2288  
FREQ2FBIN
(5825, 0)

2292  
FREQ2FBIN
(5190, 0),

2293  
FREQ2FBIN
(5230, 0),

2294  
FREQ2FBIN
(5270, 0),

2295  
FREQ2FBIN
(5510, 0),

2296  
FREQ2FBIN
(5550, 0),

2297  
FREQ2FBIN
(5670, 0),

2298  
FREQ2FBIN
(5755, 0),

2299  
FREQ2FBIN
(5795, 0)

2302 .
	g˘lPowîD©a_5G
 = {

2305 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2306 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2311 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2312 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2317 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 1),

2318 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2323 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2324 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

2329 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2330 
CTL
(60, 0), CTL(60, 0), CTL(60, 0), CTL(60, 0),

2335 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2336 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

2341 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2342 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2347 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

2348 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2353 
CTL
(60, 1), CTL(60, 0), CTL(60, 1), CTL(60, 1),

2354 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

2360 c⁄° 
¨9300_ì¥om
 
	g¨9300_h116
 = {

2361 .
ì¥omVîsi⁄
 = 2,

2362 .
	gãm∂©eVîsi⁄
 = 4,

2363 .
	gmacAddr
 = {0x00, 0x03, 0x7f, 0x0, 0x0, 0x0},

2364 .
	gcu°D©a
 = {"h116-041-f0000"},

2365 .
	gba£EïHódî
 = {

2366 .
ªgDmn
 = { 
LE16
(0), LE16(0x1f) },

2367 .
	gtxrxMask
 = 0x33,

2368 .
	g›C≠Fœgs
 = {

2369 .
›Fœgs
 = 
AR5416_OPFLAGS_11G
 | 
AR5416_OPFLAGS_11A
,

2370 .
	gìpMisc
 = 0,

2372 .
	grfSûít
 = 0,

2373 .
	gblueToŸhO±i⁄s
 = 0,

2374 .
	gdevi˚C≠
 = 0,

2375 .
	gdevi˚Ty≥
 = 5,

2376 .
	gpwrTabÀOff£t
 = 
AR9300_PWR_TABLE_OFFSET
,

2377 .
	g∑øms_f‹_tunög_ˇps
 = {0, 0},

2378 .
	g„©uªE«bÀ
 = 0x0d,

2387 .
	gmiscC⁄figuøti⁄
 = 0,

2388 .
	gì¥omWrôeE«bÀGpio
 = 6,

2389 .
	gwœnDißbÀGpio
 = 0,

2390 .
	gwœnLedGpio
 = 8,

2391 .
	grxB™dSñe˘Gpio
 = 0xff,

2392 .
	gtxrxgaö
 = 0x10,

2393 .
	gswªg
 = 0,

2395 .
	gmodÆHódî2G
 = {

2398 .
™tCålComm⁄
 = 
LE32
(0x110),

2400 .
	g™tCålComm⁄2
 = 
LE32
(0x44444),

2406 .
	g™tCålChaö
 = { 
LE16
(0x10), LE16(0x10), LE16(0x10) },

2412 .
	gx©ãn1DB
 = {0x1f, 0x1f, 0x1f},

2418 .
	gx©ãn1M¨gö
 = {0x12, 0x12, 0x12},

2419 .
	gãmpSl›e
 = 25,

2420 .
	gvﬁtSl›e
 = 0,

2426 .
	g•urCh™s
 = {
FREQ2FBIN
(2464, 1), 0, 0, 0, 0},

2432 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

2433 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

2434 .
	gquick_dr›
 = 0,

2435 .
	gx∑BüsLvl
 = 0,

2436 .
	gtxFømeToD©aSèπ
 = 0x0e,

2437 .
	gtxFømeToPaOn
 = 0x0e,

2438 .
	gtxClù
 = 3,

2439 .
	g™ã¬aGaö
 = 0,

2440 .
	gswôchSëéög
 = 0x2c,

2441 .
	gadcDesúedSize
 = -30,

2442 .
	gtxEndToX∑Off
 = 0,

2443 .
	gtxEndToRxOn
 = 0x2,

2444 .
	gtxFømeToX∑On
 = 0xe,

2445 .
	gthªsh62
 = 28,

2446 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0c80C080),

2447 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x0080C080),

2448 .
	gswôchcom•dt
 = 0,

2449 .
	gx a_büs_°ªngth
 = 0,

2450 .
	gfutuªModÆ
 = {

2454 .
	gba£_ext1
 = {

2455 .
™t_div_c⁄åﬁ
 = 0,

2456 .
	gfutuª
 = {0, 0},

2457 .
	gãmp¶›exãnsi⁄
 = {0, 0, 0, 0, 0, 0, 0, 0}

2459 .
	gˇlFªqPõr2G
 = {

2460 
FREQ2FBIN
(2412, 1),

2461 
FREQ2FBIN
(2437, 1),

2462 
FREQ2FBIN
(2462, 1),

2465 .
	gˇlPõrD©a2G
 = {

2470 .
	gˇlT¨gë_‰eqbö_Cck
 = {

2471 
FREQ2FBIN
(2412, 1),

2472 
FREQ2FBIN
(2472, 1),

2474 .
	gˇlT¨gë_‰eqbö_2G
 = {

2475 
FREQ2FBIN
(2412, 1),

2476 
FREQ2FBIN
(2437, 1),

2477 
FREQ2FBIN
(2472, 1)

2479 .
	gˇlT¨gë_‰eqbö_2GHT20
 = {

2480 
FREQ2FBIN
(2412, 1),

2481 
FREQ2FBIN
(2437, 1),

2482 
FREQ2FBIN
(2472, 1)

2484 .
	gˇlT¨gë_‰eqbö_2GHT40
 = {

2485 
FREQ2FBIN
(2412, 1),

2486 
FREQ2FBIN
(2437, 1),

2487 
FREQ2FBIN
(2472, 1)

2489 .
	gˇlT¨gëPowîCck
 = {

2494 .
	gˇlT¨gëPowî2G
 = {

2500 .
	gˇlT¨gëPowî2GHT20
 = {

2505 .
	gˇlT¨gëPowî2GHT40
 = {

2510 .
	g˘lIndex_2G
 = {

2514 .
	g˘l_‰eqbö_2G
 = {

2516 
FREQ2FBIN
(2412, 1),

2517 
FREQ2FBIN
(2417, 1),

2518 
FREQ2FBIN
(2457, 1),

2519 
FREQ2FBIN
(2462, 1)

2522 
FREQ2FBIN
(2412, 1),

2523 
FREQ2FBIN
(2417, 1),

2524 
FREQ2FBIN
(2462, 1),

2529 
FREQ2FBIN
(2412, 1),

2530 
FREQ2FBIN
(2417, 1),

2531 
FREQ2FBIN
(2462, 1),

2535 
FREQ2FBIN
(2422, 1),

2536 
FREQ2FBIN
(2427, 1),

2537 
FREQ2FBIN
(2447, 1),

2538 
FREQ2FBIN
(2452, 1)

2542  
FREQ2FBIN
(2412, 1),

2543  
FREQ2FBIN
(2417, 1),

2544  
FREQ2FBIN
(2472, 1),

2545  
FREQ2FBIN
(2484, 1),

2549  
FREQ2FBIN
(2412, 1),

2550  
FREQ2FBIN
(2417, 1),

2551  
FREQ2FBIN
(2472, 1),

2556  
FREQ2FBIN
(2412, 1),

2557  
FREQ2FBIN
(2417, 1),

2558 
FREQ2FBIN
(2472, 1),

2563  
FREQ2FBIN
(2422, 1),

2564  
FREQ2FBIN
(2427, 1),

2565  
FREQ2FBIN
(2447, 1),

2566  
FREQ2FBIN
(2462, 1),

2570  
FREQ2FBIN
(2412, 1),

2571  
FREQ2FBIN
(2417, 1),

2572  
FREQ2FBIN
(2472, 1),

2576  
FREQ2FBIN
(2412, 1),

2577  
FREQ2FBIN
(2417, 1),

2578  
FREQ2FBIN
(2472, 1),

2583  
FREQ2FBIN
(2412, 1),

2584  
FREQ2FBIN
(2417, 1),

2585  
FREQ2FBIN
(2472, 1),

2590  
FREQ2FBIN
(2422, 1),

2591  
FREQ2FBIN
(2427, 1),

2592  
FREQ2FBIN
(2447, 1),

2593  
FREQ2FBIN
(2462, 1),

2596 .
	g˘lPowîD©a_2G
 = {

2597 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2598 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2599 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 1) } },

2601 { { 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0) } },

2602 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2603 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2605 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0) } },

2606 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2607 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2609 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 0) } },

2610 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

2611 { { 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 1) } },

2613 .
	gmodÆHódî5G
 = {

2615 .
™tCålComm⁄
 = 
LE32
(0x220),

2617 .
	g™tCålComm⁄2
 = 
LE32
(0x44444),

2619 .
	g™tCålChaö
 = {

2620 
LE16
(0x150), LE16(0x150), LE16(0x150),

2623 .
	gx©ãn1DB
 = {0x19, 0x19, 0x19},

2629 .
	gx©ãn1M¨gö
 = {0x14, 0x14, 0x14},

2630 .
	gãmpSl›e
 = 70,

2631 .
	gvﬁtSl›e
 = 0,

2633 .
	g•urCh™s
 = {0, 0, 0, 0, 0},

2635 .
	gnoi£Flo‹ThªshCh
 = {-1, 0, 0},

2636 .
	gª£rved
 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

2637 .
	gquick_dr›
 = 0,

2638 .
	gx∑BüsLvl
 = 0,

2639 .
	gtxFømeToD©aSèπ
 = 0x0e,

2640 .
	gtxFømeToPaOn
 = 0x0e,

2641 .
	gtxClù
 = 3,

2642 .
	g™ã¬aGaö
 = 0,

2643 .
	gswôchSëéög
 = 0x2d,

2644 .
	gadcDesúedSize
 = -30,

2645 .
	gtxEndToX∑Off
 = 0,

2646 .
	gtxEndToRxOn
 = 0x2,

2647 .
	gtxFømeToX∑On
 = 0xe,

2648 .
	gthªsh62
 = 28,

2649 .
	g∑pdR©eMaskHt20
 = 
LE32
(0x0cf0e0e0),

2650 .
	g∑pdR©eMaskHt40
 = 
LE32
(0x6cf0e0e0),

2651 .
	gswôchcom•dt
 = 0,

2652 .
	gx a_büs_°ªngth
 = 0,

2653 .
	gfutuªModÆ
 = {

2657 .
	gba£_ext2
 = {

2658 .
ãmpSl›eLow
 = 35,

2659 .
	gãmpSl›eHigh
 = 50,

2660 .
	gx©ãn1DBLow
 = {0, 0, 0},

2661 .
	gx©ãn1M¨göLow
 = {0, 0, 0},

2662 .
	gx©ãn1DBHigh
 = {0, 0, 0},

2663 .
	gx©ãn1M¨göHigh
 = {0, 0, 0}

2665 .
	gˇlFªqPõr5G
 = {

2666 
FREQ2FBIN
(5160, 0),

2667 
FREQ2FBIN
(5220, 0),

2668 
FREQ2FBIN
(5320, 0),

2669 
FREQ2FBIN
(5400, 0),

2670 
FREQ2FBIN
(5500, 0),

2671 
FREQ2FBIN
(5600, 0),

2672 
FREQ2FBIN
(5700, 0),

2673 
FREQ2FBIN
(5785, 0)

2675 .
	gˇlPõrD©a5G
 = {

2708 .
	gˇlT¨gë_‰eqbö_5G
 = {

2709 
FREQ2FBIN
(5180, 0),

2710 
FREQ2FBIN
(5240, 0),

2711 
FREQ2FBIN
(5320, 0),

2712 
FREQ2FBIN
(5400, 0),

2713 
FREQ2FBIN
(5500, 0),

2714 
FREQ2FBIN
(5600, 0),

2715 
FREQ2FBIN
(5700, 0),

2716 
FREQ2FBIN
(5825, 0)

2718 .
	gˇlT¨gë_‰eqbö_5GHT20
 = {

2719 
FREQ2FBIN
(5180, 0),

2720 
FREQ2FBIN
(5240, 0),

2721 
FREQ2FBIN
(5320, 0),

2722 
FREQ2FBIN
(5400, 0),

2723 
FREQ2FBIN
(5500, 0),

2724 
FREQ2FBIN
(5700, 0),

2725 
FREQ2FBIN
(5745, 0),

2726 
FREQ2FBIN
(5825, 0)

2728 .
	gˇlT¨gë_‰eqbö_5GHT40
 = {

2729 
FREQ2FBIN
(5180, 0),

2730 
FREQ2FBIN
(5240, 0),

2731 
FREQ2FBIN
(5320, 0),

2732 
FREQ2FBIN
(5400, 0),

2733 
FREQ2FBIN
(5500, 0),

2734 
FREQ2FBIN
(5700, 0),

2735 
FREQ2FBIN
(5745, 0),

2736 
FREQ2FBIN
(5825, 0)

2738 .
	gˇlT¨gëPowî5G
 = {

2749 .
	gˇlT¨gëPowî5GHT20
 = {

2763 .
	gˇlT¨gëPowî5GHT40
 = {

2777 .
	g˘lIndex_5G
 = {

2781 .
	g˘l_‰eqbö_5G
 = {

2783  
FREQ2FBIN
(5180, 0),

2784  
FREQ2FBIN
(5260, 0),

2785  
FREQ2FBIN
(5280, 0),

2786  
FREQ2FBIN
(5500, 0),

2787  
FREQ2FBIN
(5600, 0),

2788  
FREQ2FBIN
(5700, 0),

2789  
FREQ2FBIN
(5745, 0),

2790  
FREQ2FBIN
(5825, 0)

2793  
FREQ2FBIN
(5180, 0),

2794  
FREQ2FBIN
(5260, 0),

2795  
FREQ2FBIN
(5280, 0),

2796  
FREQ2FBIN
(5500, 0),

2797  
FREQ2FBIN
(5520, 0),

2798  
FREQ2FBIN
(5700, 0),

2799  
FREQ2FBIN
(5745, 0),

2800  
FREQ2FBIN
(5825, 0)

2804  
FREQ2FBIN
(5190, 0),

2805  
FREQ2FBIN
(5230, 0),

2806  
FREQ2FBIN
(5270, 0),

2807  
FREQ2FBIN
(5310, 0),

2808  
FREQ2FBIN
(5510, 0),

2809  
FREQ2FBIN
(5550, 0),

2810  
FREQ2FBIN
(5670, 0),

2811  
FREQ2FBIN
(5755, 0)

2815  
FREQ2FBIN
(5180, 0),

2816  
FREQ2FBIN
(5200, 0),

2817  
FREQ2FBIN
(5260, 0),

2818  
FREQ2FBIN
(5320, 0),

2819  
FREQ2FBIN
(5500, 0),

2820  
FREQ2FBIN
(5700, 0),

2826  
FREQ2FBIN
(5180, 0),

2827  
FREQ2FBIN
(5260, 0),

2828  
FREQ2FBIN
(5500, 0),

2829  
FREQ2FBIN
(5700, 0),

2837  
FREQ2FBIN
(5190, 0),

2838  
FREQ2FBIN
(5270, 0),

2839  
FREQ2FBIN
(5310, 0),

2840  
FREQ2FBIN
(5510, 0),

2841  
FREQ2FBIN
(5590, 0),

2842  
FREQ2FBIN
(5670, 0),

2848  
FREQ2FBIN
(5180, 0),

2849  
FREQ2FBIN
(5200, 0),

2850  
FREQ2FBIN
(5220, 0),

2851  
FREQ2FBIN
(5260, 0),

2852  
FREQ2FBIN
(5500, 0),

2853  
FREQ2FBIN
(5600, 0),

2854  
FREQ2FBIN
(5700, 0),

2855  
FREQ2FBIN
(5745, 0)

2859  
FREQ2FBIN
(5180, 0),

2860  
FREQ2FBIN
(5260, 0),

2861  
FREQ2FBIN
(5320, 0),

2862  
FREQ2FBIN
(5500, 0),

2863  
FREQ2FBIN
(5560, 0),

2864  
FREQ2FBIN
(5700, 0),

2865  
FREQ2FBIN
(5745, 0),

2866  
FREQ2FBIN
(5825, 0)

2870  
FREQ2FBIN
(5190, 0),

2871  
FREQ2FBIN
(5230, 0),

2872  
FREQ2FBIN
(5270, 0),

2873  
FREQ2FBIN
(5510, 0),

2874  
FREQ2FBIN
(5550, 0),

2875  
FREQ2FBIN
(5670, 0),

2876  
FREQ2FBIN
(5755, 0),

2877  
FREQ2FBIN
(5795, 0)

2880 .
	g˘lPowîD©a_5G
 = {

2883 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2884 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2889 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2890 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2895 
CTL
(60, 0), CTL(60, 1), CTL(60, 0), CTL(60, 1),

2896 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2901 
CTL
(60, 0), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2902 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

2907 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2908 
CTL
(60, 0), CTL(60, 0), CTL(60, 0), CTL(60, 0),

2913 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2914 
CTL
(60, 1), CTL(60, 0), CTL(60, 0), CTL(60, 0),

2919 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2920 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 1),

2925 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

2926 
CTL
(60, 1), CTL(60, 1), CTL(60, 1), CTL(60, 0),

2931 
CTL
(60, 1), CTL(60, 0), CTL(60, 1), CTL(60, 1),

2932 
CTL
(60, 1), CTL(60, 1), CTL(60, 0), CTL(60, 1),

2939 c⁄° 
¨9300_ì¥om
 *
	g¨9300_ìp_ãm∂©es
[] = {

2940 &
¨9300_deÁu…
,

2941 &
¨9300_x112
,

2942 &
¨9300_h116
,

2943 &
¨9300_h112
,

2944 &
¨9300_x113
,

2947 c⁄° 
¨9300_ì¥om
 *
	$¨9003_ì¥om_°ru˘_föd_by_id
(
id
)

2949 
	#N_LOOP
 ((
¨9300_ìp_ãm∂©es
Ë/ ◊r9300_ìp_ãm∂©es[0]))

	)

2950 
ô
;

2952 
ô
 = 0; ià< 
N_LOOP
; it++)

2953 i‡(
¨9300_ìp_ãm∂©es
[
ô
]->
ãm∂©eVîsi⁄
 =
id
)

2954  
¨9300_ìp_ãm∂©es
[
ô
];

2955  
NULL
;

2956 #unde‡
N_LOOP


2957 
	}
}

2959 
	$©h9k_hw_¨9300_check_ì¥om
(
©h_hw
 *
ah
)

2962 
	}
}

2964 
	$öãΩﬁ©e
(
x
, 
xa
, 
xb
, 
ya
, 
yb
)

2966 
bf
, 
Á˘‹
, 
∂us
;

2968 
bf
 = 2 * (
yb
 - 
ya
Ë* (
x
 - 
xa
Ë/ (
xb
 - xa);

2969 
Á˘‹
 = 
bf
 / 2;

2970 
∂us
 = 
bf
 % 2;

2971  
ya
 + 
Á˘‹
 + 
∂us
;

2972 
	}
}

2974 
u32
 
	$©h9k_hw_¨9300_gë_ì¥om
(
©h_hw
 *
ah
,

2975 
ì¥om_∑øm
 
∑øm
)

2977 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

2978 
¨9300_ba£_ìp_hdr
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

2980 
∑øm
) {

2981 
EEP_MAC_LSW
:

2982  
	`gë_u«lig√d_be16
(
ìp
->
macAddr
);

2983 
EEP_MAC_MID
:

2984  
	`gë_u«lig√d_be16
(
ìp
->
macAddr
 + 2);

2985 
EEP_MAC_MSW
:

2986  
	`gë_u«lig√d_be16
(
ìp
->
macAddr
 + 4);

2987 
EEP_REG_0
:

2988  
	`À16_to_˝u
(
pBa£
->
ªgDmn
[0]);

2989 
EEP_OP_CAP
:

2990  
pBa£
->
devi˚C≠
;

2991 
EEP_OP_MODE
:

2992  
pBa£
->
›C≠Fœgs
.
›Fœgs
;

2993 
EEP_RF_SILENT
:

2994  
pBa£
->
rfSûít
;

2995 
EEP_TX_MASK
:

2996  (
pBa£
->
txrxMask
 >> 4) & 0xf;

2997 
EEP_RX_MASK
:

2998  
pBa£
->
txrxMask
 & 0xf;

2999 
EEP_PAPRD
:

3000  !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(5));

3001 
EEP_CHAIN_MASK_REDUCE
:

3002  (
pBa£
->
miscC⁄figuøti⁄
 >> 0x3) & 0x1;

3003 
EEP_ANT_DIV_CTL1
:

3004 i‡(
	`AR_SREV_9565
(
ah
))

3005  
AR9300_EEP_ANTDIV_CONTROL_DEFAULT_VALUE
;

3007  
ìp
->
ba£_ext1
.
™t_div_c⁄åﬁ
;

3008 
EEP_ANTENNA_GAIN_5G
:

3009  
ìp
->
modÆHódî5G
.
™ã¬aGaö
;

3010 
EEP_ANTENNA_GAIN_2G
:

3011  
ìp
->
modÆHódî2G
.
™ã¬aGaö
;

3015 
	}
}

3017 
boﬁ
 
	$¨9300_ì¥om_ªad_byã
(
©h_hw
 *
ah
, 
addªss
,

3018 
u8
 *
buf„r
)

3020 
u16
 
vÆ
;

3022 i‡(
	`u∆ikñy
(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
addªss
 / 2, &
vÆ
)))

3023  
Ál£
;

3025 *
buf„r
 = (
vÆ
 >> (8 * (
addªss
 % 2))) & 0xff;

3026  
åue
;

3027 
	}
}

3029 
boﬁ
 
	$¨9300_ì¥om_ªad_w‹d
(
©h_hw
 *
ah
, 
addªss
,

3030 
u8
 *
buf„r
)

3032 
u16
 
vÆ
;

3034 i‡(
	`u∆ikñy
(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
addªss
 / 2, &
vÆ
)))

3035  
Ál£
;

3037 
buf„r
[0] = 
vÆ
 >> 8;

3038 
buf„r
[1] = 
vÆ
 & 0xff;

3040  
åue
;

3041 
	}
}

3043 
boﬁ
 
	$¨9300_ªad_ì¥om
(
©h_hw
 *
ah
, 
addªss
, 
u8
 *
buf„r
,

3044 
cou¡
)

3046 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

3047 
i
;

3049 i‡((
addªss
 < 0Ë|| (◊ddªs†+ 
cou¡
Ë/ 2 > 
AR9300_EEPROM_SIZE
 - 1)) {

3050 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "eepromáddressÇot inÑange\n");

3051  
Ál£
;

3059 i‡(
addªss
 % 2 == 0) {

3060 i‡(!
	`¨9300_ì¥om_ªad_byã
(
ah
, 
addªss
--, 
buf„r
++))

3061 
îr‹
;

3063 
cou¡
--;

3066 
i
 = 0; i < 
cou¡
 / 2; i++) {

3067 i‡(!
	`¨9300_ì¥om_ªad_w‹d
(
ah
, 
addªss
, 
buf„r
))

3068 
îr‹
;

3070 
addªss
 -= 2;

3071 
buf„r
 += 2;

3074 i‡(
cou¡
 % 2)

3075 i‡(!
	`¨9300_ì¥om_ªad_byã
(
ah
, 
addªss
, 
buf„r
))

3076 
îr‹
;

3078  
åue
;

3080 
îr‹
:

3081 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "unableÅoÑeadÉepromÑegionát offset %d\n",

3082 
addªss
);

3083  
Ál£
;

3084 
	}
}

3086 
boﬁ
 
	$¨9300_Ÿp_ªad_w‹d
(
©h_hw
 *
ah
, 
addr
, 
u32
 *
d©a
)

3088 
	`REG_READ
(
ah
, 
AR9300_OTP_BASE
 + (4 * 
addr
));

3090 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR9300_OTP_STATUS
, 
AR9300_OTP_STATUS_TYPE
,

3091 
AR9300_OTP_STATUS_VALID
, 1000))

3092  
Ál£
;

3094 *
d©a
 = 
	`REG_READ
(
ah
, 
AR9300_OTP_READ_DATA
);

3095  
åue
;

3096 
	}
}

3098 
boﬁ
 
	$¨9300_ªad_Ÿp
(
©h_hw
 *
ah
, 
addªss
, 
u8
 *
buf„r
,

3099 
cou¡
)

3101 
u32
 
d©a
;

3102 
i
;

3104 
i
 = 0; i < 
cou¡
; i++) {

3105 
off£t
 = 8 * ((
addªss
 - 
i
) % 4);

3106 i‡(!
	`¨9300_Ÿp_ªad_w‹d
(
ah
, (
addªss
 - 
i
Ë/ 4, &
d©a
))

3107  
Ál£
;

3109 
buf„r
[
i
] = (
d©a
 >> 
off£t
) & 0xff;

3112  
åue
;

3113 
	}
}

3116 
	$¨9300_comp_hdr_u≈ack
(
u8
 *
be°
, *
code
, *
ª„ªn˚
,

3117 *
Àngth
, *
maj‹
, *
mö‹
)

3119 
vÆue
[4];

3121 
vÆue
[0] = 
be°
[0];

3122 
vÆue
[1] = 
be°
[1];

3123 
vÆue
[2] = 
be°
[2];

3124 
vÆue
[3] = 
be°
[3];

3125 *
code
 = ((
vÆue
[0] >> 5) & 0x0007);

3126 *
ª„ªn˚
 = (
vÆue
[0] & 0x001f) | ((value[1] >> 2) & 0x0020);

3127 *
Àngth
 = ((
vÆue
[1] << 4) & 0x07f0) | ((value[2] >> 4) & 0x000f);

3128 *
maj‹
 = (
vÆue
[2] & 0x000f);

3129 *
mö‹
 = (
vÆue
[3] & 0x00ff);

3130 
	}
}

3132 
u16
 
	$¨9300_comp_cksum
(
u8
 *
d©a
, 
dsize
)

3134 
ô
, 
checksum
 = 0;

3136 
ô
 = 0; ià< 
dsize
; it++) {

3137 
checksum
 +
d©a
[
ô
];

3138 
checksum
 &= 0xffff;

3141  
checksum
;

3142 
	}
}

3144 
boﬁ
 
	$¨9300_uncom¥ess_block
(
©h_hw
 *
ah
,

3145 
u8
 *
m±r
,

3146 
md©aSize
,

3147 
u8
 *
block
,

3148 
size
)

3150 
ô
;

3151 
•Ÿ
;

3152 
off£t
;

3153 
Àngth
;

3154 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

3156 
•Ÿ
 = 0;

3158 
ô
 = 0; ià< 
size
; ià+(
Àngth
+2)) {

3159 
off£t
 = 
block
[
ô
];

3160 
off£t
 &= 0xff;

3161 
•Ÿ
 +
off£t
;

3162 
Àngth
 = 
block
[
ô
+1];

3163 
Àngth
 &= 0xff;

3165 i‡(
Àngth
 > 0 && 
•Ÿ
 >0 && spŸ+Àngth <
md©aSize
) {

3166 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3168 
ô
, 
•Ÿ
, 
off£t
, 
Àngth
);

3169 
	`mem˝y
(&
m±r
[
•Ÿ
], &
block
[
ô
+2], 
Àngth
);

3170 
•Ÿ
 +
Àngth
;

3171 } i‡(
Àngth
 > 0) {

3172 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3174 
ô
, 
•Ÿ
, 
off£t
, 
Àngth
);

3175  
Ál£
;

3178  
åue
;

3179 
	}
}

3181 
	$¨9300_com¥ess_decisi⁄
(
©h_hw
 *
ah
,

3182 
ô
,

3183 
code
,

3184 
ª„ªn˚
,

3185 
u8
 *
m±r
,

3186 
u8
 *
w‹d
, 
Àngth
, 
md©a_size
)

3188 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

3189 c⁄° 
¨9300_ì¥om
 *
ìp
 = 
NULL
;

3191 
code
) {

3192 
_Com¥essN⁄e
:

3193 i‡(
Àngth
 !
md©a_size
) {

3194 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3196 
md©a_size
, 
Àngth
);

3199 
	`mem˝y
(
m±r
, 
w‹d
 + 
COMP_HDR_LEN
, 
Àngth
);

3200 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3202 
ô
, 
Àngth
);

3204 
_Com¥essBlock
:

3205 i‡(
ª„ªn˚
 == 0) {

3207 
ìp
 = 
	`¨9003_ì¥om_°ru˘_föd_by_id
(
ª„ªn˚
);

3208 i‡(
ìp
 =
NULL
) {

3209 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3211 
ª„ªn˚
);

3214 
	`mem˝y
(
m±r
, 
ìp
, 
md©a_size
);

3216 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3218 
ô
, 
ª„ªn˚
, 
Àngth
);

3219 
	`¨9300_uncom¥ess_block
(
ah
, 
m±r
, 
md©a_size
,

3220 (
w‹d
 + 
COMP_HDR_LEN
), 
Àngth
);

3223 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "unknow¿com¥essi⁄ codê%d\n", 
code
);

3227 
	}
}

3229 
	$boﬁ
 (*
	tì¥om_ªad_›
)(
	t©h_hw
 *
	tah
, 
	taddªss
, 
	tu8
 *
	tbuf„r
,

3230 
	tcou¡
);

3232 
boﬁ
 
	$¨9300_check_hódî
(*
d©a
)

3234 
u32
 *
w‹d
 = 
d©a
;

3235  !(*
w‹d
 == 0 || *word == ~0);

3236 
	}
}

3238 
boﬁ
 
	$¨9300_check_ì¥om_hódî
(
©h_hw
 *
ah
, 
ì¥om_ªad_›
 
ªad
,

3239 
ba£_addr
)

3241 
u8
 
hódî
[4];

3243 i‡(!
	`ªad
(
ah
, 
ba£_addr
, 
hódî
, 4))

3244  
Ál£
;

3246  
	`¨9300_check_hódî
(
hódî
);

3247 
	}
}

3249 
	$¨9300_ì¥om_ª°‹e_Êash
(
©h_hw
 *
ah
, 
u8
 *
m±r
,

3250 
md©a_size
)

3252 
u16
 *
d©a
 = (u16 *Ë
m±r
;

3253 
i
;

3255 
i
 = 0; i < 
md©a_size
 / 2; i++, 
d©a
++)

3256 
	`©h9k_hw_nvøm_ªad
(
ah
, 
i
, 
d©a
);

3259 
	}
}

3267 
	$¨9300_ì¥om_ª°‹e_öã∫Æ
(
©h_hw
 *
ah
,

3268 
u8
 *
m±r
, 
md©a_size
)

3270 
	#MDEFAULT
 15

	)

3271 
	#MSTATE
 100

	)

3272 
˝å
;

3273 
u8
 *
w‹d
;

3274 
code
;

3275 
ª„ªn˚
, 
Àngth
, 
maj‹
, 
mö‹
;

3276 
osize
;

3277 
ô
;

3278 
u16
 
checksum
, 
mchecksum
;

3279 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

3280 
¨9300_ì¥om
 *
ìp
;

3281 
ì¥om_ªad_›
 
ªad
;

3283 i‡(
	`©h9k_hw_u£_Êash
(
ah
)) {

3284 
u8
 
txrx
;

3286 
	`¨9300_ì¥om_ª°‹e_Êash
(
ah
, 
m±r
, 
md©a_size
);

3289 
ìp
 = (
¨9300_ì¥om
 *Ë
m±r
;

3290 
txrx
 = 
ìp
->
ba£EïHódî
.
txrxMask
;

3291 i‡(
txrx
 != 0 &&Åxrx != 0xff)

3295 
w‹d
 = 
	`kzÆloc
(2048, 
GFP_KERNEL
);

3296 i‡(!
w‹d
)

3297  -
ENOMEM
;

3299 
	`mem˝y
(
m±r
, &
¨9300_deÁu…
, 
md©a_size
);

3301 
ªad
 = 
¨9300_ªad_ì¥om
;

3302 i‡(
	`AR_SREV_9485
(
ah
))

3303 
˝å
 = 
AR9300_BASE_ADDR_4K
;

3304 i‡(
	`AR_SREV_9330
(
ah
))

3305 
˝å
 = 
AR9300_BASE_ADDR_512
;

3307 
˝å
 = 
AR9300_BASE_ADDR
;

3308 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Trying EEPROMáccessát Address 0x%04x\n",

3309 
˝å
);

3310 i‡(
	`¨9300_check_ì¥om_hódî
(
ah
, 
ªad
, 
˝å
))

3311 
found
;

3313 
˝å
 = 
AR9300_BASE_ADDR_512
;

3314 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Trying EEPROMáccessát Address 0x%04x\n",

3315 
˝å
);

3316 i‡(
	`¨9300_check_ì¥om_hódî
(
ah
, 
ªad
, 
˝å
))

3317 
found
;

3319 
ªad
 = 
¨9300_ªad_Ÿp
;

3320 
˝å
 = 
AR9300_BASE_ADDR
;

3321 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Tryög OTPác˚s†© Addªs†0x%04x\n", 
˝å
);

3322 i‡(
	`¨9300_check_ì¥om_hódî
(
ah
, 
ªad
, 
˝å
))

3323 
found
;

3325 
˝å
 = 
AR9300_BASE_ADDR_512
;

3326 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Tryög OTPác˚s†© Addªs†0x%04x\n", 
˝å
);

3327 i‡(
	`¨9300_check_ì¥om_hódî
(
ah
, 
ªad
, 
˝å
))

3328 
found
;

3330 
Áû
;

3332 
found
:

3333 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Found valid EEPROM data\n");

3335 
ô
 = 0; ià< 
MSTATE
; it++) {

3336 i‡(!
	`ªad
(
ah
, 
˝å
, 
w‹d
, 
COMP_HDR_LEN
))

3337 
Áû
;

3339 i‡(!
	`¨9300_check_hódî
(
w‹d
))

3342 
	`¨9300_comp_hdr_u≈ack
(
w‹d
, &
code
, &
ª„ªn˚
,

3343 &
Àngth
, &
maj‹
, &
mö‹
);

3344 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3346 
˝å
, 
code
, 
ª„ªn˚
, 
Àngth
, 
maj‹
, 
mö‹
);

3347 i‡((!
	`AR_SREV_9485
(
ah
Ë&& 
Àngth
 >= 1024) ||

3348 (
	`AR_SREV_9485
(
ah
Ë&& 
Àngth
 > 
EEPROM_DATA_LEN_9485
)) {

3349 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Skipping bad header\n");

3350 
˝å
 -
COMP_HDR_LEN
;

3354 
osize
 = 
Àngth
;

3355 
	`ªad
(
ah
, 
˝å
, 
w‹d
, 
COMP_HDR_LEN
 + 
osize
 + 
COMP_CKSUM_LEN
);

3356 
checksum
 = 
	`¨9300_comp_cksum
(&
w‹d
[
COMP_HDR_LEN
], 
Àngth
);

3357 
mchecksum
 = 
	`gë_u«lig√d_À16
(&
w‹d
[
COMP_HDR_LEN
 + 
osize
]);

3358 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "checksum %x %x\n",

3359 
checksum
, 
mchecksum
);

3360 i‡(
checksum
 =
mchecksum
) {

3361 
	`¨9300_com¥ess_decisi⁄
(
ah
, 
ô
, 
code
, 
ª„ªn˚
, 
m±r
,

3362 
w‹d
, 
Àngth
, 
md©a_size
);

3364 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

3367 
˝å
 -(
COMP_HDR_LEN
 + 
osize
 + 
COMP_CKSUM_LEN
);

3370 
	`k‰ì
(
w‹d
);

3371  
˝å
;

3373 
Áû
:

3374 
	`k‰ì
(
w‹d
);

3376 
	}
}

3383 
boﬁ
 
	$©h9k_hw_¨9300_fûl_ì¥om
(
©h_hw
 *
ah
)

3385 
u8
 *
m±r
 = (u8 *Ë&
ah
->
ì¥om
.
¨9300_ìp
;

3387 i‡(
	`¨9300_ì¥om_ª°‹e_öã∫Æ
(
ah
, 
m±r
,

3388 (
¨9300_ì¥om
)) < 0)

3389  
Ál£
;

3391  
åue
;

3392 
	}
}

3394 #i‡
deföed
(
CONFIG_ATH9K_DEBUGFS
Ë|| deföed(
CONFIG_ATH9K_HTC_DEBUGFS
)

3395 
u32
 
	$¨9003_dump_modÆ_ì¥om
(*
buf
, 
u32
 
Àn
, u32 
size
,

3396 
¨9300_modÆ_ìp_hódî
 *
modÆ_hdr
)

3398 
	`PR_EEP
("Chaö0 A¡. C⁄åﬁ", 
	`À16_to_˝u
(
modÆ_hdr
->
™tCålChaö
[0]));

3399 
	`PR_EEP
("Chaö1 A¡. C⁄åﬁ", 
	`À16_to_˝u
(
modÆ_hdr
->
™tCålChaö
[1]));

3400 
	`PR_EEP
("Chaö2 A¡. C⁄åﬁ", 
	`À16_to_˝u
(
modÆ_hdr
->
™tCålChaö
[2]));

3401 
	`PR_EEP
("A¡. Comm⁄ C⁄åﬁ", 
	`À32_to_˝u
(
modÆ_hdr
->
™tCålComm⁄
));

3402 
	`PR_EEP
("A¡. Comm⁄ C⁄åﬁ2", 
	`À32_to_˝u
(
modÆ_hdr
->
™tCålComm⁄2
));

3403 
	`PR_EEP
("A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaö
);

3404 
	`PR_EEP
("Swôch Sëée", 
modÆ_hdr
->
swôchSëéög
);

3405 
	`PR_EEP
("Chaö0 x©ãn1DB", 
modÆ_hdr
->
x©ãn1DB
[0]);

3406 
	`PR_EEP
("Chaö1 x©ãn1DB", 
modÆ_hdr
->
x©ãn1DB
[1]);

3407 
	`PR_EEP
("Chaö2 x©ãn1DB", 
modÆ_hdr
->
x©ãn1DB
[2]);

3408 
	`PR_EEP
("Chaö0 x©ãn1M¨gö", 
modÆ_hdr
->
x©ãn1M¨gö
[0]);

3409 
	`PR_EEP
("Chaö1 x©ãn1M¨gö", 
modÆ_hdr
->
x©ãn1M¨gö
[1]);

3410 
	`PR_EEP
("Chaö2 x©ãn1M¨gö", 
modÆ_hdr
->
x©ãn1M¨gö
[2]);

3411 
	`PR_EEP
("Tem∞Sl›e", 
modÆ_hdr
->
ãmpSl›e
);

3412 
	`PR_EEP
("VﬁàSl›e", 
modÆ_hdr
->
vﬁtSl›e
);

3413 
	`PR_EEP
("•u∏Ch™√ls0", 
modÆ_hdr
->
•urCh™s
[0]);

3414 
	`PR_EEP
("•u∏Ch™√ls1", 
modÆ_hdr
->
•urCh™s
[1]);

3415 
	`PR_EEP
("•u∏Ch™√ls2", 
modÆ_hdr
->
•urCh™s
[2]);

3416 
	`PR_EEP
("•u∏Ch™√ls3", 
modÆ_hdr
->
•urCh™s
[3]);

3417 
	`PR_EEP
("•u∏Ch™√ls4", 
modÆ_hdr
->
•urCh™s
[4]);

3418 
	`PR_EEP
("Chaö0 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[0]);

3419 
	`PR_EEP
("Chaö1 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[1]);

3420 
	`PR_EEP
("Chaö2 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[2]);

3421 
	`PR_EEP
("Quick Dr›", 
modÆ_hdr
->
quick_dr›
);

3422 
	`PR_EEP
("txEndToX∑Off", 
modÆ_hdr
->
txEndToX∑Off
);

3423 
	`PR_EEP
("xPA Bü†Levñ", 
modÆ_hdr
->
x∑BüsLvl
);

3424 
	`PR_EEP
("txFømeToD©aSèπ", 
modÆ_hdr
->
txFømeToD©aSèπ
);

3425 
	`PR_EEP
("txFømeToPaOn", 
modÆ_hdr
->
txFømeToPaOn
);

3426 
	`PR_EEP
("txFømeToX∑On", 
modÆ_hdr
->
txFømeToX∑On
);

3427 
	`PR_EEP
("txClù", 
modÆ_hdr
->
txClù
);

3428 
	`PR_EEP
("ADC Desúed size", 
modÆ_hdr
->
adcDesúedSize
);

3430  
Àn
;

3431 
	}
}

3433 
u32
 
	$©h9k_hw_¨9003_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

3434 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

3436 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3437 
¨9300_ba£_ìp_hdr
 *
pBa£
;

3439 i‡(!
dump_ba£_hdr
) {

3440 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

3442 
Àn
 = 
	`¨9003_dump_modÆ_ì¥om
(
buf
,Üí, 
size
,

3443 &
ìp
->
modÆHódî2G
);

3444 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

3446 
Àn
 = 
	`¨9003_dump_modÆ_ì¥om
(
buf
,Üí, 
size
,

3447 &
ìp
->
modÆHódî5G
);

3448 
out
;

3451 
pBa£
 = &
ìp
->
ba£EïHódî
;

3453 
	`PR_EEP
("EEPROM Vîsi⁄", 
ah
->
ì¥om
.
¨9300_ìp
.
ì¥omVîsi⁄
);

3454 
	`PR_EEP
("RegDomaö1", 
	`À16_to_˝u
(
pBa£
->
ªgDmn
[0]));

3455 
	`PR_EEP
("RegDomaö2", 
	`À16_to_˝u
(
pBa£
->
ªgDmn
[1]));

3456 
	`PR_EEP
("TX Mask", (
pBa£
->
txrxMask
 >> 4));

3457 
	`PR_EEP
("RX Mask", (
pBa£
->
txrxMask
 & 0x0f));

3458 
	`PR_EEP
("AŒow 5GHz", !!(
pBa£
->
›C≠Fœgs
.
›Fœgs
 &

3459 
AR5416_OPFLAGS_11A
));

3460 
	`PR_EEP
("AŒow 2GHz", !!(
pBa£
->
›C≠Fœgs
.
›Fœgs
 &

3461 
AR5416_OPFLAGS_11G
));

3462 
	`PR_EEP
("DißbÀ 2GHz HT20", !!(
pBa£
->
›C≠Fœgs
.
›Fœgs
 &

3463 
AR5416_OPFLAGS_N_2G_HT20
));

3464 
	`PR_EEP
("DißbÀ 2GHz HT40", !!(
pBa£
->
›C≠Fœgs
.
›Fœgs
 &

3465 
AR5416_OPFLAGS_N_2G_HT40
));

3466 
	`PR_EEP
("DißbÀ 5Ghz HT20", !!(
pBa£
->
›C≠Fœgs
.
›Fœgs
 &

3467 
AR5416_OPFLAGS_N_5G_HT20
));

3468 
	`PR_EEP
("DißbÀ 5Ghz HT40", !!(
pBa£
->
›C≠Fœgs
.
›Fœgs
 &

3469 
AR5416_OPFLAGS_N_5G_HT40
));

3470 
	`PR_EEP
("Big Endün", !!(
pBa£
->
›C≠Fœgs
.
ìpMisc
 & 0x01));

3471 
	`PR_EEP
("RF Sûít", 
pBa£
->
rfSûít
);

3472 
	`PR_EEP
("BT o±i⁄", 
pBa£
->
blueToŸhO±i⁄s
);

3473 
	`PR_EEP
("Devi˚ C≠", 
pBa£
->
devi˚C≠
);

3474 
	`PR_EEP
("Devi˚ Ty≥", 
pBa£
->
devi˚Ty≥
);

3475 
	`PR_EEP
("Powî TabÀ Off£t", 
pBa£
->
pwrTabÀOff£t
);

3476 
	`PR_EEP
("Tunög C≠s1", 
pBa£
->
∑øms_f‹_tunög_ˇps
[0]);

3477 
	`PR_EEP
("Tunög C≠s2", 
pBa£
->
∑øms_f‹_tunög_ˇps
[1]);

3478 
	`PR_EEP
("E«bÀ Tx Tem∞Comp", !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(0)));

3479 
	`PR_EEP
("E«bÀ Tx VﬁàComp", !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(1)));

3480 
	`PR_EEP
("E«bÀ fa° clock", !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(2)));

3481 
	`PR_EEP
("E«bÀ doublög", !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(3)));

3482 
	`PR_EEP
("I¡î«»ªguœt‹", !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(4)));

3483 
	`PR_EEP
("E«bÀ P≠rd", !!(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(5)));

3484 
	`PR_EEP
("Drivî Såígth", !!(
pBa£
->
miscC⁄figuøti⁄
 & 
	`BIT
(0)));

3485 
	`PR_EEP
("Quick Dr›", !!(
pBa£
->
miscC⁄figuøti⁄
 & 
	`BIT
(1)));

3486 
	`PR_EEP
("Chaö mask Redu˚", (
pBa£
->
miscC⁄figuøti⁄
 >> 0x3) & 0x1);

3487 
	`PR_EEP
("WrôêíabÀ Gpio", 
pBa£
->
ì¥omWrôeE«bÀGpio
);

3488 
	`PR_EEP
("WLAN DißbÀ Gpio", 
pBa£
->
wœnDißbÀGpio
);

3489 
	`PR_EEP
("WLAN LED Gpio", 
pBa£
->
wœnLedGpio
);

3490 
	`PR_EEP
("Rx B™d Sñe˘ Gpio", 
pBa£
->
rxB™dSñe˘Gpio
);

3491 
	`PR_EEP
("Tx Gaö", 
pBa£
->
txrxgaö
 >> 4);

3492 
	`PR_EEP
("Rx Gaö", 
pBa£
->
txrxgaö
 & 0xf);

3493 
	`PR_EEP
("SW Reg", 
	`À32_to_˝u
(
pBa£
->
swªg
));

3495 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%20s : %pM\n", "MacAddress",

3496 
ah
->
ì¥om
.
¨9300_ìp
.
macAddr
);

3497 
out
:

3498 i‡(
Àn
 > 
size
)

3499 
Àn
 = 
size
;

3501  
Àn
;

3502 
	}
}

3504 
u32
 
	$©h9k_hw_¨9003_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

3505 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

3508 
	}
}

3512 
	$©h9k_hw_¨9300_gë_ì¥om_vî
(
©h_hw
 *
ah
)

3514  
ah
->
ì¥om
.
¨9300_ìp
.
ì¥omVîsi⁄
;

3515 
	}
}

3518 
	$©h9k_hw_¨9300_gë_ì¥om_ªv
(
©h_hw
 *
ah
)

3521 
	}
}

3523 
¨9300_modÆ_ìp_hódî
 *
	$¨9003_modÆ_hódî
(
©h_hw
 *
ah
,

3524 
boﬁ
 
is2ghz
)

3526 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3528 i‡(
is2ghz
)

3529  &
ìp
->
modÆHódî2G
;

3531  &
ìp
->
modÆHódî5G
;

3532 
	}
}

3534 
	$¨9003_hw_x∑_büs_Àvñ_≠∂y
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

3536 
büs
 = 
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
x∑BüsLvl
;

3538 i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9330
◊hË|| 
	`AR_SREV_9340
(ah) ||

3539 
	`AR_SREV_9531
(
ah
Ë|| 
	`AR_SREV_9561
(ah))

3540 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_TOP2
, 
AR_CH0_TOP2_XPABIASLVL
, 
büs
);

3541 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9550
◊hË|| 
	`AR_SREV_9565
(ah))

3542 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_TOP
, 
AR_CH0_TOP_XPABIASLVL
, 
büs
);

3544 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_TOP
, 
AR_CH0_TOP_XPABIASLVL
, 
büs
);

3545 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_THERM
,

3546 
AR_CH0_THERM_XPABIASLVL_MSB
,

3547 
büs
 >> 2);

3548 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_THERM
,

3549 
AR_CH0_THERM_XPASHORT2GND
, 1);

3551 
	}
}

3553 
u16
 
	$¨9003_swôch_com_•dt_gë
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

3555  
	`À16_to_˝u
(
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
swôchcom•dt
);

3556 
	}
}

3558 
u32
 
	$¨9003_hw_™t_˘æ_comm⁄_gë
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

3560  
	`À32_to_˝u
(
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
™tCålComm⁄
);

3561 
	}
}

3563 
u32
 
	$¨9003_hw_™t_˘æ_comm⁄_2_gë
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

3565  
	`À32_to_˝u
(
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
™tCålComm⁄2
);

3566 
	}
}

3568 
u16
 
	$¨9003_hw_™t_˘æ_chaö_gë
(
©h_hw
 *
ah
, 
chaö
,

3569 
boﬁ
 
is2ghz
)

3571 
__À16
 
vÆ
 = 
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
™tCålChaö
[
chaö
];

3572  
	`À16_to_˝u
(
vÆ
);

3573 
	}
}

3575 
	$¨9003_hw_™t_˘æ_≠∂y
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

3577 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

3578 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

3579 
chaö
;

3580 
u32
 
ªgvÆ
, 
vÆue
, 
gpio
;

3581 c⁄° 
u32
 
swôch_chaö_ªg
[
AR9300_MAX_CHAINS
] = {

3582 
AR_PHY_SWITCH_CHAIN_0
,

3583 
AR_PHY_SWITCH_CHAIN_1
,

3584 
AR_PHY_SWITCH_CHAIN_2
,

3587 i‡(
	`AR_SREV_9485
(
ah
Ë&& (
	`¨9003_hw_gë_rx_gaö_idx
(ah) == 0)) {

3588 i‡(
ah
->
c⁄fig
.
x a_gpio
)

3589 
gpio
 = 
ah
->
c⁄fig
.
x a_gpio
;

3591 
gpio
 = 
AR9300_EXT_LNA_CTL_GPIO_AR9485
;

3593 
	`©h9k_hw_cfg_ouçut
(
ah
, 
gpio
,

3594 
AR_GPIO_OUTPUT_MUX_AS_PCIE_ATTENTION_LED
);

3597 
vÆue
 = 
	`¨9003_hw_™t_˘æ_comm⁄_gë
(
ah
, 
is2ghz
);

3599 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

3600 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SWITCH_COM
,

3601 
AR_SWITCH_TABLE_COM_AR9462_ALL
, 
vÆue
);

3602 } i‡(
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9531
◊hË|| 
	`AR_SREV_9561
(ah)) {

3603 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SWITCH_COM
,

3604 
AR_SWITCH_TABLE_COM_AR9550_ALL
, 
vÆue
);

3606 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SWITCH_COM
,

3607 
AR_SWITCH_TABLE_COM_ALL
, 
vÆue
);

3623 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

3624 
vÆue
 = 
	`¨9003_swôch_com_•dt_gë
(
ah
, 
is2ghz
);

3625 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GLB_CONTROL
,

3626 
AR_SWITCH_TABLE_COM_SPDT_ALL
, 
vÆue
);

3627 
	`REG_SET_BIT
(
ah
, 
AR_PHY_GLB_CONTROL
, 
AR_BTCOEX_CTRL_SPDT_ENABLE
);

3630 
vÆue
 = 
	`¨9003_hw_™t_˘æ_comm⁄_2_gë
(
ah
, 
is2ghz
);

3631 i‡(
	`AR_SREV_9485
(
ah
Ë&& 
comm⁄
->
bt_™t_divîsôy
) {

3632 
vÆue
 &~
AR_SWITCH_TABLE_COM2_ALL
;

3633 
vÆue
 |
ah
->
c⁄fig
.
™t_˘æ_comm2g_swôch_íabÀ
;

3636 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SWITCH_COM_2
, 
AR_SWITCH_TABLE_COM2_ALL
, 
vÆue
);

3638 i‡((
	`AR_SREV_9462
(
ah
)Ë&& (ah->
rxchaömask
 == 0x2)) {

3639 
vÆue
 = 
	`¨9003_hw_™t_˘æ_chaö_gë
(
ah
, 1, 
is2ghz
);

3640 
	`REG_RMW_FIELD
(
ah
, 
swôch_chaö_ªg
[0],

3641 
AR_SWITCH_TABLE_ALL
, 
vÆue
);

3644 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

3645 i‡((
ah
->
rxchaömask
 & 
	`BIT
(
chaö
)) ||

3646 (
ah
->
txchaömask
 & 
	`BIT
(
chaö
))) {

3647 
vÆue
 = 
	`¨9003_hw_™t_˘æ_chaö_gë
(
ah
, 
chaö
,

3648 
is2ghz
);

3649 
	`REG_RMW_FIELD
(
ah
, 
swôch_chaö_ªg
[
chaö
],

3650 
AR_SWITCH_TABLE_ALL
, 
vÆue
);

3654 i‡(
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9485
◊hË|| 
	`AR_SREV_9565
(ah)) {

3655 
vÆue
 = 
	`©h9k_hw_¨9300_gë_ì¥om
(
ah
, 
EEP_ANT_DIV_CTL1
);

3660 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

3661 
ªgvÆ
 &(~
AR_ANT_DIV_CTRL_ALL
);

3662 
ªgvÆ
 |(
vÆue
 & 0x3fË<< 
AR_ANT_DIV_CTRL_ALL_S
;

3664 
ªgvÆ
 &(~
AR_PHY_ANT_DIV_LNADIV
);

3665 
ªgvÆ
 |((
vÆue
 >> 6Ë& 0x1Ë<< 
AR_PHY_ANT_DIV_LNADIV_S
;

3667 i‡(
	`AR_SREV_9485
(
ah
Ë&& 
comm⁄
->
bt_™t_divîsôy
)

3668 
ªgvÆ
 |
AR_ANT_DIV_ENABLE
;

3670 i‡(
	`AR_SREV_9565
(
ah
)) {

3671 i‡(
comm⁄
->
bt_™t_divîsôy
) {

3672 
ªgvÆ
 |(1 << 
AR_PHY_ANT_SW_RX_PROT_S
);

3674 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RESTART
,

3675 
AR_PHY_RESTART_ENABLE_DIV_M2FLAG
);

3678 
	`REG_SET_BIT
(
ah
, 
AR_BTCOEX_WL_LNADIV
,

3679 
AR_BTCOEX_WL_LNADIV_FORCE_ON
);

3681 
ªgvÆ
 &~(1 << 
AR_PHY_ANT_DIV_LNADIV_S
);

3682 
ªgvÆ
 &~(1 << 
AR_PHY_ANT_SW_RX_PROT_S
);

3684 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_MC_GAIN_CTRL
,

3685 (1 << 
AR_PHY_ANT_SW_RX_PROT_S
));

3688 
	`REG_CLR_BIT
(
ah
, 
AR_BTCOEX_WL_LNADIV
,

3689 
AR_BTCOEX_WL_LNADIV_FORCE_ON
);

3693 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

3696 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_DETECT
);

3697 
ªgvÆ
 &(~
AR_FAST_DIV_ENABLE
);

3698 
ªgvÆ
 |((
vÆue
 >> 7Ë& 0x1Ë<< 
AR_FAST_DIV_ENABLE_S
;

3700 i‡((
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

3701 && 
comm⁄
->
bt_™t_divîsôy
)

3702 
ªgvÆ
 |
AR_FAST_DIV_ENABLE
;

3704 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_DETECT
, 
ªgvÆ
);

3706 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
) {

3707 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

3712 
ªgvÆ
 &(~(
AR_PHY_ANT_DIV_MAIN_LNACONF
 |

3713 
AR_PHY_ANT_DIV_ALT_LNACONF
 |

3714 
AR_PHY_ANT_DIV_ALT_GAINTB
 |

3715 
AR_PHY_ANT_DIV_MAIN_GAINTB
));

3717 
ªgvÆ
 |(
ATH_ANT_DIV_COMB_LNA1
 <<

3718 
AR_PHY_ANT_DIV_MAIN_LNACONF_S
);

3719 
ªgvÆ
 |(
ATH_ANT_DIV_COMB_LNA2
 <<

3720 
AR_PHY_ANT_DIV_ALT_LNACONF_S
);

3721 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

3724 
	}
}

3726 
	$¨9003_hw_drive_°ªngth_≠∂y
(
©h_hw
 *
ah
)

3728 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3729 
¨9300_ba£_ìp_hdr
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

3730 
drive_°ªngth
;

3731 
ªg
;

3733 
drive_°ªngth
 = 
pBa£
->
miscC⁄figuøti⁄
 & 
	`BIT
(0);

3734 i‡(!
drive_°ªngth
)

3737 
ªg
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BIAS1
);

3738 
ªg
 &= ~0x00ffffc0;

3739 
ªg
 |= 0x5 << 21;

3740 
ªg
 |= 0x5 << 18;

3741 
ªg
 |= 0x5 << 15;

3742 
ªg
 |= 0x5 << 12;

3743 
ªg
 |= 0x5 << 9;

3744 
ªg
 |= 0x5 << 6;

3745 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BIAS1
, 
ªg
);

3747 
ªg
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BIAS2
);

3748 
ªg
 &= ~0xffffffe0;

3749 
ªg
 |= 0x5 << 29;

3750 
ªg
 |= 0x5 << 26;

3751 
ªg
 |= 0x5 << 23;

3752 
ªg
 |= 0x5 << 20;

3753 
ªg
 |= 0x5 << 17;

3754 
ªg
 |= 0x5 << 14;

3755 
ªg
 |= 0x5 << 11;

3756 
ªg
 |= 0x5 << 8;

3757 
ªg
 |= 0x5 << 5;

3758 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BIAS2
, 
ªg
);

3760 
ªg
 = 
	`REG_READ
(
ah
, 
AR_PHY_65NM_CH0_BIAS4
);

3761 
ªg
 &= ~0xff800000;

3762 
ªg
 |= 0x5 << 29;

3763 
ªg
 |= 0x5 << 26;

3764 
ªg
 |= 0x5 << 23;

3765 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_BIAS4
, 
ªg
);

3766 
	}
}

3768 
u16
 
	$¨9003_hw_©ãn_chaö_gë
(
©h_hw
 *
ah
, 
chaö
,

3769 
©h9k_ch™√l
 *
ch™
)

3771 
f
[3], 
t
[3];

3772 
u16
 
vÆue
;

3773 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3775 i‡(
chaö
 >= 0 && chain < 3) {

3776 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

3777  
ìp
->
modÆHódî2G
.
x©ãn1DB
[
chaö
];

3778 i‡(
ìp
->
ba£_ext2
.
x©ãn1DBLow
[
chaö
] != 0) {

3779 
t
[0] = 
ìp
->
ba£_ext2
.
x©ãn1DBLow
[
chaö
];

3780 
f
[0] = 5180;

3781 
t
[1] = 
ìp
->
modÆHódî5G
.
x©ãn1DB
[
chaö
];

3782 
f
[1] = 5500;

3783 
t
[2] = 
ìp
->
ba£_ext2
.
x©ãn1DBHigh
[
chaö
];

3784 
f
[2] = 5785;

3785 
vÆue
 = 
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
ch™
->
ch™√l
,

3786 
f
, 
t
, 3);

3787  
vÆue
;

3789  
ìp
->
modÆHódî5G
.
x©ãn1DB
[
chaö
];

3793 
	}
}

3796 
u16
 
	$¨9003_hw_©ãn_chaö_gë_m¨gö
(
©h_hw
 *
ah
, 
chaö
,

3797 
©h9k_ch™√l
 *
ch™
)

3799 
f
[3], 
t
[3];

3800 
u16
 
vÆue
;

3801 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3803 i‡(
chaö
 >= 0 && chain < 3) {

3804 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

3805  
ìp
->
modÆHódî2G
.
x©ãn1M¨gö
[
chaö
];

3806 i‡(
ìp
->
ba£_ext2
.
x©ãn1M¨göLow
[
chaö
] != 0) {

3807 
t
[0] = 
ìp
->
ba£_ext2
.
x©ãn1M¨göLow
[
chaö
];

3808 
f
[0] = 5180;

3809 
t
[1] = 
ìp
->
modÆHódî5G
.
x©ãn1M¨gö
[
chaö
];

3810 
f
[1] = 5500;

3811 
t
[2] = 
ìp
->
ba£_ext2
.
x©ãn1M¨göHigh
[
chaö
];

3812 
f
[2] = 5785;

3813 
vÆue
 = 
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
ch™
->
ch™√l
,

3814 
f
, 
t
, 3);

3815  
vÆue
;

3817  
ìp
->
modÆHódî5G
.
x©ãn1M¨gö
[
chaö
];

3821 
	}
}

3823 
	$¨9003_hw_©ãn_≠∂y
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

3825 
i
;

3826 
u16
 
vÆue
;

3827 
ext_©ãn_ªg
[3] = {
AR_PHY_EXT_ATTEN_CTL_0
,

3828 
AR_PHY_EXT_ATTEN_CTL_1
,

3829 
AR_PHY_EXT_ATTEN_CTL_2
,

3832 i‡((
	`AR_SREV_9462
(
ah
)Ë&& (ah->
rxchaömask
 == 0x2)) {

3833 
vÆue
 = 
	`¨9003_hw_©ãn_chaö_gë
(
ah
, 1, 
ch™
);

3834 
	`REG_RMW_FIELD
(
ah
, 
ext_©ãn_ªg
[0],

3835 
AR_PHY_EXT_ATTEN_CTL_XATTEN1_DB
, 
vÆue
);

3837 
vÆue
 = 
	`¨9003_hw_©ãn_chaö_gë_m¨gö
(
ah
, 1, 
ch™
);

3838 
	`REG_RMW_FIELD
(
ah
, 
ext_©ãn_ªg
[0],

3839 
AR_PHY_EXT_ATTEN_CTL_XATTEN1_MARGIN
,

3840 
vÆue
);

3844 
i
 = 0; i < 3; i++) {

3845 i‡(
ah
->
txchaömask
 & 
	`BIT
(
i
)) {

3846 
vÆue
 = 
	`¨9003_hw_©ãn_chaö_gë
(
ah
, 
i
, 
ch™
);

3847 
	`REG_RMW_FIELD
(
ah
, 
ext_©ãn_ªg
[
i
],

3848 
AR_PHY_EXT_ATTEN_CTL_XATTEN1_DB
, 
vÆue
);

3850 i‡(
	`AR_SREV_9485
(
ah
) &&

3851 (
	`¨9003_hw_gë_rx_gaö_idx
(
ah
) == 0) &&

3852 
ah
->
c⁄fig
.
x©ãn_m¨gö_cfg
)

3853 
vÆue
 = 5;

3855 
vÆue
 = 
	`¨9003_hw_©ãn_chaö_gë_m¨gö
(
ah
, 
i
, 
ch™
);

3857 i‡(
ah
->
c⁄fig
.
Æt_mögaöidx
)

3858 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_ATTEN_CTL_0
,

3859 
AR_PHY_EXT_ATTEN_CTL_XATTEN1_MARGIN
,

3860 
vÆue
);

3862 
	`REG_RMW_FIELD
(
ah
, 
ext_©ãn_ªg
[
i
],

3863 
AR_PHY_EXT_ATTEN_CTL_XATTEN1_MARGIN
,

3864 
vÆue
);

3867 
	}
}

3869 
boﬁ
 
	$is_pmu_£t
(
©h_hw
 *
ah
, 
u32
 
pmu_ªg
, 
pmu_£t
)

3871 
timeout
 = 100;

3873 
pmu_£t
 !
	`REG_READ
(
ah
, 
pmu_ªg
)) {

3874 i‡(
timeout
-- == 0)

3875  
Ál£
;

3876 
	`REG_WRITE
(
ah
, 
pmu_ªg
, 
pmu_£t
);

3877 
	`udñay
(10);

3880  
åue
;

3881 
	}
}

3883 
	$¨9003_hw_öã∫Æ_ªguœt‹_≠∂y
(
©h_hw
 *
ah
)

3885 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3886 
¨9300_ba£_ìp_hdr
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

3887 
u32
 
ªg_vÆ
;

3889 i‡(
pBa£
->
„©uªE«bÀ
 & 
	`BIT
(4)) {

3890 i‡(
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9485
(ah)) {

3891 
ªg_pmu_£t
;

3893 
ªg_pmu_£t
 = 
	`REG_READ
(
ah
, 
AR_PHY_PMU2
Ë& ~
AR_PHY_PMU2_PGM
;

3894 
	`REG_WRITE
(
ah
, 
AR_PHY_PMU2
, 
ªg_pmu_£t
);

3895 i‡(!
	`is_pmu_£t
(
ah
, 
AR_PHY_PMU2
, 
ªg_pmu_£t
))

3898 i‡(
	`AR_SREV_9330
(
ah
)) {

3899 i‡(
ah
->
is_˛k_25mhz
) {

3900 
ªg_pmu_£t
 = (3 << 1) | (8 << 4) |

3905 
ªg_pmu_£t
 = (4 << 1) | (7 << 4) |

3911 
ªg_pmu_£t
 = (5 << 1) | (7 << 4) |

3917 
	`REG_WRITE
(
ah
, 
AR_PHY_PMU1
, 
ªg_pmu_£t
);

3918 i‡(!
	`is_pmu_£t
(
ah
, 
AR_PHY_PMU1
, 
ªg_pmu_£t
))

3921 
ªg_pmu_£t
 = (
	`REG_READ
(
ah
, 
AR_PHY_PMU2
) & ~0xFFC00000)

3923 
	`REG_WRITE
(
ah
, 
AR_PHY_PMU2
, 
ªg_pmu_£t
);

3924 i‡(!
	`is_pmu_£t
(
ah
, 
AR_PHY_PMU2
, 
ªg_pmu_£t
))

3927 
ªg_pmu_£t
 = (
	`REG_READ
(
ah
, 
AR_PHY_PMU2
) & ~0x00200000)

3929 
	`REG_WRITE
(
ah
, 
AR_PHY_PMU2
, 
ªg_pmu_£t
);

3930 i‡(!
	`is_pmu_£t
(
ah
, 
AR_PHY_PMU2
, 
ªg_pmu_£t
))

3932 } i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah) ||

3933 
	`AR_SREV_9561
(
ah
)) {

3934 
ªg_vÆ
 = 
	`À32_to_˝u
(
pBa£
->
swªg
);

3935 
	`REG_WRITE
(
ah
, 
AR_PHY_PMU1
, 
ªg_vÆ
);

3937 i‡(
	`AR_SREV_9561
(
ah
))

3938 
	`REG_WRITE
(
ah
, 
AR_PHY_PMU2
, 0x10200000);

3941 
ªg_vÆ
 = 
	`À32_to_˝u
(
pBa£
->
swªg
);

3942 
	`REG_WRITE
(
ah
, 
AR_RTC_REG_CONTROL1
,

3943 
	`REG_READ
(
ah
, 
AR_RTC_REG_CONTROL1
) &

3944 (~
AR_RTC_REG_CONTROL1_SWREG_PROGRAM
));

3945 
	`REG_WRITE
(
ah
, 
AR_RTC_REG_CONTROL0
, 
ªg_vÆ
);

3947 
	`REG_WRITE
(
ah
, 
AR_RTC_REG_CONTROL1
,

3948 
	`REG_READ
(
ah
,

3949 
AR_RTC_REG_CONTROL1
) |

3950 
AR_RTC_REG_CONTROL1_SWREG_PROGRAM
);

3953 i‡(
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9485
(ah)) {

3954 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PMU2
, 
AR_PHY_PMU2_PGM
, 0);

3955 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_PMU2
,

3956 
AR_PHY_PMU2_PGM
))

3957 
	`udñay
(10);

3959 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PMU1
, 
AR_PHY_PMU1_PWD
, 0x1);

3960 !
	`REG_READ_FIELD
(
ah
, 
AR_PHY_PMU1
,

3961 
AR_PHY_PMU1_PWD
))

3962 
	`udñay
(10);

3963 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PMU2
, 
AR_PHY_PMU2_PGM
, 0x1);

3964 !
	`REG_READ_FIELD
(
ah
, 
AR_PHY_PMU2
,

3965 
AR_PHY_PMU2_PGM
))

3966 
	`udñay
(10);

3967 } i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

3968 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PMU1
, 
AR_PHY_PMU1_PWD
, 0x1);

3970 
ªg_vÆ
 = 
	`REG_READ
(
ah
, 
AR_RTC_SLEEP_CLK
) |

3971 
AR_RTC_FORCE_SWREG_PRD
;

3972 
	`REG_WRITE
(
ah
, 
AR_RTC_SLEEP_CLK
, 
ªg_vÆ
);

3976 
	}
}

3978 
	$¨9003_hw_≠∂y_tunög_ˇps
(
©h_hw
 *
ah
)

3980 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3981 
u8
 
tunög_ˇps_∑øm
 = 
ìp
->
ba£EïHódî
.
∑øms_f‹_tunög_ˇps
[0];

3983 i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9531
(ah))

3986 i‡(
ìp
->
ba£EïHódî
.
„©uªE«bÀ
 & 0x40) {

3987 
tunög_ˇps_∑øm
 &= 0x7f;

3988 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_XTAL
, 
AR_CH0_XTAL_CAPINDAC
,

3989 
tunög_ˇps_∑øm
);

3990 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_XTAL
, 
AR_CH0_XTAL_CAPOUTDAC
,

3991 
tunög_ˇps_∑øm
);

3993 
	}
}

3995 
	$¨9003_hw_quick_dr›_≠∂y
(
©h_hw
 *
ah
, 
u16
 
‰eq
)

3997 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

3998 
¨9300_ba£_ìp_hdr
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

3999 
quick_dr›
;

4000 
s32
 
t
[3], 
f
[3] = {5180, 5500, 5785};

4002 i‡(!(
pBa£
->
miscC⁄figuøti⁄
 & 
	`BIT
(4)))

4005 i‡(
	`AR_SREV_9300
(
ah
Ë|| 
	`AR_SREV_9580
◊hË|| 
	`AR_SREV_9340
(ah)) {

4006 i‡(
‰eq
 < 4000) {

4007 
quick_dr›
 = 
ìp
->
modÆHódî2G
.quick_drop;

4009 
t
[0] = 
ìp
->
ba£_ext1
.
quick_dr›_low
;

4010 
t
[1] = 
ìp
->
modÆHódî5G
.
quick_dr›
;

4011 
t
[2] = 
ìp
->
ba£_ext1
.
quick_dr›_high
;

4012 
quick_dr›
 = 
	`¨9003_hw_powî_öãΩﬁ©e
(
‰eq
, 
f
, 
t
, 3);

4014 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_AGC
, 
AR_PHY_AGC_QUICK_DROP
, 
quick_dr›
);

4016 
	}
}

4018 
	$¨9003_hw_txíd_to_x∑_off_≠∂y
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

4020 
u32
 
vÆue
;

4022 
vÆue
 = 
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
txEndToX∑Off
;

4024 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_XPA_TIMING_CTL
,

4025 
AR_PHY_XPA_TIMING_CTL_TX_END_XPAB_OFF
, 
vÆue
);

4026 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_XPA_TIMING_CTL
,

4027 
AR_PHY_XPA_TIMING_CTL_TX_END_XPAA_OFF
, 
vÆue
);

4028 
	}
}

4030 
	$¨9003_hw_x∑_timög_c⁄åﬁ_≠∂y
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

4032 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4033 
u8
 
x∑_˘l
;

4035 i‡(!(
ìp
->
ba£EïHódî
.
„©uªE«bÀ
 & 0x80))

4038 i‡(!
	`AR_SREV_9300
(
ah
) &&

4039 !
	`AR_SREV_9340
(
ah
) &&

4040 !
	`AR_SREV_9580
(
ah
) &&

4041 !
	`AR_SREV_9531
(
ah
) &&

4042 !
	`AR_SREV_9561
(
ah
))

4045 
x∑_˘l
 = 
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
txFømeToX∑On
;

4046 i‡(
is2ghz
)

4047 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_XPA_TIMING_CTL
,

4048 
AR_PHY_XPA_TIMING_CTL_FRAME_XPAB_ON
, 
x∑_˘l
);

4050 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_XPA_TIMING_CTL
,

4051 
AR_PHY_XPA_TIMING_CTL_FRAME_XPAA_ON
, 
x∑_˘l
);

4052 
	}
}

4054 
	$¨9003_hw_x a_büs_°ªngth_≠∂y
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

4056 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4057 
u8
 
büs
;

4059 i‡(!(
ìp
->
ba£EïHódî
.
miscC⁄figuøti⁄
 & 0x40))

4062 i‡(!
	`AR_SREV_9300
(
ah
))

4065 
büs
 = 
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
x a_büs_°ªngth
;

4066 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_RXTX4
, 
AR_PHY_65NM_RXTX4_XLNA_BIAS
,

4067 
büs
 & 0x3);

4068 
büs
 >>= 2;

4069 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH1_RXTX4
, 
AR_PHY_65NM_RXTX4_XLNA_BIAS
,

4070 
büs
 & 0x3);

4071 
büs
 >>= 2;

4072 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH2_RXTX4
, 
AR_PHY_65NM_RXTX4_XLNA_BIAS
,

4073 
büs
 & 0x3);

4074 
	}
}

4076 
	$¨9003_hw_gë_thîmomëî
(
©h_hw
 *
ah
)

4078 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4079 
¨9300_ba£_ìp_hdr
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

4080 
thîmomëî
 = (
pBa£
->
miscC⁄figuøti⁄
 >> 1) & 0x3;

4082  --
thîmomëî
;

4083 
	}
}

4085 
	$¨9003_hw_thîmomëî_≠∂y
(
©h_hw
 *
ah
)

4087 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

4088 
thîmomëî
 = 
	`¨9003_hw_gë_thîmomëî
(
ah
);

4089 
u8
 
thîm_⁄
 = (
thîmomëî
 < 0) ? 0 : 1;

4091 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_RXTX4
,

4092 
AR_PHY_65NM_CH0_RXTX4_THERM_ON_OVR
, 
thîm_⁄
);

4093 i‡(
pC≠
->
chù_chaömask
 & 
	`BIT
(1))

4094 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH1_RXTX4
,

4095 
AR_PHY_65NM_CH0_RXTX4_THERM_ON_OVR
, 
thîm_⁄
);

4096 i‡(
pC≠
->
chù_chaömask
 & 
	`BIT
(2))

4097 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH2_RXTX4
,

4098 
AR_PHY_65NM_CH0_RXTX4_THERM_ON_OVR
, 
thîm_⁄
);

4100 
thîm_⁄
 = (
thîmomëî
 < 0) ? 0 : (thermometer == 0);

4101 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_RXTX4
,

4102 
AR_PHY_65NM_CH0_RXTX4_THERM_ON
, 
thîm_⁄
);

4103 i‡(
pC≠
->
chù_chaömask
 & 
	`BIT
(1)) {

4104 
thîm_⁄
 = (
thîmomëî
 < 0) ? 0 : (thermometer == 1);

4105 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH1_RXTX4
,

4106 
AR_PHY_65NM_CH0_RXTX4_THERM_ON
, 
thîm_⁄
);

4108 i‡(
pC≠
->
chù_chaömask
 & 
	`BIT
(2)) {

4109 
thîm_⁄
 = (
thîmomëî
 < 0) ? 0 : (thermometer == 2);

4110 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH2_RXTX4
,

4111 
AR_PHY_65NM_CH0_RXTX4_THERM_ON
, 
thîm_⁄
);

4113 
	}
}

4115 
	$¨9003_hw_thîmo_ˇl_≠∂y
(
©h_hw
 *
ah
)

4117 
u32
 
d©a
, 
ko
, 
kg
;

4119 i‡(!
	`AR_SREV_9462_20_OR_LATER
(
ah
))

4122 
	`¨9300_Ÿp_ªad_w‹d
(
ah
, 1, &
d©a
);

4123 
ko
 = 
d©a
 & 0xff;

4124 
kg
 = (
d©a
 >> 8) & 0xff;

4125 i‡(
ko
 || 
kg
) {

4126 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_BB_THERM_ADC_3
,

4127 
AR_PHY_BB_THERM_ADC_3_THERM_ADC_OFFSET
, 
ko
);

4128 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_BB_THERM_ADC_3
,

4129 
AR_PHY_BB_THERM_ADC_3_THERM_ADC_SCALE_GAIN
,

4130 
kg
 + 256);

4132 
	}
}

4134 
	$¨9003_hw_≠∂y_möcˇpwr_thªsh
(
©h_hw
 *
ah
,

4135 
boﬁ
 
is2ghz
)

4137 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4138 c⁄° 
u_öt32_t
 
cˇ_˘æ
[
AR9300_MAX_CHAINS
] = {

4139 
AR_PHY_CCA_CTRL_0
,

4140 
AR_PHY_CCA_CTRL_1
,

4141 
AR_PHY_CCA_CTRL_2
,

4143 
chaö
;

4144 
u32
 
vÆ
;

4146 i‡(
is2ghz
) {

4147 i‡(!(
ìp
->
ba£_ext1
.
misc_íabÀ
 & 
	`BIT
(2)))

4150 i‡(!(
ìp
->
ba£_ext1
.
misc_íabÀ
 & 
	`BIT
(3)))

4154 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

4155 i‡(!(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(
chaö
)))

4158 
vÆ
 = 
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
noi£Flo‹ThªshCh
[
chaö
];

4159 
	`REG_RMW_FIELD
(
ah
, 
cˇ_˘æ
[
chaö
],

4160 
AR_PHY_EXT_CCA0_THRESH62_1
, 
vÆ
);

4163 
	}
}

4165 
	$©h9k_hw_¨9300_£t_bﬂrd_vÆues
(
©h_hw
 *
ah
,

4166 
©h9k_ch™√l
 *
ch™
)

4168 
boﬁ
 
is2ghz
 = 
	`IS_CHAN_2GHZ
(
ch™
);

4169 
	`¨9003_hw_x∑_timög_c⁄åﬁ_≠∂y
(
ah
, 
is2ghz
);

4170 
	`¨9003_hw_x∑_büs_Àvñ_≠∂y
(
ah
, 
is2ghz
);

4171 
	`¨9003_hw_™t_˘æ_≠∂y
(
ah
, 
is2ghz
);

4172 
	`¨9003_hw_drive_°ªngth_≠∂y
(
ah
);

4173 
	`¨9003_hw_x a_büs_°ªngth_≠∂y
(
ah
, 
is2ghz
);

4174 
	`¨9003_hw_©ãn_≠∂y
(
ah
, 
ch™
);

4175 
	`¨9003_hw_quick_dr›_≠∂y
(
ah
, 
ch™
->
ch™√l
);

4176 i‡(!
	`AR_SREV_9330
(
ah
Ë&& !
	`AR_SREV_9340
◊hË&& !
	`AR_SREV_9531
(ah))

4177 
	`¨9003_hw_öã∫Æ_ªguœt‹_≠∂y
(
ah
);

4178 
	`¨9003_hw_≠∂y_tunög_ˇps
(
ah
);

4179 
	`¨9003_hw_≠∂y_möcˇpwr_thªsh
(
ah
, 
is2ghz
);

4180 
	`¨9003_hw_txíd_to_x∑_off_≠∂y
(
ah
, 
is2ghz
);

4181 
	`¨9003_hw_thîmomëî_≠∂y
(
ah
);

4182 
	`¨9003_hw_thîmo_ˇl_≠∂y
(
ah
);

4183 
	}
}

4185 
	$©h9k_hw_¨9300_£t_addac
(
©h_hw
 *
ah
,

4186 
©h9k_ch™√l
 *
ch™
)

4188 
	}
}

4199 
	$¨9003_hw_powî_öãΩﬁ©e
(
öt32_t
 
x
,

4200 
öt32_t
 *
px
, i¡32_à*
py
, 
u_öt16_t
 
≈
)

4202 
ù
 = 0;

4203 
lx
 = 0, 
ly
 = 0, 
lhave
 = 0;

4204 
hx
 = 0, 
hy
 = 0, 
hhave
 = 0;

4205 
dx
 = 0;

4206 
y
 = 0;

4208 
lhave
 = 0;

4209 
hhave
 = 0;

4212 
ù
 = 0; i∞< 
≈
; ip++) {

4213 
dx
 = 
x
 - 
px
[
ù
];

4216 i‡(
dx
 <= 0) {

4217 i‡(!
hhave
 || 
dx
 > (
x
 - 
hx
)) {

4219 
hx
 = 
px
[
ù
];

4220 
hy
 = 
py
[
ù
];

4221 
hhave
 = 1;

4225 i‡(
dx
 >= 0) {

4226 i‡(!
lhave
 || 
dx
 < (
x
 - 
lx
)) {

4228 
lx
 = 
px
[
ù
];

4229 
ly
 = 
py
[
ù
];

4230 
lhave
 = 1;

4236 i‡(
lhave
) {

4238 i‡(
hhave
) {

4240 i‡(
hx
 =
lx
)

4241 
y
 = 
ly
;

4243 
y
 = 
	`öãΩﬁ©e
(
x
, 
lx
, 
hx
, 
ly
, 
hy
);

4245 
y
 = 
ly
;

4246 } i‡(
hhave
)

4247 
y
 = 
hy
;

4249 
y
 = -(1 << 30);

4250  
y
;

4251 
	}
}

4253 
u8
 
	$¨9003_hw_ì¥om_gë_tgt_pwr
(
©h_hw
 *
ah
,

4254 
u16
 
øãIndex
, u16 
‰eq
, 
boﬁ
 
is2GHz
)

4256 
u16
 
numPõrs
, 
i
;

4257 
s32
 
èrgëPowîAºay
[
AR9300_NUM_5G_20_TARGET_POWERS
];

4258 
s32
 
‰eqAºay
[
AR9300_NUM_5G_20_TARGET_POWERS
];

4259 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4260 
ˇl_tgt_pow_Àgacy
 *
pEïromT¨gëPwr
;

4261 
u8
 *
pFªqBö
;

4263 i‡(
is2GHz
) {

4264 
numPõrs
 = 
AR9300_NUM_2G_20_TARGET_POWERS
;

4265 
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowî2G
;

4266 
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_2G
;

4268 
numPõrs
 = 
AR9300_NUM_5G_20_TARGET_POWERS
;

4269 
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowî5G
;

4270 
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_5G
;

4277 
i
 = 0; i < 
numPõrs
; i++) {

4278 
‰eqAºay
[
i
] = 
	`©h9k_hw_fbö2‰eq
(
pFªqBö
[i], 
is2GHz
);

4279 
èrgëPowîAºay
[
i
] = 
pEïromT¨gëPwr
[i].
tPow2x
[
øãIndex
];

4283  (
u8
Ë
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
‰eq
,

4284 
‰eqAºay
,

4285 
èrgëPowîAºay
, 
numPõrs
);

4286 
	}
}

4288 
u8
 
	$¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
©h_hw
 *
ah
,

4289 
u16
 
øãIndex
,

4290 
u16
 
‰eq
, 
boﬁ
 
is2GHz
)

4292 
u16
 
numPõrs
, 
i
;

4293 
s32
 
èrgëPowîAºay
[
AR9300_NUM_5G_20_TARGET_POWERS
];

4294 
s32
 
‰eqAºay
[
AR9300_NUM_5G_20_TARGET_POWERS
];

4295 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4296 
ˇl_tgt_pow_ht
 *
pEïromT¨gëPwr
;

4297 
u8
 *
pFªqBö
;

4299 i‡(
is2GHz
) {

4300 
numPõrs
 = 
AR9300_NUM_2G_20_TARGET_POWERS
;

4301 
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowî2GHT20
;

4302 
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_2GHT20
;

4304 
numPõrs
 = 
AR9300_NUM_5G_20_TARGET_POWERS
;

4305 
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowî5GHT20
;

4306 
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_5GHT20
;

4313 
i
 = 0; i < 
numPõrs
; i++) {

4314 
‰eqAºay
[
i
] = 
	`©h9k_hw_fbö2‰eq
(
pFªqBö
[i], 
is2GHz
);

4315 
èrgëPowîAºay
[
i
] = 
pEïromT¨gëPwr
[i].
tPow2x
[
øãIndex
];

4319  (
u8
Ë
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
‰eq
,

4320 
‰eqAºay
,

4321 
èrgëPowîAºay
, 
numPõrs
);

4322 
	}
}

4324 
u8
 
	$¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
©h_hw
 *
ah
,

4325 
u16
 
øãIndex
,

4326 
u16
 
‰eq
, 
boﬁ
 
is2GHz
)

4328 
u16
 
numPõrs
, 
i
;

4329 
s32
 
èrgëPowîAºay
[
AR9300_NUM_5G_40_TARGET_POWERS
];

4330 
s32
 
‰eqAºay
[
AR9300_NUM_5G_40_TARGET_POWERS
];

4331 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4332 
ˇl_tgt_pow_ht
 *
pEïromT¨gëPwr
;

4333 
u8
 *
pFªqBö
;

4335 i‡(
is2GHz
) {

4336 
numPõrs
 = 
AR9300_NUM_2G_40_TARGET_POWERS
;

4337 
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowî2GHT40
;

4338 
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_2GHT40
;

4340 
numPõrs
 = 
AR9300_NUM_5G_40_TARGET_POWERS
;

4341 
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowî5GHT40
;

4342 
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_5GHT40
;

4349 
i
 = 0; i < 
numPõrs
; i++) {

4350 
‰eqAºay
[
i
] = 
	`©h9k_hw_fbö2‰eq
(
pFªqBö
[i], 
is2GHz
);

4351 
èrgëPowîAºay
[
i
] = 
pEïromT¨gëPwr
[i].
tPow2x
[
øãIndex
];

4355  (
u8
Ë
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
‰eq
,

4356 
‰eqAºay
,

4357 
èrgëPowîAºay
, 
numPõrs
);

4358 
	}
}

4360 
u8
 
	$¨9003_hw_ì¥om_gë_cck_tgt_pwr
(
©h_hw
 *
ah
,

4361 
u16
 
øãIndex
, u16 
‰eq
)

4363 
u16
 
numPõrs
 = 
AR9300_NUM_2G_CCK_TARGET_POWERS
, 
i
;

4364 
s32
 
èrgëPowîAºay
[
AR9300_NUM_2G_CCK_TARGET_POWERS
];

4365 
s32
 
‰eqAºay
[
AR9300_NUM_2G_CCK_TARGET_POWERS
];

4366 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4367 
ˇl_tgt_pow_Àgacy
 *
pEïromT¨gëPwr
 = 
ìp
->
ˇlT¨gëPowîCck
;

4368 
u8
 *
pFªqBö
 = 
ìp
->
ˇlT¨gë_‰eqbö_Cck
;

4374 
i
 = 0; i < 
numPõrs
; i++) {

4375 
‰eqAºay
[
i
] = 
	`©h9k_hw_fbö2‰eq
(
pFªqBö
[i], 1);

4376 
èrgëPowîAºay
[
i
] = 
pEïromT¨gëPwr
[i].
tPow2x
[
øãIndex
];

4380  (
u8
Ë
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
‰eq
,

4381 
‰eqAºay
,

4382 
èrgëPowîAºay
, 
numPõrs
);

4383 
	}
}

4385 
	$¨9003_hw_£lfgí_çc_txpowî
(
©h_hw
 *
ah
,

4386 
©h9k_ch™√l
 *
ch™
,

4387 
u8
 *
pwr_¨øy
)

4389 
u32
 
vÆ
;

4392 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

4393 
vÆ
 = 
	`SM
(
pwr_¨øy
[
ALL_TARGET_LEGACY_1L_5L
], 
AR_TPC_ACK
) |

4394 
	`SM
(
pwr_¨øy
[
ALL_TARGET_LEGACY_1L_5L
], 
AR_TPC_CTS
) |

4395 
	`SM
(0x3f, 
AR_TPC_CHIRP
Ë| SM(0x3f, 
AR_TPC_RPT
);

4397 
vÆ
 = 
	`SM
(
pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 
AR_TPC_ACK
) |

4398 
	`SM
(
pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 
AR_TPC_CTS
) |

4399 
	`SM
(0x3f, 
AR_TPC_CHIRP
Ë| SM(0x3f, 
AR_TPC_RPT
);

4401 
	`REG_WRITE
(
ah
, 
AR_TPC
, 
vÆ
);

4402 
	}
}

4405 
	$¨9003_hw_tx_powî_ªgwrôe
(
©h_hw
 *
ah
, 
u8
 * 
pPwrAºay
)

4407 
	#POW_SM
(
_r
, 
_s
Ë(((_rË& 0x3fË<< (_s))

	)

4409 
	`REG_WRITE
(
ah
, 
AR_PHY_TX_FORCED_GAIN
, 0);

4414 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(0),

4415 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 24) |

4416 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 16) |

4417 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 8) |

4418 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 0));

4421 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(1),

4422 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_54
], 24) |

4423 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_48
], 16) |

4424 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_36
], 8) |

4425 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 0));

4430 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(2),

4431 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_1L_5L
], 24) |

4432 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_1L_5L
], 16) |

4434 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_1L_5L
], 0));

4437 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(3),

4438 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_11S
], 24) |

4439 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_11L
], 16) |

4440 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_5S
], 8) |

4441 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_1L_5L
], 0)

4447 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(8),

4448 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 24) |

4449 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_1L_5L
], 16) |

4450 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_6_24
], 8) |

4451 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_LEGACY_1L_5L
], 0)

4457 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(4),

4458 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_5
], 24) |

4459 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_4
], 16) |

4460 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_1_3_9_11_17_19
], 8) |

4461 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_0_8_16
], 0)

4465 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(5),

4466 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_13
], 24) |

4467 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_12
], 16) |

4468 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_7
], 8) |

4469 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_6
], 0)

4473 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(9),

4474 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_21
], 24) |

4475 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_20
], 16) |

4476 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_15
], 8) |

4477 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_14
], 0)

4483 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(10),

4484 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_23
], 24) |

4485 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_22
], 16) |

4486 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_23
], 8) |

4487 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT20_22
], 0)

4495 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(6),

4496 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_5
], 24) |

4497 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_4
], 16) |

4498 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_1_3_9_11_17_19
], 8) |

4499 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_0_8_16
], 0)

4503 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(7),

4504 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_13
], 24) |

4505 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_12
], 16) |

4506 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_7
], 8) |

4507 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_6
], 0)

4511 
	`REG_WRITE
(
ah
, 
	`AR_PHY_POWER_TX_RATE
(11),

4512 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_21
], 24) |

4513 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_20
], 16) |

4514 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_15
], 8) |

4515 
	`POW_SM
(
pPwrAºay
[
ALL_TARGET_HT40_14
], 0)

4519 #unde‡
POW_SM


4520 
	}
}

4522 
	$¨9003_hw_gë_Àgacy_èrgë_powîs
(
©h_hw
 *
ah
, 
u16
 
‰eq
,

4523 
u8
 *
èrgëPowîVÆT2
,

4524 
boﬁ
 
is2GHz
)

4526 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_6_24
] =

4527 
	`¨9003_hw_ì¥om_gë_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_6_24
, 
‰eq
,

4528 
is2GHz
);

4529 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_36
] =

4530 
	`¨9003_hw_ì¥om_gë_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_36
, 
‰eq
,

4531 
is2GHz
);

4532 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_48
] =

4533 
	`¨9003_hw_ì¥om_gë_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_48
, 
‰eq
,

4534 
is2GHz
);

4535 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_54
] =

4536 
	`¨9003_hw_ì¥om_gë_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_54
, 
‰eq
,

4537 
is2GHz
);

4538 
	}
}

4540 
	$¨9003_hw_gë_cck_èrgë_powîs
(
©h_hw
 *
ah
, 
u16
 
‰eq
,

4541 
u8
 *
èrgëPowîVÆT2
)

4543 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_1L_5L
] =

4544 
	`¨9003_hw_ì¥om_gë_cck_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_1L_5L
,

4545 
‰eq
);

4546 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_5S
] =

4547 
	`¨9003_hw_ì¥om_gë_cck_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_5S
, 
‰eq
);

4548 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_11L
] =

4549 
	`¨9003_hw_ì¥om_gë_cck_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_11L
, 
‰eq
);

4550 
èrgëPowîVÆT2
[
ALL_TARGET_LEGACY_11S
] =

4551 
	`¨9003_hw_ì¥om_gë_cck_tgt_pwr
(
ah
, 
LEGACY_TARGET_RATE_11S
, 
‰eq
);

4552 
	}
}

4554 
	$¨9003_hw_gë_ht20_èrgë_powîs
(
©h_hw
 *
ah
, 
u16
 
‰eq
,

4555 
u8
 *
èrgëPowîVÆT2
, 
boﬁ
 
is2GHz
)

4557 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_0_8_16
] =

4558 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_0_8_16
, 
‰eq
,

4559 
is2GHz
);

4560 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_1_3_9_11_17_19
] =

4561 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_1_3_9_11_17_19
,

4562 
‰eq
, 
is2GHz
);

4563 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_4
] =

4564 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_4
, 
‰eq
,

4565 
is2GHz
);

4566 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_5
] =

4567 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_5
, 
‰eq
,

4568 
is2GHz
);

4569 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_6
] =

4570 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_6
, 
‰eq
,

4571 
is2GHz
);

4572 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_7
] =

4573 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_7
, 
‰eq
,

4574 
is2GHz
);

4575 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_12
] =

4576 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_12
, 
‰eq
,

4577 
is2GHz
);

4578 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_13
] =

4579 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_13
, 
‰eq
,

4580 
is2GHz
);

4581 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_14
] =

4582 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_14
, 
‰eq
,

4583 
is2GHz
);

4584 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_15
] =

4585 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_15
, 
‰eq
,

4586 
is2GHz
);

4587 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_20
] =

4588 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_20
, 
‰eq
,

4589 
is2GHz
);

4590 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_21
] =

4591 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_21
, 
‰eq
,

4592 
is2GHz
);

4593 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_22
] =

4594 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_22
, 
‰eq
,

4595 
is2GHz
);

4596 
èrgëPowîVÆT2
[
ALL_TARGET_HT20_23
] =

4597 
	`¨9003_hw_ì¥om_gë_ht20_tgt_pwr
(
ah
, 
HT_TARGET_RATE_23
, 
‰eq
,

4598 
is2GHz
);

4599 
	}
}

4601 
	$¨9003_hw_gë_ht40_èrgë_powîs
(
©h_hw
 *
ah
,

4602 
u16
 
‰eq
,

4603 
u8
 *
èrgëPowîVÆT2
,

4604 
boﬁ
 
is2GHz
)

4607 
u8
 
ht40PowîIncF‹Pdadc
 = 0;

4609 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_0_8_16
] =

4610 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_0_8_16
, 
‰eq
,

4611 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4612 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_1_3_9_11_17_19
] =

4613 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_1_3_9_11_17_19
,

4614 
‰eq
,

4615 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4616 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_4
] =

4617 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_4
, 
‰eq
,

4618 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4619 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_5
] =

4620 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_5
, 
‰eq
,

4621 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4622 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_6
] =

4623 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_6
, 
‰eq
,

4624 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4625 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_7
] =

4626 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_7
, 
‰eq
,

4627 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4628 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_12
] =

4629 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_12
, 
‰eq
,

4630 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4631 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_13
] =

4632 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_13
, 
‰eq
,

4633 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4634 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_14
] =

4635 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_14
, 
‰eq
,

4636 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4637 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_15
] =

4638 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_15
, 
‰eq
,

4639 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4640 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_20
] =

4641 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_20
, 
‰eq
,

4642 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4643 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_21
] =

4644 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_21
, 
‰eq
,

4645 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4646 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_22
] =

4647 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_22
, 
‰eq
,

4648 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4649 
èrgëPowîVÆT2
[
ALL_TARGET_HT40_23
] =

4650 
	`¨9003_hw_ì¥om_gë_ht40_tgt_pwr
(
ah
, 
HT_TARGET_RATE_23
, 
‰eq
,

4651 
is2GHz
Ë+ 
ht40PowîIncF‹Pdadc
;

4652 
	}
}

4654 
	$¨9003_hw_gë_èrgë_powî_ì¥om
(
©h_hw
 *
ah
,

4655 
©h9k_ch™√l
 *
ch™
,

4656 
u8
 *
èrgëPowîVÆT2
)

4658 
boﬁ
 
is2GHz
 = 
	`IS_CHAN_2GHZ
(
ch™
);

4659 
i
 = 0;

4660 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

4661 
u16
 
‰eq
 = 
ch™
->
ch™√l
;

4663 i‡(
is2GHz
)

4664 
	`¨9003_hw_gë_cck_èrgë_powîs
(
ah
, 
‰eq
, 
èrgëPowîVÆT2
);

4666 
	`¨9003_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
‰eq
, 
èrgëPowîVÆT2
, 
is2GHz
);

4667 
	`¨9003_hw_gë_ht20_èrgë_powîs
(
ah
, 
‰eq
, 
èrgëPowîVÆT2
, 
is2GHz
);

4669 i‡(
	`IS_CHAN_HT40
(
ch™
))

4670 
	`¨9003_hw_gë_ht40_èrgë_powîs
(
ah
, 
‰eq
, 
èrgëPowîVÆT2
,

4671 
is2GHz
);

4673 
i
 = 0; i < 
¨9300R©eSize
; i++) {

4674 
	`©h_dbg
(
comm⁄
, 
REGULATORY
, "TPC[%02d] 0x%08x\n",

4675 
i
, 
èrgëPowîVÆT2
[i]);

4677 
	}
}

4679 
	$¨9003_hw_ˇl_põr_gë
(
©h_hw
 *
ah
,

4680 
mode
,

4681 
ùõr
,

4682 
ichaö
,

4683 *
p‰equícy
,

4684 *
pc‹ª˘i⁄
,

4685 *
±em≥øtuª
, *
pvﬁège
)

4687 
u8
 *
pCÆPõr
;

4688 
¨9300_ˇl_d©a_≥r_‰eq_›_lo›
 *
pCÆPõrSåu˘
;

4689 
is2GHz
;

4690 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4691 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

4693 i‡(
ichaö
 >
AR9300_MAX_CHAINS
) {

4694 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

4696 
AR9300_MAX_CHAINS
);

4700 i‡(
mode
) {

4701 i‡(
ùõr
 >
AR9300_NUM_5G_CAL_PIERS
) {

4702 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

4704 
AR9300_NUM_5G_CAL_PIERS
);

4707 
pCÆPõr
 = &(
ìp
->
ˇlFªqPõr5G
[
ùõr
]);

4708 
pCÆPõrSåu˘
 = &(
ìp
->
ˇlPõrD©a5G
[
ichaö
][
ùõr
]);

4709 
is2GHz
 = 0;

4711 i‡(
ùõr
 >
AR9300_NUM_2G_CAL_PIERS
) {

4712 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

4714 
AR9300_NUM_2G_CAL_PIERS
);

4718 
pCÆPõr
 = &(
ìp
->
ˇlFªqPõr2G
[
ùõr
]);

4719 
pCÆPõrSåu˘
 = &(
ìp
->
ˇlPõrD©a2G
[
ichaö
][
ùõr
]);

4720 
is2GHz
 = 1;

4723 *
p‰equícy
 = 
	`©h9k_hw_fbö2‰eq
(*
pCÆPõr
, 
is2GHz
);

4724 *
pc‹ª˘i⁄
 = 
pCÆPõrSåu˘
->
ªfPowî
;

4725 *
±em≥øtuª
 = 
pCÆPõrSåu˘
->
ãmpMós
;

4726 *
pvﬁège
 = 
pCÆPõrSåu˘
->
vﬁtMós
;

4729 
	}
}

4731 
	$¨9003_hw_powî_c⁄åﬁ_ovîride
(
©h_hw
 *
ah
,

4732 
‰equícy
,

4733 *
c‹ª˘i⁄
,

4734 *
vﬁège
, *
ãm≥øtuª
)

4736 
ãmp_¶›e
 = 0, 
ãmp_¶›e1
 = 0, 
ãmp_¶›e2
 = 0;

4737 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

4738 
f
[8], 
t
[8], 
t1
[3], 
t2
[3], 
i
;

4740 
	`REG_RMW
(
ah
, 
AR_PHY_TPC_11_B0
,

4741 (
c‹ª˘i⁄
[0] << 
AR_PHY_TPC_OLPC_GAIN_DELTA_S
),

4742 
AR_PHY_TPC_OLPC_GAIN_DELTA
);

4743 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(1))

4744 
	`REG_RMW
(
ah
, 
AR_PHY_TPC_11_B1
,

4745 (
c‹ª˘i⁄
[1] << 
AR_PHY_TPC_OLPC_GAIN_DELTA_S
),

4746 
AR_PHY_TPC_OLPC_GAIN_DELTA
);

4747 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(2))

4748 
	`REG_RMW
(
ah
, 
AR_PHY_TPC_11_B2
,

4749 (
c‹ª˘i⁄
[2] << 
AR_PHY_TPC_OLPC_GAIN_DELTA_S
),

4750 
AR_PHY_TPC_OLPC_GAIN_DELTA
);

4753 
	`REG_RMW
(
ah
, 
AR_PHY_TPC_6_B0
,

4754 (3 << 
AR_PHY_TPC_6_ERROR_EST_MODE_S
),

4755 
AR_PHY_TPC_6_ERROR_EST_MODE
);

4756 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(1))

4757 
	`REG_RMW
(
ah
, 
AR_PHY_TPC_6_B1
,

4758 (3 << 
AR_PHY_TPC_6_ERROR_EST_MODE_S
),

4759 
AR_PHY_TPC_6_ERROR_EST_MODE
);

4760 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(2))

4761 
	`REG_RMW
(
ah
, 
AR_PHY_TPC_6_B2
,

4762 (3 << 
AR_PHY_TPC_6_ERROR_EST_MODE_S
),

4763 
AR_PHY_TPC_6_ERROR_EST_MODE
);

4769 i‡(
‰equícy
 < 4000) {

4770 
ãmp_¶›e
 = 
ìp
->
modÆHódî2G
.
ãmpSl›e
;

4772 i‡(
	`AR_SREV_9550
(
ah
)) {

4773 
t
[0] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[2];

4774 
t1
[0] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[3];

4775 
t2
[0] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[4];

4776 
f
[0] = 5180;

4778 
t
[1] = 
ìp
->
modÆHódî5G
.
ãmpSl›e
;

4779 
t1
[1] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[0];

4780 
t2
[1] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[1];

4781 
f
[1] = 5500;

4783 
t
[2] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[5];

4784 
t1
[2] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[6];

4785 
t2
[2] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[7];

4786 
f
[2] = 5785;

4788 
ãmp_¶›e
 = 
	`¨9003_hw_powî_öãΩﬁ©e
(
‰equícy
,

4789 
f
, 
t
, 3);

4790 
ãmp_¶›e1
 = 
	`¨9003_hw_powî_öãΩﬁ©e
(
‰equícy
,

4791 
f
, 
t1
, 3);

4792 
ãmp_¶›e2
 = 
	`¨9003_hw_powî_öãΩﬁ©e
(
‰equícy
,

4793 
f
, 
t2
, 3);

4795 
ãmp¶›e
;

4798 i‡((
ìp
->
ba£EïHódî
.
miscC⁄figuøti⁄
 & 0x20) != 0) {

4799 
i
 = 0; i < 8; i++) {

4800 
t
[
i
] = 
ìp
->
ba£_ext1
.
ãmp¶›exãnsi⁄
[i];

4801 
f
[
i
] = 
	`FBIN2FREQ
(
ìp
->
ˇlFªqPõr5G
[i], 0);

4803 
ãmp_¶›e
 = 
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
‰equícy
,

4804 
f
, 
t
, 8);

4805 } i‡(
ìp
->
ba£_ext2
.
ãmpSl›eLow
 != 0) {

4806 
t
[0] = 
ìp
->
ba£_ext2
.
ãmpSl›eLow
;

4807 
f
[0] = 5180;

4808 
t
[1] = 
ìp
->
modÆHódî5G
.
ãmpSl›e
;

4809 
f
[1] = 5500;

4810 
t
[2] = 
ìp
->
ba£_ext2
.
ãmpSl›eHigh
;

4811 
f
[2] = 5785;

4812 
ãmp_¶›e
 = 
	`¨9003_hw_powî_öãΩﬁ©e
((
s32
Ë
‰equícy
,

4813 
f
, 
t
, 3);

4815 
ãmp_¶›e
 = 
ìp
->
modÆHódî5G
.
ãmpSl›e
;

4819 
ãmp¶›e
:

4820 i‡(
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9531
◊hË|| 
	`AR_SREV_9561
(ah)) {

4821 
u8
 
txmask
 = (
ìp
->
ba£EïHódî
.
txrxMask
 & 0xf0) >> 4;

4827 i‡(
ìp
->
ba£EïHódî
.
„©uªE«bÀ
 & 0x1) {

4828 i‡(
‰equícy
 < 4000) {

4829 i‡(
txmask
 & 
	`BIT
(0))

4830 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19
,

4831 
AR_PHY_TPC_19_ALPHA_THERM
,

4832 
ìp
->
ba£_ext2
.
ãmpSl›eLow
);

4833 i‡(
txmask
 & 
	`BIT
(1))

4834 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B1
,

4835 
AR_PHY_TPC_19_ALPHA_THERM
,

4836 
ãmp_¶›e
);

4837 i‡(
txmask
 & 
	`BIT
(2))

4838 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B2
,

4839 
AR_PHY_TPC_19_ALPHA_THERM
,

4840 
ìp
->
ba£_ext2
.
ãmpSl›eHigh
);

4842 i‡(
txmask
 & 
	`BIT
(0))

4843 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19
,

4844 
AR_PHY_TPC_19_ALPHA_THERM
,

4845 
ãmp_¶›e
);

4846 i‡(
txmask
 & 
	`BIT
(1))

4847 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B1
,

4848 
AR_PHY_TPC_19_ALPHA_THERM
,

4849 
ãmp_¶›e1
);

4850 i‡(
txmask
 & 
	`BIT
(2))

4851 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B2
,

4852 
AR_PHY_TPC_19_ALPHA_THERM
,

4853 
ãmp_¶›e2
);

4860 i‡(
txmask
 & 
	`BIT
(0))

4861 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19
,

4862 
AR_PHY_TPC_19_ALPHA_THERM
, 0);

4863 i‡(
txmask
 & 
	`BIT
(1))

4864 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B1
,

4865 
AR_PHY_TPC_19_ALPHA_THERM
, 0);

4866 i‡(
txmask
 & 
	`BIT
(2))

4867 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B2
,

4868 
AR_PHY_TPC_19_ALPHA_THERM
, 0);

4871 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19
,

4872 
AR_PHY_TPC_19_ALPHA_THERM
, 
ãmp_¶›e
);

4875 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
))

4876 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_19_B1
,

4877 
AR_PHY_TPC_19_B1_ALPHA_THERM
, 
ãmp_¶›e
);

4880 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_18
, 
AR_PHY_TPC_18_THERM_CAL_VALUE
,

4881 
ãm≥øtuª
[0]);

4882 
	}
}

4885 
	$¨9003_hw_ˇlibøti⁄_≠∂y
(
©h_hw
 *
ah
, 
‰equícy
)

4887 
ichaö
, 
ùõr
, 
≈õr
;

4888 
mode
;

4889 
l‰equícy
[
AR9300_MAX_CHAINS
],

4890 
lc‹ª˘i⁄
[
AR9300_MAX_CHAINS
],

4891 
…em≥øtuª
[
AR9300_MAX_CHAINS
], 
lvﬁège
[AR9300_MAX_CHAINS];

4892 
h‰equícy
[
AR9300_MAX_CHAINS
],

4893 
hc‹ª˘i⁄
[
AR9300_MAX_CHAINS
],

4894 
hãm≥øtuª
[
AR9300_MAX_CHAINS
], 
hvﬁège
[AR9300_MAX_CHAINS];

4895 
fdiff
;

4896 
c‹ª˘i⁄
[
AR9300_MAX_CHAINS
],

4897 
vﬁège
[
AR9300_MAX_CHAINS
], 
ãm≥øtuª
[AR9300_MAX_CHAINS];

4898 
p‰equícy
, 
pc‹ª˘i⁄
, 
±em≥øtuª
, 
pvﬁège
;

4899 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

4901 
mode
 = (
‰equícy
 >= 4000);

4902 i‡(
mode
)

4903 
≈õr
 = 
AR9300_NUM_5G_CAL_PIERS
;

4905 
≈õr
 = 
AR9300_NUM_2G_CAL_PIERS
;

4907 
ichaö
 = 0; ichaö < 
AR9300_MAX_CHAINS
; ichain++) {

4908 
l‰equícy
[
ichaö
] = 0;

4909 
h‰equícy
[
ichaö
] = 100000;

4912 
ichaö
 = 0; ichaö < 
AR9300_MAX_CHAINS
; ichain++) {

4913 
ùõr
 = 0; ipõ∏< 
≈õr
; ipier++) {

4914 i‡(!
	`¨9003_hw_ˇl_põr_gë
(
ah
, 
mode
, 
ùõr
, 
ichaö
,

4915 &
p‰equícy
, &
pc‹ª˘i⁄
,

4916 &
±em≥øtuª
, &
pvﬁège
)) {

4917 
fdiff
 = 
‰equícy
 - 
p‰equícy
;

4923 i‡(
fdiff
 <= 0) {

4924 i‡(
h‰equícy
[
ichaö
] <= 0 ||

4925 
h‰equícy
[
ichaö
] >= 100000 ||

4926 
fdiff
 >

4927 (
‰equícy
 - 
h‰equícy
[
ichaö
])) {

4932 
h‰equícy
[
ichaö
] = 
p‰equícy
;

4933 
hc‹ª˘i⁄
[
ichaö
] =

4934 
pc‹ª˘i⁄
;

4935 
hãm≥øtuª
[
ichaö
] =

4936 
±em≥øtuª
;

4937 
hvﬁège
[
ichaö
] = 
pvﬁège
;

4940 i‡(
fdiff
 >= 0) {

4941 i‡(
l‰equícy
[
ichaö
] <= 0

4942 || 
fdiff
 <

4943 (
‰equícy
 - 
l‰equícy
[
ichaö
])) {

4948 
l‰equícy
[
ichaö
] = 
p‰equícy
;

4949 
lc‹ª˘i⁄
[
ichaö
] =

4950 
pc‹ª˘i⁄
;

4951 
…em≥øtuª
[
ichaö
] =

4952 
±em≥øtuª
;

4953 
lvﬁège
[
ichaö
] = 
pvﬁège
;

4961 
ichaö
 = 0; ichaö < 
AR9300_MAX_CHAINS
; ichain++) {

4962 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "ch=%d f=%dÜow=%d %d h=%d %d\n",

4963 
ichaö
, 
‰equícy
, 
l‰equícy
[ichain],

4964 
lc‹ª˘i⁄
[
ichaö
], 
h‰equícy
[ichain],

4965 
hc‹ª˘i⁄
[
ichaö
]);

4967 i‡(
h‰equícy
[
ichaö
] =
l‰equícy
[ichain]) {

4968 
c‹ª˘i⁄
[
ichaö
] = 
lc‹ª˘i⁄
[ichain];

4969 
vﬁège
[
ichaö
] = 
lvﬁège
[ichain];

4970 
ãm≥øtuª
[
ichaö
] = 
…em≥øtuª
[ichain];

4973 i‡(
‰equícy
 - 
l‰equícy
[
ichaö
] < 1000) {

4975 i‡(
h‰equícy
[
ichaö
] - 
‰equícy
 < 1000) {

4977 
c‹ª˘i⁄
[
ichaö
] = 
	`öãΩﬁ©e
(
‰equícy
,

4978 
l‰equícy
[
ichaö
],

4979 
h‰equícy
[
ichaö
],

4980 
lc‹ª˘i⁄
[
ichaö
],

4981 
hc‹ª˘i⁄
[
ichaö
]);

4983 
ãm≥øtuª
[
ichaö
] = 
	`öãΩﬁ©e
(
‰equícy
,

4984 
l‰equícy
[
ichaö
],

4985 
h‰equícy
[
ichaö
],

4986 
…em≥øtuª
[
ichaö
],

4987 
hãm≥øtuª
[
ichaö
]);

4989 
vﬁège
[
ichaö
] = 
	`öãΩﬁ©e
(
‰equícy
,

4990 
l‰equícy
[
ichaö
],

4991 
h‰equícy
[
ichaö
],

4992 
lvﬁège
[
ichaö
],

4993 
hvﬁège
[
ichaö
]);

4997 
c‹ª˘i⁄
[
ichaö
] = 
lc‹ª˘i⁄
[ichain];

4998 
ãm≥øtuª
[
ichaö
] = 
…em≥øtuª
[ichain];

4999 
vﬁège
[
ichaö
] = 
lvﬁège
[ichain];

5003 i‡(
h‰equícy
[
ichaö
] - 
‰equícy
 < 1000) {

5004 
c‹ª˘i⁄
[
ichaö
] = 
hc‹ª˘i⁄
[ichain];

5005 
ãm≥øtuª
[
ichaö
] = 
hãm≥øtuª
[ichain];

5006 
vﬁège
[
ichaö
] = 
hvﬁège
[ichain];

5008 
c‹ª˘i⁄
[
ichaö
] = 0;

5009 
ãm≥øtuª
[
ichaö
] = 0;

5010 
vﬁège
[
ichaö
] = 0;

5014 
	`¨9003_hw_powî_c⁄åﬁ_ovîride
(
ah
, 
‰equícy
, 
c‹ª˘i⁄
, 
vﬁège
,

5015 
ãm≥øtuª
);

5017 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

5019 
‰equícy
, 
c‹ª˘i⁄
[0], correction[1], correction[2]);

5022 
	}
}

5024 
u16
 
	$¨9003_hw_gë_dúe˘_edge_powî
(
¨9300_ì¥om
 *
ìp
,

5025 
idx
,

5026 
edge
,

5027 
boﬁ
 
is2GHz
)

5029 
ˇl_˘l_d©a_2g
 *
˘l_2g
 = 
ìp
->
˘lPowîD©a_2G
;

5030 
ˇl_˘l_d©a_5g
 *
˘l_5g
 = 
ìp
->
˘lPowîD©a_5G
;

5032 i‡(
is2GHz
)

5033  
	`CTL_EDGE_TPOWER
(
˘l_2g
[
idx
].
˘lEdges
[
edge
]);

5035  
	`CTL_EDGE_TPOWER
(
˘l_5g
[
idx
].
˘lEdges
[
edge
]);

5036 
	}
}

5038 
u16
 
	$¨9003_hw_gë_ödúe˘_edge_powî
(
¨9300_ì¥om
 *
ìp
,

5039 
idx
,

5040 
edge
,

5041 
u16
 
‰eq
,

5042 
boﬁ
 
is2GHz
)

5044 
ˇl_˘l_d©a_2g
 *
˘l_2g
 = 
ìp
->
˘lPowîD©a_2G
;

5045 
ˇl_˘l_d©a_5g
 *
˘l_5g
 = 
ìp
->
˘lPowîD©a_5G
;

5047 
u8
 *
˘l_‰eqbö
 = 
is2GHz
 ?

5048 &
ìp
->
˘l_‰eqbö_2G
[
idx
][0] :

5049 &
ìp
->
˘l_‰eqbö_5G
[
idx
][0];

5051 i‡(
is2GHz
) {

5052 i‡(
	`©h9k_hw_fbö2‰eq
(
˘l_‰eqbö
[
edge
 - 1], 1Ë< 
‰eq
 &&

5053 
	`CTL_EDGE_FLAGS
(
˘l_2g
[
idx
].
˘lEdges
[
edge
 - 1]))

5054  
	`CTL_EDGE_TPOWER
(
˘l_2g
[
idx
].
˘lEdges
[
edge
 - 1]);

5056 i‡(
	`©h9k_hw_fbö2‰eq
(
˘l_‰eqbö
[
edge
 - 1], 0Ë< 
‰eq
 &&

5057 
	`CTL_EDGE_FLAGS
(
˘l_5g
[
idx
].
˘lEdges
[
edge
 - 1]))

5058  
	`CTL_EDGE_TPOWER
(
˘l_5g
[
idx
].
˘lEdges
[
edge
 - 1]);

5061  
MAX_RATE_POWER
;

5062 
	}
}

5067 
u16
 
	$¨9003_hw_gë_max_edge_powî
(
¨9300_ì¥om
 *
ìp
,

5068 
u16
 
‰eq
, 
idx
, 
boﬁ
 
is2GHz
)

5070 
u16
 
twi˚MaxEdgePowî
 = 
MAX_RATE_POWER
;

5071 
u8
 *
˘l_‰eqbö
 = 
is2GHz
 ?

5072 &
ìp
->
˘l_‰eqbö_2G
[
idx
][0] :

5073 &
ìp
->
˘l_‰eqbö_5G
[
idx
][0];

5074 
u16
 
num_edges
 = 
is2GHz
 ?

5075 
AR9300_NUM_BAND_EDGES_2G
 : 
AR9300_NUM_BAND_EDGES_5G
;

5076 
edge
;

5079 
edge
 = 0;

5080 (
edge
 < 
num_edges
Ë&& (
˘l_‰eqbö
[edge] !
AR5416_BCHAN_UNUSED
);

5081 
edge
++) {

5086 i‡(
‰eq
 =
	`©h9k_hw_fbö2‰eq
(
˘l_‰eqbö
[
edge
], 
is2GHz
)) {

5087 
twi˚MaxEdgePowî
 =

5088 
	`¨9003_hw_gë_dúe˘_edge_powî
(
ìp
, 
idx
,

5089 
edge
, 
is2GHz
);

5091 } i‡((
edge
 > 0) &&

5092 (
‰eq
 < 
	`©h9k_hw_fbö2‰eq
(
˘l_‰eqbö
[
edge
],

5093 
is2GHz
))) {

5094 
twi˚MaxEdgePowî
 =

5095 
	`¨9003_hw_gë_ödúe˘_edge_powî
(
ìp
, 
idx
,

5096 
edge
, 
‰eq
,

5097 
is2GHz
);

5106 i‡(
is2GHz
 && !
twi˚MaxEdgePowî
)

5107 
twi˚MaxEdgePowî
 = 60;

5109  
twi˚MaxEdgePowî
;

5110 
	}
}

5112 
	$¨9003_hw_£t_powî_≥r_øã_èbÀ
(
©h_hw
 *
ah
,

5113 
©h9k_ch™√l
 *
ch™
,

5114 
u8
 *
pPwrAºay
, 
u16
 
cfgCé
,

5115 
u8
 
™ã¬a_ªdu˘i⁄
,

5116 
u16
 
powîLimô
)

5118 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

5119 
¨9300_ì¥om
 *
pEïD©a
 = &
ah
->
ì¥om
.
¨9300_ìp
;

5120 
u16
 
twi˚MaxEdgePowî
;

5121 
i
;

5122 
u16
 
sˇÀdPowî
 = 0, 
möCéPowî
;

5123 c⁄° 
u16
 
˘lModesF‹11a
[] = {

5124 
CTL_11A
, 
CTL_5GHT20
, 
CTL_11A_EXT
, 
CTL_5GHT40


5126 c⁄° 
u16
 
˘lModesF‹11g
[] = {

5127 
CTL_11B
, 
CTL_11G
, 
CTL_2GHT20
, 
CTL_11B_EXT
,

5128 
CTL_11G_EXT
, 
CTL_2GHT40


5130 
u16
 
numCéModes
;

5131 c⁄° 
u16
 *
pCéMode
;

5132 
u16
 
˘lMode
, 
‰eq
;

5133 
ch™_˚¡îs
 
˚¡îs
;

5134 
u8
 *
˘lIndex
;

5135 
u8
 
˘lNum
;

5136 
u16
 
twi˚MöEdgePowî
;

5137 
boﬁ
 
is2ghz
 = 
	`IS_CHAN_2GHZ
(
ch™
);

5139 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

5140 
sˇÀdPowî
 = 
	`©h9k_hw_gë_sˇÀd_powî
(
ah
, 
powîLimô
,

5141 
™ã¬a_ªdu˘i⁄
);

5143 i‡(
is2ghz
) {

5146 
numCéModes
 =

5147 
	`ARRAY_SIZE
(
˘lModesF‹11g
) -

5148 
SUB_NUM_CTL_MODES_AT_2G_40
;

5149 
pCéMode
 = 
˘lModesF‹11g
;

5150 i‡(
	`IS_CHAN_HT40
(
ch™
))

5152 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11g
);

5156 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11a
) -

5157 
SUB_NUM_CTL_MODES_AT_5G_40
;

5158 
pCéMode
 = 
˘lModesF‹11a
;

5159 i‡(
	`IS_CHAN_HT40
(
ch™
))

5161 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11a
);

5172 
˘lMode
 = 0; céModê< 
numCéModes
; ctlMode++) {

5173 
boﬁ
 
isHt40CéMode
 = (
pCéMode
[
˘lMode
] =
CTL_5GHT40
) ||

5174 (
pCéMode
[
˘lMode
] =
CTL_2GHT40
);

5175 i‡(
isHt40CéMode
)

5176 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

5177 i‡(
pCéMode
[
˘lMode
] & 
EXT_ADDITIVE
)

5178 
‰eq
 = 
˚¡îs
.
ext_˚¡î
;

5180 
‰eq
 = 
˚¡îs
.
˘l_˚¡î
;

5182 
	`©h_dbg
(
comm⁄
, 
REGULATORY
,

5184 
˘lMode
, 
numCéModes
, 
isHt40CéMode
,

5185 (
pCéMode
[
˘lMode
] & 
EXT_ADDITIVE
));

5188 i‡(
is2ghz
) {

5189 
˘lIndex
 = 
pEïD©a
->
˘lIndex_2G
;

5190 
˘lNum
 = 
AR9300_NUM_CTLS_2G
;

5192 
˘lIndex
 = 
pEïD©a
->
˘lIndex_5G
;

5193 
˘lNum
 = 
AR9300_NUM_CTLS_5G
;

5196 
twi˚MaxEdgePowî
 = 
MAX_RATE_POWER
;

5197 
i
 = 0; (ò< 
˘lNum
Ë&& 
˘lIndex
[i]; i++) {

5198 
	`©h_dbg
(
comm⁄
, 
REGULATORY
,

5200 
i
, 
cfgCé
, 
pCéMode
[
˘lMode
], 
˘lIndex
[i],

5201 
ch™
->
ch™√l
);

5208 i‡((((
cfgCé
 & ~
CTL_MODE_M
) |

5209 (
pCéMode
[
˘lMode
] & 
CTL_MODE_M
)) ==

5210 
˘lIndex
[
i
]) ||

5211 (((
cfgCé
 & ~
CTL_MODE_M
) |

5212 (
pCéMode
[
˘lMode
] & 
CTL_MODE_M
)) ==

5213 ((
˘lIndex
[
i
] & 
CTL_MODE_M
) |

5214 
SD_NO_CTL
))) {

5215 
twi˚MöEdgePowî
 =

5216 
	`¨9003_hw_gë_max_edge_powî
(
pEïD©a
,

5217 
‰eq
, 
i
,

5218 
is2ghz
);

5220 i‡((
cfgCé
 & ~
CTL_MODE_M
Ë=
SD_NO_CTL
)

5226 
twi˚MaxEdgePowî
 =

5227 
	`mö
(
twi˚MaxEdgePowî
,

5228 
twi˚MöEdgePowî
);

5231 
twi˚MaxEdgePowî
 = 
twi˚MöEdgePowî
;

5237 
möCéPowî
 = (
u8
)
	`mö
(
twi˚MaxEdgePowî
, 
sˇÀdPowî
);

5239 
	`©h_dbg
(
comm⁄
, 
REGULATORY
,

5241 
˘lMode
, 
pCéMode
[˘lMode], 
twi˚MaxEdgePowî
,

5242 
sˇÀdPowî
, 
möCéPowî
);

5245 
pCéMode
[
˘lMode
]) {

5246 
CTL_11B
:

5247 
i
 = 
ALL_TARGET_LEGACY_1L_5L
;

5248 
i
 <
ALL_TARGET_LEGACY_11S
; i++)

5249 
pPwrAºay
[
i
] = (
u8
)
	`mö
((
u16
)pPwrArray[i],

5250 
möCéPowî
);

5252 
CTL_11A
:

5253 
CTL_11G
:

5254 
i
 = 
ALL_TARGET_LEGACY_6_24
;

5255 
i
 <
ALL_TARGET_LEGACY_54
; i++)

5256 
pPwrAºay
[
i
] = (
u8
)
	`mö
((
u16
)pPwrArray[i],

5257 
möCéPowî
);

5259 
CTL_5GHT20
:

5260 
CTL_2GHT20
:

5261 
i
 = 
ALL_TARGET_HT20_0_8_16
;

5262 
i
 <
ALL_TARGET_HT20_23
; i++) {

5263 
pPwrAºay
[
i
] = (
u8
)
	`mö
((
u16
)pPwrArray[i],

5264 
möCéPowî
);

5265 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

5266 
pPwrAºay
[
i
] =

5267 (
u8
)
	`mö
((
u16
)
pPwrAºay
[
i
],

5268 
	`¨9003_mci_gë_max_txpowî
(
ah
,

5269 
pCéMode
[
˘lMode
]));

5272 
CTL_5GHT40
:

5273 
CTL_2GHT40
:

5274 
i
 = 
ALL_TARGET_HT40_0_8_16
;

5275 
i
 <
ALL_TARGET_HT40_23
; i++) {

5276 
pPwrAºay
[
i
] = (
u8
)
	`mö
((
u16
)pPwrArray[i],

5277 
möCéPowî
);

5278 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

5279 
pPwrAºay
[
i
] =

5280 (
u8
)
	`mö
((
u16
)
pPwrAºay
[
i
],

5281 
	`¨9003_mci_gë_max_txpowî
(
ah
,

5282 
pCéMode
[
˘lMode
]));

5289 
	}
}

5291 
ölöe
 
u8
 
	$mcsidx_to_tgçwridx
(
mcs_idx
, 
u8
 
ba£_pwridx
)

5293 
u8
 
mod_idx
 = 
mcs_idx
 % 8;

5295 i‡(
mod_idx
 <= 3)

5296  
mod_idx
 ? (
ba£_pwridx
 + 1) : base_pwridx;

5298  
ba£_pwridx
 + 4 * (
mcs_idx
 / 8Ë+ 
mod_idx
 - 2;

5299 
	}
}

5301 
	$¨9003_∑¥d_£t_txpowî
(
©h_hw
 *
ah
,

5302 
©h9k_ch™√l
 *
ch™
,

5303 
u8
 *
èrgëPowîVÆT2
)

5305 
i
;

5307 i‡(!
	`¨9003_is_∑¥d_íabÀd
(
ah
))

5310 i‡(
	`IS_CHAN_HT40
(
ch™
))

5311 
i
 = 
ALL_TARGET_HT40_7
;

5313 
i
 = 
ALL_TARGET_HT20_7
;

5315 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

5316 i‡(!
	`AR_SREV_9330
(
ah
Ë&& !
	`AR_SREV_9340
(ah) &&

5317 !
	`AR_SREV_9462
(
ah
Ë&& !
	`AR_SREV_9565
(ah)) {

5318 i‡(
	`IS_CHAN_HT40
(
ch™
))

5319 
i
 = 
ALL_TARGET_HT40_0_8_16
;

5321 
i
 = 
ALL_TARGET_HT20_0_8_16
;

5325 
ah
->
∑¥d_èrgë_powî
 = 
èrgëPowîVÆT2
[
i
];

5326 
	}
}

5328 
	$©h9k_hw_¨9300_£t_txpowî
(
©h_hw
 *
ah
,

5329 
©h9k_ch™√l
 *
ch™
, 
u16
 
cfgCé
,

5330 
u8
 
twi˚A¡í«Redu˘i⁄
,

5331 
u8
 
powîLimô
, 
boﬁ
 
ã°
)

5333 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

5334 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

5335 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

5336 
¨9300_modÆ_ìp_hódî
 *
modÆ_hdr
;

5337 
u8
 
èrgëPowîVÆT2
[
¨9300R©eSize
];

5338 
u8
 
èrgë_powî_vÆ_t2_ìp
[
¨9300R©eSize
];

5339 
u8
 
èrgëPowîVÆT2_çc
[
¨9300R©eSize
];

5340 
i
 = 0, 
∑¥d_sˇÀ_Á˘‹
 = 0;

5341 
u8
 
pwr_idx
, 
mö_pwridx
 = 0;

5343 
	`mem£t
(
èrgëPowîVÆT2
, 0 , (targetPowerValT2));

5348 
	`¨9003_hw_gë_èrgë_powî_ì¥om
(
ah
, 
ch™
, 
èrgëPowîVÆT2
);

5350 i‡(
	`¨9003_is_∑¥d_íabÀd
(
ah
)) {

5351 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

5352 
modÆ_hdr
 = &
ìp
->
modÆHódî2G
;

5354 
modÆ_hdr
 = &
ìp
->
modÆHódî5G
;

5356 
ah
->
∑¥d_øãmask
 =

5357 
	`À32_to_˝u
(
modÆ_hdr
->
∑pdR©eMaskHt20
) &

5358 
AR9300_PAPRD_RATE_MASK
;

5360 
ah
->
∑¥d_øãmask_ht40
 =

5361 
	`À32_to_˝u
(
modÆ_hdr
->
∑pdR©eMaskHt40
) &

5362 
AR9300_PAPRD_RATE_MASK
;

5364 
∑¥d_sˇÀ_Á˘‹
 = 
	`¨9003_gë_∑¥d_sˇÀ_Á˘‹
(
ah
, 
ch™
);

5365 
mö_pwridx
 = 
	`IS_CHAN_HT40
(
ch™
Ë? 
ALL_TARGET_HT40_0_8_16
 :

5366 
ALL_TARGET_HT20_0_8_16
;

5368 i‡(!
ah
->
∑¥d_èbÀ_wrôe_d⁄e
) {

5369 
	`mem˝y
(
èrgë_powî_vÆ_t2_ìp
, 
èrgëPowîVÆT2
,

5370 (
èrgëPowîVÆT2
));

5371 
i
 = 0; i < 24; i++) {

5372 
pwr_idx
 = 
	`mcsidx_to_tgçwridx
(
i
, 
mö_pwridx
);

5373 i‡(
ah
->
∑¥d_øãmask
 & (1 << 
i
)) {

5374 i‡(
èrgëPowîVÆT2
[
pwr_idx
] &&

5375 
èrgëPowîVÆT2
[
pwr_idx
] ==

5376 
èrgë_powî_vÆ_t2_ìp
[
pwr_idx
])

5377 
èrgëPowîVÆT2
[
pwr_idx
] -=

5378 
∑¥d_sˇÀ_Á˘‹
;

5382 
	`mem˝y
(
èrgë_powî_vÆ_t2_ìp
, 
èrgëPowîVÆT2
,

5383 (
èrgëPowîVÆT2
));

5386 
	`¨9003_hw_£t_powî_≥r_øã_èbÀ
(
ah
, 
ch™
,

5387 
èrgëPowîVÆT2
, 
cfgCé
,

5388 
twi˚A¡í«Redu˘i⁄
,

5389 
powîLimô
);

5391 
	`mem˝y
(
èrgëPowîVÆT2_çc
, 
èrgëPowîVÆT2
,

5392 (
èrgëPowîVÆT2
));

5394 i‡(
	`¨9003_is_∑¥d_íabÀd
(
ah
)) {

5395 
i
 = 0; i < 
¨9300R©eSize
; i++) {

5396 i‡((
ah
->
∑¥d_øãmask
 & (1 << 
i
)) &&

5397 (
	`abs
(
èrgëPowîVÆT2
[
i
] -

5398 
èrgë_powî_vÆ_t2_ìp
[
i
]) >

5399 
∑¥d_sˇÀ_Á˘‹
)) {

5400 
ah
->
∑¥d_øãmask
 &~(1 << 
i
);

5401 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

5402 "∑¥d dißbÀd f‹ mc†%d\n", 
i
);

5407 
ªguœt‹y
->
max_powî_Àvñ
 = 0;

5408 
i
 = 0; i < 
¨9300R©eSize
; i++) {

5409 i‡(
èrgëPowîVÆT2
[
i
] > 
ªguœt‹y
->
max_powî_Àvñ
)

5410 
ªguœt‹y
->
max_powî_Àvñ
 = 
èrgëPowîVÆT2
[
i
];

5413 
	`©h9k_hw_upd©e_ªguœt‹y_maxpowî
(
ah
);

5415 i‡(
ã°
)

5418 
i
 = 0; i < 
¨9300R©eSize
; i++) {

5419 
	`©h_dbg
(
comm⁄
, 
REGULATORY
, "TPC[%02d] 0x%08x\n",

5420 
i
, 
èrgëPowîVÆT2
[i]);

5424 
	`¨9003_hw_tx_powî_ªgwrôe
(
ah
, 
èrgëPowîVÆT2
);

5425 
	`¨9003_hw_ˇlibøti⁄_≠∂y
(
ah
, 
ch™
->
ch™√l
);

5426 
	`¨9003_∑¥d_£t_txpowî
(
ah
, 
ch™
, 
èrgëPowîVÆT2
);

5428 
	`¨9003_hw_£lfgí_çc_txpowî
(
ah
, 
ch™
, 
èrgëPowîVÆT2
);

5431 i‡(
ah
->
çc_íabÀd
) {

5432 
u32
 
vÆ
;

5434 
	`¨9003_hw_öô_øã_txpowî
(
ah
, 
èrgëPowîVÆT2_çc
, 
ch™
);

5437 
	`REG_WRITE
(
ah
, 
AR_PHY_PWRTX_MAX
,

5438 
AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE
);

5440 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_POWER_TX_SUB
);

5441 i‡(
	`AR_SREV_9340
(
ah
))

5442 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_SUB
,

5443 
vÆ
 & 0xFFFFFFC0);

5445 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_SUB
,

5446 
vÆ
 & 0xFFFFF000);

5449 
	`REG_WRITE
(
ah
, 
AR_PHY_PWRTX_MAX
, 0);

5451 
	}
}

5453 
u16
 
	$©h9k_hw_¨9300_gë_•ur_ch™√l
(
©h_hw
 *
ah
,

5454 
u16
 
i
, 
boﬁ
 
is2GHz
)

5456  
AR_NO_SPUR
;

5457 
	}
}

5459 
s32
 
	$¨9003_hw_gë_tx_gaö_idx
(
©h_hw
 *
ah
)

5461 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

5463  (
ìp
->
ba£EïHódî
.
txrxgaö
 >> 4) & 0xf;

5464 
	}
}

5466 
s32
 
	$¨9003_hw_gë_rx_gaö_idx
(
©h_hw
 *
ah
)

5468 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

5470  (
ìp
->
ba£EïHódî
.
txrxgaö
) & 0xf;

5471 
	}
}

5473 
u8
 *
	$¨9003_gë_•ur_ch™_±r
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
)

5475  
	`¨9003_modÆ_hódî
(
ah
, 
is2ghz
)->
•urCh™s
;

5476 
	}
}

5478 
	$¨9003_gë_∑¥d_sˇÀ_Á˘‹
(
©h_hw
 *
ah
,

5479 
©h9k_ch™√l
 *
ch™
)

5481 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

5483 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

5484  
	`MS
(
	`À32_to_˝u
(
ìp
->
modÆHódî2G
.
∑pdR©eMaskHt20
),

5485 
AR9300_PAPRD_SCALE_1
);

5487 i‡(
ch™
->
ch™√l
 >= 5700)

5488  
	`MS
(
	`À32_to_˝u
(
ìp
->
modÆHódî5G
.
∑pdR©eMaskHt20
),

5489 
AR9300_PAPRD_SCALE_1
);

5490 i‡(
ch™
->
ch™√l
 >= 5400)

5491  
	`MS
(
	`À32_to_˝u
(
ìp
->
modÆHódî5G
.
∑pdR©eMaskHt40
),

5492 
AR9300_PAPRD_SCALE_2
);

5494  
	`MS
(
	`À32_to_˝u
(
ìp
->
modÆHódî5G
.
∑pdR©eMaskHt40
),

5495 
AR9300_PAPRD_SCALE_1
);

5497 
	}
}

5499 c⁄° 
ì¥om_›s
 
	gìp_¨9300_›s
 = {

5500 .
check_ì¥om
 = 
©h9k_hw_¨9300_check_ì¥om
,

5501 .
	ggë_ì¥om
 = 
©h9k_hw_¨9300_gë_ì¥om
,

5502 .
	gfûl_ì¥om
 = 
©h9k_hw_¨9300_fûl_ì¥om
,

5503 .
	gdump_ì¥om
 = 
©h9k_hw_¨9003_dump_ì¥om
,

5504 .
	ggë_ì¥om_vî
 = 
©h9k_hw_¨9300_gë_ì¥om_vî
,

5505 .
	ggë_ì¥om_ªv
 = 
©h9k_hw_¨9300_gë_ì¥om_ªv
,

5506 .
	g£t_bﬂrd_vÆues
 = 
©h9k_hw_¨9300_£t_bﬂrd_vÆues
,

5507 .
	g£t_addac
 = 
©h9k_hw_¨9300_£t_addac
,

5508 .
	g£t_txpowî
 = 
©h9k_hw_¨9300_£t_txpowî
,

5509 .
	ggë_•ur_ch™√l
 = 
©h9k_hw_¨9300_gë_•ur_ch™√l


	@ar9003_eeprom.h

17 #i‚de‡
AR9003_EEPROM_H


18 
	#AR9003_EEPROM_H


	)

20 
	~<löux/ty≥s.h
>

22 
	#AR9300_EEP_VER
 0xD000

	)

23 
	#AR9300_EEP_VER_MINOR_MASK
 0xFFF

	)

24 
	#AR9300_EEP_MINOR_VER_1
 0x1

	)

25 
	#AR9300_EEP_MINOR_VER
 
AR9300_EEP_MINOR_VER_1


	)

28 
	#AR9300_EEP_START_LOC
 256

	)

29 
	#AR9300_NUM_5G_CAL_PIERS
 8

	)

30 
	#AR9300_NUM_2G_CAL_PIERS
 3

	)

31 
	#AR9300_NUM_5G_20_TARGET_POWERS
 8

	)

32 
	#AR9300_NUM_5G_40_TARGET_POWERS
 8

	)

33 
	#AR9300_NUM_2G_CCK_TARGET_POWERS
 2

	)

34 
	#AR9300_NUM_2G_20_TARGET_POWERS
 3

	)

35 
	#AR9300_NUM_2G_40_TARGET_POWERS
 3

	)

37 
	#AR9300_NUM_CTLS_5G
 9

	)

38 
	#AR9300_NUM_CTLS_2G
 12

	)

39 
	#AR9300_NUM_BAND_EDGES_5G
 8

	)

40 
	#AR9300_NUM_BAND_EDGES_2G
 4

	)

41 
	#AR9300_EEPMISC_BIG_ENDIAN
 0x01

	)

42 
	#AR9300_EEPMISC_WOW
 0x02

	)

43 
	#AR9300_CUSTOMER_DATA_SIZE
 20

	)

45 
	#AR9300_MAX_CHAINS
 3

	)

46 
	#AR9300_ANT_16S
 25

	)

47 
	#AR9300_FUTURE_MODAL_SZ
 6

	)

49 
	#AR9300_PAPRD_RATE_MASK
 0x01ffffff

	)

50 
	#AR9300_PAPRD_SCALE_1
 0x0e000000

	)

51 
	#AR9300_PAPRD_SCALE_1_S
 25

	)

52 
	#AR9300_PAPRD_SCALE_2
 0x70000000

	)

53 
	#AR9300_PAPRD_SCALE_2_S
 28

	)

55 
	#AR9300_EEP_ANTDIV_CONTROL_DEFAULT_VALUE
 0xc9

	)

64 
	#AR9300_PWR_TABLE_OFFSET
 0

	)

67 
	#AR9300_EEPROM_SIZE
 (16*1024)

	)

69 
	#AR9300_BASE_ADDR_4K
 0xfff

	)

70 
	#AR9300_BASE_ADDR
 0x3ff

	)

71 
	#AR9300_BASE_ADDR_512
 0x1ff

	)

73 
	#AR9300_OTP_BASE
 \

74 ((
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊h)Ë? 0x30000 : 0x14000)

	)

75 
	#AR9300_OTP_STATUS
 \

76 ((
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊h)Ë? 0x30018 : 0x15f18)

	)

77 
	#AR9300_OTP_STATUS_TYPE
 0x7

	)

78 
	#AR9300_OTP_STATUS_VALID
 0x4

	)

79 
	#AR9300_OTP_STATUS_ACCESS_BUSY
 0x2

	)

80 
	#AR9300_OTP_STATUS_SM_BUSY
 0x1

	)

81 
	#AR9300_OTP_READ_DATA
 \

82 ((
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊h)Ë? 0x3001¯: 0x15f1c)

	)

84 
	eèrgëPowîHTR©es
 {

85 
	mHT_TARGET_RATE_0_8_16
,

86 
	mHT_TARGET_RATE_1_3_9_11_17_19
,

87 
	mHT_TARGET_RATE_4
,

88 
	mHT_TARGET_RATE_5
,

89 
	mHT_TARGET_RATE_6
,

90 
	mHT_TARGET_RATE_7
,

91 
	mHT_TARGET_RATE_12
,

92 
	mHT_TARGET_RATE_13
,

93 
	mHT_TARGET_RATE_14
,

94 
	mHT_TARGET_RATE_15
,

95 
	mHT_TARGET_RATE_20
,

96 
	mHT_TARGET_RATE_21
,

97 
	mHT_TARGET_RATE_22
,

98 
	mHT_TARGET_RATE_23


101 
	eèrgëPowîLegacyR©es
 {

102 
	mLEGACY_TARGET_RATE_6_24
,

103 
	mLEGACY_TARGET_RATE_36
,

104 
	mLEGACY_TARGET_RATE_48
,

105 
	mLEGACY_TARGET_RATE_54


108 
	eèrgëPowîCckR©es
 {

109 
	mLEGACY_TARGET_RATE_1L_5L
,

110 
	mLEGACY_TARGET_RATE_5S
,

111 
	mLEGACY_TARGET_RATE_11L
,

112 
	mLEGACY_TARGET_RATE_11S


115 
	e¨9300_R©es
 {

116 
	mALL_TARGET_LEGACY_6_24
,

117 
	mALL_TARGET_LEGACY_36
,

118 
	mALL_TARGET_LEGACY_48
,

119 
	mALL_TARGET_LEGACY_54
,

120 
	mALL_TARGET_LEGACY_1L_5L
,

121 
	mALL_TARGET_LEGACY_5S
,

122 
	mALL_TARGET_LEGACY_11L
,

123 
	mALL_TARGET_LEGACY_11S
,

124 
	mALL_TARGET_HT20_0_8_16
,

125 
	mALL_TARGET_HT20_1_3_9_11_17_19
,

126 
	mALL_TARGET_HT20_4
,

127 
	mALL_TARGET_HT20_5
,

128 
	mALL_TARGET_HT20_6
,

129 
	mALL_TARGET_HT20_7
,

130 
	mALL_TARGET_HT20_12
,

131 
	mALL_TARGET_HT20_13
,

132 
	mALL_TARGET_HT20_14
,

133 
	mALL_TARGET_HT20_15
,

134 
	mALL_TARGET_HT20_20
,

135 
	mALL_TARGET_HT20_21
,

136 
	mALL_TARGET_HT20_22
,

137 
	mALL_TARGET_HT20_23
,

138 
	mALL_TARGET_HT40_0_8_16
,

139 
	mALL_TARGET_HT40_1_3_9_11_17_19
,

140 
	mALL_TARGET_HT40_4
,

141 
	mALL_TARGET_HT40_5
,

142 
	mALL_TARGET_HT40_6
,

143 
	mALL_TARGET_HT40_7
,

144 
	mALL_TARGET_HT40_12
,

145 
	mALL_TARGET_HT40_13
,

146 
	mALL_TARGET_HT40_14
,

147 
	mALL_TARGET_HT40_15
,

148 
	mALL_TARGET_HT40_20
,

149 
	mALL_TARGET_HT40_21
,

150 
	mALL_TARGET_HT40_22
,

151 
	mALL_TARGET_HT40_23
,

152 
	m¨9300R©eSize
,

156 
	sìpFœgs
 {

157 
u8
 
	m›Fœgs
;

158 
u8
 
	mìpMisc
;

159 } 
	g__∑cked
;

161 
	eCom¥essAlg‹ôhm
 {

162 
	m_Com¥essN⁄e
 = 0,

163 
	m_Com¥essLzma
,

164 
	m_Com¥essPaús
,

165 
	m_Com¥essBlock
,

166 
	m_Com¥ess4
,

167 
	m_Com¥ess5
,

168 
	m_Com¥ess6
,

169 
	m_Com¥ess7
,

172 
	s¨9300_ba£_ìp_hdr
 {

173 
__À16
 
	mªgDmn
[2];

175 
u8
 
	mtxrxMask
;

176 
ìpFœgs
 
	m›C≠Fœgs
;

177 
u8
 
	mrfSûít
;

178 
u8
 
	mblueToŸhO±i⁄s
;

179 
u8
 
	mdevi˚C≠
;

181 
u8
 
	mdevi˚Ty≥
;

185 
öt8_t
 
	mpwrTabÀOff£t
;

186 
u8
 
	m∑øms_f‹_tunög_ˇps
[2];

194 
u8
 
	m„©uªE«bÀ
;

196 
u8
 
	mmiscC⁄figuøti⁄
;

197 
u8
 
	mì¥omWrôeE«bÀGpio
;

198 
u8
 
	mwœnDißbÀGpio
;

199 
u8
 
	mwœnLedGpio
;

200 
u8
 
	mrxB™dSñe˘Gpio
;

201 
u8
 
	mtxrxgaö
;

203 
__À32
 
	mswªg
;

204 } 
	g__∑cked
;

206 
	s¨9300_modÆ_ìp_hódî
 {

208 
__À32
 
	m™tCålComm⁄
;

210 
__À32
 
	m™tCålComm⁄2
;

212 
__À16
 
	m™tCålChaö
[
AR9300_MAX_CHAINS
];

214 
u8
 
	mx©ãn1DB
[
AR9300_MAX_CHAINS
];

216 
u8
 
	mx©ãn1M¨gö
[
AR9300_MAX_CHAINS
];

217 
öt8_t
 
	mãmpSl›e
;

218 
öt8_t
 
	mvﬁtSl›e
;

220 
u8
 
	m•urCh™s
[
AR_EEPROM_MODAL_SPURS
];

222 
öt8_t
 
	mnoi£Flo‹ThªshCh
[
AR9300_MAX_CHAINS
];

223 
u8
 
	mª£rved
[11];

224 
öt8_t
 
	mquick_dr›
;

225 
u8
 
	mx∑BüsLvl
;

226 
u8
 
	mtxFømeToD©aSèπ
;

227 
u8
 
	mtxFømeToPaOn
;

228 
u8
 
	mtxClù
;

229 
öt8_t
 
	m™ã¬aGaö
;

230 
u8
 
	mswôchSëéög
;

231 
öt8_t
 
	madcDesúedSize
;

232 
u8
 
	mtxEndToX∑Off
;

233 
u8
 
	mtxEndToRxOn
;

234 
u8
 
	mtxFømeToX∑On
;

235 
u8
 
	mthªsh62
;

236 
__À32
 
	m∑pdR©eMaskHt20
;

237 
__À32
 
	m∑pdR©eMaskHt40
;

238 
__À16
 
	mswôchcom•dt
;

239 
u8
 
	mx a_büs_°ªngth
;

240 
u8
 
	mfutuªModÆ
[7];

241 } 
	g__∑cked
;

243 
	s¨9300_ˇl_d©a_≥r_‰eq_›_lo›
 {

244 
öt8_t
 
	mªfPowî
;

246 
u8
 
	mvﬁtMós
;

248 
u8
 
	mãmpMós
;

250 
öt8_t
 
	mrxNoi£Êo‹CÆ
;

252 
öt8_t
 
	mrxNoi£Êo‹Powî
;

254 
u8
 
	mrxTempMós
;

255 } 
	g__∑cked
;

257 
	sˇl_tgt_pow_Àgacy
 {

258 
u8
 
	mtPow2x
[4];

259 } 
	g__∑cked
;

261 
	sˇl_tgt_pow_ht
 {

262 
u8
 
	mtPow2x
[14];

263 } 
	g__∑cked
;

265 
	sˇl_˘l_d©a_2g
 {

266 
u8
 
	m˘lEdges
[
AR9300_NUM_BAND_EDGES_2G
];

267 } 
	g__∑cked
;

269 
	sˇl_˘l_d©a_5g
 {

270 
u8
 
	m˘lEdges
[
AR9300_NUM_BAND_EDGES_5G
];

271 } 
	g__∑cked
;

273 
	#MAX_BASE_EXTENSION_FUTURE
 2

	)

275 
	s¨9300_Ba£Exãnsi⁄_1
 {

276 
u8
 
	m™t_div_c⁄åﬁ
;

277 
u8
 
	mfutuª
[
MAX_BASE_EXTENSION_FUTURE
];

285 
u8
 
	mmisc_íabÀ
;

286 
öt8_t
 
	mãmp¶›exãnsi⁄
[8];

287 
öt8_t
 
	mquick_dr›_low
;

288 
öt8_t
 
	mquick_dr›_high
;

289 } 
	g__∑cked
;

291 
	s¨9300_Ba£Exãnsi⁄_2
 {

292 
öt8_t
 
	mãmpSl›eLow
;

293 
öt8_t
 
	mãmpSl›eHigh
;

294 
u8
 
	mx©ãn1DBLow
[
AR9300_MAX_CHAINS
];

295 
u8
 
	mx©ãn1M¨göLow
[
AR9300_MAX_CHAINS
];

296 
u8
 
	mx©ãn1DBHigh
[
AR9300_MAX_CHAINS
];

297 
u8
 
	mx©ãn1M¨göHigh
[
AR9300_MAX_CHAINS
];

298 } 
	g__∑cked
;

300 
	s¨9300_ì¥om
 {

301 
u8
 
	mì¥omVîsi⁄
;

302 
u8
 
	mãm∂©eVîsi⁄
;

303 
u8
 
	mmacAddr
[6];

304 
u8
 
	mcu°D©a
[
AR9300_CUSTOMER_DATA_SIZE
];

306 
¨9300_ba£_ìp_hdr
 
	mba£EïHódî
;

308 
¨9300_modÆ_ìp_hódî
 
	mmodÆHódî2G
;

309 
¨9300_Ba£Exãnsi⁄_1
 
	mba£_ext1
;

310 
u8
 
	mˇlFªqPõr2G
[
AR9300_NUM_2G_CAL_PIERS
];

311 
¨9300_ˇl_d©a_≥r_‰eq_›_lo›


312 
	mˇlPõrD©a2G
[
AR9300_MAX_CHAINS
][
AR9300_NUM_2G_CAL_PIERS
];

313 
u8
 
	mˇlT¨gë_‰eqbö_Cck
[
AR9300_NUM_2G_CCK_TARGET_POWERS
];

314 
u8
 
	mˇlT¨gë_‰eqbö_2G
[
AR9300_NUM_2G_20_TARGET_POWERS
];

315 
u8
 
	mˇlT¨gë_‰eqbö_2GHT20
[
AR9300_NUM_2G_20_TARGET_POWERS
];

316 
u8
 
	mˇlT¨gë_‰eqbö_2GHT40
[
AR9300_NUM_2G_40_TARGET_POWERS
];

317 
ˇl_tgt_pow_Àgacy


318 
	mˇlT¨gëPowîCck
[
AR9300_NUM_2G_CCK_TARGET_POWERS
];

319 
ˇl_tgt_pow_Àgacy


320 
	mˇlT¨gëPowî2G
[
AR9300_NUM_2G_20_TARGET_POWERS
];

321 
ˇl_tgt_pow_ht


322 
	mˇlT¨gëPowî2GHT20
[
AR9300_NUM_2G_20_TARGET_POWERS
];

323 
ˇl_tgt_pow_ht


324 
	mˇlT¨gëPowî2GHT40
[
AR9300_NUM_2G_40_TARGET_POWERS
];

325 
u8
 
	m˘lIndex_2G
[
AR9300_NUM_CTLS_2G
];

326 
u8
 
	m˘l_‰eqbö_2G
[
AR9300_NUM_CTLS_2G
][
AR9300_NUM_BAND_EDGES_2G
];

327 
ˇl_˘l_d©a_2g
 
	m˘lPowîD©a_2G
[
AR9300_NUM_CTLS_2G
];

328 
¨9300_modÆ_ìp_hódî
 
	mmodÆHódî5G
;

329 
¨9300_Ba£Exãnsi⁄_2
 
	mba£_ext2
;

330 
u8
 
	mˇlFªqPõr5G
[
AR9300_NUM_5G_CAL_PIERS
];

331 
¨9300_ˇl_d©a_≥r_‰eq_›_lo›


332 
	mˇlPõrD©a5G
[
AR9300_MAX_CHAINS
][
AR9300_NUM_5G_CAL_PIERS
];

333 
u8
 
	mˇlT¨gë_‰eqbö_5G
[
AR9300_NUM_5G_20_TARGET_POWERS
];

334 
u8
 
	mˇlT¨gë_‰eqbö_5GHT20
[
AR9300_NUM_5G_20_TARGET_POWERS
];

335 
u8
 
	mˇlT¨gë_‰eqbö_5GHT40
[
AR9300_NUM_5G_40_TARGET_POWERS
];

336 
ˇl_tgt_pow_Àgacy


337 
	mˇlT¨gëPowî5G
[
AR9300_NUM_5G_20_TARGET_POWERS
];

338 
ˇl_tgt_pow_ht


339 
	mˇlT¨gëPowî5GHT20
[
AR9300_NUM_5G_20_TARGET_POWERS
];

340 
ˇl_tgt_pow_ht


341 
	mˇlT¨gëPowî5GHT40
[
AR9300_NUM_5G_40_TARGET_POWERS
];

342 
u8
 
	m˘lIndex_5G
[
AR9300_NUM_CTLS_5G
];

343 
u8
 
	m˘l_‰eqbö_5G
[
AR9300_NUM_CTLS_5G
][
AR9300_NUM_BAND_EDGES_5G
];

344 
ˇl_˘l_d©a_5g
 
	m˘lPowîD©a_5G
[
AR9300_NUM_CTLS_5G
];

345 } 
	g__∑cked
;

347 
s32
 
¨9003_hw_gë_tx_gaö_idx
(
©h_hw
 *
ah
);

348 
s32
 
¨9003_hw_gë_rx_gaö_idx
(
©h_hw
 *
ah
);

349 
u32
 
¨9003_hw_™t_˘æ_comm⁄_gë
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
);

350 
u32
 
¨9003_hw_™t_˘æ_comm⁄_2_gë
(
©h_hw
 *
ah
, 
boﬁ
 
is2ghz
);

352 
u8
 *
¨9003_gë_•ur_ch™_±r
(
©h_hw
 *
ah
, 
boﬁ
 
is_2ghz
);

354 
¨9003_gë_∑¥d_sˇÀ_Á˘‹
(
©h_hw
 *
ah
,

355 
©h9k_ch™√l
 *
ch™
);

357 
¨9003_hw_öã∫Æ_ªguœt‹_≠∂y
(
©h_hw
 *
ah
);

	@ar9003_hw.c

17 
	~"hw.h
"

18 
	~"¨9003_mac.h
"

19 
	~"¨9003_2p2_öôvÆs.h
"

20 
	~"¨9003_bufÁlo_öôvÆs.h
"

21 
	~"¨9485_öôvÆs.h
"

22 
	~"¨9340_öôvÆs.h
"

23 
	~"¨9330_1p1_öôvÆs.h
"

24 
	~"¨9330_1p2_öôvÆs.h
"

25 
	~"¨955x_1p0_öôvÆs.h
"

26 
	~"¨9580_1p0_öôvÆs.h
"

27 
	~"¨9462_2p0_öôvÆs.h
"

28 
	~"¨9462_2p1_öôvÆs.h
"

29 
	~"¨9565_1p0_öôvÆs.h
"

30 
	~"¨9565_1p1_öôvÆs.h
"

31 
	~"¨953x_öôvÆs.h
"

32 
	~"¨956x_öôvÆs.h
"

41 
	$¨9003_hw_öô_mode_ªgs
(
©h_hw
 *
ah
)

43 i‡(
	`AR_SREV_9330_11
(
ah
)) {

45 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

46 
¨9331_1p1_mac_c‹e
);

47 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

48 
¨9331_1p1_mac_po°ambÀ
);

51 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

52 
¨9331_1p1_ba£b™d_c‹e
);

53 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

54 
¨9331_1p1_ba£b™d_po°ambÀ
);

57 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

58 
¨9331_1p1_ødio_c‹e
);

61 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

62 
¨9331_1p1_soc_¥ómbÀ
);

63 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

64 
¨9331_1p1_soc_po°ambÀ
);

67 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

68 
¨9331_comm⁄_rx_gaö_1p1
);

69 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

70 
¨9331_modes_lowe°_ob_db_tx_gaö_1p1
);

73 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

74 
¨9331_1p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

77 i‡(
ah
->
is_˛k_25mhz
)

78 
	`INIT_INI_ARRAY
(&
ah
->
öiAddôi⁄Æ
,

79 
¨9331_1p1_xèl_25M
);

81 
	`INIT_INI_ARRAY
(&
ah
->
öiAddôi⁄Æ
,

82 
¨9331_1p1_xèl_40M
);

83 } i‡(
	`AR_SREV_9330_12
(
ah
)) {

85 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

86 
¨9331_1p2_mac_c‹e
);

87 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

88 
¨9331_1p2_mac_po°ambÀ
);

91 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

92 
¨9331_1p2_ba£b™d_c‹e
);

93 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

94 
¨9331_1p2_ba£b™d_po°ambÀ
);

97 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

98 
¨9331_1p2_ødio_c‹e
);

101 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

102 
¨9331_1p2_soc_¥ómbÀ
);

103 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

104 
¨9331_1p2_soc_po°ambÀ
);

107 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

108 
¨9331_comm⁄_rx_gaö_1p2
);

109 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

110 
¨9331_modes_lowe°_ob_db_tx_gaö_1p2
);

113 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

114 
¨9331_1p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

117 i‡(
ah
->
is_˛k_25mhz
)

118 
	`INIT_INI_ARRAY
(&
ah
->
öiAddôi⁄Æ
,

119 
¨9331_1p2_xèl_25M
);

121 
	`INIT_INI_ARRAY
(&
ah
->
öiAddôi⁄Æ
,

122 
¨9331_1p2_xèl_40M
);

123 } i‡(
	`AR_SREV_9340
(
ah
)) {

125 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

126 
¨9340_1p0_mac_c‹e
);

127 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

128 
¨9340_1p0_mac_po°ambÀ
);

131 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

132 
¨9340_1p0_ba£b™d_c‹e
);

133 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

134 
¨9340_1p0_ba£b™d_po°ambÀ
);

137 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

138 
¨9340_1p0_ødio_c‹e
);

139 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

140 
¨9340_1p0_ødio_po°ambÀ
);

143 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

144 
¨9340_1p0_soc_¥ómbÀ
);

145 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

146 
¨9340_1p0_soc_po°ambÀ
);

149 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

150 
¨9340Comm⁄_wo_x a_rx_gaö_èbÀ_1p0
);

151 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

152 
¨9340Modes_high_ob_db_tx_gaö_èbÀ_1p0
);

154 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

155 
¨9340Modes_Á°_˛ock_1p0
);

156 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

157 
¨9340_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

158 
	`INIT_INI_ARRAY
(&
ah
->
öi_dfs
,

159 
¨9340_1p0_ba£b™d_po°ambÀ_dfs_ch™√l
);

161 i‡(!
ah
->
is_˛k_25mhz
)

162 
	`INIT_INI_ARRAY
(&
ah
->
öiAddôi⁄Æ
,

163 
¨9340_1p0_ødio_c‹e_40M
);

164 } i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
)) {

166 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

167 
¨9485_1_1_mac_c‹e
);

168 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

169 
¨9485_1_1_mac_po°ambÀ
);

172 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_PRE
], 
¨9485_1_1
);

173 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

174 
¨9485_1_1_ba£b™d_c‹e
);

175 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

176 
¨9485_1_1_ba£b™d_po°ambÀ
);

179 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

180 
¨9485_1_1_ødio_c‹e
);

181 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

182 
¨9485_1_1_ødio_po°ambÀ
);

185 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

186 
¨9485_1_1_soc_¥ómbÀ
);

189 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

190 
¨9485Comm⁄_wo_x a_rx_gaö_1_1
);

191 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

192 
¨9485_modes_lowe°_ob_db_tx_gaö_1_1
);

195 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

196 
¨9485_1_1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

198 i‡(
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) {

199 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

200 
¨9485_1_1_∂l_⁄_cdr_⁄_˛kªq_dißbÀ_L1
);

201 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

202 
¨9485_1_1_∂l_⁄_cdr_⁄_˛kªq_dißbÀ_L1
);

204 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

205 
¨9485_1_1_pcõ_phy_˛kªq_dißbÀ_L1
);

206 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

207 
¨9485_1_1_pcõ_phy_˛kªq_dißbÀ_L1
);

209 } i‡(
	`AR_SREV_9462_21
(
ah
)) {

210 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

211 
¨9462_2p1_mac_c‹e
);

212 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

213 
¨9462_2p1_mac_po°ambÀ
);

214 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

215 
¨9462_2p1_ba£b™d_c‹e
);

216 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

217 
¨9462_2p1_ba£b™d_po°ambÀ
);

218 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

219 
¨9462_2p1_ødio_c‹e
);

220 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

221 
¨9462_2p1_ødio_po°ambÀ
);

222 
	`INIT_INI_ARRAY
(&
ah
->
öi_ødio_po°_sys2™t
,

223 
¨9462_2p1_ødio_po°ambÀ_sys2™t
);

224 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

225 
¨9462_2p1_soc_¥ómbÀ
);

226 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

227 
¨9462_2p1_soc_po°ambÀ
);

228 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

229 
¨9462_2p1_comm⁄_rx_gaö
);

230 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

231 
¨9462_2p1_modes_Á°_˛ock
);

232 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

233 
¨9462_2p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

236 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

237 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D3
)) {

238 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

239 
¨9462_2p1_pcõphy_˛kªq_dißbÀ_L1
);

243 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

244 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D0
)) {

245 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

246 
¨9462_2p1_pcõphy_˛kªq_dißbÀ_L1
);

248 } i‡(
	`AR_SREV_9462_20
(
ah
)) {

250 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
], 
¨9462_2p0_mac_c‹e
);

251 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

252 
¨9462_2p0_mac_po°ambÀ
);

254 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

255 
¨9462_2p0_ba£b™d_c‹e
);

256 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

257 
¨9462_2p0_ba£b™d_po°ambÀ
);

259 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

260 
¨9462_2p0_ødio_c‹e
);

261 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

262 
¨9462_2p0_ødio_po°ambÀ
);

263 
	`INIT_INI_ARRAY
(&
ah
->
öi_ødio_po°_sys2™t
,

264 
¨9462_2p0_ødio_po°ambÀ_sys2™t
);

266 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

267 
¨9462_2p0_soc_¥ómbÀ
);

268 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

269 
¨9462_2p0_soc_po°ambÀ
);

271 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

272 
¨9462_2p0_comm⁄_rx_gaö
);

275 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

276 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D3
)) {

277 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

278 
¨9462_2p0_pcõphy_˛kªq_dißbÀ_L1
);

282 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

283 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D0
)) {

284 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

285 
¨9462_2p0_pcõphy_˛kªq_dißbÀ_L1
);

289 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

290 
¨9462_2p0_modes_Á°_˛ock
);

292 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

293 
¨9462_2p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

294 } i‡(
	`AR_SREV_9550
(
ah
)) {

296 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

297 
¨955x_1p0_mac_c‹e
);

298 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

299 
¨955x_1p0_mac_po°ambÀ
);

302 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

303 
¨955x_1p0_ba£b™d_c‹e
);

304 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

305 
¨955x_1p0_ba£b™d_po°ambÀ
);

308 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

309 
¨955x_1p0_ødio_c‹e
);

310 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

311 
¨955x_1p0_ødio_po°ambÀ
);

314 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

315 
¨955x_1p0_soc_¥ómbÀ
);

316 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

317 
¨955x_1p0_soc_po°ambÀ
);

320 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

321 
¨955x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

322 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

323 
¨955x_1p0_comm⁄_wo_x a_rx_gaö_bounds
);

324 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

325 
¨955x_1p0_modes_x∑_tx_gaö_èbÀ
);

328 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

329 
¨955x_1p0_modes_Á°_˛ock
);

330 } i‡(
	`AR_SREV_9531
(
ah
)) {

331 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

332 
qˇ953x_1p0_mac_c‹e
);

333 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

334 
qˇ953x_1p0_mac_po°ambÀ
);

335 i‡(
	`AR_SREV_9531_20
(
ah
)) {

336 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

337 
qˇ953x_2p0_ba£b™d_c‹e
);

338 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

339 
qˇ953x_2p0_ba£b™d_po°ambÀ
);

341 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

342 
qˇ953x_1p0_ba£b™d_c‹e
);

343 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

344 
qˇ953x_1p0_ba£b™d_po°ambÀ
);

346 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

347 
qˇ953x_1p0_ødio_c‹e
);

348 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

349 
qˇ953x_1p0_ødio_po°ambÀ
);

350 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

351 
qˇ953x_1p0_soc_¥ómbÀ
);

352 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

353 
qˇ953x_1p0_soc_po°ambÀ
);

355 i‡(
	`AR_SREV_9531_20
(
ah
)) {

356 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

357 
qˇ953x_2p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

358 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

359 
qˇ953x_2p0_comm⁄_wo_x a_rx_gaö_bounds
);

361 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

362 
qˇ953x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

363 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

364 
qˇ953x_1p0_comm⁄_wo_x a_rx_gaö_bounds
);

367 i‡(
	`AR_SREV_9531_20
(
ah
))

368 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

369 
qˇ953x_2p0_modes_no_x∑_tx_gaö_èbÀ
);

370 i‡(
	`AR_SREV_9531_11
(
ah
))

371 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

372 
qˇ953x_1p1_modes_no_x∑_tx_gaö_èbÀ
);

374 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

375 
qˇ953x_1p0_modes_no_x∑_tx_gaö_èbÀ
);

377 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

378 
qˇ953x_1p0_modes_Á°_˛ock
);

379 } i‡(
	`AR_SREV_9561
(
ah
)) {

380 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

381 
qˇ956x_1p0_mac_c‹e
);

382 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

383 
qˇ956x_1p0_mac_po°ambÀ
);

385 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

386 
qˇ956x_1p0_ba£b™d_c‹e
);

387 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

388 
qˇ956x_1p0_ba£b™d_po°ambÀ
);

390 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

391 
qˇ956x_1p0_ødio_c‹e
);

392 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

393 
qˇ956x_1p0_ødio_po°ambÀ
);

395 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

396 
qˇ956x_1p0_soc_¥ómbÀ
);

397 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

398 
qˇ956x_1p0_soc_po°ambÀ
);

400 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

401 
qˇ956x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

402 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

403 
qˇ956x_1p0_comm⁄_wo_x a_rx_gaö_bounds
);

404 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

405 
qˇ956x_1p0_modes_no_x∑_tx_gaö_èbÀ
);

407 
	`INIT_INI_ARRAY
(&
ah
->
öi_dfs
,

408 
qˇ956x_1p0_ba£b™d_po°ambÀ_dfs_ch™√l
);

409 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

410 
qˇ956x_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

411 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

412 
qˇ956x_1p0_modes_Á°_˛ock
);

413 } i‡(
	`AR_SREV_9580
(
ah
)) {

415 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

416 
¨9580_1p0_mac_c‹e
);

417 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

418 
¨9580_1p0_mac_po°ambÀ
);

421 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

422 
¨9580_1p0_ba£b™d_c‹e
);

423 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

424 
¨9580_1p0_ba£b™d_po°ambÀ
);

427 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

428 
¨9580_1p0_ødio_c‹e
);

429 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

430 
¨9580_1p0_ødio_po°ambÀ
);

433 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

434 
¨9580_1p0_soc_¥ómbÀ
);

435 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

436 
¨9580_1p0_soc_po°ambÀ
);

439 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

440 
¨9580_1p0_rx_gaö_èbÀ
);

441 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

442 
¨9580_1p0_low_ob_db_tx_gaö_èbÀ
);

444 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

445 
¨9580_1p0_modes_Á°_˛ock
);

446 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

447 
¨9580_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

448 
	`INIT_INI_ARRAY
(&
ah
->
öi_dfs
,

449 
¨9580_1p0_ba£b™d_po°ambÀ_dfs_ch™√l
);

450 } i‡(
	`AR_SREV_9565_11_OR_LATER
(
ah
)) {

451 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

452 
¨9565_1p1_mac_c‹e
);

453 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

454 
¨9565_1p1_mac_po°ambÀ
);

456 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

457 
¨9565_1p1_ba£b™d_c‹e
);

458 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

459 
¨9565_1p1_ba£b™d_po°ambÀ
);

461 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

462 
¨9565_1p1_ødio_c‹e
);

463 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

464 
¨9565_1p1_ødio_po°ambÀ
);

466 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

467 
¨9565_1p1_soc_¥ómbÀ
);

468 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

469 
¨9565_1p1_soc_po°ambÀ
);

471 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

472 
¨9565_1p1_Comm⁄_rx_gaö_èbÀ
);

473 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

474 
¨9565_1p1_Modes_lowe°_ob_db_tx_gaö_èbÀ
);

477 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

478 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D3
)) {

479 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

480 
¨9565_1p1_pcõphy_˛kªq_dißbÀ_L1
);

484 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

485 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D0
)) {

486 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

487 
¨9565_1p1_pcõphy_˛kªq_dißbÀ_L1
);

490 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

491 
¨9565_1p1_modes_Á°_˛ock
);

492 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

493 
¨9565_1p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

494 } i‡(
	`AR_SREV_9565
(
ah
)) {

495 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

496 
¨9565_1p0_mac_c‹e
);

497 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

498 
¨9565_1p0_mac_po°ambÀ
);

500 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

501 
¨9565_1p0_ba£b™d_c‹e
);

502 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

503 
¨9565_1p0_ba£b™d_po°ambÀ
);

505 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

506 
¨9565_1p0_ødio_c‹e
);

507 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

508 
¨9565_1p0_ødio_po°ambÀ
);

510 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

511 
¨9565_1p0_soc_¥ómbÀ
);

512 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

513 
¨9565_1p0_soc_po°ambÀ
);

515 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

516 
¨9565_1p0_Comm⁄_rx_gaö_èbÀ
);

517 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

518 
¨9565_1p0_Modes_lowe°_ob_db_tx_gaö_èbÀ
);

521 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

522 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D3
)) {

523 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

524 
¨9565_1p0_pcõphy_˛kªq_dißbÀ_L1
);

528 i‡((
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_CONTROL
) &&

529 (
ah
->
c⁄fig
.
∂l_pwrßve
 & 
AR_PCIE_PLL_PWRSAVE_ON_D0
)) {

530 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

531 
¨9565_1p0_pcõphy_˛kªq_dißbÀ_L1
);

534 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

535 
¨9565_1p0_modes_Á°_˛ock
);

536 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

537 
¨9565_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

540 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_CORE
],

541 
¨9300_2p2_mac_c‹e
);

542 
	`INIT_INI_ARRAY
(&
ah
->
öiMac
[
ATH_INI_POST
],

543 
¨9300_2p2_mac_po°ambÀ
);

546 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_CORE
],

547 
¨9300_2p2_ba£b™d_c‹e
);

548 
	`INIT_INI_ARRAY
(&
ah
->
öiBB
[
ATH_INI_POST
],

549 
¨9300_2p2_ba£b™d_po°ambÀ
);

552 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_CORE
],

553 
¨9300_2p2_ødio_c‹e
);

554 
	`INIT_INI_ARRAY
(&
ah
->
öiRadio
[
ATH_INI_POST
],

555 
¨9300_2p2_ødio_po°ambÀ
);

558 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_PRE
],

559 
¨9300_2p2_soc_¥ómbÀ
);

560 
	`INIT_INI_ARRAY
(&
ah
->
öiSOC
[
ATH_INI_POST
],

561 
¨9300_2p2_soc_po°ambÀ
);

564 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

565 
¨9300Comm⁄_rx_gaö_èbÀ_2p2
);

566 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

567 
¨9300Modes_lowe°_ob_db_tx_gaö_èbÀ_2p2
);

573 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdes
,

574 
¨9300PcõPhy_∂l_⁄_˛kªq_dißbÀ_L1_2p2
);

578 
	`INIT_INI_ARRAY
(&
ah
->
öiPcõSîdesLowPowî
,

579 
¨9300PcõPhy_∂l_⁄_˛kªq_dißbÀ_L1_2p2
);

582 
	`INIT_INI_ARRAY
(&
ah
->
öiModesFa°Clock
,

583 
¨9300Modes_Á°_˛ock_2p2
);

584 
	`INIT_INI_ARRAY
(&
ah
->
öiCckfúJ≠™2484
,

585 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
);

586 
	`INIT_INI_ARRAY
(&
ah
->
öi_dfs
,

587 
¨9300_2p2_ba£b™d_po°ambÀ_dfs_ch™√l
);

589 
	}
}

591 
	$¨9003_tx_gaö_èbÀ_mode0
(
©h_hw
 *
ah
)

593 i‡(
	`AR_SREV_9330_12
(
ah
))

594 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

595 
¨9331_modes_lowe°_ob_db_tx_gaö_1p2
);

596 i‡(
	`AR_SREV_9330_11
(
ah
))

597 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

598 
¨9331_modes_lowe°_ob_db_tx_gaö_1p1
);

599 i‡(
	`AR_SREV_9340
(
ah
))

600 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

601 
¨9340Modes_lowe°_ob_db_tx_gaö_èbÀ_1p0
);

602 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

603 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

604 
¨9485_modes_lowe°_ob_db_tx_gaö_1_1
);

605 i‡(
	`AR_SREV_9550
(
ah
))

606 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

607 
¨955x_1p0_modes_x∑_tx_gaö_èbÀ
);

608 i‡(
	`AR_SREV_9531_10
(
ah
))

609 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

610 
qˇ953x_1p0_modes_x∑_tx_gaö_èbÀ
);

611 i‡(
	`AR_SREV_9531_11
(
ah
))

612 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

613 
qˇ953x_1p1_modes_x∑_tx_gaö_èbÀ
);

614 i‡(
	`AR_SREV_9531_20
(
ah
))

615 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

616 
qˇ953x_2p0_modes_x∑_tx_gaö_èbÀ
);

617 i‡(
	`AR_SREV_9561
(
ah
))

618 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

619 
qˇ956x_1p0_modes_x∑_tx_gaö_èbÀ
);

620 i‡(
	`AR_SREV_9580
(
ah
))

621 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

622 
¨9580_1p0_lowe°_ob_db_tx_gaö_èbÀ
);

623 i‡(
	`AR_SREV_9462_21
(
ah
))

624 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

625 
¨9462_2p1_modes_low_ob_db_tx_gaö
);

626 i‡(
	`AR_SREV_9462_20
(
ah
))

627 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

628 
¨9462_2p0_modes_low_ob_db_tx_gaö
);

629 i‡(
	`AR_SREV_9565_11
(
ah
))

630 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

631 
¨9565_1p1_modes_low_ob_db_tx_gaö_èbÀ
);

632 i‡(
	`AR_SREV_9565
(
ah
))

633 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

634 
¨9565_1p0_modes_low_ob_db_tx_gaö_èbÀ
);

636 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

637 
¨9300Modes_lowe°_ob_db_tx_gaö_èbÀ_2p2
);

638 
	}
}

640 
	$¨9003_tx_gaö_èbÀ_mode1
(
©h_hw
 *
ah
)

642 i‡(
	`AR_SREV_9330_12
(
ah
))

643 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

644 
¨9331_modes_high_ob_db_tx_gaö_1p2
);

645 i‡(
	`AR_SREV_9330_11
(
ah
))

646 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

647 
¨9331_modes_high_ob_db_tx_gaö_1p1
);

648 i‡(
	`AR_SREV_9340
(
ah
))

649 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

650 
¨9340Modes_high_ob_db_tx_gaö_èbÀ_1p0
);

651 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

652 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

653 
¨9485Modes_high_ob_db_tx_gaö_1_1
);

654 i‡(
	`AR_SREV_9580
(
ah
))

655 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

656 
¨9580_1p0_high_ob_db_tx_gaö_èbÀ
);

657 i‡(
	`AR_SREV_9550
(
ah
))

658 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

659 
¨955x_1p0_modes_no_x∑_tx_gaö_èbÀ
);

660 i‡(
	`AR_SREV_9531
(
ah
)) {

661 i‡(
	`AR_SREV_9531_20
(
ah
))

662 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

663 
qˇ953x_2p0_modes_no_x∑_tx_gaö_èbÀ
);

664 i‡(
	`AR_SREV_9531_11
(
ah
))

665 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

666 
qˇ953x_1p1_modes_no_x∑_tx_gaö_èbÀ
);

668 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

669 
qˇ953x_1p0_modes_no_x∑_tx_gaö_èbÀ
);

670 } i‡(
	`AR_SREV_9561
(
ah
))

671 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

672 
qˇ956x_1p0_modes_no_x∑_tx_gaö_èbÀ
);

673 i‡(
	`AR_SREV_9462_21
(
ah
))

674 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

675 
¨9462_2p1_modes_high_ob_db_tx_gaö
);

676 i‡(
	`AR_SREV_9462_20
(
ah
))

677 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

678 
¨9462_2p0_modes_high_ob_db_tx_gaö
);

679 i‡(
	`AR_SREV_9565_11
(
ah
))

680 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

681 
¨9565_1p1_modes_high_ob_db_tx_gaö_èbÀ
);

682 i‡(
	`AR_SREV_9565
(
ah
))

683 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

684 
¨9565_1p0_modes_high_ob_db_tx_gaö_èbÀ
);

686 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

687 
¨9300Modes_high_ob_db_tx_gaö_èbÀ_2p2
);

688 
	}
}

690 
	$¨9003_tx_gaö_èbÀ_mode2
(
©h_hw
 *
ah
)

692 i‡(
	`AR_SREV_9330_12
(
ah
))

693 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

694 
¨9331_modes_low_ob_db_tx_gaö_1p2
);

695 i‡(
	`AR_SREV_9330_11
(
ah
))

696 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

697 
¨9331_modes_low_ob_db_tx_gaö_1p1
);

698 i‡(
	`AR_SREV_9340
(
ah
))

699 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

700 
¨9340Modes_low_ob_db_tx_gaö_èbÀ_1p0
);

701 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

702 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

703 
¨9485Modes_low_ob_db_tx_gaö_1_1
);

704 i‡(
	`AR_SREV_9580
(
ah
))

705 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

706 
¨9580_1p0_low_ob_db_tx_gaö_èbÀ
);

707 i‡(
	`AR_SREV_9561
(
ah
))

708 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

709 
qˇ956x_1p0_modes_no_x∑_low_ob_db_tx_gaö_èbÀ
);

710 i‡(
	`AR_SREV_9565_11
(
ah
))

711 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

712 
¨9565_1p1_modes_low_ob_db_tx_gaö_èbÀ
);

713 i‡(
	`AR_SREV_9565
(
ah
))

714 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

715 
¨9565_1p0_modes_low_ob_db_tx_gaö_èbÀ
);

717 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

718 
¨9300Modes_low_ob_db_tx_gaö_èbÀ_2p2
);

719 
	}
}

721 
	$¨9003_tx_gaö_èbÀ_mode3
(
©h_hw
 *
ah
)

723 i‡(
	`AR_SREV_9330_12
(
ah
))

724 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

725 
¨9331_modes_high_powî_tx_gaö_1p2
);

726 i‡(
	`AR_SREV_9330_11
(
ah
))

727 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

728 
¨9331_modes_high_powî_tx_gaö_1p1
);

729 i‡(
	`AR_SREV_9340
(
ah
))

730 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

731 
¨9340Modes_high_powî_tx_gaö_èbÀ_1p0
);

732 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

733 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

734 
¨9485Modes_high_powî_tx_gaö_1_1
);

735 i‡(
	`AR_SREV_9580
(
ah
))

736 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

737 
¨9580_1p0_high_powî_tx_gaö_èbÀ
);

738 i‡(
	`AR_SREV_9565_11
(
ah
))

739 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

740 
¨9565_1p1_modes_high_powî_tx_gaö_èbÀ
);

741 i‡(
	`AR_SREV_9565
(
ah
))

742 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

743 
¨9565_1p0_modes_high_powî_tx_gaö_èbÀ
);

745 i‡(
ah
->
c⁄fig
.
tx_gaö_bufÁlo
)

746 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

747 
¨9300Modes_high_powî_tx_gaö_èbÀ_bufÁlo
);

749 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

750 
¨9300Modes_high_powî_tx_gaö_èbÀ_2p2
);

752 
	}
}

754 
	$¨9003_tx_gaö_èbÀ_mode4
(
©h_hw
 *
ah
)

756 i‡(
	`AR_SREV_9340
(
ah
))

757 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

758 
¨9340Modes_mixed_ob_db_tx_gaö_èbÀ_1p0
);

759 i‡(
	`AR_SREV_9580
(
ah
))

760 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

761 
¨9580_1p0_mixed_ob_db_tx_gaö_èbÀ
);

762 i‡(
	`AR_SREV_9462_21
(
ah
))

763 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

764 
¨9462_2p1_modes_mix_ob_db_tx_gaö
);

765 i‡(
	`AR_SREV_9462_20
(
ah
))

766 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

767 
¨9462_2p0_modes_mix_ob_db_tx_gaö
);

769 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

770 
¨9300Modes_mixed_ob_db_tx_gaö_èbÀ_2p2
);

771 
	}
}

773 
	$¨9003_tx_gaö_èbÀ_mode5
(
©h_hw
 *
ah
)

775 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

776 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

777 
¨9485Modes_gªí_ob_db_tx_gaö_1_1
);

778 i‡(
	`AR_SREV_9580
(
ah
))

779 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

780 
¨9580_1p0_ty≥5_tx_gaö_èbÀ
);

781 i‡(
	`AR_SREV_9561
(
ah
))

782 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

783 
qˇ956x_1p0_modes_no_x∑_gªí_tx_gaö_èbÀ
);

784 i‡(
	`AR_SREV_9300_22
(
ah
))

785 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

786 
¨9300Modes_ty≥5_tx_gaö_èbÀ_2p2
);

787 
	}
}

789 
	$¨9003_tx_gaö_èbÀ_mode6
(
©h_hw
 *
ah
)

791 i‡(
	`AR_SREV_9340
(
ah
))

792 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

793 
¨9340Modes_low_ob_db_™d_•ur_tx_gaö_èbÀ_1p0
);

794 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

795 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

796 
¨9485Modes_gªí_•ur_ob_db_tx_gaö_1_1
);

797 i‡(
	`AR_SREV_9580
(
ah
))

798 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

799 
¨9580_1p0_ty≥6_tx_gaö_èbÀ
);

800 
	}
}

802 
	$¨9003_tx_gaö_èbÀ_mode7
(
©h_hw
 *
ah
)

804 i‡(
	`AR_SREV_9340
(
ah
))

805 
	`INIT_INI_ARRAY
(&
ah
->
öiModesTxGaö
,

806 
¨9340_cus227_tx_gaö_èbÀ_1p0
);

807 
	}
}

809 (*
	t©h_txgaö_èb
)(
	t©h_hw
 *
	tah
);

811 
	$¨9003_tx_gaö_èbÀ_≠∂y
(
©h_hw
 *
ah
)

813 c⁄° 
©h_txgaö_èb
 
modes
[] = {

814 
¨9003_tx_gaö_èbÀ_mode0
,

815 
¨9003_tx_gaö_èbÀ_mode1
,

816 
¨9003_tx_gaö_èbÀ_mode2
,

817 
¨9003_tx_gaö_èbÀ_mode3
,

818 
¨9003_tx_gaö_èbÀ_mode4
,

819 
¨9003_tx_gaö_èbÀ_mode5
,

820 
¨9003_tx_gaö_èbÀ_mode6
,

821 
¨9003_tx_gaö_èbÀ_mode7
,

823 
idx
 = 
	`¨9003_hw_gë_tx_gaö_idx
(
ah
);

825 i‡(
idx
 >
	`ARRAY_SIZE
(
modes
))

826 
idx
 = 0;

828 
modes
[
idx
](
ah
);

829 
	}
}

831 
	$¨9003_rx_gaö_èbÀ_mode0
(
©h_hw
 *
ah
)

833 i‡(
	`AR_SREV_9330_12
(
ah
))

834 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

835 
¨9331_comm⁄_rx_gaö_1p2
);

836 i‡(
	`AR_SREV_9330_11
(
ah
))

837 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

838 
¨9331_comm⁄_rx_gaö_1p1
);

839 i‡(
	`AR_SREV_9340
(
ah
))

840 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

841 
¨9340Comm⁄_rx_gaö_èbÀ_1p0
);

842 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

843 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

844 
¨9485_comm⁄_rx_gaö_1_1
);

845 i‡(
	`AR_SREV_9550
(
ah
)) {

846 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

847 
¨955x_1p0_comm⁄_rx_gaö_èbÀ
);

848 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

849 
¨955x_1p0_comm⁄_rx_gaö_bounds
);

850 } i‡(
	`AR_SREV_9531
(
ah
)) {

851 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

852 
qˇ953x_1p0_comm⁄_rx_gaö_èbÀ
);

853 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

854 
qˇ953x_1p0_comm⁄_rx_gaö_bounds
);

855 } i‡(
	`AR_SREV_9561
(
ah
)) {

856 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

857 
qˇ956x_1p0_comm⁄_rx_gaö_èbÀ
);

858 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

859 
qˇ956x_1p0_comm⁄_rx_gaö_bounds
);

860 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

861 
qˇ956x_1p0_x a_⁄ly
);

862 } i‡(
	`AR_SREV_9580
(
ah
))

863 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

864 
¨9580_1p0_rx_gaö_èbÀ
);

865 i‡(
	`AR_SREV_9462_21
(
ah
))

866 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

867 
¨9462_2p1_comm⁄_rx_gaö
);

868 i‡(
	`AR_SREV_9462_20
(
ah
))

869 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

870 
¨9462_2p0_comm⁄_rx_gaö
);

871 i‡(
	`AR_SREV_9565_11
(
ah
))

872 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

873 
¨9565_1p1_Comm⁄_rx_gaö_èbÀ
);

874 i‡(
	`AR_SREV_9565
(
ah
))

875 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

876 
¨9565_1p0_Comm⁄_rx_gaö_èbÀ
);

878 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

879 
¨9300Comm⁄_rx_gaö_èbÀ_2p2
);

880 
	}
}

882 
	$¨9003_rx_gaö_èbÀ_mode1
(
©h_hw
 *
ah
)

884 i‡(
	`AR_SREV_9330_12
(
ah
))

885 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

886 
¨9331_comm⁄_wo_x a_rx_gaö_1p2
);

887 i‡(
	`AR_SREV_9330_11
(
ah
))

888 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

889 
¨9331_comm⁄_wo_x a_rx_gaö_1p1
);

890 i‡(
	`AR_SREV_9340
(
ah
))

891 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

892 
¨9340Comm⁄_wo_x a_rx_gaö_èbÀ_1p0
);

893 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
))

894 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

895 
¨9485Comm⁄_wo_x a_rx_gaö_1_1
);

896 i‡(
	`AR_SREV_9462_21
(
ah
))

897 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

898 
¨9462_2p1_comm⁄_wo_x a_rx_gaö
);

899 i‡(
	`AR_SREV_9462_20
(
ah
))

900 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

901 
¨9462_2p0_comm⁄_wo_x a_rx_gaö
);

902 i‡(
	`AR_SREV_9550
(
ah
)) {

903 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

904 
¨955x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

905 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

906 
¨955x_1p0_comm⁄_wo_x a_rx_gaö_bounds
);

907 } i‡(
	`AR_SREV_9531_10
(
ah
Ë|| 
	`AR_SREV_9531_11
(ah)) {

908 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

909 
qˇ953x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

910 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

911 
qˇ953x_1p0_comm⁄_wo_x a_rx_gaö_bounds
);

912 } i‡(
	`AR_SREV_9531_20
(
ah
)) {

913 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

914 
qˇ953x_2p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

915 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

916 
qˇ953x_2p0_comm⁄_wo_x a_rx_gaö_bounds
);

917 } i‡(
	`AR_SREV_9561
(
ah
)) {

918 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

919 
qˇ956x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

920 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
,

921 
qˇ956x_1p0_comm⁄_wo_x a_rx_gaö_bounds
);

922 } i‡(
	`AR_SREV_9580
(
ah
))

923 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

924 
¨9580_1p0_wo_x a_rx_gaö_èbÀ
);

925 i‡(
	`AR_SREV_9565_11
(
ah
))

926 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

927 
¨9565_1p1_comm⁄_wo_x a_rx_gaö_èbÀ
);

928 i‡(
	`AR_SREV_9565
(
ah
))

929 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

930 
¨9565_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
);

932 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

933 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2
);

934 
	}
}

936 
	$¨9003_rx_gaö_èbÀ_mode2
(
©h_hw
 *
ah
)

938 i‡(
	`AR_SREV_9462_21
(
ah
)) {

939 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

940 
¨9462_2p1_comm⁄_mixed_rx_gaö
);

941 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_c‹e
,

942 
¨9462_2p1_ba£b™d_c‹e_mix_rxgaö
);

943 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_po°ambÀ
,

944 
¨9462_2p1_ba£b™d_po°ambÀ_mix_rxgaö
);

945 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

946 
¨9462_2p1_ba£b™d_po°ambÀ_5g_x a
);

947 } i‡(
	`AR_SREV_9462_20
(
ah
)) {

948 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

949 
¨9462_2p0_comm⁄_mixed_rx_gaö
);

950 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_c‹e
,

951 
¨9462_2p0_ba£b™d_c‹e_mix_rxgaö
);

952 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_po°ambÀ
,

953 
¨9462_2p0_ba£b™d_po°ambÀ_mix_rxgaö
);

954 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

955 
¨9462_2p0_ba£b™d_po°ambÀ_5g_x a
);

957 
	}
}

959 
	$¨9003_rx_gaö_èbÀ_mode3
(
©h_hw
 *
ah
)

961 i‡(
	`AR_SREV_9462_21
(
ah
)) {

962 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

963 
¨9462_2p1_comm⁄_5g_x a_⁄ly_rxgaö
);

964 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

965 
¨9462_2p1_ba£b™d_po°ambÀ_5g_x a
);

966 } i‡(
	`AR_SREV_9462_20
(
ah
)) {

967 
	`INIT_INI_ARRAY
(&
ah
->
öiModesRxGaö
,

968 
¨9462_2p0_comm⁄_5g_x a_⁄ly_rxgaö
);

969 
	`INIT_INI_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

970 
¨9462_2p0_ba£b™d_po°ambÀ_5g_x a
);

972 
	}
}

974 
	$¨9003_rx_gaö_èbÀ_≠∂y
(
©h_hw
 *
ah
)

976 
	`¨9003_hw_gë_rx_gaö_idx
(
ah
)) {

979 
	`¨9003_rx_gaö_èbÀ_mode0
(
ah
);

982 
	`¨9003_rx_gaö_èbÀ_mode1
(
ah
);

985 
	`¨9003_rx_gaö_èbÀ_mode2
(
ah
);

988 
	`¨9003_rx_gaö_èbÀ_mode3
(
ah
);

991 
	}
}

994 
	$¨9003_hw_öô_mode_gaö_ªgs
(
©h_hw
 *
ah
)

996 
	`¨9003_tx_gaö_èbÀ_≠∂y
(
ah
);

997 
	`¨9003_rx_gaö_èbÀ_≠∂y
(
ah
);

998 
	}
}

1009 
	$¨9003_hw_c⁄figpcùowîßve
(
©h_hw
 *
ah
,

1010 
boﬁ
 
powî_off
)

1012 
i
;

1013 
¨5416IniAºay
 *
¨øy
;

1020 i‡(
	`AR_SREV_9462
(
ah
)) {

1021 
u32
 
vÆ
 = 
ah
->
c⁄fig
.
a•m_l1_fix
;

1022 i‡((
vÆ
 & 0xff000000) == 0x17000000) {

1023 
vÆ
 &= 0x00ffffff;

1024 
vÆ
 |= 0x27000000;

1025 
	`REG_WRITE
(
ah
, 0x570c, 
vÆ
);

1030 i‡(!
powî_off
 ) {

1032 
	`REG_SET_BIT
(
ah
, 
AR_PCIE_PM_CTRL
, 
AR_PCIE_PM_CTRL_ENA
);

1033 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
);

1040 
¨øy
 = 
powî_off
 ? &
ah
->
öiPcõSîdes
 :

1041 &
ah
->
öiPcõSîdesLowPowî
;

1043 
i
 = 0; i < 
¨øy
->
ü_rows
; i++) {

1044 
	`REG_WRITE
(
ah
,

1045 
	`INI_RA
(
¨øy
, 
i
, 0),

1046 
	`INI_RA
(
¨øy
, 
i
, 1));

1048 
	}
}

1050 
	$¨9003_hw_öô_h™g_checks
(
©h_hw
 *
ah
)

1055 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_BB_WATCHDOG
;

1056 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_MAC_HANG
;

1061 i‡(
	`AR_SREV_9300_22
(
ah
))

1062 
ah
->
c⁄fig
.
hw_h™g_checks
 |
HW_PHYRESTART_CLC_WAR
;

1064 i‡(
	`AR_SREV_9330
(
ah
))

1065 
ah
->
bb_w©chdog_timeout_ms
 = 85;

1067 
ah
->
bb_w©chdog_timeout_ms
 = 25;

1068 
	}
}

1093 
	#NUM_STATUS_READS
 50

	)

1095 
boﬁ
 
	$©h9k_hw_vîify_h™g
(
©h_hw
 *
ah
, 
queue
)

1097 
u32
 
dma_dbg_chaö
, 
dma_dbg_com∂ëe
;

1098 
u8
 
dcu_chaö_°©e
, 
dcu_com∂ëe_°©e
;

1099 
i
;

1101 
i
 = 0; i < 
NUM_STATUS_READS
; i++) {

1102 i‡(
queue
 < 6)

1103 
dma_dbg_chaö
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_4
);

1105 
dma_dbg_chaö
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_5
);

1107 
dma_dbg_com∂ëe
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_6
);

1109 
dcu_chaö_°©e
 = (
dma_dbg_chaö
 >> (5 * 
queue
)) & 0x1f;

1110 
dcu_com∂ëe_°©e
 = 
dma_dbg_com∂ëe
 & 0x3;

1112 i‡((
dcu_chaö_°©e
 !0x6Ë|| (
dcu_com∂ëe_°©e
 != 0x1))

1113  
Ál£
;

1116 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
RESET
,

1117 "MAC H™g sig«tuª found f‹ queue: %d\n", 
queue
);

1119  
åue
;

1120 
	}
}

1122 
boﬁ
 
	$¨9003_hw_dëe˘_mac_h™g
(
©h_hw
 *
ah
)

1124 
u32
 
dma_dbg_4
, 
dma_dbg_5
, 
dma_dbg_6
, 
chk_dbg
;

1125 
u8
 
dcu_chaö_°©e
, 
dcu_com∂ëe_°©e
;

1126 
boﬁ
 
dcu_waô_‰d⁄e
 = 
Ál£
;

1127 
chk_dcu
 = 0;

1128 
i
 = 0;

1130 
dma_dbg_4
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_4
);

1131 
dma_dbg_5
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_5
);

1132 
dma_dbg_6
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_6
);

1134 
dcu_com∂ëe_°©e
 = 
dma_dbg_6
 & 0x3;

1135 i‡(
dcu_com∂ëe_°©e
 != 0x1)

1136 
exô
;

1138 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++) {

1139 i‡(
i
 < 6)

1140 
chk_dbg
 = 
dma_dbg_4
;

1142 
chk_dbg
 = 
dma_dbg_5
;

1144 
dcu_chaö_°©e
 = (
chk_dbg
 >> (5 * 
i
)) & 0x1f;

1145 i‡(
dcu_chaö_°©e
 == 0x6) {

1146 
dcu_waô_‰d⁄e
 = 
åue
;

1147 
chk_dcu
 |
	`BIT
(
i
);

1151 i‡((
dcu_com∂ëe_°©e
 =0x1Ë&& 
dcu_waô_‰d⁄e
) {

1152 
	`f‹_óch_£t_bô
(
i
, &
chk_dcu
, 
ATH9K_NUM_TX_QUEUES
) {

1153 i‡(
	`©h9k_hw_vîify_h™g
(
ah
, 
i
))

1154  
åue
;

1157 
exô
:

1158  
Ál£
;

1159 
	}
}

1162 
	$¨9003_hw_©èch_›s
(
©h_hw
 *
ah
)

1164 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

1165 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

1167 
	`¨9003_hw_öô_mode_ªgs
(
ah
);

1169 i‡(
	`AR_SREV_9003_PCOEM
(
ah
)) {

1170 
	`WARN_ON
(!
ah
->
öiPcõSîdes
.
ü_¨øy
);

1171 
	`WARN_ON
(!
ah
->
öiPcõSîdesLowPowî
.
ü_¨øy
);

1174 
¥iv_›s
->
öô_mode_gaö_ªgs
 = 
¨9003_hw_öô_mode_gaö_ªgs
;

1175 
¥iv_›s
->
öô_h™g_checks
 = 
¨9003_hw_öô_h™g_checks
;

1176 
¥iv_›s
->
dëe˘_mac_h™g
 = 
¨9003_hw_dëe˘_mac_h™g
;

1178 
›s
->
c⁄fig_pci_powîßve
 = 
¨9003_hw_c⁄figpcùowîßve
;

1180 
	`¨9003_hw_©èch_phy_›s
(
ah
);

1181 
	`¨9003_hw_©èch_ˇlib_›s
(
ah
);

1182 
	`¨9003_hw_©èch_mac_›s
(
ah
);

1183 
	`¨9003_hw_©èch_aic_›s
(
ah
);

1184 
	}
}

	@ar9003_mac.c

16 
	~<löux/exp‹t.h
>

17 
	~"hw.h
"

18 
	~"¨9003_mac.h
"

19 
	~"¨9003_mci.h
"

21 
	$¨9003_hw_rx_íabÀ
(
©h_hw
 *
hw
)

23 
	`REG_WRITE
(
hw
, 
AR_CR
, 0);

24 
	}
}

27 
	$¨9003_£t_txdesc
(
©h_hw
 *
ah
, *
ds
, 
©h_tx_öfo
 *
i
)

29 
¨9003_txc
 *
ads
 = 
ds
;

30 
checksum
 = 0;

31 
u32
 
vÆ
, 
˘l12
, 
˘l17
;

32 
u8
 
desc_Àn
;

34 
desc_Àn
 = ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) ? 0x18 : 0x17);

36 
vÆ
 = (
ATHEROS_VENDOR_ID
 << 
AR_DescId_S
) |

37 (1 << 
AR_TxRxDesc_S
) |

38 (1 << 
AR_CålSèt_S
) |

39 (
i
->
qcu
 << 
AR_TxQcuNum_S
Ë| 
desc_Àn
;

41 
checksum
 +
vÆ
;

42 
	`ACCESS_ONCE
(
ads
->
öfo
Ë
vÆ
;

44 
checksum
 +
i
->
lök
;

45 
	`ACCESS_ONCE
(
ads
->
lök
Ë
i
->link;

47 
checksum
 +
i
->
buf_addr
[0];

48 
	`ACCESS_ONCE
(
ads
->
d©a0
Ë
i
->
buf_addr
[0];

49 
checksum
 +
i
->
buf_addr
[1];

50 
	`ACCESS_ONCE
(
ads
->
d©a1
Ë
i
->
buf_addr
[1];

51 
checksum
 +
i
->
buf_addr
[2];

52 
	`ACCESS_ONCE
(
ads
->
d©a2
Ë
i
->
buf_addr
[2];

53 
checksum
 +
i
->
buf_addr
[3];

54 
	`ACCESS_ONCE
(
ads
->
d©a3
Ë
i
->
buf_addr
[3];

56 
checksum
 +(
vÆ
 = (
i
->
buf_Àn
[0] << 
AR_BufLí_S
Ë& 
AR_BufLí
);

57 
	`ACCESS_ONCE
(
ads
->
˘l3
Ë
vÆ
;

58 
checksum
 +(
vÆ
 = (
i
->
buf_Àn
[1] << 
AR_BufLí_S
Ë& 
AR_BufLí
);

59 
	`ACCESS_ONCE
(
ads
->
˘l5
Ë
vÆ
;

60 
checksum
 +(
vÆ
 = (
i
->
buf_Àn
[2] << 
AR_BufLí_S
Ë& 
AR_BufLí
);

61 
	`ACCESS_ONCE
(
ads
->
˘l7
Ë
vÆ
;

62 
checksum
 +(
vÆ
 = (
i
->
buf_Àn
[3] << 
AR_BufLí_S
Ë& 
AR_BufLí
);

63 
	`ACCESS_ONCE
(
ads
->
˘l9
Ë
vÆ
;

65 
checksum
 = (
u16
) (((checksum & 0xffff) + (checksum >> 16)) & 0xffff);

66 
	`ACCESS_ONCE
(
ads
->
˘l10
Ë
checksum
;

68 i‡(
i
->
is_fú°
 || i->
is_œ°
) {

69 
	`ACCESS_ONCE
(
ads
->
˘l13
Ë
	`£t11nTrõs
(
i
->
øãs
, 0)

70 | 
	`£t11nTrõs
(
i
->
øãs
, 1)

71 | 
	`£t11nTrõs
(
i
->
øãs
, 2)

72 | 
	`£t11nTrõs
(
i
->
øãs
, 3)

73 | (
i
->
dur_upd©e
 ? 
AR_DurUpd©eE«
 : 0)

74 | 
	`SM
(0, 
AR_Bur°Dur
);

76 
	`ACCESS_ONCE
(
ads
->
˘l14
Ë
	`£t11nR©e
(
i
->
øãs
, 0)

77 | 
	`£t11nR©e
(
i
->
øãs
, 1)

78 | 
	`£t11nR©e
(
i
->
øãs
, 2)

79 | 
	`£t11nR©e
(
i
->
øãs
, 3);

81 
	`ACCESS_ONCE
(
ads
->
˘l13
) = 0;

82 
	`ACCESS_ONCE
(
ads
->
˘l14
) = 0;

85 
ads
->
˘l20
 = 0;

86 
ads
->
˘l21
 = 0;

87 
ads
->
˘l22
 = 0;

88 
ads
->
˘l23
 = 0;

90 
˘l17
 = 
	`SM
(
i
->
keyty≥
, 
AR_En¸Ty≥
);

91 i‡(!
i
->
is_fú°
) {

92 
	`ACCESS_ONCE
(
ads
->
˘l11
) = 0;

93 
	`ACCESS_ONCE
(
ads
->
˘l12
Ë
i
->
is_œ°
 ? 0 : 
AR_TxM‹e
;

94 
	`ACCESS_ONCE
(
ads
->
˘l15
) = 0;

95 
	`ACCESS_ONCE
(
ads
->
˘l16
) = 0;

96 
	`ACCESS_ONCE
(
ads
->
˘l17
) = ctl17;

97 
	`ACCESS_ONCE
(
ads
->
˘l18
) = 0;

98 
	`ACCESS_ONCE
(
ads
->
˘l19
) = 0;

102 
	`ACCESS_ONCE
(
ads
->
˘l11
Ë(
i
->
pkt_Àn
 & 
AR_FømeLí
)

103 | (
i
->
Êags
 & 
ATH9K_TXDESC_VMF
 ? 
AR_VútM‹eFøg
 : 0)

104 | 
	`SM
(
i
->
txpowî
[0], 
AR_XmôPowî0
)

105 | (
i
->
Êags
 & 
ATH9K_TXDESC_VEOL
 ? 
AR_VEOL
 : 0)

106 | (
i
->
keyix
 !
ATH9K_TXKEYIX_INVALID
 ? 
AR_De°IdxVÆid
 : 0)

107 | (
i
->
Êags
 & 
ATH9K_TXDESC_LOWRXCHAIN
 ? 
AR_LowRxChaö
 : 0)

108 | (
i
->
Êags
 & 
ATH9K_TXDESC_CLRDMASK
 ? 
AR_CÃDe°Mask
 : 0)

109 | (
i
->
Êags
 & 
ATH9K_TXDESC_RTSENA
 ? 
AR_RTSE«bÀ
 :

110 (
i
->
Êags
 & 
ATH9K_TXDESC_CTSENA
 ? 
AR_CTSE«bÀ
 : 0));

112 
˘l12
 = (
i
->
keyix
 !
ATH9K_TXKEYIX_INVALID
 ?

113 
	`SM
(
i
->
keyix
, 
AR_De°Idx
) : 0)

114 | 
	`SM
(
i
->
ty≥
, 
AR_FømeTy≥
)

115 | (
i
->
Êags
 & 
ATH9K_TXDESC_NOACK
 ? 
AR_NoAck
 : 0)

116 | (
i
->
Êags
 & 
ATH9K_TXDESC_EXT_ONLY
 ? 
AR_ExtO∆y
 : 0)

117 | (
i
->
Êags
 & 
ATH9K_TXDESC_EXT_AND_CTL
 ? 
AR_ExtAndCé
 : 0);

119 
˘l17
 |(
i
->
Êags
 & 
ATH9K_TXDESC_LDPC
 ? 
AR_LDPC
 : 0);

120 
i
->
aggr
) {

121 
AGGR_BUF_FIRST
:

122 
˘l17
 |
	`SM
(
i
->
aggr_Àn
, 
AR_AggrLí
);

124 
AGGR_BUF_MIDDLE
:

125 
˘l12
 |
AR_IsAggr
 | 
AR_M‹eAggr
;

126 
˘l17
 |
	`SM
(
i
->
ndñim
, 
AR_PadDñim
);

128 
AGGR_BUF_LAST
:

129 
˘l12
 |
AR_IsAggr
;

131 
AGGR_BUF_NONE
:

135 
vÆ
 = (
i
->
Êags
 & 
ATH9K_TXDESC_PAPRD
Ë>> 
ATH9K_TXDESC_PAPRD_S
;

136 
˘l12
 |
	`SM
(
vÆ
, 
AR_PAPRDChaöMask
);

138 
	`ACCESS_ONCE
(
ads
->
˘l12
) = ctl12;

139 
	`ACCESS_ONCE
(
ads
->
˘l17
) = ctl17;

141 
	`ACCESS_ONCE
(
ads
->
˘l15
Ë
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 0)

142 | 
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 1);

144 
	`ACCESS_ONCE
(
ads
->
˘l16
Ë
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 2)

145 | 
	`£t11nPktDurRTSCTS
(
i
->
øãs
, 3);

147 
	`ACCESS_ONCE
(
ads
->
˘l18
Ë
	`£t11nR©eFœgs
(
i
->
øãs
, 0)

148 | 
	`£t11nR©eFœgs
(
i
->
øãs
, 1)

149 | 
	`£t11nR©eFœgs
(
i
->
øãs
, 2)

150 | 
	`£t11nR©eFœgs
(
i
->
øãs
, 3)

151 | 
	`SM
(
i
->
πs˘s_øã
, 
AR_RTSCTSR©e
);

153 
	`ACCESS_ONCE
(
ads
->
˘l19
Ë
AR_NŸ_Soundög
;

155 
	`ACCESS_ONCE
(
ads
->
˘l20
Ë
	`SM
(
i
->
txpowî
[1], 
AR_XmôPowî1
);

156 
	`ACCESS_ONCE
(
ads
->
˘l21
Ë
	`SM
(
i
->
txpowî
[2], 
AR_XmôPowî2
);

157 
	`ACCESS_ONCE
(
ads
->
˘l22
Ë
	`SM
(
i
->
txpowî
[3], 
AR_XmôPowî3
);

158 
	}
}

160 
u16
 
	$¨9003_ˇlc_±r_chksum
(
¨9003_txc
 *
ads
)

162 
checksum
;

164 
checksum
 = 
ads
->
öfo
 +áds->
lök


165 + 
ads
->
d©a0
 +áds->
˘l3


166 + 
ads
->
d©a1
 +áds->
˘l5


167 + 
ads
->
d©a2
 +áds->
˘l7


168 + 
ads
->
d©a3
 +áds->
˘l9
;

170  ((
checksum
 & 0xffffË+ (checksum >> 16)Ë& 
AR_TxPåChkSum
;

171 
	}
}

173 
	$¨9003_hw_£t_desc_lök
(*
ds
, 
u32
 
ds_lök
)

175 
¨9003_txc
 *
ads
 = 
ds
;

177 
ads
->
lök
 = 
ds_lök
;

178 
ads
->
˘l10
 &~
AR_TxPåChkSum
;

179 
ads
->
˘l10
 |
	`¨9003_ˇlc_±r_chksum
(ads);

180 
	}
}

182 
boﬁ
 
	$¨9003_hw_gë_i§
(
©h_hw
 *
ah
, 
©h9k_öt
 *
masked
,

183 
u32
 *
sync_ˇu£_p
)

185 
u32
 
i§
 = 0;

186 
u32
 
mask2
 = 0;

187 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

188 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

189 
u32
 
sync_ˇu£
 = 0, 
async_ˇu£
, 
async_mask
 = 
AR_INTR_MAC_IRQ
;

190 
boﬁ
 
Áèl_öt
;

192 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

193 
async_mask
 |
AR_INTR_ASYNC_MASK_MCI
;

195 
async_ˇu£
 = 
	`REG_READ
(
ah
, 
AR_INTR_ASYNC_CAUSE
);

197 i‡(
async_ˇu£
 & 
async_mask
) {

198 i‡((
	`REG_READ
(
ah
, 
AR_RTC_STATUS
Ë& 
AR_RTC_STATUS_M
)

199 =
AR_RTC_STATUS_ON
)

200 
i§
 = 
	`REG_READ
(
ah
, 
AR_ISR
);

204 
sync_ˇu£
 = 
	`REG_READ
(
ah
, 
AR_INTR_SYNC_CAUSE
Ë& 
AR_INTR_SYNC_DEFAULT
;

206 *
masked
 = 0;

208 i‡(!
i§
 && !
sync_ˇu£
 && !
async_ˇu£
)

209  
Ál£
;

211 i‡(
i§
) {

212 i‡(
i§
 & 
AR_ISR_BCNMISC
) {

213 
u32
 
i§2
;

214 
i§2
 = 
	`REG_READ
(
ah
, 
AR_ISR_S2
);

216 
mask2
 |((
i§2
 & 
AR_ISR_S2_TIM
) >>

217 
MAP_ISR_S2_TIM
);

218 
mask2
 |((
i§2
 & 
AR_ISR_S2_DTIM
) >>

219 
MAP_ISR_S2_DTIM
);

220 
mask2
 |((
i§2
 & 
AR_ISR_S2_DTIMSYNC
) >>

221 
MAP_ISR_S2_DTIMSYNC
);

222 
mask2
 |((
i§2
 & 
AR_ISR_S2_CABEND
) >>

223 
MAP_ISR_S2_CABEND
);

224 
mask2
 |((
i§2
 & 
AR_ISR_S2_GTT
) <<

225 
MAP_ISR_S2_GTT
);

226 
mask2
 |((
i§2
 & 
AR_ISR_S2_CST
) <<

227 
MAP_ISR_S2_CST
);

228 
mask2
 |((
i§2
 & 
AR_ISR_S2_TSFOOR
) >>

229 
MAP_ISR_S2_TSFOOR
);

230 
mask2
 |((
i§2
 & 
AR_ISR_S2_BB_WATCHDOG
) >>

231 
MAP_ISR_S2_BB_WATCHDOG
);

233 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

234 
	`REG_WRITE
(
ah
, 
AR_ISR_S2
, 
i§2
);

235 
i§
 &~
AR_ISR_BCNMISC
;

239 i‡((
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
))

240 
i§
 = 
	`REG_READ
(
ah
, 
AR_ISR_RAC
);

242 i‡(
i§
 == 0xffffffff) {

243 *
masked
 = 0;

244  
Ál£
;

247 *
masked
 = 
i§
 & 
ATH9K_INT_COMMON
;

249 i‡(
ah
->
c⁄fig
.
rx_öå_môig©i⁄
)

250 i‡(
i§
 & (
AR_ISR_RXMINTR
 | 
AR_ISR_RXINTM
))

251 *
masked
 |
ATH9K_INT_RXLP
;

253 i‡(
ah
->
c⁄fig
.
tx_öå_môig©i⁄
)

254 i‡(
i§
 & (
AR_ISR_TXMINTR
 | 
AR_ISR_TXINTM
))

255 *
masked
 |
ATH9K_INT_TX
;

257 i‡(
i§
 & (
AR_ISR_LP_RXOK
 | 
AR_ISR_RXERR
))

258 *
masked
 |
ATH9K_INT_RXLP
;

260 i‡(
i§
 & 
AR_ISR_HP_RXOK
)

261 *
masked
 |
ATH9K_INT_RXHP
;

263 i‡(
i§
 & (
AR_ISR_TXOK
 | 
AR_ISR_TXERR
 | 
AR_ISR_TXEOL
)) {

264 *
masked
 |
ATH9K_INT_TX
;

266 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

267 
u32
 
s0
, 
s1
;

268 
s0
 = 
	`REG_READ
(
ah
, 
AR_ISR_S0
);

269 
	`REG_WRITE
(
ah
, 
AR_ISR_S0
, 
s0
);

270 
s1
 = 
	`REG_READ
(
ah
, 
AR_ISR_S1
);

271 
	`REG_WRITE
(
ah
, 
AR_ISR_S1
, 
s1
);

273 
i§
 &~(
AR_ISR_TXOK
 | 
AR_ISR_TXERR
 |

274 
AR_ISR_TXEOL
);

278 i‡(
i§
 & 
AR_ISR_GENTMR
) {

279 
u32
 
s5
;

281 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)

282 
s5
 = 
	`REG_READ
(
ah
, 
AR_ISR_S5_S
);

284 
s5
 = 
	`REG_READ
(
ah
, 
AR_ISR_S5
);

286 
ah
->
öå_gí_timî_åiggî
 =

287 
	`MS
(
s5
, 
AR_ISR_S5_GENTIMER_TRIG
);

289 
ah
->
öå_gí_timî_thªsh
 =

290 
	`MS
(
s5
, 
AR_ISR_S5_GENTIMER_THRESH
);

292 i‡(
ah
->
öå_gí_timî_åiggî
)

293 *
masked
 |
ATH9K_INT_GENTIMER
;

295 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

296 
	`REG_WRITE
(
ah
, 
AR_ISR_S5
, 
s5
);

297 
i§
 &~
AR_ISR_GENTMR
;

302 *
masked
 |
mask2
;

304 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_RAC_SUPPORTED
)) {

305 
	`REG_WRITE
(
ah
, 
AR_ISR
, 
i§
);

307 (Ë
	`REG_READ
(
ah
, 
AR_ISR
);

310 i‡(*
masked
 & 
ATH9K_INT_BB_WATCHDOG
)

311 
	`¨9003_hw_bb_w©chdog_ªad
(
ah
);

314 i‡(
async_ˇu£
 & 
AR_INTR_ASYNC_MASK_MCI
)

315 
	`¨9003_mci_gë_i§
(
ah
, 
masked
);

317 i‡(
sync_ˇu£
) {

318 i‡(
sync_ˇu£_p
)

319 *
sync_ˇu£_p
 = 
sync_ˇu£
;

320 
Áèl_öt
 =

321 (
sync_ˇu£
 &

322 (
AR_INTR_SYNC_HOST1_FATAL
 | 
AR_INTR_SYNC_HOST1_PERR
))

323 ? 
åue
 : 
Ál£
;

325 i‡(
Áèl_öt
) {

326 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_HOST1_FATAL
) {

327 
	`©h_dbg
(
comm⁄
, 
ANY
,

330 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_HOST1_PERR
) {

331 
	`©h_dbg
(
comm⁄
, 
ANY
,

334 *
masked
 |
ATH9K_INT_FATAL
;

337 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_TIMEOUT
) {

338 
	`REG_WRITE
(
ah
, 
AR_RC
, 
AR_RC_HOSTIF
);

339 
	`REG_WRITE
(
ah
, 
AR_RC
, 0);

340 *
masked
 |
ATH9K_INT_FATAL
;

343 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_LOCAL_TIMEOUT
)

344 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
,

347 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_CAUSE_CLR
, 
sync_ˇu£
);

348 (Ë
	`REG_READ
(
ah
, 
AR_INTR_SYNC_CAUSE_CLR
);

351  
åue
;

352 
	}
}

354 
	$¨9003_hw_¥oc_txdesc
(
©h_hw
 *
ah
, *
ds
,

355 
©h_tx_°©us
 *
ts
)

357 
¨9003_txs
 *
ads
;

358 
u32
 
°©us
;

360 
ads
 = &
ah
->
ts_rög
[ah->
ts_èû
];

362 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
°©us8
);

363 i‡((
°©us
 & 
AR_TxD⁄e
) == 0)

364  -
EINPROGRESS
;

366 
ah
->
ts_èû
 = (ah->ts_èû + 1Ë%áh->
ts_size
;

368 i‡((
	`MS
(
ads
->
ds_öfo
, 
AR_DescId
Ë!
ATHEROS_VENDOR_ID
) ||

369 (
	`MS
(
ads
->
ds_öfo
, 
AR_TxRxDesc
) != 1)) {

370 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
XMIT
,

371 "Tx Des¸ùt‹Éº‹ %x\n", 
ads
->
ds_öfo
);

372 
	`mem£t
(
ads
, 0, (*ads));

373  -
EIO
;

376 
ts
->
ts_øãödex
 = 
	`MS
(
°©us
, 
AR_FöÆTxIdx
);

377 
ts
->
ts_£qnum
 = 
	`MS
(
°©us
, 
AR_SeqNum
);

378 
ts
->
tid
 = 
	`MS
(
°©us
, 
AR_TxTid
);

380 
ts
->
qid
 = 
	`MS
(
ads
->
ds_öfo
, 
AR_TxQcuNum
);

381 
ts
->
desc_id
 = 
	`MS
(
ads
->
°©us1
, 
AR_TxDescId
);

382 
ts
->
ts_t°amp
 = 
ads
->
°©us4
;

383 
ts
->
ts_°©us
 = 0;

384 
ts
->
ts_Êags
 = 0;

386 i‡(
°©us
 & 
AR_TxOpEx˚eded
)

387 
ts
->
ts_°©us
 |
ATH9K_TXERR_XTXOP
;

388 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
°©us2
);

389 
ts
->
ts_rssi_˘l0
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡00
);

390 
ts
->
ts_rssi_˘l1
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡01
);

391 
ts
->
ts_rssi_˘l2
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡02
);

392 i‡(
°©us
 & 
AR_TxBaSètus
) {

393 
ts
->
ts_Êags
 |
ATH9K_TX_BA
;

394 
ts
->
ba_low
 = 
ads
->
°©us5
;

395 
ts
->
ba_high
 = 
ads
->
°©us6
;

398 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
°©us3
);

399 i‡(
°©us
 & 
AR_Ex˚ssiveRërõs
)

400 
ts
->
ts_°©us
 |
ATH9K_TXERR_XRETRY
;

401 i‡(
°©us
 & 
AR_Fûãªd
)

402 
ts
->
ts_°©us
 |
ATH9K_TXERR_FILT
;

403 i‡(
°©us
 & 
AR_FIFOUndîrun
) {

404 
ts
->
ts_°©us
 |
ATH9K_TXERR_FIFO
;

405 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

407 i‡(
°©us
 & 
AR_TxTimîExpúed
)

408 
ts
->
ts_°©us
 |
ATH9K_TXERR_TIMER_EXPIRED
;

409 i‡(
°©us
 & 
AR_DescCfgEº
)

410 
ts
->
ts_Êags
 |
ATH9K_TX_DESC_CFG_ERR
;

411 i‡(
°©us
 & 
AR_TxD©aUndîrun
) {

412 
ts
->
ts_Êags
 |
ATH9K_TX_DATA_UNDERRUN
;

413 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

415 i‡(
°©us
 & 
AR_TxDñimUndîrun
) {

416 
ts
->
ts_Êags
 |
ATH9K_TX_DELIM_UNDERRUN
;

417 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

419 
ts
->
ts_sh‹åëry
 = 
	`MS
(
°©us
, 
AR_RTSFaûC¡
);

420 
ts
->
ts_l⁄gªåy
 = 
	`MS
(
°©us
, 
AR_D©aFaûC¡
);

421 
ts
->
ts_vútcﬁ
 = 
	`MS
(
°©us
, 
AR_VútRëryC¡
);

423 
°©us
 = 
	`ACCESS_ONCE
(
ads
->
°©us7
);

424 
ts
->
ts_rssi
 = 
	`MS
(
°©us
, 
AR_TxRSSIComböed
);

425 
ts
->
ts_rssi_ext0
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡10
);

426 
ts
->
ts_rssi_ext1
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡11
);

427 
ts
->
ts_rssi_ext2
 = 
	`MS
(
°©us
, 
AR_TxRSSIA¡12
);

429 
	`mem£t
(
ads
, 0, (*ads));

432 
	}
}

434 
	$¨9003_hw_gë_duøti⁄
(
©h_hw
 *
ah
, c⁄° *
ds
, 
ödex
)

436 c⁄° 
¨9003_txc
 *
adc
 = 
ds
;

438 
ödex
) {

440  
	`MS
(
	`ACCESS_ONCE
(
adc
->
˘l15
), 
AR_PackëDur0
);

442  
	`MS
(
	`ACCESS_ONCE
(
adc
->
˘l15
), 
AR_PackëDur1
);

444  
	`MS
(
	`ACCESS_ONCE
(
adc
->
˘l16
), 
AR_PackëDur2
);

446  
	`MS
(
	`ACCESS_ONCE
(
adc
->
˘l16
), 
AR_PackëDur3
);

450 
	}
}

452 
	$¨9003_hw_©èch_mac_›s
(
©h_hw
 *
hw
)

454 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
hw
);

456 
›s
->
rx_íabÀ
 = 
¨9003_hw_rx_íabÀ
;

457 
›s
->
£t_desc_lök
 = 
¨9003_hw_£t_desc_lök
;

458 
›s
->
gë_i§
 = 
¨9003_hw_gë_i§
;

459 
›s
->
£t_txdesc
 = 
¨9003_£t_txdesc
;

460 
›s
->
¥oc_txdesc
 = 
¨9003_hw_¥oc_txdesc
;

461 
›s
->
gë_duøti⁄
 = 
¨9003_hw_gë_duøti⁄
;

462 
	}
}

464 
	$©h9k_hw_£t_rx_bufsize
(
©h_hw
 *
ah
, 
u16
 
buf_size
)

466 
	`REG_WRITE
(
ah
, 
AR_DATABUF_SIZE
, 
buf_size
 & 
AR_DATABUF_SIZE_MASK
);

467 
	}
}

468 
EXPORT_SYMBOL
(
©h9k_hw_£t_rx_bufsize
);

470 
	$©h9k_hw_addrxbuf_edma
(
©h_hw
 *
ah
, 
u32
 
rxdp
,

471 
©h9k_rx_qty≥
 
qty≥
)

473 i‡(
qty≥
 =
ATH9K_RX_QUEUE_HP
)

474 
	`REG_WRITE
(
ah
, 
AR_HP_RXDP
, 
rxdp
);

476 
	`REG_WRITE
(
ah
, 
AR_LP_RXDP
, 
rxdp
);

477 
	}
}

478 
EXPORT_SYMBOL
(
©h9k_hw_addrxbuf_edma
);

480 
	$©h9k_hw_¥o˚ss_rxdesc_edma
(
©h_hw
 *
ah
, 
©h_rx_°©us
 *
rxs
,

481 *
buf_addr
)

483 
¨9003_rxs
 *
rx•
 = (¨9003_rx†*Ë
buf_addr
;

484 
phyîr
;

486 i‡((
rx•
->
°©us11
 & 
AR_RxD⁄e
) == 0)

487  -
EINPROGRESS
;

489 i‡(
	`MS
(
rx•
->
ds_öfo
, 
AR_DescId
) != 0x168c)

490  -
EINVAL
;

492 i‡((
rx•
->
ds_öfo
 & (
AR_TxRxDesc
 | 
AR_CålSèt
)) != 0)

493  -
EINPROGRESS
;

495 
rxs
->
rs_°©us
 = 0;

496 
rxs
->
rs_Êags
 = 0;

497 
rxs
->
Êag
 = 0;

499 
rxs
->
rs_d©Æí
 = 
rx•
->
°©us2
 & 
AR_D©aLí
;

500 
rxs
->
rs_t°amp
 = 
rx•
->
°©us3
;

503 
rxs
->
rs_rssi
 = 
	`MS
(
rx•
->
°©us5
, 
AR_RxRSSIComböed
);

504 
rxs
->
rs_rssi_˘l
[0] = 
	`MS
(
rx•
->
°©us1
, 
AR_RxRSSIA¡00
);

505 
rxs
->
rs_rssi_˘l
[1] = 
	`MS
(
rx•
->
°©us1
, 
AR_RxRSSIA¡01
);

506 
rxs
->
rs_rssi_˘l
[2] = 
	`MS
(
rx•
->
°©us1
, 
AR_RxRSSIA¡02
);

507 
rxs
->
rs_rssi_ext
[0] = 
	`MS
(
rx•
->
°©us5
, 
AR_RxRSSIA¡10
);

508 
rxs
->
rs_rssi_ext
[1] = 
	`MS
(
rx•
->
°©us5
, 
AR_RxRSSIA¡11
);

509 
rxs
->
rs_rssi_ext
[2] = 
	`MS
(
rx•
->
°©us5
, 
AR_RxRSSIA¡12
);

511 i‡(
rx•
->
°©us11
 & 
AR_RxKeyIdxVÆid
)

512 
rxs
->
rs_keyix
 = 
	`MS
(
rx•
->
°©us11
, 
AR_KeyIdx
);

514 
rxs
->
rs_keyix
 = 
ATH9K_RXKEYIX_INVALID
;

516 
rxs
->
rs_øã
 = 
	`MS
(
rx•
->
°©us1
, 
AR_RxR©e
);

517 
rxs
->
rs_m‹e
 = (
rx•
->
°©us2
 & 
AR_RxM‹e
) ? 1 : 0;

519 
rxs
->
rs_fú°aggr
 = (
rx•
->
°©us11
 & 
AR_RxFú°Aggr
) ? 1 : 0;

520 
rxs
->
rs_ißggr
 = (
rx•
->
°©us11
 & 
AR_RxAggr
) ? 1 : 0;

521 
rxs
->
rs_m‹óggr
 = (
rx•
->
°©us11
 & 
AR_RxM‹eAggr
) ? 1 : 0;

522 
rxs
->
rs_™ã¬a
 = (
	`MS
(
rx•
->
°©us4
, 
AR_RxA¡í«
) & 0x7);

523 
rxs
->
Êag
 |(
rx•
->
°©us4
 & 
AR_GI
Ë? 
RX_FLAG_SHORT_GI
 : 0;

524 
rxs
->
Êag
 |(
rx•
->
°©us4
 & 
AR_2040
Ë? 
RX_FLAG_40MHZ
 : 0;

526 
rxs
->
evm0
 = 
rx•
->
°©us6
;

527 
rxs
->
evm1
 = 
rx•
->
°©us7
;

528 
rxs
->
evm2
 = 
rx•
->
°©us8
;

529 
rxs
->
evm3
 = 
rx•
->
°©us9
;

530 
rxs
->
evm4
 = (
rx•
->
°©us10
 & 0xffff);

532 i‡(
rx•
->
°©us11
 & 
AR_PªDñimCRCEº
)

533 
rxs
->
rs_Êags
 |
ATH9K_RX_DELIM_CRC_PRE
;

535 i‡(
rx•
->
°©us11
 & 
AR_Po°DñimCRCEº
)

536 
rxs
->
rs_Êags
 |
ATH9K_RX_DELIM_CRC_POST
;

538 i‡(
rx•
->
°©us11
 & 
AR_De¸y±BusyEº
)

539 
rxs
->
rs_Êags
 |
ATH9K_RX_DECRYPT_BUSY
;

541 i‡((
rx•
->
°©us11
 & 
AR_RxFømeOK
) == 0) {

550 i‡(
rx•
->
°©us11
 & 
AR_CRCEº
)

551 
rxs
->
rs_°©us
 |
ATH9K_RXERR_CRC
;

552 i‡(
rx•
->
°©us11
 & 
AR_De¸y±CRCEº
)

553 
rxs
->
rs_°©us
 |
ATH9K_RXERR_DECRYPT
;

554 i‡(
rx•
->
°©us11
 & 
AR_Mich´lEº
)

555 
rxs
->
rs_°©us
 |
ATH9K_RXERR_MIC
;

556 i‡(
rx•
->
°©us11
 & 
AR_PHYEº
) {

557 
phyîr
 = 
	`MS
(
rx•
->
°©us11
, 
AR_PHYEºCode
);

571 i‡((
phyîr
 =
ATH9K_PHYERR_OFDM_RESTART
) &&

572 (
rx•
->
°©us11
 & 
AR_Po°DñimCRCEº
)) {

573 
rxs
->
rs_phyîr
 = 0;

575 
rxs
->
rs_°©us
 |
ATH9K_RXERR_PHY
;

576 
rxs
->
rs_phyîr
 = 
phyîr
;

581 i‡(
rx•
->
°©us11
 & 
AR_KeyMiss
)

582 
rxs
->
rs_°©us
 |
ATH9K_RXERR_KEYMISS
;

585 
	}
}

586 
EXPORT_SYMBOL
(
©h9k_hw_¥o˚ss_rxdesc_edma
);

588 
	$©h9k_hw_ª£t_tx°©us_rög
(
©h_hw
 *
ah
)

590 
ah
->
ts_èû
 = 0;

592 
	`mem£t
((*Ë
ah
->
ts_rög
, 0,

593 
ah
->
ts_size
 * (
¨9003_txs
));

595 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
XMIT
,

597 
ah
->
ts_∑ddr_°¨t
,áh->
ts_∑ddr_íd
,

598 
ah
->
ts_rög
,áh->
ts_size
);

600 
	`REG_WRITE
(
ah
, 
AR_Q_STATUS_RING_START
,áh->
ts_∑ddr_°¨t
);

601 
	`REG_WRITE
(
ah
, 
AR_Q_STATUS_RING_END
,áh->
ts_∑ddr_íd
);

602 
	}
}

604 
	$©h9k_hw_£tup_°©u§ög
(
©h_hw
 *
ah
, *
ts_°¨t
,

605 
u32
 
ts_∑ddr_°¨t
,

606 
u16
 
size
)

609 
ah
->
ts_∑ddr_°¨t
 =Ås_paddr_start;

610 
ah
->
ts_∑ddr_íd
 = 
ts_∑ddr_°¨t
 + (
size
 * (
¨9003_txs
));

611 
ah
->
ts_size
 = 
size
;

612 
ah
->
ts_rög
 = (
¨9003_txs
 *Ë
ts_°¨t
;

614 
	`©h9k_hw_ª£t_tx°©us_rög
(
ah
);

615 
	}
}

616 
EXPORT_SYMBOL
(
©h9k_hw_£tup_°©u§ög
);

	@ar9003_mac.h

17 #i‚de‡
AR9003_MAC_H


18 
	#AR9003_MAC_H


	)

20 
	#AR_DescId
 0xffff0000

	)

21 
	#AR_DescId_S
 16

	)

22 
	#AR_CålSèt
 0x00004000

	)

23 
	#AR_CålSèt_S
 14

	)

24 
	#AR_TxRxDesc
 0x00008000

	)

25 
	#AR_TxRxDesc_S
 15

	)

26 
	#AR_TxQcuNum
 0x00000f00

	)

27 
	#AR_TxQcuNum_S
 8

	)

29 
	#AR_BufLí
 0x0fff0000

	)

30 
	#AR_BufLí_S
 16

	)

32 
	#AR_TxDescId
 0xffff0000

	)

33 
	#AR_TxDescId_S
 16

	)

34 
	#AR_TxPåChkSum
 0x0000ffff

	)

36 
	#AR_LowRxChaö
 0x00004000

	)

38 
	#AR_NŸ_Soundög
 0x20000000

	)

41 
	#AR_PAPRDChaöMask
 0x00000e00

	)

42 
	#AR_PAPRDChaöMask_S
 9

	)

44 
	#MAP_ISR_S2_CST
 6

	)

45 
	#MAP_ISR_S2_GTT
 6

	)

46 
	#MAP_ISR_S2_TIM
 3

	)

47 
	#MAP_ISR_S2_CABEND
 0

	)

48 
	#MAP_ISR_S2_DTIMSYNC
 7

	)

49 
	#MAP_ISR_S2_DTIM
 7

	)

50 
	#MAP_ISR_S2_TSFOOR
 4

	)

51 
	#MAP_ISR_S2_BB_WATCHDOG
 6

	)

53 
	#AR9003TXC_CONST
(
_ds
Ë((c⁄° 
¨9003_txc
 *Ë_ds)

	)

55 
	s¨9003_rxs
 {

56 
u32
 
	mds_öfo
;

57 
u32
 
	m°©us1
;

58 
u32
 
	m°©us2
;

59 
u32
 
	m°©us3
;

60 
u32
 
	m°©us4
;

61 
u32
 
	m°©us5
;

62 
u32
 
	m°©us6
;

63 
u32
 
	m°©us7
;

64 
u32
 
	m°©us8
;

65 
u32
 
	m°©us9
;

66 
u32
 
	m°©us10
;

67 
u32
 
	m°©us11
;

68 } 
__∑cked
 
__Æig√d
(4);

71 
	s¨9003_txc
 {

72 
u32
 
	möfo
;

73 
u32
 
	mlök
;

74 
u32
 
	md©a0
;

75 
u32
 
	m˘l3
;

76 
u32
 
	md©a1
;

77 
u32
 
	m˘l5
;

78 
u32
 
	md©a2
;

79 
u32
 
	m˘l7
;

80 
u32
 
	md©a3
;

81 
u32
 
	m˘l9
;

82 
u32
 
	m˘l10
;

83 
u32
 
	m˘l11
;

84 
u32
 
	m˘l12
;

85 
u32
 
	m˘l13
;

86 
u32
 
	m˘l14
;

87 
u32
 
	m˘l15
;

88 
u32
 
	m˘l16
;

89 
u32
 
	m˘l17
;

90 
u32
 
	m˘l18
;

91 
u32
 
	m˘l19
;

92 
u32
 
	m˘l20
;

93 
u32
 
	m˘l21
;

94 
u32
 
	m˘l22
;

95 
u32
 
	m˘l23
;

96 
u32
 
	m∑d
[8];

97 } 
__∑cked
 
__Æig√d
(4);

99 
	s¨9003_txs
 {

100 
u32
 
	mds_öfo
;

101 
u32
 
	m°©us1
;

102 
u32
 
	m°©us2
;

103 
u32
 
	m°©us3
;

104 
u32
 
	m°©us4
;

105 
u32
 
	m°©us5
;

106 
u32
 
	m°©us6
;

107 
u32
 
	m°©us7
;

108 
u32
 
	m°©us8
;

109 } 
__∑cked
 
__Æig√d
(4);

111 
¨9003_hw_©èch_mac_›s
(
©h_hw
 *
hw
);

112 
©h9k_hw_£t_rx_bufsize
(
©h_hw
 *
ah
, 
u16
 
buf_size
);

113 
©h9k_hw_addrxbuf_edma
(
©h_hw
 *
ah
, 
u32
 
rxdp
,

114 
©h9k_rx_qty≥
 
qty≥
);

116 
©h9k_hw_¥o˚ss_rxdesc_edma
(
©h_hw
 *
ah
,

117 
©h_rx_°©us
 *
rxs
,

118 *
buf_addr
);

119 
©h9k_hw_ª£t_tx°©us_rög
(
©h_hw
 *
ah
);

120 
©h9k_hw_£tup_°©u§ög
(
©h_hw
 *
ah
, *
ts_°¨t
,

121 
u32
 
ts_∑ddr_°¨t
,

122 
u16
 
size
);

	@ar9003_mci.c

17 
	~<löux/exp‹t.h
>

18 
	~"hw.h
"

19 
	~"hw-›s.h
"

20 
	~"¨9003_phy.h
"

21 
	~"¨9003_mci.h
"

22 
	~"¨9003_aic.h
"

24 
	$¨9003_mci_ª£t_ªq_wakeup
(
©h_hw
 *
ah
)

26 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_COMMAND2
,

27 
AR_MCI_COMMAND2_RESET_REQ_WAKEUP
, 1);

28 
	`udñay
(1);

29 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_COMMAND2
,

30 
AR_MCI_COMMAND2_RESET_REQ_WAKEUP
, 0);

31 
	}
}

33 
	$¨9003_mci_waô_f‹_öãºu±
(
©h_hw
 *
ah
, 
u32
 
addªss
,

34 
u32
 
bô_posôi⁄
, 
time_out
)

36 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

38 
time_out
) {

39 i‡(!(
	`REG_READ
(
ah
, 
addªss
Ë& 
bô_posôi⁄
)) {

40 
	`udñay
(10);

41 
time_out
 -= 10;

43 i‡(
time_out
 < 0)

48 
	`REG_WRITE
(
ah
, 
addªss
, 
bô_posôi⁄
);

50 i‡(
addªss
 !
AR_MCI_INTERRUPT_RX_MSG_RAW
)

53 i‡(
bô_posôi⁄
 & 
AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
)

54 
	`¨9003_mci_ª£t_ªq_wakeup
(
ah
);

56 i‡(
bô_posôi⁄
 & (
AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING
 |

57 
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
))

58 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
,

59 
AR_MCI_INTERRUPT_REMOTE_SLEEP_UPDATE
);

61 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
, 
AR_MCI_INTERRUPT_RX_MSG
);

65 i‡(
time_out
 <= 0) {

66 
	`©h_dbg
(
comm⁄
, 
MCI
,

68 
addªss
, 
bô_posôi⁄
);

69 
	`©h_dbg
(
comm⁄
, 
MCI
,

71 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RAW
),

72 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
));

73 
time_out
 = 0;

76  
time_out
;

77 
	}
}

79 
	$¨9003_mci_ªmŸe_ª£t
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

81 
u32
 
∑ylﬂd
[4] = { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffff00};

83 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_REMOTE_RESET
, 0, 
∑ylﬂd
, 16,

84 
waô_d⁄e
, 
Ál£
);

85 
	`udñay
(5);

86 
	}
}

88 
	$¨9003_mci_£nd_ a_å™s„r
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

90 
u32
 
∑ylﬂd
 = 0x00000000;

92 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_LNA_TRANS
, 0, &
∑ylﬂd
, 1,

93 
waô_d⁄e
, 
Ál£
);

94 
	}
}

96 
	$¨9003_mci_£nd_ªq_wake
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

98 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_REQ_WAKE
, 
MCI_FLAG_DISABLE_TIMESTAMP
,

99 
NULL
, 0, 
waô_d⁄e
, 
Ál£
);

100 
	`udñay
(5);

101 
	}
}

103 
	$¨9003_mci_£nd_sys_wakög
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

105 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_SYS_WAKING
, 
MCI_FLAG_DISABLE_TIMESTAMP
,

106 
NULL
, 0, 
waô_d⁄e
, 
Ál£
);

107 
	}
}

109 
	$¨9003_mci_£nd_ a_èke
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

111 
u32
 
∑ylﬂd
 = 0x70000000;

113 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_LNA_TAKE
, 0, &
∑ylﬂd
, 1,

114 
waô_d⁄e
, 
Ál£
);

115 
	}
}

117 
	$¨9003_mci_£nd_sys_¶ìpög
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

119 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_SYS_SLEEPING
,

120 
MCI_FLAG_DISABLE_TIMESTAMP
,

121 
NULL
, 0, 
waô_d⁄e
, 
Ál£
);

122 
	}
}

124 
	$¨9003_mci_£nd_c€x_vîsi⁄_quîy
(
©h_hw
 *
ah
,

125 
boﬁ
 
waô_d⁄e
)

127 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

128 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

130 i‡(
mci
->
bt_vîsi⁄_known
 ||

131 (
mci
->
bt_°©e
 =
MCI_BT_SLEEP
))

134 
	`MCI_GPM_SET_TYPE_OPCODE
(
∑ylﬂd
, 
MCI_GPM_COEX_AGENT
,

135 
MCI_GPM_COEX_VERSION_QUERY
);

136 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
, 16, 
waô_d⁄e
, 
åue
);

137 
	}
}

139 
	$¨9003_mci_£nd_c€x_vîsi⁄_ª•⁄£
(
©h_hw
 *
ah
,

140 
boﬁ
 
waô_d⁄e
)

142 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

143 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

145 
	`MCI_GPM_SET_TYPE_OPCODE
(
∑ylﬂd
, 
MCI_GPM_COEX_AGENT
,

146 
MCI_GPM_COEX_VERSION_RESPONSE
);

147 *(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_MAJOR_VERSION
) =

148 
mci
->
wœn_vî_maj‹
;

149 *(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_MINOR_VERSION
) =

150 
mci
->
wœn_vî_mö‹
;

151 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
, 16, 
waô_d⁄e
, 
åue
);

152 
	}
}

154 
	$¨9003_mci_£nd_c€x_wœn_ch™√ls
(
©h_hw
 *
ah
,

155 
boﬁ
 
waô_d⁄e
)

157 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

158 
u32
 *
∑ylﬂd
 = &
mci
->
wœn_ch™√ls
[0];

160 i‡(!
mci
->
wœn_ch™√ls_upd©e
 ||

161 (
mci
->
bt_°©e
 =
MCI_BT_SLEEP
))

164 
	`MCI_GPM_SET_TYPE_OPCODE
(
∑ylﬂd
, 
MCI_GPM_COEX_AGENT
,

165 
MCI_GPM_COEX_WLAN_CHANNELS
);

166 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
, 16, 
waô_d⁄e
, 
åue
);

167 
	`MCI_GPM_SET_TYPE_OPCODE
(
∑ylﬂd
, 0xff, 0xff);

168 
	}
}

170 
	$¨9003_mci_£nd_c€x_bt_°©us_quîy
(
©h_hw
 *
ah
,

171 
boﬁ
 
waô_d⁄e
, 
u8
 
quîy_ty≥
)

173 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

174 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

175 
boﬁ
 
quîy_btöfo
;

177 i‡(
mci
->
bt_°©e
 =
MCI_BT_SLEEP
)

180 
quîy_btöfo
 = !!(
quîy_ty≥
 & (
MCI_GPM_COEX_QUERY_BT_ALL_INFO
 |

181 
MCI_GPM_COEX_QUERY_BT_TOPOLOGY
));

182 
	`MCI_GPM_SET_TYPE_OPCODE
(
∑ylﬂd
, 
MCI_GPM_COEX_AGENT
,

183 
MCI_GPM_COEX_STATUS_QUERY
);

185 *(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_BT_BITMAP
Ë
quîy_ty≥
;

191 i‡(!
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
, 16,

192 
waô_d⁄e
, 
åue
)) {

193 i‡(
quîy_btöfo
)

194 
mci
->
√ed_Êush_btöfo
 = 
åue
;

197 i‡(
quîy_btöfo
)

198 
mci
->
quîy_bt
 = 
Ál£
;

199 
	}
}

201 
	$¨9003_mci_£nd_c€x_hÆt_bt_gpm
(
©h_hw
 *
ah
, 
boﬁ
 
hÆt
,

202 
boﬁ
 
waô_d⁄e
)

204 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

205 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

207 
	`MCI_GPM_SET_TYPE_OPCODE
(
∑ylﬂd
, 
MCI_GPM_COEX_AGENT
,

208 
MCI_GPM_COEX_HALT_BT_GPM
);

210 i‡(
hÆt
) {

211 
mci
->
quîy_bt
 = 
åue
;

213 
mci
->
unhÆt_bt_gpm
 = 
åue
;

214 
mci
->
√ed_Êush_btöfo
 = 
åue
;

215 *(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_HALT_STATE
) =

216 
MCI_GPM_COEX_BT_GPM_HALT
;

218 *(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_HALT_STATE
) =

219 
MCI_GPM_COEX_BT_GPM_UNHALT
;

221 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
, 16, 
waô_d⁄e
, 
åue
);

222 
	}
}

224 
	$¨9003_mci_¥ï_öãrÁ˚
(
©h_hw
 *
ah
)

226 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

227 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

228 
u32
 
ßved_mci_öt_í
;

229 
u32
 
mci_timeout
 = 150;

231 
mci
->
bt_°©e
 = 
MCI_BT_SLEEP
;

232 
ßved_mci_öt_í
 = 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_EN
);

234 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_EN
, 0);

235 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

236 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
));

237 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
,

238 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RAW
));

240 
	`¨9003_mci_ªmŸe_ª£t
(
ah
, 
åue
);

241 
	`¨9003_mci_£nd_ªq_wake
(
ah
, 
åue
);

243 i‡(!
	`¨9003_mci_waô_f‹_öãºu±
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

244 
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
, 500))

245 
˛ór_ªdu¡
;

247 
mci
->
bt_°©e
 = 
MCI_BT_AWAKE
;

265 
	`¨9003_mci_£nd_sys_wakög
(
ah
, 
åue
);

266 
	`udñay
(10);

272 
	`REG_WRITE
(
ah
, 
AR_MCI_BT_PRI0
, 0xFFFFFFFF);

273 
	`REG_WRITE
(
ah
, 
AR_MCI_BT_PRI1
, 0xFFFFFFFF);

274 
	`REG_WRITE
(
ah
, 
AR_MCI_BT_PRI2
, 0xFFFFFFFF);

275 
	`REG_WRITE
(
ah
, 
AR_MCI_BT_PRI3
, 0xFFFFFFFF);

276 
	`REG_WRITE
(
ah
, 
AR_MCI_BT_PRI
, 0X000000FF);

284 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

285 
AR_MCI_INTERRUPT_RX_MSG_CONT_RST
);

286 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
, 
AR_MCI_INTERRUPT_BT_PRI
);

288 i‡(
mci
->
is_2g
 && 
	`MCI_ANT_ARCH_PA_LNA_SHARED
(mci)) {

289 
	`¨9003_mci_£nd_ a_å™s„r
(
ah
, 
åue
);

290 
	`udñay
(5);

293 i‡(
mci
->
is_2g
 && !mci->
upd©e_2g5g
 && 
	`MCI_ANT_ARCH_PA_LNA_SHARED
(mci)) {

294 i‡(
	`¨9003_mci_waô_f‹_öãºu±
(
ah
,

295 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

296 
AR_MCI_INTERRUPT_RX_MSG_LNA_INFO
,

297 
mci_timeout
))

298 
	`©h_dbg
(
comm⁄
, 
MCI
,

301 
	`©h_dbg
(
comm⁄
, 
MCI
,

305 
˛ór_ªdu¡
:

307 i‡((
mci
->
bt_°©e
 =
MCI_BT_AWAKE
) &&

308 (
	`REG_READ_FIELD
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

309 
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
)) &&

310 (
	`REG_READ_FIELD
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

311 
AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING
) == 0)) {

312 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

313 
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
);

314 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
,

315 
AR_MCI_INTERRUPT_REMOTE_SLEEP_UPDATE
);

318 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_EN
, 
ßved_mci_öt_í
);

319 
	}
}

321 
	$¨9003_mci_£t_fuŒ_¶ìp
(
©h_hw
 *
ah
)

323 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

325 i‡(
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_ENABLE
) &&

326 (
mci
->
bt_°©e
 !
MCI_BT_SLEEP
) &&

327 !
mci
->
hÆãd_bt_gpm
) {

328 
	`¨9003_mci_£nd_c€x_hÆt_bt_gpm
(
ah
, 
åue
,Årue);

331 
mci
->
ªady
 = 
Ál£
;

332 
	}
}

334 
	$¨9003_mci_dißbÀ_öãºu±
(
©h_hw
 *
ah
)

336 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_EN
, 0);

337 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_EN
, 0);

338 
	}
}

340 
	$¨9003_mci_íabÀ_öãºu±
(
©h_hw
 *
ah
)

342 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_EN
, 
AR_MCI_INTERRUPT_DEFAULT
);

343 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_EN
,

344 
AR_MCI_INTERRUPT_RX_MSG_DEFAULT
);

345 
	}
}

347 
boﬁ
 
	$¨9003_mci_check_öt
(
©h_hw
 *
ah
, 
u32
 
öts
)

349 
u32
 
öå
;

351 
öå
 = 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
);

352  ((
öå
 & 
öts
) == ints);

353 
	}
}

355 
	$¨9003_mci_gë_öãºu±
(
©h_hw
 *
ah
, 
u32
 *
øw_öå
,

356 
u32
 *
rx_msg_öå
)

358 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

360 *
øw_öå
 = 
mci
->raw_intr;

361 *
rx_msg_öå
 = 
mci
->rx_msg_intr;

364 
mci
->
øw_öå
 = 0;

365 
mci
->
rx_msg_öå
 = 0;

366 
	}
}

367 
EXPORT_SYMBOL
(
¨9003_mci_gë_öãºu±
);

369 
	$¨9003_mci_gë_i§
(
©h_hw
 *
ah
, 
©h9k_öt
 *
masked
)

371 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

372 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

373 
u32
 
øw_öå
, 
rx_msg_öå
;

375 
rx_msg_öå
 = 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
);

376 
øw_öå
 = 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_RAW
);

378 i‡((
øw_öå
 =0xdódbìfË|| (
rx_msg_öå
 == 0xdeadbeef)) {

379 
	`©h_dbg
(
comm⁄
, 
MCI
,

382 
mci
->
rx_msg_öå
 |=Ñx_msg_intr;

383 
mci
->
øw_öå
 |=Ñaw_intr;

384 *
masked
 |
ATH9K_INT_MCI
;

386 i‡(
rx_msg_öå
 & 
AR_MCI_INTERRUPT_RX_MSG_CONT_INFO
)

387 
mci
->
c⁄t_°©us
 = 
	`REG_READ
(
ah
, 
AR_MCI_CONT_STATUS
);

389 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
, 
rx_msg_öå
);

390 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
, 
øw_öå
);

392 
	}
}

394 
	$¨9003_mci_2g5g_ch™ged
(
©h_hw
 *
ah
, 
boﬁ
 
is_2g
)

396 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

398 i‡(!
mci
->
upd©e_2g5g
 &&

399 (
mci
->
is_2g
 != is_2g))

400 
mci
->
upd©e_2g5g
 = 
åue
;

402 
mci
->
is_2g
 = is_2g;

403 
	}
}

405 
boﬁ
 
	$¨9003_mci_is_gpm_vÆid
(
©h_hw
 *
ah
, 
u32
 
msg_ödex
)

407 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

408 
u32
 *
∑ylﬂd
;

409 
u32
 
ªcv_ty≥
, 
off£t
;

411 i‡(
msg_ödex
 =
MCI_GPM_INVALID
)

412  
Ál£
;

414 
off£t
 = 
msg_ödex
 << 4;

416 
∑ylﬂd
 = (
u32
 *)(
mci
->
gpm_buf
 + 
off£t
);

417 
ªcv_ty≥
 = 
	`MCI_GPM_TYPE
(
∑ylﬂd
);

419 i‡(
ªcv_ty≥
 =
MCI_GPM_RSVD_PATTERN
)

420  
Ál£
;

422  
åue
;

423 
	}
}

425 
	$¨9003_mci_ob£rv©i⁄_£t_up
(
©h_hw
 *
ah
)

427 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

429 i‡(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_MCI_OBS_MCI
) {

430 
	`©h9k_hw_cfg_ouçut
(
ah
, 3, 
AR_GPIO_OUTPUT_MUX_AS_MCI_WLAN_DATA
);

431 
	`©h9k_hw_cfg_ouçut
(
ah
, 2, 
AR_GPIO_OUTPUT_MUX_AS_MCI_WLAN_CLK
);

432 
	`©h9k_hw_cfg_ouçut
(
ah
, 1, 
AR_GPIO_OUTPUT_MUX_AS_MCI_BT_DATA
);

433 
	`©h9k_hw_cfg_ouçut
(
ah
, 0, 
AR_GPIO_OUTPUT_MUX_AS_MCI_BT_CLK
);

434 } i‡(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_MCI_OBS_TXRX
) {

435 
	`©h9k_hw_cfg_ouçut
(
ah
, 3, 
AR_GPIO_OUTPUT_MUX_AS_WL_IN_TX
);

436 
	`©h9k_hw_cfg_ouçut
(
ah
, 2, 
AR_GPIO_OUTPUT_MUX_AS_WL_IN_RX
);

437 
	`©h9k_hw_cfg_ouçut
(
ah
, 1, 
AR_GPIO_OUTPUT_MUX_AS_BT_IN_TX
);

438 
	`©h9k_hw_cfg_ouçut
(
ah
, 0, 
AR_GPIO_OUTPUT_MUX_AS_BT_IN_RX
);

439 
	`©h9k_hw_cfg_ouçut
(
ah
, 5, 
AR_GPIO_OUTPUT_MUX_AS_OUTPUT
);

440 } i‡(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_MCI_OBS_BT
) {

441 
	`©h9k_hw_cfg_ouçut
(
ah
, 3, 
AR_GPIO_OUTPUT_MUX_AS_BT_IN_TX
);

442 
	`©h9k_hw_cfg_ouçut
(
ah
, 2, 
AR_GPIO_OUTPUT_MUX_AS_BT_IN_RX
);

443 
	`©h9k_hw_cfg_ouçut
(
ah
, 1, 
AR_GPIO_OUTPUT_MUX_AS_MCI_BT_DATA
);

444 
	`©h9k_hw_cfg_ouçut
(
ah
, 0, 
AR_GPIO_OUTPUT_MUX_AS_MCI_BT_CLK
);

448 
	`REG_SET_BIT
(
ah
, 
AR_GPIO_INPUT_EN_VAL
, 
AR_GPIO_JTAG_DISABLE
);

450 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GLB_CONTROL
, 
AR_GLB_DS_JTAG_DISABLE
, 1);

451 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GLB_CONTROL
, 
AR_GLB_WLAN_UART_INTF_EN
, 0);

452 
	`REG_SET_BIT
(
ah
, 
AR_GLB_GPIO_CONTROL
, 
ATH_MCI_CONFIG_MCI_OBS_GPIO
);

454 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
, 
AR_BTCOEX_CTRL2_GPIO_OBS_SEL
, 0);

455 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
, 
AR_BTCOEX_CTRL2_MAC_BB_OBS_SEL
, 1);

456 
	`REG_WRITE
(
ah
, 
AR_OBS
, 0x4b);

457 
	`REG_RMW_FIELD
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_OBS_PT_SEL1
, 0x03);

458 
	`REG_RMW_FIELD
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_OBS_PT_SEL2
, 0x01);

459 
	`REG_RMW_FIELD
(
ah
, 
AR_MACMISC
, 
AR_MACMISC_MISC_OBS_BUS_LSB
, 0x02);

460 
	`REG_RMW_FIELD
(
ah
, 
AR_MACMISC
, 
AR_MACMISC_MISC_OBS_BUS_MSB
, 0x03);

461 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TEST_CTL_STATUS
,

462 
AR_PHY_TEST_CTL_DEBUGPORT_SEL
, 0x07);

463 
	}
}

465 
boﬁ
 
	$¨9003_mci_£nd_c€x_bt_Êags
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
,

466 
u8
 
›code
, 
u32
 
bt_Êags
)

468 
u32
 
∂d
[4] = {0, 0, 0, 0};

470 
	`MCI_GPM_SET_TYPE_OPCODE
(
∂d
, 
MCI_GPM_COEX_AGENT
,

471 
MCI_GPM_COEX_BT_UPDATE_FLAGS
);

473 *(((
u8
 *)
∂d
Ë+ 
MCI_GPM_COEX_B_BT_FLAGS_OP
Ë
›code
;

474 *(((
u8
 *)
∂d
Ë+ 
MCI_GPM_COEX_W_BT_FLAGS
 + 0Ë
bt_Êags
 & 0xFF;

475 *(((
u8
 *)
∂d
Ë+ 
MCI_GPM_COEX_W_BT_FLAGS
 + 1Ë(
bt_Êags
 >> 8) & 0xFF;

476 *(((
u8
 *)
∂d
Ë+ 
MCI_GPM_COEX_W_BT_FLAGS
 + 2Ë(
bt_Êags
 >> 16) & 0xFF;

477 *(((
u8
 *)
∂d
Ë+ 
MCI_GPM_COEX_W_BT_FLAGS
 + 3Ë(
bt_Êags
 >> 24) & 0xFF;

479  
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∂d
, 16,

480 
waô_d⁄e
, 
åue
);

481 
	}
}

483 
	$¨9003_mci_sync_bt_°©e
(
©h_hw
 *
ah
)

485 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

486 
u32
 
cur_bt_°©e
;

488 
cur_bt_°©e
 = 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_REMOTE_SLEEP
);

490 i‡(
mci
->
bt_°©e
 !
cur_bt_°©e
)

491 
mci
->
bt_°©e
 = 
cur_bt_°©e
;

493 i‡(
mci
->
bt_°©e
 !
MCI_BT_SLEEP
) {

495 
	`¨9003_mci_£nd_c€x_vîsi⁄_quîy
(
ah
, 
åue
);

496 
	`¨9003_mci_£nd_c€x_wœn_ch™√ls
(
ah
, 
åue
);

498 i‡(
mci
->
unhÆt_bt_gpm
 =
åue
)

499 
	`¨9003_mci_£nd_c€x_hÆt_bt_gpm
(
ah
, 
Ál£
, 
åue
);

501 
	}
}

503 
	$¨9003_mci_check_bt
(
©h_hw
 *
ah
)

505 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

507 i‡(!
mci_hw
->
ªady
)

514 
	`¨9003_mci_sync_bt_°©e
(
ah
);

515 
	`¨9003_mci_2g5g_swôch
(
ah
, 
åue
);

517 i‡((
mci_hw
->
bt_°©e
 =
MCI_BT_AWAKE
) &&

518 (
mci_hw
->
quîy_bt
 =
åue
)) {

519 
mci_hw
->
√ed_Êush_btöfo
 = 
åue
;

521 
	}
}

523 
	$¨9003_mci_¥o˚ss_gpm_exåa
(
©h_hw
 *
ah
, 
u8
 
gpm_ty≥
,

524 
u8
 
gpm_›code
, 
u32
 *
p_gpm
)

526 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

527 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

528 
u8
 *
p_d©a
 = (u8 *Ë
p_gpm
;

530 i‡(
gpm_ty≥
 !
MCI_GPM_COEX_AGENT
)

533 
gpm_›code
) {

534 
MCI_GPM_COEX_VERSION_QUERY
:

535 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI Recv GPM COEX Version Query\n");

536 
	`¨9003_mci_£nd_c€x_vîsi⁄_ª•⁄£
(
ah
, 
åue
);

538 
MCI_GPM_COEX_VERSION_RESPONSE
:

539 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI Recv GPM COEX Version Response\n");

540 
mci
->
bt_vî_maj‹
 =

541 *(
p_d©a
 + 
MCI_GPM_COEX_B_MAJOR_VERSION
);

542 
mci
->
bt_vî_mö‹
 =

543 *(
p_d©a
 + 
MCI_GPM_COEX_B_MINOR_VERSION
);

544 
mci
->
bt_vîsi⁄_known
 = 
åue
;

545 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI BT Coex version: %d.%d\n",

546 
mci
->
bt_vî_maj‹
, mci->
bt_vî_mö‹
);

548 
MCI_GPM_COEX_STATUS_QUERY
:

549 
	`©h_dbg
(
comm⁄
, 
MCI
,

551 *(
p_d©a
 + 
MCI_GPM_COEX_B_WLAN_BITMAP
));

552 
mci
->
wœn_ch™√ls_upd©e
 = 
åue
;

553 
	`¨9003_mci_£nd_c€x_wœn_ch™√ls
(
ah
, 
åue
);

555 
MCI_GPM_COEX_BT_PROFILE_INFO
:

556 
mci
->
quîy_bt
 = 
åue
;

557 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI Recv GPM COEX BT_Profile_Info\n");

559 
MCI_GPM_COEX_BT_STATUS_UPDATE
:

560 
mci
->
quîy_bt
 = 
åue
;

561 
	`©h_dbg
(
comm⁄
, 
MCI
,

563 *(
p_gpm
 + 3));

568 
	}
}

570 
u32
 
	$¨9003_mci_waô_f‹_gpm
(
©h_hw
 *
ah
, 
u8
 
gpm_ty≥
,

571 
u8
 
gpm_›code
, 
time_out
)

573 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

574 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

575 
u32
 *
p_gpm
 = 
NULL
, 
mism©ch
 = 0, 
m‹e_d©a
;

576 
u32
 
off£t
;

577 
u8
 
ªcv_ty≥
 = 0, 
ªcv_›code
 = 0;

578 
boﬁ
 
b_is_bt_ˇl_d⁄e
 = (
gpm_ty≥
 =
MCI_GPM_BT_CAL_DONE
);

580 
m‹e_d©a
 = 
time_out
 ? 
MCI_GPM_NOMORE
 : 
MCI_GPM_MORE
;

582 
time_out
 > 0) {

583 i‡(
p_gpm
) {

584 
	`MCI_GPM_RECYCLE
(
p_gpm
);

585 
p_gpm
 = 
NULL
;

588 i‡(
m‹e_d©a
 !
MCI_GPM_MORE
)

589 
time_out
 = 
	`¨9003_mci_waô_f‹_öãºu±
(
ah
,

590 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

591 
AR_MCI_INTERRUPT_RX_MSG_GPM
,

592 
time_out
);

594 i‡(!
time_out
)

597 
off£t
 = 
	`¨9003_mci_gë_√xt_gpm_off£t
(
ah
, &
m‹e_d©a
);

599 i‡(
off£t
 =
MCI_GPM_INVALID
)

602 
p_gpm
 = (
u32
 *Ë(
mci
->
gpm_buf
 + 
off£t
);

603 
ªcv_ty≥
 = 
	`MCI_GPM_TYPE
(
p_gpm
);

604 
ªcv_›code
 = 
	`MCI_GPM_OPCODE
(
p_gpm
);

606 i‡(
	`MCI_GPM_IS_CAL_TYPE
(
ªcv_ty≥
)) {

607 i‡(
ªcv_ty≥
 =
gpm_ty≥
) {

608 i‡((
gpm_ty≥
 =
MCI_GPM_BT_CAL_DONE
) &&

609 !
b_is_bt_ˇl_d⁄e
) {

610 
gpm_ty≥
 = 
MCI_GPM_BT_CAL_GRANT
;

615 } i‡((
ªcv_ty≥
 =
gpm_ty≥
) &&

616 (
ªcv_›code
 =
gpm_›code
))

632 i‡((
gpm_ty≥
 =
MCI_GPM_BT_CAL_GRANT
) &&

633 (
ªcv_ty≥
 =
MCI_GPM_BT_CAL_REQ
)) {

635 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

637 
gpm_ty≥
 = 
MCI_GPM_BT_CAL_DONE
;

638 
	`MCI_GPM_SET_CAL_TYPE
(
∑ylﬂd
,

639 
MCI_GPM_WLAN_CAL_GRANT
);

640 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
, 16,

641 
Ál£
, false);

644 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI GPM subtypeÇot match 0x%x\n",

645 *(
p_gpm
 + 1));

646 
mism©ch
++;

647 
	`¨9003_mci_¥o˚ss_gpm_exåa
(
ah
, 
ªcv_ty≥
,

648 
ªcv_›code
, 
p_gpm
);

652 i‡(
p_gpm
) {

653 
	`MCI_GPM_RECYCLE
(
p_gpm
);

654 
p_gpm
 = 
NULL
;

657 i‡(
time_out
 <= 0)

658 
time_out
 = 0;

660 
m‹e_d©a
 =
MCI_GPM_MORE
) {

661 
off£t
 = 
	`¨9003_mci_gë_√xt_gpm_off£t
(
ah
, &
m‹e_d©a
);

662 i‡(
off£t
 =
MCI_GPM_INVALID
)

665 
p_gpm
 = (
u32
 *Ë(
mci
->
gpm_buf
 + 
off£t
);

666 
ªcv_ty≥
 = 
	`MCI_GPM_TYPE
(
p_gpm
);

667 
ªcv_›code
 = 
	`MCI_GPM_OPCODE
(
p_gpm
);

669 i‡(!
	`MCI_GPM_IS_CAL_TYPE
(
ªcv_ty≥
))

670 
	`¨9003_mci_¥o˚ss_gpm_exåa
(
ah
, 
ªcv_ty≥
,

671 
ªcv_›code
, 
p_gpm
);

673 
	`MCI_GPM_RECYCLE
(
p_gpm
);

676  
time_out
;

677 
	}
}

679 
boﬁ
 
	$¨9003_mci_°¨t_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

681 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

682 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

683 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

685 
	`¨9003_mci_2g5g_ch™ged
(
ah
, 
	`IS_CHAN_2GHZ
(
ch™
));

687 i‡(
mci_hw
->
bt_°©e
 !
MCI_BT_CAL_START
)

688  
Ál£
;

690 
mci_hw
->
bt_°©e
 = 
MCI_BT_CAL
;

697 
	`¨9003_mci_dißbÀ_öãºu±
(
ah
);

699 
	`MCI_GPM_SET_CAL_TYPE
(
∑ylﬂd
, 
MCI_GPM_WLAN_CAL_GRANT
);

700 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∑ylﬂd
,

701 16, 
åue
, 
Ál£
);

705 i‡(
	`¨9003_mci_waô_f‹_gpm
(
ah
, 
MCI_GPM_BT_CAL_DONE
,

707 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI BT_CAL_DONEÑeceived\n");

709 
	`©h_dbg
(
comm⁄
, 
MCI
,

712 
mci_hw
->
bt_°©e
 = 
MCI_BT_AWAKE
;

714 
	`¨9003_mci_íabÀ_öãºu±
(
ah
);

716  
åue
;

717 
	}
}

719 
	$¨9003_mci_íd_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

720 
©h9k_hw_ˇl_d©a
 *
ˇld©a
)

722 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

724 i‡(!
mci_hw
->
ªady
)

727 i‡(!
	`IS_CHAN_2GHZ
(
ch™
Ë|| (
mci_hw
->
bt_°©e
 !
MCI_BT_SLEEP
))

728 
exô
;

730 i‡(!
	`¨9003_mci_check_öt
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_REMOTE_RESET
) &&

731 !
	`¨9003_mci_check_öt
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
))

732 
exô
;

740 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

741 (
AR_MCI_INTERRUPT_RX_MSG_REMOTE_RESET
 |

742 
AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
));

744 
	`¨9003_mci_ªmŸe_ª£t
(
ah
, 
åue
);

745 
	`¨9003_mci_£nd_sys_wakög
(
ah
, 
åue
);

746 
	`udñay
(1);

748 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

749 
	`¨9003_mci_£nd_ a_å™s„r
(
ah
, 
åue
);

751 
mci_hw
->
bt_°©e
 = 
MCI_BT_AWAKE
;

753 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_TIMING4
,

754 1 << 
AR_PHY_TIMING_CONTROL4_DO_GAIN_DC_IQ_CAL_SHIFT
);

756 i‡(
ˇld©a
) {

757 
	`˛ór_bô
(
TXIQCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

758 
	`˛ór_bô
(
TXCLCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

759 
	`˛ór_bô
(
RTT_DONE
, &
ˇld©a
->
ˇl_Êags
);

762 i‡(!
	`©h9k_hw_öô_ˇl
(
ah
, 
ch™
))

763  -
EIO
;

765 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TIMING4
,

766 1 << 
AR_PHY_TIMING_CONTROL4_DO_GAIN_DC_IQ_CAL_SHIFT
);

768 
exô
:

769 
	`¨9003_mci_íabÀ_öãºu±
(
ah
);

771 
	}
}

773 
	$¨9003_mci_muã_bt
(
©h_hw
 *
ah
)

775 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

778 
	`REG_WRITE
(
ah
, 
AR_MCI_MSG_ATTRIBUTES_TABLE
, 0xffff0000);

779 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_WL_WEIGHTS0
, 0xffffffff);

780 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_WL_WEIGHTS1
, 0xffffffff);

781 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_WL_WEIGHTS2
, 0xffffffff);

782 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_WL_WEIGHTS3
, 0xffffffff);

783 
	`REG_SET_BIT
(
ah
, 
AR_MCI_TX_CTRL
, 
AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE
);

786 
	`udñay
(10);

793 i‡(
	`MCI_ANT_ARCH_PA_LNA_SHARED
(
mci
)) {

794 
	`¨9003_mci_£nd_ a_èke
(
ah
, 
åue
);

795 
	`udñay
(5);

798 
	`¨9003_mci_£nd_sys_¶ìpög
(
ah
, 
åue
);

799 
	}
}

801 
	$¨9003_mci_o¶a_£tup
(
©h_hw
 *
ah
, 
boﬁ
 
íabÀ
)

803 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

804 
u32
 
thªsh
;

806 i‡(!
íabÀ
) {

807 
	`REG_CLR_BIT
(
ah
, 
AR_BTCOEX_CTRL
,

808 
AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN
);

811 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_SCHD_TABLE_2
, 
AR_MCI_SCHD_TABLE_2_HW_BASED
, 1);

812 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_SCHD_TABLE_2
,

813 
AR_MCI_SCHD_TABLE_2_MEM_BASED
, 1);

815 i‡(
	`AR_SREV_9565
(
ah
))

816 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_MISC
, 
AR_MCI_MISC_HW_FIX_EN
, 1);

818 i‡(!(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_AGGR_THRESH
)) {

819 
thªsh
 = 
	`MS
(
mci
->
c⁄fig
, 
ATH_MCI_CONFIG_AGGR_THRESH
);

820 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL
,

821 
AR_BTCOEX_CTRL_AGGR_THRESH
, 
thªsh
);

822 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL
,

823 
AR_BTCOEX_CTRL_TIME_TO_NEXT_BT_THRESH_EN
, 1);

825 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL
,

826 
AR_BTCOEX_CTRL_TIME_TO_NEXT_BT_THRESH_EN
, 0);

828 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL
,

829 
AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN
, 1);

830 
	}
}

832 
	$¨9003_mci_°©_£tup
(
©h_hw
 *
ah
)

834 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

836 i‡(!
	`AR_SREV_9565
(
ah
))

839 i‡(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_MCI_STAT_DBG
) {

840 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_DBG_CNT_CTRL
,

841 
AR_MCI_DBG_CNT_CTRL_ENABLE
, 1);

842 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_DBG_CNT_CTRL
,

843 
AR_MCI_DBG_CNT_CTRL_BT_LINKID
,

844 
MCI_STAT_ALL_BT_LINKID
);

846 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_DBG_CNT_CTRL
,

847 
AR_MCI_DBG_CNT_CTRL_ENABLE
, 0);

849 
	}
}

851 
	$¨9003_mci_£t_btc€x_˘æ_9565_1ANT
(
©h_hw
 *
ah
)

853 
u32
 
ªgvÆ
;

855 
ªgvÆ
 = 
	`SM
(1, 
AR_BTCOEX_CTRL_AR9462_MODE
) |

856 
	`SM
(1, 
AR_BTCOEX_CTRL_WBTIMER_EN
) |

857 
	`SM
(1, 
AR_BTCOEX_CTRL_PA_SHARED
) |

858 
	`SM
(1, 
AR_BTCOEX_CTRL_LNA_SHARED
) |

859 
	`SM
(1, 
AR_BTCOEX_CTRL_NUM_ANTENNAS
) |

860 
	`SM
(1, 
AR_BTCOEX_CTRL_RX_CHAIN_MASK
) |

861 
	`SM
(0, 
AR_BTCOEX_CTRL_1_CHAIN_ACK
) |

862 
	`SM
(0, 
AR_BTCOEX_CTRL_1_CHAIN_BCN
) |

863 
	`SM
(0, 
AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN
);

865 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
,

866 
AR_BTCOEX_CTRL2_TX_CHAIN_MASK
, 0x1);

867 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL
, 
ªgvÆ
);

868 
	}
}

870 
	$¨9003_mci_£t_btc€x_˘æ_9565_2ANT
(
©h_hw
 *
ah
)

872 
u32
 
ªgvÆ
;

874 
ªgvÆ
 = 
	`SM
(1, 
AR_BTCOEX_CTRL_AR9462_MODE
) |

875 
	`SM
(1, 
AR_BTCOEX_CTRL_WBTIMER_EN
) |

876 
	`SM
(0, 
AR_BTCOEX_CTRL_PA_SHARED
) |

877 
	`SM
(0, 
AR_BTCOEX_CTRL_LNA_SHARED
) |

878 
	`SM
(2, 
AR_BTCOEX_CTRL_NUM_ANTENNAS
) |

879 
	`SM
(1, 
AR_BTCOEX_CTRL_RX_CHAIN_MASK
) |

880 
	`SM
(0, 
AR_BTCOEX_CTRL_1_CHAIN_ACK
) |

881 
	`SM
(0, 
AR_BTCOEX_CTRL_1_CHAIN_BCN
) |

882 
	`SM
(0, 
AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN
);

884 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
,

885 
AR_BTCOEX_CTRL2_TX_CHAIN_MASK
, 0x0);

886 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL
, 
ªgvÆ
);

887 
	}
}

889 
	$¨9003_mci_£t_btc€x_˘æ_9462
(
©h_hw
 *
ah
)

891 
u32
 
ªgvÆ
;

893 
ªgvÆ
 = 
	`SM
(1, 
AR_BTCOEX_CTRL_AR9462_MODE
) |

894 
	`SM
(1, 
AR_BTCOEX_CTRL_WBTIMER_EN
) |

895 
	`SM
(1, 
AR_BTCOEX_CTRL_PA_SHARED
) |

896 
	`SM
(1, 
AR_BTCOEX_CTRL_LNA_SHARED
) |

897 
	`SM
(2, 
AR_BTCOEX_CTRL_NUM_ANTENNAS
) |

898 
	`SM
(3, 
AR_BTCOEX_CTRL_RX_CHAIN_MASK
) |

899 
	`SM
(0, 
AR_BTCOEX_CTRL_1_CHAIN_ACK
) |

900 
	`SM
(0, 
AR_BTCOEX_CTRL_1_CHAIN_BCN
) |

901 
	`SM
(0, 
AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN
);

903 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL
, 
ªgvÆ
);

904 
	}
}

906 
	$¨9003_mci_ª£t
(
©h_hw
 *
ah
, 
boﬁ
 
í_öt
, boﬁ 
is_2g
,

907 
boﬁ
 
is_fuŒ_¶ìp
)

909 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

910 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

911 
u32
 
ªgvÆ
, 
i
;

913 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI Reset (full_sleep = %d, is_2g = %d)\n",

914 
is_fuŒ_¶ìp
, 
is_2g
);

916 i‡(
	`REG_READ
(
ah
, 
AR_BTCOEX_CTRL
) == 0xdeadbeef) {

917 
	`©h_îr
(
comm⁄
, "BTCOEX controlÑegister is dead\n");

918  -
EINVAL
;

922 
	`REG_WRITE
(
ah
, 
AR_MCI_GPM_0
, 
mci
->
gpm_addr
);

923 
	`REG_WRITE
(
ah
, 
AR_MCI_GPM_1
, 
mci
->
gpm_Àn
);

924 
	`REG_WRITE
(
ah
, 
AR_MCI_SCHD_TABLE_0
, 
mci
->
sched_addr
);

930 i‡(
	`AR_SREV_9565
(
ah
)) {

931 
u8
 
™t
 = 
	`MS
(
mci
->
c⁄fig
, 
ATH_MCI_CONFIG_ANT_ARCH
);

933 i‡(
™t
 =
ATH_MCI_ANT_ARCH_1_ANT_PA_LNA_SHARED
)

934 
	`¨9003_mci_£t_btc€x_˘æ_9565_1ANT
(
ah
);

936 
	`¨9003_mci_£t_btc€x_˘æ_9565_2ANT
(
ah
);

938 
	`¨9003_mci_£t_btc€x_˘æ_9462
(
ah
);

941 i‡(
is_2g
 && !(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_OSLA
))

942 
	`¨9003_mci_o¶a_£tup
(
ah
, 
åue
);

944 
	`¨9003_mci_o¶a_£tup
(
ah
, 
Ál£
);

946 
	`REG_SET_BIT
(
ah
, 
AR_PHY_GLB_CONTROL
,

947 
AR_BTCOEX_CTRL_SPDT_ENABLE
);

948 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL3
,

949 
AR_BTCOEX_CTRL3_CONT_INFO_TIMEOUT
, 20);

951 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
, 
AR_BTCOEX_CTRL2_RX_DEWEIGHT
, 0);

952 
	`REG_RMW_FIELD
(
ah
, 
AR_PCU_MISC
, 
AR_PCU_BT_ANT_PREVENT_RX
, 0);

955 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_WL_LNA
, 
AR_BTCOEX_WL_LNA_TIMEOUT
, 0x3D090);

958 i‡(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_CONCUR_TX
) {

959 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
,

960 
AR_BTCOEX_CTRL2_DESC_BASED_TXPWR_ENABLE
, 0);

961 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL2
,

962 
AR_BTCOEX_CTRL2_TXPWR_THRESH
, 0x7f);

963 
	`REG_RMW_FIELD
(
ah
, 
AR_BTCOEX_CTRL
,

964 
AR_BTCOEX_CTRL_REDUCE_TXPWR
, 0);

965 
i
 = 0; i < 8; i++)

966 
	`REG_WRITE
(
ah
, 
	`AR_BTCOEX_MAX_TXPWR
(
i
), 0x7f7f7f7f);

969 
ªgvÆ
 = 
	`MS
(
mci
->
c⁄fig
, 
ATH_MCI_CONFIG_CLK_DIV
);

970 
	`REG_RMW_FIELD
(
ah
, 
AR_MCI_TX_CTRL
, 
AR_MCI_TX_CTRL_CLK_DIV
, 
ªgvÆ
);

971 
	`REG_SET_BIT
(
ah
, 
AR_BTCOEX_CTRL
, 
AR_BTCOEX_CTRL_MCI_MODE_EN
);

974 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_MCI_COMMAND2
);

975 
ªgvÆ
 |
	`SM
(1, 
AR_MCI_COMMAND2_RESET_TX
);

976 
	`REG_WRITE
(
ah
, 
AR_MCI_COMMAND2
, 
ªgvÆ
);

978 
	`udñay
(1);

980 
ªgvÆ
 &~
	`SM
(1, 
AR_MCI_COMMAND2_RESET_TX
);

981 
	`REG_WRITE
(
ah
, 
AR_MCI_COMMAND2
, 
ªgvÆ
);

983 i‡(
is_fuŒ_¶ìp
) {

984 
	`¨9003_mci_muã_bt
(
ah
);

985 
	`udñay
(100);

989 
	`¨9003_mci_check_gpm_off£t
(
ah
);

991 
ªgvÆ
 |
	`SM
(1, 
AR_MCI_COMMAND2_RESET_RX
);

992 
	`REG_WRITE
(
ah
, 
AR_MCI_COMMAND2
, 
ªgvÆ
);

993 
	`udñay
(1);

994 
ªgvÆ
 &~
	`SM
(1, 
AR_MCI_COMMAND2_RESET_RX
);

995 
	`REG_WRITE
(
ah
, 
AR_MCI_COMMAND2
, 
ªgvÆ
);

998 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_INIT_GPM_OFFSET
);

1000 
	`REG_WRITE
(
ah
, 
AR_MCI_MSG_ATTRIBUTES_TABLE
,

1001 (
	`SM
(0xe801, 
AR_MCI_MSG_ATTRIBUTES_TABLE_INVALID_HDR
) |

1002 
	`SM
(0x0000, 
AR_MCI_MSG_ATTRIBUTES_TABLE_CHECKSUM
)));

1004 i‡(
	`MCI_ANT_ARCH_PA_LNA_SHARED
(
mci
))

1005 
	`REG_CLR_BIT
(
ah
, 
AR_MCI_TX_CTRL
,

1006 
AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE
);

1008 
	`REG_SET_BIT
(
ah
, 
AR_MCI_TX_CTRL
,

1009 
AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE
);

1011 
	`¨9003_mci_ob£rv©i⁄_£t_up
(
ah
);

1013 
mci
->
ªady
 = 
åue
;

1014 
	`¨9003_mci_¥ï_öãrÁ˚
(
ah
);

1015 
	`¨9003_mci_°©_£tup
(
ah
);

1017 i‡(
í_öt
)

1018 
	`¨9003_mci_íabÀ_öãºu±
(
ah
);

1020 i‡(
	`©h9k_hw_is_aic_íabÀd
(
ah
))

1021 
	`¨9003_aic_°¨t_n‹mÆ
(
ah
);

1024 
	}
}

1026 
	$¨9003_mci_°›_bt
(
©h_hw
 *
ah
, 
boﬁ
 
ßve_fuŒ¶ìp
)

1028 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

1030 
	`¨9003_mci_dißbÀ_öãºu±
(
ah
);

1032 i‡(
mci_hw
->
ªady
 && !
ßve_fuŒ¶ìp
) {

1033 
	`¨9003_mci_muã_bt
(
ah
);

1034 
	`udñay
(20);

1035 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL
, 0);

1038 
mci_hw
->
bt_°©e
 = 
MCI_BT_SLEEP
;

1039 
mci_hw
->
ªady
 = 
Ál£
;

1040 
	}
}

1042 
	$¨9003_mci_£nd_2g5g_°©us
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

1044 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1045 
u32
 
√w_Êags
, 
to_£t
, 
to_˛ór
;

1047 i‡(!
mci
->
upd©e_2g5g
 || (mci->
bt_°©e
 =
MCI_BT_SLEEP
))

1050 i‡(
mci
->
is_2g
) {

1051 
√w_Êags
 = 
MCI_2G_FLAGS
;

1052 
to_˛ór
 = 
MCI_2G_FLAGS_CLEAR_MASK
;

1053 
to_£t
 = 
MCI_2G_FLAGS_SET_MASK
;

1055 
√w_Êags
 = 
MCI_5G_FLAGS
;

1056 
to_˛ór
 = 
MCI_5G_FLAGS_CLEAR_MASK
;

1057 
to_£t
 = 
MCI_5G_FLAGS_SET_MASK
;

1060 i‡(
to_˛ór
)

1061 
	`¨9003_mci_£nd_c€x_bt_Êags
(
ah
, 
waô_d⁄e
,

1062 
MCI_GPM_COEX_BT_FLAGS_CLEAR
,

1063 
to_˛ór
);

1064 i‡(
to_£t
)

1065 
	`¨9003_mci_£nd_c€x_bt_Êags
(
ah
, 
waô_d⁄e
,

1066 
MCI_GPM_COEX_BT_FLAGS_SET
,

1067 
to_£t
);

1068 
	}
}

1070 
	$¨9003_mci_queue_un£¡_gpm
(
©h_hw
 *
ah
, 
u8
 
hódî
,

1071 
u32
 *
∑ylﬂd
, 
boﬁ
 
queue
)

1073 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1074 
u8
 
ty≥
, 
›code
;

1077 i‡(
hódî
 !
MCI_GPM
)

1080 
ty≥
 = 
	`MCI_GPM_TYPE
(
∑ylﬂd
);

1081 
›code
 = 
	`MCI_GPM_OPCODE
(
∑ylﬂd
);

1083 i‡(
ty≥
 !
MCI_GPM_COEX_AGENT
)

1086 
›code
) {

1087 
MCI_GPM_COEX_BT_UPDATE_FLAGS
:

1088 i‡(*(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_BT_FLAGS_OP
) ==

1089 
MCI_GPM_COEX_BT_FLAGS_READ
)

1092 
mci
->
upd©e_2g5g
 = 
queue
;

1095 
MCI_GPM_COEX_WLAN_CHANNELS
:

1096 
mci
->
wœn_ch™√ls_upd©e
 = 
queue
;

1098 
MCI_GPM_COEX_HALT_BT_GPM
:

1099 i‡(*(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_HALT_STATE
) ==

1100 
MCI_GPM_COEX_BT_GPM_UNHALT
) {

1101 
mci
->
unhÆt_bt_gpm
 = 
queue
;

1103 i‡(!
queue
)

1104 
mci
->
hÆãd_bt_gpm
 = 
Ál£
;

1107 i‡(*(((
u8
 *)
∑ylﬂd
Ë+ 
MCI_GPM_COEX_B_HALT_STATE
) ==

1108 
MCI_GPM_COEX_BT_GPM_HALT
) {

1110 
mci
->
hÆãd_bt_gpm
 = !
queue
;

1117 
	}
}

1119 
	$¨9003_mci_2g5g_swôch
(
©h_hw
 *
ah
, 
boﬁ
 
f‹˚
)

1121 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1123 i‡(!
mci
->
upd©e_2g5g
 && !
f‹˚
)

1126 i‡(
mci
->
is_2g
) {

1127 
	`¨9003_mci_£nd_2g5g_°©us
(
ah
, 
åue
);

1128 
	`¨9003_mci_£nd_ a_å™s„r
(
ah
, 
åue
);

1129 
	`udñay
(5);

1131 
	`REG_CLR_BIT
(
ah
, 
AR_MCI_TX_CTRL
,

1132 
AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE
);

1133 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_GLB_CONTROL
,

1134 
AR_BTCOEX_CTRL_BT_OWN_SPDT_CTRL
);

1136 i‡(!(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_OSLA
))

1137 
	`¨9003_mci_o¶a_£tup
(
ah
, 
åue
);

1139 i‡(
	`AR_SREV_9462
(
ah
))

1140 
	`REG_WRITE
(
ah
, 
AR_SELFGEN_MASK
, 0x02);

1142 
	`¨9003_mci_£nd_ a_èke
(
ah
, 
åue
);

1143 
	`udñay
(5);

1145 
	`REG_SET_BIT
(
ah
, 
AR_MCI_TX_CTRL
,

1146 
AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE
);

1147 
	`REG_SET_BIT
(
ah
, 
AR_PHY_GLB_CONTROL
,

1148 
AR_BTCOEX_CTRL_BT_OWN_SPDT_CTRL
);

1150 
	`¨9003_mci_o¶a_£tup
(
ah
, 
Ál£
);

1151 
	`¨9003_mci_£nd_2g5g_°©us
(
ah
, 
åue
);

1153 
	}
}

1155 
boﬁ
 
	$¨9003_mci_£nd_mesßge
(
©h_hw
 *
ah
, 
u8
 
hódî
, 
u32
 
Êag
,

1156 
u32
 *
∑ylﬂd
, 
u8
 
Àn
, 
boﬁ
 
waô_d⁄e
,

1157 
boﬁ
 
check_bt
)

1159 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1160 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1161 
boﬁ
 
msg_£¡
 = 
Ál£
;

1162 
u32
 
ªgvÆ
;

1163 
u32
 
ßved_mci_öt_í
;

1164 
i
;

1166 
ßved_mci_öt_í
 = 
	`REG_READ
(
ah
, 
AR_MCI_INTERRUPT_EN
);

1167 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_BTCOEX_CTRL
);

1169 i‡((
ªgvÆ
 =0xdódbìfË|| !‘egvÆ & 
AR_BTCOEX_CTRL_MCI_MODE_EN
)) {

1170 
	`©h_dbg
(
comm⁄
, 
MCI
,

1172 
hódî
, (
ah
->
powî_mode
 =
ATH9K_PM_FULL_SLEEP
) ? 1 : 0);

1173 
	`¨9003_mci_queue_un£¡_gpm
(
ah
, 
hódî
, 
∑ylﬂd
, 
åue
);

1174  
Ál£
;

1175 } i‡(
check_bt
 && (
mci
->
bt_°©e
 =
MCI_BT_SLEEP
)) {

1176 
	`©h_dbg
(
comm⁄
, 
MCI
,

1178 
hódî
);

1179 
	`¨9003_mci_queue_un£¡_gpm
(
ah
, 
hódî
, 
∑ylﬂd
, 
åue
);

1180  
Ál£
;

1183 i‡(
waô_d⁄e
)

1184 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_EN
, 0);

1188 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RAW
,

1189 (
AR_MCI_INTERRUPT_SW_MSG_DONE
 |

1190 
AR_MCI_INTERRUPT_MSG_FAIL_MASK
));

1192 i‡(
∑ylﬂd
) {

1193 
i
 = 0; (ò* 4Ë< 
Àn
; i++)

1194 
	`REG_WRITE
(
ah
, (
AR_MCI_TX_PAYLOAD0
 + 
i
 * 4),

1195 *(
∑ylﬂd
 + 
i
));

1198 
	`REG_WRITE
(
ah
, 
AR_MCI_COMMAND0
,

1199 (
	`SM
((
Êag
 & 
MCI_FLAG_DISABLE_TIMESTAMP
),

1200 
AR_MCI_COMMAND0_DISABLE_TIMESTAMP
) |

1201 
	`SM
(
Àn
, 
AR_MCI_COMMAND0_LEN
) |

1202 
	`SM
(
hódî
, 
AR_MCI_COMMAND0_HEADER
)));

1204 i‡(
waô_d⁄e
 &&

1205 !(
	`¨9003_mci_waô_f‹_öãºu±
(
ah
, 
AR_MCI_INTERRUPT_RAW
,

1206 
AR_MCI_INTERRUPT_SW_MSG_DONE
, 500)))

1207 
	`¨9003_mci_queue_un£¡_gpm
(
ah
, 
hódî
, 
∑ylﬂd
, 
åue
);

1209 
	`¨9003_mci_queue_un£¡_gpm
(
ah
, 
hódî
, 
∑ylﬂd
, 
Ál£
);

1210 
msg_£¡
 = 
åue
;

1213 i‡(
waô_d⁄e
)

1214 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_EN
, 
ßved_mci_öt_í
);

1216  
msg_£¡
;

1217 
	}
}

1218 
EXPORT_SYMBOL
(
¨9003_mci_£nd_mesßge
);

1220 
	$¨9003_mci_öô_ˇl_ªq
(
©h_hw
 *
ah
, 
boﬁ
 *
is_ªußbÀ
)

1222 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1223 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

1224 
u32
 
∂d
[4] = {0, 0, 0, 0};

1226 i‡((
mci_hw
->
bt_°©e
 !
MCI_BT_AWAKE
) ||

1227 (
mci_hw
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_MCI_CAL
))

1230 
	`MCI_GPM_SET_CAL_TYPE
(
∂d
, 
MCI_GPM_WLAN_CAL_REQ
);

1231 
∂d
[
MCI_GPM_WLAN_CAL_W_SEQUENCE
] = 
mci_hw
->
wœn_ˇl_£q
++;

1233 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∂d
, 16, 
åue
, 
Ál£
);

1235 i‡(
	`¨9003_mci_waô_f‹_gpm
(
ah
, 
MCI_GPM_BT_CAL_GRANT
, 0, 50000)) {

1236 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI BT_CAL_GRANTÑeceived\n");

1238 *
is_ªußbÀ
 = 
Ál£
;

1239 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI BT_CAL_GRANTÇotÑeceived\n");

1241 
	}
}

1243 
	$¨9003_mci_öô_ˇl_d⁄e
(
©h_hw
 *
ah
)

1245 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

1246 
u32
 
∂d
[4] = {0, 0, 0, 0};

1248 i‡((
mci_hw
->
bt_°©e
 !
MCI_BT_AWAKE
) ||

1249 (
mci_hw
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_MCI_CAL
))

1252 
	`MCI_GPM_SET_CAL_TYPE
(
∂d
, 
MCI_GPM_WLAN_CAL_DONE
);

1253 
∂d
[
MCI_GPM_WLAN_CAL_W_SEQUENCE
] = 
mci_hw
->
wœn_ˇl_d⁄e
++;

1254 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_GPM
, 0, 
∂d
, 16, 
åue
, 
Ál£
);

1255 
	}
}

1257 
	$¨9003_mci_£tup
(
©h_hw
 *
ah
, 
u32
 
gpm_addr
, *
gpm_buf
,

1258 
u16
 
Àn
, 
u32
 
sched_addr
)

1260 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1262 
mci
->
gpm_addr
 = gpm_addr;

1263 
mci
->
gpm_buf
 = gpm_buf;

1264 
mci
->
gpm_Àn
 = 
Àn
;

1265 
mci
->
sched_addr
 = sched_addr;

1267  
	`¨9003_mci_ª£t
(
ah
, 
åue
,Årue,Årue);

1268 
	}
}

1269 
EXPORT_SYMBOL
(
¨9003_mci_£tup
);

1271 
	$¨9003_mci_˛ónup
(
©h_hw
 *
ah
)

1274 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL
, 0x00);

1275 
	`¨9003_mci_dißbÀ_öãºu±
(
ah
);

1276 
	}
}

1277 
EXPORT_SYMBOL
(
¨9003_mci_˛ónup
);

1279 
u32
 
	$¨9003_mci_°©e
(
©h_hw
 *
ah
, 
u32
 
°©e_ty≥
)

1281 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1282 
u32
 
vÆue
 = 0, 
tsf
;

1283 
u8
 
quîy_ty≥
;

1285 
°©e_ty≥
) {

1286 
MCI_STATE_ENABLE
:

1287 i‡(
mci
->
ªady
) {

1288 
vÆue
 = 
	`REG_READ
(
ah
, 
AR_BTCOEX_CTRL
);

1290 i‡((
vÆue
 == 0xdeadbeef) || (value == 0xffffffff))

1291 
vÆue
 = 0;

1293 
vÆue
 &
AR_BTCOEX_CTRL_MCI_MODE_EN
;

1295 
MCI_STATE_INIT_GPM_OFFSET
:

1296 
vÆue
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_MCI_GPM_1
), 
AR_MCI_GPM_WRITE_PTR
);

1298 i‡(
vÆue
 < 
mci
->
gpm_Àn
)

1299 
mci
->
gpm_idx
 = 
vÆue
;

1301 
mci
->
gpm_idx
 = 0;

1303 
MCI_STATE_LAST_SCHD_MSG_OFFSET
:

1304 
vÆue
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_MCI_RX_STATUS
),

1305 
AR_MCI_RX_LAST_SCHD_MSG_INDEX
);

1307 
vÆue
 <<= 4;

1309 
MCI_STATE_REMOTE_SLEEP
:

1310 
vÆue
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_MCI_RX_STATUS
),

1311 
AR_MCI_RX_REMOTE_SLEEP
) ?

1312 
MCI_BT_SLEEP
 : 
MCI_BT_AWAKE
;

1314 
MCI_STATE_SET_BT_AWAKE
:

1315 
mci
->
bt_°©e
 = 
MCI_BT_AWAKE
;

1316 
	`¨9003_mci_£nd_c€x_vîsi⁄_quîy
(
ah
, 
åue
);

1317 
	`¨9003_mci_£nd_c€x_wœn_ch™√ls
(
ah
, 
åue
);

1319 i‡(
mci
->
unhÆt_bt_gpm
)

1320 
	`¨9003_mci_£nd_c€x_hÆt_bt_gpm
(
ah
, 
Ál£
, 
åue
);

1322 
	`¨9003_mci_2g5g_swôch
(
ah
, 
Ál£
);

1324 
MCI_STATE_RESET_REQ_WAKE
:

1325 
	`¨9003_mci_ª£t_ªq_wakeup
(
ah
);

1326 
mci
->
upd©e_2g5g
 = 
åue
;

1328 i‡(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_MCI_OBS_MASK
) {

1330 i‡((
	`REG_READ
(
ah
, 
AR_GLB_GPIO_CONTROL
) &

1331 
ATH_MCI_CONFIG_MCI_OBS_GPIO
) !=

1332 
ATH_MCI_CONFIG_MCI_OBS_GPIO
) {

1333 
	`¨9003_mci_ob£rv©i⁄_£t_up
(
ah
);

1337 
MCI_STATE_SEND_WLAN_COEX_VERSION
:

1338 
	`¨9003_mci_£nd_c€x_vîsi⁄_ª•⁄£
(
ah
, 
åue
);

1340 
MCI_STATE_SEND_VERSION_QUERY
:

1341 
	`¨9003_mci_£nd_c€x_vîsi⁄_quîy
(
ah
, 
åue
);

1343 
MCI_STATE_SEND_STATUS_QUERY
:

1344 
quîy_ty≥
 = 
MCI_GPM_COEX_QUERY_BT_TOPOLOGY
;

1345 
	`¨9003_mci_£nd_c€x_bt_°©us_quîy
(
ah
, 
åue
, 
quîy_ty≥
);

1347 
MCI_STATE_RECOVER_RX
:

1348 
tsf
 = 
	`©h9k_hw_gëtsf32
(
ah
);

1349 i‡((
tsf
 - 
mci
->
œ°_ªcovîy
Ë<
MCI_RECOVERY_DUR_TSF
) {

1350 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
MCI
,

1354 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
MCI
, "(MCI) RECOVER RX\n");

1355 
mci
->
œ°_ªcovîy
 = 
tsf
;

1356 
	`¨9003_mci_¥ï_öãrÁ˚
(
ah
);

1357 
mci
->
quîy_bt
 = 
åue
;

1358 
mci
->
√ed_Êush_btöfo
 = 
åue
;

1359 
	`¨9003_mci_£nd_c€x_wœn_ch™√ls
(
ah
, 
åue
);

1360 
	`¨9003_mci_2g5g_swôch
(
ah
, 
Ál£
);

1362 
MCI_STATE_NEED_FTP_STOMP
:

1363 
vÆue
 = !(
mci
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_FTP_STOMP
);

1365 
MCI_STATE_NEED_FLUSH_BT_INFO
:

1366 
vÆue
 = (!
mci
->
unhÆt_bt_gpm
 && mci->
√ed_Êush_btöfo
) ? 1 : 0;

1367 
mci
->
√ed_Êush_btöfo
 = 
Ál£
;

1369 
MCI_STATE_AIC_CAL
:

1370 i‡(
	`©h9k_hw_is_aic_íabÀd
(
ah
))

1371 
vÆue
 = 
	`¨9003_aic_ˇlibøti⁄
(
ah
);

1373 
MCI_STATE_AIC_START
:

1374 i‡(
	`©h9k_hw_is_aic_íabÀd
(
ah
))

1375 
	`¨9003_aic_°¨t_n‹mÆ
(
ah
);

1377 
MCI_STATE_AIC_CAL_RESET
:

1378 i‡(
	`©h9k_hw_is_aic_íabÀd
(
ah
))

1379 
vÆue
 = 
	`¨9003_aic_ˇl_ª£t
(
ah
);

1381 
MCI_STATE_AIC_CAL_SINGLE
:

1382 i‡(
	`©h9k_hw_is_aic_íabÀd
(
ah
))

1383 
vÆue
 = 
	`¨9003_aic_ˇlibøti⁄_sögÀ
(
ah
);

1389  
vÆue
;

1390 
	}
}

1391 
EXPORT_SYMBOL
(
¨9003_mci_°©e
);

1393 
	$¨9003_mci_bt_gaö_˘æ
(
©h_hw
 *
ah
)

1395 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1396 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1398 
	`©h_dbg
(
comm⁄
, 
MCI
, "Give LNAánd SPDT controlÅo BT\n");

1400 
	`¨9003_mci_£nd_ a_èke
(
ah
, 
åue
);

1401 
	`udñay
(50);

1403 
	`REG_SET_BIT
(
ah
, 
AR_PHY_GLB_CONTROL
, 
AR_BTCOEX_CTRL_BT_OWN_SPDT_CTRL
);

1404 
mci
->
is_2g
 = 
Ál£
;

1405 
mci
->
upd©e_2g5g
 = 
åue
;

1406 
	`¨9003_mci_£nd_2g5g_°©us
(
ah
, 
åue
);

1409 
mci
->
upd©e_2g5g
 = 
åue
;

1410 
	}
}

1412 
	$¨9003_mci_£t_powî_awake
(
©h_hw
 *
ah
)

1414 
u32
 
btc€x_˘æ2
, 
düg_sw
;

1415 
i
;

1416 
u8
 
 a_˘æ
, 
bt_¶ìp
;

1418 
i
 = 0; i < 
AH_WAIT_TIMEOUT
; i++) {

1419 
btc€x_˘æ2
 = 
	`REG_READ
(
ah
, 
AR_BTCOEX_CTRL2
);

1420 i‡(
btc€x_˘æ2
 != 0xdeadbeef)

1422 
	`udñay
(
AH_TIME_QUANTUM
);

1424 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL2
, (
btc€x_˘æ2
 | 
	`BIT
(23)));

1426 
i
 = 0; i < 
AH_WAIT_TIMEOUT
; i++) {

1427 
düg_sw
 = 
	`REG_READ
(
ah
, 
AR_DIAG_SW
);

1428 i‡(
düg_sw
 != 0xdeadbeef)

1430 
	`udñay
(
AH_TIME_QUANTUM
);

1432 
	`REG_WRITE
(
ah
, 
AR_DIAG_SW
, (
düg_sw
 | 
	`BIT
(27) | BIT(19) | BIT(18)));

1433 
 a_˘æ
 = 
	`REG_READ
(
ah
, 
AR_OBS_BUS_CTRL
) & 0x3;

1434 
bt_¶ìp
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_MCI_RX_STATUS
), 
AR_MCI_RX_REMOTE_SLEEP
);

1436 
	`REG_WRITE
(
ah
, 
AR_BTCOEX_CTRL2
, 
btc€x_˘æ2
);

1437 
	`REG_WRITE
(
ah
, 
AR_DIAG_SW
, 
düg_sw
);

1439 i‡(
bt_¶ìp
 && (
 a_˘æ
 == 2)) {

1440 
	`REG_SET_BIT
(
ah
, 
AR_BTCOEX_RC
, 0x1);

1441 
	`REG_CLR_BIT
(
ah
, 
AR_BTCOEX_RC
, 0x1);

1442 
	`udñay
(50);

1444 
	}
}

1446 
	$¨9003_mci_check_gpm_off£t
(
©h_hw
 *
ah
)

1448 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1449 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1450 
u32
 
off£t
;

1455 
off£t
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_MCI_GPM_1
), 
AR_MCI_GPM_WRITE_PTR
);

1456 i‡(
mci
->
gpm_idx
 =
off£t
)

1458 
	`©h_dbg
(
comm⁄
, 
MCI
, "GPM cached writeÖointer mismatch %d %d\n",

1459 
mci
->
gpm_idx
, 
off£t
);

1460 
mci
->
quîy_bt
 = 
åue
;

1461 
mci
->
√ed_Êush_btöfo
 = 
åue
;

1462 
mci
->
gpm_idx
 = 0;

1463 
	}
}

1465 
u32
 
	$¨9003_mci_gë_√xt_gpm_off£t
(
©h_hw
 *
ah
, 
u32
 *
m‹e
)

1467 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1468 
u32
 
off£t
, 
m‹e_gpm
 = 0, 
gpm_±r
;

1479 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_RAW
,

1480 
AR_MCI_INTERRUPT_RX_MSG_GPM
);

1482 
gpm_±r
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_MCI_GPM_1
), 
AR_MCI_GPM_WRITE_PTR
);

1483 
off£t
 = 
gpm_±r
;

1485 i‡(!
off£t
)

1486 
off£t
 = 
mci
->
gpm_Àn
 - 1;

1487 i‡(
off£t
 >
mci
->
gpm_Àn
) {

1488 i‡(
off£t
 != 0xFFFF)

1489 
off£t
 = 0;

1491 
off£t
--;

1494 i‡((
off£t
 =0xFFFFË|| (
gpm_±r
 =
mci
->
gpm_idx
)) {

1495 
off£t
 = 
MCI_GPM_INVALID
;

1496 
m‹e_gpm
 = 
MCI_GPM_NOMORE
;

1497 
out
;

1500 
u32
 
ãmp_ödex
;

1504 i‡(
off£t
 !
mci
->
gpm_idx
)

1505 
m‹e_gpm
 = 
MCI_GPM_MORE
;

1507 
m‹e_gpm
 = 
MCI_GPM_NOMORE
;

1509 
ãmp_ödex
 = 
mci
->
gpm_idx
;

1511 i‡(
ãmp_ödex
 >
mci
->
gpm_Àn
)

1512 
ãmp_ödex
 = 0;

1514 
mci
->
gpm_idx
++;

1516 i‡(
mci
->
gpm_idx
 >mci->
gpm_Àn
)

1517 
mci
->
gpm_idx
 = 0;

1519 i‡(
	`¨9003_mci_is_gpm_vÆid
(
ah
, 
ãmp_ödex
)) {

1520 
off£t
 = 
ãmp_ödex
;

1524 i‡(
m‹e_gpm
 =
MCI_GPM_NOMORE
) {

1525 
off£t
 = 
MCI_GPM_INVALID
;

1530 i‡(
off£t
 !
MCI_GPM_INVALID
)

1531 
off£t
 <<= 4;

1532 
out
:

1533 i‡(
m‹e
)

1534 *
m‹e
 = 
m‹e_gpm
;

1536  
off£t
;

1537 
	}
}

1538 
EXPORT_SYMBOL
(
¨9003_mci_gë_√xt_gpm_off£t
);

1540 
	$¨9003_mci_£t_bt_vîsi⁄
(
©h_hw
 *
ah
, 
u8
 
maj‹
, u8 
mö‹
)

1542 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1544 
mci
->
bt_vî_maj‹
 = 
maj‹
;

1545 
mci
->
bt_vî_mö‹
 = 
mö‹
;

1546 
mci
->
bt_vîsi⁄_known
 = 
åue
;

1547 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
MCI
, "MCI BT version set: %d.%d\n",

1548 
mci
->
bt_vî_maj‹
, mci->
bt_vî_mö‹
);

1549 
	}
}

1550 
EXPORT_SYMBOL
(
¨9003_mci_£t_bt_vîsi⁄
);

1552 
	$¨9003_mci_£nd_wœn_ch™√ls
(
©h_hw
 *
ah
)

1554 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

1556 
mci
->
wœn_ch™√ls_upd©e
 = 
åue
;

1557 
	`¨9003_mci_£nd_c€x_wœn_ch™√ls
(
ah
, 
åue
);

1558 
	}
}

1559 
EXPORT_SYMBOL
(
¨9003_mci_£nd_wœn_ch™√ls
);

1561 
u16
 
	$¨9003_mci_gë_max_txpowî
(
©h_hw
 *
ah
, 
u8
 
˘lmode
)

1563 i‡(!
ah
->
btc€x_hw
.
mci
.
c⁄cur_tx
)

1564 
out
;

1566 i‡(
˘lmode
 =
CTL_2GHT20
)

1567  
ATH_BTCOEX_HT20_MAX_TXPOWER
;

1568 i‡(
˘lmode
 =
CTL_2GHT40
)

1569  
ATH_BTCOEX_HT40_MAX_TXPOWER
;

1571 
out
:

1573 
	}
}

	@ar9003_mci.h

17 #i‚de‡
AR9003_MCI_H


18 
	#AR9003_MCI_H


	)

20 
	#MCI_FLAG_DISABLE_TIMESTAMP
 0x00000001

	)

21 
	#MCI_RECOVERY_DUR_TSF
 (100 * 1000Ë

	)

24 
	#MCI_GPM_COEX_MAJOR_VERSION_DEFAULT
 3

	)

25 
	#MCI_GPM_COEX_MINOR_VERSION_DEFAULT
 0

	)

28 
	#MCI_GPM_COEX_MAJOR_VERSION_WLAN
 3

	)

29 
	#MCI_GPM_COEX_MINOR_VERSION_WLAN
 0

	)

31 
	emci_gpm_c€x_quîy_ty≥
 {

32 
	mMCI_GPM_COEX_QUERY_BT_ALL_INFO
 = 
BIT
(0),

33 
	mMCI_GPM_COEX_QUERY_BT_TOPOLOGY
 = 
BIT
(1),

34 
	mMCI_GPM_COEX_QUERY_BT_DEBUG
 = 
BIT
(2),

37 
	emci_gpm_c€x_hÆt_bt_gpm
 {

38 
	mMCI_GPM_COEX_BT_GPM_UNHALT
,

39 
	mMCI_GPM_COEX_BT_GPM_HALT


42 
	emci_gpm_c€x_bt_upd©e_Êags_›
 {

43 
	mMCI_GPM_COEX_BT_FLAGS_READ
,

44 
	mMCI_GPM_COEX_BT_FLAGS_SET
,

45 
	mMCI_GPM_COEX_BT_FLAGS_CLEAR


48 
	#MCI_NUM_BT_CHANNELS
 79

	)

50 
	#MCI_BT_MCI_FLAGS_UPDATE_CORR
 0x00000002

	)

51 
	#MCI_BT_MCI_FLAGS_UPDATE_HDR
 0x00000004

	)

52 
	#MCI_BT_MCI_FLAGS_UPDATE_PLD
 0x00000008

	)

53 
	#MCI_BT_MCI_FLAGS_LNA_CTRL
 0x00000010

	)

54 
	#MCI_BT_MCI_FLAGS_DEBUG
 0x00000020

	)

55 
	#MCI_BT_MCI_FLAGS_SCHED_MSG
 0x00000040

	)

56 
	#MCI_BT_MCI_FLAGS_CONT_MSG
 0x00000080

	)

57 
	#MCI_BT_MCI_FLAGS_COEX_GPM
 0x00000100

	)

58 
	#MCI_BT_MCI_FLAGS_CPU_INT_MSG
 0x00000200

	)

59 
	#MCI_BT_MCI_FLAGS_MCI_MODE
 0x00000400

	)

60 
	#MCI_BT_MCI_FLAGS_AR9462_MODE
 0x00001000

	)

61 
	#MCI_BT_MCI_FLAGS_OTHER
 0x00010000

	)

63 
	#MCI_DEFAULT_BT_MCI_FLAGS
 0x00011dde

	)

65 
	#MCI_TOGGLE_BT_MCI_FLAGS
 (
MCI_BT_MCI_FLAGS_UPDATE_CORR
 | \

66 
MCI_BT_MCI_FLAGS_UPDATE_HDR
 | \

67 
MCI_BT_MCI_FLAGS_UPDATE_PLD
 | \

68 
MCI_BT_MCI_FLAGS_MCI_MODE
)

	)

70 
	#MCI_2G_FLAGS_CLEAR_MASK
 0x00000000

	)

71 
	#MCI_2G_FLAGS_SET_MASK
 
MCI_TOGGLE_BT_MCI_FLAGS


	)

72 
	#MCI_2G_FLAGS
 
MCI_DEFAULT_BT_MCI_FLAGS


	)

74 
	#MCI_5G_FLAGS_CLEAR_MASK
 
MCI_TOGGLE_BT_MCI_FLAGS


	)

75 
	#MCI_5G_FLAGS_SET_MASK
 0x00000000

	)

76 
	#MCI_5G_FLAGS
 (
MCI_DEFAULT_BT_MCI_FLAGS
 & \

77 ~
MCI_TOGGLE_BT_MCI_FLAGS
)

	)

82 
	#ATH_MCI_CONFIG_CONCUR_TX
 0x00000003

	)

83 
	#ATH_MCI_CONFIG_MCI_OBS_MCI
 0x00000004

	)

84 
	#ATH_MCI_CONFIG_MCI_OBS_TXRX
 0x00000008

	)

85 
	#ATH_MCI_CONFIG_MCI_OBS_BT
 0x00000010

	)

86 
	#ATH_MCI_CONFIG_DISABLE_MCI_CAL
 0x00000020

	)

87 
	#ATH_MCI_CONFIG_DISABLE_OSLA
 0x00000040

	)

88 
	#ATH_MCI_CONFIG_DISABLE_FTP_STOMP
 0x00000080

	)

89 
	#ATH_MCI_CONFIG_AGGR_THRESH
 0x00000700

	)

90 
	#ATH_MCI_CONFIG_AGGR_THRESH_S
 8

	)

91 
	#ATH_MCI_CONFIG_DISABLE_AGGR_THRESH
 0x00000800

	)

92 
	#ATH_MCI_CONFIG_CLK_DIV
 0x00003000

	)

93 
	#ATH_MCI_CONFIG_CLK_DIV_S
 12

	)

94 
	#ATH_MCI_CONFIG_DISABLE_TUNING
 0x00004000

	)

95 
	#ATH_MCI_CONFIG_DISABLE_AIC
 0x00008000

	)

96 
	#ATH_MCI_CONFIG_AIC_CAL_NUM_CHAN
 0x007f0000

	)

97 
	#ATH_MCI_CONFIG_AIC_CAL_NUM_CHAN_S
 16

	)

98 
	#ATH_MCI_CONFIG_NO_QUIET_ACK
 0x00800000

	)

99 
	#ATH_MCI_CONFIG_NO_QUIET_ACK_S
 23

	)

100 
	#ATH_MCI_CONFIG_ANT_ARCH
 0x07000000

	)

101 
	#ATH_MCI_CONFIG_ANT_ARCH_S
 24

	)

102 
	#ATH_MCI_CONFIG_FORCE_QUIET_ACK
 0x08000000

	)

103 
	#ATH_MCI_CONFIG_FORCE_QUIET_ACK_S
 27

	)

104 
	#ATH_MCI_CONFIG_FORCE_2CHAIN_ACK
 0x10000000

	)

105 
	#ATH_MCI_CONFIG_MCI_STAT_DBG
 0x20000000

	)

106 
	#ATH_MCI_CONFIG_MCI_WEIGHT_DBG
 0x40000000

	)

107 
	#ATH_MCI_CONFIG_DISABLE_MCI
 0x80000000

	)

109 
	#ATH_MCI_CONFIG_MCI_OBS_MASK
 (
ATH_MCI_CONFIG_MCI_OBS_MCI
 | \

110 
ATH_MCI_CONFIG_MCI_OBS_TXRX
 | \

111 
ATH_MCI_CONFIG_MCI_OBS_BT
)

	)

113 
	#ATH_MCI_CONFIG_MCI_OBS_GPIO
 0x0000002F

	)

115 
	#ATH_MCI_ANT_ARCH_1_ANT_PA_LNA_NON_SHARED
 0x00

	)

116 
	#ATH_MCI_ANT_ARCH_1_ANT_PA_LNA_SHARED
 0x01

	)

117 
	#ATH_MCI_ANT_ARCH_2_ANT_PA_LNA_NON_SHARED
 0x02

	)

118 
	#ATH_MCI_ANT_ARCH_2_ANT_PA_LNA_SHARED
 0x03

	)

119 
	#ATH_MCI_ANT_ARCH_3_ANT
 0x04

	)

121 
	#MCI_ANT_ARCH_PA_LNA_SHARED
(
mci
) \

122 ((
	`MS
(
mci
->
c⁄fig
, 
ATH_MCI_CONFIG_ANT_ARCH
Ë=
ATH_MCI_ANT_ARCH_1_ANT_PA_LNA_SHARED
) || \

123 (
	`MS
(
mci
->
c⁄fig
, 
ATH_MCI_CONFIG_ANT_ARCH
Ë=
ATH_MCI_ANT_ARCH_2_ANT_PA_LNA_SHARED
))

	)

125 
	emci_mesßge_hódî
 {

126 
	mMCI_LNA_CTRL
 = 0x10,

127 
	mMCI_CONT_NACK
 = 0x20,

128 
	mMCI_CONT_INFO
 = 0x30,

129 
	mMCI_CONT_RST
 = 0x40,

130 
	mMCI_SCHD_INFO
 = 0x50,

131 
	mMCI_CPU_INT
 = 0x60,

132 
	mMCI_SYS_WAKING
 = 0x70,

133 
	mMCI_GPM
 = 0x80,

134 
	mMCI_LNA_INFO
 = 0x90,

135 
	mMCI_LNA_STATE
 = 0x94,

136 
	mMCI_LNA_TAKE
 = 0x98,

137 
	mMCI_LNA_TRANS
 = 0x9c,

138 
	mMCI_SYS_SLEEPING
 = 0xa0,

139 
	mMCI_REQ_WAKE
 = 0xc0,

140 
	mMCI_DEBUG_16
 = 0xfe,

141 
	mMCI_REMOTE_RESET
 = 0xff

144 
	e©h_mci_gpm_c€x_¥ofûe_ty≥
 {

145 
	mMCI_GPM_COEX_PROFILE_UNKNOWN
,

146 
	mMCI_GPM_COEX_PROFILE_RFCOMM
,

147 
	mMCI_GPM_COEX_PROFILE_A2DP
,

148 
	mMCI_GPM_COEX_PROFILE_HID
,

149 
	mMCI_GPM_COEX_PROFILE_BNEP
,

150 
	mMCI_GPM_COEX_PROFILE_VOICE
,

151 
	mMCI_GPM_COEX_PROFILE_A2DPVO
,

152 
	mMCI_GPM_COEX_PROFILE_MAX


157 
	mMCI_GPM_COEX_W_GPM_PAYLOAD
 = 1,

158 
	mMCI_GPM_COEX_B_GPM_TYPE
 = 4,

159 
	mMCI_GPM_COEX_B_GPM_OPCODE
 = 5,

161 
	mMCI_GPM_WLAN_CAL_W_SEQUENCE
 = 2,

165 
	mMCI_GPM_COEX_B_MAJOR_VERSION
 = 6,

166 
	mMCI_GPM_COEX_B_MINOR_VERSION
 = 7,

168 
	mMCI_GPM_COEX_B_BT_BITMAP
 = 6,

169 
	mMCI_GPM_COEX_B_WLAN_BITMAP
 = 7,

171 
	mMCI_GPM_COEX_B_HALT_STATE
 = 6,

173 
	mMCI_GPM_COEX_B_CHANNEL_MAP
 = 6,

175 
	mMCI_GPM_COEX_B_PROFILE_TYPE
 = 6,

176 
	mMCI_GPM_COEX_B_PROFILE_LINKID
 = 7,

177 
	mMCI_GPM_COEX_B_PROFILE_STATE
 = 8,

178 
	mMCI_GPM_COEX_B_PROFILE_ROLE
 = 9,

179 
	mMCI_GPM_COEX_B_PROFILE_RATE
 = 10,

180 
	mMCI_GPM_COEX_B_PROFILE_VOTYPE
 = 11,

181 
	mMCI_GPM_COEX_H_PROFILE_T
 = 12,

182 
	mMCI_GPM_COEX_B_PROFILE_W
 = 14,

183 
	mMCI_GPM_COEX_B_PROFILE_A
 = 15,

185 
	mMCI_GPM_COEX_B_STATUS_TYPE
 = 6,

186 
	mMCI_GPM_COEX_B_STATUS_LINKID
 = 7,

187 
	mMCI_GPM_COEX_B_STATUS_STATE
 = 8,

189 
	mMCI_GPM_COEX_W_BT_FLAGS
 = 6,

190 
	mMCI_GPM_COEX_B_BT_FLAGS_OP
 = 10

193 
	emci_gpm_subty≥
 {

194 
	mMCI_GPM_BT_CAL_REQ
 = 0,

195 
	mMCI_GPM_BT_CAL_GRANT
 = 1,

196 
	mMCI_GPM_BT_CAL_DONE
 = 2,

197 
	mMCI_GPM_WLAN_CAL_REQ
 = 3,

198 
	mMCI_GPM_WLAN_CAL_GRANT
 = 4,

199 
	mMCI_GPM_WLAN_CAL_DONE
 = 5,

200 
	mMCI_GPM_COEX_AGENT
 = 0x0c,

201 
	mMCI_GPM_RSVD_PATTERN
 = 0xfe,

202 
	mMCI_GPM_RSVD_PATTERN32
 = 0xfefefefe,

203 
	mMCI_GPM_BT_DEBUG
 = 0xff

206 
	emci_bt_°©e
 {

207 
	mMCI_BT_SLEEP
,

208 
	mMCI_BT_AWAKE
,

209 
	mMCI_BT_CAL_START
,

210 
	mMCI_BT_CAL


213 
	emci_ps_°©e
 {

214 
	mMCI_PS_DISABLE
,

215 
	mMCI_PS_ENABLE
,

216 
	mMCI_PS_ENABLE_OFF
,

217 
	mMCI_PS_ENABLE_ON


221 
	emci_°©e_ty≥
 {

222 
	mMCI_STATE_ENABLE
,

223 
	mMCI_STATE_INIT_GPM_OFFSET
,

224 
	mMCI_STATE_CHECK_GPM_OFFSET
,

225 
	mMCI_STATE_NEXT_GPM_OFFSET
,

226 
	mMCI_STATE_LAST_GPM_OFFSET
,

227 
	mMCI_STATE_BT
,

228 
	mMCI_STATE_SET_BT_SLEEP
,

229 
	mMCI_STATE_SET_BT_AWAKE
,

230 
	mMCI_STATE_SET_BT_CAL_START
,

231 
	mMCI_STATE_SET_BT_CAL
,

232 
	mMCI_STATE_LAST_SCHD_MSG_OFFSET
,

233 
	mMCI_STATE_REMOTE_SLEEP
,

234 
	mMCI_STATE_CONT_STATUS
,

235 
	mMCI_STATE_RESET_REQ_WAKE
,

236 
	mMCI_STATE_SEND_WLAN_COEX_VERSION
,

237 
	mMCI_STATE_SET_BT_COEX_VERSION
,

238 
	mMCI_STATE_SEND_WLAN_CHANNELS
,

239 
	mMCI_STATE_SEND_VERSION_QUERY
,

240 
	mMCI_STATE_SEND_STATUS_QUERY
,

241 
	mMCI_STATE_NEED_FLUSH_BT_INFO
,

242 
	mMCI_STATE_SET_CONCUR_TX_PRI
,

243 
	mMCI_STATE_RECOVER_RX
,

244 
	mMCI_STATE_NEED_FTP_STOMP
,

245 
	mMCI_STATE_NEED_TUNING
,

246 
	mMCI_STATE_NEED_STAT_DEBUG
,

247 
	mMCI_STATE_SHARED_CHAIN_CONCUR_TX
,

248 
	mMCI_STATE_AIC_CAL
,

249 
	mMCI_STATE_AIC_START
,

250 
	mMCI_STATE_AIC_CAL_RESET
,

251 
	mMCI_STATE_AIC_CAL_SINGLE
,

252 
	mMCI_STATE_IS_AR9462
,

253 
	mMCI_STATE_IS_AR9565_1ANT
,

254 
	mMCI_STATE_IS_AR9565_2ANT
,

255 
	mMCI_STATE_WLAN_WEAK_SIGNAL
,

256 
	mMCI_STATE_SET_WLAN_PS_STATE
,

257 
	mMCI_STATE_GET_WLAN_PS_STATE
,

258 
	mMCI_STATE_DEBUG
,

259 
	mMCI_STATE_STAT_DEBUG
,

260 
	mMCI_STATE_ALLOW_FCS
,

261 
	mMCI_STATE_SET_2G_CONTENTION
,

262 
	mMCI_STATE_MAX


265 
	emci_gpm_c€x_›code
 {

266 
	mMCI_GPM_COEX_VERSION_QUERY
,

267 
	mMCI_GPM_COEX_VERSION_RESPONSE
,

268 
	mMCI_GPM_COEX_STATUS_QUERY
,

269 
	mMCI_GPM_COEX_HALT_BT_GPM
,

270 
	mMCI_GPM_COEX_WLAN_CHANNELS
,

271 
	mMCI_GPM_COEX_BT_PROFILE_INFO
,

272 
	mMCI_GPM_COEX_BT_STATUS_UPDATE
,

273 
	mMCI_GPM_COEX_BT_UPDATE_FLAGS
,

274 
	mMCI_GPM_COEX_NOOP
,

277 
	#MCI_GPM_NOMORE
 0

	)

278 
	#MCI_GPM_MORE
 1

	)

279 
	#MCI_GPM_INVALID
 0xffffffff

	)

281 
	#MCI_GPM_RECYCLE
(
_p_gpm
) do { \

282 *(((
u32
 *)
_p_gpm
Ë+ 
MCI_GPM_COEX_W_GPM_PAYLOAD
) = \

283 
MCI_GPM_RSVD_PATTERN32
; \

284 } 0)

	)

286 
	#MCI_GPM_TYPE
(
_p_gpm
) \

287 (*(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_GPM_TYPE
Ë& 0xff)

	)

289 
	#MCI_GPM_OPCODE
(
_p_gpm
) \

290 (*(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_GPM_OPCODE
Ë& 0xff)

	)

292 
	#MCI_GPM_SET_CAL_TYPE
(
_p_gpm
, 
_ˇl_ty≥
) do { \

293 *(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_GPM_TYPE
Ë(
_ˇl_ty≥
) & 0xff;\

294 } 0)

	)

296 
	#MCI_GPM_SET_TYPE_OPCODE
(
_p_gpm
, 
_ty≥
, 
_›code
) do { \

297 *(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_GPM_TYPE
Ë(
_ty≥
) & 0xff; \

298 *(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_GPM_OPCODE
Ë(
_›code
) & 0xff;\

299 } 0)

	)

301 
	#MCI_GPM_IS_CAL_TYPE
(
_ty≥
Ë((_ty≥Ë<
MCI_GPM_WLAN_CAL_DONE
)

	)

306 
boﬁ
 
¨9003_mci_£nd_mesßge
(
©h_hw
 *
ah
, 
u8
 
hódî
, 
u32
 
Êag
,

307 
u32
 *
∑ylﬂd
, 
u8
 
Àn
, 
boﬁ
 
waô_d⁄e
,

308 
boﬁ
 
check_bt
);

309 
u32
 
¨9003_mci_°©e
(
©h_hw
 *
ah
, u32 
°©e_ty≥
);

310 
¨9003_mci_£tup
(
©h_hw
 *
ah
, 
u32
 
gpm_addr
, *
gpm_buf
,

311 
u16
 
Àn
, 
u32
 
sched_addr
);

312 
¨9003_mci_˛ónup
(
©h_hw
 *
ah
);

313 
¨9003_mci_gë_öãºu±
(
©h_hw
 *
ah
, 
u32
 *
øw_öå
,

314 
u32
 *
rx_msg_öå
);

315 
u32
 
¨9003_mci_gë_√xt_gpm_off£t
(
©h_hw
 *
ah
, u32 *
m‹e
);

316 
¨9003_mci_£t_bt_vîsi⁄
(
©h_hw
 *
ah
, 
u8
 
maj‹
, u8 
mö‹
);

317 
¨9003_mci_£nd_wœn_ch™√ls
(
©h_hw
 *
ah
);

322 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


324 
¨9003_mci_°›_bt
(
©h_hw
 *
ah
, 
boﬁ
 
ßve_fuŒ¶ìp
);

325 
¨9003_mci_öô_ˇl_ªq
(
©h_hw
 *
ah
, 
boﬁ
 *
is_ªußbÀ
);

326 
¨9003_mci_öô_ˇl_d⁄e
(
©h_hw
 *
ah
);

327 
¨9003_mci_£t_fuŒ_¶ìp
(
©h_hw
 *
ah
);

328 
¨9003_mci_2g5g_swôch
(
©h_hw
 *
ah
, 
boﬁ
 
f‹˚
);

329 
¨9003_mci_check_bt
(
©h_hw
 *
ah
);

330 
boﬁ
 
¨9003_mci_°¨t_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

331 
¨9003_mci_íd_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

332 
©h9k_hw_ˇl_d©a
 *
ˇld©a
);

333 
¨9003_mci_ª£t
(
©h_hw
 *
ah
, 
boﬁ
 
í_öt
, boﬁ 
is_2g
,

334 
boﬁ
 
is_fuŒ_¶ìp
);

335 
¨9003_mci_gë_i§
(
©h_hw
 *
ah
, 
©h9k_öt
 *
masked
);

336 
¨9003_mci_bt_gaö_˘æ
(
©h_hw
 *
ah
);

337 
¨9003_mci_£t_powî_awake
(
©h_hw
 *
ah
);

338 
¨9003_mci_check_gpm_off£t
(
©h_hw
 *
ah
);

339 
u16
 
¨9003_mci_gë_max_txpowî
(
©h_hw
 *
ah
, 
u8
 
˘lmode
);

343 
ölöe
 
	$¨9003_mci_°›_bt
(
©h_hw
 *
ah
, 
boﬁ
 
ßve_fuŒ¶ìp
)

345 
	}
}

346 
ölöe
 
	$¨9003_mci_öô_ˇl_ªq
(
©h_hw
 *
ah
, 
boﬁ
 *
is_ªußbÀ
)

348 
	}
}

349 
ölöe
 
	$¨9003_mci_öô_ˇl_d⁄e
(
©h_hw
 *
ah
)

351 
	}
}

352 
ölöe
 
	$¨9003_mci_£t_fuŒ_¶ìp
(
©h_hw
 *
ah
)

354 
	}
}

355 
ölöe
 
	$¨9003_mci_2g5g_swôch
(
©h_hw
 *
ah
, 
boﬁ
 
waô_d⁄e
)

357 
	}
}

358 
ölöe
 
	$¨9003_mci_check_bt
(
©h_hw
 *
ah
)

360 
	}
}

361 
ölöe
 
boﬁ
 
	$¨9003_mci_°¨t_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

363  
Ál£
;

364 
	}
}

365 
ölöe
 
	$¨9003_mci_íd_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

366 
©h9k_hw_ˇl_d©a
 *
ˇld©a
)

369 
	}
}

370 
ölöe
 
	$¨9003_mci_ª£t
(
©h_hw
 *
ah
, 
boﬁ
 
í_öt
, boﬁ 
is_2g
,

371 
boﬁ
 
is_fuŒ_¶ìp
)

373 
	}
}

374 
ölöe
 
	$¨9003_mci_gë_i§
(
©h_hw
 *
ah
, 
©h9k_öt
 *
masked
)

376 
	}
}

377 
ölöe
 
	$¨9003_mci_bt_gaö_˘æ
(
©h_hw
 *
ah
)

379 
	}
}

380 
ölöe
 
	$¨9003_mci_£t_powî_awake
(
©h_hw
 *
ah
)

382 
	}
}

383 
ölöe
 
	$¨9003_mci_check_gpm_off£t
(
©h_hw
 *
ah
)

385 
	}
}

386 
ölöe
 
u16
 
	$¨9003_mci_gë_max_txpowî
(
©h_hw
 *
ah
, 
u8
 
˘lmode
)

389 
	}
}

	@ar9003_paprd.c

17 
	~<löux/exp‹t.h
>

18 
	~"hw.h
"

19 
	~"¨9003_phy.h
"

21 
	$¨9003_∑¥d_íabÀ
(
©h_hw
 *
ah
, 
boﬁ
 
vÆ
)

23 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

24 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

39 i‡(
	`IS_CHAN_5GHZ
(
ch™
)) {

40 i‡(
ch™
->
ch™√l
 >
UPPER_5G_SUB_BAND_START
) {

41 i‡(
	`À32_to_˝u
(
ìp
->
modÆHódî5G
.
∑pdR©eMaskHt20
)

42 & 
	`BIT
(30))

43 
vÆ
 = 
Ál£
;

44 } i‡(
ch™
->
ch™√l
 >
MID_5G_SUB_BAND_START
) {

45 i‡(
	`À32_to_˝u
(
ìp
->
modÆHódî5G
.
∑pdR©eMaskHt20
)

46 & 
	`BIT
(29))

47 
vÆ
 = 
Ál£
;

49 i‡(
	`À32_to_˝u
(
ìp
->
modÆHódî5G
.
∑pdR©eMaskHt20
)

50 & 
	`BIT
(28))

51 
vÆ
 = 
Ál£
;

55 i‡(
vÆ
) {

56 
ah
->
∑¥d_èbÀ_wrôe_d⁄e
 = 
åue
;

57 
	`©h9k_hw_≠∂y_txpowî
(
ah
, 
ch™
, 
Ál£
);

60 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_CTRL0_B0
,

61 
AR_PHY_PAPRD_CTRL0_PAPRD_ENABLE
, !!
vÆ
);

62 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(1))

63 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_CTRL0_B1
,

64 
AR_PHY_PAPRD_CTRL0_PAPRD_ENABLE
, !!
vÆ
);

65 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(2))

66 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_CTRL0_B2
,

67 
AR_PHY_PAPRD_CTRL0_PAPRD_ENABLE
, !!
vÆ
);

68 
	}
}

69 
EXPORT_SYMBOL
(
¨9003_∑¥d_íabÀ
);

71 
	$¨9003_gë_åaöög_powî_2g
(
©h_hw
 *
ah
)

73 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

74 
powî
, 
sˇÀ
, 
dñè
;

76 
sˇÀ
 = 
	`¨9003_gë_∑¥d_sˇÀ_Á˘‹
(
ah
, 
ch™
);

78 i‡(
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9340
(ah) ||

79 
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

80 
powî
 = 
ah
->
∑¥d_èrgë_powî
 + 2;

81 } i‡(
	`AR_SREV_9485
(
ah
)) {

82 
powî
 = 25;

84 
powî
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_POWERTX_RATE5
,

85 
AR_PHY_POWERTX_RATE5_POWERTXHT20_0
);

87 
dñè
 = 
	`abs
((Ë
ah
->
∑¥d_èrgë_powî
 - (Ë
powî
);

88 i‡(
dñè
 > 
sˇÀ
)

91 i‡(
dñè
 < 4)

92 
powî
 -4 - 
dñè
;

95  
powî
;

96 
	}
}

98 
	$¨9003_gë_åaöög_powî_5g
(
©h_hw
 *
ah
)

100 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

101 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

102 
powî
, 
sˇÀ
, 
dñè
;

104 
sˇÀ
 = 
	`¨9003_gë_∑¥d_sˇÀ_Á˘‹
(
ah
, 
ch™
);

106 i‡(
	`IS_CHAN_HT40
(
ch™
))

107 
powî
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_POWERTX_RATE8
,

108 
AR_PHY_POWERTX_RATE8_POWERTXHT40_5
);

110 
powî
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_POWERTX_RATE6
,

111 
AR_PHY_POWERTX_RATE6_POWERTXHT20_5
);

113 
powî
 +
sˇÀ
;

114 
dñè
 = 
	`abs
((Ë
ah
->
∑¥d_èrgë_powî
 - (Ë
powî
);

115 i‡(
dñè
 > 
sˇÀ
)

118 
	`gë_°ªams
(
ah
->
txchaömask
)) {

120 
dñè
 = 6;

123 
dñè
 = 4;

126 
dñè
 = 2;

129 
dñè
 = 0;

130 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "InvalidÅx-chainmask: %u\n",

131 
ah
->
txchaömask
);

134 
powî
 +
dñè
;

135  
powî
;

136 
	}
}

138 
	$¨9003_∑¥d_£tup_sögÀ_èbÀ
(
©h_hw
 *
ah
)

140 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

141 c⁄° 
u32
 
˘æ0
[3] = {

142 
AR_PHY_PAPRD_CTRL0_B0
,

143 
AR_PHY_PAPRD_CTRL0_B1
,

144 
AR_PHY_PAPRD_CTRL0_B2


146 c⁄° 
u32
 
˘æ1
[3] = {

147 
AR_PHY_PAPRD_CTRL1_B0
,

148 
AR_PHY_PAPRD_CTRL1_B1
,

149 
AR_PHY_PAPRD_CTRL1_B2


151 
åaöög_powî
;

152 
i
, 
vÆ
;

153 
u32
 
am2pm_mask
 = 
ah
->
∑¥d_øãmask
;

155 i‡(
	`IS_CHAN_2GHZ
(
ah
->
curch™
))

156 
åaöög_powî
 = 
	`¨9003_gë_åaöög_powî_2g
(
ah
);

158 
åaöög_powî
 = 
	`¨9003_gë_åaöög_powî_5g
(
ah
);

160 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "TrainingÖower: %d, TargetÖower: %d\n",

161 
åaöög_powî
, 
ah
->
∑¥d_èrgë_powî
);

163 i‡(
åaöög_powî
 < 0) {

164 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

166  -
ERANGE
;

168 
ah
->
∑¥d_åaöög_powî
 = 
åaöög_powî
;

170 i‡(
	`AR_SREV_9330
(
ah
))

171 
am2pm_mask
 = 0;

173 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_AM2AM
, 
AR_PHY_PAPRD_AM2AM_MASK
,

174 
ah
->
∑¥d_øãmask
);

175 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_AM2PM
, 
AR_PHY_PAPRD_AM2PM_MASK
,

176 
am2pm_mask
);

177 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_HT40
, 
AR_PHY_PAPRD_HT40_MASK
,

178 
ah
->
∑¥d_øãmask_ht40
);

180 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "PAPRD HT20 mask: 0x%x, HT40 mask: 0x%x\n",

181 
ah
->
∑¥d_øãmask
,áh->
∑¥d_øãmask_ht40
);

183 
i
 = 0; i < 
ah
->
ˇps
.
max_txchaös
; i++) {

184 
	`REG_RMW_FIELD
(
ah
, 
˘æ0
[
i
],

185 
AR_PHY_PAPRD_CTRL0_USE_SINGLE_TABLE_MASK
, 1);

186 
	`REG_RMW_FIELD
(
ah
, 
˘æ1
[
i
],

187 
AR_PHY_PAPRD_CTRL1_ADAPTIVE_AM2PM_ENABLE
, 1);

188 
	`REG_RMW_FIELD
(
ah
, 
˘æ1
[
i
],

189 
AR_PHY_PAPRD_CTRL1_ADAPTIVE_AM2AM_ENABLE
, 1);

190 
	`REG_RMW_FIELD
(
ah
, 
˘æ1
[
i
],

191 
AR_PHY_PAPRD_CTRL1_ADAPTIVE_SCALING_ENA
, 0);

192 
	`REG_RMW_FIELD
(
ah
, 
˘æ1
[
i
],

193 
AR_PHY_PAPRD_CTRL1_PA_GAIN_SCALE_FACT_MASK
, 181);

194 
	`REG_RMW_FIELD
(
ah
, 
˘æ1
[
i
],

195 
AR_PHY_PAPRD_CTRL1_PAPRD_MAG_SCALE_FACT
, 361);

196 
	`REG_RMW_FIELD
(
ah
, 
˘æ1
[
i
],

197 
AR_PHY_PAPRD_CTRL1_ADAPTIVE_SCALING_ENA
, 0);

198 
	`REG_RMW_FIELD
(
ah
, 
˘æ0
[
i
],

199 
AR_PHY_PAPRD_CTRL0_PAPRD_MAG_THRSH
, 3);

202 
	`¨9003_∑¥d_íabÀ
(
ah
, 
Ál£
);

204 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

205 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_LB_SKIP
, 0x30);

206 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

207 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_LB_ENABLE
, 1);

208 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

209 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_TX_GAIN_FORCE
, 1);

210 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

211 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_RX_BB_GAIN_FORCE
, 0);

212 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

213 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_IQCORR_ENABLE
, 0);

214 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

215 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_AGC2_SETTLING
, 28);

216 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL1
,

217 
AR_PHY_PAPRD_TRAINER_CNTL1_CF_CF_PAPRD_TRAIN_ENABLE
, 1);

219 i‡(
	`AR_SREV_9485
(
ah
)) {

220 
vÆ
 = 148;

222 i‡(
	`IS_CHAN_2GHZ
(
ah
->
curch™
)) {

223 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

224 
vÆ
 = 145;

226 
vÆ
 = 147;

228 
vÆ
 = 137;

232 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL2
,

233 
AR_PHY_PAPRD_TRAINER_CNTL2_CF_PAPRD_INIT_RX_BB_GAIN
, 
vÆ
);

234 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

235 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_FINE_CORR_LEN
, 4);

236 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

237 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_COARSE_CORR_LEN
, 4);

238 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

239 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_NUM_CORR_STAGES
, 7);

240 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

241 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_MIN_LOOPBACK_DEL
, 1);

243 i‡(
	`AR_SREV_9485
(
ah
) ||

244 
	`AR_SREV_9462
(
ah
) ||

245 
	`AR_SREV_9565
(
ah
) ||

246 
	`AR_SREV_9550
(
ah
) ||

247 
	`AR_SREV_9330
(
ah
) ||

248 
	`AR_SREV_9340
(
ah
))

249 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

250 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_QUICK_DROP
, -3);

252 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

253 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_QUICK_DROP
, -6);

255 
vÆ
 = -10;

257 i‡(
	`IS_CHAN_2GHZ
(
ah
->
curch™
Ë&& !
	`AR_SREV_9462
◊hË&& !
	`AR_SREV_9565
(ah))

258 
vÆ
 = -15;

260 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

261 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_ADC_DESIRED_SIZE
,

262 
vÆ
);

263 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

264 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_BBTXMIX_DISABLE
, 1);

265 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL4
,

266 
AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_SAFETY_DELTA
, 0);

267 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL4
,

268 
AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_MIN_CORR
, 400);

269 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL4
,

270 
AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_NUM_TRAIN_SAMPLES
,

272 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_0_B0
,

273 
AR_PHY_PAPRD_PRE_POST_SCALING
, 261376);

274 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_1_B0
,

275 
AR_PHY_PAPRD_PRE_POST_SCALING
, 248079);

276 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_2_B0
,

277 
AR_PHY_PAPRD_PRE_POST_SCALING
, 233759);

278 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_3_B0
,

279 
AR_PHY_PAPRD_PRE_POST_SCALING
, 220464);

280 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_4_B0
,

281 
AR_PHY_PAPRD_PRE_POST_SCALING
, 208194);

282 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_5_B0
,

283 
AR_PHY_PAPRD_PRE_POST_SCALING
, 196949);

284 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_6_B0
,

285 
AR_PHY_PAPRD_PRE_POST_SCALING
, 185706);

286 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_PRE_POST_SCALE_7_B0
,

287 
AR_PHY_PAPRD_PRE_POST_SCALING
, 175487);

289 
	}
}

291 
	$¨9003_∑¥d_gë_gaö_èbÀ
(
©h_hw
 *
ah
)

293 
u32
 *
íåy
 = 
ah
->
∑¥d_gaö_èbÀ_íåõs
;

294 
u8
 *
ödex
 = 
ah
->
∑¥d_gaö_èbÀ_ödex
;

295 
u32
 
ªg
 = 
AR_PHY_TXGAIN_TABLE
;

296 
i
;

298 
i
 = 0; i < 
PAPRD_GAIN_TABLE_ENTRIES
; i++) {

299 
íåy
[
i
] = 
	`REG_READ
(
ah
, 
ªg
);

300 
ödex
[
i
] = (
íåy
[i] >> 24) & 0xff;

301 
ªg
 += 4;

303 
	}
}

305 
	$¨9003_gë_desúed_gaö
(
©h_hw
 *
ah
, 
chaö
,

306 
èrgë_powî
)

308 
ﬁpc_gaö_dñè
 = 0, 
˛_gaö_mod
;

309 
Æpha_thîm
, 
Æpha_vﬁt
;

310 
thîm_ˇl_vÆue
, 
vﬁt_ˇl_vÆue
;

311 
thîm_vÆue
, 
vﬁt_vÆue
;

312 
thîmÆ_gaö_c‹r
, 
vﬁège_gaö_c‹r
;

313 
desúed_sˇÀ
, 
desúed_gaö
 = 0;

314 
u32
 
ªg_ﬁpc
 = 0, 
ªg_˛_gaö
 = 0;

316 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_PAPRD_TRAINER_STAT1
,

317 
AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_DONE
);

318 
desúed_sˇÀ
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TPC_12
,

319 
AR_PHY_TPC_12_DESIRED_SCALE_HT40_5
);

320 
Æpha_thîm
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TPC_19
,

321 
AR_PHY_TPC_19_ALPHA_THERM
);

322 
Æpha_vﬁt
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TPC_19
,

323 
AR_PHY_TPC_19_ALPHA_VOLT
);

324 
thîm_ˇl_vÆue
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TPC_18
,

325 
AR_PHY_TPC_18_THERM_CAL_VALUE
);

326 
vﬁt_ˇl_vÆue
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TPC_18
,

327 
AR_PHY_TPC_18_VOLT_CAL_VALUE
);

328 
thîm_vÆue
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_BB_THERM_ADC_4
,

329 
AR_PHY_BB_THERM_ADC_4_LATEST_THERM_VALUE
);

330 
vﬁt_vÆue
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_BB_THERM_ADC_4
,

331 
AR_PHY_BB_THERM_ADC_4_LATEST_VOLT_VALUE
);

333 
chaö
) {

335 
ªg_ﬁpc
 = 
AR_PHY_TPC_11_B0
;

336 
ªg_˛_gaö
 = 
AR_PHY_CL_TAB_0
;

339 
ªg_ﬁpc
 = 
AR_PHY_TPC_11_B1
;

340 
ªg_˛_gaö
 = 
AR_PHY_CL_TAB_1
;

343 
ªg_ﬁpc
 = 
AR_PHY_TPC_11_B2
;

344 
ªg_˛_gaö
 = 
AR_PHY_CL_TAB_2
;

347 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

348 "InvÆid chaömask: %d\n", 
chaö
);

352 
ﬁpc_gaö_dñè
 = 
	`REG_READ_FIELD
(
ah
, 
ªg_ﬁpc
,

353 
AR_PHY_TPC_11_OLPC_GAIN_DELTA
);

354 
˛_gaö_mod
 = 
	`REG_READ_FIELD
(
ah
, 
ªg_˛_gaö
,

355 
AR_PHY_CL_TAB_CL_GAIN_MOD
);

357 i‡(
ﬁpc_gaö_dñè
 >= 128)

358 
ﬁpc_gaö_dñè
 = olpc_gain_delta - 256;

360 
thîmÆ_gaö_c‹r
 = (
Æpha_thîm
 * (
thîm_vÆue
 - 
thîm_ˇl_vÆue
) +

362 
vﬁège_gaö_c‹r
 = (
Æpha_vﬁt
 * (
vﬁt_vÆue
 - 
vﬁt_ˇl_vÆue
) +

364 
desúed_gaö
 = 
èrgë_powî
 - 
ﬁpc_gaö_dñè
 - 
thîmÆ_gaö_c‹r
 -

365 
vﬁège_gaö_c‹r
 + 
desúed_sˇÀ
 + 
˛_gaö_mod
;

367  
desúed_gaö
;

368 
	}
}

370 
	$¨9003_tx_f‹˚_gaö
(
©h_hw
 *
ah
, 
gaö_ödex
)

372 
£À˘ed_gaö_íåy
, 
txbb1dbgaö
, 
txbb6dbgaö
, 
txmxrgaö
;

373 
∑drvgnA
, 
∑drvgnB
, 
∑drvgnC
, 
∑drvgnD
;

374 
u32
 *
gaö_èbÀ_íåõs
 = 
ah
->
∑¥d_gaö_èbÀ_íåõs
;

376 
£À˘ed_gaö_íåy
 = 
gaö_èbÀ_íåõs
[
gaö_ödex
];

377 
txbb1dbgaö
 = 
£À˘ed_gaö_íåy
 & 0x7;

378 
txbb6dbgaö
 = (
£À˘ed_gaö_íåy
 >> 3) & 0x3;

379 
txmxrgaö
 = (
£À˘ed_gaö_íåy
 >> 5) & 0xf;

380 
∑drvgnA
 = (
£À˘ed_gaö_íåy
 >> 9) & 0xf;

381 
∑drvgnB
 = (
£À˘ed_gaö_íåy
 >> 13) & 0xf;

382 
∑drvgnC
 = (
£À˘ed_gaö_íåy
 >> 17) & 0xf;

383 
∑drvgnD
 = (
£À˘ed_gaö_íåy
 >> 21) & 0x3;

385 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

386 
AR_PHY_TX_FORCED_GAIN_FORCED_TXBB1DBGAIN
, 
txbb1dbgaö
);

387 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

388 
AR_PHY_TX_FORCED_GAIN_FORCED_TXBB6DBGAIN
, 
txbb6dbgaö
);

389 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

390 
AR_PHY_TX_FORCED_GAIN_FORCED_TXMXRGAIN
, 
txmxrgaö
);

391 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

392 
AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNA
, 
∑drvgnA
);

393 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

394 
AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNB
, 
∑drvgnB
);

395 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

396 
AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNC
, 
∑drvgnC
);

397 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

398 
AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGND
, 
∑drvgnD
);

399 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

400 
AR_PHY_TX_FORCED_GAIN_FORCED_ENABLE_PAL
, 0);

401 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_FORCED_GAIN
,

402 
AR_PHY_TX_FORCED_GAIN_FORCE_TX_GAIN
, 0);

403 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_1
, 
AR_PHY_TPC_1_FORCED_DAC_GAIN
, 0);

404 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPC_1
, 
AR_PHY_TPC_1_FORCE_DAC_GAIN
, 0);

405 
	}
}

407 
ölöe
 
	$föd_ex≤
(
num
)

409  
	`Ês
(
num
) - 1;

410 
	}
}

412 
ölöe
 
	$föd_¥›î_sˇÀ
(
ex≤
, 
N
)

414  (
ex≤
 > 
N
) ?Éxpn - 10 : 0;

415 
	}
}

417 
	#NUM_BIN
 23

	)

419 
boﬁ
 
	$¸óã_∑_curve
(
u32
 *
d©a_L
, u32 *
d©a_U
, u32 *
∑_èbÀ
, 
u16
 *
gaö
)

421 
thªsh_accum_˙t
;

422 
x_e°
[
NUM_BIN
 + 1], 
Y
[NUM_BIN + 1], 
thëa
[NUM_BIN + 1];

423 
PA_ö
[
NUM_BIN
 + 1];

424 
B1_tmp
[
NUM_BIN
 + 1], 
B2_tmp
[NUM_BIN + 1];

425 
B1_abs_max
, 
B2_abs_max
;

426 
max_ödex
, 
sˇÀ_Á˘‹
;

427 
y_e°
[
NUM_BIN
 + 1];

428 
x_e°_fxp1_n⁄lö
, 
x_tûde
[
NUM_BIN
 + 1];

429 
x_tûde_abs
;

430 
G_fxp
, 
Y_öãr˚±
, 
‹dî_x_by_y
, 
M
, 
I
, 
L
, 
sum_y_sqr
, 
sum_y_quad
;

431 
Q_x
, 
Q_B1
, 
Q_B2
, 
bëa_øw
, 
Æpha_øw
, 
sˇÀ_B
;

432 
Q_sˇÀ_B
, 
Q_bëa
, 
Q_Æpha
, 
Æpha
, 
bëa
, 
‹dî_1
, 
‹dî_2
;

433 
‹dî1_5x
, 
‹dî2_3x
, 
‹dî1_5x_ªm
, 
‹dî2_3x_ªm
;

434 
y5
, 
y3
, 
tmp
;

435 
thëa_low_bö
 = 0;

436 
i
;

439 
thªsh_accum_˙t
 = 16;

440 
sˇÀ_Á˘‹
 = 5;

441 
max_ödex
 = 0;

442 
	`mem£t
(
thëa
, 0, (theta));

443 
	`mem£t
(
x_e°
, 0, (x_est));

444 
	`mem£t
(
Y
, 0, (Y));

445 
	`mem£t
(
y_e°
, 0, (y_est));

446 
	`mem£t
(
x_tûde
, 0, (x_tilde));

448 
i
 = 0; i < 
NUM_BIN
; i++) {

449 
s32
 
accum_˙t
, 
accum_tx
, 
accum_rx
, 
accum_™g
;

452 
accum_˙t
 = 
d©a_L
[
i
] & 0xffff;

454 i‡(
accum_˙t
 <
thªsh_accum_˙t
)

457 
max_ödex
++;

460 
accum_tx
 = ((
d©a_L
[
i
] >> 16) & 0xffff) |

461 ((
d©a_U
[
i
] & 0x7ff) << 16);

464 
accum_rx
 = ((
d©a_U
[
i
] >> 11) & 0x1f) |

465 ((
d©a_L
[
i
 + 23] & 0xffff) << 5);

468 
accum_™g
 = ((
d©a_L
[
i
 + 23] >> 16) & 0xffff) |

469 ((
d©a_U
[
i
 + 23] & 0x7ff) << 16);

471 
accum_tx
 <<
sˇÀ_Á˘‹
;

472 
accum_rx
 <<
sˇÀ_Á˘‹
;

473 
x_e°
[
max_ödex
] =

474 (((
accum_tx
 + 
accum_˙t
) /áccum_cnt) + 32) >>

475 
sˇÀ_Á˘‹
;

477 
Y
[
max_ödex
] =

478 ((((
accum_rx
 + 
accum_˙t
) /áccum_cnt) + 32) >>

479 
sˇÀ_Á˘‹
) +

480 (1 << 
sˇÀ_Á˘‹
Ë* 
i
 + 16;

482 i‡(
accum_™g
 >= (1 << 26))

483 
accum_™g
 -= 1 << 27;

485 
thëa
[
max_ödex
] =

486 ((
accum_™g
 * (1 << 
sˇÀ_Á˘‹
)Ë+ 
accum_˙t
) /

487 
accum_˙t
;

494 
i
 = 1; i < 6; i++)

495 
thëa_low_bö
 +
thëa
[
i
];

497 
thëa_low_bö
 =Åheta_low_bin / 5;

498 
i
 = 1; i < 6; i++)

499 
thëa
[
i
] = 
thëa_low_bö
;

502 
thëa
[0] = 
thëa_low_bö
;

503 
i
 = 0; i <
max_ödex
; i++)

504 
thëa
[
i
] -
thëa_low_bö
;

506 
x_e°
[0] = 0;

507 
Y
[0] = 0;

508 
sˇÀ_Á˘‹
 = 8;

511 i‡(
x_e°
[6] == x_est[3])

512  
Ál£
;

514 
G_fxp
 =

515 (((
Y
[6] - Y[3]Ë* 1 << 
sˇÀ_Á˘‹
) +

516 (
x_e°
[6] - x_est[3])) / (x_est[6] - x_est[3]);

519 i‡(
G_fxp
 == 0)

520  
Ál£
;

522 
Y_öãr˚±
 =

523 (
G_fxp
 * (
x_e°
[0] - x_est[3]) +

524 (1 << 
sˇÀ_Á˘‹
)Ë/ (1 << sˇÀ_Á˘‹Ë+ 
Y
[3];

526 
i
 = 0; i <
max_ödex
; i++)

527 
y_e°
[
i
] = 
Y
[i] - 
Y_öãr˚±
;

529 
i
 = 0; i <= 3; i++) {

530 
y_e°
[
i
] = i * 32;

531 
x_e°
[
i
] = ((
y_e°
[i] * 1 << 
sˇÀ_Á˘‹
Ë+ 
G_fxp
) / G_fxp;

534 i‡(
y_e°
[
max_ödex
] == 0)

535  
Ál£
;

537 
x_e°_fxp1_n⁄lö
 =

538 
x_e°
[
max_ödex
] - ((1 << 
sˇÀ_Á˘‹
Ë* 
y_e°
[max_index] +

539 
G_fxp
) / G_fxp;

541 
‹dî_x_by_y
 =

542 (
x_e°_fxp1_n⁄lö
 + 
y_e°
[
max_ödex
]) / y_est[max_index];

544 i‡(
‹dî_x_by_y
 == 0)

545 
M
 = 10;

546 i‡(
‹dî_x_by_y
 == 1)

547 
M
 = 9;

549 
M
 = 8;

551 
I
 = (
max_ödex
 > 15) ? 7 : max_index >> 1;

552 
L
 = 
max_ödex
 - 
I
;

553 
sˇÀ_Á˘‹
 = 8;

554 
sum_y_sqr
 = 0;

555 
sum_y_quad
 = 0;

556 
x_tûde_abs
 = 0;

558 
i
 = 0; i <
L
; i++) {

559 
y_sqr
;

560 
y_quad
;

561 
tmp_abs
;

564 i‡(
y_e°
[
i
 + 
I
] == 0)

565  
Ál£
;

567 
x_e°_fxp1_n⁄lö
 =

568 
x_e°
[
i
 + 
I
] - ((1 << 
sˇÀ_Á˘‹
Ë* 
y_e°
[i + I] +

569 
G_fxp
) / G_fxp;

571 
x_tûde
[
i
] =

572 (
x_e°_fxp1_n⁄lö
 * (1 << 
M
Ë+ 
y_e°
[
i
 + 
I
]) / y_est[i +

573 
I
];

574 
x_tûde
[
i
] =

575 (
x_tûde
[
i
] * (1 << 
M
Ë+ 
y_e°
[ò+ 
I
]) / y_est[i + I];

576 
x_tûde
[
i
] =

577 (
x_tûde
[
i
] * (1 << 
M
Ë+ 
y_e°
[ò+ 
I
]) / y_est[i + I];

578 
y_sqr
 =

579 (
y_e°
[
i
 + 
I
] * y_est[i + I] +

580 (
sˇÀ_Á˘‹
 * scale_factor)) / (scale_factor *

581 
sˇÀ_Á˘‹
);

582 
tmp_abs
 = 
	`abs
(
x_tûde
[
i
]);

583 i‡(
tmp_abs
 > 
x_tûde_abs
)

584 
x_tûde_abs
 = 
tmp_abs
;

586 
y_quad
 = 
y_sqr
 * y_sqr;

587 
sum_y_sqr
 = sum_y_sq∏+ 
y_sqr
;

588 
sum_y_quad
 = sum_y_quad + 
y_quad
;

589 
B1_tmp
[
i
] = 
y_sqr
 * (
L
 + 1);

590 
B2_tmp
[
i
] = 
y_sqr
;

593 
B1_abs_max
 = 0;

594 
B2_abs_max
 = 0;

595 
i
 = 0; i <
L
; i++) {

596 
abs_vÆ
;

598 
B1_tmp
[
i
] -
sum_y_sqr
;

599 
B2_tmp
[
i
] = 
sum_y_quad
 - 
sum_y_sqr
 * B2_tmp[i];

601 
abs_vÆ
 = 
	`abs
(
B1_tmp
[
i
]);

602 i‡(
abs_vÆ
 > 
B1_abs_max
)

603 
B1_abs_max
 = 
abs_vÆ
;

605 
abs_vÆ
 = 
	`abs
(
B2_tmp
[
i
]);

606 i‡(
abs_vÆ
 > 
B2_abs_max
)

607 
B2_abs_max
 = 
abs_vÆ
;

610 
Q_x
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
x_tûde_abs
), 10);

611 
Q_B1
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
B1_abs_max
), 10);

612 
Q_B2
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
B2_abs_max
), 10);

614 
bëa_øw
 = 0;

615 
Æpha_øw
 = 0;

616 
i
 = 0; i <
L
; i++) {

617 
x_tûde
[
i
] = x_tûde[i] / (1 << 
Q_x
);

618 
B1_tmp
[
i
] = B1_tmp[i] / (1 << 
Q_B1
);

619 
B2_tmp
[
i
] = B2_tmp[i] / (1 << 
Q_B2
);

620 
bëa_øw
 = bëa_øw + 
B1_tmp
[
i
] * 
x_tûde
[i];

621 
Æpha_øw
 =áÕha_øw + 
B2_tmp
[
i
] * 
x_tûde
[i];

624 
sˇÀ_B
 =

625 ((
sum_y_quad
 / 
sˇÀ_Á˘‹
Ë* (
L
 + 1) -

626 (
sum_y_sqr
 / 
sˇÀ_Á˘‹
) * sum_y_sqr) * scale_factor;

628 
Q_sˇÀ_B
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
	`abs
(
sˇÀ_B
)), 10);

629 
sˇÀ_B
 = sˇÀ_B / (1 << 
Q_sˇÀ_B
);

630 i‡(
sˇÀ_B
 == 0)

631  
Ál£
;

632 
Q_bëa
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
	`abs
(
bëa_øw
)), 10);

633 
Q_Æpha
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
	`abs
(
Æpha_øw
)), 10);

634 
bëa_øw
 = bëa_øw / (1 << 
Q_bëa
);

635 
Æpha_øw
 =áÕha_øw / (1 << 
Q_Æpha
);

636 
Æpha
 = (
Æpha_øw
 << 10Ë/ 
sˇÀ_B
;

637 
bëa
 = (
bëa_øw
 << 10Ë/ 
sˇÀ_B
;

638 
‹dî_1
 = 3 * 
M
 - 
Q_x
 - 
Q_B1
 - 
Q_bëa
 + 10 + 
Q_sˇÀ_B
;

639 
‹dî_2
 = 3 * 
M
 - 
Q_x
 - 
Q_B2
 - 
Q_Æpha
 + 10 + 
Q_sˇÀ_B
;

640 
‹dî1_5x
 = 
‹dî_1
 / 5;

641 
‹dî2_3x
 = 
‹dî_2
 / 3;

642 
‹dî1_5x_ªm
 = 
‹dî_1
 - 5 * 
‹dî1_5x
;

643 
‹dî2_3x_ªm
 = 
‹dî_2
 - 3 * 
‹dî2_3x
;

645 
i
 = 0; i < 
PAPRD_TABLE_SZ
; i++) {

646 
tmp
 = 
i
 * 32;

647 
y5
 = ((
bëa
 * 
tmp
Ë>> 6Ë>> 
‹dî1_5x
;

648 
y5
 = (y5 * 
tmp
Ë>> 
‹dî1_5x
;

649 
y5
 = (y5 * 
tmp
Ë>> 
‹dî1_5x
;

650 
y5
 = (y5 * 
tmp
Ë>> 
‹dî1_5x
;

651 
y5
 = (y5 * 
tmp
Ë>> 
‹dî1_5x
;

652 
y5
 = y5 >> 
‹dî1_5x_ªm
;

653 
y3
 = (
Æpha
 * 
tmp
Ë>> 
‹dî2_3x
;

654 
y3
 = (y3 * 
tmp
Ë>> 
‹dî2_3x
;

655 
y3
 = (y3 * 
tmp
Ë>> 
‹dî2_3x
;

656 
y3
 = y3 >> 
‹dî2_3x_ªm
;

657 
PA_ö
[
i
] = 
y5
 + 
y3
 + (256 * 
tmp
Ë/ 
G_fxp
;

659 i‡(
i
 >= 2) {

660 
tmp
 = 
PA_ö
[
i
] - PA_in[i - 1];

661 i‡(
tmp
 < 0)

662 
PA_ö
[
i
] =

663 
PA_ö
[
i
 - 1] + (PA_in[i - 1] -

664 
PA_ö
[
i
 - 2]);

667 
PA_ö
[
i
] = (PA_in[i] < 1400) ? PA_in[i] : 1400;

670 
bëa_øw
 = 0;

671 
Æpha_øw
 = 0;

673 
i
 = 0; i <
L
; i++) {

674 
thëa_tûde
 =

675 ((
thëa
[
i
 + 
I
] << 
M
Ë+ 
y_e°
[i + I]) / y_est[i + I];

676 
thëa_tûde
 =

677 ((
thëa_tûde
 << 
M
Ë+ 
y_e°
[
i
 + 
I
]) / y_est[i + I];

678 
thëa_tûde
 =

679 ((
thëa_tûde
 << 
M
Ë+ 
y_e°
[
i
 + 
I
]) / y_est[i + I];

680 
bëa_øw
 = bëa_øw + 
B1_tmp
[
i
] * 
thëa_tûde
;

681 
Æpha_øw
 =áÕha_øw + 
B2_tmp
[
i
] * 
thëa_tûde
;

684 
Q_bëa
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
	`abs
(
bëa_øw
)), 10);

685 
Q_Æpha
 = 
	`föd_¥›î_sˇÀ
(
	`föd_ex≤
(
	`abs
(
Æpha_øw
)), 10);

686 
bëa_øw
 = bëa_øw / (1 << 
Q_bëa
);

687 
Æpha_øw
 =áÕha_øw / (1 << 
Q_Æpha
);

689 
Æpha
 = (
Æpha_øw
 << 10Ë/ 
sˇÀ_B
;

690 
bëa
 = (
bëa_øw
 << 10Ë/ 
sˇÀ_B
;

691 
‹dî_1
 = 3 * 
M
 - 
Q_x
 - 
Q_B1
 - 
Q_bëa
 + 10 + 
Q_sˇÀ_B
 + 5;

692 
‹dî_2
 = 3 * 
M
 - 
Q_x
 - 
Q_B2
 - 
Q_Æpha
 + 10 + 
Q_sˇÀ_B
 + 5;

693 
‹dî1_5x
 = 
‹dî_1
 / 5;

694 
‹dî2_3x
 = 
‹dî_2
 / 3;

695 
‹dî1_5x_ªm
 = 
‹dî_1
 - 5 * 
‹dî1_5x
;

696 
‹dî2_3x_ªm
 = 
‹dî_2
 - 3 * 
‹dî2_3x
;

698 
i
 = 0; i < 
PAPRD_TABLE_SZ
; i++) {

699 
PA_™gÀ
;

702 i‡(
i
 == 4)

705 
tmp
 = 
i
 * 32;

706 i‡(
bëa
 > 0)

707 
y5
 = (((
bëa
 * 
tmp
 - 64) >> 6) -

708 (1 << 
‹dî1_5x
)) / (1 << order1_5x);

710 
y5
 = ((((
bëa
 * 
tmp
 - 64) >> 6) +

711 (1 << 
‹dî1_5x
)) / (1 << order1_5x));

713 
y5
 = (y5 * 
tmp
Ë/ (1 << 
‹dî1_5x
);

714 
y5
 = (y5 * 
tmp
Ë/ (1 << 
‹dî1_5x
);

715 
y5
 = (y5 * 
tmp
Ë/ (1 << 
‹dî1_5x
);

716 
y5
 = (y5 * 
tmp
Ë/ (1 << 
‹dî1_5x
);

717 
y5
 = y5 / (1 << 
‹dî1_5x_ªm
);

719 i‡(
bëa
 > 0)

720 
y3
 = (
Æpha
 * 
tmp
 -

721 (1 << 
‹dî2_3x
)) / (1 << order2_3x);

723 
y3
 = (
Æpha
 * 
tmp
 +

724 (1 << 
‹dî2_3x
)) / (1 << order2_3x);

725 
y3
 = (y3 * 
tmp
Ë/ (1 << 
‹dî2_3x
);

726 
y3
 = (y3 * 
tmp
Ë/ (1 << 
‹dî2_3x
);

727 
y3
 = y3 / (1 << 
‹dî2_3x_ªm
);

729 i‡(
i
 < 4) {

730 
PA_™gÀ
 = 0;

732 
PA_™gÀ
 = 
y5
 + 
y3
;

733 i‡(
PA_™gÀ
 < -150)

734 
PA_™gÀ
 = -150;

735 i‡(
PA_™gÀ
 > 150)

736 
PA_™gÀ
 = 150;

739 
∑_èbÀ
[
i
] = ((
PA_ö
[i] & 0x7ffË<< 11Ë+ (
PA_™gÀ
 & 0x7ff);

740 i‡(
i
 == 5) {

741 
PA_™gÀ
 = (PA_angle + 2) >> 1;

742 
∑_èbÀ
[
i
 - 1] = ((
PA_ö
[i - 1] & 0x7ff) << 11) +

743 (
PA_™gÀ
 & 0x7ff);

747 *
gaö
 = 
G_fxp
;

748  
åue
;

749 
	}
}

751 
	$¨9003_∑¥d_p›uœã_sögÀ_èbÀ
(
©h_hw
 *
ah
,

752 
©h9k_hw_ˇl_d©a
 *
ˇld©a
,

753 
chaö
)

755 
u32
 *
∑¥d_èbÀ_vÆ
 = 
ˇld©a
->
∑_èbÀ
[
chaö
];

756 
u32
 
smÆl_sig«l_gaö
 = 
ˇld©a
->smÆl_sig«l_gaö[
chaö
];

757 
u32
 
åaöög_powî
 = 
ah
->
∑¥d_åaöög_powî
;

758 
u32
 
ªg
 = 0;

759 
i
;

761 i‡(
chaö
 == 0)

762 
ªg
 = 
AR_PHY_PAPRD_MEM_TAB_B0
;

763 i‡(
chaö
 == 1)

764 
ªg
 = 
AR_PHY_PAPRD_MEM_TAB_B1
;

765 i‡(
chaö
 == 2)

766 
ªg
 = 
AR_PHY_PAPRD_MEM_TAB_B2
;

768 
i
 = 0; i < 
PAPRD_TABLE_SZ
; i++) {

769 
	`REG_WRITE
(
ah
, 
ªg
, 
∑¥d_èbÀ_vÆ
[
i
]);

770 
ªg
 =Ñeg + 4;

773 i‡(
chaö
 == 0)

774 
ªg
 = 
AR_PHY_PA_GAIN123_B0
;

775 i‡(
chaö
 == 1)

776 
ªg
 = 
AR_PHY_PA_GAIN123_B1
;

778 
ªg
 = 
AR_PHY_PA_GAIN123_B2
;

780 
	`REG_RMW_FIELD
(
ah
, 
ªg
, 
AR_PHY_PA_GAIN123_PA_GAIN1
, 
smÆl_sig«l_gaö
);

782 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_CTRL1_B0
,

783 
AR_PHY_PAPRD_CTRL1_PAPRD_POWER_AT_AM2AM_CAL
,

784 
åaöög_powî
);

786 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(1))

787 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_CTRL1_B1
,

788 
AR_PHY_PAPRD_CTRL1_PAPRD_POWER_AT_AM2AM_CAL
,

789 
åaöög_powî
);

791 i‡(
ah
->
ˇps
.
tx_chaömask
 & 
	`BIT
(2))

793 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_CTRL1_B2
,

794 
AR_PHY_PAPRD_CTRL1_PAPRD_POWER_AT_AM2AM_CAL
,

795 
åaöög_powî
);

796 
	}
}

797 
EXPORT_SYMBOL
(
¨9003_∑¥d_p›uœã_sögÀ_èbÀ
);

799 
	$¨9003_∑¥d_£tup_gaö_èbÀ
(
©h_hw
 *
ah
, 
chaö
)

801 
i
, 
desúed_gaö
, 
gaö_ödex
;

802 
åaö_powî
 = 
ah
->
∑¥d_åaöög_powî
;

804 
desúed_gaö
 = 
	`¨9003_gë_desúed_gaö
(
ah
, 
chaö
, 
åaö_powî
);

806 
gaö_ödex
 = 0;

807 
i
 = 0; i < 
PAPRD_GAIN_TABLE_ENTRIES
; i++) {

808 i‡(
ah
->
∑¥d_gaö_èbÀ_ödex
[
i
] >
desúed_gaö
)

810 
gaö_ödex
++;

813 
	`¨9003_tx_f‹˚_gaö
(
ah
, 
gaö_ödex
);

815 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_PAPRD_TRAINER_STAT1
,

816 
AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_DONE
);

817 
	}
}

818 
EXPORT_SYMBOL
(
¨9003_∑¥d_£tup_gaö_èbÀ
);

820 
boﬁ
 
	$¨9003_∑¥d_ªåaö_∑_ö
(
©h_hw
 *
ah
,

821 
©h9k_hw_ˇl_d©a
 *
ˇld©a
,

822 
chaö
)

824 
u32
 *
∑_ö
 = 
ˇld©a
->
∑_èbÀ
[
chaö
];

825 
ˇpdiv_off£t
, 
quick_dr›_off£t
;

826 
ˇpdiv2g
, 
quick_dr›
;

827 
cou¡
 = 0;

828 
i
;

830 i‡(!
	`AR_SREV_9485
(
ah
Ë&& !
	`AR_SREV_9330
(ah))

831  
Ál£
;

833 
ˇpdiv2g
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_65NM_CH0_TXRF3
,

834 
AR_PHY_65NM_CH0_TXRF3_CAPDIV2G
);

836 
quick_dr›
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

837 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_QUICK_DROP
);

839 i‡(
quick_dr›
)

840 
quick_dr›
 -= 0x40;

842 
i
 = 0; i < 
NUM_BIN
 + 1; i++) {

843 i‡(
∑_ö
[
i
] == 1400)

844 
cou¡
++;

847 i‡(
	`AR_SREV_9485
(
ah
)) {

848 i‡(
∑_ö
[23] < 800) {

849 
ˇpdiv_off£t
 = ()((1000 - 
∑_ö
[23] + 75) / 150);

850 
ˇpdiv2g
 +
ˇpdiv_off£t
;

851 i‡(
ˇpdiv2g
 > 7) {

852 
ˇpdiv2g
 = 7;

853 i‡(
∑_ö
[23] < 600) {

854 
quick_dr›
++;

855 i‡(
quick_dr›
 > 0)

856 
quick_dr›
 = 0;

859 } i‡(
∑_ö
[23] == 1400) {

860 
quick_dr›_off£t
 = 
	`mö_t
(, 
cou¡
 / 3, 2);

861 
quick_dr›
 +
quick_dr›_off£t
;

862 
ˇpdiv2g
 +
quick_dr›_off£t
 / 2;

864 i‡(
ˇpdiv2g
 > 7)

865 
ˇpdiv2g
 = 7;

867 i‡(
quick_dr›
 > 0) {

868 
quick_dr›
 = 0;

869 
ˇpdiv2g
 -
quick_dr›_off£t
;

870 i‡(
ˇpdiv2g
 < 0)

871 
ˇpdiv2g
 = 0;

874  
Ál£
;

876 } i‡(
	`AR_SREV_9330
(
ah
)) {

877 i‡(
∑_ö
[23] < 1000) {

878 
ˇpdiv_off£t
 = (1000 - 
∑_ö
[23]) / 100;

879 
ˇpdiv2g
 +
ˇpdiv_off£t
;

880 i‡(
ˇpdiv_off£t
 > 3) {

881 
ˇpdiv_off£t
 = 1;

882 
quick_dr›
--;

885 
ˇpdiv2g
 +
ˇpdiv_off£t
;

886 i‡(
ˇpdiv2g
 > 6)

887 
ˇpdiv2g
 = 6;

888 i‡(
quick_dr›
 < -4)

889 
quick_dr›
 = -4;

890 } i‡(
∑_ö
[23] == 1400) {

891 i‡(
cou¡
 > 3) {

892 
quick_dr›
++;

893 
ˇpdiv2g
 -
cou¡
 / 4;

894 i‡(
quick_dr›
 > -2)

895 
quick_dr›
 = -2;

897 
ˇpdiv2g
--;

900 i‡(
ˇpdiv2g
 < 0)

901 
ˇpdiv2g
 = 0;

903  
Ál£
;

907 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_TXRF3
,

908 
AR_PHY_65NM_CH0_TXRF3_CAPDIV2G
, 
ˇpdiv2g
);

909 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_CNTL3
,

910 
AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_QUICK_DROP
,

911 
quick_dr›
);

913  
åue
;

914 
	}
}

916 
	$¨9003_∑¥d_¸óã_curve
(
©h_hw
 *
ah
,

917 
©h9k_hw_ˇl_d©a
 *
ˇld©a
, 
chaö
)

919 
u16
 *
smÆl_sig«l_gaö
 = &
ˇld©a
->smÆl_sig«l_gaö[
chaö
];

920 
u32
 *
∑_èbÀ
 = 
ˇld©a
->∑_èbÀ[
chaö
];

921 
u32
 *
d©a_L
, *
d©a_U
;

922 
i
, 
°©us
 = 0;

923 
u32
 *
buf
;

924 
u32
 
ªg
;

926 
	`mem£t
(
ˇld©a
->
∑_èbÀ
[
chaö
], 0, (caldata->pa_table[chain]));

928 
buf
 = 
	`kmÆloc
(2 * 48 * (
u32
), 
GFP_KERNEL
);

929 i‡(!
buf
)

930  -
ENOMEM
;

932 
d©a_L
 = &
buf
[0];

933 
d©a_U
 = &
buf
[48];

935 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CHAN_INFO_MEMORY
,

936 
AR_PHY_CHAN_INFO_MEMORY_CHANINFOMEM_S2_READ
);

938 
ªg
 = 
AR_PHY_CHAN_INFO_TAB_0
;

939 
i
 = 0; i < 48; i++)

940 
d©a_L
[
i
] = 
	`REG_READ
(
ah
, 
ªg
 + (i << 2));

942 
	`REG_SET_BIT
(
ah
, 
AR_PHY_CHAN_INFO_MEMORY
,

943 
AR_PHY_CHAN_INFO_MEMORY_CHANINFOMEM_S2_READ
);

945 
i
 = 0; i < 48; i++)

946 
d©a_U
[
i
] = 
	`REG_READ
(
ah
, 
ªg
 + (i << 2));

948 i‡(!
	`¸óã_∑_curve
(
d©a_L
, 
d©a_U
, 
∑_èbÀ
, 
smÆl_sig«l_gaö
))

949 
°©us
 = -2;

951 i‡(
	`¨9003_∑¥d_ªåaö_∑_ö
(
ah
, 
ˇld©a
, 
chaö
))

952 
°©us
 = -
EINPROGRESS
;

954 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_PAPRD_TRAINER_STAT1
,

955 
AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_DONE
);

957 
	`k‰ì
(
buf
);

959  
°©us
;

960 
	}
}

961 
EXPORT_SYMBOL
(
¨9003_∑¥d_¸óã_curve
);

963 
	$¨9003_∑¥d_öô_èbÀ
(
©h_hw
 *
ah
)

965 
ªt
;

967 
ªt
 = 
	`¨9003_∑¥d_£tup_sögÀ_èbÀ
(
ah
);

968 i‡(
ªt
 < 0)

969  
ªt
;

971 
	`¨9003_∑¥d_gë_gaö_èbÀ
(
ah
);

973 
	}
}

974 
EXPORT_SYMBOL
(
¨9003_∑¥d_öô_èbÀ
);

976 
boﬁ
 
	$¨9003_∑¥d_is_d⁄e
(
©h_hw
 *
ah
)

978 
∑¥d_d⁄e
, 
agc2_pwr
;

980 
∑¥d_d⁄e
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_STAT1
,

981 
AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_DONE
);

983 i‡(
	`AR_SREV_9485
(
ah
))

984 
exô
;

986 i‡(
∑¥d_d⁄e
 == 0x1) {

987 
agc2_pwr
 = 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_PAPRD_TRAINER_STAT1
,

988 
AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_AGC2_PWR
);

990 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

992 
agc2_pwr
, 
∑¥d_d⁄e
);

998 i‡(
agc2_pwr
 <
PAPRD_IDEAL_AGC2_PWR_RANGE
)

999 
∑¥d_d⁄e
 = 0;

1001 
exô
:

1002  !!
∑¥d_d⁄e
;

1003 
	}
}

1004 
EXPORT_SYMBOL
(
¨9003_∑¥d_is_d⁄e
);

1006 
boﬁ
 
	$¨9003_is_∑¥d_íabÀd
(
©h_hw
 *
ah
)

1008 i‡((
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_PAPRD
Ë&&áh->
c⁄fig
.
íabÀ_∑¥d
)

1009  
åue
;

1011  
Ál£
;

1012 
	}
}

1013 
EXPORT_SYMBOL
(
¨9003_is_∑¥d_íabÀd
);

	@ar9003_phy.c

17 
	~<löux/exp‹t.h
>

18 
	~"hw.h
"

19 
	~"¨9003_phy.h
"

21 
	#AR9300_OFDM_RATES
 8

	)

22 
	#AR9300_HT_SS_RATES
 8

	)

23 
	#AR9300_HT_DS_RATES
 8

	)

24 
	#AR9300_HT_TS_RATES
 8

	)

26 
	#AR9300_11NA_OFDM_SHIFT
 0

	)

27 
	#AR9300_11NA_HT_SS_SHIFT
 8

	)

28 
	#AR9300_11NA_HT_DS_SHIFT
 16

	)

29 
	#AR9300_11NA_HT_TS_SHIFT
 24

	)

31 
	#AR9300_11NG_OFDM_SHIFT
 4

	)

32 
	#AR9300_11NG_HT_SS_SHIFT
 12

	)

33 
	#AR9300_11NG_HT_DS_SHIFT
 20

	)

34 
	#AR9300_11NG_HT_TS_SHIFT
 28

	)

36 c⁄° 
	gfú°ï_èbÀ
[] =

40 c⁄° 
	gcy˝wrThr1_èbÀ
[] =

47 c⁄° 
	gm1ThªshLow_off
 = 127;

48 c⁄° 
	gm2ThªshLow_off
 = 127;

49 c⁄° 
	gm1Thªsh_off
 = 127;

50 c⁄° 
	gm2Thªsh_off
 = 127;

51 c⁄° 
	gm2Cou¡Thr_off
 = 31;

52 c⁄° 
	gm2Cou¡ThrLow_off
 = 63;

53 c⁄° 
	gm1ThªshLowExt_off
 = 127;

54 c⁄° 
	gm2ThªshLowExt_off
 = 127;

55 c⁄° 
	gm1ThªshExt_off
 = 127;

56 c⁄° 
	gm2ThªshExt_off
 = 127;

58 c⁄° 
u8
 
	gofdm2pwr
[] = {

59 
ALL_TARGET_LEGACY_6_24
,

60 
ALL_TARGET_LEGACY_6_24
,

61 
ALL_TARGET_LEGACY_6_24
,

62 
ALL_TARGET_LEGACY_6_24
,

63 
ALL_TARGET_LEGACY_6_24
,

64 
ALL_TARGET_LEGACY_36
,

65 
ALL_TARGET_LEGACY_48
,

66 
ALL_TARGET_LEGACY_54


69 c⁄° 
u8
 
	gmcs2pwr_ht20
[] = {

70 
ALL_TARGET_HT20_0_8_16
,

71 
ALL_TARGET_HT20_1_3_9_11_17_19
,

72 
ALL_TARGET_HT20_1_3_9_11_17_19
,

73 
ALL_TARGET_HT20_1_3_9_11_17_19
,

74 
ALL_TARGET_HT20_4
,

75 
ALL_TARGET_HT20_5
,

76 
ALL_TARGET_HT20_6
,

77 
ALL_TARGET_HT20_7
,

78 
ALL_TARGET_HT20_0_8_16
,

79 
ALL_TARGET_HT20_1_3_9_11_17_19
,

80 
ALL_TARGET_HT20_1_3_9_11_17_19
,

81 
ALL_TARGET_HT20_1_3_9_11_17_19
,

82 
ALL_TARGET_HT20_12
,

83 
ALL_TARGET_HT20_13
,

84 
ALL_TARGET_HT20_14
,

85 
ALL_TARGET_HT20_15
,

86 
ALL_TARGET_HT20_0_8_16
,

87 
ALL_TARGET_HT20_1_3_9_11_17_19
,

88 
ALL_TARGET_HT20_1_3_9_11_17_19
,

89 
ALL_TARGET_HT20_1_3_9_11_17_19
,

90 
ALL_TARGET_HT20_20
,

91 
ALL_TARGET_HT20_21
,

92 
ALL_TARGET_HT20_22
,

93 
ALL_TARGET_HT20_23


96 c⁄° 
u8
 
	gmcs2pwr_ht40
[] = {

97 
ALL_TARGET_HT40_0_8_16
,

98 
ALL_TARGET_HT40_1_3_9_11_17_19
,

99 
ALL_TARGET_HT40_1_3_9_11_17_19
,

100 
ALL_TARGET_HT40_1_3_9_11_17_19
,

101 
ALL_TARGET_HT40_4
,

102 
ALL_TARGET_HT40_5
,

103 
ALL_TARGET_HT40_6
,

104 
ALL_TARGET_HT40_7
,

105 
ALL_TARGET_HT40_0_8_16
,

106 
ALL_TARGET_HT40_1_3_9_11_17_19
,

107 
ALL_TARGET_HT40_1_3_9_11_17_19
,

108 
ALL_TARGET_HT40_1_3_9_11_17_19
,

109 
ALL_TARGET_HT40_12
,

110 
ALL_TARGET_HT40_13
,

111 
ALL_TARGET_HT40_14
,

112 
ALL_TARGET_HT40_15
,

113 
ALL_TARGET_HT40_0_8_16
,

114 
ALL_TARGET_HT40_1_3_9_11_17_19
,

115 
ALL_TARGET_HT40_1_3_9_11_17_19
,

116 
ALL_TARGET_HT40_1_3_9_11_17_19
,

117 
ALL_TARGET_HT40_20
,

118 
ALL_TARGET_HT40_21
,

119 
ALL_TARGET_HT40_22
,

120 
ALL_TARGET_HT40_23
,

148 
	$¨9003_hw_£t_ch™√l
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

150 
u16
 
bMode
, 
‰acMode
 = 0, 
aModeRefSñ
 = 0;

151 
u32
 
‰eq
, 
ch™_‰ac
, 
div
, 
ch™√lSñ
 = 0, 
ªg32
 = 0;

152 
ch™_˚¡îs
 
˚¡îs
;

153 
lﬂdSy¡hCh™√l
;

155 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

156 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

158 i‡(
‰eq
 < 4800) {

159 i‡(
	`AR_SREV_9330
(
ah
)) {

160 i‡(
ah
->
is_˛k_25mhz
)

161 
div
 = 75;

163 
div
 = 120;

165 
ch™√lSñ
 = (
‰eq
 * 4Ë/ 
div
;

166 
ch™_‰ac
 = (((
‰eq
 * 4Ë% 
div
) * 0x20000) / div;

167 
ch™√lSñ
 = (ch™√lSñ << 17Ë| 
ch™_‰ac
;

168 } i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

175 
ch™√lSñ
 = (
‰eq
 * 4) / 120;

176 
ch™_‰ac
 = (((
‰eq
 * 4) % 120) * 0x20000) / 120;

177 
ch™√lSñ
 = (ch™√lSñ << 17Ë| 
ch™_‰ac
;

178 } i‡(
	`AR_SREV_9340
(
ah
)) {

179 i‡(
ah
->
is_˛k_25mhz
) {

180 
ch™√lSñ
 = (
‰eq
 * 2) / 75;

181 
ch™_‰ac
 = (((
‰eq
 * 2) % 75) * 0x20000) / 75;

182 
ch™√lSñ
 = (ch™√lSñ << 17Ë| 
ch™_‰ac
;

184 
ch™√lSñ
 = 
	`CHANSEL_2G
(
‰eq
) >> 1;

186 } i‡(
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9531
(ah) ||

187 
	`AR_SREV_9561
(
ah
)) {

188 i‡(
ah
->
is_˛k_25mhz
)

189 
div
 = 75;

191 
div
 = 120;

193 
ch™√lSñ
 = (
‰eq
 * 4Ë/ 
div
;

194 
ch™_‰ac
 = (((
‰eq
 * 4Ë% 
div
) * 0x20000) / div;

195 
ch™√lSñ
 = (ch™√lSñ << 17Ë| 
ch™_‰ac
;

197 
ch™√lSñ
 = 
	`CHANSEL_2G
(
‰eq
);

200 
bMode
 = 1;

202 i‡((
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
(ah) ||

203 
	`AR_SREV_9531
(
ah
Ë|| 
	`AR_SREV_9561
(ah)) &&

204 
ah
->
is_˛k_25mhz
) {

205 
ch™√lSñ
 = 
‰eq
 / 75;

206 
ch™_‰ac
 = ((
‰eq
 % 75) * 0x20000) / 75;

207 
ch™√lSñ
 = (ch™√lSñ << 17Ë| 
ch™_‰ac
;

209 
ch™√lSñ
 = 
	`CHANSEL_5G
(
‰eq
);

211 
ch™√lSñ
 >>= 1;

214 
bMode
 = 0;

218 
‰acMode
 = 1;

219 
aModeRefSñ
 = 0;

220 
lﬂdSy¡hCh™√l
 = 0;

222 
ªg32
 = (
bMode
 << 29);

223 
	`REG_WRITE
(
ah
, 
AR_PHY_SYNTH_CONTROL
, 
ªg32
);

226 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_SYNTH4
,

227 
AR_PHY_SYNTH4_LONG_SHIFT_SELECT
, 1);

230 
ªg32
 = (
ch™√lSñ
 << 2Ë| (
‰acMode
 << 30) |

231 (
aModeRefSñ
 << 28Ë| (
lﬂdSy¡hCh™√l
 << 31);

232 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_SYNTH7
, 
ªg32
);

235 
lﬂdSy¡hCh™√l
 = 1;

236 
ªg32
 = (
ch™√lSñ
 << 2Ë| (
‰acMode
 << 30) |

237 (
aModeRefSñ
 << 28Ë| (
lﬂdSy¡hCh™√l
 << 31);

238 
	`REG_WRITE
(
ah
, 
AR_PHY_65NM_CH0_SYNTH7
, 
ªg32
);

240 
ah
->
curch™
 = 
ch™
;

243 
	}
}

255 
	$¨9003_hw_•ur_môig©e_mrc_cck
(
©h_hw
 *
ah
,

256 
©h9k_ch™√l
 *
ch™
)

258 c⁄° 
u32
 
•ur_‰eq
[4] = { 2420, 2440, 2464, 2480 };

259 
cur_bb_•ur
, 
√g©ive
 = 0, 
cck_•ur_‰eq
;

260 
i
;

261 
ønge
, 
max_•ur_˙ts
, 
sy¡h_‰eq
;

262 
u8
 *
•ur_fbö_±r
 = 
	`¨9003_gë_•ur_ch™_±r
(
ah
, 
	`IS_CHAN_2GHZ
(
ch™
));

269 i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9340
◊hË|| 
	`AR_SREV_9330
(ah) ||

270 
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9561
(ah)) {

271 i‡(
•ur_fbö_±r
[0] == 0)

273 
max_•ur_˙ts
 = 5;

274 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

275 
ønge
 = 19;

276 i‡(
	`REG_READ_FIELD
(
ah
, 
AR_PHY_GEN_CTRL
,

277 
AR_PHY_GC_DYN2040_PRI_CH
) == 0)

278 
sy¡h_‰eq
 = 
ch™
->
ch™√l
 + 10;

280 
sy¡h_‰eq
 = 
ch™
->
ch™√l
 - 10;

282 
ønge
 = 10;

283 
sy¡h_‰eq
 = 
ch™
->
ch™√l
;

286 
ønge
 = 
	`AR_SREV_9462
(
ah
) ? 5 : 10;

287 
max_•ur_˙ts
 = 4;

288 
sy¡h_‰eq
 = 
ch™
->
ch™√l
;

291 
i
 = 0; i < 
max_•ur_˙ts
; i++) {

292 i‡(
	`AR_SREV_9462
(
ah
Ë&& (
i
 == 0 || i == 3))

295 
√g©ive
 = 0;

296 i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9340
◊hË|| 
	`AR_SREV_9330
(ah) ||

297 
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9561
(ah))

298 
cur_bb_•ur
 = 
	`©h9k_hw_fbö2‰eq
(
•ur_fbö_±r
[
i
],

299 
	`IS_CHAN_2GHZ
(
ch™
));

301 
cur_bb_•ur
 = 
•ur_‰eq
[
i
];

303 
cur_bb_•ur
 -
sy¡h_‰eq
;

304 i‡(
cur_bb_•ur
 < 0) {

305 
√g©ive
 = 1;

306 
cur_bb_•ur
 = -cur_bb_spur;

308 i‡(
cur_bb_•ur
 < 
ønge
) {

309 
cck_•ur_‰eq
 = ()((
cur_bb_•ur
 << 19) / 11);

311 i‡(
√g©ive
 == 1)

312 
cck_•ur_‰eq
 = -cck_spur_freq;

314 
cck_•ur_‰eq
 = cck_spur_freq & 0xfffff;

316 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_AGC_CONTROL
,

317 
AR_PHY_AGC_CONTROL_YCOK_MAX
, 0x7);

318 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_SPUR_MIT
,

319 
AR_PHY_CCK_SPUR_MIT_SPUR_RSSI_THR
, 0x7f);

320 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_SPUR_MIT
,

321 
AR_PHY_CCK_SPUR_MIT_SPUR_FILTER_TYPE
,

323 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_SPUR_MIT
,

324 
AR_PHY_CCK_SPUR_MIT_USE_CCK_SPUR_MIT
,

326 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_SPUR_MIT
,

327 
AR_PHY_CCK_SPUR_MIT_CCK_SPUR_FREQ
,

328 
cck_•ur_‰eq
);

334 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_AGC_CONTROL
,

335 
AR_PHY_AGC_CONTROL_YCOK_MAX
, 0x5);

336 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_SPUR_MIT
,

337 
AR_PHY_CCK_SPUR_MIT_USE_CCK_SPUR_MIT
, 0x0);

338 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_SPUR_MIT
,

339 
AR_PHY_CCK_SPUR_MIT_CCK_SPUR_FREQ
, 0x0);

340 
	}
}

343 
	$¨9003_hw_•ur_ofdm_˛ór
(
©h_hw
 *
ah
)

345 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

346 
AR_PHY_TIMING4_ENABLE_SPUR_FILTER
, 0);

347 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

348 
AR_PHY_TIMING11_SPUR_FREQ_SD
, 0);

349 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

350 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
, 0);

351 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

352 
AR_PHY_SFCORR_EXT_SPUR_SUBCHANNEL_SD
, 0);

353 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

354 
AR_PHY_TIMING11_USE_SPUR_FILTER_IN_AGC
, 0);

355 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

356 
AR_PHY_TIMING11_USE_SPUR_FILTER_IN_SELFCOR
, 0);

357 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

358 
AR_PHY_TIMING4_ENABLE_SPUR_RSSI
, 0);

359 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

360 
AR_PHY_SPUR_REG_EN_VIT_SPUR_RSSI
, 0);

361 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

362 
AR_PHY_SPUR_REG_ENABLE_NF_RSSI_SPUR_MIT
, 0);

364 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

365 
AR_PHY_SPUR_REG_ENABLE_MASK_PPM
, 0);

366 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

367 
AR_PHY_TIMING4_ENABLE_PILOT_MASK
, 0);

368 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

369 
AR_PHY_TIMING4_ENABLE_CHAN_MASK
, 0);

370 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PILOT_SPUR_MASK
,

371 
AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_A
, 0);

372 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_MASK_A
,

373 
AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_IDX_A
, 0);

374 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CHAN_SPUR_MASK
,

375 
AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_A
, 0);

376 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PILOT_SPUR_MASK
,

377 
AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_A
, 0);

378 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CHAN_SPUR_MASK
,

379 
AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_A
, 0);

380 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_MASK_A
,

381 
AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_A
, 0);

382 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

383 
AR_PHY_SPUR_REG_MASK_RATE_CNTL
, 0);

384 
	}
}

386 
	$¨9003_hw_•ur_ofdm
(
©h_hw
 *
ah
,

387 
‰eq_off£t
,

388 
•ur_‰eq_sd
,

389 
•ur_dñè_pha£
,

390 
•ur_subch™√l_sd
,

391 
ønge
,

392 
sy¡h_‰eq
)

394 
mask_ödex
 = 0;

397 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

398 
AR_PHY_TIMING4_ENABLE_SPUR_FILTER
, 0x1);

399 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

400 
AR_PHY_TIMING11_SPUR_FREQ_SD
, 
•ur_‰eq_sd
);

401 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

402 
AR_PHY_TIMING11_SPUR_DELTA_PHASE
, 
•ur_dñè_pha£
);

403 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

404 
AR_PHY_SFCORR_EXT_SPUR_SUBCHANNEL_SD
, 
•ur_subch™√l_sd
);

405 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

406 
AR_PHY_TIMING11_USE_SPUR_FILTER_IN_AGC
, 0x1);

408 i‡(!(
	`AR_SREV_9565
(
ah
Ë&& 
ønge
 =10 && 
sy¡h_‰eq
 == 2437))

409 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING11
,

410 
AR_PHY_TIMING11_USE_SPUR_FILTER_IN_SELFCOR
, 0x1);

412 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

413 
AR_PHY_TIMING4_ENABLE_SPUR_RSSI
, 0x1);

414 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

415 
AR_PHY_SPUR_REG_SPUR_RSSI_THRESH
, 34);

416 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

417 
AR_PHY_SPUR_REG_EN_VIT_SPUR_RSSI
, 1);

419 i‡(!
	`AR_SREV_9340
(
ah
) &&

420 
	`REG_READ_FIELD
(
ah
, 
AR_PHY_MODE
,

421 
AR_PHY_MODE_DYNAMIC
) == 0x1)

422 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

423 
AR_PHY_SPUR_REG_ENABLE_NF_RSSI_SPUR_MIT
, 1);

425 
mask_ödex
 = (
‰eq_off£t
 << 4) / 5;

426 i‡(
mask_ödex
 < 0)

427 
mask_ödex
 = mask_index - 1;

429 
mask_ödex
 = mask_index & 0x7f;

431 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

432 
AR_PHY_SPUR_REG_ENABLE_MASK_PPM
, 0x1);

433 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

434 
AR_PHY_TIMING4_ENABLE_PILOT_MASK
, 0x1);

435 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING4
,

436 
AR_PHY_TIMING4_ENABLE_CHAN_MASK
, 0x1);

437 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PILOT_SPUR_MASK
,

438 
AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_A
, 
mask_ödex
);

439 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_MASK_A
,

440 
AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_IDX_A
, 
mask_ödex
);

441 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CHAN_SPUR_MASK
,

442 
AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_A
, 
mask_ödex
);

443 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PILOT_SPUR_MASK
,

444 
AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_A
, 0xc);

445 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CHAN_SPUR_MASK
,

446 
AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_A
, 0xc);

447 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_MASK_A
,

448 
AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_A
, 0xa0);

449 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_REG
,

450 
AR_PHY_SPUR_REG_MASK_RATE_CNTL
, 0xff);

451 
	}
}

453 
	$¨9003_hw_•ur_ofdm_9565
(
©h_hw
 *
ah
,

454 
‰eq_off£t
)

456 
mask_ödex
 = 0;

458 
mask_ödex
 = (
‰eq_off£t
 << 4) / 5;

459 i‡(
mask_ödex
 < 0)

460 
mask_ödex
 = mask_index - 1;

462 
mask_ödex
 = mask_index & 0x7f;

464 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PILOT_SPUR_MASK
,

465 
AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_B
,

466 
mask_ödex
);

469 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_MASK_B
,

470 
AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_IDX_A
,

471 
mask_ödex
);

473 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CHAN_SPUR_MASK
,

474 
AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_B
,

475 
mask_ödex
);

476 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_PILOT_SPUR_MASK
,

477 
AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_B
, 0xe);

478 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CHAN_SPUR_MASK
,

479 
AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_B
, 0xe);

482 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPUR_MASK_B
,

483 
AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_A
, 0xa0);

484 
	}
}

486 
	$¨9003_hw_•ur_ofdm_w‹k
(
©h_hw
 *
ah
,

487 
©h9k_ch™√l
 *
ch™
,

488 
‰eq_off£t
,

489 
ønge
,

490 
sy¡h_‰eq
)

492 
•ur_‰eq_sd
 = 0;

493 
•ur_subch™√l_sd
 = 0;

494 
•ur_dñè_pha£
 = 0;

496 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

497 i‡(
‰eq_off£t
 < 0) {

498 i‡(
	`REG_READ_FIELD
(
ah
, 
AR_PHY_GEN_CTRL
,

499 
AR_PHY_GC_DYN2040_PRI_CH
) == 0x0)

500 
•ur_subch™√l_sd
 = 1;

502 
•ur_subch™√l_sd
 = 0;

504 
•ur_‰eq_sd
 = ((
‰eq_off£t
 + 10) << 9) / 11;

507 i‡(
	`REG_READ_FIELD
(
ah
, 
AR_PHY_GEN_CTRL
,

508 
AR_PHY_GC_DYN2040_PRI_CH
) == 0x0)

509 
•ur_subch™√l_sd
 = 0;

511 
•ur_subch™√l_sd
 = 1;

513 
•ur_‰eq_sd
 = ((
‰eq_off£t
 - 10) << 9) / 11;

517 
•ur_dñè_pha£
 = (
‰eq_off£t
 << 17) / 5;

520 
•ur_subch™√l_sd
 = 0;

521 
•ur_‰eq_sd
 = (
‰eq_off£t
 << 9) /11;

522 
•ur_dñè_pha£
 = (
‰eq_off£t
 << 18) / 5;

525 
•ur_‰eq_sd
 = spur_freq_sd & 0x3ff;

526 
•ur_dñè_pha£
 = spur_delta_phase & 0xfffff;

528 
	`¨9003_hw_•ur_ofdm
(
ah
,

529 
‰eq_off£t
,

530 
•ur_‰eq_sd
,

531 
•ur_dñè_pha£
,

532 
•ur_subch™√l_sd
,

533 
ønge
, 
sy¡h_‰eq
);

534 
	}
}

537 
	$¨9003_hw_•ur_môig©e_ofdm
(
©h_hw
 *
ah
,

538 
©h9k_ch™√l
 *
ch™
)

540 
sy¡h_‰eq
;

541 
ønge
 = 10;

542 
‰eq_off£t
 = 0;

543 
mode
;

544 
u8
* 
•urCh™sPå
;

545 
i
;

546 
¨9300_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
¨9300_ìp
;

548 i‡(
	`IS_CHAN_5GHZ
(
ch™
)) {

549 
•urCh™sPå
 = &(
ìp
->
modÆHódî5G
.
•urCh™s
[0]);

550 
mode
 = 0;

553 
•urCh™sPå
 = &(
ìp
->
modÆHódî2G
.
•urCh™s
[0]);

554 
mode
 = 1;

557 i‡(
•urCh™sPå
[0] == 0)

560 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

561 
ønge
 = 19;

562 i‡(
	`REG_READ_FIELD
(
ah
, 
AR_PHY_GEN_CTRL
,

563 
AR_PHY_GC_DYN2040_PRI_CH
) == 0x0)

564 
sy¡h_‰eq
 = 
ch™
->
ch™√l
 - 10;

566 
sy¡h_‰eq
 = 
ch™
->
ch™√l
 + 10;

568 
ønge
 = 10;

569 
sy¡h_‰eq
 = 
ch™
->
ch™√l
;

572 
	`¨9003_hw_•ur_ofdm_˛ór
(
ah
);

574 
i
 = 0; i < 
AR_EEPROM_MODAL_SPURS
 && 
•urCh™sPå
[i]; i++) {

575 
‰eq_off£t
 = 
	`©h9k_hw_fbö2‰eq
(
•urCh™sPå
[
i
], 
mode
);

576 
‰eq_off£t
 -
sy¡h_‰eq
;

577 i‡(
	`abs
(
‰eq_off£t
Ë< 
ønge
) {

578 
	`¨9003_hw_•ur_ofdm_w‹k
(
ah
, 
ch™
, 
‰eq_off£t
,

579 
ønge
, 
sy¡h_‰eq
);

581 i‡(
	`AR_SREV_9565
(
ah
Ë&& (
i
 < 4)) {

582 
‰eq_off£t
 = 
	`©h9k_hw_fbö2‰eq
(
•urCh™sPå
[
i
 + 1],

583 
mode
);

584 
‰eq_off£t
 -
sy¡h_‰eq
;

585 i‡(
	`abs
(
‰eq_off£t
Ë< 
ønge
)

586 
	`¨9003_hw_•ur_ofdm_9565
(
ah
, 
‰eq_off£t
);

592 
	}
}

594 
	$¨9003_hw_•ur_môig©e
(
©h_hw
 *
ah
,

595 
©h9k_ch™√l
 *
ch™
)

597 i‡(!
	`AR_SREV_9565
(
ah
))

598 
	`¨9003_hw_•ur_môig©e_mrc_cck
(
ah
, 
ch™
);

599 
	`¨9003_hw_•ur_môig©e_ofdm
(
ah
, 
ch™
);

600 
	}
}

602 
u32
 
	$¨9003_hw_compuã_∂l_c⁄åﬁ_soc
(
©h_hw
 *
ah
,

603 
©h9k_ch™√l
 *
ch™
)

605 
u32
 
∂l
;

607 
∂l
 = 
	`SM
(0x5, 
AR_RTC_9300_SOC_PLL_REFDIV
);

609 i‡(
ch™
 && 
	`IS_CHAN_HALF_RATE
(chan))

610 
∂l
 |
	`SM
(0x1, 
AR_RTC_9300_SOC_PLL_CLKSEL
);

611 i‡(
ch™
 && 
	`IS_CHAN_QUARTER_RATE
(chan))

612 
∂l
 |
	`SM
(0x2, 
AR_RTC_9300_SOC_PLL_CLKSEL
);

614 
∂l
 |
	`SM
(0x2c, 
AR_RTC_9300_SOC_PLL_DIV_INT
);

616  
∂l
;

617 
	}
}

619 
u32
 
	$¨9003_hw_compuã_∂l_c⁄åﬁ
(
©h_hw
 *
ah
,

620 
©h9k_ch™√l
 *
ch™
)

622 
u32
 
∂l
;

624 
∂l
 = 
	`SM
(0x5, 
AR_RTC_9300_PLL_REFDIV
);

626 i‡(
ch™
 && 
	`IS_CHAN_HALF_RATE
(chan))

627 
∂l
 |
	`SM
(0x1, 
AR_RTC_9300_PLL_CLKSEL
);

628 i‡(
ch™
 && 
	`IS_CHAN_QUARTER_RATE
(chan))

629 
∂l
 |
	`SM
(0x2, 
AR_RTC_9300_PLL_CLKSEL
);

631 
∂l
 |
	`SM
(0x2c, 
AR_RTC_9300_PLL_DIV
);

633  
∂l
;

634 
	}
}

636 
	$¨9003_hw_£t_ch™√l_ªgs
(
©h_hw
 *
ah
,

637 
©h9k_ch™√l
 *
ch™
)

639 
u32
 
phymode
;

640 
u32
 
íabÀDacFifo
 = 0;

642 
íabÀDacFifo
 =

643 (
	`REG_READ
(
ah
, 
AR_PHY_GEN_CTRL
Ë& 
AR_PHY_GC_ENABLE_DAC_FIFO
);

646 
phymode
 = 
AR_PHY_GC_HT_EN
 | 
AR_PHY_GC_SHORT_GI_40
 | 
íabÀDacFifo
;

648 i‡(!
	`AR_SREV_9561
(
ah
))

649 
phymode
 |
AR_PHY_GC_SINGLE_HT_LTF1
;

652 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

653 
phymode
 |
AR_PHY_GC_DYN2040_EN
;

655 i‡(
	`IS_CHAN_HT40PLUS
(
ch™
))

656 
phymode
 |
AR_PHY_GC_DYN2040_PRI_CH
;

661 
phymode
 |
	`REG_READ
(
ah
, 
AR_PHY_GEN_CTRL
);

663 
phymode
 &~
AR_PHY_GC_GF_DETECT_EN
;

665 
	`REG_WRITE
(
ah
, 
AR_PHY_GEN_CTRL
, 
phymode
);

668 
	`©h9k_hw_£t11nmac2040
(
ah
, 
ch™
);

671 
	`REG_WRITE
(
ah
, 
AR_GTXTO
, 25 << 
AR_GTXTO_TIMEOUT_LIMIT_S
);

673 
	`REG_WRITE
(
ah
, 
AR_CST
, 0xF << 
AR_CST_TIMEOUT_LIMIT_S
);

674 
	}
}

676 
	$¨9003_hw_öô_bb
(
©h_hw
 *
ah
,

677 
©h9k_ch™√l
 *
ch™
)

679 
u32
 
sy¡hDñay
;

686 
sy¡hDñay
 = 
	`REG_READ
(
ah
, 
AR_PHY_RX_DELAY
Ë& 
AR_PHY_RX_DELAY_DELAY
;

689 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_EN
);

690 
	`©h9k_hw_sy¡h_dñay
(
ah
, 
ch™
, 
sy¡hDñay
);

691 
	}
}

693 
	$¨9003_hw_£t_chaö_masks
(
©h_hw
 *
ah
, 
u8
 
rx
, u8 
tx
)

695 i‡(
ah
->
ˇps
.
tx_chaömask
 =5 ||áh->ˇps.
rx_chaömask
 == 5)

696 
	`REG_SET_BIT
(
ah
, 
AR_PHY_ANALOG_SWAP
,

697 
AR_PHY_SWAP_ALT_CHAIN
);

699 
	`REG_WRITE
(
ah
, 
AR_PHY_RX_CHAINMASK
, 
rx
);

700 
	`REG_WRITE
(
ah
, 
AR_PHY_CAL_CHAINMASK
, 
rx
);

702 i‡((
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_APM
Ë&& (
tx
 == 0x7))

703 
tx
 = 3;

705 
	`REG_WRITE
(
ah
, 
AR_SELFGEN_MASK
, 
tx
);

706 
	}
}

711 
	$¨9003_hw_ovîride_öi
(
©h_hw
 *
ah
)

713 
u32
 
vÆ
;

720 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
, (
AR_DIAG_RX_DIS
 | 
AR_DIAG_RX_ABORT
));

729 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PCU_MISC_MODE2
Ë& (~
AR_ADHOC_MCAST_KEYID_ENABLE
);

730 
vÆ
 |
AR_AGG_WEP_ENABLE_FIX
 |

731 
AR_AGG_WEP_ENABLE
 |

732 
AR_PCU_MISC_MODE2_CFP_IGNORE
;

733 
	`REG_WRITE
(
ah
, 
AR_PCU_MISC_MODE2
, 
vÆ
);

735 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

736 
	`REG_WRITE
(
ah
, 
AR_GLB_SWREG_DISCONT_MODE
,

737 
AR_GLB_SWREG_DISCONT_EN_BT_WLAN
);

739 i‡(
	`REG_READ_FIELD
(
ah
, 
AR_PHY_TX_IQCAL_CONTROL_0
,

740 
AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
))

741 
ah
->
íabÀd_ˇls
 |
TX_IQ_CAL
;

743 
ah
->
íabÀd_ˇls
 &~
TX_IQ_CAL
;

747 i‡(
	`REG_READ
(
ah
, 
AR_PHY_CL_CAL_CTL
Ë& 
AR_PHY_CL_CAL_ENABLE
)

748 
ah
->
íabÀd_ˇls
 |
TX_CL_CAL
;

750 
ah
->
íabÀd_ˇls
 &~
TX_CL_CAL
;

752 i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9531
◊hË|| 
	`AR_SREV_9550
(ah) ||

753 
	`AR_SREV_9561
(
ah
)) {

754 i‡(
ah
->
is_˛k_25mhz
) {

755 
	`REG_WRITE
(
ah
, 
AR_RTC_DERIVED_CLK
, 0x17c << 1);

756 
	`REG_WRITE
(
ah
, 
AR_SLP32_MODE
, 0x0010f3d7);

757 
	`REG_WRITE
(
ah
, 
AR_SLP32_INC
, 0x0001e7ae);

759 
	`REG_WRITE
(
ah
, 
AR_RTC_DERIVED_CLK
, 0x261 << 1);

760 
	`REG_WRITE
(
ah
, 
AR_SLP32_MODE
, 0x0010f400);

761 
	`REG_WRITE
(
ah
, 
AR_SLP32_INC
, 0x0001e800);

763 
	`udñay
(100);

765 
	}
}

767 
	$¨9003_hw_¥og_öi
(
©h_hw
 *
ah
,

768 
¨5416IniAºay
 *
öiAº
,

769 
cﬁumn
)

771 
i
, 
ªgWrôes
 = 0;

774 i‡(!
öiAº
->
ü_¨øy
)

782 i‡(
cﬁumn
 >
öiAº
->
ü_cﬁumns
)

783 
cﬁumn
 = 1;

785 
i
 = 0; i < 
öiAº
->
ü_rows
; i++) {

786 
u32
 
ªg
 = 
	`INI_RA
(
öiAº
, 
i
, 0);

787 
u32
 
vÆ
 = 
	`INI_RA
(
öiAº
, 
i
, 
cﬁumn
);

789 
	`REG_WRITE
(
ah
, 
ªg
, 
vÆ
);

791 
	`DO_DELAY
(
ªgWrôes
);

793 
	}
}

795 
	$¨9550_hw_gë_modes_txgaö_ödex
(
©h_hw
 *
ah
,

796 
©h9k_ch™√l
 *
ch™
)

798 
ªt
;

800 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

801 i‡(
	`IS_CHAN_HT40
(
ch™
))

807 i‡(
ch™
->
ch™√l
 <= 5350)

808 
ªt
 = 1;

809 i‡((
ch™
->
ch™√l
 > 5350) && (chan->channel <= 5600))

810 
ªt
 = 3;

812 
ªt
 = 5;

814 i‡(
	`IS_CHAN_HT40
(
ch™
))

815 
ªt
++;

817  
ªt
;

818 
	}
}

820 
	$¨9561_hw_gë_modes_txgaö_ödex
(
©h_hw
 *
ah
,

821 
©h9k_ch™√l
 *
ch™
)

823 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

824 i‡(
	`IS_CHAN_HT40
(
ch™
))

831 
	}
}

833 
	$¨9003_doubÀr_fix
(
©h_hw
 *
ah
)

835 i‡(
	`AR_SREV_9300
(
ah
Ë|| 
	`AR_SREV_9580
◊hË|| 
	`AR_SREV_9550
(ah)) {

836 
	`REG_RMW
(
ah
, 
AR_PHY_65NM_CH0_RXTX2
,

837 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 |

838 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
, 0);

839 
	`REG_RMW
(
ah
, 
AR_PHY_65NM_CH1_RXTX2
,

840 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 |

841 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
, 0);

842 
	`REG_RMW
(
ah
, 
AR_PHY_65NM_CH2_RXTX2
,

843 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 |

844 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
, 0);

846 
	`udñay
(200);

848 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_65NM_CH0_RXTX2
,

849 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
);

850 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_65NM_CH1_RXTX2
,

851 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
);

852 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_65NM_CH2_RXTX2
,

853 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
);

855 
	`udñay
(1);

857 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_RXTX2
,

858 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
, 1);

859 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH1_RXTX2
,

860 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
, 1);

861 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH2_RXTX2
,

862 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
, 1);

864 
	`udñay
(200);

866 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_65NM_CH0_SYNTH12
,

867 
AR_PHY_65NM_CH0_SYNTH12_VREFMUL3
, 0xf);

869 
	`REG_RMW
(
ah
, 
AR_PHY_65NM_CH0_RXTX2
, 0,

870 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 |

871 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
);

872 
	`REG_RMW
(
ah
, 
AR_PHY_65NM_CH1_RXTX2
, 0,

873 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 |

874 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
);

875 
	`REG_RMW
(
ah
, 
AR_PHY_65NM_CH2_RXTX2
, 0,

876 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 |

877 1 << 
AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
);

879 
	}
}

881 
	$¨9003_hw_¥o˚ss_öi
(
©h_hw
 *
ah
,

882 
©h9k_ch™√l
 *
ch™
)

884 
ªgWrôes
 = 0, 
i
;

885 
u32
 
modesIndex
;

887 i‡(
	`IS_CHAN_5GHZ
(
ch™
))

888 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 2 : 1;

890 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 3 : 4;

895 
i
 = 0; i < 
ATH_INI_NUM_SPLIT
; i++) {

896 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiSOC
[
i
], 
modesIndex
);

897 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiMac
[
i
], 
modesIndex
);

898 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiBB
[
i
], 
modesIndex
);

899 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiRadio
[
i
], 
modesIndex
);

900 i‡(
i
 =
ATH_INI_POST
 && 
	`AR_SREV_9462_20_OR_LATER
(
ah
))

901 
	`¨9003_hw_¥og_öi
(
ah
,

902 &
ah
->
öi_ødio_po°_sys2™t
,

903 
modesIndex
);

906 
	`¨9003_doubÀr_fix
(
ah
);

911 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesRxGaö
, 1, 
ªgWrôes
);

913 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
)) {

917 i‡(
	`¨9003_hw_gë_rx_gaö_idx
(
ah
) == 2) {

918 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_c‹e
,

919 1, 
ªgWrôes
);

920 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_po°ambÀ
,

921 
modesIndex
, 
ªgWrôes
);

927 i‡((
	`¨9003_hw_gë_rx_gaö_idx
(
ah
) == 2) ||

928 (
	`¨9003_hw_gë_rx_gaö_idx
(
ah
) == 3)) {

929 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

930 
modesIndex
, 
ªgWrôes
);

934 i‡(
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9561
(ah))

935 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rx_gaö_bounds
, 
modesIndex
,

936 
ªgWrôes
);

938 i‡(
	`AR_SREV_9561
(
ah
Ë&& (
	`¨9003_hw_gë_rx_gaö_idx
(ah) == 0))

939 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rxgaö_x a
,

940 
modesIndex
, 
ªgWrôes
);

944 i‡(
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9531
◊hË|| 
	`AR_SREV_9561
(ah)) {

945 
modes_txgaö_ödex
 = 1;

947 i‡(
	`AR_SREV_9550
(
ah
))

948 
modes_txgaö_ödex
 = 
	`¨9550_hw_gë_modes_txgaö_ödex
(
ah
, 
ch™
);

950 i‡(
	`AR_SREV_9561
(
ah
))

951 
modes_txgaö_ödex
 =

952 
	`¨9561_hw_gë_modes_txgaö_ödex
(
ah
, 
ch™
);

954 i‡(
modes_txgaö_ödex
 < 0)

955  -
EINVAL
;

957 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesTxGaö
, 
modes_txgaö_ödex
,

958 
ªgWrôes
);

960 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesTxGaö
, 
modesIndex
, 
ªgWrôes
);

967 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

968 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesFa°Clock
,

969 
modesIndex
, 
ªgWrôes
);

974 
	`REG_WRITE_ARRAY
(&
ah
->
öiAddôi⁄Æ
, 1, 
ªgWrôes
);

979 i‡(
ch™
->
ch™√l
 == 2484)

980 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiCckfúJ≠™2484
, 1);

982 
ah
->
modes_ödex
 = 
modesIndex
;

983 
	`¨9003_hw_ovîride_öi
(
ah
);

984 
	`¨9003_hw_£t_ch™√l_ªgs
(
ah
, 
ch™
);

985 
	`¨9003_hw_£t_chaö_masks
(
ah
,áh->
rxchaömask
,áh->
txchaömask
);

986 
	`©h9k_hw_≠∂y_txpowî
(
ah
, 
ch™
, 
Ál£
);

989 
	}
}

991 
	$¨9003_hw_£t_rfmode
(
©h_hw
 *
ah
,

992 
©h9k_ch™√l
 *
ch™
)

994 
u32
 
rfMode
 = 0;

996 i‡(
ch™
 =
NULL
)

999 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

1000 
rfMode
 |
AR_PHY_MODE_DYNAMIC
;

1002 
rfMode
 |
AR_PHY_MODE_OFDM
;

1004 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

1005 
rfMode
 |(
AR_PHY_MODE_DYNAMIC
 | 
AR_PHY_MODE_DYN_CCK_DISABLE
);

1007 i‡(
rfMode
 & (
AR_PHY_MODE_QUARTER
 | 
AR_PHY_MODE_HALF
))

1008 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_FRAME_CTL
,

1009 
AR_PHY_FRAME_CTL_CF_OVERLAP_WINDOW
, 3);

1011 
	`REG_WRITE
(
ah
, 
AR_PHY_MODE
, 
rfMode
);

1012 
	}
}

1014 
	$¨9003_hw_m¨k_phy_öa˘ive
(
©h_hw
 *
ah
)

1016 
	`REG_WRITE
(
ah
, 
AR_PHY_ACTIVE
, 
AR_PHY_ACTIVE_DIS
);

1017 
	}
}

1019 
	$¨9003_hw_£t_dñè_¶›e
(
©h_hw
 *
ah
,

1020 
©h9k_ch™√l
 *
ch™
)

1022 
u32
 
c€f_sˇÀd
, 
ds_c€f_exp
, 
ds_c€f_m™
;

1023 
u32
 
˛ockMhzSˇÀd
 = 0x64000000;

1024 
ch™_˚¡îs
 
˚¡îs
;

1030 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
))

1031 
˛ockMhzSˇÀd
 = clockMhzScaled >> 1;

1032 i‡(
	`IS_CHAN_QUARTER_RATE
(
ch™
))

1033 
˛ockMhzSˇÀd
 = clockMhzScaled >> 2;

1039 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

1040 
c€f_sˇÀd
 = 
˛ockMhzSˇÀd
 / 
˚¡îs
.
sy¡h_˚¡î
;

1042 
	`©h9k_hw_gë_dñè_¶›e_vÆs
(
ah
, 
c€f_sˇÀd
, &
ds_c€f_m™
,

1043 &
ds_c€f_exp
);

1045 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING3
,

1046 
AR_PHY_TIMING3_DSC_MAN
, 
ds_c€f_m™
);

1047 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING3
,

1048 
AR_PHY_TIMING3_DSC_EXP
, 
ds_c€f_exp
);

1054 
c€f_sˇÀd
 = (9 * coef_scaled) / 10;

1056 
	`©h9k_hw_gë_dñè_¶›e_vÆs
(
ah
, 
c€f_sˇÀd
, &
ds_c€f_m™
,

1057 &
ds_c€f_exp
);

1060 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SGI_DELTA
,

1061 
AR_PHY_SGI_DSC_MAN
, 
ds_c€f_m™
);

1062 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SGI_DELTA
,

1063 
AR_PHY_SGI_DSC_EXP
, 
ds_c€f_exp
);

1064 
	}
}

1066 
boﬁ
 
	$¨9003_hw_rfbus_ªq
(
©h_hw
 *
ah
)

1068 
	`REG_WRITE
(
ah
, 
AR_PHY_RFBUS_REQ
, 
AR_PHY_RFBUS_REQ_EN
);

1069  
	`©h9k_hw_waô
(
ah
, 
AR_PHY_RFBUS_GRANT
, 
AR_PHY_RFBUS_GRANT_EN
,

1070 
AR_PHY_RFBUS_GRANT_EN
, 
AH_WAIT_TIMEOUT
);

1071 
	}
}

1077 
	$¨9003_hw_rfbus_d⁄e
(
©h_hw
 *
ah
)

1079 
u32
 
sy¡hDñay
 = 
	`REG_READ
(
ah
, 
AR_PHY_RX_DELAY
Ë& 
AR_PHY_RX_DELAY_DELAY
;

1081 
	`©h9k_hw_sy¡h_dñay
(
ah
,áh->
curch™
, 
sy¡hDñay
);

1083 
	`REG_WRITE
(
ah
, 
AR_PHY_RFBUS_REQ
, 0);

1084 
	}
}

1086 
boﬁ
 
	$¨9003_hw_™i_c⁄åﬁ
(
©h_hw
 *
ah
,

1087 
©h9k_™i_cmd
 
cmd
, 
∑øm
)

1089 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1090 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

1091 
¨5416AniSèã
 *
™iSèã
 = &
ah
->
™i
;

1092 
m1ThªshLow
, 
m2ThªshLow
;

1093 
m1Thªsh
, 
m2Thªsh
;

1094 
m2Cou¡Thr
, 
m2Cou¡ThrLow
;

1095 
m1ThªshLowExt
, 
m2ThªshLowExt
;

1096 
m1ThªshExt
, 
m2ThªshExt
;

1097 
s32
 
vÆue
, 
vÆue2
;

1099 
cmd
 & 
ah
->
™i_fun˘i⁄
) {

1100 
ATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION
:{

1108 
u32
 
⁄
 = 
∑øm
 ? 1 : 0;

1110 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

1111 
skù_ws_dë
;

1113 
m1ThªshLow
 = 
⁄
 ?

1114 
™iSèã
->
öiDef
.
m1ThªshLow
 : 
m1ThªshLow_off
;

1115 
m2ThªshLow
 = 
⁄
 ?

1116 
™iSèã
->
öiDef
.
m2ThªshLow
 : 
m2ThªshLow_off
;

1117 
m1Thªsh
 = 
⁄
 ?

1118 
™iSèã
->
öiDef
.
m1Thªsh
 : 
m1Thªsh_off
;

1119 
m2Thªsh
 = 
⁄
 ?

1120 
™iSèã
->
öiDef
.
m2Thªsh
 : 
m2Thªsh_off
;

1121 
m2Cou¡Thr
 = 
⁄
 ?

1122 
™iSèã
->
öiDef
.
m2Cou¡Thr
 : 
m2Cou¡Thr_off
;

1123 
m2Cou¡ThrLow
 = 
⁄
 ?

1124 
™iSèã
->
öiDef
.
m2Cou¡ThrLow
 : 
m2Cou¡ThrLow_off
;

1125 
m1ThªshLowExt
 = 
⁄
 ?

1126 
™iSèã
->
öiDef
.
m1ThªshLowExt
 : 
m1ThªshLowExt_off
;

1127 
m2ThªshLowExt
 = 
⁄
 ?

1128 
™iSèã
->
öiDef
.
m2ThªshLowExt
 : 
m2ThªshLowExt_off
;

1129 
m1ThªshExt
 = 
⁄
 ?

1130 
™iSèã
->
öiDef
.
m1ThªshExt
 : 
m1ThªshExt_off
;

1131 
m2ThªshExt
 = 
⁄
 ?

1132 
™iSèã
->
öiDef
.
m2ThªshExt
 : 
m2ThªshExt_off
;

1134 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_LOW
,

1135 
AR_PHY_SFCORR_LOW_M1_THRESH_LOW
,

1136 
m1ThªshLow
);

1137 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_LOW
,

1138 
AR_PHY_SFCORR_LOW_M2_THRESH_LOW
,

1139 
m2ThªshLow
);

1140 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR
,

1141 
AR_PHY_SFCORR_M1_THRESH
,

1142 
m1Thªsh
);

1143 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR
,

1144 
AR_PHY_SFCORR_M2_THRESH
,

1145 
m2Thªsh
);

1146 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR
,

1147 
AR_PHY_SFCORR_M2COUNT_THR
,

1148 
m2Cou¡Thr
);

1149 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_LOW
,

1150 
AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW
,

1151 
m2Cou¡ThrLow
);

1152 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1153 
AR_PHY_SFCORR_EXT_M1_THRESH_LOW
,

1154 
m1ThªshLowExt
);

1155 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1156 
AR_PHY_SFCORR_EXT_M2_THRESH_LOW
,

1157 
m2ThªshLowExt
);

1158 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1159 
AR_PHY_SFCORR_EXT_M1_THRESH
,

1160 
m1ThªshExt
);

1161 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SFCORR_EXT
,

1162 
AR_PHY_SFCORR_EXT_M2_THRESH
,

1163 
m2ThªshExt
);

1164 
skù_ws_dë
:

1165 i‡(
⁄
)

1166 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SFCORR_LOW
,

1167 
AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW
);

1169 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_SFCORR_LOW
,

1170 
AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW
);

1172 i‡(
⁄
 !
™iSèã
->
ofdmWókSigDëe˘
) {

1173 
	`©h_dbg
(
comm⁄
, 
ANI
,

1175 
ch™
->
ch™√l
,

1176 
™iSèã
->
ofdmWókSigDëe˘
 ?

1178 
⁄
 ? "on" : "off");

1179 i‡(
⁄
)

1180 
ah
->
°©s
.
a°_™i_ofdm⁄
++;

1182 
ah
->
°©s
.
a°_™i_ofdmoff
++;

1183 
™iSèã
->
ofdmWókSigDëe˘
 = 
⁄
;

1187 
ATH9K_ANI_FIRSTEP_LEVEL
:{

1188 
u32
 
Àvñ
 = 
∑øm
;

1190 i‡(
Àvñ
 >
	`ARRAY_SIZE
(
fú°ï_èbÀ
)) {

1191 
	`©h_dbg
(
comm⁄
, 
ANI
,

1193 
Àvñ
, 
	`ARRAY_SIZE
(
fú°ï_èbÀ
));

1194  
Ál£
;

1201 
vÆue
 = 
fú°ï_èbÀ
[
Àvñ
] -

1202 
fú°ï_èbÀ
[
ATH9K_ANI_FIRSTEP_LVL
] +

1203 
™iSèã
->
öiDef
.
fú°ï
;

1204 i‡(
vÆue
 < 
ATH9K_SIG_FIRSTEP_SETTING_MIN
)

1205 
vÆue
 = 
ATH9K_SIG_FIRSTEP_SETTING_MIN
;

1206 i‡(
vÆue
 > 
ATH9K_SIG_FIRSTEP_SETTING_MAX
)

1207 
vÆue
 = 
ATH9K_SIG_FIRSTEP_SETTING_MAX
;

1208 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_FIND_SIG
,

1209 
AR_PHY_FIND_SIG_FIRSTEP
,

1210 
vÆue
);

1216 
vÆue2
 = 
fú°ï_èbÀ
[
Àvñ
] -

1217 
fú°ï_èbÀ
[
ATH9K_ANI_FIRSTEP_LVL
] +

1218 
™iSèã
->
öiDef
.
fú°ïLow
;

1219 i‡(
vÆue2
 < 
ATH9K_SIG_FIRSTEP_SETTING_MIN
)

1220 
vÆue2
 = 
ATH9K_SIG_FIRSTEP_SETTING_MIN
;

1221 i‡(
vÆue2
 > 
ATH9K_SIG_FIRSTEP_SETTING_MAX
)

1222 
vÆue2
 = 
ATH9K_SIG_FIRSTEP_SETTING_MAX
;

1224 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_FIND_SIG_LOW
,

1225 
AR_PHY_FIND_SIG_LOW_FIRSTEP_LOW
, 
vÆue2
);

1227 i‡(
Àvñ
 !
™iSèã
->
fú°ïLevñ
) {

1228 
	`©h_dbg
(
comm⁄
, 
ANI
,

1230 
ch™
->
ch™√l
,

1231 
™iSèã
->
fú°ïLevñ
,

1232 
Àvñ
,

1233 
ATH9K_ANI_FIRSTEP_LVL
,

1234 
vÆue
,

1235 
™iSèã
->
öiDef
.
fú°ï
);

1236 
	`©h_dbg
(
comm⁄
, 
ANI
,

1238 
ch™
->
ch™√l
,

1239 
™iSèã
->
fú°ïLevñ
,

1240 
Àvñ
,

1241 
ATH9K_ANI_FIRSTEP_LVL
,

1242 
vÆue2
,

1243 
™iSèã
->
öiDef
.
fú°ïLow
);

1244 i‡(
Àvñ
 > 
™iSèã
->
fú°ïLevñ
)

1245 
ah
->
°©s
.
a°_™i_°ïup
++;

1246 i‡(
Àvñ
 < 
™iSèã
->
fú°ïLevñ
)

1247 
ah
->
°©s
.
a°_™i_°ïdown
++;

1248 
™iSèã
->
fú°ïLevñ
 = 
Àvñ
;

1252 
ATH9K_ANI_SPUR_IMMUNITY_LEVEL
:{

1253 
u32
 
Àvñ
 = 
∑øm
;

1255 i‡(
Àvñ
 >
	`ARRAY_SIZE
(
cy˝wrThr1_èbÀ
)) {

1256 
	`©h_dbg
(
comm⁄
, 
ANI
,

1258 
Àvñ
, 
	`ARRAY_SIZE
(
cy˝wrThr1_èbÀ
));

1259  
Ál£
;

1265 
vÆue
 = 
cy˝wrThr1_èbÀ
[
Àvñ
] -

1266 
cy˝wrThr1_èbÀ
[
ATH9K_ANI_SPUR_IMMUNE_LVL
] +

1267 
™iSèã
->
öiDef
.
cy˝wrThr1
;

1268 i‡(
vÆue
 < 
ATH9K_SIG_SPUR_IMM_SETTING_MIN
)

1269 
vÆue
 = 
ATH9K_SIG_SPUR_IMM_SETTING_MIN
;

1270 i‡(
vÆue
 > 
ATH9K_SIG_SPUR_IMM_SETTING_MAX
)

1271 
vÆue
 = 
ATH9K_SIG_SPUR_IMM_SETTING_MAX
;

1272 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TIMING5
,

1273 
AR_PHY_TIMING5_CYCPWR_THR1
,

1274 
vÆue
);

1281 
vÆue2
 = 
cy˝wrThr1_èbÀ
[
Àvñ
] -

1282 
cy˝wrThr1_èbÀ
[
ATH9K_ANI_SPUR_IMMUNE_LVL
] +

1283 
™iSèã
->
öiDef
.
cy˝wrThr1Ext
;

1284 i‡(
vÆue2
 < 
ATH9K_SIG_SPUR_IMM_SETTING_MIN
)

1285 
vÆue2
 = 
ATH9K_SIG_SPUR_IMM_SETTING_MIN
;

1286 i‡(
vÆue2
 > 
ATH9K_SIG_SPUR_IMM_SETTING_MAX
)

1287 
vÆue2
 = 
ATH9K_SIG_SPUR_IMM_SETTING_MAX
;

1288 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_CCA
,

1289 
AR_PHY_EXT_CYCPWR_THR1
, 
vÆue2
);

1291 i‡(
Àvñ
 !
™iSèã
->
•urImmunôyLevñ
) {

1292 
	`©h_dbg
(
comm⁄
, 
ANI
,

1294 
ch™
->
ch™√l
,

1295 
™iSèã
->
•urImmunôyLevñ
,

1296 
Àvñ
,

1297 
ATH9K_ANI_SPUR_IMMUNE_LVL
,

1298 
vÆue
,

1299 
™iSèã
->
öiDef
.
cy˝wrThr1
);

1300 
	`©h_dbg
(
comm⁄
, 
ANI
,

1302 
ch™
->
ch™√l
,

1303 
™iSèã
->
•urImmunôyLevñ
,

1304 
Àvñ
,

1305 
ATH9K_ANI_SPUR_IMMUNE_LVL
,

1306 
vÆue2
,

1307 
™iSèã
->
öiDef
.
cy˝wrThr1Ext
);

1308 i‡(
Àvñ
 > 
™iSèã
->
•urImmunôyLevñ
)

1309 
ah
->
°©s
.
a°_™i_•urup
++;

1310 i‡(
Àvñ
 < 
™iSèã
->
•urImmunôyLevñ
)

1311 
ah
->
°©s
.
a°_™i_•urdown
++;

1312 
™iSèã
->
•urImmunôyLevñ
 = 
Àvñ
;

1316 
ATH9K_ANI_MRC_CCK
:{

1321 
boﬁ
 
is_⁄
 = 
∑øm
 ? 1 : 0;

1323 i‡(
ah
->
ˇps
.
rx_chaömask
 == 1)

1326 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_MRC_CCK_CTRL
,

1327 
AR_PHY_MRC_CCK_ENABLE
, 
is_⁄
);

1328 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_MRC_CCK_CTRL
,

1329 
AR_PHY_MRC_CCK_MUX_REG
, 
is_⁄
);

1330 i‡(
is_⁄
 !
™iSèã
->
mrcCCK
) {

1331 
	`©h_dbg
(
comm⁄
, 
ANI
, "** ch %d: MRC CCK: %s=>%s\n",

1332 
ch™
->
ch™√l
,

1333 
™iSèã
->
mrcCCK
 ? "on" : "off",

1334 
is_⁄
 ? "on" : "off");

1335 i‡(
is_⁄
)

1336 
ah
->
°©s
.
a°_™i_ccklow
++;

1338 
ah
->
°©s
.
a°_™i_cckhigh
++;

1339 
™iSèã
->
mrcCCK
 = 
is_⁄
;

1344 
	`©h_dbg
(
comm⁄
, 
ANI
, "övÆid cmd %u\n", 
cmd
);

1345  
Ál£
;

1348 
	`©h_dbg
(
comm⁄
, 
ANI
,

1350 
™iSèã
->
•urImmunôyLevñ
,

1351 
™iSèã
->
ofdmWókSigDëe˘
 ? "on" : "off",

1352 
™iSèã
->
fú°ïLevñ
,

1353 
™iSèã
->
mrcCCK
 ? "on" : "off",

1354 
™iSèã
->
li°íTime
,

1355 
™iSèã
->
ofdmPhyEºCou¡
,

1356 
™iSèã
->
cckPhyEºCou¡
);

1357  
åue
;

1358 
	}
}

1360 
	$¨9003_hw_do_gënf
(
©h_hw
 *
ah
,

1361 
öt16_t
 
nÁºay
[
NUM_NF_READINGS
])

1363 
	#AR_PHY_CH_MINCCA_PWR
 0x1FF00000

	)

1364 
	#AR_PHY_CH_MINCCA_PWR_S
 20

	)

1365 
	#AR_PHY_CH_EXT_MINCCA_PWR
 0x01FF0000

	)

1366 
	#AR_PHY_CH_EXT_MINCCA_PWR_S
 16

	)

1368 
öt16_t
 
nf
;

1369 
i
;

1371 
i
 = 0; i < 
AR9300_MAX_CHAINS
; i++) {

1372 i‡(
ah
->
rxchaömask
 & 
	`BIT
(
i
)) {

1373 
nf
 = 
	`MS
(
	`REG_READ
(
ah
,áh->
nf_ªgs
[
i
]),

1374 
AR_PHY_CH_MINCCA_PWR
);

1375 
nÁºay
[
i
] = 
	`sign_exãnd32
(
nf
, 8);

1377 i‡(
	`IS_CHAN_HT40
(
ah
->
curch™
)) {

1378 
u8
 
ext_idx
 = 
AR9300_MAX_CHAINS
 + 
i
;

1380 
nf
 = 
	`MS
(
	`REG_READ
(
ah
,áh->
nf_ªgs
[
ext_idx
]),

1381 
AR_PHY_CH_EXT_MINCCA_PWR
);

1382 
nÁºay
[
ext_idx
] = 
	`sign_exãnd32
(
nf
, 8);

1386 
	}
}

1388 
	$¨9003_hw_£t_nf_limôs
(
©h_hw
 *
ah
)

1390 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9300_2GHZ
;

1391 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9300_2GHZ
;

1392 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9300_2GHZ
;

1393 
ah
->
nf_5g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9300_5GHZ
;

1394 
ah
->
nf_5g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9300_5GHZ
;

1395 
ah
->
nf_5g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9300_5GHZ
;

1397 i‡(
	`AR_SREV_9330
(
ah
))

1398 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9330_2GHZ
;

1400 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

1401 
ah
->
nf_2g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9462_2GHZ
;

1402 
ah
->
nf_2g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9462_2GHZ
;

1403 
ah
->
nf_5g
.
mö
 = 
AR_PHY_CCA_MIN_GOOD_VAL_9462_5GHZ
;

1404 
ah
->
nf_5g
.
nomöÆ
 = 
AR_PHY_CCA_NOM_VAL_9462_5GHZ
;

1406 
	}
}

1413 
	$¨9003_hw_™i_ˇche_öi_ªgs
(
©h_hw
 *
ah
)

1415 
¨5416AniSèã
 *
™iSèã
;

1416 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1417 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

1418 
©h9k_™i_deÁu…
 *
öiDef
;

1419 
u32
 
vÆ
;

1421 
™iSèã
 = &
ah
->
™i
;

1422 
öiDef
 = &
™iSèã
->iniDef;

1424 
	`©h_dbg
(
comm⁄
, 
ANI
, "ver %d.%d opmode %u chan %d Mhz\n",

1425 
ah
->
hw_vîsi⁄
.
macVîsi⁄
,

1426 
ah
->
hw_vîsi⁄
.
macRev
,

1427 
ah
->
›mode
,

1428 
ch™
->
ch™√l
);

1430 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_SFCORR
);

1431 
öiDef
->
m1Thªsh
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_M1_THRESH
);

1432 
öiDef
->
m2Thªsh
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_M2_THRESH
);

1433 
öiDef
->
m2Cou¡Thr
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_M2COUNT_THR
);

1435 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_SFCORR_LOW
);

1436 
öiDef
->
m1ThªshLow
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_LOW_M1_THRESH_LOW
);

1437 
öiDef
->
m2ThªshLow
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_LOW_M2_THRESH_LOW
);

1438 
öiDef
->
m2Cou¡ThrLow
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW
);

1440 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_SFCORR_EXT
);

1441 
öiDef
->
m1ThªshExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M1_THRESH
);

1442 
öiDef
->
m2ThªshExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M2_THRESH
);

1443 
öiDef
->
m1ThªshLowExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M1_THRESH_LOW
);

1444 
öiDef
->
m2ThªshLowExt
 = 
	`MS
(
vÆ
, 
AR_PHY_SFCORR_EXT_M2_THRESH_LOW
);

1445 
öiDef
->
fú°ï
 = 
	`REG_READ_FIELD
(
ah
,

1446 
AR_PHY_FIND_SIG
,

1447 
AR_PHY_FIND_SIG_FIRSTEP
);

1448 
öiDef
->
fú°ïLow
 = 
	`REG_READ_FIELD
(
ah
,

1449 
AR_PHY_FIND_SIG_LOW
,

1450 
AR_PHY_FIND_SIG_LOW_FIRSTEP_LOW
);

1451 
öiDef
->
cy˝wrThr1
 = 
	`REG_READ_FIELD
(
ah
,

1452 
AR_PHY_TIMING5
,

1453 
AR_PHY_TIMING5_CYCPWR_THR1
);

1454 
öiDef
->
cy˝wrThr1Ext
 = 
	`REG_READ_FIELD
(
ah
,

1455 
AR_PHY_EXT_CCA
,

1456 
AR_PHY_EXT_CYCPWR_THR1
);

1459 
™iSèã
->
•urImmunôyLevñ
 = 
ATH9K_ANI_SPUR_IMMUNE_LVL
;

1460 
™iSèã
->
fú°ïLevñ
 = 
ATH9K_ANI_FIRSTEP_LVL
;

1461 
™iSèã
->
ofdmWókSigDëe˘
 = 
åue
;

1462 
™iSèã
->
mrcCCK
 = 
åue
;

1463 
	}
}

1465 
	$¨9003_hw_£t_ød¨_∑øms
(
©h_hw
 *
ah
,

1466 
©h_hw_ød¨_c⁄f
 *
c⁄f
)

1468 
ªgWrôes
 = 0;

1469 
u32
 
ød¨_0
 = 0, 
ød¨_1
;

1471 i‡(!
c⁄f
) {

1472 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_RADAR_0
, 
AR_PHY_RADAR_0_ENA
);

1476 
ød¨_0
 |
AR_PHY_RADAR_0_ENA
 | 
AR_PHY_RADAR_0_FFT_ENA
;

1477 
ød¨_0
 |
	`SM
(
c⁄f
->
fú_powî
, 
AR_PHY_RADAR_0_FIRPWR
);

1478 
ød¨_0
 |
	`SM
(
c⁄f
->
ød¨_rssi
, 
AR_PHY_RADAR_0_RRSSI
);

1479 
ød¨_0
 |
	`SM
(
c⁄f
->
pul£_height
, 
AR_PHY_RADAR_0_HEIGHT
);

1480 
ød¨_0
 |
	`SM
(
c⁄f
->
pul£_rssi
, 
AR_PHY_RADAR_0_PRSSI
);

1481 
ød¨_0
 |
	`SM
(
c⁄f
->
pul£_öb™d
, 
AR_PHY_RADAR_0_INBAND
);

1483 
ød¨_1
 = 
	`REG_READ
(
ah
, 
AR_PHY_RADAR_1
);

1484 
ød¨_1
 &~(
AR_PHY_RADAR_1_MAXLEN
 | 
AR_PHY_RADAR_1_RELSTEP_THRESH
 |

1485 
AR_PHY_RADAR_1_RELPWR_THRESH
);

1486 
ød¨_1
 |
AR_PHY_RADAR_1_MAX_RRSSI
;

1487 
ød¨_1
 |
AR_PHY_RADAR_1_BLOCK_CHECK
;

1488 
ød¨_1
 |
	`SM
(
c⁄f
->
pul£_maxÀn
, 
AR_PHY_RADAR_1_MAXLEN
);

1489 
ød¨_1
 |
	`SM
(
c⁄f
->
pul£_öb™d_°ï
, 
AR_PHY_RADAR_1_RELSTEP_THRESH
);

1490 
ød¨_1
 |
	`SM
(
c⁄f
->
ød¨_öb™d
, 
AR_PHY_RADAR_1_RELPWR_THRESH
);

1492 
	`REG_WRITE
(
ah
, 
AR_PHY_RADAR_0
, 
ød¨_0
);

1493 
	`REG_WRITE
(
ah
, 
AR_PHY_RADAR_1
, 
ød¨_1
);

1494 i‡(
c⁄f
->
ext_ch™√l
)

1495 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RADAR_EXT
, 
AR_PHY_RADAR_EXT_ENA
);

1497 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_RADAR_EXT
, 
AR_PHY_RADAR_EXT_ENA
);

1499 i‡(
	`AR_SREV_9300
(
ah
Ë|| 
	`AR_SREV_9340
◊hË|| 
	`AR_SREV_9580
(ah)) {

1500 
	`REG_WRITE_ARRAY
(&
ah
->
öi_dfs
,

1501 
	`IS_CHAN_HT40
(
ah
->
curch™
Ë? 2 : 1, 
ªgWrôes
);

1503 
	}
}

1505 
	$¨9003_hw_£t_ød¨_c⁄f
(
©h_hw
 *
ah
)

1507 
©h_hw_ød¨_c⁄f
 *
c⁄f
 = &
ah
->
ød¨_c⁄f
;

1509 
c⁄f
->
fú_powî
 = -28;

1510 
c⁄f
->
ød¨_rssi
 = 0;

1511 
c⁄f
->
pul£_height
 = 10;

1512 
c⁄f
->
pul£_rssi
 = 15;

1513 
c⁄f
->
pul£_öb™d
 = 8;

1514 
c⁄f
->
pul£_maxÀn
 = 255;

1515 
c⁄f
->
pul£_öb™d_°ï
 = 12;

1516 
c⁄f
->
ød¨_öb™d
 = 8;

1517 
	}
}

1519 
	$¨9003_hw_™tdiv_comb_c⁄f_gë
(
©h_hw
 *
ah
,

1520 
©h_hw_™tcomb_c⁄f
 *
™tc⁄f
)

1522 
u32
 
ªgvÆ
;

1524 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

1525 
™tc⁄f
->
maö_ a_c⁄f
 = (
ªgvÆ
 & 
AR_PHY_ANT_DIV_MAIN_LNACONF
) >>

1526 
AR_PHY_ANT_DIV_MAIN_LNACONF_S
;

1527 
™tc⁄f
->
Æt_ a_c⁄f
 = (
ªgvÆ
 & 
AR_PHY_ANT_DIV_ALT_LNACONF
) >>

1528 
AR_PHY_ANT_DIV_ALT_LNACONF_S
;

1529 
™tc⁄f
->
Á°_div_büs
 = (
ªgvÆ
 & 
AR_PHY_ANT_FAST_DIV_BIAS
) >>

1530 
AR_PHY_ANT_FAST_DIV_BIAS_S
;

1532 i‡(
	`AR_SREV_9330_11
(
ah
)) {

1533 
™tc⁄f
->
 a1_ a2_swôch_dñè
 = -1;

1534 
™tc⁄f
->
 a1_ a2_dñè
 = -9;

1535 
™tc⁄f
->
div_group
 = 1;

1536 } i‡(
	`AR_SREV_9485
(
ah
)) {

1537 
™tc⁄f
->
 a1_ a2_swôch_dñè
 = -1;

1538 
™tc⁄f
->
 a1_ a2_dñè
 = -9;

1539 
™tc⁄f
->
div_group
 = 2;

1540 } i‡(
	`AR_SREV_9565
(
ah
)) {

1541 
™tc⁄f
->
 a1_ a2_swôch_dñè
 = 3;

1542 
™tc⁄f
->
 a1_ a2_dñè
 = -9;

1543 
™tc⁄f
->
div_group
 = 3;

1545 
™tc⁄f
->
 a1_ a2_swôch_dñè
 = -1;

1546 
™tc⁄f
->
 a1_ a2_dñè
 = -3;

1547 
™tc⁄f
->
div_group
 = 0;

1549 
	}
}

1551 
	$¨9003_hw_™tdiv_comb_c⁄f_£t
(
©h_hw
 *
ah
,

1552 
©h_hw_™tcomb_c⁄f
 *
™tc⁄f
)

1554 
u32
 
ªgvÆ
;

1556 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

1557 
ªgvÆ
 &~(
AR_PHY_ANT_DIV_MAIN_LNACONF
 |

1558 
AR_PHY_ANT_DIV_ALT_LNACONF
 |

1559 
AR_PHY_ANT_FAST_DIV_BIAS
 |

1560 
AR_PHY_ANT_DIV_MAIN_GAINTB
 |

1561 
AR_PHY_ANT_DIV_ALT_GAINTB
);

1562 
ªgvÆ
 |((
™tc⁄f
->
maö_ a_c⁄f
 << 
AR_PHY_ANT_DIV_MAIN_LNACONF_S
)

1563 & 
AR_PHY_ANT_DIV_MAIN_LNACONF
);

1564 
ªgvÆ
 |((
™tc⁄f
->
Æt_ a_c⁄f
 << 
AR_PHY_ANT_DIV_ALT_LNACONF_S
)

1565 & 
AR_PHY_ANT_DIV_ALT_LNACONF
);

1566 
ªgvÆ
 |((
™tc⁄f
->
Á°_div_büs
 << 
AR_PHY_ANT_FAST_DIV_BIAS_S
)

1567 & 
AR_PHY_ANT_FAST_DIV_BIAS
);

1568 
ªgvÆ
 |((
™tc⁄f
->
maö_gaötb
 << 
AR_PHY_ANT_DIV_MAIN_GAINTB_S
)

1569 & 
AR_PHY_ANT_DIV_MAIN_GAINTB
);

1570 
ªgvÆ
 |((
™tc⁄f
->
Æt_gaötb
 << 
AR_PHY_ANT_DIV_ALT_GAINTB_S
)

1571 & 
AR_PHY_ANT_DIV_ALT_GAINTB
);

1573 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

1574 
	}
}

1576 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


1578 
	$¨9003_hw_£t_bt_™t_divîsôy
(
©h_hw
 *
ah
, 
boﬁ
 
íabÀ
)

1580 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

1581 
u8
 
™t_div_˘l1
;

1582 
u32
 
ªgvÆ
;

1584 i‡(!
	`AR_SREV_9485
(
ah
Ë&& !
	`AR_SREV_9565
(ah))

1587 i‡(
	`AR_SREV_9485
(
ah
)) {

1588 
ªgvÆ
 = 
	`¨9003_hw_™t_˘æ_comm⁄_2_gë
(
ah
,

1589 
	`IS_CHAN_2GHZ
(
ah
->
curch™
));

1590 i‡(
íabÀ
) {

1591 
ªgvÆ
 &~
AR_SWITCH_TABLE_COM2_ALL
;

1592 
ªgvÆ
 |
ah
->
c⁄fig
.
™t_˘æ_comm2g_swôch_íabÀ
;

1594 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SWITCH_COM_2
,

1595 
AR_SWITCH_TABLE_COM2_ALL
, 
ªgvÆ
);

1598 
™t_div_˘l1
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_ANT_DIV_CTL1
);

1604 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

1605 
ªgvÆ
 &(~
AR_ANT_DIV_CTRL_ALL
);

1606 
ªgvÆ
 |(
™t_div_˘l1
 & 0x3fË<< 
AR_ANT_DIV_CTRL_ALL_S
;

1607 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

1609 i‡(
	`AR_SREV_9485_11_OR_LATER
(
ah
)) {

1613 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

1614 
ªgvÆ
 &~
AR_PHY_ANT_DIV_LNADIV
;

1615 
ªgvÆ
 |((
™t_div_˘l1
 >> 6Ë& 0x1Ë<< 
AR_PHY_ANT_DIV_LNADIV_S
;

1616 i‡(
íabÀ
)

1617 
ªgvÆ
 |
AR_ANT_DIV_ENABLE
;

1619 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

1624 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_DETECT
);

1625 
ªgvÆ
 &~
AR_FAST_DIV_ENABLE
;

1626 
ªgvÆ
 |((
™t_div_˘l1
 >> 7Ë& 0x1Ë<< 
AR_FAST_DIV_ENABLE_S
;

1627 i‡(
íabÀ
)

1628 
ªgvÆ
 |
AR_FAST_DIV_ENABLE
;

1630 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_DETECT
, 
ªgvÆ
);

1632 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
) {

1633 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

1634 
ªgvÆ
 &(~(
AR_PHY_ANT_DIV_MAIN_LNACONF
 |

1635 
AR_PHY_ANT_DIV_ALT_LNACONF
 |

1636 
AR_PHY_ANT_DIV_ALT_GAINTB
 |

1637 
AR_PHY_ANT_DIV_MAIN_GAINTB
));

1642 
ªgvÆ
 |(
ATH_ANT_DIV_COMB_LNA1
 <<

1643 
AR_PHY_ANT_DIV_MAIN_LNACONF_S
);

1644 
ªgvÆ
 |(
ATH_ANT_DIV_COMB_LNA2
 <<

1645 
AR_PHY_ANT_DIV_ALT_LNACONF_S
);

1646 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

1648 } i‡(
	`AR_SREV_9565
(
ah
)) {

1649 i‡(
íabÀ
) {

1650 
	`REG_SET_BIT
(
ah
, 
AR_PHY_MC_GAIN_CTRL
,

1651 
AR_ANT_DIV_ENABLE
);

1652 
	`REG_SET_BIT
(
ah
, 
AR_PHY_MC_GAIN_CTRL
,

1653 (1 << 
AR_PHY_ANT_SW_RX_PROT_S
));

1654 
	`REG_SET_BIT
(
ah
, 
AR_PHY_CCK_DETECT
,

1655 
AR_FAST_DIV_ENABLE
);

1656 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RESTART
,

1657 
AR_PHY_RESTART_ENABLE_DIV_M2FLAG
);

1658 
	`REG_SET_BIT
(
ah
, 
AR_BTCOEX_WL_LNADIV
,

1659 
AR_BTCOEX_WL_LNADIV_FORCE_ON
);

1661 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_MC_GAIN_CTRL
,

1662 
AR_ANT_DIV_ENABLE
);

1663 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_MC_GAIN_CTRL
,

1664 (1 << 
AR_PHY_ANT_SW_RX_PROT_S
));

1665 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_CCK_DETECT
,

1666 
AR_FAST_DIV_ENABLE
);

1667 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_RESTART
,

1668 
AR_PHY_RESTART_ENABLE_DIV_M2FLAG
);

1669 
	`REG_CLR_BIT
(
ah
, 
AR_BTCOEX_WL_LNADIV
,

1670 
AR_BTCOEX_WL_LNADIV_FORCE_ON
);

1672 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MC_GAIN_CTRL
);

1673 
ªgvÆ
 &~(
AR_PHY_ANT_DIV_MAIN_LNACONF
 |

1674 
AR_PHY_ANT_DIV_ALT_LNACONF
 |

1675 
AR_PHY_ANT_DIV_MAIN_GAINTB
 |

1676 
AR_PHY_ANT_DIV_ALT_GAINTB
);

1677 
ªgvÆ
 |(
ATH_ANT_DIV_COMB_LNA1
 <<

1678 
AR_PHY_ANT_DIV_MAIN_LNACONF_S
);

1679 
ªgvÆ
 |(
ATH_ANT_DIV_COMB_LNA2
 <<

1680 
AR_PHY_ANT_DIV_ALT_LNACONF_S
);

1681 
	`REG_WRITE
(
ah
, 
AR_PHY_MC_GAIN_CTRL
, 
ªgvÆ
);

1684 
	}
}

1688 
	$¨9003_hw_Á°_ch™_ch™ge
(
©h_hw
 *
ah
,

1689 
©h9k_ch™√l
 *
ch™
,

1690 
u8
 *
öi_ªlﬂded
)

1692 
ªgWrôes
 = 0;

1693 
u32
 
modesIndex
, 
txgaö_ödex
;

1695 i‡(
	`IS_CHAN_5GHZ
(
ch™
))

1696 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 2 : 1;

1698 
modesIndex
 = 
	`IS_CHAN_HT40
(
ch™
) ? 3 : 4;

1700 
txgaö_ödex
 = 
	`AR_SREV_9531
(
ah
Ë? 1 : 
modesIndex
;

1702 i‡(
modesIndex
 =
ah
->
modes_ödex
) {

1703 *
öi_ªlﬂded
 = 
Ál£
;

1704 
£t_rfmode
;

1707 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiSOC
[
ATH_INI_POST
], 
modesIndex
);

1708 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiMac
[
ATH_INI_POST
], 
modesIndex
);

1709 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiBB
[
ATH_INI_POST
], 
modesIndex
);

1710 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiRadio
[
ATH_INI_POST
], 
modesIndex
);

1712 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
))

1713 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öi_ødio_po°_sys2™t
,

1714 
modesIndex
);

1716 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesTxGaö
, 
txgaö_ödex
, 
ªgWrôes
);

1718 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
)) {

1722 i‡(
	`¨9003_hw_gë_rx_gaö_idx
(
ah
) == 2) {

1723 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_c‹e
,

1724 1, 
ªgWrôes
);

1725 
	`REG_WRITE_ARRAY
(&
ah
->
öi_modes_rxgaö_bb_po°ambÀ
,

1726 
modesIndex
, 
ªgWrôes
);

1734 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

1735 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesFa°Clock
, 
modesIndex
, 
ªgWrôes
);

1737 i‡(
	`AR_SREV_9565
(
ah
))

1738 
	`REG_WRITE_ARRAY
(&
ah
->
öiModesFa°Clock
, 1, 
ªgWrôes
);

1743 i‡(
ch™
->
ch™√l
 == 2484)

1744 
	`¨9003_hw_¥og_öi
(
ah
, &ah->
öiCckfúJ≠™2484
, 1);

1746 
ah
->
modes_ödex
 = 
modesIndex
;

1747 *
öi_ªlﬂded
 = 
åue
;

1749 
£t_rfmode
:

1750 
	`¨9003_hw_£t_rfmode
(
ah
, 
ch™
);

1752 
	}
}

1754 
	$¨9003_hw_•e˘øl_sˇn_c⁄fig
(
©h_hw
 *
ah
,

1755 
©h_•ec_sˇn
 *
∑øm
)

1757 
u8
 
cou¡
;

1759 i‡(!
∑øm
->
íabÀd
) {

1760 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1761 
AR_PHY_SPECTRAL_SCAN_ENABLE
);

1765 
	`REG_SET_BIT
(
ah
, 
AR_PHY_RADAR_0
, 
AR_PHY_RADAR_0_FFT_ENA
);

1766 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
, 
AR_PHY_SPECTRAL_SCAN_ENABLE
);

1772 
cou¡
 = 
∑øm
->count;

1773 i‡(
∑øm
->
ídÀss
)

1774 
cou¡
 = 0;

1775 i‡(
∑øm
->
cou¡
 == 0)

1776 
cou¡
 = 1;

1778 i‡(
∑øm
->
sh‹t_ª≥©
)

1779 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1780 
AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT
);

1782 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1783 
AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT
);

1785 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1786 
AR_PHY_SPECTRAL_SCAN_COUNT
, 
cou¡
);

1787 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1788 
AR_PHY_SPECTRAL_SCAN_PERIOD
, 
∑øm
->
≥riod
);

1789 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1790 
AR_PHY_SPECTRAL_SCAN_FFT_PERIOD
, 
∑øm
->
f·_≥riod
);

1793 
	}
}

1795 
	$¨9003_hw_•e˘øl_sˇn_åiggî
(
©h_hw
 *
ah
)

1798 
	`REG_SET_BIT
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1799 
AR_PHY_SPECTRAL_SCAN_ACTIVE
);

1800 
	}
}

1802 
	$¨9003_hw_•e˘øl_sˇn_waô
(
©h_hw
 *
ah
)

1804 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1807 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_SPECTRAL_SCAN
,

1808 
AR_PHY_SPECTRAL_SCAN_ACTIVE
,

1809 0, 
AH_WAIT_TIMEOUT
)) {

1810 
	`©h_îr
(
comm⁄
, "spectral scan wait failed\n");

1813 
	}
}

1815 
	$¨9003_hw_tx99_°¨t
(
©h_hw
 *
ah
, 
u32
 
qnum
)

1817 
	`REG_SET_BIT
(
ah
, 
AR_PHY_TEST
, 
PHY_AGC_CLR
);

1818 
	`REG_SET_BIT
(
ah
, 0x9864, 0x7f000);

1819 
	`REG_SET_BIT
(
ah
, 0x9924, 0x7f00fe);

1820 
	`REG_CLR_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_RX_DIS
);

1821 
	`REG_WRITE
(
ah
, 
AR_CR
, 
AR_CR_RXD
);

1822 
	`REG_WRITE
(
ah
, 
	`AR_DLCL_IFS
(
qnum
), 0);

1823 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_SIFS
, 20);

1824 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_EIFS
, 20);

1825 
	`REG_WRITE
(
ah
, 
AR_TIME_OUT
, 0x00000400);

1826 
	`REG_WRITE
(
ah
, 
	`AR_DRETRY_LIMIT
(
qnum
), 0xffffffff);

1827 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
qnum
), 
AR_Q_MISC_DCU_EARLY_TERM_REQ
);

1828 
	}
}

1830 
	$¨9003_hw_tx99_°›
(
©h_hw
 *
ah
)

1832 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_TEST
, 
PHY_AGC_CLR
);

1833 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_RX_DIS
);

1834 
	}
}

1836 
	$¨9003_hw_tx99_£t_txpowî
(
©h_hw
 *
ah
, 
u8
 
txpowî
)

1838 
s16
 
p_pwr_¨øy
[
¨9300R©eSize
] = { 0 };

1839 
i
;

1841 i‡(
txpowî
 <
MAX_RATE_POWER
) {

1842 
i
 = 0; i < 
¨9300R©eSize
; i++)

1843 
p_pwr_¨øy
[
i
] = 
txpowî
;

1845 
i
 = 0; i < 
¨9300R©eSize
; i++)

1846 
p_pwr_¨øy
[
i
] = 
MAX_RATE_POWER
;

1849 
	`REG_WRITE
(
ah
, 0xa458, 0);

1851 
	`REG_WRITE
(
ah
, 0xa3c0,

1852 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 24) |

1853 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 16) |

1854 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 8) |

1855 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 0));

1856 
	`REG_WRITE
(
ah
, 0xa3c4,

1857 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_54
], 24) |

1858 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_48
], 16) |

1859 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_36
], 8) |

1860 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_6_24
], 0));

1861 
	`REG_WRITE
(
ah
, 0xa3c8,

1862 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_1L_5L
], 24) |

1863 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_1L_5L
], 16) |

1864 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_1L_5L
], 0));

1865 
	`REG_WRITE
(
ah
, 0xa3cc,

1866 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_11S
], 24) |

1867 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_11L
], 16) |

1868 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_5S
], 8) |

1869 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_LEGACY_1L_5L
], 0));

1870 
	`REG_WRITE
(
ah
, 0xa3d0,

1871 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_5
], 24) |

1872 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_4
], 16) |

1873 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_1_3_9_11_17_19
], 8)|

1874 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_0_8_16
], 0));

1875 
	`REG_WRITE
(
ah
, 0xa3d4,

1876 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_13
], 24) |

1877 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_12
], 16) |

1878 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_7
], 8) |

1879 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_6
], 0));

1880 
	`REG_WRITE
(
ah
, 0xa3e4,

1881 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_21
], 24) |

1882 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_20
], 16) |

1883 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_15
], 8) |

1884 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_14
], 0));

1885 
	`REG_WRITE
(
ah
, 0xa3e8,

1886 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_23
], 24) |

1887 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_22
], 16) |

1888 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_23
], 8) |

1889 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT20_22
], 0));

1890 
	`REG_WRITE
(
ah
, 0xa3d8,

1891 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_5
], 24) |

1892 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_4
], 16) |

1893 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_1_3_9_11_17_19
], 8) |

1894 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_0_8_16
], 0));

1895 
	`REG_WRITE
(
ah
, 0xa3dc,

1896 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_13
], 24) |

1897 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_12
], 16) |

1898 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_7
], 8) |

1899 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_6
], 0));

1900 
	`REG_WRITE
(
ah
, 0xa3ec,

1901 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_21
], 24) |

1902 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_20
], 16) |

1903 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_15
], 8) |

1904 
	`ATH9K_POW_SM
(
p_pwr_¨øy
[
ALL_TARGET_HT40_14
], 0));

1905 
	}
}

1907 
	$¨9003_hw_öô_txpowî_cck
(
©h_hw
 *
ah
, 
u8
 *
øã_¨øy
)

1909 
ah
->
tx_powî
[0] = 
øã_¨øy
[
ALL_TARGET_LEGACY_1L_5L
];

1910 
ah
->
tx_powî
[1] = 
øã_¨øy
[
ALL_TARGET_LEGACY_1L_5L
];

1911 
ah
->
tx_powî
[2] = 
	`mö
(
øã_¨øy
[
ALL_TARGET_LEGACY_1L_5L
],

1912 
øã_¨øy
[
ALL_TARGET_LEGACY_5S
]);

1913 
ah
->
tx_powî
[3] = 
	`mö
(
øã_¨øy
[
ALL_TARGET_LEGACY_11L
],

1914 
øã_¨øy
[
ALL_TARGET_LEGACY_11S
]);

1915 
	}
}

1917 
	$¨9003_hw_öô_txpowî_ofdm
(
©h_hw
 *
ah
, 
u8
 *
øã_¨øy
,

1918 
off£t
)

1920 
i
, 
j
;

1922 
i
 = 
off£t
; i < off£à+ 
AR9300_OFDM_RATES
; i++) {

1924 
j
 = 
ofdm2pwr
[
i
 - 
off£t
];

1925 
ah
->
tx_powî
[
i
] = 
øã_¨øy
[
j
];

1927 
	}
}

1929 
	$¨9003_hw_öô_txpowî_ht
(
©h_hw
 *
ah
, 
u8
 *
øã_¨øy
,

1930 
ss_off£t
, 
ds_off£t
,

1931 
ts_off£t
, 
boﬁ
 
is_40
)

1933 
i
, 
j
, 
mcs_idx
 = 0;

1934 c⁄° 
u8
 *
mcs2pwr
 = (
is_40
Ë? 
mcs2pwr_ht40
 : 
mcs2pwr_ht20
;

1936 
i
 = 
ss_off£t
; i < ss_off£à+ 
AR9300_HT_SS_RATES
; i++) {

1937 
j
 = 
mcs2pwr
[
mcs_idx
];

1938 
ah
->
tx_powî
[
i
] = 
øã_¨øy
[
j
];

1939 
mcs_idx
++;

1942 
i
 = 
ds_off£t
; i < ds_off£à+ 
AR9300_HT_DS_RATES
; i++) {

1943 
j
 = 
mcs2pwr
[
mcs_idx
];

1944 
ah
->
tx_powî
[
i
] = 
øã_¨øy
[
j
];

1945 
mcs_idx
++;

1948 
i
 = 
ts_off£t
; i <Ås_off£à+ 
AR9300_HT_TS_RATES
; i++) {

1949 
j
 = 
mcs2pwr
[
mcs_idx
];

1950 
ah
->
tx_powî
[
i
] = 
øã_¨øy
[
j
];

1951 
mcs_idx
++;

1953 
	}
}

1955 
	$¨9003_hw_öô_txpowî_°bc
(
©h_hw
 *
ah
, 
ss_off£t
,

1956 
ds_off£t
, 
ts_off£t
)

1958 
	`mem˝y
(&
ah
->
tx_powî_°bc
[
ss_off£t
], &ah->
tx_powî
[ss_offset],

1959 
AR9300_HT_SS_RATES
);

1960 
	`mem˝y
(&
ah
->
tx_powî_°bc
[
ds_off£t
], &ah->
tx_powî
[ds_offset],

1961 
AR9300_HT_DS_RATES
);

1962 
	`mem˝y
(&
ah
->
tx_powî_°bc
[
ts_off£t
], &ah->
tx_powî
[ts_offset],

1963 
AR9300_HT_TS_RATES
);

1964 
	}
}

1966 
	$¨9003_hw_öô_øã_txpowî
(
©h_hw
 *
ah
, 
u8
 *
øã_¨øy
,

1967 
©h9k_ch™√l
 *
ch™
)

1969 i‡(
	`IS_CHAN_5GHZ
(
ch™
)) {

1970 
	`¨9003_hw_öô_txpowî_ofdm
(
ah
, 
øã_¨øy
,

1971 
AR9300_11NA_OFDM_SHIFT
);

1972 i‡(
	`IS_CHAN_HT20
(
ch™
Ë|| 
	`IS_CHAN_HT40
(chan)) {

1973 
	`¨9003_hw_öô_txpowî_ht
(
ah
, 
øã_¨øy
,

1974 
AR9300_11NA_HT_SS_SHIFT
,

1975 
AR9300_11NA_HT_DS_SHIFT
,

1976 
AR9300_11NA_HT_TS_SHIFT
,

1977 
	`IS_CHAN_HT40
(
ch™
));

1978 
	`¨9003_hw_öô_txpowî_°bc
(
ah
,

1979 
AR9300_11NA_HT_SS_SHIFT
,

1980 
AR9300_11NA_HT_DS_SHIFT
,

1981 
AR9300_11NA_HT_TS_SHIFT
);

1984 
	`¨9003_hw_öô_txpowî_cck
(
ah
, 
øã_¨øy
);

1985 
	`¨9003_hw_öô_txpowî_ofdm
(
ah
, 
øã_¨øy
,

1986 
AR9300_11NG_OFDM_SHIFT
);

1987 i‡(
	`IS_CHAN_HT20
(
ch™
Ë|| 
	`IS_CHAN_HT40
(chan)) {

1988 
	`¨9003_hw_öô_txpowî_ht
(
ah
, 
øã_¨øy
,

1989 
AR9300_11NG_HT_SS_SHIFT
,

1990 
AR9300_11NG_HT_DS_SHIFT
,

1991 
AR9300_11NG_HT_TS_SHIFT
,

1992 
	`IS_CHAN_HT40
(
ch™
));

1993 
	`¨9003_hw_öô_txpowî_°bc
(
ah
,

1994 
AR9300_11NG_HT_SS_SHIFT
,

1995 
AR9300_11NG_HT_DS_SHIFT
,

1996 
AR9300_11NG_HT_TS_SHIFT
);

1999 
	}
}

2001 
	$¨9003_hw_©èch_phy_›s
(
©h_hw
 *
ah
)

2003 
©h_hw_¥iv©e_›s
 *
¥iv_›s
 = 
	`©h9k_hw_¥iv©e_›s
(
ah
);

2004 
©h_hw_›s
 *
›s
 = 
	`©h9k_hw_›s
(
ah
);

2005 c⁄° 
u32
 
¨9300_cˇ_ªgs
[6] = {

2006 
AR_PHY_CCA_0
,

2007 
AR_PHY_CCA_1
,

2008 
AR_PHY_CCA_2
,

2009 
AR_PHY_EXT_CCA
,

2010 
AR_PHY_EXT_CCA_1
,

2011 
AR_PHY_EXT_CCA_2
,

2014 
¥iv_›s
->
rf_£t_‰eq
 = 
¨9003_hw_£t_ch™√l
;

2015 
¥iv_›s
->
•ur_môig©e_‰eq
 = 
¨9003_hw_•ur_môig©e
;

2017 i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊hË|| 
	`AR_SREV_9531
(ah) ||

2018 
	`AR_SREV_9561
(
ah
))

2019 
¥iv_›s
->
compuã_∂l_c⁄åﬁ
 = 
¨9003_hw_compuã_∂l_c⁄åﬁ_soc
;

2021 
¥iv_›s
->
compuã_∂l_c⁄åﬁ
 = 
¨9003_hw_compuã_∂l_c⁄åﬁ
;

2023 
¥iv_›s
->
£t_ch™√l_ªgs
 = 
¨9003_hw_£t_ch™√l_ªgs
;

2024 
¥iv_›s
->
öô_bb
 = 
¨9003_hw_öô_bb
;

2025 
¥iv_›s
->
¥o˚ss_öi
 = 
¨9003_hw_¥o˚ss_öi
;

2026 
¥iv_›s
->
£t_rfmode
 = 
¨9003_hw_£t_rfmode
;

2027 
¥iv_›s
->
m¨k_phy_öa˘ive
 = 
¨9003_hw_m¨k_phy_öa˘ive
;

2028 
¥iv_›s
->
£t_dñè_¶›e
 = 
¨9003_hw_£t_dñè_¶›e
;

2029 
¥iv_›s
->
rfbus_ªq
 = 
¨9003_hw_rfbus_ªq
;

2030 
¥iv_›s
->
rfbus_d⁄e
 = 
¨9003_hw_rfbus_d⁄e
;

2031 
¥iv_›s
->
™i_c⁄åﬁ
 = 
¨9003_hw_™i_c⁄åﬁ
;

2032 
¥iv_›s
->
do_gënf
 = 
¨9003_hw_do_gënf
;

2033 
¥iv_›s
->
™i_ˇche_öi_ªgs
 = 
¨9003_hw_™i_ˇche_öi_ªgs
;

2034 
¥iv_›s
->
£t_ød¨_∑øms
 = 
¨9003_hw_£t_ød¨_∑øms
;

2035 
¥iv_›s
->
Á°_ch™_ch™ge
 = 
¨9003_hw_Á°_ch™_ch™ge
;

2037 
›s
->
™tdiv_comb_c⁄f_gë
 = 
¨9003_hw_™tdiv_comb_c⁄f_gë
;

2038 
›s
->
™tdiv_comb_c⁄f_£t
 = 
¨9003_hw_™tdiv_comb_c⁄f_£t
;

2039 
›s
->
•e˘øl_sˇn_c⁄fig
 = 
¨9003_hw_•e˘øl_sˇn_c⁄fig
;

2040 
›s
->
•e˘øl_sˇn_åiggî
 = 
¨9003_hw_•e˘øl_sˇn_åiggî
;

2041 
›s
->
•e˘øl_sˇn_waô
 = 
¨9003_hw_•e˘øl_sˇn_waô
;

2043 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


2044 
›s
->
£t_bt_™t_divîsôy
 = 
¨9003_hw_£t_bt_™t_divîsôy
;

2046 
›s
->
tx99_°¨t
 = 
¨9003_hw_tx99_°¨t
;

2047 
›s
->
tx99_°›
 = 
¨9003_hw_tx99_°›
;

2048 
›s
->
tx99_£t_txpowî
 = 
¨9003_hw_tx99_£t_txpowî
;

2050 
	`¨9003_hw_£t_nf_limôs
(
ah
);

2051 
	`¨9003_hw_£t_ød¨_c⁄f
(
ah
);

2052 
	`mem˝y
(
ah
->
nf_ªgs
, 
¨9300_cˇ_ªgs
, (ah->nf_regs));

2053 
	}
}

2080 
boﬁ
 
	$¨9003_hw_bb_w©chdog_check
(
©h_hw
 *
ah
)

2082 
u32
 
vÆ
;

2084 
ah
->
bb_w©chdog_œ°_°©us
) {

2086 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_RADAR_0
);

2087 
vÆ
 &(~
AR_PHY_RADAR_0_FIRPWR
);

2088 
vÆ
 |
	`SM
(0x7f, 
AR_PHY_RADAR_0_FIRPWR
);

2089 
	`REG_WRITE
(
ah
, 
AR_PHY_RADAR_0
, 
vÆ
);

2090 
	`udñay
(1);

2091 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_RADAR_0
);

2092 
vÆ
 &~
AR_PHY_RADAR_0_FIRPWR
;

2093 
vÆ
 |
	`SM
(
AR9300_DFS_FIRPWR
, 
AR_PHY_RADAR_0_FIRPWR
);

2094 
	`REG_WRITE
(
ah
, 
AR_PHY_RADAR_0
, 
vÆ
);

2096  
Ál£
;

2098  
Ál£
;

2101  
åue
;

2103 i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9531
(ah))

2104  
Ál£
;

2106  
åue
;

2112  
åue
;

2114 
	}
}

2115 
EXPORT_SYMBOL
(
¨9003_hw_bb_w©chdog_check
);

2117 
	$¨9003_hw_bb_w©chdog_c⁄fig
(
©h_hw
 *
ah
)

2119 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2120 
u32
 
idÀ_tmo_ms
 = 
ah
->
bb_w©chdog_timeout_ms
;

2121 
u32
 
vÆ
, 
idÀ_cou¡
;

2123 i‡(!
idÀ_tmo_ms
) {

2125 
	`REG_WRITE
(
ah
, 
AR_PHY_WATCHDOG_CTL_2
,

2126 
	`REG_READ
(
ah
, 
AR_PHY_WATCHDOG_CTL_2
) &

2127 ~(
AR_PHY_WATCHDOG_RST_ENABLE
 |

2128 
AR_PHY_WATCHDOG_IRQ_ENABLE
));

2131 
	`REG_WRITE
(
ah
, 
AR_PHY_WATCHDOG_CTL_1
,

2132 
	`REG_READ
(
ah
, 
AR_PHY_WATCHDOG_CTL_1
) &

2133 ~(
AR_PHY_WATCHDOG_NON_IDLE_ENABLE
 |

2134 
AR_PHY_WATCHDOG_IDLE_ENABLE
));

2136 
	`©h_dbg
(
comm⁄
, 
RESET
, "Disabled BB Watchdog\n");

2141 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_WATCHDOG_CTL_2
Ë& 
AR_PHY_WATCHDOG_CNTL2_MASK
;

2142 
	`REG_WRITE
(
ah
, 
AR_PHY_WATCHDOG_CTL_2
,

2143 (
vÆ
 | 
AR_PHY_WATCHDOG_IRQ_ENABLE
) &

2144 ~
AR_PHY_WATCHDOG_RST_ENABLE
);

2147 i‡(
idÀ_tmo_ms
 > 10000)

2148 
idÀ_tmo_ms
 = 10000;

2159 
idÀ_cou¡
 = (100 * 
idÀ_tmo_ms
) / 74;

2160 i‡(
ah
->
curch™
 && 
	`IS_CHAN_HT40
(ah->curchan))

2161 
idÀ_cou¡
 = (100 * 
idÀ_tmo_ms
) / 37;

2167 
	`REG_WRITE
(
ah
, 
AR_PHY_WATCHDOG_CTL_1
,

2168 
AR_PHY_WATCHDOG_NON_IDLE_ENABLE
 |

2169 
AR_PHY_WATCHDOG_IDLE_MASK
 |

2170 (
AR_PHY_WATCHDOG_NON_IDLE_MASK
 & (
idÀ_cou¡
 << 2)));

2172 
	`©h_dbg
(
comm⁄
, 
RESET
, "Enabled BB WatchdogÅimeout (%u ms)\n",

2173 
idÀ_tmo_ms
);

2174 
	}
}

2176 
	$¨9003_hw_bb_w©chdog_ªad
(
©h_hw
 *
ah
)

2182 
ah
->
bb_w©chdog_œ°_°©us
 = 
	`REG_READ
◊h, 
AR_PHY_WATCHDOG_STATUS
);

2188 
	`REG_WRITE
(
ah
, 
AR_PHY_WATCHDOG_STATUS
,

2189 
ah
->
bb_w©chdog_œ°_°©us
 & ~
AR_PHY_WATCHDOG_STATUS_CLR
);

2190 
	}
}

2192 
	$¨9003_hw_bb_w©chdog_dbg_öfo
(
©h_hw
 *
ah
)

2194 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2195 
u32
 
°©us
;

2197 i‡(
	`likñy
(!(
comm⁄
->
debug_mask
 & 
ATH_DBG_RESET
)))

2200 
°©us
 = 
ah
->
bb_w©chdog_œ°_°©us
;

2201 
	`©h_dbg
(
comm⁄
, 
RESET
,

2202 "\n===BB upd©e: BB sètus=0x%08x ====\n", 
°©us
);

2203 
	`©h_dbg
(
comm⁄
, 
RESET
,

2205 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_INFO
),

2206 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_DET_HANG
),

2207 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_RADAR_SM
),

2208 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_RX_OFDM_SM
),

2209 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_RX_CCK_SM
),

2210 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_TX_OFDM_SM
),

2211 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_TX_CCK_SM
),

2212 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_AGC_SM
),

2213 
	`MS
(
°©us
, 
AR_PHY_WATCHDOG_SRCH_SM
));

2215 
	`©h_dbg
(
comm⁄
, 
RESET
, "** BB WD cntl: cntl1=0x%08x cntl2=0x%08x **\n",

2216 
	`REG_READ
(
ah
, 
AR_PHY_WATCHDOG_CTL_1
),

2217 
	`REG_READ
(
ah
, 
AR_PHY_WATCHDOG_CTL_2
));

2218 
	`©h_dbg
(
comm⁄
, 
RESET
, "** BB mode: BB_gen_controls=0x%08x **\n",

2219 
	`REG_READ
(
ah
, 
AR_PHY_GEN_CTRL
));

2221 
	#PCT
(
_fõld
Ë(
comm⁄
->
cc_survey
._fõld * 100 / comm⁄->cc_survey.
cy˛es
)

	)

2222 i‡(
comm⁄
->
cc_survey
.
cy˛es
)

2223 
	`©h_dbg
(
comm⁄
, 
RESET
,

2225 
	`PCT
(
rx_busy
), PCT(
rx_‰ame
), PCT(
tx_‰ame
));

2227 
	`©h_dbg
(
comm⁄
, 
RESET
, "==== BB update: done ====\n\n");

2228 
	}
}

2229 
EXPORT_SYMBOL
(
¨9003_hw_bb_w©chdog_dbg_öfo
);

2231 
	$¨9003_hw_dißbÀ_phy_ª°¨t
(
©h_hw
 *
ah
)

2233 
u8
 
ªsu…
;

2234 
u32
 
vÆ
;

2241 
ªsu…
 = 
	`MS
(
ah
->
bb_w©chdog_œ°_°©us
, 
AR_PHY_WATCHDOG_RX_OFDM_SM
);

2243 i‡((
ªsu…
 =0xbË|| 
ah
->
bb_h™g_rx_ofdm
) {

2244 
ah
->
bb_h™g_rx_ofdm
 = 
åue
;

2245 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_RESTART
);

2246 
vÆ
 &~
AR_PHY_RESTART_ENA
;

2247 
	`REG_WRITE
(
ah
, 
AR_PHY_RESTART
, 
vÆ
);

2249 
	}
}

2250 
EXPORT_SYMBOL
(
¨9003_hw_dißbÀ_phy_ª°¨t
);

	@ar9003_phy.h

17 #i‚de‡
AR9003_PHY_H


18 
	#AR9003_PHY_H


	)

23 
	#AR_CHAN_BASE
 0x9800

	)

25 
	#AR_PHY_TIMING1
 (
AR_CHAN_BASE
 + 0x0)

	)

26 
	#AR_PHY_TIMING2
 (
AR_CHAN_BASE
 + 0x4)

	)

27 
	#AR_PHY_TIMING3
 (
AR_CHAN_BASE
 + 0x8)

	)

28 
	#AR_PHY_TIMING4
 (
AR_CHAN_BASE
 + 0xc)

	)

29 
	#AR_PHY_TIMING5
 (
AR_CHAN_BASE
 + 0x10)

	)

30 
	#AR_PHY_TIMING6
 (
AR_CHAN_BASE
 + 0x14)

	)

31 
	#AR_PHY_TIMING11
 (
AR_CHAN_BASE
 + 0x18)

	)

32 
	#AR_PHY_SPUR_REG
 (
AR_CHAN_BASE
 + 0x1c)

	)

33 
	#AR_PHY_RX_IQCAL_CORR_B0
 (
AR_CHAN_BASE
 + 0xdc)

	)

34 
	#AR_PHY_TX_IQCAL_CONTROL_3
 (
AR_CHAN_BASE
 + 0xb0)

	)

35 
	#AR_PHY_TIMING_CONTROL4_DO_GAIN_DC_IQ_CAL_SHIFT
 16

	)

37 
	#AR_PHY_TIMING11_SPUR_FREQ_SD
 0x3FF00000

	)

38 
	#AR_PHY_TIMING11_SPUR_FREQ_SD_S
 20

	)

40 
	#AR_PHY_TIMING11_SPUR_DELTA_PHASE
 0x000FFFFF

	)

41 
	#AR_PHY_TIMING11_SPUR_DELTA_PHASE_S
 0

	)

43 
	#AR_PHY_TIMING11_USE_SPUR_FILTER_IN_AGC
 0x40000000

	)

44 
	#AR_PHY_TIMING11_USE_SPUR_FILTER_IN_AGC_S
 30

	)

46 
	#AR_PHY_TIMING11_USE_SPUR_FILTER_IN_SELFCOR
 0x80000000

	)

47 
	#AR_PHY_TIMING11_USE_SPUR_FILTER_IN_SELFCOR_S
 31

	)

49 
	#AR_PHY_SPUR_REG_ENABLE_NF_RSSI_SPUR_MIT
 0x4000000

	)

50 
	#AR_PHY_SPUR_REG_ENABLE_NF_RSSI_SPUR_MIT_S
 26

	)

52 
	#AR_PHY_SPUR_REG_ENABLE_MASK_PPM
 0x20000

	)

53 
	#AR_PHY_SPUR_REG_ENABLE_MASK_PPM_S
 17

	)

54 
	#AR_PHY_SPUR_REG_SPUR_RSSI_THRESH
 0x000000FF

	)

55 
	#AR_PHY_SPUR_REG_SPUR_RSSI_THRESH_S
 0

	)

56 
	#AR_PHY_SPUR_REG_EN_VIT_SPUR_RSSI
 0x00000100

	)

57 
	#AR_PHY_SPUR_REG_EN_VIT_SPUR_RSSI_S
 8

	)

58 
	#AR_PHY_SPUR_REG_MASK_RATE_CNTL
 0x03FC0000

	)

59 
	#AR_PHY_SPUR_REG_MASK_RATE_CNTL_S
 18

	)

61 
	#AR_PHY_RX_IQCAL_CORR_B0_LOOPBACK_IQCORR_EN
 0x20000000

	)

62 
	#AR_PHY_RX_IQCAL_CORR_B0_LOOPBACK_IQCORR_EN_S
 29

	)

64 
	#AR_PHY_TX_IQCAL_CONTROL_3_IQCORR_EN
 0x80000000

	)

65 
	#AR_PHY_TX_IQCAL_CONTROL_3_IQCORR_EN_S
 31

	)

67 
	#AR_PHY_FIND_SIG_LOW
 (
AR_CHAN_BASE
 + 0x20)

	)

69 
	#AR_PHY_SFCORR
 (
AR_CHAN_BASE
 + 0x24)

	)

70 
	#AR_PHY_SFCORR_LOW
 (
AR_CHAN_BASE
 + 0x28)

	)

71 
	#AR_PHY_SFCORR_EXT
 (
AR_CHAN_BASE
 + 0x2c)

	)

73 
	#AR_PHY_EXT_CCA
 (
AR_CHAN_BASE
 + 0x30)

	)

74 
	#AR_PHY_RADAR_0
 (
AR_CHAN_BASE
 + 0x34)

	)

75 
	#AR_PHY_RADAR_1
 (
AR_CHAN_BASE
 + 0x38)

	)

76 
	#AR_PHY_RADAR_EXT
 (
AR_CHAN_BASE
 + 0x3c)

	)

77 
	#AR_PHY_MULTICHAIN_CTRL
 (
AR_CHAN_BASE
 + 0x80)

	)

78 
	#AR_PHY_PERCHAIN_CSD
 (
AR_CHAN_BASE
 + 0x84)

	)

80 
	#AR_PHY_TX_PHASE_RAMP_0
 (
AR_CHAN_BASE
 + 0xd0)

	)

81 
	#AR_PHY_ADC_GAIN_DC_CORR_0
 (
AR_CHAN_BASE
 + 0xd4)

	)

82 
	#AR_PHY_IQ_ADC_MEAS_0_B0
 (
AR_CHAN_BASE
 + 0xc0)

	)

83 
	#AR_PHY_IQ_ADC_MEAS_1_B0
 (
AR_CHAN_BASE
 + 0xc4)

	)

84 
	#AR_PHY_IQ_ADC_MEAS_2_B0
 (
AR_CHAN_BASE
 + 0xc8)

	)

85 
	#AR_PHY_IQ_ADC_MEAS_3_B0
 (
AR_CHAN_BASE
 + 0xcc)

	)

88 
	#AR_PHY_TX_PHASE_RAMP_0_9300_10
 (
AR_CHAN_BASE
 + 0xd0 - 0x10)

	)

89 
	#AR_PHY_ADC_GAIN_DC_CORR_0_9300_10
 (
AR_CHAN_BASE
 + 0xd4 - 0x10)

	)

90 
	#AR_PHY_IQ_ADC_MEAS_0_B0_9300_10
 (
AR_CHAN_BASE
 + 0xc0 + 0x8)

	)

91 
	#AR_PHY_IQ_ADC_MEAS_1_B0_9300_10
 (
AR_CHAN_BASE
 + 0xc4 + 0x8)

	)

92 
	#AR_PHY_IQ_ADC_MEAS_2_B0_9300_10
 (
AR_CHAN_BASE
 + 0xc8 + 0x8)

	)

93 
	#AR_PHY_IQ_ADC_MEAS_3_B0_9300_10
 (
AR_CHAN_BASE
 + 0xc¯+ 0x8)

	)

95 
	#AR_PHY_TX_CRC
 (
AR_CHAN_BASE
 + 0xa0)

	)

96 
	#AR_PHY_TST_DAC_CONST
 (
AR_CHAN_BASE
 + 0xa4)

	)

97 
	#AR_PHY_SPUR_REPORT_0
 (
AR_CHAN_BASE
 + 0xa8)

	)

98 
	#AR_PHY_CHAN_INFO_TAB_0
 (
AR_CHAN_BASE
 + 0x300)

	)

103 
	#AR_PHY_TIMING2_USE_FORCE_PPM
 0x00001000

	)

104 
	#AR_PHY_TIMING2_FORCE_PPM_VAL
 0x00000fff

	)

105 
	#AR_PHY_TIMING3_DSC_MAN
 0xFFFE0000

	)

106 
	#AR_PHY_TIMING3_DSC_MAN_S
 17

	)

107 
	#AR_PHY_TIMING3_DSC_EXP
 0x0001E000

	)

108 
	#AR_PHY_TIMING3_DSC_EXP_S
 13

	)

109 
	#AR_PHY_TIMING4_IQCAL_LOG_COUNT_MAX
 0xF000

	)

110 
	#AR_PHY_TIMING4_IQCAL_LOG_COUNT_MAX_S
 12

	)

111 
	#AR_PHY_TIMING4_DO_CAL
 0x10000

	)

113 
	#AR_PHY_TIMING4_ENABLE_PILOT_MASK
 0x10000000

	)

114 
	#AR_PHY_TIMING4_ENABLE_PILOT_MASK_S
 28

	)

115 
	#AR_PHY_TIMING4_ENABLE_CHAN_MASK
 0x20000000

	)

116 
	#AR_PHY_TIMING4_ENABLE_CHAN_MASK_S
 29

	)

118 
	#AR_PHY_TIMING4_ENABLE_SPUR_FILTER
 0x40000000

	)

119 
	#AR_PHY_TIMING4_ENABLE_SPUR_FILTER_S
 30

	)

120 
	#AR_PHY_TIMING4_ENABLE_SPUR_RSSI
 0x80000000

	)

121 
	#AR_PHY_TIMING4_ENABLE_SPUR_RSSI_S
 31

	)

123 
	#AR_PHY_NEW_ADC_GAIN_CORR_ENABLE
 0x40000000

	)

124 
	#AR_PHY_NEW_ADC_DC_OFFSET_CORR_ENABLE
 0x80000000

	)

125 
	#AR_PHY_SFCORR_LOW_USE_SELF_CORR_LOW
 0x00000001

	)

126 
	#AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW
 0x00003F00

	)

127 
	#AR_PHY_SFCORR_LOW_M2COUNT_THR_LOW_S
 8

	)

128 
	#AR_PHY_SFCORR_LOW_M1_THRESH_LOW
 0x001FC000

	)

129 
	#AR_PHY_SFCORR_LOW_M1_THRESH_LOW_S
 14

	)

130 
	#AR_PHY_SFCORR_LOW_M2_THRESH_LOW
 0x0FE00000

	)

131 
	#AR_PHY_SFCORR_LOW_M2_THRESH_LOW_S
 21

	)

132 
	#AR_PHY_SFCORR_M2COUNT_THR
 0x0000001F

	)

133 
	#AR_PHY_SFCORR_M2COUNT_THR_S
 0

	)

134 
	#AR_PHY_SFCORR_M1_THRESH
 0x00FE0000

	)

135 
	#AR_PHY_SFCORR_M1_THRESH_S
 17

	)

136 
	#AR_PHY_SFCORR_M2_THRESH
 0x7F000000

	)

137 
	#AR_PHY_SFCORR_M2_THRESH_S
 24

	)

138 
	#AR_PHY_SFCORR_EXT_M1_THRESH
 0x0000007F

	)

139 
	#AR_PHY_SFCORR_EXT_M1_THRESH_S
 0

	)

140 
	#AR_PHY_SFCORR_EXT_M2_THRESH
 0x00003F80

	)

141 
	#AR_PHY_SFCORR_EXT_M2_THRESH_S
 7

	)

142 
	#AR_PHY_SFCORR_EXT_M1_THRESH_LOW
 0x001FC000

	)

143 
	#AR_PHY_SFCORR_EXT_M1_THRESH_LOW_S
 14

	)

144 
	#AR_PHY_SFCORR_EXT_M2_THRESH_LOW
 0x0FE00000

	)

145 
	#AR_PHY_SFCORR_EXT_M2_THRESH_LOW_S
 21

	)

146 
	#AR_PHY_SFCORR_EXT_SPUR_SUBCHANNEL_SD
 0x10000000

	)

147 
	#AR_PHY_SFCORR_EXT_SPUR_SUBCHANNEL_SD_S
 28

	)

148 
	#AR_PHY_SFCORR_SPUR_SUBCHNL_SD_S
 28

	)

149 
	#AR_PHY_EXT_CCA_THRESH62
 0x007F0000

	)

150 
	#AR_PHY_EXT_CCA_THRESH62_S
 16

	)

151 
	#AR_PHY_EXTCHN_PWRTHR1_ANT_DIV_ALT_ANT_MINGAINIDX
 0x0000FF00

	)

152 
	#AR_PHY_EXTCHN_PWRTHR1_ANT_DIV_ALT_ANT_MINGAINIDX_S
 8

	)

153 
	#AR_PHY_EXT_MINCCA_PWR
 0x01FF0000

	)

154 
	#AR_PHY_EXT_MINCCA_PWR_S
 16

	)

155 
	#AR_PHY_EXT_CYCPWR_THR1
 0x0000FE00L

	)

156 
	#AR_PHY_EXT_CYCPWR_THR1_S
 9

	)

157 
	#AR_PHY_TIMING5_CYCPWR_THR1
 0x000000FE

	)

158 
	#AR_PHY_TIMING5_CYCPWR_THR1_S
 1

	)

159 
	#AR_PHY_TIMING5_CYCPWR_THR1_ENABLE
 0x00000001

	)

160 
	#AR_PHY_TIMING5_CYCPWR_THR1_ENABLE_S
 0

	)

161 
	#AR_PHY_TIMING5_CYCPWR_THR1A
 0x007F0000

	)

162 
	#AR_PHY_TIMING5_CYCPWR_THR1A_S
 16

	)

163 
	#AR_PHY_TIMING5_RSSI_THR1A
 (0x7F << 16)

	)

164 
	#AR_PHY_TIMING5_RSSI_THR1A_S
 16

	)

165 
	#AR_PHY_TIMING5_RSSI_THR1A_ENA
 (0x1 << 15)

	)

166 
	#AR_PHY_RADAR_0_ENA
 0x00000001

	)

167 
	#AR_PHY_RADAR_0_FFT_ENA
 0x80000000

	)

168 
	#AR_PHY_RADAR_0_INBAND
 0x0000003e

	)

169 
	#AR_PHY_RADAR_0_INBAND_S
 1

	)

170 
	#AR_PHY_RADAR_0_PRSSI
 0x00000FC0

	)

171 
	#AR_PHY_RADAR_0_PRSSI_S
 6

	)

172 
	#AR_PHY_RADAR_0_HEIGHT
 0x0003F000

	)

173 
	#AR_PHY_RADAR_0_HEIGHT_S
 12

	)

174 
	#AR_PHY_RADAR_0_RRSSI
 0x00FC0000

	)

175 
	#AR_PHY_RADAR_0_RRSSI_S
 18

	)

176 
	#AR_PHY_RADAR_0_FIRPWR
 0x7F000000

	)

177 
	#AR_PHY_RADAR_0_FIRPWR_S
 24

	)

178 
	#AR_PHY_RADAR_1_RELPWR_ENA
 0x00800000

	)

179 
	#AR_PHY_RADAR_1_USE_FIR128
 0x00400000

	)

180 
	#AR_PHY_RADAR_1_RELPWR_THRESH
 0x003F0000

	)

181 
	#AR_PHY_RADAR_1_RELPWR_THRESH_S
 16

	)

182 
	#AR_PHY_RADAR_1_BLOCK_CHECK
 0x00008000

	)

183 
	#AR_PHY_RADAR_1_MAX_RRSSI
 0x00004000

	)

184 
	#AR_PHY_RADAR_1_RELSTEP_CHECK
 0x00002000

	)

185 
	#AR_PHY_RADAR_1_RELSTEP_THRESH
 0x00001F00

	)

186 
	#AR_PHY_RADAR_1_RELSTEP_THRESH_S
 8

	)

187 
	#AR_PHY_RADAR_1_MAXLEN
 0x000000FF

	)

188 
	#AR_PHY_RADAR_1_MAXLEN_S
 0

	)

189 
	#AR_PHY_RADAR_EXT_ENA
 0x00004000

	)

190 
	#AR_PHY_RADAR_DC_PWR_THRESH
 0x007f8000

	)

191 
	#AR_PHY_RADAR_DC_PWR_THRESH_S
 15

	)

192 
	#AR_PHY_RADAR_LB_DC_CAP
 0x7f800000

	)

193 
	#AR_PHY_RADAR_LB_DC_CAP_S
 23

	)

194 
	#AR_PHY_FIND_SIG_LOW_FIRSTEP_LOW
 (0x3‡<< 6)

	)

195 
	#AR_PHY_FIND_SIG_LOW_FIRSTEP_LOW_S
 6

	)

196 
	#AR_PHY_FIND_SIG_LOW_FIRPWR
 (0x7‡<< 12)

	)

197 
	#AR_PHY_FIND_SIG_LOW_FIRPWR_S
 12

	)

198 
	#AR_PHY_FIND_SIG_LOW_FIRPWR_SIGN_BIT
 19

	)

199 
	#AR_PHY_FIND_SIG_LOW_RELSTEP
 0x1f

	)

200 
	#AR_PHY_FIND_SIG_LOW_RELSTEP_S
 0

	)

201 
	#AR_PHY_FIND_SIG_LOW_RELSTEP_SIGN_BIT
 5

	)

202 
	#AR_PHY_CHAN_INFO_TAB_S2_READ
 0x00000008

	)

203 
	#AR_PHY_CHAN_INFO_TAB_S2_READ_S
 3

	)

204 
	#AR_PHY_RX_IQCAL_CORR_IQCORR_Q_Q_COFF
 0x0000007F

	)

205 
	#AR_PHY_RX_IQCAL_CORR_IQCORR_Q_Q_COFF_S
 0

	)

206 
	#AR_PHY_RX_IQCAL_CORR_IQCORR_Q_I_COFF
 0x00003F80

	)

207 
	#AR_PHY_RX_IQCAL_CORR_IQCORR_Q_I_COFF_S
 7

	)

208 
	#AR_PHY_RX_IQCAL_CORR_IQCORR_ENABLE
 0x00004000

	)

209 
	#AR_PHY_RX_IQCAL_CORR_LOOPBACK_IQCORR_Q_Q_COFF
 0x003f8000

	)

210 
	#AR_PHY_RX_IQCAL_CORR_LOOPBACK_IQCORR_Q_Q_COFF_S
 15

	)

211 
	#AR_PHY_RX_IQCAL_CORR_LOOPBACK_IQCORR_Q_I_COFF
 0x1fc00000

	)

212 
	#AR_PHY_RX_IQCAL_CORR_LOOPBACK_IQCORR_Q_I_COFF_S
 22

	)

217 
	#AR_MRC_BASE
 0x9c00

	)

219 
	#AR_PHY_TIMING_3A
 (
AR_MRC_BASE
 + 0x0)

	)

220 
	#AR_PHY_LDPC_CNTL1
 (
AR_MRC_BASE
 + 0x4)

	)

221 
	#AR_PHY_LDPC_CNTL2
 (
AR_MRC_BASE
 + 0x8)

	)

222 
	#AR_PHY_PILOT_SPUR_MASK
 (
AR_MRC_BASE
 + 0xc)

	)

223 
	#AR_PHY_CHAN_SPUR_MASK
 (
AR_MRC_BASE
 + 0x10)

	)

224 
	#AR_PHY_SGI_DELTA
 (
AR_MRC_BASE
 + 0x14)

	)

225 
	#AR_PHY_ML_CNTL_1
 (
AR_MRC_BASE
 + 0x18)

	)

226 
	#AR_PHY_ML_CNTL_2
 (
AR_MRC_BASE
 + 0x1c)

	)

227 
	#AR_PHY_TST_ADC
 (
AR_MRC_BASE
 + 0x20)

	)

229 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_A
 0x00000FE0

	)

230 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_A_S
 5

	)

231 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_A
 0x1F

	)

232 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_A_S
 0

	)

233 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_B
 0x00FE0000

	)

234 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_IDX_B_S
 17

	)

235 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_B
 0x0001F000

	)

236 
	#AR_PHY_PILOT_SPUR_MASK_CF_PILOT_MASK_B_S
 12

	)

238 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_A
 0x00000FE0

	)

239 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_A_S
 5

	)

240 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_A
 0x1F

	)

241 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_A_S
 0

	)

242 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_B
 0x00FE0000

	)

243 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_IDX_B_S
 17

	)

244 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_B
 0x0001F000

	)

245 
	#AR_PHY_CHAN_SPUR_MASK_CF_CHAN_MASK_B_S
 12

	)

251 
	#AR_PHY_SGI_DSC_MAN
 0x0007FFF0

	)

252 
	#AR_PHY_SGI_DSC_MAN_S
 4

	)

253 
	#AR_PHY_SGI_DSC_EXP
 0x0000000F

	)

254 
	#AR_PHY_SGI_DSC_EXP_S
 0

	)

258 
	#AR_BBB_BASE
 0x9d00

	)

263 
	#AR_AGC_BASE
 0x9e00

	)

265 
	#AR_PHY_SETTLING
 (
AR_AGC_BASE
 + 0x0)

	)

266 
	#AR_PHY_FORCEMAX_GAINS_0
 (
AR_AGC_BASE
 + 0x4)

	)

267 
	#AR_PHY_GAINS_MINOFF0
 (
AR_AGC_BASE
 + 0x8)

	)

268 
	#AR_PHY_DESIRED_SZ
 (
AR_AGC_BASE
 + 0xc)

	)

269 
	#AR_PHY_FIND_SIG
 (
AR_AGC_BASE
 + 0x10)

	)

270 
	#AR_PHY_AGC
 (
AR_AGC_BASE
 + 0x14)

	)

271 
	#AR_PHY_EXT_ATTEN_CTL_0
 (
AR_AGC_BASE
 + 0x18)

	)

272 
	#AR_PHY_CCA_0
 (
AR_AGC_BASE
 + 0x1c)

	)

273 
	#AR_PHY_CCA_CTRL_0
 (
AR_AGC_BASE
 + 0x20)

	)

274 
	#AR_PHY_RESTART
 (
AR_AGC_BASE
 + 0x24)

	)

279 
	#AR_PHY_MC_GAIN_CTRL
 (
AR_AGC_BASE
 + 0x28)

	)

280 
	#AR_ANT_DIV_CTRL_ALL
 0x7e000000

	)

281 
	#AR_ANT_DIV_CTRL_ALL_S
 25

	)

282 
	#AR_ANT_DIV_ENABLE
 0x1000000

	)

283 
	#AR_ANT_DIV_ENABLE_S
 24

	)

286 
	#AR_PHY_ANT_FAST_DIV_BIAS
 0x00007e00

	)

287 
	#AR_PHY_ANT_FAST_DIV_BIAS_S
 9

	)

288 
	#AR_PHY_ANT_SW_RX_PROT
 0x00800000

	)

289 
	#AR_PHY_ANT_SW_RX_PROT_S
 23

	)

290 
	#AR_PHY_ANT_DIV_LNADIV
 0x01000000

	)

291 
	#AR_PHY_ANT_DIV_LNADIV_S
 24

	)

292 
	#AR_PHY_ANT_DIV_ALT_LNACONF
 0x06000000

	)

293 
	#AR_PHY_ANT_DIV_ALT_LNACONF_S
 25

	)

294 
	#AR_PHY_ANT_DIV_MAIN_LNACONF
 0x18000000

	)

295 
	#AR_PHY_ANT_DIV_MAIN_LNACONF_S
 27

	)

296 
	#AR_PHY_ANT_DIV_ALT_GAINTB
 0x20000000

	)

297 
	#AR_PHY_ANT_DIV_ALT_GAINTB_S
 29

	)

298 
	#AR_PHY_ANT_DIV_MAIN_GAINTB
 0x40000000

	)

299 
	#AR_PHY_ANT_DIV_MAIN_GAINTB_S
 30

	)

301 
	#AR_PHY_EXTCHN_PWRTHR1
 (
AR_AGC_BASE
 + 0x2c)

	)

302 
	#AR_PHY_EXT_CHN_WIN
 (
AR_AGC_BASE
 + 0x30)

	)

303 
	#AR_PHY_20_40_DET_THR
 (
AR_AGC_BASE
 + 0x34)

	)

304 
	#AR_PHY_RIFS_SRCH
 (
AR_AGC_BASE
 + 0x38)

	)

305 
	#AR_PHY_PEAK_DET_CTRL_1
 (
AR_AGC_BASE
 + 0x3c)

	)

306 
	#AR_PHY_PEAK_DET_CTRL_2
 (
AR_AGC_BASE
 + 0x40)

	)

307 
	#AR_PHY_RX_GAIN_BOUNDS_1
 (
AR_AGC_BASE
 + 0x44)

	)

308 
	#AR_PHY_RX_GAIN_BOUNDS_2
 (
AR_AGC_BASE
 + 0x48)

	)

309 
	#AR_PHY_RSSI_0
 (
AR_AGC_BASE
 + 0x180)

	)

310 
	#AR_PHY_SPUR_CCK_REP0
 (
AR_AGC_BASE
 + 0x184)

	)

312 
	#AR_PHY_CCK_DETECT
 (
AR_AGC_BASE
 + 0x1c0)

	)

313 
	#AR_FAST_DIV_ENABLE
 0x2000

	)

314 
	#AR_FAST_DIV_ENABLE_S
 13

	)

316 
	#AR_PHY_DAG_CTRLCCK
 (
AR_AGC_BASE
 + 0x1c4)

	)

317 
	#AR_PHY_IQCORR_CTRL_CCK
 (
AR_AGC_BASE
 + 0x1c8)

	)

319 
	#AR_PHY_CCK_SPUR_MIT
 (
AR_AGC_BASE
 + 0x1cc)

	)

320 
	#AR_PHY_CCK_SPUR_MIT_SPUR_RSSI_THR
 0x000001„

	)

321 
	#AR_PHY_CCK_SPUR_MIT_SPUR_RSSI_THR_S
 1

	)

322 
	#AR_PHY_CCK_SPUR_MIT_SPUR_FILTER_TYPE
 0x60000000

	)

323 
	#AR_PHY_CCK_SPUR_MIT_SPUR_FILTER_TYPE_S
 29

	)

324 
	#AR_PHY_CCK_SPUR_MIT_USE_CCK_SPUR_MIT
 0x00000001

	)

325 
	#AR_PHY_CCK_SPUR_MIT_USE_CCK_SPUR_MIT_S
 0

	)

326 
	#AR_PHY_CCK_SPUR_MIT_CCK_SPUR_FREQ
 0x1fff„00

	)

327 
	#AR_PHY_CCK_SPUR_MIT_CCK_SPUR_FREQ_S
 9

	)

329 
	#AR_PHY_MRC_CCK_CTRL
 (
AR_AGC_BASE
 + 0x1d0)

	)

330 
	#AR_PHY_MRC_CCK_ENABLE
 0x00000001

	)

331 
	#AR_PHY_MRC_CCK_ENABLE_S
 0

	)

332 
	#AR_PHY_MRC_CCK_MUX_REG
 0x00000002

	)

333 
	#AR_PHY_MRC_CCK_MUX_REG_S
 1

	)

335 
	#AR_PHY_RX_OCGAIN
 (
AR_AGC_BASE
 + 0x200)

	)

337 
	#AR_PHY_CCA_NOM_VAL_9300_2GHZ
 -110

	)

338 
	#AR_PHY_CCA_NOM_VAL_9300_5GHZ
 -115

	)

339 
	#AR_PHY_CCA_MIN_GOOD_VAL_9300_2GHZ
 -125

	)

340 
	#AR_PHY_CCA_MIN_GOOD_VAL_9300_5GHZ
 -125

	)

341 
	#AR_PHY_CCA_MAX_GOOD_VAL_9300_2GHZ
 -60

	)

342 
	#AR_PHY_CCA_MAX_GOOD_VAL_9300_5GHZ
 -60

	)

343 
	#AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_2GHZ
 -95

	)

344 
	#AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_5GHZ
 -100

	)

346 
	#AR_PHY_CCA_NOM_VAL_9462_2GHZ
 -127

	)

347 
	#AR_PHY_CCA_MIN_GOOD_VAL_9462_2GHZ
 -127

	)

348 
	#AR_PHY_CCA_MAX_GOOD_VAL_9462_2GHZ
 -60

	)

349 
	#AR_PHY_CCA_NOM_VAL_9462_5GHZ
 -127

	)

350 
	#AR_PHY_CCA_MIN_GOOD_VAL_9462_5GHZ
 -127

	)

351 
	#AR_PHY_CCA_MAX_GOOD_VAL_9462_5GHZ
 -60

	)

353 
	#AR_PHY_CCA_NOM_VAL_9330_2GHZ
 -118

	)

355 
	#AR9300_EXT_LNA_CTL_GPIO_AR9485
 9

	)

360 
	#AR_PHY_EXT_ATTEN_CTL_RXTX_MARGIN
 0x00FC0000

	)

361 
	#AR_PHY_EXT_ATTEN_CTL_RXTX_MARGIN_S
 18

	)

362 
	#AR_PHY_EXT_ATTEN_CTL_BSW_MARGIN
 0x00003C00

	)

363 
	#AR_PHY_EXT_ATTEN_CTL_BSW_MARGIN_S
 10

	)

364 
	#AR_PHY_EXT_ATTEN_CTL_BSW_ATTEN
 0x0000001F

	)

365 
	#AR_PHY_EXT_ATTEN_CTL_BSW_ATTEN_S
 0

	)

366 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN2_MARGIN
 0x003E0000

	)

367 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN2_MARGIN_S
 17

	)

368 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN1_MARGIN
 0x0001F000

	)

369 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN1_MARGIN_S
 12

	)

370 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN2_DB
 0x00000FC0

	)

371 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN2_DB_S
 6

	)

372 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN1_DB
 0x0000003F

	)

373 
	#AR_PHY_EXT_ATTEN_CTL_XATTEN1_DB_S
 0

	)

374 
	#AR_PHY_RXGAIN_TXRX_ATTEN
 0x0003F000

	)

375 
	#AR_PHY_RXGAIN_TXRX_ATTEN_S
 12

	)

376 
	#AR_PHY_RXGAIN_TXRX_RF_MAX
 0x007C0000

	)

377 
	#AR_PHY_RXGAIN_TXRX_RF_MAX_S
 18

	)

378 
	#AR9280_PHY_RXGAIN_TXRX_ATTEN
 0x00003F80

	)

379 
	#AR9280_PHY_RXGAIN_TXRX_ATTEN_S
 7

	)

380 
	#AR9280_PHY_RXGAIN_TXRX_MARGIN
 0x001FC000

	)

381 
	#AR9280_PHY_RXGAIN_TXRX_MARGIN_S
 14

	)

382 
	#AR_PHY_SETTLING_SWITCH
 0x00003F80

	)

383 
	#AR_PHY_SETTLING_SWITCH_S
 7

	)

384 
	#AR_PHY_DESIRED_SZ_ADC
 0x000000FF

	)

385 
	#AR_PHY_DESIRED_SZ_ADC_S
 0

	)

386 
	#AR_PHY_DESIRED_SZ_PGA
 0x0000FF00

	)

387 
	#AR_PHY_DESIRED_SZ_PGA_S
 8

	)

388 
	#AR_PHY_DESIRED_SZ_TOT_DES
 0x0FF00000

	)

389 
	#AR_PHY_DESIRED_SZ_TOT_DES_S
 20

	)

390 
	#AR_PHY_MINCCA_PWR
 0x1FF00000

	)

391 
	#AR_PHY_MINCCA_PWR_S
 20

	)

392 
	#AR_PHY_CCA_THRESH62
 0x0007F000

	)

393 
	#AR_PHY_CCA_THRESH62_S
 12

	)

394 
	#AR9280_PHY_MINCCA_PWR
 0x1FF00000

	)

395 
	#AR9280_PHY_MINCCA_PWR_S
 20

	)

396 
	#AR9280_PHY_CCA_THRESH62
 0x000FF000

	)

397 
	#AR9280_PHY_CCA_THRESH62_S
 12

	)

398 
	#AR_PHY_EXT_CCA0_THRESH62
 0x000000FF

	)

399 
	#AR_PHY_EXT_CCA0_THRESH62_S
 0

	)

400 
	#AR_PHY_EXT_CCA0_THRESH62_1
 0x000001FF

	)

401 
	#AR_PHY_EXT_CCA0_THRESH62_1_S
 0

	)

402 
	#AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK
 0x0000003F

	)

403 
	#AR_PHY_CCK_DETECT_WEAK_SIG_THR_CCK_S
 0

	)

404 
	#AR_PHY_CCK_DETECT_ANT_SWITCH_TIME
 0x00001FC0

	)

405 
	#AR_PHY_CCK_DETECT_ANT_SWITCH_TIME_S
 6

	)

406 
	#AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV
 0x2000

	)

408 
	#AR_PHY_DAG_CTRLCCK_EN_RSSI_THR
 0x00000200

	)

409 
	#AR_PHY_DAG_CTRLCCK_EN_RSSI_THR_S
 9

	)

410 
	#AR_PHY_DAG_CTRLCCK_RSSI_THR
 0x0001FC00

	)

411 
	#AR_PHY_DAG_CTRLCCK_RSSI_THR_S
 10

	)

413 
	#AR_PHY_RIFS_INIT_DELAY
 0x3ff0000

	)

414 
	#AR_PHY_AGC_QUICK_DROP
 0x03c00000

	)

415 
	#AR_PHY_AGC_QUICK_DROP_S
 22

	)

416 
	#AR_PHY_AGC_COARSE_LOW
 0x00007F80

	)

417 
	#AR_PHY_AGC_COARSE_LOW_S
 7

	)

418 
	#AR_PHY_AGC_COARSE_HIGH
 0x003F8000

	)

419 
	#AR_PHY_AGC_COARSE_HIGH_S
 15

	)

420 
	#AR_PHY_AGC_COARSE_PWR_CONST
 0x0000007F

	)

421 
	#AR_PHY_AGC_COARSE_PWR_CONST_S
 0

	)

422 
	#AR_PHY_FIND_SIG_FIRSTEP
 0x0003F000

	)

423 
	#AR_PHY_FIND_SIG_FIRSTEP_S
 12

	)

424 
	#AR_PHY_FIND_SIG_FIRPWR
 0x03FC0000

	)

425 
	#AR_PHY_FIND_SIG_FIRPWR_S
 18

	)

426 
	#AR_PHY_FIND_SIG_FIRPWR_SIGN_BIT
 25

	)

427 
	#AR_PHY_FIND_SIG_RELPWR
 (0x1‡<< 6)

	)

428 
	#AR_PHY_FIND_SIG_RELPWR_S
 6

	)

429 
	#AR_PHY_FIND_SIG_RELPWR_SIGN_BIT
 11

	)

430 
	#AR_PHY_FIND_SIG_RELSTEP
 0x1f

	)

431 
	#AR_PHY_FIND_SIG_RELSTEP_S
 0

	)

432 
	#AR_PHY_FIND_SIG_RELSTEP_SIGN_BIT
 5

	)

433 
	#AR_PHY_RESTART_ENABLE_DIV_M2FLAG
 0x00200000

	)

434 
	#AR_PHY_RESTART_ENABLE_DIV_M2FLAG_S
 21

	)

435 
	#AR_PHY_RESTART_DIV_GC
 0x001C0000

	)

436 
	#AR_PHY_RESTART_DIV_GC_S
 18

	)

437 
	#AR_PHY_RESTART_ENA
 0x01

	)

438 
	#AR_PHY_DC_RESTART_DIS
 0x40000000

	)

440 
	#AR_PHY_TPC_OLPC_GAIN_DELTA_PAL_ON
 0xFF000000

	)

441 
	#AR_PHY_TPC_OLPC_GAIN_DELTA_PAL_ON_S
 24

	)

442 
	#AR_PHY_TPC_OLPC_GAIN_DELTA
 0x00FF0000

	)

443 
	#AR_PHY_TPC_OLPC_GAIN_DELTA_S
 16

	)

445 
	#AR_PHY_TPC_6_ERROR_EST_MODE
 0x03000000

	)

446 
	#AR_PHY_TPC_6_ERROR_EST_MODE_S
 24

	)

451 
	#AR_SM_BASE
 0xa200

	)

453 
	#AR_PHY_D2_CHIP_ID
 (
AR_SM_BASE
 + 0x0)

	)

454 
	#AR_PHY_GEN_CTRL
 (
AR_SM_BASE
 + 0x4)

	)

455 
	#AR_PHY_MODE
 (
AR_SM_BASE
 + 0x8)

	)

456 
	#AR_PHY_ACTIVE
 (
AR_SM_BASE
 + 0xc)

	)

457 
	#AR_PHY_SPUR_MASK_A
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x18 : 0x20))

	)

458 
	#AR_PHY_SPUR_MASK_B
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x1¯: 0x24))

	)

459 
	#AR_PHY_SPECTRAL_SCAN
 (
AR_SM_BASE
 + 0x28)

	)

460 
	#AR_PHY_RADAR_BW_FILTER
 (
AR_SM_BASE
 + 0x2c)

	)

461 
	#AR_PHY_SEARCH_START_DELAY
 (
AR_SM_BASE
 + 0x30)

	)

462 
	#AR_PHY_MAX_RX_LEN
 (
AR_SM_BASE
 + 0x34)

	)

463 
	#AR_PHY_FRAME_CTL
 (
AR_SM_BASE
 + 0x38)

	)

464 
	#AR_PHY_RFBUS_REQ
 (
AR_SM_BASE
 + 0x3c)

	)

465 
	#AR_PHY_RFBUS_GRANT
 (
AR_SM_BASE
 + 0x40)

	)

466 
	#AR_PHY_RIFS
 (
AR_SM_BASE
 + 0x44)

	)

467 
	#AR_PHY_RX_CLR_DELAY
 (
AR_SM_BASE
 + 0x50)

	)

468 
	#AR_PHY_RX_DELAY
 (
AR_SM_BASE
 + 0x54)

	)

470 
	#AR_PHY_XPA_TIMING_CTL
 (
AR_SM_BASE
 + 0x64)

	)

471 
	#AR_PHY_MISC_PA_CTL
 (
AR_SM_BASE
 + 0x80)

	)

472 
	#AR_PHY_SWITCH_CHAIN_0
 (
AR_SM_BASE
 + 0x84)

	)

473 
	#AR_PHY_SWITCH_COM
 (
AR_SM_BASE
 + 0x88)

	)

474 
	#AR_PHY_SWITCH_COM_2
 (
AR_SM_BASE
 + 0x8c)

	)

475 
	#AR_PHY_RX_CHAINMASK
 (
AR_SM_BASE
 + 0xa0)

	)

476 
	#AR_PHY_CAL_CHAINMASK
 (
AR_SM_BASE
 + 0xc0)

	)

477 
	#AR_PHY_CALMODE
 (
AR_SM_BASE
 + 0xc8)

	)

478 
	#AR_PHY_FCAL_1
 (
AR_SM_BASE
 + 0xcc)

	)

479 
	#AR_PHY_FCAL_2_0
 (
AR_SM_BASE
 + 0xd0)

	)

480 
	#AR_PHY_DFT_TONE_CTL_0
 (
AR_SM_BASE
 + 0xd4)

	)

481 
	#AR_PHY_CL_CAL_CTL
 (
AR_SM_BASE
 + 0xd8)

	)

482 
	#AR_PHY_CL_TAB_0
 (
AR_SM_BASE
 + 0x100)

	)

483 
	#AR_PHY_SYNTH_CONTROL
 (
AR_SM_BASE
 + 0x140)

	)

484 
	#AR_PHY_ADDAC_CLK_SEL
 (
AR_SM_BASE
 + 0x144)

	)

485 
	#AR_PHY_PLL_CTL
 (
AR_SM_BASE
 + 0x148)

	)

486 
	#AR_PHY_ANALOG_SWAP
 (
AR_SM_BASE
 + 0x14c)

	)

487 
	#AR_PHY_ADDAC_PARA_CTL
 (
AR_SM_BASE
 + 0x150)

	)

488 
	#AR_PHY_XPA_CFG
 (
AR_SM_BASE
 + 0x158)

	)

490 
	#AR_PHY_FRAME_CTL_CF_OVERLAP_WINDOW
 3

	)

491 
	#AR_PHY_FRAME_CTL_CF_OVERLAP_WINDOW_S
 0

	)

493 
	#AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_IDX_A
 0x0001FC00

	)

494 
	#AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_IDX_A_S
 10

	)

495 
	#AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_A
 0x3FF

	)

496 
	#AR_PHY_SPUR_MASK_A_CF_PUNC_MASK_A_S
 0

	)

498 
	#AR_PHY_TEST
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x15¯: 0x160))

	)

500 
	#AR_PHY_TEST_BBB_OBS_SEL
 0x780000

	)

501 
	#AR_PHY_TEST_BBB_OBS_SEL_S
 19

	)

503 
	#AR_PHY_TEST_RX_OBS_SEL_BIT5_S
 23

	)

504 
	#AR_PHY_TEST_RX_OBS_SEL_BIT5
 (1 << 
AR_PHY_TEST_RX_OBS_SEL_BIT5_S
)

	)

506 
	#AR_PHY_TEST_CHAIN_SEL
 0xC0000000

	)

507 
	#AR_PHY_TEST_CHAIN_SEL_S
 30

	)

509 
	#AR_PHY_TEST_CTL_STATUS
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x160 : 0x164))

	)

510 
	#AR_PHY_TEST_CTL_TSTDAC_EN
 0x1

	)

511 
	#AR_PHY_TEST_CTL_TSTDAC_EN_S
 0

	)

512 
	#AR_PHY_TEST_CTL_TX_OBS_SEL
 0x1C

	)

513 
	#AR_PHY_TEST_CTL_TX_OBS_SEL_S
 2

	)

514 
	#AR_PHY_TEST_CTL_TX_OBS_MUX_SEL
 0x60

	)

515 
	#AR_PHY_TEST_CTL_TX_OBS_MUX_SEL_S
 5

	)

516 
	#AR_PHY_TEST_CTL_TSTADC_EN
 0x100

	)

517 
	#AR_PHY_TEST_CTL_TSTADC_EN_S
 8

	)

518 
	#AR_PHY_TEST_CTL_RX_OBS_SEL
 0x3C00

	)

519 
	#AR_PHY_TEST_CTL_RX_OBS_SEL_S
 10

	)

520 
	#AR_PHY_TEST_CTL_DEBUGPORT_SEL
 0xe0000000

	)

521 
	#AR_PHY_TEST_CTL_DEBUGPORT_SEL_S
 29

	)

524 
	#AR_PHY_TSTDAC
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x164 : 0x168))

	)

526 
	#AR_PHY_CHAN_STATUS
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x168 : 0x16c))

	)

528 
	#AR_PHY_CHAN_INFO_MEMORY
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x16¯: 0x170))

	)

529 
	#AR_PHY_CHAN_INFO_MEMORY_CHANINFOMEM_S2_READ
 0x00000008

	)

530 
	#AR_PHY_CHAN_INFO_MEMORY_CHANINFOMEM_S2_READ_S
 3

	)

532 
	#AR_PHY_CHNINFO_NOISEPWR
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x170 : 0x174))

	)

533 
	#AR_PHY_CHNINFO_GAINDIFF
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x174 : 0x178))

	)

534 
	#AR_PHY_CHNINFO_FINETIM
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x178 : 0x17c))

	)

535 
	#AR_PHY_CHAN_INFO_GAIN_0
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x17¯: 0x180))

	)

536 
	#AR_PHY_SCRAMBLER_SEED
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x184 : 0x190))

	)

537 
	#AR_PHY_CCK_TX_CTRL
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x188 : 0x194))

	)

539 
	#AR_PHY_HEAVYCLIP_CTL
 (
AR_SM_BASE
 + (
	`AR_SREV_9561
(
ah
Ë? 0x198 : 0x1a4))

	)

540 
	#AR_PHY_HEAVYCLIP_20
 (
AR_SM_BASE
 + 0x1a8)

	)

541 
	#AR_PHY_HEAVYCLIP_40
 (
AR_SM_BASE
 + 0x1ac)

	)

542 
	#AR_PHY_HEAVYCLIP_1
 (
AR_SM_BASE
 + 0x19c)

	)

543 
	#AR_PHY_HEAVYCLIP_2
 (
AR_SM_BASE
 + 0x1a0)

	)

544 
	#AR_PHY_HEAVYCLIP_3
 (
AR_SM_BASE
 + 0x1a4)

	)

545 
	#AR_PHY_HEAVYCLIP_4
 (
AR_SM_BASE
 + 0x1a8)

	)

546 
	#AR_PHY_HEAVYCLIP_5
 (
AR_SM_BASE
 + 0x1ac)

	)

547 
	#AR_PHY_ILLEGAL_TXRATE
 (
AR_SM_BASE
 + 0x1b0)

	)

549 
	#AR_PHY_POWER_TX_RATE
(
_d
Ë(
AR_SM_BASE
 + 0x1c0 + ((_dË<< 2))

	)

551 
	#AR_PHY_PWRTX_MAX
 (
AR_SM_BASE
 + 0x1f0)

	)

552 
	#AR_PHY_POWER_TX_SUB
 (
AR_SM_BASE
 + 0x1f4)

	)

554 
	#AR_PHY_TPC_1
 (
AR_SM_BASE
 + 0x1f8)

	)

555 
	#AR_PHY_TPC_1_FORCED_DAC_GAIN
 0x0000003e

	)

556 
	#AR_PHY_TPC_1_FORCED_DAC_GAIN_S
 1

	)

557 
	#AR_PHY_TPC_1_FORCE_DAC_GAIN
 0x00000001

	)

558 
	#AR_PHY_TPC_1_FORCE_DAC_GAIN_S
 0

	)

560 
	#AR_PHY_TPC_4_B0
 (
AR_SM_BASE
 + 0x204)

	)

561 
	#AR_PHY_TPC_5_B0
 (
AR_SM_BASE
 + 0x208)

	)

562 
	#AR_PHY_TPC_6_B0
 (
AR_SM_BASE
 + 0x20c)

	)

564 
	#AR_PHY_TPC_11_B0
 (
AR_SM_BASE
 + 0x220)

	)

565 
	#AR_PHY_TPC_11_B1
 (
AR_SM1_BASE
 + 0x220)

	)

566 
	#AR_PHY_TPC_11_B2
 (
AR_SM2_BASE
 + 0x220)

	)

567 
	#AR_PHY_TPC_11_OLPC_GAIN_DELTA
 0x00ff0000

	)

568 
	#AR_PHY_TPC_11_OLPC_GAIN_DELTA_S
 16

	)

570 
	#AR_PHY_TPC_12
 (
AR_SM_BASE
 + 0x224)

	)

571 
	#AR_PHY_TPC_12_DESIRED_SCALE_HT40_5
 0x3e000000

	)

572 
	#AR_PHY_TPC_12_DESIRED_SCALE_HT40_5_S
 25

	)

574 
	#AR_PHY_TPC_18
 (
AR_SM_BASE
 + 0x23c)

	)

575 
	#AR_PHY_TPC_18_THERM_CAL_VALUE
 0x000000ff

	)

576 
	#AR_PHY_TPC_18_THERM_CAL_VALUE_S
 0

	)

577 
	#AR_PHY_TPC_18_VOLT_CAL_VALUE
 0x0000ff00

	)

578 
	#AR_PHY_TPC_18_VOLT_CAL_VALUE_S
 8

	)

580 
	#AR_PHY_TPC_19
 (
AR_SM_BASE
 + 0x240)

	)

581 
	#AR_PHY_TPC_19_ALPHA_VOLT
 0x001f0000

	)

582 
	#AR_PHY_TPC_19_ALPHA_VOLT_S
 16

	)

583 
	#AR_PHY_TPC_19_ALPHA_THERM
 0xff

	)

584 
	#AR_PHY_TPC_19_ALPHA_THERM_S
 0

	)

586 
	#AR_PHY_TX_FORCED_GAIN
 (
AR_SM_BASE
 + 0x258)

	)

587 
	#AR_PHY_TX_FORCED_GAIN_FORCE_TX_GAIN
 0x00000001

	)

588 
	#AR_PHY_TX_FORCED_GAIN_FORCE_TX_GAIN_S
 0

	)

589 
	#AR_PHY_TX_FORCED_GAIN_FORCED_TXBB1DBGAIN
 0x0000000e

	)

590 
	#AR_PHY_TX_FORCED_GAIN_FORCED_TXBB1DBGAIN_S
 1

	)

591 
	#AR_PHY_TX_FORCED_GAIN_FORCED_TXBB6DBGAIN
 0x00000030

	)

592 
	#AR_PHY_TX_FORCED_GAIN_FORCED_TXBB6DBGAIN_S
 4

	)

593 
	#AR_PHY_TX_FORCED_GAIN_FORCED_TXMXRGAIN
 0x000003c0

	)

594 
	#AR_PHY_TX_FORCED_GAIN_FORCED_TXMXRGAIN_S
 6

	)

595 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNA
 0x00003c00

	)

596 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNA_S
 10

	)

597 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNB
 0x0003c000

	)

598 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNB_S
 14

	)

599 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNC
 0x003c0000

	)

600 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGNC_S
 18

	)

601 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGND
 0x00c00000

	)

602 
	#AR_PHY_TX_FORCED_GAIN_FORCED_PADRVGND_S
 22

	)

603 
	#AR_PHY_TX_FORCED_GAIN_FORCED_ENABLE_PAL
 0x01000000

	)

604 
	#AR_PHY_TX_FORCED_GAIN_FORCED_ENABLE_PAL_S
 24

	)

607 
	#AR_PHY_PDADC_TAB_0
 (
AR_SM_BASE
 + 0x280)

	)

609 
	#AR_PHY_TXGAIN_TABLE
 (
AR_SM_BASE
 + 0x300)

	)

611 
	#AR_PHY_TX_IQCAL_CONTROL_0
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
) ? \

612 0x3c4 : 0x444))

	)

613 
	#AR_PHY_TX_IQCAL_CONTROL_1
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
) ? \

614 0x3c8 : 0x448))

	)

615 
	#AR_PHY_TX_IQCAL_START
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
) ? \

616 0x3c4 : 0x440))

	)

617 
	#AR_PHY_TX_IQCAL_STATUS_B0
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
) ? \

618 0x3f0 : 0x48c))

	)

619 
	#AR_PHY_TX_IQCAL_CORR_COEFF_B0
(
_i
Ë(
AR_SM_BASE
 + \

620 (
	`AR_SREV_9485
(
ah
) ? \

621 0x3d0 : 0x450Ë+ ((
_i
Ë<< 2))

	)

622 
	#AR_PHY_RTT_CTRL
 (
AR_SM_BASE
 + 0x380)

	)

624 
	#AR_PHY_WATCHDOG_STATUS
 (
AR_SM_BASE
 + 0x5c0)

	)

625 
	#AR_PHY_WATCHDOG_CTL_1
 (
AR_SM_BASE
 + 0x5c4)

	)

626 
	#AR_PHY_WATCHDOG_CTL_2
 (
AR_SM_BASE
 + 0x5c8)

	)

627 
	#AR_PHY_WATCHDOG_CTL
 (
AR_SM_BASE
 + 0x5cc)

	)

628 
	#AR_PHY_ONLY_WARMRESET
 (
AR_SM_BASE
 + 0x5d0)

	)

629 
	#AR_PHY_ONLY_CTL
 (
AR_SM_BASE
 + 0x5d4)

	)

630 
	#AR_PHY_ECO_CTRL
 (
AR_SM_BASE
 + 0x5dc)

	)

632 
	#AR_PHY_BB_THERM_ADC_1
 (
AR_SM_BASE
 + 0x248)

	)

633 
	#AR_PHY_BB_THERM_ADC_1_INIT_THERM
 0x000000ff

	)

634 
	#AR_PHY_BB_THERM_ADC_1_INIT_THERM_S
 0

	)

636 
	#AR_PHY_BB_THERM_ADC_3
 (
AR_SM_BASE
 + 0x250)

	)

637 
	#AR_PHY_BB_THERM_ADC_3_THERM_ADC_SCALE_GAIN
 0x0001ff00

	)

638 
	#AR_PHY_BB_THERM_ADC_3_THERM_ADC_SCALE_GAIN_S
 8

	)

639 
	#AR_PHY_BB_THERM_ADC_3_THERM_ADC_OFFSET
 0x000000ff

	)

640 
	#AR_PHY_BB_THERM_ADC_3_THERM_ADC_OFFSET_S
 0

	)

642 
	#AR_PHY_BB_THERM_ADC_4
 (
AR_SM_BASE
 + 0x254)

	)

643 
	#AR_PHY_BB_THERM_ADC_4_LATEST_THERM_VALUE
 0x000000ff

	)

644 
	#AR_PHY_BB_THERM_ADC_4_LATEST_THERM_VALUE_S
 0

	)

645 
	#AR_PHY_BB_THERM_ADC_4_LATEST_VOLT_VALUE
 0x0000ff00

	)

646 
	#AR_PHY_BB_THERM_ADC_4_LATEST_VOLT_VALUE_S
 8

	)

648 
	#AR_PHY_65NM_CH0_TXRF3
 0x16048

	)

649 
	#AR_PHY_65NM_CH0_TXRF3_CAPDIV2G
 0x0000001e

	)

650 
	#AR_PHY_65NM_CH0_TXRF3_CAPDIV2G_S
 1

	)

652 
	#AR_PHY_65NM_CH0_SYNTH4
 0x1608c

	)

653 
	#AR_PHY_SYNTH4_LONG_SHIFT_SELECT
 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
◊h)Ë? 0x00000001 : 0x00000002)

	)

654 
	#AR_PHY_SYNTH4_LONG_SHIFT_SELECT_S
 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
◊h)Ë? 0 : 1)

	)

655 
	#AR_PHY_65NM_CH0_SYNTH7
 0x16098

	)

656 
	#AR_PHY_65NM_CH0_SYNTH12
 0x160ac

	)

657 
	#AR_PHY_65NM_CH0_BIAS1
 0x160c0

	)

658 
	#AR_PHY_65NM_CH0_BIAS2
 0x160c4

	)

659 
	#AR_PHY_65NM_CH0_BIAS4
 0x160cc

	)

660 
	#AR_PHY_65NM_CH0_RXTX2
 0x16104

	)

661 
	#AR_PHY_65NM_CH1_RXTX2
 0x16504

	)

662 
	#AR_PHY_65NM_CH2_RXTX2
 0x16904

	)

663 
	#AR_PHY_65NM_CH0_RXTX4
 0x1610c

	)

664 
	#AR_PHY_65NM_CH1_RXTX4
 0x1650c

	)

665 
	#AR_PHY_65NM_CH2_RXTX4
 0x1690c

	)

667 
	#AR_PHY_65NM_CH0_BB1
 0x16140

	)

668 
	#AR_PHY_65NM_CH0_BB2
 0x16144

	)

669 
	#AR_PHY_65NM_CH0_BB3
 0x16148

	)

670 
	#AR_PHY_65NM_CH1_BB1
 0x16540

	)

671 
	#AR_PHY_65NM_CH1_BB2
 0x16544

	)

672 
	#AR_PHY_65NM_CH1_BB3
 0x16548

	)

673 
	#AR_PHY_65NM_CH2_BB1
 0x16940

	)

674 
	#AR_PHY_65NM_CH2_BB2
 0x16944

	)

675 
	#AR_PHY_65NM_CH2_BB3
 0x16948

	)

677 
	#AR_PHY_65NM_CH0_SYNTH12_VREFMUL3
 0x00780000

	)

678 
	#AR_PHY_65NM_CH0_SYNTH12_VREFMUL3_S
 19

	)

679 
	#AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK
 0x00000004

	)

680 
	#AR_PHY_65NM_CH0_RXTX2_SYNTHON_MASK_S
 2

	)

681 
	#AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK
 0x00000008

	)

682 
	#AR_PHY_65NM_CH0_RXTX2_SYNTHOVR_MASK_S
 3

	)

684 
	#AR_CH0_TOP
 (
	`AR_SREV_9300
(
ah
) ? 0x16288 : \

685 (((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
◊h)Ë? 0x1628¯: 0x16280)))

	)

686 
	#AR_CH0_TOP_XPABIASLVL
 (
	`AR_SREV_9550
(
ah
Ë? 0x3c0 : 0x300)

	)

687 
	#AR_CH0_TOP_XPABIASLVL_S
 (
	`AR_SREV_9550
(
ah
Ë? 6 : 8)

	)

689 
	#AR_CH0_THERM
 (
	`AR_SREV_9300
(
ah
) ? 0x16290 : \

690 ((
	`AR_SREV_9485
(
ah
Ë? 0x1628¯: 0x16294)))

	)

691 
	#AR_CH0_THERM_XPABIASLVL_MSB
 0x3

	)

692 
	#AR_CH0_THERM_XPABIASLVL_MSB_S
 0

	)

693 
	#AR_CH0_THERM_XPASHORT2GND
 0x4

	)

694 
	#AR_CH0_THERM_XPASHORT2GND_S
 2

	)

696 
	#AR_SWITCH_TABLE_COM_ALL
 (0xffff)

	)

697 
	#AR_SWITCH_TABLE_COM_ALL_S
 (0)

	)

698 
	#AR_SWITCH_TABLE_COM_AR9462_ALL
 (0xffffff)

	)

699 
	#AR_SWITCH_TABLE_COM_AR9462_ALL_S
 (0)

	)

700 
	#AR_SWITCH_TABLE_COM_AR9550_ALL
 (0xffffff)

	)

701 
	#AR_SWITCH_TABLE_COM_AR9550_ALL_S
 (0)

	)

702 
	#AR_SWITCH_TABLE_COM_SPDT
 (0x00f00000)

	)

703 
	#AR_SWITCH_TABLE_COM_SPDT_ALL
 (0x0000fff0)

	)

704 
	#AR_SWITCH_TABLE_COM_SPDT_ALL_S
 (4)

	)

706 
	#AR_SWITCH_TABLE_COM2_ALL
 (0xffffff)

	)

707 
	#AR_SWITCH_TABLE_COM2_ALL_S
 (0)

	)

709 
	#AR_SWITCH_TABLE_ALL
 (0xfff)

	)

710 
	#AR_SWITCH_TABLE_ALL_S
 (0)

	)

712 
	#AR_PHY_65NM_CH0_THERM
 (
	`AR_SREV_9300
(
ah
) ? 0x16290 :\

713 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
◊h)Ë? 0x16294 : 0x1628c))

	)

715 
	#AR_PHY_65NM_CH0_THERM_LOCAL
 0x80000000

	)

716 
	#AR_PHY_65NM_CH0_THERM_LOCAL_S
 31

	)

717 
	#AR_PHY_65NM_CH0_THERM_START
 0x20000000

	)

718 
	#AR_PHY_65NM_CH0_THERM_START_S
 29

	)

719 
	#AR_PHY_65NM_CH0_THERM_SAR_ADC_OUT
 0x0000ff00

	)

720 
	#AR_PHY_65NM_CH0_THERM_SAR_ADC_OUT_S
 8

	)

722 
	#AR_CH0_TOP2
 (
	`AR_SREV_9300
(
ah
) ? 0x1628c : \

723 (
	`AR_SREV_9462
(
ah
Ë? 0x16290 : 0x16284))

	)

724 
	#AR_CH0_TOP2_XPABIASLVL
 (
	`AR_SREV_9561
(
ah
Ë? 0x1e00 : 0xf000)

	)

725 
	#AR_CH0_TOP2_XPABIASLVL_S
 12

	)

727 
	#AR_CH0_XTAL
 (
	`AR_SREV_9300
(
ah
) ? 0x16294 : \

728 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) ? 0x16298 : \

729 (
	`AR_SREV_9561
(
ah
Ë? 0x162c0 : 0x16290)))

	)

730 
	#AR_CH0_XTAL_CAPINDAC
 0x7f000000

	)

731 
	#AR_CH0_XTAL_CAPINDAC_S
 24

	)

732 
	#AR_CH0_XTAL_CAPOUTDAC
 0x00„0000

	)

733 
	#AR_CH0_XTAL_CAPOUTDAC_S
 17

	)

735 
	#AR_PHY_PMU1
 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) ? 0x16340 : \

736 (
	`AR_SREV_9561
(
ah
Ë? 0x16cc0 : 0x16c40))

	)

737 
	#AR_PHY_PMU1_PWD
 0x1

	)

738 
	#AR_PHY_PMU1_PWD_S
 0

	)

740 
	#AR_PHY_PMU2
 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) ? 0x16344 : \

741 (
	`AR_SREV_9561
(
ah
Ë? 0x16cc4 : 0x16c44))

	)

742 
	#AR_PHY_PMU2_PGM
 0x00200000

	)

743 
	#AR_PHY_PMU2_PGM_S
 21

	)

745 
	#AR_PHY_RX1DB_BIQUAD_LONG_SHIFT
 0x00380000

	)

746 
	#AR_PHY_RX1DB_BIQUAD_LONG_SHIFT_S
 19

	)

747 
	#AR_PHY_RX6DB_BIQUAD_LONG_SHIFT
 0x00c00000

	)

748 
	#AR_PHY_RX6DB_BIQUAD_LONG_SHIFT_S
 22

	)

749 
	#AR_PHY_LNAGAIN_LONG_SHIFT
 0xe0000000

	)

750 
	#AR_PHY_LNAGAIN_LONG_SHIFT_S
 29

	)

751 
	#AR_PHY_MXRGAIN_LONG_SHIFT
 0x03000000

	)

752 
	#AR_PHY_MXRGAIN_LONG_SHIFT_S
 24

	)

753 
	#AR_PHY_VGAGAIN_LONG_SHIFT
 0x1c000000

	)

754 
	#AR_PHY_VGAGAIN_LONG_SHIFT_S
 26

	)

755 
	#AR_PHY_SCFIR_GAIN_LONG_SHIFT
 0x00000001

	)

756 
	#AR_PHY_SCFIR_GAIN_LONG_SHIFT_S
 0

	)

757 
	#AR_PHY_MANRXGAIN_LONG_SHIFT
 0x00000002

	)

758 
	#AR_PHY_MANRXGAIN_LONG_SHIFT_S
 1

	)

763 
	#AR_PHY_CL_CAL_ENABLE
 0x00000002

	)

764 
	#AR_PHY_PARALLEL_CAL_ENABLE
 0x00000001

	)

765 
	#AR_PHY_TPCRG1_PD_CAL_ENABLE
 0x00400000

	)

766 
	#AR_PHY_TPCRG1_PD_CAL_ENABLE_S
 22

	)

768 
	#AR_PHY_ADDAC_PARACTL_OFF_PWDADC
 0x00008000

	)

770 
	#AR_PHY_FCAL20_CAP_STATUS_0
 0x01f00000

	)

771 
	#AR_PHY_FCAL20_CAP_STATUS_0_S
 20

	)

773 
	#AR_PHY_RFBUS_REQ_EN
 0x00000001

	)

774 
	#AR_PHY_RFBUS_GRANT_EN
 0x00000001

	)

775 
	#AR_PHY_GC_TURBO_MODE
 0x00000001

	)

776 
	#AR_PHY_GC_TURBO_SHORT
 0x00000002

	)

777 
	#AR_PHY_GC_DYN2040_EN
 0x00000004

	)

778 
	#AR_PHY_GC_DYN2040_PRI_ONLY
 0x00000008

	)

779 
	#AR_PHY_GC_DYN2040_PRI_CH
 0x00000010

	)

780 
	#AR_PHY_GC_DYN2040_PRI_CH_S
 4

	)

781 
	#AR_PHY_GC_DYN2040_EXT_CH
 0x00000020

	)

782 
	#AR_PHY_GC_HT_EN
 0x00000040

	)

783 
	#AR_PHY_GC_SHORT_GI_40
 0x00000080

	)

784 
	#AR_PHY_GC_WALSH
 0x00000100

	)

785 
	#AR_PHY_GC_SINGLE_HT_LTF1
 0x00000200

	)

786 
	#AR_PHY_GC_GF_DETECT_EN
 0x00000400

	)

787 
	#AR_PHY_GC_ENABLE_DAC_FIFO
 0x00000800

	)

788 
	#AR_PHY_RX_DELAY_DELAY
 0x00003FFF

	)

790 
	#AR_PHY_CALMODE_IQ
 0x00000000

	)

791 
	#AR_PHY_CALMODE_ADC_GAIN
 0x00000001

	)

792 
	#AR_PHY_CALMODE_ADC_DC_PER
 0x00000002

	)

793 
	#AR_PHY_CALMODE_ADC_DC_INIT
 0x00000003

	)

794 
	#AR_PHY_SWAP_ALT_CHAIN
 0x00000040

	)

795 
	#AR_PHY_MODE_OFDM
 0x00000000

	)

796 
	#AR_PHY_MODE_CCK
 0x00000001

	)

797 
	#AR_PHY_MODE_DYNAMIC
 0x00000004

	)

798 
	#AR_PHY_MODE_DYNAMIC_S
 2

	)

799 
	#AR_PHY_MODE_HALF
 0x00000020

	)

800 
	#AR_PHY_MODE_QUARTER
 0x00000040

	)

801 
	#AR_PHY_MAC_CLK_MODE
 0x00000080

	)

802 
	#AR_PHY_MODE_DYN_CCK_DISABLE
 0x00000100

	)

803 
	#AR_PHY_MODE_SVD_HALF
 0x00000200

	)

804 
	#AR_PHY_ACTIVE_EN
 0x00000001

	)

805 
	#AR_PHY_ACTIVE_DIS
 0x00000000

	)

806 
	#AR_PHY_FORCE_XPA_CFG
 0x000000001

	)

807 
	#AR_PHY_FORCE_XPA_CFG_S
 0

	)

808 
	#AR_PHY_XPA_TIMING_CTL_TX_END_XPAB_OFF
 0xFF000000

	)

809 
	#AR_PHY_XPA_TIMING_CTL_TX_END_XPAB_OFF_S
 24

	)

810 
	#AR_PHY_XPA_TIMING_CTL_TX_END_XPAA_OFF
 0x00FF0000

	)

811 
	#AR_PHY_XPA_TIMING_CTL_TX_END_XPAA_OFF_S
 16

	)

812 
	#AR_PHY_XPA_TIMING_CTL_FRAME_XPAB_ON
 0x0000FF00

	)

813 
	#AR_PHY_XPA_TIMING_CTL_FRAME_XPAB_ON_S
 8

	)

814 
	#AR_PHY_XPA_TIMING_CTL_FRAME_XPAA_ON
 0x000000FF

	)

815 
	#AR_PHY_XPA_TIMING_CTL_FRAME_XPAA_ON_S
 0

	)

816 
	#AR_PHY_TX_END_TO_A2_RX_ON
 0x00FF0000

	)

817 
	#AR_PHY_TX_END_TO_A2_RX_ON_S
 16

	)

818 
	#AR_PHY_TX_END_DATA_START
 0x000000FF

	)

819 
	#AR_PHY_TX_END_DATA_START_S
 0

	)

820 
	#AR_PHY_TX_END_PA_ON
 0x0000FF00

	)

821 
	#AR_PHY_TX_END_PA_ON_S
 8

	)

822 
	#AR_PHY_TPCRG5_PD_GAIN_OVERLAP
 0x0000000F

	)

823 
	#AR_PHY_TPCRG5_PD_GAIN_OVERLAP_S
 0

	)

824 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1
 0x000003F0

	)

825 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1_S
 4

	)

826 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2
 0x0000FC00

	)

827 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2_S
 10

	)

828 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3
 0x003F0000

	)

829 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3_S
 16

	)

830 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4
 0x0FC00000

	)

831 
	#AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4_S
 22

	)

832 
	#AR_PHY_TPCRG1_NUM_PD_GAIN
 0x0000c000

	)

833 
	#AR_PHY_TPCRG1_NUM_PD_GAIN_S
 14

	)

834 
	#AR_PHY_TPCRG1_PD_GAIN_1
 0x00030000

	)

835 
	#AR_PHY_TPCRG1_PD_GAIN_1_S
 16

	)

836 
	#AR_PHY_TPCRG1_PD_GAIN_2
 0x000C0000

	)

837 
	#AR_PHY_TPCRG1_PD_GAIN_2_S
 18

	)

838 
	#AR_PHY_TPCRG1_PD_GAIN_3
 0x00300000

	)

839 
	#AR_PHY_TPCRG1_PD_GAIN_3_S
 20

	)

840 
	#AR_PHY_TPCGR1_FORCED_DAC_GAIN
 0x0000003e

	)

841 
	#AR_PHY_TPCGR1_FORCED_DAC_GAIN_S
 1

	)

842 
	#AR_PHY_TPCGR1_FORCE_DAC_GAIN
 0x00000001

	)

843 
	#AR_PHY_TXGAIN_FORCE
 0x00000001

	)

844 
	#AR_PHY_TXGAIN_FORCE_S
 0

	)

845 
	#AR_PHY_TXGAIN_FORCED_PADVGNRA
 0x00003c00

	)

846 
	#AR_PHY_TXGAIN_FORCED_PADVGNRA_S
 10

	)

847 
	#AR_PHY_TXGAIN_FORCED_PADVGNRB
 0x0003c000

	)

848 
	#AR_PHY_TXGAIN_FORCED_PADVGNRB_S
 14

	)

849 
	#AR_PHY_TXGAIN_FORCED_PADVGNRD
 0x00c00000

	)

850 
	#AR_PHY_TXGAIN_FORCED_PADVGNRD_S
 22

	)

851 
	#AR_PHY_TXGAIN_FORCED_TXMXRGAIN
 0x000003c0

	)

852 
	#AR_PHY_TXGAIN_FORCED_TXMXRGAIN_S
 6

	)

853 
	#AR_PHY_TXGAIN_FORCED_TXBB1DBGAIN
 0x0000000e

	)

854 
	#AR_PHY_TXGAIN_FORCED_TXBB1DBGAIN_S
 1

	)

856 
	#AR_PHY_POWER_TX_RATE1
 0x9934

	)

857 
	#AR_PHY_POWER_TX_RATE2
 0x9938

	)

858 
	#AR_PHY_POWER_TX_RATE_MAX
 0x993c

	)

859 
	#AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE
 0x00000040

	)

860 
	#PHY_AGC_CLR
 0x10000000

	)

861 
	#RFSILENT_BB
 0x00002000

	)

862 
	#AR_PHY_CHAN_INFO_GAIN_DIFF_PPM_MASK
 0xFFF

	)

863 
	#AR_PHY_CHAN_INFO_GAIN_DIFF_PPM_SIGNED_BIT
 0x800

	)

864 
	#AR_PHY_CHAN_INFO_GAIN_DIFF_UPPER_LIMIT
 320

	)

865 
	#AR_PHY_CHAN_INFO_MEMORY_CAPTURE_MASK
 0x0001

	)

866 
	#AR_PHY_RX_DELAY_DELAY
 0x00003FFF

	)

867 
	#AR_PHY_CCK_TX_CTRL_JAPAN
 0x00000010

	)

869 
	#AR_PHY_SPECTRAL_SCAN_ENABLE
 0x00000001

	)

870 
	#AR_PHY_SPECTRAL_SCAN_ENABLE_S
 0

	)

871 
	#AR_PHY_SPECTRAL_SCAN_ACTIVE
 0x00000002

	)

872 
	#AR_PHY_SPECTRAL_SCAN_ACTIVE_S
 1

	)

873 
	#AR_PHY_SPECTRAL_SCAN_FFT_PERIOD
 0x000000F0

	)

874 
	#AR_PHY_SPECTRAL_SCAN_FFT_PERIOD_S
 4

	)

875 
	#AR_PHY_SPECTRAL_SCAN_PERIOD
 0x0000FF00

	)

876 
	#AR_PHY_SPECTRAL_SCAN_PERIOD_S
 8

	)

877 
	#AR_PHY_SPECTRAL_SCAN_COUNT
 0x0FFF0000

	)

878 
	#AR_PHY_SPECTRAL_SCAN_COUNT_S
 16

	)

879 
	#AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT
 0x10000000

	)

880 
	#AR_PHY_SPECTRAL_SCAN_SHORT_REPEAT_S
 28

	)

881 
	#AR_PHY_SPECTRAL_SCAN_PRIORITY
 0x20000000

	)

882 
	#AR_PHY_SPECTRAL_SCAN_PRIORITY_S
 29

	)

883 
	#AR_PHY_SPECTRAL_SCAN_USE_ERR5
 0x40000000

	)

884 
	#AR_PHY_SPECTRAL_SCAN_USE_ERR5_S
 30

	)

885 
	#AR_PHY_SPECTRAL_SCAN_COMPRESSED_RPT
 0x80000000

	)

886 
	#AR_PHY_SPECTRAL_SCAN_COMPRESSED_RPT_S
 31

	)

888 
	#AR_PHY_CHANNEL_STATUS_RX_CLEAR
 0x00000004

	)

889 
	#AR_PHY_RTT_CTRL_ENA_RADIO_RETENTION
 0x00000001

	)

890 
	#AR_PHY_RTT_CTRL_ENA_RADIO_RETENTION_S
 0

	)

891 
	#AR_PHY_RTT_CTRL_RESTORE_MASK
 0x0000007E

	)

892 
	#AR_PHY_RTT_CTRL_RESTORE_MASK_S
 1

	)

893 
	#AR_PHY_RTT_CTRL_FORCE_RADIO_RESTORE
 0x00000080

	)

894 
	#AR_PHY_RTT_CTRL_FORCE_RADIO_RESTORE_S
 7

	)

895 
	#AR_PHY_RTT_SW_RTT_TABLE_ACCESS
 0x00000001

	)

896 
	#AR_PHY_RTT_SW_RTT_TABLE_ACCESS_S
 0

	)

897 
	#AR_PHY_RTT_SW_RTT_TABLE_WRITE
 0x00000002

	)

898 
	#AR_PHY_RTT_SW_RTT_TABLE_WRITE_S
 1

	)

899 
	#AR_PHY_RTT_SW_RTT_TABLE_ADDR
 0x0000001C

	)

900 
	#AR_PHY_RTT_SW_RTT_TABLE_ADDR_S
 2

	)

901 
	#AR_PHY_RTT_SW_RTT_TABLE_DATA
 0xFFFFFFF0

	)

902 
	#AR_PHY_RTT_SW_RTT_TABLE_DATA_S
 4

	)

903 
	#AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL
 0x80000000

	)

904 
	#AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL_S
 31

	)

905 
	#AR_PHY_TX_IQCAL_CONTROL_1_IQCORR_I_Q_COFF_DELPT
 0x01fc0000

	)

906 
	#AR_PHY_TX_IQCAL_CONTROL_1_IQCORR_I_Q_COFF_DELPT_S
 18

	)

907 
	#AR_PHY_TX_IQCAL_START_DO_CAL
 0x00000001

	)

908 
	#AR_PHY_TX_IQCAL_START_DO_CAL_S
 0

	)

910 
	#AR_PHY_TX_IQCAL_STATUS_FAILED
 0x00000001

	)

911 
	#AR_PHY_CALIBRATED_GAINS_0
 0x3e

	)

912 
	#AR_PHY_CALIBRATED_GAINS_0_S
 1

	)

914 
	#AR_PHY_TX_IQCAL_CORR_COEFF_00_COEFF_TABLE
 0x00003fff

	)

915 
	#AR_PHY_TX_IQCAL_CORR_COEFF_00_COEFF_TABLE_S
 0

	)

916 
	#AR_PHY_TX_IQCAL_CORR_COEFF_01_COEFF_TABLE
 0x0fffc000

	)

917 
	#AR_PHY_TX_IQCAL_CORR_COEFF_01_COEFF_TABLE_S
 14

	)

919 
	#AR_PHY_65NM_CH0_RXTX4_THERM_ON
 0x10000000

	)

920 
	#AR_PHY_65NM_CH0_RXTX4_THERM_ON_S
 28

	)

921 
	#AR_PHY_65NM_CH0_RXTX4_THERM_ON_OVR
 0x20000000

	)

922 
	#AR_PHY_65NM_CH0_RXTX4_THERM_ON_OVR_S
 29

	)

924 
	#AR_PHY_65NM_RXTX4_XLNA_BIAS
 0xC0000000

	)

925 
	#AR_PHY_65NM_RXTX4_XLNA_BIAS_S
 30

	)

930 
	#AR_CHAN1_BASE
 0xa800

	)

932 
	#AR_PHY_EXT_CCA_1
 (
AR_CHAN1_BASE
 + 0x30)

	)

933 
	#AR_PHY_TX_PHASE_RAMP_1
 (
AR_CHAN1_BASE
 + 0xd0)

	)

934 
	#AR_PHY_ADC_GAIN_DC_CORR_1
 (
AR_CHAN1_BASE
 + 0xd4)

	)

936 
	#AR_PHY_SPUR_REPORT_1
 (
AR_CHAN1_BASE
 + 0xa8)

	)

937 
	#AR_PHY_CHAN_INFO_TAB_1
 (
AR_CHAN1_BASE
 + 0x300)

	)

938 
	#AR_PHY_RX_IQCAL_CORR_B1
 (
AR_CHAN1_BASE
 + 0xdc)

	)

943 
	#AR_PHY_CH1_EXT_MINCCA_PWR
 0x01FF0000

	)

944 
	#AR_PHY_CH1_EXT_MINCCA_PWR_S
 16

	)

949 
	#AR_AGC1_BASE
 0x´00

	)

951 
	#AR_PHY_FORCEMAX_GAINS_1
 (
AR_AGC1_BASE
 + 0x4)

	)

952 
	#AR_PHY_EXT_ATTEN_CTL_1
 (
AR_AGC1_BASE
 + 0x18)

	)

953 
	#AR_PHY_CCA_1
 (
AR_AGC1_BASE
 + 0x1c)

	)

954 
	#AR_PHY_CCA_CTRL_1
 (
AR_AGC1_BASE
 + 0x20)

	)

955 
	#AR_PHY_RSSI_1
 (
AR_AGC1_BASE
 + 0x180)

	)

956 
	#AR_PHY_SPUR_CCK_REP_1
 (
AR_AGC1_BASE
 + 0x184)

	)

957 
	#AR_PHY_RX_OCGAIN_2
 (
AR_AGC1_BASE
 + 0x200)

	)

962 
	#AR_PHY_CH1_MINCCA_PWR
 0x1FF00000

	)

963 
	#AR_PHY_CH1_MINCCA_PWR_S
 20

	)

968 
	#AR_SM1_BASE
 0xb200

	)

970 
	#AR_PHY_SWITCH_CHAIN_1
 (
AR_SM1_BASE
 + 0x84)

	)

971 
	#AR_PHY_FCAL_2_1
 (
AR_SM1_BASE
 + 0xd0)

	)

972 
	#AR_PHY_DFT_TONE_CTL_1
 (
AR_SM1_BASE
 + 0xd4)

	)

973 
	#AR_PHY_CL_TAB_1
 (
AR_SM1_BASE
 + 0x100)

	)

974 
	#AR_PHY_CHAN_INFO_GAIN_1
 (
AR_SM1_BASE
 + 0x180)

	)

975 
	#AR_PHY_TPC_4_B1
 (
AR_SM1_BASE
 + 0x204)

	)

976 
	#AR_PHY_TPC_5_B1
 (
AR_SM1_BASE
 + 0x208)

	)

977 
	#AR_PHY_TPC_6_B1
 (
AR_SM1_BASE
 + 0x20c)

	)

978 
	#AR_PHY_TPC_11_B1
 (
AR_SM1_BASE
 + 0x220)

	)

979 
	#AR_PHY_PDADC_TAB_1
 (
AR_SM1_BASE
 + (
	`AR_SREV_9462_20_OR_LATER
(
ah
) ? \

980 0x280 : 0x240))

	)

981 
	#AR_PHY_TPC_19_B1
 (
AR_SM1_BASE
 + 0x240)

	)

982 
	#AR_PHY_TPC_19_B1_ALPHA_THERM
 0xff

	)

983 
	#AR_PHY_TPC_19_B1_ALPHA_THERM_S
 0

	)

984 
	#AR_PHY_TX_IQCAL_STATUS_B1
 (
AR_SM1_BASE
 + 0x48c)

	)

985 
	#AR_PHY_TX_IQCAL_CORR_COEFF_B1
(
_i
Ë(
AR_SM1_BASE
 + 0x450 + ((_iË<< 2))

	)

987 
	#AR_PHY_RTT_TABLE_SW_INTF_B
(
i
) (0x384 + ((i) ? \

988 
AR_SM1_BASE
 : 
AR_SM_BASE
))

	)

989 
	#AR_PHY_RTT_TABLE_SW_INTF_1_B
(
i
) (0x388 + ((i) ? \

990 
AR_SM1_BASE
 : 
AR_SM_BASE
))

	)

994 
	#AR_CHAN2_BASE
 0xb800

	)

996 
	#AR_PHY_EXT_CCA_2
 (
AR_CHAN2_BASE
 + 0x30)

	)

997 
	#AR_PHY_TX_PHASE_RAMP_2
 (
AR_CHAN2_BASE
 + 0xd0)

	)

998 
	#AR_PHY_ADC_GAIN_DC_CORR_2
 (
AR_CHAN2_BASE
 + 0xd4)

	)

1000 
	#AR_PHY_SPUR_REPORT_2
 (
AR_CHAN2_BASE
 + 0xa8)

	)

1001 
	#AR_PHY_CHAN_INFO_TAB_2
 (
AR_CHAN2_BASE
 + 0x300)

	)

1002 
	#AR_PHY_RX_IQCAL_CORR_B2
 (
AR_CHAN2_BASE
 + 0xdc)

	)

1007 
	#AR_PHY_CH2_EXT_MINCCA_PWR
 0x01FF0000

	)

1008 
	#AR_PHY_CH2_EXT_MINCCA_PWR_S
 16

	)

1012 
	#AR_AGC2_BASE
 0xbe00

	)

1014 
	#AR_PHY_FORCEMAX_GAINS_2
 (
AR_AGC2_BASE
 + 0x4)

	)

1015 
	#AR_PHY_EXT_ATTEN_CTL_2
 (
AR_AGC2_BASE
 + 0x18)

	)

1016 
	#AR_PHY_CCA_2
 (
AR_AGC2_BASE
 + 0x1c)

	)

1017 
	#AR_PHY_CCA_CTRL_2
 (
AR_AGC2_BASE
 + 0x20)

	)

1018 
	#AR_PHY_RSSI_2
 (
AR_AGC2_BASE
 + 0x180)

	)

1023 
	#AR_PHY_CH2_MINCCA_PWR
 0x1FF00000

	)

1024 
	#AR_PHY_CH2_MINCCA_PWR_S
 20

	)

1029 
	#AR_SM2_BASE
 0xc200

	)

1031 
	#AR_PHY_SWITCH_CHAIN_2
 (
AR_SM2_BASE
 + 0x84)

	)

1032 
	#AR_PHY_FCAL_2_2
 (
AR_SM2_BASE
 + 0xd0)

	)

1033 
	#AR_PHY_DFT_TONE_CTL_2
 (
AR_SM2_BASE
 + 0xd4)

	)

1034 
	#AR_PHY_CL_TAB_2
 (
AR_SM2_BASE
 + 0x100)

	)

1035 
	#AR_PHY_CHAN_INFO_GAIN_2
 (
AR_SM2_BASE
 + 0x180)

	)

1036 
	#AR_PHY_TPC_4_B2
 (
AR_SM2_BASE
 + 0x204)

	)

1037 
	#AR_PHY_TPC_5_B2
 (
AR_SM2_BASE
 + 0x208)

	)

1038 
	#AR_PHY_TPC_6_B2
 (
AR_SM2_BASE
 + 0x20c)

	)

1039 
	#AR_PHY_TPC_11_B2
 (
AR_SM2_BASE
 + 0x220)

	)

1040 
	#AR_PHY_TPC_19_B2
 (
AR_SM2_BASE
 + 0x240)

	)

1041 
	#AR_PHY_TX_IQCAL_STATUS_B2
 (
AR_SM2_BASE
 + 0x48c)

	)

1042 
	#AR_PHY_TX_IQCAL_CORR_COEFF_B2
(
_i
Ë(
AR_SM2_BASE
 + 0x450 + ((_iË<< 2))

	)

1044 
	#AR_PHY_TX_IQCAL_STATUS_B2_FAILED
 0x00000001

	)

1049 
	#AR_AGC3_BASE
 0x˚00

	)

1051 
	#AR_PHY_RSSI_3
 (
AR_AGC3_BASE
 + 0x180)

	)

1054 
	#AR_GLB_BASE
 0x20000

	)

1055 
	#AR_GLB_GPIO_CONTROL
 (
AR_GLB_BASE
)

	)

1056 
	#AR_PHY_GLB_CONTROL
 (
AR_GLB_BASE
 + 0x44)

	)

1057 
	#AR_GLB_SCRATCH
(
_ah
Ë(
AR_GLB_BASE
 + \

1058 (
	`AR_SREV_9462_20_OR_LATER
(
_ah
Ë? 0x4¯: 0x50))

	)

1059 
	#AR_GLB_STATUS
 (
AR_GLB_BASE
 + 0x48)

	)

1064 
	#AR_PHY_CHAIN_OFFSET
 (
AR_CHAN1_BASE
 - 
AR_CHAN_BASE
)

	)

1066 
	#AR_PHY_NEW_ADC_DC_GAIN_CORR
(
_i
Ë(
AR_PHY_ADC_GAIN_DC_CORR_0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1067 
	#AR_PHY_NEW_ADC_DC_GAIN_CORR_9300_10
(
_i
Ë(
AR_PHY_ADC_GAIN_DC_CORR_0_9300_10
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1068 
	#AR_PHY_SWITCH_CHAIN
(
_i
Ë(
AR_PHY_SWITCH_CHAIN_0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1069 
	#AR_PHY_EXT_ATTEN_CTL
(
_i
Ë(
AR_PHY_EXT_ATTEN_CTL_0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1071 
	#AR_PHY_RXGAIN
(
_i
Ë(
AR_PHY_FORCEMAX_GAINS_0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1072 
	#AR_PHY_TPCRG5
(
_i
Ë(
AR_PHY_TPC_5_B0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1073 
	#AR_PHY_PDADC_TAB
(
_i
Ë(
AR_PHY_PDADC_TAB_0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1075 
	#AR_PHY_CAL_MEAS_0
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_0_B0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1076 
	#AR_PHY_CAL_MEAS_1
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_1_B0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1077 
	#AR_PHY_CAL_MEAS_2
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_2_B0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1078 
	#AR_PHY_CAL_MEAS_3
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_3_B0
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1079 
	#AR_PHY_CAL_MEAS_0_9300_10
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_0_B0_9300_10
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1080 
	#AR_PHY_CAL_MEAS_1_9300_10
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_1_B0_9300_10
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1081 
	#AR_PHY_CAL_MEAS_2_9300_10
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_2_B0_9300_10
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1082 
	#AR_PHY_CAL_MEAS_3_9300_10
(
_i
Ë(
AR_PHY_IQ_ADC_MEAS_3_B0_9300_10
 + (
AR_PHY_CHAIN_OFFSET
 * (_i)))

	)

1084 
	#AR_PHY_WATCHDOG_NON_IDLE_ENABLE
 0x00000001

	)

1085 
	#AR_PHY_WATCHDOG_IDLE_ENABLE
 0x00000002

	)

1086 
	#AR_PHY_WATCHDOG_IDLE_MASK
 0xFFFF0000

	)

1087 
	#AR_PHY_WATCHDOG_NON_IDLE_MASK
 0x0000FFFC

	)

1089 
	#AR_PHY_WATCHDOG_RST_ENABLE
 0x00000002

	)

1090 
	#AR_PHY_WATCHDOG_IRQ_ENABLE
 0x00000004

	)

1091 
	#AR_PHY_WATCHDOG_CNTL2_MASK
 0xFFFFFFF9

	)

1093 
	#AR_PHY_WATCHDOG_INFO
 0x00000007

	)

1094 
	#AR_PHY_WATCHDOG_INFO_S
 0

	)

1095 
	#AR_PHY_WATCHDOG_DET_HANG
 0x00000008

	)

1096 
	#AR_PHY_WATCHDOG_DET_HANG_S
 3

	)

1097 
	#AR_PHY_WATCHDOG_RADAR_SM
 0x000000F0

	)

1098 
	#AR_PHY_WATCHDOG_RADAR_SM_S
 4

	)

1099 
	#AR_PHY_WATCHDOG_RX_OFDM_SM
 0x00000F00

	)

1100 
	#AR_PHY_WATCHDOG_RX_OFDM_SM_S
 8

	)

1101 
	#AR_PHY_WATCHDOG_RX_CCK_SM
 0x0000F000

	)

1102 
	#AR_PHY_WATCHDOG_RX_CCK_SM_S
 12

	)

1103 
	#AR_PHY_WATCHDOG_TX_OFDM_SM
 0x000F0000

	)

1104 
	#AR_PHY_WATCHDOG_TX_OFDM_SM_S
 16

	)

1105 
	#AR_PHY_WATCHDOG_TX_CCK_SM
 0x00F00000

	)

1106 
	#AR_PHY_WATCHDOG_TX_CCK_SM_S
 20

	)

1107 
	#AR_PHY_WATCHDOG_AGC_SM
 0x0F000000

	)

1108 
	#AR_PHY_WATCHDOG_AGC_SM_S
 24

	)

1109 
	#AR_PHY_WATCHDOG_SRCH_SM
 0xF0000000

	)

1110 
	#AR_PHY_WATCHDOG_SRCH_SM_S
 28

	)

1112 
	#AR_PHY_WATCHDOG_STATUS_CLR
 0x00000008

	)

1117 
	#AR_PHY_XPA_TIMING_CTL
 (
AR_SM_BASE
 + 0x64)

	)

1119 
	#AR_PHY_PAPRD_AM2AM
 (
AR_CHAN_BASE
 + 0xe4)

	)

1120 
	#AR_PHY_PAPRD_AM2AM_MASK
 0x01ffffff

	)

1121 
	#AR_PHY_PAPRD_AM2AM_MASK_S
 0

	)

1123 
	#AR_PHY_PAPRD_AM2PM
 (
AR_CHAN_BASE
 + 0xe8)

	)

1124 
	#AR_PHY_PAPRD_AM2PM_MASK
 0x01ffffff

	)

1125 
	#AR_PHY_PAPRD_AM2PM_MASK_S
 0

	)

1127 
	#AR_PHY_PAPRD_HT40
 (
AR_CHAN_BASE
 + 0xec)

	)

1128 
	#AR_PHY_PAPRD_HT40_MASK
 0x01ffffff

	)

1129 
	#AR_PHY_PAPRD_HT40_MASK_S
 0

	)

1131 
	#AR_PHY_PAPRD_CTRL0_B0
 (
AR_CHAN_BASE
 + 0xf0)

	)

1132 
	#AR_PHY_PAPRD_CTRL0_B1
 (
AR_CHAN1_BASE
 + 0xf0)

	)

1133 
	#AR_PHY_PAPRD_CTRL0_B2
 (
AR_CHAN2_BASE
 + 0xf0)

	)

1134 
	#AR_PHY_PAPRD_CTRL0_PAPRD_ENABLE
 0x00000001

	)

1135 
	#AR_PHY_PAPRD_CTRL0_PAPRD_ENABLE_S
 0

	)

1136 
	#AR_PHY_PAPRD_CTRL0_USE_SINGLE_TABLE_MASK
 0x00000002

	)

1137 
	#AR_PHY_PAPRD_CTRL0_USE_SINGLE_TABLE_MASK_S
 1

	)

1138 
	#AR_PHY_PAPRD_CTRL0_PAPRD_MAG_THRSH
 0xf8000000

	)

1139 
	#AR_PHY_PAPRD_CTRL0_PAPRD_MAG_THRSH_S
 27

	)

1141 
	#AR_PHY_PAPRD_CTRL1_B0
 (
AR_CHAN_BASE
 + 0xf4)

	)

1142 
	#AR_PHY_PAPRD_CTRL1_B1
 (
AR_CHAN1_BASE
 + 0xf4)

	)

1143 
	#AR_PHY_PAPRD_CTRL1_B2
 (
AR_CHAN2_BASE
 + 0xf4)

	)

1144 
	#AR_PHY_PAPRD_CTRL1_ADAPTIVE_SCALING_ENA
 0x00000001

	)

1145 
	#AR_PHY_PAPRD_CTRL1_ADAPTIVE_SCALING_ENA_S
 0

	)

1146 
	#AR_PHY_PAPRD_CTRL1_ADAPTIVE_AM2AM_ENABLE
 0x00000002

	)

1147 
	#AR_PHY_PAPRD_CTRL1_ADAPTIVE_AM2AM_ENABLE_S
 1

	)

1148 
	#AR_PHY_PAPRD_CTRL1_ADAPTIVE_AM2PM_ENABLE
 0x00000004

	)

1149 
	#AR_PHY_PAPRD_CTRL1_ADAPTIVE_AM2PM_ENABLE_S
 2

	)

1150 
	#AR_PHY_PAPRD_CTRL1_PAPRD_POWER_AT_AM2AM_CAL
 0x000001f8

	)

1151 
	#AR_PHY_PAPRD_CTRL1_PAPRD_POWER_AT_AM2AM_CAL_S
 3

	)

1152 
	#AR_PHY_PAPRD_CTRL1_PA_GAIN_SCALE_FACT_MASK
 0x0001„00

	)

1153 
	#AR_PHY_PAPRD_CTRL1_PA_GAIN_SCALE_FACT_MASK_S
 9

	)

1154 
	#AR_PHY_PAPRD_CTRL1_PAPRD_MAG_SCALE_FACT
 0x0f„0000

	)

1155 
	#AR_PHY_PAPRD_CTRL1_PAPRD_MAG_SCALE_FACT_S
 17

	)

1157 
	#AR_PHY_PAPRD_TRAINER_CNTL1
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x580 : 0x490))

	)

1159 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_CF_PAPRD_TRAIN_ENABLE
 0x00000001

	)

1160 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_CF_PAPRD_TRAIN_ENABLE_S
 0

	)

1161 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_AGC2_SETTLING
 0x0000007e

	)

1162 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_AGC2_SETTLING_S
 1

	)

1163 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_IQCORR_ENABLE
 0x00000100

	)

1164 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_IQCORR_ENABLE_S
 8

	)

1165 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_RX_BB_GAIN_FORCE
 0x00000200

	)

1166 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_RX_BB_GAIN_FORCE_S
 9

	)

1167 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_TX_GAIN_FORCE
 0x00000400

	)

1168 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_TX_GAIN_FORCE_S
 10

	)

1169 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_LB_ENABLE
 0x00000800

	)

1170 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_LB_ENABLE_S
 11

	)

1171 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_LB_SKIP
 0x0003f000

	)

1172 
	#AR_PHY_PAPRD_TRAINER_CNTL1_CF_PAPRD_LB_SKIP_S
 12

	)

1174 
	#AR_PHY_PAPRD_TRAINER_CNTL2
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x584 : 0x494))

	)

1176 
	#AR_PHY_PAPRD_TRAINER_CNTL2_CF_PAPRD_INIT_RX_BB_GAIN
 0xFFFFFFFF

	)

1177 
	#AR_PHY_PAPRD_TRAINER_CNTL2_CF_PAPRD_INIT_RX_BB_GAIN_S
 0

	)

1179 
	#AR_PHY_PAPRD_TRAINER_CNTL3
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x588 : 0x498))

	)

1181 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_ADC_DESIRED_SIZE
 0x0000003f

	)

1182 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_ADC_DESIRED_SIZE_S
 0

	)

1183 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_QUICK_DROP
 0x00000fc0

	)

1184 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_QUICK_DROP_S
 6

	)

1185 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_MIN_LOOPBACK_DEL
 0x0001f000

	)

1186 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_MIN_LOOPBACK_DEL_S
 12

	)

1187 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_NUM_CORR_STAGES
 0x000e0000

	)

1188 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_NUM_CORR_STAGES_S
 17

	)

1189 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_COARSE_CORR_LEN
 0x00f00000

	)

1190 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_COARSE_CORR_LEN_S
 20

	)

1191 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_FINE_CORR_LEN
 0x0f000000

	)

1192 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_FINE_CORR_LEN_S
 24

	)

1193 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_BBTXMIX_DISABLE
 0x20000000

	)

1194 
	#AR_PHY_PAPRD_TRAINER_CNTL3_CF_PAPRD_BBTXMIX_DISABLE_S
 29

	)

1196 
	#AR_PHY_PAPRD_TRAINER_CNTL4
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x58¯: 0x49c))

	)

1198 
	#AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_NUM_TRAIN_SAMPLES
 0x03ff0000

	)

1199 
	#AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_NUM_TRAIN_SAMPLES_S
 16

	)

1200 
	#AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_SAFETY_DELTA
 0x0000f000

	)

1201 
	#AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_SAFETY_DELTA_S
 12

	)

1202 
	#AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_MIN_CORR
 0x00000fff

	)

1203 
	#AR_PHY_PAPRD_TRAINER_CNTL4_CF_PAPRD_MIN_CORR_S
 0

	)

1205 
	#AR_PHY_PAPRD_PRE_POST_SCALE_0_B0
 (
AR_CHAN_BASE
 + 0x100)

	)

1206 
	#AR_PHY_PAPRD_PRE_POST_SCALE_1_B0
 (
AR_CHAN_BASE
 + 0x104)

	)

1207 
	#AR_PHY_PAPRD_PRE_POST_SCALE_2_B0
 (
AR_CHAN_BASE
 + 0x108)

	)

1208 
	#AR_PHY_PAPRD_PRE_POST_SCALE_3_B0
 (
AR_CHAN_BASE
 + 0x10c)

	)

1209 
	#AR_PHY_PAPRD_PRE_POST_SCALE_4_B0
 (
AR_CHAN_BASE
 + 0x110)

	)

1210 
	#AR_PHY_PAPRD_PRE_POST_SCALE_5_B0
 (
AR_CHAN_BASE
 + 0x114)

	)

1211 
	#AR_PHY_PAPRD_PRE_POST_SCALE_6_B0
 (
AR_CHAN_BASE
 + 0x118)

	)

1212 
	#AR_PHY_PAPRD_PRE_POST_SCALE_7_B0
 (
AR_CHAN_BASE
 + 0x11c)

	)

1213 
	#AR_PHY_PAPRD_PRE_POST_SCALING
 0x3FFFF

	)

1214 
	#AR_PHY_PAPRD_PRE_POST_SCALING_S
 0

	)

1216 
	#AR_PHY_PAPRD_TRAINER_STAT1
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x590 : 0x4a0))

	)

1218 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_DONE
 0x00000001

	)

1219 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_DONE_S
 0

	)

1220 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_INCOMPLETE
 0x00000002

	)

1221 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_INCOMPLETE_S
 1

	)

1222 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_CORR_ERR
 0x00000004

	)

1223 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_CORR_ERR_S
 2

	)

1224 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_ACTIVE
 0x00000008

	)

1225 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_TRAIN_ACTIVE_S
 3

	)

1226 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_RX_GAIN_IDX
 0x000001f0

	)

1227 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_RX_GAIN_IDX_S
 4

	)

1228 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_AGC2_PWR
 0x0001„00

	)

1229 
	#AR_PHY_PAPRD_TRAINER_STAT1_PAPRD_AGC2_PWR_S
 9

	)

1231 
	#AR_PHY_PAPRD_TRAINER_STAT2
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x594 : 0x4a4))

	)

1233 
	#AR_PHY_PAPRD_TRAINER_STAT2_PAPRD_FINE_VAL
 0x0000ffff

	)

1234 
	#AR_PHY_PAPRD_TRAINER_STAT2_PAPRD_FINE_VAL_S
 0

	)

1235 
	#AR_PHY_PAPRD_TRAINER_STAT2_PAPRD_COARSE_IDX
 0x001f0000

	)

1236 
	#AR_PHY_PAPRD_TRAINER_STAT2_PAPRD_COARSE_IDX_S
 16

	)

1237 
	#AR_PHY_PAPRD_TRAINER_STAT2_PAPRD_FINE_IDX
 0x00600000

	)

1238 
	#AR_PHY_PAPRD_TRAINER_STAT2_PAPRD_FINE_IDX_S
 21

	)

1240 
	#AR_PHY_PAPRD_TRAINER_STAT3
 (
AR_SM_BASE
 + (
	`AR_SREV_9485
(
ah
Ë? 0x598 : 0x4a8))

	)

1242 
	#AR_PHY_PAPRD_TRAINER_STAT3_PAPRD_TRAIN_SAMPLES_CNT
 0x000fffff

	)

1243 
	#AR_PHY_PAPRD_TRAINER_STAT3_PAPRD_TRAIN_SAMPLES_CNT_S
 0

	)

1245 
	#AR_PHY_PAPRD_MEM_TAB_B0
 (
AR_CHAN_BASE
 + 0x120)

	)

1246 
	#AR_PHY_PAPRD_MEM_TAB_B1
 (
AR_CHAN1_BASE
 + 0x120)

	)

1247 
	#AR_PHY_PAPRD_MEM_TAB_B2
 (
AR_CHAN2_BASE
 + 0x120)

	)

1249 
	#AR_PHY_PA_GAIN123_B0
 (
AR_CHAN_BASE
 + 0xf8)

	)

1250 
	#AR_PHY_PA_GAIN123_B1
 (
AR_CHAN1_BASE
 + 0xf8)

	)

1251 
	#AR_PHY_PA_GAIN123_B2
 (
AR_CHAN2_BASE
 + 0xf8)

	)

1252 
	#AR_PHY_PA_GAIN123_PA_GAIN1
 0x3FF

	)

1253 
	#AR_PHY_PA_GAIN123_PA_GAIN1_S
 0

	)

1255 
	#AR_PHY_POWERTX_RATE5
 (
AR_SM_BASE
 + 0x1d0)

	)

1256 
	#AR_PHY_POWERTX_RATE5_POWERTXHT20_0
 0x3F

	)

1257 
	#AR_PHY_POWERTX_RATE5_POWERTXHT20_0_S
 0

	)

1259 
	#AR_PHY_POWERTX_RATE6
 (
AR_SM_BASE
 + 0x1d4)

	)

1260 
	#AR_PHY_POWERTX_RATE6_POWERTXHT20_5
 0x3F00

	)

1261 
	#AR_PHY_POWERTX_RATE6_POWERTXHT20_5_S
 8

	)

1263 
	#AR_PHY_POWERTX_RATE8
 (
AR_SM_BASE
 + 0x1dc)

	)

1264 
	#AR_PHY_POWERTX_RATE8_POWERTXHT40_5
 0x3F00

	)

1265 
	#AR_PHY_POWERTX_RATE8_POWERTXHT40_5_S
 8

	)

1267 
	#AR_PHY_CL_TAB_CL_GAIN_MOD
 0x1f

	)

1268 
	#AR_PHY_CL_TAB_CL_GAIN_MOD_S
 0

	)

1270 
	#AR_BTCOEX_WL_LNADIV
 0x1a64

	)

1271 
	#AR_BTCOEX_WL_LNADIV_PREDICTED_PERIOD
 0x00003FFF

	)

1272 
	#AR_BTCOEX_WL_LNADIV_PREDICTED_PERIOD_S
 0

	)

1273 
	#AR_BTCOEX_WL_LNADIV_DPDT_IGNORE_PRIORITY
 0x00004000

	)

1274 
	#AR_BTCOEX_WL_LNADIV_DPDT_IGNORE_PRIORITY_S
 14

	)

1275 
	#AR_BTCOEX_WL_LNADIV_FORCE_ON
 0x00008000

	)

1276 
	#AR_BTCOEX_WL_LNADIV_FORCE_ON_S
 15

	)

1277 
	#AR_BTCOEX_WL_LNADIV_MODE_OPTION
 0x00030000

	)

1278 
	#AR_BTCOEX_WL_LNADIV_MODE_OPTION_S
 16

	)

1279 
	#AR_BTCOEX_WL_LNADIV_MODE
 0x007c0000

	)

1280 
	#AR_BTCOEX_WL_LNADIV_MODE_S
 18

	)

1281 
	#AR_BTCOEX_WL_LNADIV_ALLOWED_TX_ANTDIV_WL_TX_REQ
 0x00800000

	)

1282 
	#AR_BTCOEX_WL_LNADIV_ALLOWED_TX_ANTDIV_WL_TX_REQ_S
 23

	)

1283 
	#AR_BTCOEX_WL_LNADIV_DISABLE_TX_ANTDIV_ENABLE
 0x01000000

	)

1284 
	#AR_BTCOEX_WL_LNADIV_DISABLE_TX_ANTDIV_ENABLE_S
 24

	)

1285 
	#AR_BTCOEX_WL_LNADIV_CONTINUOUS_BT_ACTIVE_PROTECT
 0x02000000

	)

1286 
	#AR_BTCOEX_WL_LNADIV_CONTINUOUS_BT_ACTIVE_PROTECT_S
 25

	)

1287 
	#AR_BTCOEX_WL_LNADIV_BT_INACTIVE_THRESHOLD
 0xFC000000

	)

1288 
	#AR_BTCOEX_WL_LNADIV_BT_INACTIVE_THRESHOLD_S
 26

	)

1291 
	#AR_PHY_65NM_BASE
 0x16000

	)

1292 
	#AR_PHY_65NM_RXRF_GAINSTAGES
(
i
Ë(
AR_PHY_65NM_BASE
 + \

1293 (
i
 * 0x400Ë+ 0x8)

	)

1294 
	#AR_PHY_65NM_RXRF_GAINSTAGES_RX_OVERRIDE
 0x80000000

	)

1295 
	#AR_PHY_65NM_RXRF_GAINSTAGES_RX_OVERRIDE_S
 31

	)

1296 
	#AR_PHY_65NM_RXRF_GAINSTAGES_LNAON_CALDC
 0x00000002

	)

1297 
	#AR_PHY_65NM_RXRF_GAINSTAGES_LNAON_CALDC_S
 1

	)

1298 
	#AR_PHY_65NM_RXRF_GAINSTAGES_LNA2G_GAIN_OVR
 0x70000000

	)

1299 
	#AR_PHY_65NM_RXRF_GAINSTAGES_LNA2G_GAIN_OVR_S
 28

	)

1300 
	#AR_PHY_65NM_RXRF_GAINSTAGES_LNA5G_GAIN_OVR
 0x03800000

	)

1301 
	#AR_PHY_65NM_RXRF_GAINSTAGES_LNA5G_GAIN_OVR_S
 23

	)

1303 
	#AR_PHY_65NM_RXTX2
(
i
Ë(
AR_PHY_65NM_BASE
 + \

1304 (
i
 * 0x400Ë+ 0x104)

	)

1305 
	#AR_PHY_65NM_RXTX2_RXON_OVR
 0x00001000

	)

1306 
	#AR_PHY_65NM_RXTX2_RXON_OVR_S
 12

	)

1307 
	#AR_PHY_65NM_RXTX2_RXON
 0x00000800

	)

1308 
	#AR_PHY_65NM_RXTX2_RXON_S
 11

	)

1310 
	#AR_PHY_65NM_RXRF_AGC
(
i
Ë(
AR_PHY_65NM_BASE
 + \

1311 (
i
 * 0x400Ë+ 0xc)

	)

1312 
	#AR_PHY_65NM_RXRF_AGC_AGC_OVERRIDE
 0x80000000

	)

1313 
	#AR_PHY_65NM_RXRF_AGC_AGC_OVERRIDE_S
 31

	)

1314 
	#AR_PHY_65NM_RXRF_AGC_AGC_ON_OVR
 0x40000000

	)

1315 
	#AR_PHY_65NM_RXRF_AGC_AGC_ON_OVR_S
 30

	)

1316 
	#AR_PHY_65NM_RXRF_AGC_AGC_CAL_OVR
 0x20000000

	)

1317 
	#AR_PHY_65NM_RXRF_AGC_AGC_CAL_OVR_S
 29

	)

1318 
	#AR_PHY_65NM_RXRF_AGC_AGC2G_DBDAC_OVR
 0x1E000000

	)

1319 
	#AR_PHY_65NM_RXRF_AGC_AGC2G_DBDAC_OVR_S
 25

	)

1320 
	#AR_PHY_65NM_RXRF_AGC_AGC5G_DBDAC_OVR
 0x00078000

	)

1321 
	#AR_PHY_65NM_RXRF_AGC_AGC5G_DBDAC_OVR_S
 15

	)

1322 
	#AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
 0x01F80000

	)

1323 
	#AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR_S
 19

	)

1324 
	#AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
 0x00007e00

	)

1325 
	#AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR_S
 9

	)

1326 
	#AR_PHY_65NM_RXRF_AGC_AGC_OUT
 0x00000004

	)

1327 
	#AR_PHY_65NM_RXRF_AGC_AGC_OUT_S
 2

	)

1329 
	#AR9300_DFS_FIRPWR
 -28

	)

	@ar9003_rtt.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~"¨9003_phy.h
"

20 
	~"¨9003_πt.h
"

22 
	#RTT_RESTORE_TIMEOUT
 1000

	)

23 
	#RTT_ACCESS_TIMEOUT
 100

	)

24 
	#RTT_BAD_VALUE
 0x0bad0bad

	)

38 
	$¨9003_hw_πt_íabÀ
(
©h_hw
 *
ah
)

40 
	`REG_WRITE
(
ah
, 
AR_PHY_RTT_CTRL
, 1);

41 
	}
}

43 
	$¨9003_hw_πt_dißbÀ
(
©h_hw
 *
ah
)

45 
	`REG_WRITE
(
ah
, 
AR_PHY_RTT_CTRL
, 0);

46 
	}
}

48 
	$¨9003_hw_πt_£t_mask
(
©h_hw
 *
ah
, 
u32
 
πt_mask
)

50 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RTT_CTRL
,

51 
AR_PHY_RTT_CTRL_RESTORE_MASK
, 
πt_mask
);

52 
	}
}

54 
boﬁ
 
	$¨9003_hw_πt_f‹˚_ª°‹e
(
©h_hw
 *
ah
)

56 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_RTT_CTRL
,

57 
AR_PHY_RTT_CTRL_FORCE_RADIO_RESTORE
,

58 0, 
RTT_RESTORE_TIMEOUT
))

59  
Ál£
;

61 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RTT_CTRL
,

62 
AR_PHY_RTT_CTRL_FORCE_RADIO_RESTORE
, 1);

64 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_PHY_RTT_CTRL
,

65 
AR_PHY_RTT_CTRL_FORCE_RADIO_RESTORE
,

66 0, 
RTT_RESTORE_TIMEOUT
))

67  
Ál£
;

69  
åue
;

70 
	}
}

72 
	$¨9003_hw_πt_lﬂd_hi°_íåy
(
©h_hw
 *
ah
, 
u8
 
chaö
,

73 
u32
 
ödex
, u32 
d©a28
)

75 
u32
 
vÆ
;

77 
vÆ
 = 
	`SM
(
d©a28
, 
AR_PHY_RTT_SW_RTT_TABLE_DATA
);

78 
	`REG_WRITE
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_1_B
(
chaö
), 
vÆ
);

80 
vÆ
 = 
	`SM
(0, 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
) |

81 
	`SM
(1, 
AR_PHY_RTT_SW_RTT_TABLE_WRITE
) |

82 
	`SM
(
ödex
, 
AR_PHY_RTT_SW_RTT_TABLE_ADDR
);

83 
	`REG_WRITE
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
), 
vÆ
);

84 
	`udñay
(1);

86 
vÆ
 |
	`SM
(1, 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
);

87 
	`REG_WRITE
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
), 
vÆ
);

88 
	`udñay
(1);

90 i‡(!
	`©h9k_hw_waô
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
),

91 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
, 0,

92 
RTT_ACCESS_TIMEOUT
))

95 
vÆ
 &~
	`SM
(1, 
AR_PHY_RTT_SW_RTT_TABLE_WRITE
);

96 
	`REG_WRITE
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
), 
vÆ
);

97 
	`udñay
(1);

99 
	`©h9k_hw_waô
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
),

100 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
, 0,

101 
RTT_ACCESS_TIMEOUT
);

102 
	}
}

104 
	$¨9003_hw_πt_lﬂd_hi°
(
©h_hw
 *
ah
)

106 
chaö
, 
i
;

108 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

109 i‡(!(
ah
->
ˇps
.
rx_chaömask
 & (1 << 
chaö
)))

111 
i
 = 0; i < 
MAX_RTT_TABLE_ENTRY
; i++) {

112 
	`¨9003_hw_πt_lﬂd_hi°_íåy
(
ah
, 
chaö
, 
i
,

113 
ah
->
ˇld©a
->
πt_èbÀ
[
chaö
][
i
]);

114 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

116 
i
, 
chaö
, 
ah
->
ˇld©a
->
πt_èbÀ
[chain][i]);

119 
	}
}

121 
	$¨9003_hw_∑tch_πt
(
©h_hw
 *
ah
, 
ödex
, 
chaö
)

123 
agc
, 
ˇldac
;

125 i‡(!
	`ã°_bô
(
SW_PKDET_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
))

128 i‡((
ödex
 !5Ë|| (
chaö
 >= 2))

131 
agc
 = 
	`REG_READ_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(
chaö
),

132 
AR_PHY_65NM_RXRF_AGC_AGC_OVERRIDE
);

133 i‡(!
agc
)

136 
ˇldac
 = 
ah
->
ˇld©a
->ˇldac[
chaö
];

137 
ah
->
ˇld©a
->
πt_èbÀ
[
chaö
][
ödex
] &= 0xFFFF05FF;

138 
ˇldac
 = (caldac & 0x20) | ((caldac & 0x1F) << 7);

139 
ah
->
ˇld©a
->
πt_èbÀ
[
chaö
][
ödex
] |(
ˇldac
 << 4);

140 
	}
}

142 
	$¨9003_hw_πt_fûl_hi°_íåy
(
©h_hw
 *
ah
, 
u8
 
chaö
, 
u32
 
ödex
)

144 
u32
 
vÆ
;

146 
vÆ
 = 
	`SM
(0, 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
) |

147 
	`SM
(0, 
AR_PHY_RTT_SW_RTT_TABLE_WRITE
) |

148 
	`SM
(
ödex
, 
AR_PHY_RTT_SW_RTT_TABLE_ADDR
);

150 
	`REG_WRITE
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
), 
vÆ
);

151 
	`udñay
(1);

153 
vÆ
 |
	`SM
(1, 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
);

154 
	`REG_WRITE
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
), 
vÆ
);

155 
	`udñay
(1);

157 i‡(!
	`©h9k_hw_waô
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_B
(
chaö
),

158 
AR_PHY_RTT_SW_RTT_TABLE_ACCESS
, 0,

159 
RTT_ACCESS_TIMEOUT
))

160  
RTT_BAD_VALUE
;

162 
vÆ
 = 
	`MS
(
	`REG_READ
(
ah
, 
	`AR_PHY_RTT_TABLE_SW_INTF_1_B
(
chaö
)),

163 
AR_PHY_RTT_SW_RTT_TABLE_DATA
);

166  
vÆ
;

167 
	}
}

169 
	$¨9003_hw_πt_fûl_hi°
(
©h_hw
 *
ah
)

171 
chaö
, 
i
;

173 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

174 i‡(!(
ah
->
ˇps
.
rx_chaömask
 & (1 << 
chaö
)))

176 
i
 = 0; i < 
MAX_RTT_TABLE_ENTRY
; i++) {

177 
ah
->
ˇld©a
->
πt_èbÀ
[
chaö
][
i
] =

178 
	`¨9003_hw_πt_fûl_hi°_íåy
(
ah
, 
chaö
, 
i
);

180 
	`¨9003_hw_∑tch_πt
(
ah
, 
i
, 
chaö
);

182 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CALIBRATE
,

184 
i
, 
chaö
, 
ah
->
ˇld©a
->
πt_èbÀ
[chain][i]);

188 
	`£t_bô
(
RTT_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
);

189 
	}
}

191 
	$¨9003_hw_πt_˛ór_hi°
(
©h_hw
 *
ah
)

193 
chaö
, 
i
;

195 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

196 i‡(!(
ah
->
ˇps
.
rx_chaömask
 & (1 << 
chaö
)))

198 
i
 = 0; i < 
MAX_RTT_TABLE_ENTRY
; i++)

199 
	`¨9003_hw_πt_lﬂd_hi°_íåy
(
ah
, 
chaö
, 
i
, 0);

202 i‡(
ah
->
ˇld©a
)

203 
	`˛ór_bô
(
RTT_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
);

204 
	}
}

206 
boﬁ
 
	$¨9003_hw_πt_ª°‹e
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

208 
boﬁ
 
ª°‹e
;

210 i‡(!
ah
->
ˇld©a
)

211  
Ál£
;

213 i‡(
	`ã°_bô
(
SW_PKDET_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
)) {

214 i‡(
	`IS_CHAN_2GHZ
(
ch™
)){

215 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(0),

216 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
,

217 
ah
->
ˇld©a
->
ˇldac
[0]);

218 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(1),

219 
AR_PHY_65NM_RXRF_AGC_AGC2G_CALDAC_OVR
,

220 
ah
->
ˇld©a
->
ˇldac
[1]);

222 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(0),

223 
AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
,

224 
ah
->
ˇld©a
->
ˇldac
[0]);

225 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(1),

226 
AR_PHY_65NM_RXRF_AGC_AGC5G_CALDAC_OVR
,

227 
ah
->
ˇld©a
->
ˇldac
[1]);

229 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(1),

230 
AR_PHY_65NM_RXRF_AGC_AGC_OVERRIDE
, 0x1);

231 
	`REG_RMW_FIELD
(
ah
, 
	`AR_PHY_65NM_RXRF_AGC
(0),

232 
AR_PHY_65NM_RXRF_AGC_AGC_OVERRIDE
, 0x1);

235 i‡(!
	`ã°_bô
(
RTT_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
))

236  
Ál£
;

238 
	`¨9003_hw_πt_íabÀ
(
ah
);

240 i‡(
	`ã°_bô
(
SW_PKDET_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
))

241 
	`¨9003_hw_πt_£t_mask
(
ah
, 0x30);

243 
	`¨9003_hw_πt_£t_mask
(
ah
, 0x10);

245 i‡(!
	`©h9k_hw_rfbus_ªq
(
ah
)) {

246 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
), "CouldÇot stop baseband\n");

247 
ª°‹e
 = 
Ál£
;

248 
Áû
;

251 
	`¨9003_hw_πt_lﬂd_hi°
(
ah
);

252 
ª°‹e
 = 
	`¨9003_hw_πt_f‹˚_ª°‹e
(
ah
);

254 
Áû
:

255 
	`©h9k_hw_rfbus_d⁄e
(
ah
);

256 
	`¨9003_hw_πt_dißbÀ
(
ah
);

257  
ª°‹e
;

258 
	}
}

	@ar9003_rtt.h

17 #i‚de‡
AR9003_RTT_H


18 
	#AR9003_RTT_H


	)

20 #ifde‡
CONFIG_ATH9K_PCOEM


21 
¨9003_hw_πt_íabÀ
(
©h_hw
 *
ah
);

22 
¨9003_hw_πt_dißbÀ
(
©h_hw
 *
ah
);

23 
¨9003_hw_πt_£t_mask
(
©h_hw
 *
ah
, 
u32
 
πt_mask
);

24 
boﬁ
 
¨9003_hw_πt_f‹˚_ª°‹e
(
©h_hw
 *
ah
);

25 
¨9003_hw_πt_lﬂd_hi°
(
©h_hw
 *
ah
);

26 
¨9003_hw_πt_fûl_hi°
(
©h_hw
 *
ah
);

27 
¨9003_hw_πt_˛ór_hi°
(
©h_hw
 *
ah
);

28 
boﬁ
 
¨9003_hw_πt_ª°‹e
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

30 
ölöe
 
	$¨9003_hw_πt_íabÀ
(
©h_hw
 *
ah
)

32 
	}
}

34 
ölöe
 
	$¨9003_hw_πt_dißbÀ
(
©h_hw
 *
ah
)

36 
	}
}

38 
ölöe
 
	$¨9003_hw_πt_£t_mask
(
©h_hw
 *
ah
, 
u32
 
πt_mask
)

40 
	}
}

42 
ölöe
 
boﬁ
 
	$¨9003_hw_πt_f‹˚_ª°‹e
(
©h_hw
 *
ah
)

44  
Ál£
;

45 
	}
}

47 
ölöe
 
	$¨9003_hw_πt_lﬂd_hi°
(
©h_hw
 *
ah
)

49 
	}
}

51 
ölöe
 
	$¨9003_hw_πt_fûl_hi°
(
©h_hw
 *
ah
)

53 
	}
}

55 
ölöe
 
	$¨9003_hw_πt_˛ór_hi°
(
©h_hw
 *
ah
)

57 
	}
}

59 
ölöe
 
boﬁ
 
	$¨9003_hw_πt_ª°‹e
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

61  
Ál£
;

62 
	}
}

	@ar9003_wow.c

17 
	~<löux/exp‹t.h
>

18 
	~"©h9k.h
"

19 
	~"ªg.h
"

20 
	~"ªg_wow.h
"

21 
	~"hw-›s.h
"

23 
	$©h9k_hw_£t_°a_powîßve
(
©h_hw
 *
ah
)

25 i‡(!
	`©h9k_hw_mci_is_íabÀd
(
ah
))

26 
£t
;

31 i‡(
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_GET_WLAN_PS_STATE
Ë!
MCI_PS_DISABLE
)

33 
£t
:

34 
	`REG_SET_BIT
(
ah
, 
AR_STA_ID1
, 
AR_STA_ID1_PWR_SAV
);

35 
	}
}

37 
	$©h9k_hw_£t_powîmode_wow_¶ìp
(
©h_hw
 *
ah
)

39 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

41 
	`©h9k_hw_£t_°a_powîßve
(
ah
);

44 
	`REG_WRITE
(
ah
, 
AR_CR
, 
AR_CR_RXD
);

46 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_CR
, 
AR_CR_RXE
, 0, 
AH_WAIT_TIMEOUT
)) {

47 
	`©h_îr
(
comm⁄
, "FailedÅo stop Rx DMA in 10ms AR_CR=0x%08x AR_DIAG_SW=0x%08x\n",

48 
	`REG_READ
(
ah
, 
AR_CR
), REG_READ◊h, 
AR_DIAG_SW
));

52 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

53 i‡(!
	`REG_READ
(
ah
, 
AR_MAC_PCU_GEN_TIMER_TSF_SEL
))

54 
	`REG_CLR_BIT
(
ah
, 
AR_DIRECT_CONNECT
, 
AR_DC_TSF2_ENABLE
);

55 } i‡(
	`AR_SREV_9485
(
ah
)){

56 i‡(!(
	`REG_READ
(
ah
, 
AR_NDP2_TIMER_MODE
) &

57 
AR_GEN_TIMERS2_MODE_ENABLE_MASK
))

58 
	`REG_CLR_BIT
(
ah
, 
AR_DIRECT_CONNECT
, 
AR_DC_TSF2_ENABLE
);

61 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

62 
	`REG_WRITE
(
ah
, 
AR_RTC_KEEP_AWAKE
, 0x2);

64 
	`REG_WRITE
(
ah
, 
AR_RTC_FORCE_WAKE
, 
AR_RTC_FORCE_WAKE_ON_INT
);

65 
	}
}

67 
	$©h9k_wow_¸óã_kìp_Æive_∑âîn
(
©h_hw
 *
ah
)

69 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

70 
u8
 
°a_mac_addr
[
ETH_ALEN
], 
≠_mac_addr
[ETH_ALEN];

71 
u32
 
˘l
[13] = {0};

72 
u32
 
d©a_w‹d
[
KAL_NUM_DATA_WORDS
];

73 
u8
 
i
;

74 
u32
 
wow_ka_d©a_w‹d0
;

76 
	`mem˝y
(
°a_mac_addr
, 
comm⁄
->
maˇddr
, 
ETH_ALEN
);

77 
	`mem˝y
(
≠_mac_addr
, 
comm⁄
->
curbssid
, 
ETH_ALEN
);

80 
˘l
[0] = (
KAL_FRAME_LEN
 | (
MAX_RATE_POWER
 << 16));

81 
˘l
[1] = 0;

82 
˘l
[4] = 0;

83 
˘l
[7] = (
ah
->
txchaömask
) << 2;

84 
˘l
[2] = 0xf << 16;

86 i‡(
	`IS_CHAN_2GHZ
(
ah
->
curch™
))

87 
˘l
[3] = 0x1b;

89 
˘l
[3] = 0xb;

91 
i
 = 0; i < 
KAL_NUM_DESC_WORDS
; i++)

92 
	`REG_WRITE
(
ah
, (
AR_WOW_KA_DESC_WORD2
 + 
i
 * 4), 
˘l
[i]);

94 
d©a_w‹d
[0] = (
KAL_FRAME_TYPE
 << 2Ë| (
KAL_FRAME_SUB_TYPE
 << 4) |

95 (
KAL_TO_DS
 << 8Ë| (
KAL_DURATION_ID
 << 16);

96 
d©a_w‹d
[1] = (
≠_mac_addr
[3] << 24) | (ap_mac_addr[2] << 16) |

97 (
≠_mac_addr
[1] << 8) | (ap_mac_addr[0]);

98 
d©a_w‹d
[2] = (
°a_mac_addr
[1] << 24) | (sta_mac_addr[0] << 16) |

99 (
≠_mac_addr
[5] << 8) | (ap_mac_addr[4]);

100 
d©a_w‹d
[3] = (
°a_mac_addr
[5] << 24) | (sta_mac_addr[4] << 16) |

101 (
°a_mac_addr
[3] << 8) | (sta_mac_addr[2]);

102 
d©a_w‹d
[4] = (
≠_mac_addr
[3] << 24) | (ap_mac_addr[2] << 16) |

103 (
≠_mac_addr
[1] << 8) | (ap_mac_addr[0]);

104 
d©a_w‹d
[5] = (
≠_mac_addr
[5] << 8) | (ap_mac_addr[4]);

106 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

111 
	`REG_WRITE
(
ah
, (
AR_WOW_KA_DESC_WORD2
 + (12 * 4)), 0);

112 
wow_ka_d©a_w‹d0
 = 
	`AR_WOW_TXBUF
(13);

114 
wow_ka_d©a_w‹d0
 = 
	`AR_WOW_TXBUF
(12);

117 
i
 = 0; i < 
KAL_NUM_DATA_WORDS
; i++)

118 
	`REG_WRITE
(
ah
, (
wow_ka_d©a_w‹d0
 + 
i
*4), 
d©a_w‹d
[i]);

119 
	}
}

121 
	$©h9k_hw_wow_≠∂y_∑âîn
(
©h_hw
 *
ah
, 
u8
 *
u£r_∑âîn
,

122 
u8
 *
u£r_mask
, 
∑âîn_cou¡
,

123 
∑âîn_Àn
)

125 
i
;

126 
u32
 
∑âîn_vÆ
, 
mask_vÆ
;

127 
u32
 
£t
, 
˛r
;

129 i‡(
∑âîn_cou¡
 >
ah
->
wow
.
max_∑âîns
)

130  -
ENOSPC
;

132 i‡(
∑âîn_cou¡
 < 
MAX_NUM_PATTERN_LEGACY
)

133 
	`REG_SET_BIT
(
ah
, 
AR_WOW_PATTERN
, 
	`BIT
(
∑âîn_cou¡
));

135 
	`REG_SET_BIT
(
ah
, 
AR_MAC_PCU_WOW4
, 
	`BIT
(
∑âîn_cou¡
 - 8));

137 
i
 = 0; i < 
MAX_PATTERN_SIZE
; i += 4) {

138 
	`mem˝y
(&
∑âîn_vÆ
, 
u£r_∑âîn
, 4);

139 
	`REG_WRITE
(
ah
, (
	`AR_WOW_TB_PATTERN
(
∑âîn_cou¡
Ë+ 
i
),

140 
∑âîn_vÆ
);

141 
u£r_∑âîn
 += 4;

144 
i
 = 0; i < 
MAX_PATTERN_MASK_SIZE
; i += 4) {

145 
	`mem˝y
(&
mask_vÆ
, 
u£r_mask
, 4);

146 
	`REG_WRITE
(
ah
, (
	`AR_WOW_TB_MASK
(
∑âîn_cou¡
Ë+ 
i
), 
mask_vÆ
);

147 
u£r_mask
 += 4;

150 i‡(
∑âîn_cou¡
 < 
MAX_NUM_PATTERN_LEGACY
)

151 
ah
->
wow
.
wow_evít_mask
 |=

152 
	`BIT
(
∑âîn_cou¡
 + 
AR_WOW_PAT_FOUND_SHIFT
);

154 
ah
->
wow
.
wow_evít_mask2
 |=

155 
	`BIT
((
∑âîn_cou¡
 - 8Ë+ 
AR_WOW_PAT_FOUND_SHIFT
);

157 i‡(
∑âîn_cou¡
 < 4) {

158 
£t
 = (
∑âîn_Àn
 & 
AR_WOW_LENGTH_MAX
) <<

159 
	`AR_WOW_LEN1_SHIFT
(
∑âîn_cou¡
);

160 
˛r
 = 
	`AR_WOW_LENGTH1_MASK
(
∑âîn_cou¡
);

161 
	`REG_RMW
(
ah
, 
AR_WOW_LENGTH1
, 
£t
, 
˛r
);

162 } i‡(
∑âîn_cou¡
 < 8) {

163 
£t
 = (
∑âîn_Àn
 & 
AR_WOW_LENGTH_MAX
) <<

164 
	`AR_WOW_LEN2_SHIFT
(
∑âîn_cou¡
);

165 
˛r
 = 
	`AR_WOW_LENGTH2_MASK
(
∑âîn_cou¡
);

166 
	`REG_RMW
(
ah
, 
AR_WOW_LENGTH2
, 
£t
, 
˛r
);

167 } i‡(
∑âîn_cou¡
 < 12) {

168 
£t
 = (
∑âîn_Àn
 & 
AR_WOW_LENGTH_MAX
) <<

169 
	`AR_WOW_LEN3_SHIFT
(
∑âîn_cou¡
);

170 
˛r
 = 
	`AR_WOW_LENGTH3_MASK
(
∑âîn_cou¡
);

171 
	`REG_RMW
(
ah
, 
AR_WOW_LENGTH3
, 
£t
, 
˛r
);

172 } i‡(
∑âîn_cou¡
 < 
MAX_NUM_PATTERN
) {

173 
£t
 = (
∑âîn_Àn
 & 
AR_WOW_LENGTH_MAX
) <<

174 
	`AR_WOW_LEN4_SHIFT
(
∑âîn_cou¡
);

175 
˛r
 = 
	`AR_WOW_LENGTH4_MASK
(
∑âîn_cou¡
);

176 
	`REG_RMW
(
ah
, 
AR_WOW_LENGTH4
, 
£t
, 
˛r
);

180 
	}
}

181 
EXPORT_SYMBOL
(
©h9k_hw_wow_≠∂y_∑âîn
);

183 
u32
 
	$©h9k_hw_wow_wakeup
(
©h_hw
 *
ah
)

185 
u32
 
wow_°©us
 = 0;

186 
u32
 
vÆ
 = 0, 
rvÆ
;

192 
rvÆ
 = 
	`REG_READ
(
ah
, 
AR_WOW_PATTERN
);

193 
vÆ
 = 
	`AR_WOW_STATUS
(
rvÆ
);

200 
vÆ
 &
ah
->
wow
.
wow_evít_mask
;

202 i‡(
vÆ
) {

203 i‡(
vÆ
 & 
AR_WOW_MAGIC_PAT_FOUND
)

204 
wow_°©us
 |
AH_WOW_MAGIC_PATTERN_EN
;

205 i‡(
	`AR_WOW_PATTERN_FOUND
(
vÆ
))

206 
wow_°©us
 |
AH_WOW_USER_PATTERN_EN
;

207 i‡(
vÆ
 & 
AR_WOW_KEEP_ALIVE_FAIL
)

208 
wow_°©us
 |
AH_WOW_LINK_CHANGE
;

209 i‡(
vÆ
 & 
AR_WOW_BEACON_FAIL
)

210 
wow_°©us
 |
AH_WOW_BEACON_MISS
;

213 
rvÆ
 = 
	`REG_READ
(
ah
, 
AR_MAC_PCU_WOW4
);

214 
vÆ
 = 
	`AR_WOW_STATUS2
(
rvÆ
);

215 
vÆ
 &
ah
->
wow
.
wow_evít_mask2
;

217 i‡(
vÆ
) {

218 i‡(
	`AR_WOW2_PATTERN_FOUND
(
vÆ
))

219 
wow_°©us
 |
AH_WOW_USER_PATTERN_EN
;

229 
	`REG_RMW
(
ah
, 
AR_PCIE_PM_CTRL
, 
AR_PMCTRL_WOW_PME_CLR
,

230 
AR_PMCTRL_PWR_STATE_D1D3
);

235 
	`REG_WRITE
(
ah
, 
AR_WOW_PATTERN
,

236 
	`AR_WOW_CLEAR_EVENTS
(
	`REG_READ
(
ah
, 
AR_WOW_PATTERN
)));

237 
	`REG_WRITE
(
ah
, 
AR_MAC_PCU_WOW4
,

238 
	`AR_WOW_CLEAR_EVENTS2
(
	`REG_READ
(
ah
, 
AR_MAC_PCU_WOW4
)));

243 
	`REG_WRITE
(
ah
, 
AR_RSSI_THR
, 
INIT_RSSI_THR
);

252 i‡(
ah
->
is_pcõx¥ess
)

253 
	`©h9k_hw_c⁄figpcùowîßve
(
ah
, 
Ál£
);

255 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
◊hË|| 
	`AR_SREV_9485
(ah)) {

256 
u32
 
dc
 = 
	`REG_READ
(
ah
, 
AR_DIRECT_CONNECT
);

258 i‡(!(
dc
 & 
AR_DC_TSF2_ENABLE
))

259 
	`©h9k_hw_gí_timî_°¨t_tsf2
(
ah
);

262 
ah
->
wow
.
wow_evít_mask
 = 0;

263 
ah
->
wow
.
wow_evít_mask2
 = 0;

265  
wow_°©us
;

266 
	}
}

267 
EXPORT_SYMBOL
(
©h9k_hw_wow_wakeup
);

269 
	$©h9k_hw_wow_£t_¨wr_ªg
(
©h_hw
 *
ah
)

271 
u32
 
wa_ªg
;

273 i‡(!
ah
->
is_pcõx¥ess
)

281 
wa_ªg
 = 
	`REG_READ
(
ah
, 
AR_WA
);

282 
wa_ªg
 &~
AR_WA_UNTIE_RESET_EN
;

283 
wa_ªg
 |
AR_WA_RESET_EN
;

284 
wa_ªg
 |
AR_WA_POR_SHORT
;

286 
	`REG_WRITE
(
ah
, 
AR_WA
, 
wa_ªg
);

287 
	}
}

289 
	$©h9k_hw_wow_íabÀ
(
©h_hw
 *
ah
, 
u32
 
∑âîn_íabÀ
)

291 
u32
 
wow_evít_mask
;

292 
u32
 
kìp_Æive
, 
magic_∑âîn
, 
ho°_pm_˘æ
;

294 
wow_evít_mask
 = 
ah
->
wow
.wow_event_mask;

312 
	`REG_SET_BIT
(
ah
, 
AR_PCIE_PM_CTRL
, 
AR_PMCTRL_HOST_PME_EN
 |

313 
AR_PMCTRL_PWR_PM_CTRL_ENA
 |

314 
AR_PMCTRL_AUX_PWR_DET
 |

315 
AR_PMCTRL_WOW_PME_CLR
);

316 
	`REG_CLR_BIT
(
ah
, 
AR_PCIE_PM_CTRL
, 
AR_PMCTRL_WOW_PME_CLR
);

326 
	`REG_SET_BIT
(
ah
, 
AR_WOW_PATTERN
,

327 
	`AR_WOW_BACK_OFF_SHIFT
(
AR_WOW_PAT_BACKOFF
));

332 
	`REG_SET_BIT
(
ah
, 
AR_WOW_COUNT
, 
	`AR_WOW_AIFS_CNT
(
AR_WOW_CNT_AIFS_CNT
) |

333 
	`AR_WOW_SLOT_CNT
(
AR_WOW_CNT_SLOT_CNT
) |

334 
	`AR_WOW_KEEP_ALIVE_CNT
(
AR_WOW_CNT_KA_CNT
));

338 i‡(
∑âîn_íabÀ
 & 
AH_WOW_BEACON_MISS
)

339 
	`REG_WRITE
(
ah
, 
AR_WOW_BCN_TIMO
, 
AR_WOW_BEACON_TIMO
);

341 
	`REG_WRITE
(
ah
, 
AR_WOW_BCN_TIMO
, 
AR_WOW_BEACON_TIMO_MAX
);

346 i‡(!
∑âîn_íabÀ
)

347 
	`REG_WRITE
(
ah
, 
AR_WOW_KEEP_ALIVE_TIMO
, 
AR_WOW_KEEP_ALIVE_NEVER
);

349 
	`REG_WRITE
(
ah
, 
AR_WOW_KEEP_ALIVE_TIMO
, 
KAL_TIMEOUT
 * 32);

354 
	`REG_WRITE
(
ah
, 
AR_WOW_KEEP_ALIVE_DELAY
, 
KAL_DELAY
 * 1000);

359 
	`©h9k_wow_¸óã_kìp_Æive_∑âîn
(
ah
);

364 
kìp_Æive
 = 
	`REG_READ
(
ah
, 
AR_WOW_KEEP_ALIVE
);

367 
kìp_Æive
 &~
AR_WOW_KEEP_ALIVE_AUTO_DIS
;

369 i‡(
∑âîn_íabÀ
 & 
AH_WOW_LINK_CHANGE
) {

370 
kìp_Æive
 &~
AR_WOW_KEEP_ALIVE_FAIL_DIS
;

371 
wow_evít_mask
 |
AR_WOW_KEEP_ALIVE_FAIL
;

373 
kìp_Æive
 |
AR_WOW_KEEP_ALIVE_FAIL_DIS
;

376 
	`REG_WRITE
(
ah
, 
AR_WOW_KEEP_ALIVE
, 
kìp_Æive
);

382 
	`REG_RMW_FIELD
(
ah
, 
AR_RSSI_THR
, 
AR_RSSI_THR_BM_THR
,

383 
AR_WOW_BMISSTHRESHOLD
);

385 i‡(
∑âîn_íabÀ
 & 
AH_WOW_BEACON_MISS
) {

386 
wow_evít_mask
 |
AR_WOW_BEACON_FAIL
;

387 
	`REG_SET_BIT
(
ah
, 
AR_WOW_BCN_EN
, 
AR_WOW_BEACON_FAIL_EN
);

389 
	`REG_CLR_BIT
(
ah
, 
AR_WOW_BCN_EN
, 
AR_WOW_BEACON_FAIL_EN
);

395 
magic_∑âîn
 = 
	`REG_READ
(
ah
, 
AR_WOW_PATTERN
);

396 
magic_∑âîn
 |
AR_WOW_MAC_INTR_EN
;

398 i‡(
∑âîn_íabÀ
 & 
AH_WOW_MAGIC_PATTERN_EN
) {

399 
magic_∑âîn
 |
AR_WOW_MAGIC_EN
;

400 
wow_evít_mask
 |
AR_WOW_MAGIC_PAT_FOUND
;

402 
magic_∑âîn
 &~
AR_WOW_MAGIC_EN
;

405 
	`REG_WRITE
(
ah
, 
AR_WOW_PATTERN
, 
magic_∑âîn
);

411 
	`REG_WRITE
(
ah
, 
AR_WOW_PATTERN_MATCH_LT_256B
,

412 
AR_WOW_PATTERN_SUPPORTED
);

417 
ho°_pm_˘æ
 = 
	`REG_READ
(
ah
, 
AR_PCIE_PM_CTRL
);

418 
ho°_pm_˘æ
 |
AR_PMCTRL_PWR_STATE_D1D3
 |

419 
AR_PMCTRL_HOST_PME_EN
 |

420 
AR_PMCTRL_PWR_PM_CTRL_ENA
;

421 
ho°_pm_˘æ
 &~
AR_PCIE_PM_CTRL_ENA
;

423 i‡(
	`AR_SREV_9462
(
ah
)) {

429 
ho°_pm_˘æ
 &~
AR_PMCTRL_PWR_STATE_D1D3
;

430 
ho°_pm_˘æ
 |
AR_PMCTRL_PWR_STATE_D1D3_REAL
;

433 
	`REG_WRITE
(
ah
, 
AR_PCIE_PM_CTRL
, 
ho°_pm_˘æ
);

438 
	`REG_CLR_BIT
(
ah
, 
AR_STA_ID1
, 
AR_STA_ID1_PRESERVE_SEQNUM
);

441 
	`REG_SET_BIT
(
ah
, 
AR_PCIE_PHY_REG3
, 
	`BIT
(13));

443 
	`©h9k_hw_wow_£t_¨wr_ªg
(
ah
);

445 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

446 
	`REG_WRITE
(
ah
, 
AR_RTC_KEEP_AWAKE
, 0x2);

449 
	`REG_CLR_BIT
(
ah
, 
AR_PCU_MISC_MODE3
, 
	`BIT
(5));

451 
	`©h9k_hw_£t_powîmode_wow_¶ìp
(
ah
);

452 
ah
->
wow
.
wow_evít_mask
 = wow_event_mask;

453 
	}
}

454 
EXPORT_SYMBOL
(
©h9k_hw_wow_íabÀ
);

	@ar9330_1p1_initvals.h

18 #i‚de‡
INITVALS_9330_1P1_H


19 
	#INITVALS_9330_1P1_H


	)

21 
	#¨9331_1p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

23 
	#¨9331_modes_high_powî_tx_gaö_1p1
 
¨9331_modes_lowe°_ob_db_tx_gaö_1p1


	)

25 c⁄° 
u32
 
	g¨9331_1p1_ba£b™d_po°ambÀ
[][5] = {

70 c⁄° 
u32
 
	g¨9331_modes_lowe°_ob_db_tx_gaö_1p1
[][5] = {

162 c⁄° 
u32
 
	g¨9331_modes_high_ob_db_tx_gaö_1p1
[][5] = {

252 c⁄° 
u32
 
	g¨9331_modes_low_ob_db_tx_gaö_1p1
[][5] = {

344 c⁄° 
u32
 
	g¨9331_1p1_xèl_25M
[][2] = {

352 c⁄° 
u32
 
	g¨9331_1p1_ødio_c‹e
[][2] = {

417 c⁄° 
u32
 
	g¨9331_1p1_soc_po°ambÀ
[][5] = {

422 c⁄° 
u32
 
	g¨9331_comm⁄_wo_x a_rx_gaö_1p1
[][2] = {

554 c⁄° 
u32
 
	g¨9331_1p1_ba£b™d_c‹e
[][2] = {

691 c⁄° 
u32
 
	g¨9331_1p1_mac_po°ambÀ
[][5] = {

703 c⁄° 
u32
 
	g¨9331_1p1_soc_¥ómbÀ
[][2] = {

710 c⁄° 
u32
 
	g¨9331_1p1_xèl_40M
[][2] = {

718 c⁄° 
u32
 
	g¨9331_1p1_mac_c‹e
[][2] = {

880 c⁄° 
u32
 
	g¨9331_comm⁄_rx_gaö_1p1
[][2] = {

1013 c⁄° 
u32
 
	g¨9331_comm⁄_tx_gaö_off£t1_1
[][1] = {

	@ar9330_1p2_initvals.h

18 #i‚de‡
INITVALS_9330_1P2_H


19 
	#INITVALS_9330_1P2_H


	)

21 
	#¨9331_modes_high_powî_tx_gaö_1p2
 
¨9331_modes_high_ob_db_tx_gaö_1p2


	)

23 
	#¨9331_modes_low_ob_db_tx_gaö_1p2
 
¨9331_modes_high_ob_db_tx_gaö_1p2


	)

25 
	#¨9331_modes_lowe°_ob_db_tx_gaö_1p2
 
¨9331_modes_high_ob_db_tx_gaö_1p2


	)

27 
	#¨9331_1p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9331_1p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

29 
	#¨9331_1p2_xèl_25M
 
¨9331_1p1_xèl_25M


	)

31 
	#¨9331_1p2_xèl_40M
 
¨9331_1p1_xèl_40M


	)

33 
	#¨9331_1p2_soc_po°ambÀ
 
¨9331_1p1_soc_po°ambÀ


	)

35 
	#¨9331_1p2_mac_po°ambÀ
 
¨9331_1p1_mac_po°ambÀ


	)

37 
	#¨9331_1p2_soc_¥ómbÀ
 
¨9331_1p1_soc_¥ómbÀ


	)

39 
	#¨9331_1p2_mac_c‹e
 
¨9331_1p1_mac_c‹e


	)

41 
	#¨9331_comm⁄_wo_x a_rx_gaö_1p2
 
¨9331_comm⁄_wo_x a_rx_gaö_1p1


	)

43 c⁄° 
u32
 
	g¨9331_modes_high_ob_db_tx_gaö_1p2
[][5] = {

128 c⁄° 
u32
 
	g¨9331_1p2_ødio_c‹e
[][2] = {

193 c⁄° 
u32
 
	g¨9331_1p2_ba£b™d_c‹e
[][2] = {

330 c⁄° 
u32
 
	g¨9331_1p2_ba£b™d_po°ambÀ
[][5] = {

375 c⁄° 
u32
 
	g¨9331_comm⁄_rx_gaö_1p2
[][2] = {

	@ar9340_initvals.h

18 #i‚de‡
INITVALS_9340_H


19 
	#INITVALS_9340_H


	)

21 
	#¨9340_1p0_mac_po°ambÀ
 
¨9300_2p2_mac_po°ambÀ


	)

23 
	#¨9340_1p0_soc_po°ambÀ
 
¨9300_2p2_soc_po°ambÀ


	)

25 
	#¨9340Modes_Á°_˛ock_1p0
 
¨9300Modes_Á°_˛ock_2p2


	)

27 
	#¨9340Comm⁄_rx_gaö_èbÀ_1p0
 
¨9300Comm⁄_rx_gaö_èbÀ_2p2


	)

29 
	#¨9340Comm⁄_wo_x a_rx_gaö_èbÀ_1p0
 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2


	)

31 
	#¨9340_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

33 
	#¨9340_1p0_ba£b™d_po°ambÀ_dfs_ch™√l
 
¨9300_2p2_ba£b™d_po°ambÀ_dfs_ch™√l


	)

35 c⁄° 
u32
 
	g¨9340_1p0_ødio_po°ambÀ
[][5] = {

44 c⁄° 
u32
 
	g¨9340Modes_lowe°_ob_db_tx_gaö_èbÀ_1p0
[][5] = {

117 c⁄° 
u32
 
	g¨9340_1p0_ødio_c‹e
[][2] = {

221 c⁄° 
u32
 
	g¨9340_1p0_ødio_c‹e_40M
[][2] = {

230 c⁄° 
u32
 
	g¨9340_1p0_ba£b™d_po°ambÀ
[][5] = {

280 c⁄° 
u32
 
	g¨9340_1p0_ba£b™d_c‹e
[][2] = {

429 c⁄° 
u32
 
	g¨9340Modes_high_powî_tx_gaö_èbÀ_1p0
[][5] = {

526 c⁄° 
u32
 
	g¨9340Modes_high_ob_db_tx_gaö_èbÀ_1p0
[][5] = {

624 c⁄° 
u32
 
	g¨9340Modes_ub124_tx_gaö_èbÀ_1p0
[][5] = {

725 c⁄° 
u32
 
	g¨9340Modes_low_ob_db_tx_gaö_èbÀ_1p0
[][5] = {

824 c⁄° 
u32
 
	g¨9340Modes_mixed_ob_db_tx_gaö_èbÀ_1p0
[][5] = {

923 c⁄° 
u32
 
	g¨9340Modes_low_ob_db_™d_•ur_tx_gaö_èbÀ_1p0
[][5] = {

1023 c⁄° 
u32
 
	g¨9340_1p0_mac_c‹e
[][2] = {

1188 c⁄° 
u32
 
	g¨9340_1p0_soc_¥ómbÀ
[][2] = {

1196 c⁄° 
u32
 
	g¨9340_cus227_tx_gaö_èbÀ_1p0
[][5] = {

	@ar9462_2p0_initvals.h

18 #i‚de‡
INITVALS_9462_2P0_H


19 
	#INITVALS_9462_2P0_H


	)

23 
	#¨9462_2p0_mac_po°ambÀ
 
¨9331_1p1_mac_po°ambÀ


	)

25 
	#¨9462_2p0_comm⁄_wo_x a_rx_gaö
 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2


	)

27 
	#¨9462_2p0_comm⁄_5g_x a_⁄ly_rxgaö
 
¨9462_2p0_comm⁄_mixed_rx_gaö


	)

29 
	#¨9462_2p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

31 c⁄° 
u32
 
	g¨9462_2p0_modes_Á°_˛ock
[][3] = {

44 c⁄° 
u32
 
	g¨9462_2p0_ba£b™d_po°ambÀ
[][5] = {

103 c⁄° 
u32
 
	g¨9462_2p0_comm⁄_rx_gaö
[][2] = {

363 c⁄° 
u32
 
	g¨9462_2p0_pcõphy_˛kªq_dißbÀ_L1
[][2] = {

370 c⁄° 
u32
 
	g¨9462_2p0_ødio_po°ambÀ_sys2™t
[][5] = {

377 c⁄° 
u32
 
	g¨9462_2p0_modes_low_ob_db_tx_gaö
[][5] = {

446 c⁄° 
u32
 
	g¨9462_2p0_soc_po°ambÀ
[][5] = {

451 c⁄° 
u32
 
	g¨9462_2p0_ba£b™d_c‹e
[][2] = {

601 c⁄° 
u32
 
	g¨9462_2p0_ødio_po°ambÀ
[][5] = {

609 c⁄° 
u32
 
	g¨9462_2p0_modes_mix_ob_db_tx_gaö
[][5] = {

672 c⁄° 
u32
 
	g¨9462_2p0_modes_high_ob_db_tx_gaö
[][5] = {

741 c⁄° 
u32
 
	g¨9462_2p0_ødio_c‹e
[][2] = {

799 c⁄° 
u32
 
	g¨9462_2p0_soc_¥ómbÀ
[][2] = {

807 c⁄° 
u32
 
	g¨9462_2p0_mac_c‹e
[][2] = {

970 c⁄° 
u32
 
	g¨9462_2p0_comm⁄_mixed_rx_gaö
[][2] = {

1230 c⁄° 
u32
 
	g¨9462_2p0_ba£b™d_po°ambÀ_5g_x a
[][5] = {

1235 c⁄° 
u32
 
	g¨9462_2p0_ba£b™d_c‹e_mix_rxgaö
[][2] = {

1240 c⁄° 
u32
 
	g¨9462_2p0_ba£b™d_po°ambÀ_mix_rxgaö
[][5] = {

	@ar9462_2p1_initvals.h

18 #i‚de‡
INITVALS_9462_2P1_H


19 
	#INITVALS_9462_2P1_H


	)

23 
	#¨9462_2p1_mac_po°ambÀ
 
¨9462_2p0_mac_po°ambÀ


	)

25 
	#¨9462_2p1_ba£b™d_c‹e
 
¨9462_2p0_ba£b™d_c‹e


	)

27 
	#¨9462_2p1_ødio_c‹e
 
¨9462_2p0_ødio_c‹e


	)

29 
	#¨9462_2p1_ødio_po°ambÀ
 
¨9462_2p0_ødio_po°ambÀ


	)

31 
	#¨9462_2p1_soc_po°ambÀ
 
¨9462_2p0_soc_po°ambÀ


	)

33 
	#¨9462_2p1_ødio_po°ambÀ_sys2™t
 
¨9462_2p0_ødio_po°ambÀ_sys2™t


	)

35 
	#¨9462_2p1_comm⁄_rx_gaö
 
¨9462_2p0_comm⁄_rx_gaö


	)

37 
	#¨9462_2p1_comm⁄_mixed_rx_gaö
 
¨9462_2p0_comm⁄_mixed_rx_gaö


	)

39 
	#¨9462_2p1_comm⁄_5g_x a_⁄ly_rxgaö
 
¨9462_2p0_comm⁄_5g_x a_⁄ly_rxgaö


	)

41 
	#¨9462_2p1_ba£b™d_c‹e_mix_rxgaö
 
¨9462_2p0_ba£b™d_c‹e_mix_rxgaö


	)

43 
	#¨9462_2p1_ba£b™d_po°ambÀ_mix_rxgaö
 
¨9462_2p0_ba£b™d_po°ambÀ_mix_rxgaö


	)

45 
	#¨9462_2p1_ba£b™d_po°ambÀ_5g_x a
 
¨9462_2p0_ba£b™d_po°ambÀ_5g_x a


	)

47 
	#¨9462_2p1_comm⁄_wo_x a_rx_gaö
 
¨9462_2p0_comm⁄_wo_x a_rx_gaö


	)

49 
	#¨9462_2p1_modes_low_ob_db_tx_gaö
 
¨9462_2p0_modes_low_ob_db_tx_gaö


	)

51 
	#¨9462_2p1_modes_high_ob_db_tx_gaö
 
¨9462_2p0_modes_high_ob_db_tx_gaö


	)

53 
	#¨9462_2p1_modes_mix_ob_db_tx_gaö
 
¨9462_2p0_modes_mix_ob_db_tx_gaö


	)

55 
	#¨9462_2p1_modes_Á°_˛ock
 
¨9462_2p0_modes_Á°_˛ock


	)

57 
	#¨9462_2p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9462_2p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

59 
	#¨9462_2p1_pcõphy_˛kªq_dißbÀ_L1
 
¨9462_2p0_pcõphy_˛kªq_dißbÀ_L1


	)

61 c⁄° 
u32
 
	g¨9462_2p1_mac_c‹e
[][2] = {

224 c⁄° 
u32
 
	g¨9462_2p1_ba£b™d_po°ambÀ
[][5] = {

283 c⁄° 
u32
 
	g¨9462_2p1_soc_¥ómbÀ
[][2] = {

	@ar9485_initvals.h

18 #i‚de‡
INITVALS_9485_H


19 
	#INITVALS_9485_H


	)

23 
	#¨9485_modes_lowe°_ob_db_tx_gaö_1_1
 
¨9485Modes_low_ob_db_tx_gaö_1_1


	)

25 
	#¨9485_1_1_mac_po°ambÀ
 
¨9331_1p1_mac_po°ambÀ


	)

27 
	#¨9485_1_1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

29 c⁄° 
u32
 
	g¨9485Comm⁄_wo_x a_rx_gaö_1_1
[][2] = {

167 c⁄° 
u32
 
	g¨9485Modes_high_powî_tx_gaö_1_1
[][5] = {

261 c⁄° 
u32
 
	g¨9485Modes_gªí_ob_db_tx_gaö_1_1
[][5] = {

355 c⁄° 
u32
 
	g¨9485Modes_high_ob_db_tx_gaö_1_1
[][5] = {

449 c⁄° 
u32
 
	g¨9485Modes_low_ob_db_tx_gaö_1_1
[][5] = {

543 c⁄° 
u32
 
	g¨9485Modes_gªí_•ur_ob_db_tx_gaö_1_1
[][5] = {

637 c⁄° 
u32
 
	g¨9485_1_1
[][2] = {

657 c⁄° 
u32
 
	g¨9485_1_1_ødio_c‹e
[][2] = {

722 c⁄° 
u32
 
	g¨9485_1_1_ba£b™d_c‹e
[][2] = {

859 c⁄° 
u32
 
	g¨9485_comm⁄_rx_gaö_1_1
[][2] = {

997 c⁄° 
u32
 
	g¨9485_1_1_soc_¥ómbÀ
[][2] = {

1009 c⁄° 
u32
 
	g¨9485_Á°_˛ock_1_1_ba£b™d_po°ambÀ
[][3] = {

1016 c⁄° 
u32
 
	g¨9485_1_1_ba£b™d_po°ambÀ
[][5] = {

1055 c⁄° 
u32
 
	g¨9485_1_1_ødio_po°ambÀ
[][2] = {

1064 c⁄° 
u32
 
	g¨9485_1_1_mac_c‹e
[][2] = {

1226 c⁄° 
u32
 
	g¨9485_1_1_pcõ_phy_˛kªq_dißbÀ_L1
[][2] = {

1233 c⁄° 
u32
 
	g¨9485_1_1_∂l_⁄_cdr_⁄_˛kªq_dißbÀ_L1
[][2] = {

	@ar953x_initvals.h

18 #i‚de‡
INITVALS_953X_H


19 
	#INITVALS_953X_H


	)

21 
	#qˇ953x_1p0_mac_po°ambÀ
 
¨9300_2p2_mac_po°ambÀ


	)

23 
	#qˇ953x_1p0_soc_¥ómbÀ
 
¨955x_1p0_soc_¥ómbÀ


	)

25 
	#qˇ953x_1p0_soc_po°ambÀ
 
¨9300_2p2_soc_po°ambÀ


	)

27 
	#qˇ953x_1p0_comm⁄_rx_gaö_èbÀ
 
¨9300Comm⁄_rx_gaö_èbÀ_2p2


	)

29 
	#qˇ953x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2


	)

31 
	#qˇ953x_1p0_modes_Á°_˛ock
 
¨9300Modes_Á°_˛ock_2p2


	)

33 
	#qˇ953x_1p0_comm⁄_wo_x a_rx_gaö_bounds
 
¨955x_1p0_comm⁄_wo_x a_rx_gaö_bounds


	)

35 
	#qˇ953x_1p0_comm⁄_rx_gaö_bounds
 
¨955x_1p0_comm⁄_rx_gaö_bounds


	)

37 c⁄° 
u32
 
	gqˇ953x_1p0_mac_c‹e
[][2] = {

195 c⁄° 
u32
 
	gqˇ953x_1p0_ba£b™d_c‹e
[][2] = {

343 c⁄° 
u32
 
	gqˇ953x_1p0_ba£b™d_po°ambÀ
[][5] = {

394 c⁄° 
u32
 
	gqˇ953x_1p0_ødio_c‹e
[][2] = {

485 c⁄° 
u32
 
	gqˇ953x_1p0_ødio_po°ambÀ
[][5] = {

499 c⁄° 
u32
 
	gqˇ953x_1p0_modes_x∑_tx_gaö_èbÀ
[][2] = {

565 c⁄° 
u32
 
	gqˇ953x_1p0_modes_no_x∑_tx_gaö_èbÀ
[][2] = {

630 c⁄° 
u32
 
	gqˇ953x_1p1_modes_no_x∑_tx_gaö_èbÀ
[][2] = {

695 c⁄° 
u32
 
	gqˇ953x_1p1_modes_x∑_tx_gaö_èbÀ
[][2] = {

760 c⁄° 
u32
 
	gqˇ953x_2p0_ba£b™d_c‹e
[][2] = {

908 c⁄° 
u32
 
	gqˇ953x_2p0_ba£b™d_po°ambÀ
[][5] = {

959 c⁄° 
u32
 
	gqˇ953x_2p0_comm⁄_wo_x a_rx_gaö_èbÀ
[][2] = {

1219 c⁄° 
u32
 
	gqˇ953x_2p0_comm⁄_wo_x a_rx_gaö_bounds
[][5] = {

1225 c⁄° 
u32
 
	gqˇ953x_2p0_modes_x∑_tx_gaö_èbÀ
[][2] = {

1290 c⁄° 
u32
 
	gqˇ953x_2p0_modes_no_x∑_tx_gaö_èbÀ
[][2] = {

	@ar955x_1p0_initvals.h

18 #i‚de‡
INITVALS_955X_1P0_H


19 
	#INITVALS_955X_1P0_H


	)

23 
	#¨955x_1p0_soc_po°ambÀ
 
¨9300_2p2_soc_po°ambÀ


	)

25 
	#¨955x_1p0_comm⁄_rx_gaö_èbÀ
 
¨9300Comm⁄_rx_gaö_èbÀ_2p2


	)

27 
	#¨955x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2


	)

29 
	#¨955x_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

31 c⁄° 
u32
 
	g¨955x_1p0_ødio_po°ambÀ
[][5] = {

48 c⁄° 
u32
 
	g¨955x_1p0_ba£b™d_po°ambÀ
[][5] = {

105 c⁄° 
u32
 
	g¨955x_1p0_ødio_c‹e
[][2] = {

247 c⁄° 
u32
 
	g¨955x_1p0_modes_x∑_tx_gaö_èbÀ
[][9] = {

319 c⁄° 
u32
 
	g¨955x_1p0_mac_c‹e
[][2] = {

477 c⁄° 
u32
 
	g¨955x_1p0_ba£b™d_c‹e
[][2] = {

635 c⁄° 
u32
 
	g¨955x_1p0_soc_¥ómbÀ
[][2] = {

652 c⁄° 
u32
 
	g¨955x_1p0_comm⁄_wo_x a_rx_gaö_bounds
[][5] = {

658 c⁄° 
u32
 
	g¨955x_1p0_mac_po°ambÀ
[][5] = {

670 c⁄° 
u32
 
	g¨955x_1p0_comm⁄_rx_gaö_bounds
[][5] = {

676 c⁄° 
u32
 
	g¨955x_1p0_modes_no_x∑_tx_gaö_èbÀ
[][9] = {

747 c⁄° 
u32
 
	g¨955x_1p0_modes_Á°_˛ock
[][3] = {

	@ar9565_1p0_initvals.h

18 #i‚de‡
INITVALS_9565_1P0_H


19 
	#INITVALS_9565_1P0_H


	)

23 
	#¨9565_1p0_mac_po°ambÀ
 
¨9331_1p1_mac_po°ambÀ


	)

25 
	#¨9565_1p0_Modes_lowe°_ob_db_tx_gaö_èbÀ
 
¨9565_1p0_modes_low_ob_db_tx_gaö_èbÀ


	)

27 
	#¨9565_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

29 c⁄° 
u32
 
	g¨9565_1p0_mac_c‹e
[][2] = {

191 c⁄° 
u32
 
	g¨9565_1p0_ba£b™d_c‹e
[][2] = {

332 c⁄° 
u32
 
	g¨9565_1p0_ba£b™d_po°ambÀ
[][5] = {

378 c⁄° 
u32
 
	g¨9565_1p0_ødio_c‹e
[][2] = {

422 c⁄° 
u32
 
	g¨9565_1p0_ødio_po°ambÀ
[][5] = {

431 c⁄° 
u32
 
	g¨9565_1p0_soc_¥ómbÀ
[][2] = {

440 c⁄° 
u32
 
	g¨9565_1p0_soc_po°ambÀ
[][5] = {

445 c⁄° 
u32
 
	g¨9565_1p0_Comm⁄_rx_gaö_èbÀ
[][2] = {

708 c⁄° 
u32
 
	g¨9565_1p0_pcõphy_˛kªq_dißbÀ_L1
[][2] = {

715 c⁄° 
u32
 
	g¨9565_1p0_modes_Á°_˛ock
[][3] = {

728 c⁄° 
u32
 
	g¨9565_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
[][2] = {

988 c⁄° 
u32
 
	g¨9565_1p0_modes_low_ob_db_tx_gaö_èbÀ
[][5] = {

1048 c⁄° 
u32
 
	g¨9565_1p0_modes_high_ob_db_tx_gaö_èbÀ
[][5] = {

1108 c⁄° 
u32
 
	g¨9565_1p0_modes_high_powî_tx_gaö_èbÀ
[][5] = {

	@ar9565_1p1_initvals.h

18 #i‚de‡
INITVALS_9565_1P1_H


19 
	#INITVALS_9565_1P1_H


	)

23 
	#¨9565_1p1_mac_c‹e
 
¨9565_1p0_mac_c‹e


	)

25 
	#¨9565_1p1_mac_po°ambÀ
 
¨9565_1p0_mac_po°ambÀ


	)

27 
	#¨9565_1p1_ba£b™d_c‹e
 
¨9565_1p0_ba£b™d_c‹e


	)

29 
	#¨9565_1p1_ba£b™d_po°ambÀ
 
¨9565_1p0_ba£b™d_po°ambÀ


	)

31 
	#¨9565_1p1_ødio_c‹e
 
¨9565_1p0_ødio_c‹e


	)

33 
	#¨9565_1p1_soc_¥ómbÀ
 
¨9565_1p0_soc_¥ómbÀ


	)

35 
	#¨9565_1p1_soc_po°ambÀ
 
¨9565_1p0_soc_po°ambÀ


	)

37 
	#¨9565_1p1_Comm⁄_rx_gaö_èbÀ
 
¨9565_1p0_Comm⁄_rx_gaö_èbÀ


	)

39 
	#¨9565_1p1_Modes_lowe°_ob_db_tx_gaö_èbÀ
 
¨9565_1p0_Modes_lowe°_ob_db_tx_gaö_èbÀ


	)

41 
	#¨9565_1p1_pcõphy_˛kªq_dißbÀ_L1
 
¨9565_1p0_pcõphy_˛kªq_dißbÀ_L1


	)

43 
	#¨9565_1p1_modes_Á°_˛ock
 
¨9565_1p0_modes_Á°_˛ock


	)

45 
	#¨9565_1p1_comm⁄_wo_x a_rx_gaö_èbÀ
 
¨9565_1p0_comm⁄_wo_x a_rx_gaö_èbÀ


	)

47 
	#¨9565_1p1_modes_low_ob_db_tx_gaö_èbÀ
 
¨9565_1p0_modes_low_ob_db_tx_gaö_èbÀ


	)

49 
	#¨9565_1p1_modes_high_ob_db_tx_gaö_èbÀ
 
¨9565_1p0_modes_high_ob_db_tx_gaö_èbÀ


	)

51 
	#¨9565_1p1_modes_high_powî_tx_gaö_èbÀ
 
¨9565_1p0_modes_high_powî_tx_gaö_èbÀ


	)

53 
	#¨9565_1p1_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9565_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

55 c⁄° 
u32
 
	g¨9565_1p1_ødio_po°ambÀ
[][5] = {

	@ar956x_initvals.h

18 #i‚de‡
INITVALS_956X_H


19 
	#INITVALS_956X_H


	)

21 
	#qˇ956x_1p0_mac_c‹e
 
¨955x_1p0_mac_c‹e


	)

23 
	#qˇ956x_1p0_mac_po°ambÀ
 
¨9331_1p1_mac_po°ambÀ


	)

25 
	#qˇ956x_1p0_soc_¥ómbÀ
 
¨955x_1p0_soc_¥ómbÀ


	)

27 
	#qˇ956x_1p0_soc_po°ambÀ
 
¨9300_2p2_soc_po°ambÀ


	)

29 
	#qˇ956x_1p0_comm⁄_wo_x a_rx_gaö_èbÀ
 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2


	)

31 
	#qˇ956x_1p0_ba£b™d_po°ambÀ_dfs_ch™√l
 
¨9300_2p2_ba£b™d_po°ambÀ_dfs_ch™√l


	)

33 
	#qˇ956x_1p0_comm⁄_wo_x a_rx_gaö_bounds
 
¨955x_1p0_comm⁄_wo_x a_rx_gaö_bounds


	)

35 
	#qˇ956x_1p0_comm⁄_rx_gaö_bounds
 
¨955x_1p0_comm⁄_rx_gaö_bounds


	)

37 
	#qˇ956x_1p0_modes_Á°_˛ock
 
¨9462_2p0_modes_Á°_˛ock


	)

39 c⁄° 
u32
 
	gqˇ956x_1p0_ba£b™d_c‹e
[][2] = {

205 c⁄° 
u32
 
	gqˇ956x_1p0_ba£b™d_po°ambÀ
[][5] = {

262 c⁄° 
u32
 
	gqˇ956x_1p0_ødio_c‹e
[][2] = {

388 c⁄° 
u32
 
	gqˇ956x_1p0_ødio_po°ambÀ
[][5] = {

405 c⁄° 
u32
 
	gqˇ956x_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
[][2] = {

412 c⁄° 
u32
 
	gqˇ956x_1p0_modes_no_x∑_tx_gaö_èbÀ
[][3] = {

494 c⁄° 
u32
 
	gqˇ956x_1p0_modes_x∑_tx_gaö_èbÀ
[][3] = {

570 c⁄° 
u32
 
	gqˇ956x_1p0_modes_no_x∑_low_ob_db_tx_gaö_èbÀ
[][3] = {

660 c⁄° 
u32
 
	gqˇ956x_1p0_modes_no_x∑_gªí_tx_gaö_èbÀ
[][3] = {

768 c⁄° 
u32
 
	gqˇ956x_1p0_comm⁄_rx_gaö_èbÀ
[][2] = {

1028 c⁄° 
u32
 
	gqˇ956x_1p0_x a_⁄ly
[][5] = {

	@ar9580_1p0_initvals.h

18 #i‚de‡
INITVALS_9580_1P0_H


19 
	#INITVALS_9580_1P0_H


	)

23 
	#¨9580_1p0_soc_¥ómbÀ
 
¨9300_2p2_soc_¥ómbÀ


	)

25 
	#¨9580_1p0_soc_po°ambÀ
 
¨9300_2p2_soc_po°ambÀ


	)

27 c⁄° 
u32
 
	g¨9580_1p0_ødio_c‹e
[][2] = {

171 
	#¨9580_1p0_mac_po°ambÀ
 
¨9300_2p2_mac_po°ambÀ


	)

173 
	#¨9580_1p0_wo_x a_rx_gaö_èbÀ
 
¨9300Comm⁄_wo_x a_rx_gaö_èbÀ_2p2


	)

175 
	#¨9580_1p0_ty≥5_tx_gaö_èbÀ
 
¨9300Modes_ty≥5_tx_gaö_èbÀ_2p2


	)

177 
	#¨9580_1p0_high_ob_db_tx_gaö_èbÀ
 
¨9300Modes_high_ob_db_tx_gaö_èbÀ_2p2


	)

179 
	#¨9580_1p0_modes_Á°_˛ock
 
¨9300Modes_Á°_˛ock_2p2


	)

181 
	#¨9580_1p0_ba£b™d_c‹e_txfú_c€ff_j≠™_2484
 
¨9300_2p2_ba£b™d_c‹e_txfú_c€ff_j≠™_2484


	)

183 c⁄° 
u32
 
	g¨9580_1p0_ødio_po°ambÀ
[][5] = {

196 c⁄° 
u32
 
	g¨9580_1p0_ba£b™d_c‹e
[][2] = {

357 c⁄° 
u32
 
	g¨9580_1p0_low_ob_db_tx_gaö_èbÀ
[][5] = {

463 c⁄° 
u32
 
	g¨9580_1p0_high_powî_tx_gaö_èbÀ
[][5] = {

570 c⁄° 
u32
 
	g¨9580_1p0_lowe°_ob_db_tx_gaö_èbÀ
[][5] = {

676 c⁄° 
u32
 
	g¨9580_1p0_mac_c‹e
[][2] = {

833 c⁄° 
u32
 
	g¨9580_1p0_mixed_ob_db_tx_gaö_èbÀ
[][5] = {

939 c⁄° 
u32
 
	g¨9580_1p0_ty≥6_tx_gaö_èbÀ
[][5] = {

1013 c⁄° 
u32
 
	g¨9580_1p0_rx_gaö_èbÀ
[][2] = {

1273 c⁄° 
u32
 
	g¨9580_1p0_ba£b™d_po°ambÀ
[][5] = {

1331 c⁄° 
u32
 
	g¨9580_1p0_pcõ_phy_˛kªq_íabÀ_L1
[][2] = {

1338 c⁄° 
u32
 
	g¨9580_1p0_pcõ_phy_˛kªq_dißbÀ_L1
[][2] = {

1345 c⁄° 
u32
 
	g¨9580_1p0_pcõ_phy_∂l_⁄_˛kªq
[][2] = {

1352 c⁄° 
u32
 
	g¨9580_1p0_ba£b™d_po°ambÀ_dfs_ch™√l
[][3] = {

	@ath9k.h

17 #i‚de‡
ATH9K_H


18 
	#ATH9K_H


	)

20 
	~<löux/ëhîdevi˚.h
>

21 
	~<löux/devi˚.h
>

22 
	~<löux/öãºu±.h
>

23 
	~<löux/Àds.h
>

24 
	~<löux/com∂ëi⁄.h
>

25 
	~<löux/time.h
>

27 
	~"comm⁄.h
"

28 
	~"debug.h
"

29 
	~"mci.h
"

30 
	~"dfs.h
"

32 
	g©h_node
;

33 
	g©h_vif
;

35 
õì80211_›s
 
©h9k_›s
;

36 
©h9k_mod∑øm_nohw¸y±
;

37 
©h9k_Àd_blök
;

38 
boﬁ
 
is_©h9k_u∆ﬂded
;

39 
©h9k_u£_ch™˘x
;

45 
	#ATH_TXSTATUS_RING_SIZE
 512

	)

48 
	#ôo64
(
x
) ((x) == 1) ? \

49 ((()(
x
)) & (0xff)) : \

50 ((
x
) == 2) ? \

51 ((()(
x
)) & 0xffff) : \

52 (((
x
) == 4) ? \

53 ((()(
x
)) & 0xffffffff) : \

54 ()(
x
))

	)

56 
	#ATH_TXBUF_RESET
(
_bf
) do { \

57 (
_bf
)->
bf_œ°bf
 = 
NULL
; \

58 (
_bf
)->
bf_√xt
 = 
NULL
; \

59 
	`mem£t
(&((
_bf
)->
bf_°©e
), 0, \

60 (
©h_buf_°©e
)); \

61 } 0)

	)

63 
	#DS2PHYS
(
_dd
, 
_ds
) \

64 ((
_dd
)->
dd_desc_∑ddr
 + ((
ˇddr_t
)(
_ds
Ë- (ˇddr_t)(_dd)->
dd_desc
))

	)

65 
	#ATH_DESC_4KB_BOUND_CHECK
(
_daddr
Ë((((_daddrË& 0xFFFË> 0xF7FË? 1 : 0)

	)

66 
	#ATH_DESC_4KB_BOUND_NUM_SKIPPED
(
_Àn
Ë((_ÀnË/ 4096)

	)

68 
	s©h_descdma
 {

69 *
	mdd_desc
;

70 
dma_addr_t
 
	mdd_desc_∑ddr
;

71 
u32
 
	mdd_desc_Àn
;

74 
©h_descdma_£tup
(
©h_so·c
 *
sc
, 
©h_descdma
 *
dd
,

75 
li°_hód
 *
hód
, c⁄° *
«me
,

76 
nbuf
, 
ndesc
, 
boﬁ
 
is_tx
);

82 
	#ATH_TXQ_SETUP
(
sc
, 
i
Ë((sc)->
tx
.
txq£tup
 & (1<<i))

	)

85 
	#INCR
(
_l
, 
_sz
) do { \

86 (
_l
)++; \

87 (
_l
Ë&((
_sz
) - 1); \

88 } 0)

	)

90 
	#ATH_RXBUF
 512

	)

91 
	#ATH_TXBUF
 512

	)

92 
	#ATH_TXBUF_RESERVE
 5

	)

93 
	#ATH_MAX_QDEPTH
 (
ATH_TXBUF
 / 4 - 
ATH_TXBUF_RESERVE
)

	)

94 
	#ATH_TXMAXTRY
 13

	)

95 
	#ATH_MAX_SW_RETRIES
 30

	)

97 
	#TID_TO_WME_AC
(
_tid
) \

98 ((((
_tid
Ë=0Ë|| ((_tidË=3)Ë? 
IEEE80211_AC_BE
 : \

99 (((
_tid
Ë=1Ë|| ((_tidË=2)Ë? 
IEEE80211_AC_BK
 : \

100 (((
_tid
Ë=4Ë|| ((_tidË=5)Ë? 
IEEE80211_AC_VI
 : \

101 
IEEE80211_AC_VO
)

	)

103 
	#ATH_AGGR_DELIM_SZ
 4

	)

104 
	#ATH_AGGR_MINPLEN
 256

	)

106 
	#ATH_AGGR_ENCRYPTDELIM
 10

	)

108 
	#ATH_AGGR_MIN_QDEPTH
 2

	)

110 
	#ATH_NON_AGGR_MIN_QDEPTH
 8

	)

111 
	#ATH_TX_COMPLETE_POLL_INT
 1000

	)

112 
	#ATH_TXFIFO_DEPTH
 8

	)

113 
	#ATH_TX_ERROR
 0x01

	)

116 
	#ATH_P2P_PS_STOP_TIME
 1000

	)

118 
	#IEEE80211_SEQ_SEQ_SHIFT
 4

	)

119 
	#IEEE80211_SEQ_MAX
 4096

	)

120 
	#IEEE80211_WEP_IVLEN
 3

	)

121 
	#IEEE80211_WEP_KIDLEN
 1

	)

122 
	#IEEE80211_WEP_CRCLEN
 4

	)

123 
	#IEEE80211_MAX_MPDU_LEN
 (3840 + 
FCS_LEN
 + \

124 (
IEEE80211_WEP_IVLEN
 + \

125 
IEEE80211_WEP_KIDLEN
 + \

126 
IEEE80211_WEP_CRCLEN
))

	)

130 
	#ATH_BA_ISSET
(
_bm
, 
_n
Ë(((_nË< (
WME_BA_BMP_SIZE
)) && \

131 ((
_bm
)[(
_n
Ë>> 5] & (1 << ((_nË& 31))))

	)

134 
	#ATH_BA_INDEX
(
_°
, 
_£q
Ë(((_£qË- (_°)Ë& (
IEEE80211_SEQ_MAX
 - 1))

	)

137 
	#ATH_BA_INDEX2SEQ
(
_£q
, 
_off£t
Ë(((_£qË+ (_off£t)Ë& (
IEEE80211_SEQ_MAX
 - 1))

	)

140 
	#ATH_AGGR_GET_NDELIM
(
_Àn
) \

141 (((
_Àn
Ë>
ATH_AGGR_MINPLEN
) ? 0 : \

142 
	`DIV_ROUND_UP
(
ATH_AGGR_MINPLEN
 - (
_Àn
), 
ATH_AGGR_DELIM_SZ
))

	)

144 
	#BAW_WITHIN
(
_°¨t
, 
_bawsz
, 
_£qno
) \

145 ((((
_£qno
Ë- (
_°¨t
)Ë& 4095Ë< (
_bawsz
))

	)

147 
	#ATH_AN_2_TID
(
_™
, 
_tidno
Ë(&(_™)->
tid
[(_tidno)])

	)

149 
	#IS_HT_RATE
(
øã
Ë‘©ê& 0x80)

	)

150 
	#IS_CCK_RATE
(
øã
Ë(‘©ê>0x18Ë&& (øã <0x1e))

	)

151 
	#IS_OFDM_RATE
(
øã
Ë(‘©ê>0x8Ë&& (øã <0xf))

	)

154 
	mWLAN_RC_PHY_OFDM
,

155 
	mWLAN_RC_PHY_CCK
,

158 
	s©h_txq
 {

159 
	mmac80211_qnum
;

160 
u32
 
	maxq_qnum
;

161 *
	maxq_lök
;

162 
li°_hód
 
	maxq_q
;

163 
•ölock_t
 
	maxq_lock
;

164 
u32
 
	maxq_dïth
;

165 
u32
 
	maxq_ampdu_dïth
;

166 
boﬁ
 
	m°›≥d
;

167 
boﬁ
 
	maxq_tx_ö¥ogªss
;

168 
li°_hód
 
	mtxq_fifo
[
ATH_TXFIFO_DEPTH
];

169 
u8
 
	mtxq_hódidx
;

170 
u8
 
	mtxq_èûidx
;

171 
	m≥ndög_‰ames
;

172 
sk_buff_hód
 
	mcom∂ëe_q
;

175 
	s©h_‰ame_öfo
 {

176 
©h_buf
 *
	mbf
;

177 
u16
 
	m‰amñí
;

178 
s8
 
	mtxq
;

179 
u8
 
	mkeyix
;

180 
u8
 
	mπs˘s_øã
;

181 
u8
 
	mªåõs
 : 7;

182 
u8
 
	mbaw_åacked
 : 1;

183 
u8
 
	mtx_powî
;

184 
©h9k_key_ty≥
 
	mkeyty≥
:2;

187 
	s©h_rxbuf
 {

188 
li°_hód
 
	mli°
;

189 
sk_buff
 *
	mbf_mpdu
;

190 *
	mbf_desc
;

191 
dma_addr_t
 
	mbf_daddr
;

192 
dma_addr_t
 
	mbf_buf_addr
;

202 
	ebuf„r_ty≥
 {

203 
	mBUF_AMPDU
 = 
BIT
(0),

204 
	mBUF_AGGR
 = 
BIT
(1),

207 
	#bf_ißmpdu
(
bf
Ë(bf->
bf_°©e
.
bf_ty≥
 & 
BUF_AMPDU
)

	)

208 
	#bf_ißggr
(
bf
Ë(bf->
bf_°©e
.
bf_ty≥
 & 
BUF_AGGR
)

	)

210 
	s©h_buf_°©e
 {

211 
u8
 
	mbf_ty≥
;

212 
u8
 
	mbfs_∑¥d
;

213 
u8
 
	mndñim
;

214 
boﬁ
 
	m°Æe
;

215 
u16
 
	m£qno
;

216 
	mbfs_∑¥d_time°amp
;

219 
	s©h_buf
 {

220 
li°_hód
 
	mli°
;

221 
©h_buf
 *
	mbf_œ°bf
;

223 
©h_buf
 *
	mbf_√xt
;

224 
sk_buff
 *
	mbf_mpdu
;

225 *
	mbf_desc
;

226 
dma_addr_t
 
	mbf_daddr
;

227 
dma_addr_t
 
	mbf_buf_addr
;

228 
õì80211_tx_øã
 
	møãs
[4];

229 
©h_buf_°©e
 
	mbf_°©e
;

232 
	s©h_©x_tid
 {

233 
li°_hód
 
	mli°
;

234 
sk_buff_hód
 
	mbuf_q
;

235 
sk_buff_hód
 
	mªåy_q
;

236 
©h_node
 *
	m™
;

237 
©h_txq
 *
	mtxq
;

238 
	mtx_buf
[
BITS_TO_LONGS
(
ATH_TID_MAX_BUFS
)];

239 
u16
 
	m£q_°¨t
;

240 
u16
 
	m£q_√xt
;

241 
u16
 
	mbaw_size
;

242 
u8
 
	mtidno
;

243 
	mbaw_hód
;

244 
	mbaw_èû
;

246 
s8
 
	mb¨_ödex
;

247 
boﬁ
 
	ma˘ive
;

248 
boﬁ
 
	m˛ór_ps_fûãr
;

251 
	s©h_node
 {

252 
©h_so·c
 *
	msc
;

253 
õì80211_°a
 *
	m°a
;

254 
õì80211_vif
 *
	mvif
;

255 
©h_©x_tid
 
	mtid
[
IEEE80211_NUM_TIDS
];

257 
u16
 
	mmaxampdu
;

258 
u8
 
	mmpdudísôy
;

259 
s8
 
	mps_key
;

261 
boﬁ
 
	m¶ìpög
;

262 
boﬁ
 
	mno_ps_fûãr
;

264 #ifde‡
CONFIG_ATH9K_STATION_STATISTICS


265 
©h_rx_øã_°©s
 
	mrx_øã_°©s
;

267 
u8
 
	mkey_idx
[4];

269 
u32
 
	mackto
;

270 
li°_hód
 
	mli°
;

273 
	s©h_tx_c⁄åﬁ
 {

274 
©h_txq
 *
	mtxq
;

275 
©h_node
 *
	m™
;

276 
õì80211_°a
 *
	m°a
;

277 
u8
 
	m∑¥d
;

278 
boﬁ
 
	mf‹˚_ch™√l
;

287 
	s©h_tx
 {

288 
u32
 
	mtxq£tup
;

289 
•ölock_t
 
	mtxbuÊock
;

290 
li°_hód
 
	mtxbuf
;

291 
©h_txq
 
	mtxq
[
ATH9K_NUM_TX_QUEUES
];

292 
©h_descdma
 
	mtxdma
;

293 
©h_txq
 *
	mtxq_m≠
[
IEEE80211_NUM_ACS
];

294 
©h_txq
 *
	mu≠sdq
;

295 
u32
 
	mtxq_max_≥ndög
[
IEEE80211_NUM_ACS
];

296 
u16
 
	mmax_aggr_‰amñí
[
IEEE80211_NUM_ACS
][4][32];

299 
	s©h_rx_edma
 {

300 
sk_buff_hód
 
	mrx_fifo
;

301 
u32
 
	mrx_fifo_hwsize
;

304 
	s©h_rx
 {

305 
u8
 
	mdeÁ¡
;

306 
u8
 
	mrxŸhî™t
;

307 
boﬁ
 
	mdisˇrd_√xt
;

308 
u32
 *
	mrxlök
;

309 
u32
 
	mnum_pkts
;

310 
li°_hód
 
	mrxbuf
;

311 
©h_descdma
 
	mrxdma
;

312 
©h_rx_edma
 
	mrx_edma
[
ATH9K_RX_QUEUE_MAX
];

314 
©h_rxbuf
 *
	mbuf_hﬁd
;

315 
sk_buff
 *
	m‰ag
;

317 
u32
 
	mampdu_ªf
;

324 
	s©h_ch™˘x
 {

325 
cfg80211_ch™_def
 
	mch™def
;

326 
li°_hód
 
	mvifs
;

327 
li°_hód
 
	macq
[
IEEE80211_NUM_ACS
];

328 
	mhw_queue_ba£
;

331 
õì80211_vif
 *
	m¥im¨y_°a
;

333 
©h_bóc⁄_c⁄fig
 
	mbóc⁄
;

334 
©h9k_hw_ˇl_d©a
 
	mˇld©a
;

335 
time•ec
 
	mtsf_ts
;

336 
u64
 
	mtsf_vÆ
;

337 
u32
 
	mœ°_bóc⁄
;

339 
	mÊush_timeout
;

340 
u16
 
	mtxpowî
;

341 
u16
 
	mcur_txpowî
;

342 
boﬁ
 
	moffch™√l
;

343 
boﬁ
 
	m°›≥d
;

344 
boﬁ
 
	ma˘ive
;

345 
boﬁ
 
	massig√d
;

346 
boﬁ
 
	mswôch_a·î_bóc⁄
;

348 
	mnvifs
;

349 
	mnvifs_assig√d
;

350 
	mrxfûãr
;

353 
	e©h_ch™˘x_evít
 {

354 
	mATH_CHANCTX_EVENT_BEACON_PREPARE
,

355 
	mATH_CHANCTX_EVENT_BEACON_SENT
,

356 
	mATH_CHANCTX_EVENT_TSF_TIMER
,

357 
	mATH_CHANCTX_EVENT_BEACON_RECEIVED
,

358 
	mATH_CHANCTX_EVENT_AUTHORIZED
,

359 
	mATH_CHANCTX_EVENT_SWITCH
,

360 
	mATH_CHANCTX_EVENT_ASSIGN
,

361 
	mATH_CHANCTX_EVENT_UNASSIGN
,

362 
	mATH_CHANCTX_EVENT_CHANGE
,

363 
	mATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL
,

366 
	e©h_ch™˘x_°©e
 {

367 
	mATH_CHANCTX_STATE_IDLE
,

368 
	mATH_CHANCTX_STATE_WAIT_FOR_BEACON
,

369 
	mATH_CHANCTX_STATE_WAIT_FOR_TIMER
,

370 
	mATH_CHANCTX_STATE_SWITCH
,

371 
	mATH_CHANCTX_STATE_FORCE_ACTIVE
,

374 
	s©h_ch™˘x_sched
 {

375 
boﬁ
 
	mbóc⁄_≥ndög
;

376 
boﬁ
 
	mbóc⁄_adju°
;

377 
boﬁ
 
	moffch™√l_≥ndög
;

378 
boﬁ
 
	mwaô_swôch
;

379 
boﬁ
 
	mf‹˚_nﬂ_upd©e
;

380 
boﬁ
 
	mexãnd_ab£n˚
;

381 
boﬁ
 
	mmgd_¥ï¨e_tx
;

382 
©h_ch™˘x_°©e
 
	m°©e
;

383 
u8
 
	mbóc⁄_miss
;

385 
u32
 
	m√xt_tbâ
;

386 
u32
 
	mswôch_°¨t_time
;

387 
	moffch™√l_duøti⁄
;

388 
	mch™√l_swôch_time
;

391 
timî_li°
 
	mtimî
;

394 
	e©h_offch™√l_°©e
 {

395 
	mATH_OFFCHANNEL_IDLE
,

396 
	mATH_OFFCHANNEL_PROBE_SEND
,

397 
	mATH_OFFCHANNEL_PROBE_WAIT
,

398 
	mATH_OFFCHANNEL_SUSPEND
,

399 
	mATH_OFFCHANNEL_ROC_START
,

400 
	mATH_OFFCHANNEL_ROC_WAIT
,

401 
	mATH_OFFCHANNEL_ROC_DONE
,

404 
	e©h_roc_com∂ëe_ªas⁄
 {

405 
	mATH_ROC_COMPLETE_EXPIRE
,

406 
	mATH_ROC_COMPLETE_ABORT
,

407 
	mATH_ROC_COMPLETE_CANCEL
,

410 
	s©h_offch™√l
 {

411 
©h_ch™˘x
 
	mch™
;

412 
timî_li°
 
	mtimî
;

413 
cfg80211_sˇn_ªque°
 *
	msˇn_ªq
;

414 
õì80211_vif
 *
	msˇn_vif
;

415 
	msˇn_idx
;

416 
©h_offch™√l_°©e
 
	m°©e
;

417 
õì80211_ch™√l
 *
	mroc_ch™
;

418 
õì80211_vif
 *
	mroc_vif
;

419 
	mroc_duøti⁄
;

420 
	mduøti⁄
;

423 
	#ˇ£_πn_°rög
(
vÆ
ËvÆ:  #vÆ

	)

425 
	#©h_f‹_óch_ch™˘x
(
_sc
, 
_˘x
) \

426 
˘x
 = &
sc
->
ch™˘x
[0]; \

427 
˘x
 <&
sc
->
ch™˘x
[
	`ARRAY_SIZE
(sc->chanctx) - 1]; \

428 
˘x
++)

	)

430 
©h_ch™˘x_öô
(
©h_so·c
 *
sc
);

431 
©h_ch™˘x_£t_ch™√l
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
,

432 
cfg80211_ch™_def
 *
ch™def
);

434 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


436 
ölöe
 
©h_ch™˘x
 *

437 
	$©h_ch™˘x_gë
(
õì80211_ch™˘x_c⁄f
 *
˘x
)

439 
©h_ch™˘x
 **
±r
 = (*Ë
˘x
->
drv_¥iv
;

440  *
±r
;

441 
	}
}

443 
boﬁ
 
©h9k_is_ch™˘x_íabÀd
();

444 
©h9k_fûl_ch™˘x_›s
();

445 
©h9k_öô_ch™√l_c⁄ãxt
(
©h_so·c
 *
sc
);

446 
©h9k_offch™√l_öô
(
©h_so·c
 *
sc
);

447 
©h9k_deöô_ch™√l_c⁄ãxt
(
©h_so·c
 *
sc
);

448 
©h9k_öô_p2p
(
©h_so·c
 *
sc
);

449 
©h9k_deöô_p2p
(
©h_so·c
 *
sc
);

450 
©h9k_p2p_ªmove_vif
(
©h_so·c
 *
sc
,

451 
õì80211_vif
 *
vif
);

452 
©h9k_p2p_bóc⁄_sync
(
©h_so·c
 *
sc
);

453 
©h9k_p2p_bss_öfo_ch™ged
(
©h_so·c
 *
sc
,

454 
õì80211_vif
 *
vif
);

455 
©h9k_bóc⁄_add_nﬂ
(
©h_so·c
 *
sc
, 
©h_vif
 *
avp
,

456 
sk_buff
 *
skb
);

457 
©h9k_p2p_ps_timî
(*
¥iv
);

458 
©h9k_ch™˘x_wake_queues
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
);

459 
©h9k_ch™˘x_°›_queues
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
);

460 
©h_ch™˘x_check_a˘ive
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
);

462 
©h_ch™˘x_bóc⁄_ªcv_ev
(
©h_so·c
 *
sc
,

463 
©h_ch™˘x_evít
 
ev
);

464 
©h_ch™˘x_bóc⁄_£¡_ev
(
©h_so·c
 *
sc
,

465 
©h_ch™˘x_evít
 
ev
);

466 
©h_ch™˘x_evít
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
,

467 
©h_ch™˘x_evít
 
ev
);

468 
©h_ch™˘x_£t_√xt
(
©h_so·c
 *
sc
, 
boﬁ
 
f‹˚
);

469 
©h_offch™√l_√xt
(
©h_so·c
 *
sc
);

470 
©h_sˇn_com∂ëe
(
©h_so·c
 *
sc
, 
boﬁ
 
ab‹t
);

471 
©h_roc_com∂ëe
(
©h_so·c
 *
sc
,

472 
©h_roc_com∂ëe_ªas⁄
 
ªas⁄
);

473 
©h_ch™˘x
* 
©h_is_go_ch™˘x_¥e£¡
(
©h_so·c
 *
sc
);

477 
ölöe
 
boﬁ
 
	$©h9k_is_ch™˘x_íabÀd
()

479  
Ál£
;

480 
	}
}

481 
ölöe
 
	$©h9k_fûl_ch™˘x_›s
()

483 
	}
}

484 
ölöe
 
	$©h9k_öô_ch™√l_c⁄ãxt
(
©h_so·c
 *
sc
)

486 
	}
}

487 
ölöe
 
	$©h9k_offch™√l_öô
(
©h_so·c
 *
sc
)

489 
	}
}

490 
ölöe
 
	$©h9k_deöô_ch™√l_c⁄ãxt
(
©h_so·c
 *
sc
)

492 
	}
}

493 
ölöe
 
	$©h_ch™˘x_bóc⁄_ªcv_ev
(
©h_so·c
 *
sc
,

494 
©h_ch™˘x_evít
 
ev
)

496 
	}
}

497 
ölöe
 
	$©h_ch™˘x_bóc⁄_£¡_ev
(
©h_so·c
 *
sc
,

498 
©h_ch™˘x_evít
 
ev
)

500 
	}
}

501 
ölöe
 
	$©h_ch™˘x_evít
(
©h_so·c
 *
sc
,

502 
õì80211_vif
 *
vif
,

503 
©h_ch™˘x_evít
 
ev
)

505 
	}
}

506 
ölöe
 
	$©h9k_öô_p2p
(
©h_so·c
 *
sc
)

509 
	}
}

510 
ölöe
 
	$©h9k_deöô_p2p
(
©h_so·c
 *
sc
)

512 
	}
}

513 
ölöe
 
	$©h9k_p2p_ªmove_vif
(
©h_so·c
 *
sc
,

514 
õì80211_vif
 *
vif
)

516 
	}
}

517 
ölöe
 
	$©h9k_p2p_bóc⁄_sync
(
©h_so·c
 *
sc
)

519 
	}
}

520 
ölöe
 
	$©h9k_p2p_bss_öfo_ch™ged
(
©h_so·c
 *
sc
,

521 
õì80211_vif
 *
vif
)

523 
	}
}

524 
ölöe
 
	$©h9k_bóc⁄_add_nﬂ
(
©h_so·c
 *
sc
, 
©h_vif
 *
avp
,

525 
sk_buff
 *
skb
)

527 
	}
}

528 
ölöe
 
	$©h9k_p2p_ps_timî
(
©h_so·c
 *
sc
)

530 
	}
}

531 
ölöe
 
	$©h9k_ch™˘x_wake_queues
(
©h_so·c
 *
sc
,

532 
©h_ch™˘x
 *
˘x
)

534 
	}
}

535 
ölöe
 
	$©h9k_ch™˘x_°›_queues
(
©h_so·c
 *
sc
,

536 
©h_ch™˘x
 *
˘x
)

538 
	}
}

539 
ölöe
 
	$©h_ch™˘x_check_a˘ive
(
©h_so·c
 *
sc
,

540 
©h_ch™˘x
 *
˘x
)

542 
	}
}

546 
©h_°¨åecv
(
©h_so·c
 *
sc
);

547 
boﬁ
 
©h_°›ªcv
(
©h_so·c
 *
sc
);

548 
u32
 
©h_ˇl¸xfûãr
(
©h_so·c
 *
sc
);

549 
©h_rx_öô
(
©h_so·c
 *
sc
, 
nbufs
);

550 
©h_rx_˛ónup
(
©h_so·c
 *
sc
);

551 
©h_rx_èskÀt
(
©h_so·c
 *
sc
, 
Êush
, 
boﬁ
 
hp
);

552 
©h_txq
 *
©h_txq_£tup
(
©h_so·c
 *
sc
, 
qty≥
, 
subty≥
);

553 
©h_txq_lock
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
);

554 
©h_txq_u∆ock
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
);

555 
©h_txq_u∆ock_com∂ëe
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
);

556 
©h_tx_˛ónupq
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
);

557 
boﬁ
 
©h_døö_Æl_txq
(
©h_so·c
 *
sc
);

558 
©h_døötxq
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
);

559 
©h_tx_node_öô
(
©h_so·c
 *
sc
, 
©h_node
 *
™
);

560 
©h_tx_node_˛ónup
(
©h_so·c
 *
sc
, 
©h_node
 *
™
);

561 
©h_txq_scheduÀ
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
);

562 
©h_txq_scheduÀ_Æl
(
©h_so·c
 *
sc
);

563 
©h_tx_öô
(
©h_so·c
 *
sc
, 
nbufs
);

564 
©h_txq_upd©e
(
©h_so·c
 *
sc
, 
qnum
,

565 
©h9k_tx_queue_öfo
 *
q
);

566 
©h_upd©e_max_aggr_‰amñí
(
©h_so·c
 *
sc
, 
queue
, 
tx›
);

567 
©h_assign_£q
(
©h_comm⁄
 *
comm⁄
, 
sk_buff
 *
skb
);

568 
©h_tx_°¨t
(
õì80211_hw
 *
hw
, 
sk_buff
 *
skb
,

569 
©h_tx_c⁄åﬁ
 *
tx˘l
);

570 
©h_tx_ˇbq
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
,

571 
sk_buff
 *
skb
);

572 
©h_tx_èskÀt
(
©h_so·c
 *
sc
);

573 
©h_tx_edma_èskÀt
(
©h_so·c
 *
sc
);

574 
©h_tx_aggr_°¨t
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
,

575 
u16
 
tid
, u16 *
s¢
);

576 
©h_tx_aggr_°›
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
, 
u16
 
tid
);

577 
©h_tx_aggr_ªsume
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
, 
u16
 
tid
);

579 
©h_tx_aggr_wakeup
(
©h_so·c
 *
sc
, 
©h_node
 *
™
);

580 
©h_tx_aggr_¶ìp
(
õì80211_°a
 *
°a
, 
©h_so·c
 *
sc
,

581 
©h_node
 *
™
);

582 
©h9k_ªÀa£_buf„ªd_‰ames
(
õì80211_hw
 *
hw
,

583 
õì80211_°a
 *
°a
,

584 
u16
 
tids
, 
n‰ames
,

585 
õì80211_‰ame_ªÀa£_ty≥
 
ªas⁄
,

586 
boﬁ
 
m‹e_d©a
);

592 
	#P2P_DEFAULT_CTWIN
 10

	)

594 
	s©h_vif
 {

595 
li°_hód
 
	mli°
;

597 
u16
 
	m£q_no
;

600 
u8
 
	mbssid
[
ETH_ALEN
] 
__Æig√d
(2);

601 
u16
 
	maid
;

602 
boﬁ
 
	massoc
;

604 
õì80211_vif
 *
	mvif
;

605 
©h_node
 
	mmˇ°_node
;

606 
	mav_b¶Ÿ
;

607 
__À64
 
	mtsf_adju°
;

608 
©h_buf
 *
	mav_bcbuf
;

609 
©h_ch™˘x
 *
	mch™˘x
;

612 
õì80211_nﬂ_d©a
 
	mnﬂ
;

615 
u8
 
	mnﬂ_ödex
;

616 
u32
 
	moffch™√l_°¨t
;

617 
u32
 
	moffch™√l_duøti⁄
;

620 
u32
 
	mnﬂ_°¨t
;

621 
u32
 
	mnﬂ_duøti⁄
;

622 
boﬁ
 
	m≥riodic_nﬂ
;

623 
boﬁ
 
	m⁄eshŸ_nﬂ
;

626 
	s©h9k_vif_ôî_d©a
 {

627 
u8
 
	mhw_maˇddr
[
ETH_ALEN
];

628 
u8
 
	mmask
[
ETH_ALEN
];

629 
boﬁ
 
	mhas_hw_maˇddr
;

630 
u8
 
	m¶Ÿtime
;

631 
boﬁ
 
	mbóc⁄s
;

633 
	m«ps
;

634 
	mnmeshes
;

635 
	mn°©i⁄s
;

636 
	mnwds
;

637 
	m«dhocs
;

638 
	mnocbs
;

639 
õì80211_vif
 *
	m¥im¨y_°a
;

642 
©h9k_ˇlcuœã_ôî_d©a
(
©h_so·c
 *
sc
,

643 
©h_ch™˘x
 *
˘x
,

644 
©h9k_vif_ôî_d©a
 *
ôî_d©a
);

645 
©h9k_ˇlcuœã_summ¨y_°©e
(
©h_so·c
 *
sc
,

646 
©h_ch™˘x
 *
˘x
);

647 
©h9k_£t_txpowî
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
);

658 
	#BSTUCK_THRESH
 9

	)

659 
	#ATH_BCBUF
 8

	)

660 
	#ATH_DEFAULT_BINTVAL
 100

	)

661 
	#ATH_DEFAULT_BMISS_LIMIT
 10

	)

663 
	#TSF_TO_TU
(
_h
,
_l
) \

664 ((((
u32
)(
_h
)Ë<< 22Ë| (((u32)(
_l
)Ë>> 10))

	)

666 
	s©h_bóc⁄
 {

668 
	mOK
,

669 
	mUPDATE
,

670 
	mCOMMIT


671 } 
	mupd©e¶Ÿ
;

673 
u32
 
	mbóc⁄q
;

674 
u32
 
	mbmiss˙t
;

675 
õì80211_vif
 *
	mb¶Ÿ
[
ATH_BCBUF
];

676 
	m¶Ÿtime
;

677 
	m¶Ÿupd©e
;

678 
©h_descdma
 
	mbdma
;

679 
©h_txq
 *
	mˇbq
;

680 
li°_hód
 
	mbbuf
;

682 
boﬁ
 
	mtx_¥o˚s£d
;

683 
boﬁ
 
	mtx_œ°
;

686 
©h9k_bóc⁄_èskÀt
(
d©a
);

687 
©h9k_bóc⁄_c⁄fig
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
,

688 
u32
 
ch™ged
);

689 
©h9k_bóc⁄_assign_¶Ÿ
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
);

690 
©h9k_bóc⁄_ªmove_¶Ÿ
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
);

691 
©h9k_£t_bóc⁄
(
©h_so·c
 *
sc
);

692 
boﬁ
 
©h9k_cß_is_föished
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
);

693 
©h9k_cß_upd©e
(
©h_so·c
 *
sc
);

699 
	#ATH_STA_SHORT_CALINTERVAL
 1000

	)

700 
	#ATH_AP_SHORT_CALINTERVAL
 100

	)

701 
	#ATH_ANI_POLLINTERVAL_OLD
 100

	)

702 
	#ATH_ANI_POLLINTERVAL_NEW
 1000

	)

703 
	#ATH_LONG_CALINTERVAL_INT
 1000

	)

704 
	#ATH_LONG_CALINTERVAL
 30000

	)

705 
	#ATH_RESTART_CALINTERVAL
 1200000

	)

706 
	#ATH_ANI_MAX_SKIP_COUNT
 10

	)

707 
	#ATH_PAPRD_TIMEOUT
 100

	)

708 
	#ATH_PLL_WORK_INTERVAL
 100

	)

710 
©h_tx_com∂ëe_pﬁl_w‹k
(
w‹k_°ru˘
 *
w‹k
);

711 
©h_ª£t_w‹k
(
w‹k_°ru˘
 *
w‹k
);

712 
boﬁ
 
©h_hw_check
(
©h_so·c
 *
sc
);

713 
©h_hw_∂l_w‹k
(
w‹k_°ru˘
 *
w‹k
);

714 
©h_∑¥d_ˇlibøã
(
w‹k_°ru˘
 *
w‹k
);

715 
©h_™i_ˇlibøã
(
d©a
);

716 
©h_°¨t_™i
(
©h_so·c
 *
sc
);

717 
©h_°›_™i
(
©h_so·c
 *
sc
);

718 
©h_check_™i
(
©h_so·c
 *
sc
);

719 
©h_upd©e_survey_°©s
(
©h_so·c
 *
sc
);

720 
©h_upd©e_survey_nf
(
©h_so·c
 *
sc
, 
ch™√l
);

721 
©h9k_queue_ª£t
(
©h_so·c
 *
sc
, 
©h_ª£t_ty≥
 
ty≥
);

722 
©h_ps_fuŒ_¶ìp
(
d©a
);

723 
__©h9k_Êush
(
õì80211_hw
 *
hw
, 
u32
 
queues
, 
boﬁ
 
dr›
,

724 
boﬁ
 
sw_≥ndög
, boﬁ 
timeout_ovîride
);

730 
	#ATH_DUMP_BTCOEX
(
_s
, 
_vÆ
) \

732 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, \

733 "%20†: %10d\n", 
_s
, (
_vÆ
)); \

734 } 0)

	)

736 
	ebt_›_Êags
 {

737 
	mBT_OP_PRIORITY_DETECTED
,

738 
	mBT_OP_SCAN
,

741 
	s©h_btc€x
 {

742 
•ölock_t
 
	mbtc€x_lock
;

743 
timî_li°
 
	m≥riod_timî
;

744 
timî_li°
 
	mno_°omp_timî
;

745 
u32
 
	mbt_¥i‹ôy_˙t
;

746 
	mbt_¥i‹ôy_time
;

747 
	m›_Êags
;

748 
	mbt_°omp_ty≥
;

749 
u32
 
	mbtc€x_no_°omp
;

750 
u32
 
	mbtc€x_≥riod
;

751 
u32
 
	mbtsˇn_no_°omp
;

752 
u32
 
	mduty_cy˛e
;

753 
u32
 
	mbt_waô_time
;

754 
	mrssi_cou¡
;

755 
©h_mci_¥ofûe
 
	mmci
;

756 
u8
 
	m°omp_audio
;

759 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


760 
©h9k_öô_btc€x
(
©h_so·c
 *
sc
);

761 
©h9k_deöô_btc€x
(
©h_so·c
 *
sc
);

762 
©h9k_°¨t_btc€x
(
©h_so·c
 *
sc
);

763 
©h9k_°›_btc€x
(
©h_so·c
 *
sc
);

764 
©h9k_btc€x_timî_ªsume
(
©h_so·c
 *
sc
);

765 
©h9k_btc€x_timî_∑u£
(
©h_so·c
 *
sc
);

766 
©h9k_btc€x_h™dÀ_öãºu±
(
©h_so·c
 *
sc
, 
u32
 
°©us
);

767 
u16
 
©h9k_btc€x_aggr_limô
(
©h_so·c
 *
sc
, 
u32
 
max_4ms_‰amñí
);

768 
©h9k_btc€x_°›_gí_timî
(
©h_so·c
 *
sc
);

769 
©h9k_dump_btc€x
(
©h_so·c
 *
sc
, 
u8
 *
buf
, 
u32
 
size
);

771 
ölöe
 
	$©h9k_öô_btc€x
(
©h_so·c
 *
sc
)

774 
	}
}

775 
ölöe
 
	$©h9k_deöô_btc€x
(
©h_so·c
 *
sc
)

777 
	}
}

778 
ölöe
 
	$©h9k_°¨t_btc€x
(
©h_so·c
 *
sc
)

780 
	}
}

781 
ölöe
 
	$©h9k_°›_btc€x
(
©h_so·c
 *
sc
)

783 
	}
}

784 
ölöe
 
	$©h9k_btc€x_h™dÀ_öãºu±
(
©h_so·c
 *
sc
,

785 
u32
 
°©us
)

787 
	}
}

788 
ölöe
 
u16
 
	$©h9k_btc€x_aggr_limô
(
©h_so·c
 *
sc
,

789 
u32
 
max_4ms_‰amñí
)

792 
	}
}

793 
ölöe
 
	$©h9k_btc€x_°›_gí_timî
(
©h_so·c
 *
sc
)

795 
	}
}

796 
ölöe
 
	$©h9k_dump_btc€x
(
©h_so·c
 *
sc
, 
u8
 *
buf
, 
u32
 
size
)

799 
	}
}

806 
	#ATH_LED_PIN_DEF
 1

	)

807 
	#ATH_LED_PIN_9287
 8

	)

808 
	#ATH_LED_PIN_9300
 10

	)

809 
	#ATH_LED_PIN_9485
 6

	)

810 
	#ATH_LED_PIN_9462
 4

	)

812 #ifde‡
CONFIG_MAC80211_LEDS


813 
©h_öô_Àds
(
©h_so·c
 *
sc
);

814 
©h_deöô_Àds
(
©h_so·c
 *
sc
);

815 
©h_fûl_Àd_pö
(
©h_so·c
 *
sc
);

817 
ölöe
 
	$©h_öô_Àds
(
©h_so·c
 *
sc
)

819 
	}
}

821 
ölöe
 
	$©h_deöô_Àds
(
©h_so·c
 *
sc
)

823 
	}
}

824 
ölöe
 
	$©h_fûl_Àd_pö
(
©h_so·c
 *
sc
)

826 
	}
}

833 #ifde‡
CONFIG_ATH9K_WOW


834 
©h9k_öô_wow
(
õì80211_hw
 *
hw
);

835 
©h9k_deöô_wow
(
õì80211_hw
 *
hw
);

836 
©h9k_su•íd
(
õì80211_hw
 *
hw
,

837 
cfg80211_wowœn
 *
wowœn
);

838 
©h9k_ªsume
(
õì80211_hw
 *
hw
);

839 
©h9k_£t_wakeup
(
õì80211_hw
 *
hw
, 
boﬁ
 
íabÀd
);

841 
ölöe
 
	$©h9k_öô_wow
(
õì80211_hw
 *
hw
)

843 
	}
}

844 
ölöe
 
	$©h9k_deöô_wow
(
õì80211_hw
 *
hw
)

846 
	}
}

847 
ölöe
 
	$©h9k_su•íd
(
õì80211_hw
 *
hw
,

848 
cfg80211_wowœn
 *
wowœn
)

851 
	}
}

852 
ölöe
 
	$©h9k_ªsume
(
õì80211_hw
 *
hw
)

855 
	}
}

856 
ölöe
 
	$©h9k_£t_wakeup
(
õì80211_hw
 *
hw
, 
boﬁ
 
íabÀd
)

858 
	}
}

865 
	#ATH_ANT_RX_CURRENT_SHIFT
 4

	)

866 
	#ATH_ANT_RX_MAIN_SHIFT
 2

	)

867 
	#ATH_ANT_RX_MASK
 0x3

	)

869 
	#ATH_ANT_DIV_COMB_SHORT_SCAN_INTR
 50

	)

870 
	#ATH_ANT_DIV_COMB_SHORT_SCAN_PKTCOUNT
 0x100

	)

871 
	#ATH_ANT_DIV_COMB_MAX_PKTCOUNT
 0x200

	)

872 
	#ATH_ANT_DIV_COMB_INIT_COUNT
 95

	)

873 
	#ATH_ANT_DIV_COMB_MAX_COUNT
 100

	)

874 
	#ATH_ANT_DIV_COMB_ALT_ANT_RATIO
 30

	)

875 
	#ATH_ANT_DIV_COMB_ALT_ANT_RATIO2
 20

	)

876 
	#ATH_ANT_DIV_COMB_ALT_ANT_RATIO_LOW_RSSI
 50

	)

877 
	#ATH_ANT_DIV_COMB_ALT_ANT_RATIO2_LOW_RSSI
 50

	)

879 
	#ATH_ANT_DIV_COMB_LNA1_DELTA_HI
 -4

	)

880 
	#ATH_ANT_DIV_COMB_LNA1_DELTA_MID
 -2

	)

881 
	#ATH_ANT_DIV_COMB_LNA1_DELTA_LOW
 2

	)

883 
	s©h_™t_comb
 {

884 
u16
 
	mcou¡
;

885 
u16
 
	mtŸÆ_pkt_cou¡
;

886 
boﬁ
 
	msˇn
;

887 
boﬁ
 
	msˇn_nŸ_°¨t
;

888 
	mmaö_tŸÆ_rssi
;

889 
	mÆt_tŸÆ_rssi
;

890 
	mÆt_ªcv_˙t
;

891 
	mmaö_ªcv_˙t
;

892 
	mrssi_ a1
;

893 
	mrssi_ a2
;

894 
	mrssi_add
;

895 
	mrssi_sub
;

896 
	mrssi_fú°
;

897 
	mrssi_£c⁄d
;

898 
	mrssi_thúd
;

899 
	m™t_øtio
;

900 
	m™t_øtio2
;

901 
boﬁ
 
	mÆt_good
;

902 
	mquick_sˇn_˙t
;

903 
©h9k_™t_div_comb_ a_c⁄f
 
	mmaö_c⁄f
;

904 
©h9k_™t_div_comb_ a_c⁄f
 
	mfú°_quick_sˇn_c⁄f
;

905 
©h9k_™t_div_comb_ a_c⁄f
 
	m£c⁄d_quick_sˇn_c⁄f
;

906 
boﬁ
 
	mfú°_øtio
;

907 
boﬁ
 
	m£c⁄d_øtio
;

908 
	msˇn_°¨t_time
;

913 
	mlow_rssi_thªsh
;

914 
	mÁ°_div_büs
;

917 
©h_™t_comb_sˇn
(
©h_so·c
 *
sc
, 
©h_rx_°©us
 *
rs
);

923 
	#ATH9K_PCI_CUS198
 0x0001

	)

924 
	#ATH9K_PCI_CUS230
 0x0002

	)

925 
	#ATH9K_PCI_CUS217
 0x0004

	)

926 
	#ATH9K_PCI_CUS252
 0x0008

	)

927 
	#ATH9K_PCI_WOW
 0x0010

	)

928 
	#ATH9K_PCI_BT_ANT_DIV
 0x0020

	)

929 
	#ATH9K_PCI_D3_L1_WAR
 0x0040

	)

930 
	#ATH9K_PCI_AR9565_1ANT
 0x0080

	)

931 
	#ATH9K_PCI_AR9565_2ANT
 0x0100

	)

932 
	#ATH9K_PCI_NO_PLL_PWRSAVE
 0x0200

	)

933 
	#ATH9K_PCI_KILLER
 0x0400

	)

934 
	#ATH9K_PCI_LED_ACT_HI
 0x0800

	)

940 
	#DEFAULT_CACHELINE
 32

	)

941 
	#ATH_CABQ_READY_TIME
 80

	)

942 
	#ATH_TXPOWER_MAX
 100

	)

943 
	#MAX_GTT_CNT
 5

	)

946 
	#PS_WAIT_FOR_BEACON
 
	`BIT
(0)

	)

947 
	#PS_WAIT_FOR_CAB
 
	`BIT
(1)

	)

948 
	#PS_WAIT_FOR_PSPOLL_DATA
 
	`BIT
(2)

	)

949 
	#PS_WAIT_FOR_TX_ACK
 
	`BIT
(3)

	)

950 
	#PS_BEACON_SYNC
 
	`BIT
(4)

	)

951 
	#PS_WAIT_FOR_ANI
 
	`BIT
(5)

	)

953 
	#ATH9K_NUM_CHANCTX
 2

	)

955 
	s©h_so·c
 {

956 
õì80211_hw
 *
	mhw
;

957 
devi˚
 *
	mdev
;

959 
survey_öfo
 *
	mcur_survey
;

960 
survey_öfo
 
	msurvey
[
ATH9K_NUM_CHANNELS
];

962 
èskÀt_°ru˘
 
	möå_tq
;

963 
èskÀt_°ru˘
 
	mbc⁄_èskÀt
;

964 
©h_hw
 *
	msc_ah
;

965 
__iomem
 *
	mmem
;

966 
	múq
;

967 
•ölock_t
 
	msc_£rül_rw
;

968 
•ölock_t
 
	msc_pm_lock
;

969 
•ölock_t
 
	msc_pcu_lock
;

970 
muãx
 
	mmuãx
;

971 
w‹k_°ru˘
 
	m∑¥d_w‹k
;

972 
w‹k_°ru˘
 
	mhw_ª£t_w‹k
;

973 
com∂ëi⁄
 
	m∑¥d_com∂ëe
;

974 
waô_queue_hód_t
 
	mtx_waô
;

976 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


977 
w‹k_°ru˘
 
	mch™˘x_w‹k
;

978 
©h_gí_timî
 *
	mp2p_ps_timî
;

979 
©h_vif
 *
	mp2p_ps_vif
;

980 
©h_ch™˘x_sched
 
	msched
;

981 
©h_offch™√l
 
	moffch™√l
;

982 
©h_ch™˘x
 *
	m√xt_ch™
;

983 
com∂ëi⁄
 
	mgo_bóc⁄
;

986 
	mdrivî_d©a
;

988 
u8
 
	mgâ_˙t
;

989 
u32
 
	möå°©us
;

990 
u16
 
	mps_Êags
;

991 
boﬁ
 
	mps_íabÀd
;

992 
boﬁ
 
	mps_idÀ
;

993 
	mnb˙vifs
;

994 
	mps_u£cou¡
;

996 
©h_rx
 
	mrx
;

997 
©h_tx
 
	mtx
;

998 
©h_bóc⁄
 
	mbóc⁄
;

1000 
cfg80211_ch™_def
 
	mcur_ch™def
;

1001 
©h_ch™˘x
 
	mch™˘x
[
ATH9K_NUM_CHANCTX
];

1002 
©h_ch™˘x
 *
	mcur_ch™
;

1003 
•ölock_t
 
	mch™_lock
;

1005 #ifde‡
CONFIG_MAC80211_LEDS


1006 
boﬁ
 
	mÀd_ªgi°îed
;

1007 
	mÀd_«me
[32];

1008 
Àd_˛assdev
 
	mÀd_cdev
;

1011 #ifde‡
CONFIG_ATH9K_DEBUGFS


1012 
©h9k_debug
 
	mdebug
;

1014 
dñayed_w‹k
 
	mtx_com∂ëe_w‹k
;

1015 
dñayed_w‹k
 
	mhw_∂l_w‹k
;

1016 
timî_li°
 
	m¶ìp_timî
;

1018 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


1019 
©h_btc€x
 
	mbtc€x
;

1020 
©h_mci_c€x
 
	mmci_c€x
;

1021 
w‹k_°ru˘
 
	mmci_w‹k
;

1024 
©h_descdma
 
	mtxsdma
;

1026 
©h_™t_comb
 
	m™t_comb
;

1027 
u8
 
	m™t_tx
, 
	m™t_rx
;

1028 
dfs_∑âîn_dëe˘‹
 *
	mdfs_dëe˘‹
;

1029 
u64
 
	mdfs_¥ev_pul£_ts
;

1030 
u32
 
	mwow_íabÀd
;

1032 
©h_•ec_sˇn_¥iv
 
	m•ec_¥iv
;

1034 
õì80211_vif
 *
	mtx99_vif
;

1035 
sk_buff
 *
	mtx99_skb
;

1036 
boﬁ
 
	mtx99_°©e
;

1037 
s16
 
	mtx99_powî
;

1039 #ifde‡
CONFIG_ATH9K_WOW


1040 
u32
 
	mwow_öå_bef‹e_¶ìp
;

1041 
boﬁ
 
	mf‹˚_wow
;

1049 #ifde‡
CONFIG_ATH9K_TX99


1050 
©h9k_tx99_öô_debug
(
©h_so·c
 *
sc
);

1051 
©h9k_tx99_£nd
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
,

1052 
©h_tx_c⁄åﬁ
 *
tx˘l
);

1054 
ölöe
 
	$©h9k_tx99_öô_debug
(
©h_so·c
 *
sc
)

1056 
	}
}

1057 
ölöe
 
	$©h9k_tx99_£nd
(
©h_so·c
 *
sc
,

1058 
sk_buff
 *
skb
,

1059 
©h_tx_c⁄åﬁ
 *
tx˘l
)

1062 
	}
}

1065 
ölöe
 
	$©h_ªad_ˇchesize
(
©h_comm⁄
 *
comm⁄
, *
csz
)

1067 
comm⁄
->
bus_›s
->
	`ªad_ˇchesize
(comm⁄, 
csz
);

1068 
	}
}

1070 
©h9k_èskÀt
(
d©a
);

1071 
©h_ˇbq_upd©e
(
©h_so·c
 *);

1072 
u8
 
©h9k_∑r£_mpdudísôy
(u8 
mpdudísôy
);

1073 
úqªtu∫_t
 
©h_i§
(
úq
, *
dev
);

1074 
©h_ª£t
(
©h_so·c
 *
sc
, 
©h9k_ch™√l
 *
hch™
);

1075 
©h_ˇn˚l_w‹k
(
©h_so·c
 *
sc
);

1076 
©h_ª°¨t_w‹k
(
©h_so·c
 *
sc
);

1077 
©h9k_öô_devi˚
(
u16
 
devid
, 
©h_so·c
 *
sc
,

1078 c⁄° 
©h_bus_›s
 *
bus_›s
);

1079 
©h9k_deöô_devi˚
(
©h_so·c
 *
sc
);

1080 
©h9k_ªlﬂd_chaömask_£âögs
(
©h_so·c
 *
sc
);

1081 
u8
 
©h_txchaömask_ªdu˘i⁄
(
©h_so·c
 *
sc
, u8 
chaömask
, 
u32
 
øã
);

1082 
©h_°¨t_rfkûl_pﬁl
(
©h_so·c
 *
sc
);

1083 
©h9k_rfkûl_pﬁl_°©e
(
õì80211_hw
 *
hw
);

1084 
©h9k_ps_wakeup
(
©h_so·c
 *
sc
);

1085 
©h9k_ps_ª°‹e
(
©h_so·c
 *
sc
);

1087 #ifde‡
CONFIG_ATH9K_PCI


1088 
©h_pci_öô
();

1089 
©h_pci_exô
();

1091 
ölöe
 
	$©h_pci_öô
(Ë{  0; 
	}
};

1092 
ölöe
 
	$©h_pci_exô
(Ë{
	}
};

1095 #ifde‡
CONFIG_ATH9K_AHB


1096 
©h_ahb_öô
();

1097 
©h_ahb_exô
();

1099 
ölöe
 
	$©h_ahb_öô
(Ë{  0; 
	}
};

1100 
ölöe
 
	$©h_ahb_exô
(Ë{
	}
};

	@ath9k.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 
MODULE_INFO
(
öåì
, "Y");

19 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

20 
__u£d


21 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

22 { 0x9d35´ec, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

23 { 0xd7ecd8ad, 
__VMLINUX_SYMBOL_STR
(
õì80211_rx_«pi
) },

24 { 0x3˚4ˇ6f, 
__VMLINUX_SYMBOL_STR
(
dißbÀ_úq
) },

25 { 0xb375f˚d, 
__VMLINUX_SYMBOL_STR
(
¨9003_∑¥d_is_d⁄e
) },

26 { 0x65524612, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_txq_¥›s
) },

27 { 0xf0728860, 
__VMLINUX_SYMBOL_STR
(
õì80211_cß_föish
) },

28 { 0x313ffb1b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öô
) },

29 { 0x8a9809d6, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

30 { 0x897f0ccc, 
__VMLINUX_SYMBOL_STR
(
pci_bus_ªad_c⁄fig_byã
) },

31 { 0x67ˇ6f48, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_gë_ch™√l
) },

32 { 0xc64ef9ó, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_deöô
) },

33 { 0x619cb7dd, 
__VMLINUX_SYMBOL_STR
(
sim∂e_ªad_‰om_buf„r
) },

34 { 0xd˚777bc, 
__VMLINUX_SYMBOL_STR
(
devm_i‹em≠_noˇche
) },

35 { 0x6942499f, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_cfg_ouçut
) },

36 { 0x9313d603, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_dú
) },

37 { 0xd6ì688f, 
__VMLINUX_SYMBOL_STR
(
vmÆloc
) },

38 { 0x6bf1c17f, 
__VMLINUX_SYMBOL_STR
(
pv_lock_›s
) },

39 { 0xf0ef2b01, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_£nd_wœn_ch™√ls
) },

40 { 0x399d7544, 
__VMLINUX_SYMBOL_STR
(
pcim_íabÀ_devi˚
) },

41 { 0x8b59153a, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_u8
) },

42 { 0xa2e59924, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

43 { 0x53d2˚˚, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£è¡í«
) },

44 { 0x754d539c, 
__VMLINUX_SYMBOL_STR
(
°æí
) },

45 { 0x1e35e9cc, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gí_timî_°¨t
) },

46 { 0x3e89b508, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_gpio
) },

47 { 0x4a0cf5a8, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_öô_¸y±o
) },

48 { 0x338e2969, 
__VMLINUX_SYMBOL_STR
(
õì80211_queue_w‹k
) },

49 { 0xbdd5f102, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_¥o˚ss_øã
) },

50 { 0x4c90984c, 
__VMLINUX_SYMBOL_STR
(
Àd_˛assdev_ªgi°î
) },

51 { 0xcb1eb0a1, 
__VMLINUX_SYMBOL_STR
(
pcim_iom≠_èbÀ
) },

52 { 0x60882f51, 
__VMLINUX_SYMBOL_STR
(
õì80211_cß_is_com∂ëe
) },

53 { 0xffd02408, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gë_tsf_off£t
) },

54 { 0x3ìcd3b2, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_numtx≥ndög
) },

55 { 0x7d97c8c7, 
__VMLINUX_SYMBOL_STR
(
¨9003_∑¥d_£tup_gaö_èbÀ
) },

56 { 0x2b0127e2, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_íabÀ
) },

57 { 0x4cb93a22, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_waô
) },

58 { 0xb51f5811, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_öãºu±s
) },

59 { 0xd45e4d0a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_gë_hw_¸y±o_keyty≥
) },

60 { 0x95b0a31c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_°›dm¨ecv
) },

61 { 0x5624„ad, 
__VMLINUX_SYMBOL_STR
(
£q_puts
) },

62 { 0x548f5óa, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_öô_mci
) },

63 { 0xefc56354, 
__VMLINUX_SYMBOL_STR
(
cfg80211_ch™def_¸óã
) },

64 { 0x17b8e2d9, 
__VMLINUX_SYMBOL_STR
(
¨9003_∑¥d_íabÀ
) },

65 { 0xd1580b52, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëch™_noi£
) },

66 { 0xb91879cb, 
__VMLINUX_SYMBOL_STR
(
©h_key_dñëe
) },

67 { 0xe1e8eb10, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_upd©e_txpow
) },

68 { 0x854c50c3, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_compuãtxtime
) },

69 { 0xd9d3bcd3, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock_bh
) },

70 { 0xfd66fb7c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_dißbÀ_öãºu±s
) },

71 { 0x7ef39823, 
__VMLINUX_SYMBOL_STR
(
õì80211_hdæí
) },

72 { 0x6b06fd˚, 
__VMLINUX_SYMBOL_STR
(
dñayed_w‹k_timî_‚
) },

73 { 0xc162ì1c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_b°uck_nfˇl
) },

74 { 0x4d15841, 
__VMLINUX_SYMBOL_STR
(
õì80211_bóc⁄_gë_tim
) },

75 { 0x4a7a18ec, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gpio_gë
) },

76 { 0x56d4ˇ56, 
__VMLINUX_SYMBOL_STR
(
£q_¥ötf
) },

77 { 0x645f97b5, 
__VMLINUX_SYMBOL_STR
(
©h_ªgd_öô
) },

78 { 0x88bÁ7e, 
__VMLINUX_SYMBOL_STR
(
ˇn˚l_w‹k_sync
) },

79 { 0x2db09022, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëtxbuf
) },

80 { 0xad25ad8b, 
__VMLINUX_SYMBOL_STR
(
dfs_∑âîn_dëe˘‹_öô
) },

81 { 0x5cccd4d6, 
__VMLINUX_SYMBOL_STR
(
õì80211_uƒegi°î_hw
) },

82 { 0x7b40e206, 
__VMLINUX_SYMBOL_STR
(
__dev_k‰ì_skb_™y
) },

83 { 0x9580deb, 
__VMLINUX_SYMBOL_STR
(
öô_timî_key
) },

84 { 0xØ7b73c9, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_wow_≠∂y_∑âîn
) },

85 { 0x5572a148, 
__VMLINUX_SYMBOL_STR
(
pcõ_ˇ∑bûôy_˛ór_™d_£t_w‹d
) },

86 { 0xa57863e, 
__VMLINUX_SYMBOL_STR
(
ˇn˚l_dñayed_w‹k_sync
) },

87 { 0x347cd1b3, 
__VMLINUX_SYMBOL_STR
(
muãx_u∆ock
) },

88 { 0x4f482ac, 
__VMLINUX_SYMBOL_STR
(
õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
) },

89 { 0xb7d07b2c, 
__VMLINUX_SYMBOL_STR
(
õì80211_sˇn_com∂ëed
) },

90 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

91 { 0xd94b3c0c, 
__VMLINUX_SYMBOL_STR
(
©h_gí_timî_‰ì
) },

92 { 0x1´ba889, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£åxfûãr
) },

93 { 0x760f„08, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gë_txq_¥›s
) },

94 { 0xe3b60e0b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ªÀa£txqueue
) },

95 { 0xa09a8a16, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£t_tsf
) },

96 { 0x527a8d6e, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_•e˘øl_öô_debug
) },

97 { 0xbc82831d, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_fûe
) },

98 { 0xe229598d, 
__VMLINUX_SYMBOL_STR
(
wùhy_rfkûl_°¨t_pﬁlög
) },

99 { 0x9f259c62, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_ªlﬂd_chaömask
) },

100 { 0x91715312, 
__VMLINUX_SYMBOL_STR
(
•rötf
) },

101 { 0xbf8d1e2a, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_cfg_gpio_öput
) },

102 { 0xc7c8c191, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_kûl_öãºu±s
) },

103 { 0x276d4c3c, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_•e˘øl_deöô_debug
) },

104 { 0xa6a3cf69, 
__VMLINUX_SYMBOL_STR
(
__∂©f‹m_drivî_ªgi°î
) },

105 { 0x7d11c268, 
__VMLINUX_SYMBOL_STR
(
jiffõs
) },

106 { 0x61e3ec3a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_öô_ch™√ls_øãs
) },

107 { 0xa97f857a, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ªque°_gpio
) },

108 { 0x2fbì4ó, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëtsf32
) },

109 { 0x8„5c1a3, 
__VMLINUX_SYMBOL_STR
(
skb_åim
) },

110 { 0x˚f121ˇ, 
__VMLINUX_SYMBOL_STR
(
õì80211_°›_queues
) },

111 { 0xf09442f6, 
__VMLINUX_SYMBOL_STR
(
õì80211_ªady_⁄_ch™√l
) },

112 { 0x21ad2e14, 
__VMLINUX_SYMBOL_STR
(
õì80211_°›_queue
) },

113 { 0x73d49651, 
__VMLINUX_SYMBOL_STR
(
õì80211_tx_°©us
) },

114 { 0x2f70413a, 
__VMLINUX_SYMBOL_STR
(
©h_¥ötk
) },

115 { 0x9a358c43, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_wow_wakeup
) },

116 { 0x9e88526, 
__VMLINUX_SYMBOL_STR
(
__öô_waôqueue_hód
) },

117 { 0xab43d101, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_¥o˚ss_rxdesc_edma
) },

118 { 0xe124ad68, 
__VMLINUX_SYMBOL_STR
(
¨9003_∑¥d_p›uœã_sögÀ_èbÀ
) },

119 { 0x53a38a82, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_u32
) },

120 { 0x20ef8927, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t›mode
) },

121 { 0x64ab0e98, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄
) },

122 { 0xfb6d4da3, 
__VMLINUX_SYMBOL_STR
(
pci_£t_ma°î
) },

123 { 0xb2b´cba, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_dißbÀ
) },

124 { 0x706d051c, 
__VMLINUX_SYMBOL_STR
(
dñ_timî_sync
) },

125 { 0x3c80c06c, 
__VMLINUX_SYMBOL_STR
(
k°πouŒ
) },

126 { 0xf721fbcd, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£âxqueue
) },

127 { 0x802b8620, 
__VMLINUX_SYMBOL_STR
(
©h_gí_timî_i§
) },

128 { 0x7e184715, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_rx¥ocdesc
) },

129 { 0x11b230b1, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëtsf64
) },

130 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

131 { 0xb544227, 
__VMLINUX_SYMBOL_STR
(
©h_cmn_¥o˚ss_f·
) },

132 { 0x195d4402, 
__VMLINUX_SYMBOL_STR
(
deÁu…_Œ£ek
) },

133 { 0x17b099d2, 
__VMLINUX_SYMBOL_STR
(
dev_îr
) },

134 { 0x1916e38c, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_u∆ock_úqª°‹e
) },

135 { 0xd76d0222, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_öô_2wúe
) },

136 { 0x37befc70, 
__VMLINUX_SYMBOL_STR
(
jiffõs_to_m£cs
) },

137 { 0xd891be8a, 
__VMLINUX_SYMBOL_STR
(
õì80211_Æloc_hw_nm
) },

138 { 0x17d070c2, 
__VMLINUX_SYMBOL_STR
(
__muãx_öô
) },

139 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

140 { 0xa6d12c63, 
__VMLINUX_SYMBOL_STR
(
õì80211_‰ì_txskb
) },

141 { 0x984ì7b3, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_°a_bóc⁄_timîs
) },

142 { 0x449ad0a7, 
__VMLINUX_SYMBOL_STR
(
memcmp
) },

143 { 0x6ebefc2c, 
__VMLINUX_SYMBOL_STR
(
¨9003_hw_bb_w©chdog_dbg_öfo
) },

144 { 0x40ó4466, 
__VMLINUX_SYMBOL_STR
(
¨9003_∑¥d_¸óã_curve
) },

145 { 0xacb1b78e, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_tsÁdju°
) },

146 { 0x34f92f7a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_bóc⁄_c⁄fig_≠
) },

147 { 0x4c9d28b0, 
__VMLINUX_SYMBOL_STR
(
phys_ba£
) },

148 { 0x26e2e74f, 
__VMLINUX_SYMBOL_STR
(
õì80211_tx_¥ï¨e_skb
) },

149 { 0x9cf3310c, 
__VMLINUX_SYMBOL_STR
(
õì80211_wake_queues
) },

150 { 0x2d15177d, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_°©_rx
) },

151 { 0xÁef0ed, 
__VMLINUX_SYMBOL_STR
(
__èskÀt_scheduÀ
) },

152 { 0x´e40d0c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_dißbÀ
) },

153 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

154 { 0x5527dcc4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gërxfûãr
) },

155 { 0xd098999b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_™i_m⁄ô‹
) },

156 { 0x5155600, 
__VMLINUX_SYMBOL_STR
(
©h_is_mybóc⁄
) },

157 { 0xì4bb529, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_bóc⁄_c⁄fig_adhoc
) },

158 { 0xc5473301, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_¥o˚ss_rssi
) },

159 { 0x46a45705, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gí_timî_°›
) },

160 { 0xØfdb617, 
__VMLINUX_SYMBOL_STR
(
©h_is_w‹ld_ªgd
) },

161 { 0xabcc1dc2, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_ba£_ì¥om
) },

162 { 0x16305289, 
__VMLINUX_SYMBOL_STR
(
w¨n_¶ow∑th_nuŒ
) },

163 { 0x1a3ec6d7, 
__VMLINUX_SYMBOL_STR
(
pci_bus_wrôe_c⁄fig_dw‹d
) },

164 { 0xa2˚c23e, 
__VMLINUX_SYMBOL_STR
(
skb_push
) },

165 { 0x11761f56, 
__VMLINUX_SYMBOL_STR
(
muãx_lock
) },

166 { 0x42187e4, 
__VMLINUX_SYMBOL_STR
(
õì80211_ªmaö_⁄_ch™√l_expúed
) },

167 { 0xdc47488, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_addrxbuf_edma
) },

168 { 0xf1969a8e, 
__VMLINUX_SYMBOL_STR
(
__u£cs_to_jiffõs
) },

169 { 0xf3ó20b6, 
__VMLINUX_SYMBOL_STR
(
∂©f‹m_gë_ªsour˚
) },

170 { 0x21c9c156, 
__VMLINUX_SYMBOL_STR
(
õì80211_föd_°a_by_iÁddr
) },

171 { 0x9545af6d, 
__VMLINUX_SYMBOL_STR
(
èskÀt_öô
) },

172 { 0x16e5c2a, 
__VMLINUX_SYMBOL_STR
(
mod_timî
) },

173 { 0x13b92851, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£tup_°©u§ög
) },

174 { 0xf74d1ef3, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_ªcv
) },

175 { 0x2072ì9b, 
__VMLINUX_SYMBOL_STR
(
ªque°_thªaded_úq
) },

176 { 0xb71d108d, 
__VMLINUX_SYMBOL_STR
(
skb_puŒ
) },

177 { 0xe3109190, 
__VMLINUX_SYMBOL_STR
(
devi˚_öô_wakeup
) },

178 { 0x4d32f7f6, 
__VMLINUX_SYMBOL_STR
(
sim∂e_›í
) },

179 { 0xcd4b7cd5, 
__VMLINUX_SYMBOL_STR
(
wùhy_rfkûl_°›_pﬁlög
) },

180 { 0x˚e38600, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_boﬁ
) },

181 { 0x4f86f33b, 
__VMLINUX_SYMBOL_STR
(
ªque°_fúmw¨e_nowaô
) },

182 { 0x2e666ed6, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_gë_√xt_gpm_off£t
) },

183 { 0x1b68182f, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_wrôe_associd
) },

184 { 0xa7f14f4e, 
__VMLINUX_SYMBOL_STR
(
õì80211_queue_dñayed_w‹k
) },

185 { 0x251„05a, 
__VMLINUX_SYMBOL_STR
(
pcim_iom≠_ªgi⁄s
) },

186 { 0xe523ad75, 
__VMLINUX_SYMBOL_STR
(
synchr⁄ize_úq
) },

187 { 0x7cc374c2, 
__VMLINUX_SYMBOL_STR
(
©h_ªg_nŸifõr_≠∂y
) },

188 { 0x2a975e54, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_puâxbuf
) },

189 { 0x5fdb69ad, 
__VMLINUX_SYMBOL_STR
(
wùhy_to_õì80211_hw
) },

190 { 0x82072614, 
__VMLINUX_SYMBOL_STR
(
èskÀt_kûl
) },

191 { 0x404ed03b, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_°©e
) },

192 { 0xaf759bb4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_öô_scheme
) },

193 { 0x4d65f296, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öô_btc€x_hw
) },

194 { 0x886„62e, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_wow_íabÀ
) },

195 { 0x26ˇ3db2, 
__VMLINUX_SYMBOL_STR
(
õì80211_°›_tx_ba_cb_úqß„
) },

196 { 0xd85b6c42, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_phy_îr
) },

197 { 0x59f0b69d, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_bóc⁄q_£tup
) },

198 { 0x15d8247d, 
__VMLINUX_SYMBOL_STR
(
_dev_öfo
) },

199 { 0x278832bc, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_«me
) },

200 { 0xe37094a8, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_•e˘øl_sˇn_åiggî
) },

201 { 0x772c354c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ab‹çcuªcv
) },

202 { 0x53169fb2, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öô_globÆ_£âögs
) },

203 { 0x5ó7e˚6, 
__VMLINUX_SYMBOL_STR
(
__Æloc_skb
) },

204 { 0x3b2184d5, 
__VMLINUX_SYMBOL_STR
(
pci_bus_ªad_c⁄fig_dw‹d
) },

205 { 0xf40fbf02, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£âsf64
) },

206 { 0xe033734e, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_tx_fûãr
) },

207 { 0xbba70a2d, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_u∆ock_bh
) },

208 { 0x11c6ó23, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_devm_£qfûe
) },

209 { 0xdb7305a1, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

210 { 0xd5a3fÁ9, 
__VMLINUX_SYMBOL_STR
(
wùhy_rfkûl_£t_hw_°©e
) },

211 { 0x4718f5d9, 
__VMLINUX_SYMBOL_STR
(
õì80211_°a_£t_buf„ªd
) },

212 { 0xd62c833f, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

213 { 0xf4a3ff6c, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_gë_öãºu±
) },

214 { 0x95e5793f, 
__VMLINUX_SYMBOL_STR
(
k‰ì_skb
) },

215 { 0xd0b8c838, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_bóc⁄öô
) },

216 { 0xef037488, 
__VMLINUX_SYMBOL_STR
(
õì80211_£nd_b¨
) },

217 { 0x706d9bfc, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_upd©ëxåigÀvñ
) },

218 { 0xfcdef8ó, 
__VMLINUX_SYMBOL_STR
(
©h_hw_cy˛e_cou¡îs_upd©e
) },

219 { 0x6cc0c0b1, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_£t_bt_vîsi⁄
) },

220 { 0xf22a837b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_rx_bufsize
) },

221 { 0x45ec8db3, 
__VMLINUX_SYMBOL_STR
(
õì80211_gë_tx_øãs
) },

222 { 0xcfd486a5, 
__VMLINUX_SYMBOL_STR
(
¨9003_is_∑¥d_íabÀd
) },

223 { 0xb84eb84e, 
__VMLINUX_SYMBOL_STR
(
õì80211_föd_°a
) },

224 { 0x7ddc56cc, 
__VMLINUX_SYMBOL_STR
(
¨9003_gë_∂l_sqsum_dvc
) },

225 { 0xb0fd72a9, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_£nd_mesßge
) },

226 { 0x282657a4, 
__VMLINUX_SYMBOL_STR
(
õì80211_gë_buf„ªd_bc
) },

227 { 0x48969a10, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_˛ónup
) },

228 { 0x7f24de73, 
__VMLINUX_SYMBOL_STR
(
jiffõs_to_u£cs
) },

229 { 0xc9c99c99, 
__VMLINUX_SYMBOL_STR
(
pskb_ex∑nd_hód
) },

230 { 0xf4ˇ2bb4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_bt_°omp
) },

231 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

232 { 0xd10d5617, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_tx°¨t
) },

233 { 0x´8d6f0c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£åxab‹t
) },

234 { 0x2691acb, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_check_Æive
) },

235 { 0x90f9a77e, 
__VMLINUX_SYMBOL_STR
(
pci_uƒegi°î_drivî
) },

236 { 0x123f82f3, 
__VMLINUX_SYMBOL_STR
(
gëøwm⁄Ÿ⁄ic64
) },

237 { 0xb9d1692a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_bóc⁄_c⁄fig_°a
) },

238 { 0x2142697b, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

239 { 0xe259´9e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

240 { 0x3d7565a, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_£t_c⁄cur_tx¥io
) },

241 { 0xb98619b5, 
__VMLINUX_SYMBOL_STR
(
©h_hw_£tbssidmask
) },

242 { 0x680ec266, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock_úqßve
) },

243 { 0x9˚88f48, 
__VMLINUX_SYMBOL_STR
(
õì80211_wake_queue
) },

244 { 0x907fccf7, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_rx_skb_po°¥o˚ss
) },

245 { 0x536˚742, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_phy_dißbÀ
) },

246 { 0xa6bbd805, 
__VMLINUX_SYMBOL_STR
(
__wake_up
) },

247 { 0x6434095a, 
__VMLINUX_SYMBOL_STR
(
__õì80211_gë_ødio_Àd_«me
) },

248 { 0x450da88c, 
__VMLINUX_SYMBOL_STR
(
¨9003_mci_£tup
) },

249 { 0xf47e66b0, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£çowî
) },

250 { 0xd2d0c47b, 
__VMLINUX_SYMBOL_STR
(
õì80211_°a_eo•
) },

251 { 0x2207a57f, 
__VMLINUX_SYMBOL_STR
(
¥ï¨e_to_waô_evít
) },

252 { 0x6f1f9ec7, 
__VMLINUX_SYMBOL_STR
(
__õì80211_¸óã_çt_Àd_åiggî
) },

253 { 0x66997bab, 
__VMLINUX_SYMBOL_STR
(
pci_bus_wrôe_c⁄fig_byã
) },

254 { 0x16a6„da, 
__VMLINUX_SYMBOL_STR
(
Àd_˛assdev_uƒegi°î
) },

255 { 0x9e7b103e, 
__VMLINUX_SYMBOL_STR
(
õì80211_ªgi°î_hw
) },

256 { 0x13470b19, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_£t_weight
) },

257 { 0xd72625cb, 
__VMLINUX_SYMBOL_STR
(
õì80211_∑r£_p2p_nﬂ
) },

258 { 0xf˚c0987, 
__VMLINUX_SYMBOL_STR
(
íabÀ_úq
) },

259 { 0x5ac9509c, 
__VMLINUX_SYMBOL_STR
(
õì80211_nuŒfunc_gë
) },

260 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

261 { 0xa6301530, 
__VMLINUX_SYMBOL_STR
(
ªguœt‹y_höt
) },

262 { 0xó1b33d0, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£tmˇ°fûãr
) },

263 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

264 { 0x425d9f64, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_check_«v
) },

265 { 0xc469f09f, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_puåxbuf
) },

266 { 0x33cdf8a, 
__VMLINUX_SYMBOL_STR
(
dma_suµ‹ãd
) },

267 { 0xda74c0d9, 
__VMLINUX_SYMBOL_STR
(
©h_rxbuf_Æloc
) },

268 { 0x64c3a8bc, 
__VMLINUX_SYMBOL_STR
(
¨9003_∑¥d_öô_èbÀ
) },

269 { 0xa˚b4f8d, 
__VMLINUX_SYMBOL_STR
(
__pci_ªgi°î_drivî
) },

270 { 0x927a7Ød, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_°¨çcuª˚ive
) },

271 { 0x3bd8f2cc, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£tu¥xdesc
) },

272 { 0xf860b07b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£tu±xqueue
) },

273 { 0x4ˇ9669f, 
__VMLINUX_SYMBOL_STR
(
s˙¥ötf
) },

274 { 0xb18be9c4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ab‹t_tx_dma
) },

275 { 0x5f79b6fb, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£t
) },

276 { 0xe998cb8f, 
__VMLINUX_SYMBOL_STR
(
õì80211_¥obîeq_gë
) },

277 { 0x83c5c23c, 
__VMLINUX_SYMBOL_STR
(
õì80211_‰ì_hw
) },

278 { 0xf08242c2, 
__VMLINUX_SYMBOL_STR
(
föish_waô
) },

279 { 0xˇ702abb, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_rx_ac˚±
) },

280 { 0xb2d5a552, 
__VMLINUX_SYMBOL_STR
(
com∂ëe
) },

281 { 0x28318305, 
__VMLINUX_SYMBOL_STR
(
¢¥ötf
) },

282 { 0xb0e602eb, 
__VMLINUX_SYMBOL_STR
(
memmove
) },

283 { 0x79413036, 
__VMLINUX_SYMBOL_STR
(
©h_gí_timî_Æloc
) },

284 { 0xc7922d93, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_öô_3wúe
) },

285 { 0x99a109bd, 
__VMLINUX_SYMBOL_STR
(
c⁄sume_skb
) },

286 { 0x49f5a25a, 
__VMLINUX_SYMBOL_STR
(
∂©f‹m_drivî_uƒegi°î
) },

287 { 0xdadd8c5d, 
__VMLINUX_SYMBOL_STR
(
©h_key_c⁄fig
) },

288 { 0x7f02188f, 
__VMLINUX_SYMBOL_STR
(
__m£cs_to_jiffõs
) },

289 { 0xb14c45a0, 
__VMLINUX_SYMBOL_STR
(
¨9003_hw_bb_w©chdog_check
) },

290 { 0x49987f41, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_íabÀ_öãºu±s
) },

291 { 0x436c2179, 
__VMLINUX_SYMBOL_STR
(
iowrôe32
) },

292 { 0x5ef˚f9d, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_modÆ_ì¥om
) },

293 { 0x66c66f48, 
__VMLINUX_SYMBOL_STR
(
skb_put
) },

294 { 0xc9e537a9, 
__VMLINUX_SYMBOL_STR
(
devm_kmÆloc
) },

295 { 0x2a565a25, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄_timeout
) },

296 { 0x455047c8, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öå≥nd
) },

297 { 0x4f6b400b, 
__VMLINUX_SYMBOL_STR
(
_c›y_‰om_u£r
) },

298 { 0x226c32c1, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_uöt
) },

299 { 0xb1´0375, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£t_ˇlvÆid
) },

300 { 0x55„4565, 
__VMLINUX_SYMBOL_STR
(
ªÀa£_fúmw¨e
) },

301 { 0x46004Ø9, 
__VMLINUX_SYMBOL_STR
(
õì80211_°¨t_tx_ba_cb_úqß„
) },

302 { 0xeb87363c, 
__VMLINUX_SYMBOL_STR
(
dma_›s
) },

303 { 0xe484e35f, 
__VMLINUX_SYMBOL_STR
(
i‹ód32
) },

304 { 0x634eb654, 
__VMLINUX_SYMBOL_STR
(
pcõ_ˇ∑bûôy_ªad_w‹d
) },

305 { 0x26e41c92, 
__VMLINUX_SYMBOL_STR
(
devi˚_£t_wakeup_íabÀ
) },

306 { 0x77ó65c4, 
__VMLINUX_SYMBOL_STR
(
õì80211_upd©e_p2p_nﬂ
) },

307 { 0xf20dabd8, 
__VMLINUX_SYMBOL_STR
(
‰ì_úq
) },

308 { 0x6957d190, 
__VMLINUX_SYMBOL_STR
(
dmam_Æloc_cohîít
) },

309 { 0x9f9a2ef, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_txpowîlimô
) },

310 { 0x43b4f887, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_°›_dma_queue
) },

313 c⁄° 
	g__moduÀ_dïíds
[]

314 
__u£d


315 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

318 
MODULE_ALIAS
("platform:ath9k");

319 
MODULE_ALIAS
("platform:ar933x_wmac");

320 
MODULE_ALIAS
("platform:ar934x_wmac");

321 
MODULE_ALIAS
("platform:qca955x_wmac");

322 
MODULE_ALIAS
("platform:qca953x_wmac");

323 
MODULE_ALIAS
("platform:qca956x_wmac");

324 
MODULE_ALIAS
("pci:v0000168Cd00000023sv*sd*bc*sc*i*");

325 
MODULE_ALIAS
("pci:v0000168Cd00000024sv*sd*bc*sc*i*");

326 
MODULE_ALIAS
("pci:v0000168Cd00000027sv*sd*bc*sc*i*");

327 
MODULE_ALIAS
("pci:v0000168Cd00000029sv0000168Csd00002096bc*sc*i*");

328 
MODULE_ALIAS
("pci:v0000168Cd00000029sv*sd*bc*sc*i*");

329 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv00001A3Bsd00001C71bc*sc*i*");

330 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv0000105Bsd0000E01Fbc*sc*i*");

331 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv000011ADsd00006632bc*sc*i*");

332 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv000011ADsd00006642bc*sc*i*");

333 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv00001A32sd00000306bc*sc*i*");

334 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv0000185Fsd0000309Dbc*sc*i*");

335 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv000010CFsd0000147Cbc*sc*i*");

336 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv000010CFsd0000147Dbc*sc*i*");

337 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv000010CFsd00001536bc*sc*i*");

338 
MODULE_ALIAS
("pci:v0000168Cd0000002Asv*sd*bc*sc*i*");

339 
MODULE_ALIAS
("pci:v0000168Cd0000002Bsv00001A3Bsd00002C37bc*sc*i*");

340 
MODULE_ALIAS
("pci:v0000168Cd0000002Bsv*sd*bc*sc*i*");

341 
MODULE_ALIAS
("pci:v0000168Cd0000002Csv*sd*bc*sc*i*");

342 
MODULE_ALIAS
("pci:v0000168Cd0000002Dsv*sd*bc*sc*i*");

343 
MODULE_ALIAS
("pci:v0000168Cd0000002Esv*sd*bc*sc*i*");

344 
MODULE_ALIAS
("pci:v0000168Cd00000030sv00001A56sd00002000bc*sc*i*");

345 
MODULE_ALIAS
("pci:v0000168Cd00000030sv00001A56sd00002001bc*sc*i*");

346 
MODULE_ALIAS
("pci:v0000168Cd00000030sv*sd*bc*sc*i*");

347 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00002086bc*sc*i*");

348 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00001237bc*sc*i*");

349 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00002126bc*sc*i*");

350 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd0000126Abc*sc*i*");

351 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00002152bc*sc*i*");

352 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000105Bsd0000E075bc*sc*i*");

353 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000168Csd00003119bc*sc*i*");

354 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000168Csd00003122bc*sc*i*");

355 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000185Fsd00003119bc*sc*i*");

356 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000185Fsd00003027bc*sc*i*");

357 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd00004105bc*sc*i*");

358 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd00004106bc*sc*i*");

359 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd0000410Dbc*sc*i*");

360 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd0000410Ebc*sc*i*");

361 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd0000410Fbc*sc*i*");

362 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd0000C706bc*sc*i*");

363 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd0000C680bc*sc*i*");

364 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Dsd0000C708bc*sc*i*");

365 
MODULE_ALIAS
("pci:v0000168Cd00000032sv000017AAsd00003218bc*sc*i*");

366 
MODULE_ALIAS
("pci:v0000168Cd00000032sv000017AAsd00003219bc*sc*i*");

367 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00002C97bc*sc*i*");

368 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00002100bc*sc*i*");

369 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001C56sd00004001bc*sc*i*");

370 
MODULE_ALIAS
("pci:v0000168Cd00000032sv000011ADsd00006627bc*sc*i*");

371 
MODULE_ALIAS
("pci:v0000168Cd00000032sv000011ADsd00006628bc*sc*i*");

372 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000105Bsd0000E04Ebc*sc*i*");

373 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000105Bsd0000E04Fbc*sc*i*");

374 
MODULE_ALIAS
("pci:v0000168Cd00000032sv0000144Fsd00007197bc*sc*i*");

375 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001B9Asd00002000bc*sc*i*");

376 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001B9Asd00002001bc*sc*i*");

377 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00001186bc*sc*i*");

378 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00001F86bc*sc*i*");

379 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00001195bc*sc*i*");

380 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001A3Bsd00001F95bc*sc*i*");

381 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001B9Asd00001C00bc*sc*i*");

382 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001B9Asd00001C01bc*sc*i*");

383 
MODULE_ALIAS
("pci:v0000168Cd00000032sv00001043sd0000850Dbc*sc*i*");

384 
MODULE_ALIAS
("pci:v0000168Cd00000032sv*sd*bc*sc*i*");

385 
MODULE_ALIAS
("pci:v0000168Cd00000033sv*sd*bc*sc*i*");

386 
MODULE_ALIAS
("pci:v0000168Cd00000034sv00001A3Bsd00002116bc*sc*i*");

387 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000011ADsd00006661bc*sc*i*");

388 
MODULE_ALIAS
("pci:v0000168Cd00000034sv0000168Csd00003117bc*sc*i*");

389 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000017AAsd00003214bc*sc*i*");

390 
MODULE_ALIAS
("pci:v0000168Cd00000034sv00001969sd00000091bc*sc*i*");

391 
MODULE_ALIAS
("pci:v0000168Cd00000034sv00001A3Bsd00002110bc*sc*i*");

392 
MODULE_ALIAS
("pci:v0000168Cd00000034sv00001043sd0000850Ebc*sc*i*");

393 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000011ADsd00006631bc*sc*i*");

394 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000011ADsd00006641bc*sc*i*");

395 
MODULE_ALIAS
("pci:v0000168Cd00000034sv0000103Csd00001864bc*sc*i*");

396 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000014CDsd00000063bc*sc*i*");

397 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000014CDsd00000064bc*sc*i*");

398 
MODULE_ALIAS
("pci:v0000168Cd00000034sv000010CFsd00001783bc*sc*i*");

399 
MODULE_ALIAS
("pci:v0000168Cd00000030sv00001A56sd00002003bc*sc*i*");

400 
MODULE_ALIAS
("pci:v0000168Cd00000034sv*sd*bc*sc*i*");

401 
MODULE_ALIAS
("pci:v0000168Cd00000037sv*sd*bc*sc*i*");

402 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000168Csd00003028bc*sc*i*");

403 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd00002176bc*sc*i*");

404 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E068bc*sc*i*");

405 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000185Fsd0000A119bc*sc*i*");

406 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000632bc*sc*i*");

407 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd000006B2bc*sc*i*");

408 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000842bc*sc*i*");

409 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00001842bc*sc*i*");

410 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00006671bc*sc*i*");

411 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd00002811bc*sc*i*");

412 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd00002812bc*sc*i*");

413 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd000028A1bc*sc*i*");

414 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd000028A3bc*sc*i*");

415 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd0000218Abc*sc*i*");

416 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd00002F8Abc*sc*i*");

417 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000168Csd00003025bc*sc*i*");

418 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000168Csd00003026bc*sc*i*");

419 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000168Csd0000302Bbc*sc*i*");

420 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E069bc*sc*i*");

421 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000185Fsd00003028bc*sc*i*");

422 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000622bc*sc*i*");

423 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000672bc*sc*i*");

424 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000662bc*sc*i*");

425 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd000006A2bc*sc*i*");

426 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000682bc*sc*i*");

427 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd0000213Abc*sc*i*");

428 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd0000213Cbc*sc*i*");

429 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000103Csd000018E3bc*sc*i*");

430 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000103Csd0000217Fbc*sc*i*");

431 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000103Csd00002005bc*sc*i*");

432 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001028sd0000020Cbc*sc*i*");

433 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd0000411Abc*sc*i*");

434 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd0000411Bbc*sc*i*");

435 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd0000411Cbc*sc*i*");

436 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd0000411Dbc*sc*i*");

437 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd0000411Ebc*sc*i*");

438 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd00004129bc*sc*i*");

439 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Dsd0000412Abc*sc*i*");

440 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000168Csd00003027bc*sc*i*");

441 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000168Csd0000302Cbc*sc*i*");

442 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000642bc*sc*i*");

443 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000652bc*sc*i*");

444 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000612bc*sc*i*");

445 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000832bc*sc*i*");

446 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00001832bc*sc*i*");

447 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000692bc*sc*i*");

448 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000803bc*sc*i*");

449 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000011ADsd00000813bc*sc*i*");

450 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd00002130bc*sc*i*");

451 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd0000213Bbc*sc*i*");

452 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd00002182bc*sc*i*");

453 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd0000218Bbc*sc*i*");

454 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd0000218Cbc*sc*i*");

455 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001A3Bsd00002F82bc*sc*i*");

456 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000144Fsd00007202bc*sc*i*");

457 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd00002810bc*sc*i*");

458 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd00002813bc*sc*i*");

459 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd000028A2bc*sc*i*");

460 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001B9Asd000028A4bc*sc*i*");

461 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000185Fsd00003027bc*sc*i*");

462 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000185Fsd0000A120bc*sc*i*");

463 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E07Fbc*sc*i*");

464 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E08Fbc*sc*i*");

465 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E081bc*sc*i*");

466 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E091bc*sc*i*");

467 
MODULE_ALIAS
("pci:v0000168Cd00000036sv0000105Bsd0000E099bc*sc*i*");

468 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000017AAsd00003026bc*sc*i*");

469 
MODULE_ALIAS
("pci:v0000168Cd00000036sv000017AAsd00004026bc*sc*i*");

470 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001043sd000085F2bc*sc*i*");

471 
MODULE_ALIAS
("pci:v0000168Cd00000036sv00001028sd0000020Ebc*sc*i*");

472 
MODULE_ALIAS
("pci:v0000168Cd00000036sv*sd*bc*sc*i*");

474 
MODULE_INFO
(
§cvîsi⁄
, "591F25EEE2294D51A1DE1FE");

	@ath9k_common.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 
MODULE_INFO
(
öåì
, "Y");

19 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

20 
__u£d


21 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

22 { 0x9d35´ec, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

23 { 0x8a9809d6, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

24 { 0x619cb7dd, 
__VMLINUX_SYMBOL_STR
(
sim∂e_ªad_‰om_buf„r
) },

25 { 0x754d539c, 
__VMLINUX_SYMBOL_STR
(
°æí
) },

26 { 0x8c517f41, 
__VMLINUX_SYMBOL_STR
(
ªœy_fûe_›î©i⁄s
) },

27 { 0xc4f331c6, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

28 { 0xd1580b52, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëch™_noi£
) },

29 { 0x7ef39823, 
__VMLINUX_SYMBOL_STR
(
õì80211_hdæí
) },

30 { 0xc0a3d105, 
__VMLINUX_SYMBOL_STR
(
föd_√xt_bô
) },

31 { 0x1´ba889, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£åxfûãr
) },

32 { 0xbc82831d, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_fûe
) },

33 { 0x7a2af7b4, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

34 { 0x91715312, 
__VMLINUX_SYMBOL_STR
(
•rötf
) },

35 { 0x864a543a, 
__VMLINUX_SYMBOL_STR
(
ªœy_swôch_subbuf
) },

36 { 0x2f70413a, 
__VMLINUX_SYMBOL_STR
(
©h_¥ötk
) },

37 { 0x„7c4287, 
__VMLINUX_SYMBOL_STR
(
ƒ_˝u_ids
) },

38 { 0x3c80c06c, 
__VMLINUX_SYMBOL_STR
(
k°πouŒ
) },

39 { 0x9a6„7f4, 
__VMLINUX_SYMBOL_STR
(
ªœy_˛o£
) },

40 { 0x11b230b1, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëtsf64
) },

41 { 0x195d4402, 
__VMLINUX_SYMBOL_STR
(
deÁu…_Œ£ek
) },

42 { 0x5527dcc4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gërxfûãr
) },

43 { 0x5bb2Á39, 
__VMLINUX_SYMBOL_STR
(
debugfs_ªmove
) },

44 { 0x16305289, 
__VMLINUX_SYMBOL_STR
(
w¨n_¶ow∑th_nuŒ
) },

45 { 0xb71d108d, 
__VMLINUX_SYMBOL_STR
(
skb_puŒ
) },

46 { 0x4d32f7f6, 
__VMLINUX_SYMBOL_STR
(
sim∂e_›í
) },

47 { 0xcbaf03e5, 
__VMLINUX_SYMBOL_STR
(
ªœy_buf_fuŒ
) },

48 { 0x78764f4e, 
__VMLINUX_SYMBOL_STR
(
pv_úq_›s
) },

49 { 0xdb7305a1, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

50 { 0x2fb6de5d, 
__VMLINUX_SYMBOL_STR
(
add_devi˚_øndom√ss
) },

51 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

52 { 0x2142697b, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

53 { 0x9´52d03, 
__VMLINUX_SYMBOL_STR
(
õì80211_gë_hdæí_‰om_skb
) },

54 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

55 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

56 { 0x4ˇ9669f, 
__VMLINUX_SYMBOL_STR
(
s˙¥ötf
) },

57 { 0x63c4d61f, 
__VMLINUX_SYMBOL_STR
(
__bôm≠_weight
) },

58 { 0x709e9380, 
__VMLINUX_SYMBOL_STR
(
ªœy_›í
) },

59 { 0xb0e602eb, 
__VMLINUX_SYMBOL_STR
(
memmove
) },

60 { 0xc9e537a9, 
__VMLINUX_SYMBOL_STR
(
devm_kmÆloc
) },

61 { 0x4f6b400b, 
__VMLINUX_SYMBOL_STR
(
_c›y_‰om_u£r
) },

62 { 0x37f4e422, 
__VMLINUX_SYMBOL_STR
(
©h_hw_keyª£t
) },

63 { 0x9f9a2ef, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_txpowîlimô
) },

66 c⁄° 
	g__moduÀ_dïíds
[]

67 
__u£d


68 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

72 
MODULE_INFO
(
§cvîsi⁄
, "6FBD9F8A613FDFA282AB4FE");

	@ath9k_htc.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 
MODULE_INFO
(
öåì
, "Y");

19 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

20 
__u£d


21 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

22 { 0x9d35´ec, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

23 { 0xd7ecd8ad, 
__VMLINUX_SYMBOL_STR
(
õì80211_rx_«pi
) },

24 { 0x2d3385d3, 
__VMLINUX_SYMBOL_STR
(
sy°em_wq
) },

25 { 0x65524612, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_txq_¥›s
) },

26 { 0xf0728860, 
__VMLINUX_SYMBOL_STR
(
õì80211_cß_föish
) },

27 { 0x313ffb1b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öô
) },

28 { 0x8a9809d6, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

29 { 0x67ˇ6f48, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_gë_ch™√l
) },

30 { 0xc64ef9ó, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_deöô
) },

31 { 0x619cb7dd, 
__VMLINUX_SYMBOL_STR
(
sim∂e_ªad_‰om_buf„r
) },

32 { 0x6942499f, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_cfg_ouçut
) },

33 { 0x9313d603, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_dú
) },

34 { 0x6bf1c17f, 
__VMLINUX_SYMBOL_STR
(
pv_lock_›s
) },

35 { 0xa2e59924, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

36 { 0xedbddb40, 
__VMLINUX_SYMBOL_STR
(
devi˚_ªÀa£_drivî
) },

37 { 0x3e89b508, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_gpio
) },

38 { 0x4a0cf5a8, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_öô_¸y±o
) },

39 { 0x338e2969, 
__VMLINUX_SYMBOL_STR
(
õì80211_queue_w‹k
) },

40 { 0xbdd5f102, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_¥o˚ss_øã
) },

41 { 0x4c90984c, 
__VMLINUX_SYMBOL_STR
(
Àd_˛assdev_ªgi°î
) },

42 { 0x60882f51, 
__VMLINUX_SYMBOL_STR
(
õì80211_cß_is_com∂ëe
) },

43 { 0x2b0127e2, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_íabÀ
) },

44 { 0x4cb93a22, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_waô
) },

45 { 0xd45e4d0a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_gë_hw_¸y±o_keyty≥
) },

46 { 0x95b0a31c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_°›dm¨ecv
) },

47 { 0xb91879cb, 
__VMLINUX_SYMBOL_STR
(
©h_key_dñëe
) },

48 { 0xe1e8eb10, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_upd©e_txpow
) },

49 { 0xd9d3bcd3, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock_bh
) },

50 { 0x7ef39823, 
__VMLINUX_SYMBOL_STR
(
õì80211_hdæí
) },

51 { 0x6b06fd˚, 
__VMLINUX_SYMBOL_STR
(
dñayed_w‹k_timî_‚
) },

52 { 0x4d15841, 
__VMLINUX_SYMBOL_STR
(
õì80211_bóc⁄_gë_tim
) },

53 { 0x4a7a18ec, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gpio_gë
) },

54 { 0x645f97b5, 
__VMLINUX_SYMBOL_STR
(
©h_ªgd_öô
) },

55 { 0x88bÁ7e, 
__VMLINUX_SYMBOL_STR
(
ˇn˚l_w‹k_sync
) },

56 { 0xb931ebc5, 
__VMLINUX_SYMBOL_STR
(
usb_kûl_urb
) },

57 { 0x448óc3e, 
__VMLINUX_SYMBOL_STR
(
kmemdup
) },

58 { 0x5cccd4d6, 
__VMLINUX_SYMBOL_STR
(
õì80211_uƒegi°î_hw
) },

59 { 0x7b40e206, 
__VMLINUX_SYMBOL_STR
(
__dev_k‰ì_skb_™y
) },

60 { 0xóe3dfd6, 
__VMLINUX_SYMBOL_STR
(
__c⁄°_udñay
) },

61 { 0x9580deb, 
__VMLINUX_SYMBOL_STR
(
öô_timî_key
) },

62 { 0xa57863e, 
__VMLINUX_SYMBOL_STR
(
ˇn˚l_dñayed_w‹k_sync
) },

63 { 0x347cd1b3, 
__VMLINUX_SYMBOL_STR
(
muãx_u∆ock
) },

64 { 0x4f482ac, 
__VMLINUX_SYMBOL_STR
(
õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
) },

65 { 0x1´ba889, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£åxfûãr
) },

66 { 0x760f„08, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gë_txq_¥›s
) },

67 { 0xe3b60e0b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ªÀa£txqueue
) },

68 { 0xa09a8a16, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£t_tsf
) },

69 { 0x527a8d6e, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_•e˘øl_öô_debug
) },

70 { 0xbc82831d, 
__VMLINUX_SYMBOL_STR
(
debugfs_¸óã_fûe
) },

71 { 0xe229598d, 
__VMLINUX_SYMBOL_STR
(
wùhy_rfkûl_°¨t_pﬁlög
) },

72 { 0x9f259c62, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_ªlﬂd_chaömask
) },

73 { 0x91715312, 
__VMLINUX_SYMBOL_STR
(
•rötf
) },

74 { 0x276d4c3c, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_•e˘øl_deöô_debug
) },

75 { 0x7d11c268, 
__VMLINUX_SYMBOL_STR
(
jiffõs
) },

76 { 0x61e3ec3a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_öô_ch™√ls_øãs
) },

77 { 0x8„5c1a3, 
__VMLINUX_SYMBOL_STR
(
skb_åim
) },

78 { 0x˚f121ˇ, 
__VMLINUX_SYMBOL_STR
(
õì80211_°›_queues
) },

79 { 0xe7985cd8, 
__VMLINUX_SYMBOL_STR
(
usb_u«nch‹_urb
) },

80 { 0x8a0b12c6, 
__VMLINUX_SYMBOL_STR
(
com∂ëe_Æl
) },

81 { 0xc8556896, 
__VMLINUX_SYMBOL_STR
(
__√tdev_Æloc_skb
) },

82 { 0x73d49651, 
__VMLINUX_SYMBOL_STR
(
õì80211_tx_°©us
) },

83 { 0x2f70413a, 
__VMLINUX_SYMBOL_STR
(
©h_¥ötk
) },

84 { 0x9e88526, 
__VMLINUX_SYMBOL_STR
(
__öô_waôqueue_hód
) },

85 { 0x20ef8927, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t›mode
) },

86 { 0x64ab0e98, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄
) },

87 { 0xb2b´cba, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_dißbÀ
) },

88 { 0x706d051c, 
__VMLINUX_SYMBOL_STR
(
dñ_timî_sync
) },

89 { 0x3c80c06c, 
__VMLINUX_SYMBOL_STR
(
k°πouŒ
) },

90 { 0xf721fbcd, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£âxqueue
) },

91 { 0x11b230b1, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gëtsf64
) },

92 { 0xb544227, 
__VMLINUX_SYMBOL_STR
(
©h_cmn_¥o˚ss_f·
) },

93 { 0x195d4402, 
__VMLINUX_SYMBOL_STR
(
deÁu…_Œ£ek
) },

94 { 0x17b099d2, 
__VMLINUX_SYMBOL_STR
(
dev_îr
) },

95 { 0x1916e38c, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_u∆ock_úqª°‹e
) },

96 { 0x37befc70, 
__VMLINUX_SYMBOL_STR
(
jiffõs_to_m£cs
) },

97 { 0xcˇ0be3c, 
__VMLINUX_SYMBOL_STR
(
usb_dîegi°î
) },

98 { 0xd891be8a, 
__VMLINUX_SYMBOL_STR
(
õì80211_Æloc_hw_nm
) },

99 { 0x17d070c2, 
__VMLINUX_SYMBOL_STR
(
__muãx_öô
) },

100 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

101 { 0x984ì7b3, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_°a_bóc⁄_timîs
) },

102 { 0xacb1b78e, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£t_tsÁdju°
) },

103 { 0x34f92f7a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_bóc⁄_c⁄fig_≠
) },

104 { 0x9cf3310c, 
__VMLINUX_SYMBOL_STR
(
õì80211_wake_queues
) },

105 { 0x2d15177d, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_°©_rx
) },

106 { 0xÁef0ed, 
__VMLINUX_SYMBOL_STR
(
__èskÀt_scheduÀ
) },

107 { 0x´e40d0c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_dißbÀ
) },

108 { 0x5527dcc4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_gërxfûãr
) },

109 { 0xd098999b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_™i_m⁄ô‹
) },

110 { 0x5155600, 
__VMLINUX_SYMBOL_STR
(
©h_is_mybóc⁄
) },

111 { 0xì4bb529, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_bóc⁄_c⁄fig_adhoc
) },

112 { 0x75e4b898, 
__VMLINUX_SYMBOL_STR
(
usb_c⁄åﬁ_msg
) },

113 { 0xc5473301, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_¥o˚ss_rssi
) },

114 { 0xØfdb617, 
__VMLINUX_SYMBOL_STR
(
©h_is_w‹ld_ªgd
) },

115 { 0xabcc1dc2, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_ba£_ì¥om
) },

116 { 0x16305289, 
__VMLINUX_SYMBOL_STR
(
w¨n_¶ow∑th_nuŒ
) },

117 { 0xa2˚c23e, 
__VMLINUX_SYMBOL_STR
(
skb_push
) },

118 { 0x11761f56, 
__VMLINUX_SYMBOL_STR
(
muãx_lock
) },

119 { 0x9545af6d, 
__VMLINUX_SYMBOL_STR
(
èskÀt_öô
) },

120 { 0x16e5c2a, 
__VMLINUX_SYMBOL_STR
(
mod_timî
) },

121 { 0xf74d1ef3, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_ªcv
) },

122 { 0xb71d108d, 
__VMLINUX_SYMBOL_STR
(
skb_puŒ
) },

123 { 0x4d32f7f6, 
__VMLINUX_SYMBOL_STR
(
sim∂e_›í
) },

124 { 0xcd4b7cd5, 
__VMLINUX_SYMBOL_STR
(
wùhy_rfkûl_°›_pﬁlög
) },

125 { 0x4f86f33b, 
__VMLINUX_SYMBOL_STR
(
ªque°_fúmw¨e_nowaô
) },

126 { 0x1b68182f, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_wrôe_associd
) },

127 { 0xa7f14f4e, 
__VMLINUX_SYMBOL_STR
(
õì80211_queue_dñayed_w‹k
) },

128 { 0xf11543ff, 
__VMLINUX_SYMBOL_STR
(
föd_fú°_zîo_bô
) },

129 { 0x7cc374c2, 
__VMLINUX_SYMBOL_STR
(
©h_ªg_nŸifõr_≠∂y
) },

130 { 0x5fdb69ad, 
__VMLINUX_SYMBOL_STR
(
wùhy_to_õì80211_hw
) },

131 { 0x82072614, 
__VMLINUX_SYMBOL_STR
(
èskÀt_kûl
) },

132 { 0x4d65f296, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öô_btc€x_hw
) },

133 { 0x26ˇ3db2, 
__VMLINUX_SYMBOL_STR
(
õì80211_°›_tx_ba_cb_úqß„
) },

134 { 0xd85b6c42, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_phy_îr
) },

135 { 0x23d33b22, 
__VMLINUX_SYMBOL_STR
(
skb_queue_èû
) },

136 { 0x59f0b69d, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_bóc⁄q_£tup
) },

137 { 0x15d8247d, 
__VMLINUX_SYMBOL_STR
(
_dev_öfo
) },

138 { 0x2810cbaf, 
__VMLINUX_SYMBOL_STR
(
usb_submô_urb
) },

139 { 0x278832bc, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_«me
) },

140 { 0xe37094a8, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_•e˘øl_sˇn_åiggî
) },

141 { 0x53169fb2, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_öô_globÆ_£âögs
) },

142 { 0x5ó7e˚6, 
__VMLINUX_SYMBOL_STR
(
__Æloc_skb
) },

143 { 0xc375dec3, 
__VMLINUX_SYMBOL_STR
(
usb_gë_dev
) },

144 { 0x4395953e, 
__VMLINUX_SYMBOL_STR
(
usb_kûl_™ch‹ed_urbs
) },

145 { 0xf40fbf02, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£âsf64
) },

146 { 0xbba70a2d, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_u∆ock_bh
) },

147 { 0xdb7305a1, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

148 { 0xd5a3fÁ9, 
__VMLINUX_SYMBOL_STR
(
wùhy_rfkûl_£t_hw_°©e
) },

149 { 0x2d493cff, 
__VMLINUX_SYMBOL_STR
(
usb_bulk_msg
) },

150 { 0xc0f333Á, 
__VMLINUX_SYMBOL_STR
(
usb_put_dev
) },

151 { 0xa202a8e5, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_‹dî_åa˚
) },

152 { 0x95e5793f, 
__VMLINUX_SYMBOL_STR
(
k‰ì_skb
) },

153 { 0xd0b8c838, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_bóc⁄öô
) },

154 { 0xb84eb84e, 
__VMLINUX_SYMBOL_STR
(
õì80211_föd_°a
) },

155 { 0x282657a4, 
__VMLINUX_SYMBOL_STR
(
õì80211_gë_buf„ªd_bc
) },

156 { 0x1036Ø1b, 
__VMLINUX_SYMBOL_STR
(
usb_öãºu±_msg
) },

157 { 0xf4ˇ2bb4, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_bt_°omp
) },

158 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

159 { 0x´8d6f0c, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£åxab‹t
) },

160 { 0xb9d1692a, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_bóc⁄_c⁄fig_°a
) },

161 { 0x2142697b, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

162 { 0xe259´9e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

163 { 0xb98619b5, 
__VMLINUX_SYMBOL_STR
(
©h_hw_£tbssidmask
) },

164 { 0x680ec266, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock_úqßve
) },

165 { 0x907fccf7, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_rx_skb_po°¥o˚ss
) },

166 { 0x536˚742, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_phy_dißbÀ
) },

167 { 0x6434095a, 
__VMLINUX_SYMBOL_STR
(
__õì80211_gë_ødio_Àd_«me
) },

168 { 0x9´52d03, 
__VMLINUX_SYMBOL_STR
(
õì80211_gë_hdæí_‰om_skb
) },

169 { 0xf47e66b0, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£çowî
) },

170 { 0x6f1f9ec7, 
__VMLINUX_SYMBOL_STR
(
__õì80211_¸óã_çt_Àd_åiggî
) },

171 { 0x9e7b103e, 
__VMLINUX_SYMBOL_STR
(
õì80211_ªgi°î_hw
) },

172 { 0x16a6„da, 
__VMLINUX_SYMBOL_STR
(
Àd_˛assdev_uƒegi°î
) },

173 { 0x13470b19, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_£t_weight
) },

174 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

175 { 0xa6301530, 
__VMLINUX_SYMBOL_STR
(
ªguœt‹y_höt
) },

176 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

177 { 0xó1b33d0, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£tmˇ°fûãr
) },

178 { 0x500dØa, 
__VMLINUX_SYMBOL_STR
(
õì80211_°¨t_tx_ba_£ssi⁄
) },

179 { 0x927a7Ød, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_°¨çcuª˚ive
) },

180 { 0xf860b07b, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_£tu±xqueue
) },

181 { 0x4ˇ9669f, 
__VMLINUX_SYMBOL_STR
(
s˙¥ötf
) },

182 { 0x2b626cd6, 
__VMLINUX_SYMBOL_STR
(
usb_ªgi°î_drivî
) },

183 { 0x4fc„57b, 
__VMLINUX_SYMBOL_STR
(
ªque°_fúmw¨e
) },

184 { 0x5f79b6fb, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£t
) },

185 { 0x83c5c23c, 
__VMLINUX_SYMBOL_STR
(
õì80211_‰ì_hw
) },

186 { 0xˇ702abb, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_rx_ac˚±
) },

187 { 0x63c4d61f, 
__VMLINUX_SYMBOL_STR
(
__bôm≠_weight
) },

188 { 0xf16d977b, 
__VMLINUX_SYMBOL_STR
(
skb_dequeue
) },

189 { 0x5037e40b, 
__VMLINUX_SYMBOL_STR
(
usb_i‚um_to_if
) },

190 { 0x2e0d2f7f, 
__VMLINUX_SYMBOL_STR
(
queue_w‹k_⁄
) },

191 { 0xb2d5a552, 
__VMLINUX_SYMBOL_STR
(
com∂ëe
) },

192 { 0x28318305, 
__VMLINUX_SYMBOL_STR
(
¢¥ötf
) },

193 { 0xb0e602eb, 
__VMLINUX_SYMBOL_STR
(
memmove
) },

194 { 0xc7922d93, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_btc€x_öô_3wúe
) },

195 { 0xdadd8c5d, 
__VMLINUX_SYMBOL_STR
(
©h_key_c⁄fig
) },

196 { 0x7f02188f, 
__VMLINUX_SYMBOL_STR
(
__m£cs_to_jiffõs
) },

197 { 0x5ef˚f9d, 
__VMLINUX_SYMBOL_STR
(
©h9k_cmn_debug_modÆ_ì¥om
) },

198 { 0x66c66f48, 
__VMLINUX_SYMBOL_STR
(
skb_put
) },

199 { 0x2a565a25, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄_timeout
) },

200 { 0x4f6b400b, 
__VMLINUX_SYMBOL_STR
(
_c›y_‰om_u£r
) },

201 { 0x226c32c1, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_uöt
) },

202 { 0xb1´0375, 
__VMLINUX_SYMBOL_STR
(
©h9k_hw_ª£t_ˇlvÆid
) },

203 { 0x809dd6c4, 
__VMLINUX_SYMBOL_STR
(
usb_‰ì_urb
) },

204 { 0x55„4565, 
__VMLINUX_SYMBOL_STR
(
ªÀa£_fúmw¨e
) },

205 { 0x46004Ø9, 
__VMLINUX_SYMBOL_STR
(
õì80211_°¨t_tx_ba_cb_úqß„
) },

206 { 0xd5ac7f96, 
__VMLINUX_SYMBOL_STR
(
usb_™ch‹_urb
) },

207 { 0x2da1b27c, 
__VMLINUX_SYMBOL_STR
(
usb_Æloc_urb
) },

210 c⁄° 
	g__moduÀ_dïíds
[]

211 
__u£d


212 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

215 
MODULE_ALIAS
("usb:v0CF3p9271d*dc*dsc*dp*ic*isc*ip*in*");

216 
MODULE_ALIAS
("usb:v0CF3p1006d*dc*dsc*dp*ic*isc*ip*in*");

217 
MODULE_ALIAS
("usb:v0846p9030d*dc*dsc*dp*ic*isc*ip*in*");

218 
MODULE_ALIAS
("usb:v07D1p3A10d*dc*dsc*dp*ic*isc*ip*in*");

219 
MODULE_ALIAS
("usb:v13D3p3327d*dc*dsc*dp*ic*isc*ip*in*");

220 
MODULE_ALIAS
("usb:v13D3p3328d*dc*dsc*dp*ic*isc*ip*in*");

221 
MODULE_ALIAS
("usb:v13D3p3346d*dc*dsc*dp*ic*isc*ip*in*");

222 
MODULE_ALIAS
("usb:v13D3p3348d*dc*dsc*dp*ic*isc*ip*in*");

223 
MODULE_ALIAS
("usb:v13D3p3349d*dc*dsc*dp*ic*isc*ip*in*");

224 
MODULE_ALIAS
("usb:v13D3p3350d*dc*dsc*dp*ic*isc*ip*in*");

225 
MODULE_ALIAS
("usb:v04CAp4605d*dc*dsc*dp*ic*isc*ip*in*");

226 
MODULE_ALIAS
("usb:v040Dp3801d*dc*dsc*dp*ic*isc*ip*in*");

227 
MODULE_ALIAS
("usb:v0CF3pB003d*dc*dsc*dp*ic*isc*ip*in*");

228 
MODULE_ALIAS
("usb:v0CF3pB002d*dc*dsc*dp*ic*isc*ip*in*");

229 
MODULE_ALIAS
("usb:v057Cp8403d*dc*dsc*dp*ic*isc*ip*in*");

230 
MODULE_ALIAS
("usb:v0471p209Ed*dc*dsc*dp*ic*isc*ip*in*");

231 
MODULE_ALIAS
("usb:v0CF3p7015d*dc*dsc*dp*ic*isc*ip*in*");

232 
MODULE_ALIAS
("usb:v1668p1200d*dc*dsc*dp*ic*isc*ip*in*");

233 
MODULE_ALIAS
("usb:v0CF3p7010d*dc*dsc*dp*ic*isc*ip*in*");

234 
MODULE_ALIAS
("usb:v0846p9018d*dc*dsc*dp*ic*isc*ip*in*");

235 
MODULE_ALIAS
("usb:v083ApA704d*dc*dsc*dp*ic*isc*ip*in*");

236 
MODULE_ALIAS
("usb:v0411p017Fd*dc*dsc*dp*ic*isc*ip*in*");

237 
MODULE_ALIAS
("usb:v0411p0197d*dc*dsc*dp*ic*isc*ip*in*");

238 
MODULE_ALIAS
("usb:v04DAp3904d*dc*dsc*dp*ic*isc*ip*in*");

239 
MODULE_ALIAS
("usb:v0CF3p20FFd*dc*dsc*dp*ic*isc*ip*in*");

241 
MODULE_INFO
(
§cvîsi⁄
, "D97AA41EF63133F707BAA44");

	@ath9k_hw.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

13 
MODULE_INFO
(
öåì
, "Y");

15 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

16 
__u£d


17 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

18 { 0x9d35´ec, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

19 { 0x931f05d3, 
__VMLINUX_SYMBOL_STR
(
ktime_gë_øw
) },

20 { 0x8a9809d6, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

21 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

22 { 0x79Ø04a2, 
__VMLINUX_SYMBOL_STR
(
gë_øndom_byãs
) },

23 { 0xedd7608a, 
__VMLINUX_SYMBOL_STR
(
gpio_to_desc
) },

24 { 0xc0a3d105, 
__VMLINUX_SYMBOL_STR
(
föd_√xt_bô
) },

25 { 0x403f9529, 
__VMLINUX_SYMBOL_STR
(
gpio_ªque°_⁄e
) },

26 { 0xóe3dfd6, 
__VMLINUX_SYMBOL_STR
(
__c⁄°_udñay
) },

27 { 0x2f70413a, 
__VMLINUX_SYMBOL_STR
(
©h_¥ötk
) },

28 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

29 { 0x17b099d2, 
__VMLINUX_SYMBOL_STR
(
dev_îr
) },

30 { 0x16305289, 
__VMLINUX_SYMBOL_STR
(
w¨n_¶ow∑th_nuŒ
) },

31 { 0x428d1cbf, 
__VMLINUX_SYMBOL_STR
(
©h_hw_gë_li°í_time
) },

32 { 0xfb4de67a, 
__VMLINUX_SYMBOL_STR
(
©h_ªgd_gë_b™d_˘l
) },

33 { 0xdb7305a1, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

34 { 0xb152d87d, 
__VMLINUX_SYMBOL_STR
(
˝u_possibÀ_mask
) },

35 { 0xfcdef8ó, 
__VMLINUX_SYMBOL_STR
(
©h_hw_cy˛e_cou¡îs_upd©e
) },

36 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

37 { 0x123f82f3, 
__VMLINUX_SYMBOL_STR
(
gëøwm⁄Ÿ⁄ic64
) },

38 { 0x2142697b, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

39 { 0xb98619b5, 
__VMLINUX_SYMBOL_STR
(
©h_hw_£tbssidmask
) },

40 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

41 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

42 { 0xf5db9785, 
__VMLINUX_SYMBOL_STR
(
gpiod_£t_øw_vÆue
) },

43 { 0x4ˇ9669f, 
__VMLINUX_SYMBOL_STR
(
s˙¥ötf
) },

44 { 0xb352177e, 
__VMLINUX_SYMBOL_STR
(
föd_fú°_bô
) },

45 { 0x63c4d61f, 
__VMLINUX_SYMBOL_STR
(
__bôm≠_weight
) },

46 { 0xc9e537a9, 
__VMLINUX_SYMBOL_STR
(
devm_kmÆloc
) },

47 { 0x9e7d6bd0, 
__VMLINUX_SYMBOL_STR
(
__udñay
) },

50 c⁄° 
	g__moduÀ_dïíds
[]

51 
__u£d


52 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

56 
MODULE_INFO
(
§cvîsi⁄
, "FA7ECFBA5761A5B3ED96BB2");

	@beacon.c

17 
	~<löux/dma-m≠pög.h
>

18 
	~"©h9k.h
"

20 
	#FUDGE
 2

	)

22 
	$©h9k_ª£t_bóc⁄_°©us
(
©h_so·c
 *
sc
)

24 
sc
->
bóc⁄
.
tx_¥o˚s£d
 = 
Ál£
;

25 
sc
->
bóc⁄
.
tx_œ°
 = 
Ál£
;

26 
	}
}

33 
	$©h9k_bóc⁄q_c⁄fig
(
©h_so·c
 *
sc
)

35 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

36 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

37 
©h9k_tx_queue_öfo
 
qi
, 
qi_be
;

38 
©h_txq
 *
txq
;

40 
	`©h9k_hw_gë_txq_¥›s
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
, &
qi
);

42 i‡(
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_AP
 ||

43 
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_MESH_POINT
) {

45 
qi
.
tqi_aifs
 = 1;

46 
qi
.
tqi_cwmö
 = 0;

47 
qi
.
tqi_cwmax
 = 0;

50 
txq
 = 
sc
->
tx
.
txq_m≠
[
IEEE80211_AC_BE
];

51 
	`©h9k_hw_gë_txq_¥›s
(
ah
, 
txq
->
axq_qnum
, &
qi_be
);

52 
qi
.
tqi_aifs
 = 
qi_be
.tqi_aifs;

53 i‡(
ah
->
¶Ÿtime
 =
ATH9K_SLOT_TIME_20
)

54 
qi
.
tqi_cwmö
 = 2*
qi_be
.tqi_cwmin;

56 
qi
.
tqi_cwmö
 = 4*
qi_be
.tqi_cwmin;

57 
qi
.
tqi_cwmax
 = 
qi_be
.tqi_cwmax;

60 i‡(!
	`©h9k_hw_£t_txq_¥›s
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
, &
qi
)) {

61 
	`©h_îr
(
comm⁄
, "UnableÅo update h/w beacon queueÖarameters\n");

63 
	`©h9k_hw_ª£âxqueue
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
);

65 
	}
}

72 
	$©h9k_bóc⁄_£tup
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
,

73 
©h_buf
 *
bf
, 
øãidx
)

75 
sk_buff
 *
skb
 = 
bf
->
bf_mpdu
;

76 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

77 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

78 
©h_tx_öfo
 
öfo
;

79 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

80 
u8
 
chaömask
 = 
ah
->
txchaömask
;

81 
u8
 
i
, 
øã
 = 0;

83 
sb™d
 = &
comm⁄
->
sb™ds
[
sc
->
cur_ch™def
.
ch™
->
b™d
];

84 
øã
 = 
sb™d
->
bôøãs
[
øãidx
].
hw_vÆue
;

85 i‡(
vif
->
bss_c⁄f
.
u£_sh‹t_¥ómbÀ
)

86 
øã
 |
sb™d
->
bôøãs
[
øãidx
].
hw_vÆue_sh‹t
;

88 
	`mem£t
(&
öfo
, 0, (info));

89 
öfo
.
pkt_Àn
 = 
skb
->
Àn
 + 
FCS_LEN
;

90 
öfo
.
ty≥
 = 
ATH9K_PKT_TYPE_BEACON
;

91 
i
 = 0; i < 4; i++)

92 
öfo
.
txpowî
[
i
] = 
MAX_RATE_POWER
;

93 
öfo
.
keyix
 = 
ATH9K_TXKEYIX_INVALID
;

94 
öfo
.
keyty≥
 = 
ATH9K_KEY_TYPE_CLEAR
;

95 
öfo
.
Êags
 = 
ATH9K_TXDESC_NOACK
 | 
ATH9K_TXDESC_CLRDMASK
;

97 
öfo
.
buf_addr
[0] = 
bf
->
bf_buf_addr
;

98 
öfo
.
buf_Àn
[0] = 
	`roundup
(
skb
->
Àn
, 4);

100 
öfo
.
is_fú°
 = 
åue
;

101 
öfo
.
is_œ°
 = 
åue
;

103 
öfo
.
qcu
 = 
sc
->
bóc⁄
.
bóc⁄q
;

105 
öfo
.
øãs
[0].
Trõs
 = 1;

106 
öfo
.
øãs
[0].
R©e
 = 
øã
;

107 
öfo
.
øãs
[0].
ChSñ
 = 
	`©h_txchaömask_ªdu˘i⁄
(
sc
, 
chaömask
, 
øã
);

109 
	`©h9k_hw_£t_txdesc
(
ah
, 
bf
->
bf_desc
, &
öfo
);

110 
	}
}

112 
©h_buf
 *
	$©h9k_bóc⁄_gíî©e
(
õì80211_hw
 *
hw
,

113 
õì80211_vif
 *
vif
)

115 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

116 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

117 
©h_buf
 *
bf
;

118 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

119 
sk_buff
 *
skb
;

120 
©h_txq
 *
ˇbq
 = 
sc
->
bóc⁄
.cabq;

121 
õì80211_tx_öfo
 *
öfo
;

122 
õì80211_mgmt
 *
mgmt_hdr
;

123 
ˇbq_dïth
;

125 i‡(
avp
->
av_bcbuf
 =
NULL
)

126  
NULL
;

128 
bf
 = 
avp
->
av_bcbuf
;

129 
skb
 = 
bf
->
bf_mpdu
;

130 i‡(
skb
) {

131 
	`dma_unm≠_sögÀ
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

132 
skb
->
Àn
, 
DMA_TO_DEVICE
);

133 
	`dev_k‰ì_skb_™y
(
skb
);

134 
bf
->
bf_buf_addr
 = 0;

135 
bf
->
bf_mpdu
 = 
NULL
;

138 
skb
 = 
	`õì80211_bóc⁄_gë
(
hw
, 
vif
);

139 i‡(
skb
 =
NULL
)

140  
NULL
;

142 
bf
->
bf_mpdu
 = 
skb
;

144 
mgmt_hdr
 = (
õì80211_mgmt
 *)
skb
->
d©a
;

145 
mgmt_hdr
->
u
.
bóc⁄
.
time°amp
 = 
avp
->
tsf_adju°
;

147 
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

149 
	`©h_assign_£q
(
comm⁄
, 
skb
);

151 i‡(
vif
->
p2p
)

152 
	`©h9k_bóc⁄_add_nﬂ
(
sc
, 
avp
, 
skb
);

154 
bf
->
bf_buf_addr
 = 
	`dma_m≠_sögÀ
(
sc
->
dev
, 
skb
->
d©a
,

155 
skb
->
Àn
, 
DMA_TO_DEVICE
);

156 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(
sc
->
dev
, 
bf
->
bf_buf_addr
))) {

157 
	`dev_k‰ì_skb_™y
(
skb
);

158 
bf
->
bf_mpdu
 = 
NULL
;

159 
bf
->
bf_buf_addr
 = 0;

160 
	`©h_îr
(
comm⁄
, "dma_mapping_error on beaconing\n");

161  
NULL
;

164 
skb
 = 
	`õì80211_gë_buf„ªd_bc
(
hw
, 
vif
);

174 
	`•ö_lock_bh
(&
ˇbq
->
axq_lock
);

175 
ˇbq_dïth
 = 
ˇbq
->
axq_dïth
;

176 
	`•ö_u∆ock_bh
(&
ˇbq
->
axq_lock
);

178 i‡(
skb
 && 
ˇbq_dïth
) {

179 i‡(
sc
->
cur_ch™
->
nvifs
 > 1) {

180 
	`©h_dbg
(
comm⁄
, 
BEACON
,

182 
	`©h_døötxq
(
sc
, 
ˇbq
);

186 
	`©h9k_bóc⁄_£tup
(
sc
, 
vif
, 
bf
, 
öfo
->
c⁄åﬁ
.
øãs
[0].
idx
);

188 i‡(
skb
)

189 
	`©h_tx_ˇbq
(
hw
, 
vif
, 
skb
);

191  
bf
;

192 
	}
}

194 
	$©h9k_bóc⁄_assign_¶Ÿ
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
)

196 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

197 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

198 
¶Ÿ
;

200 
avp
->
av_bcbuf
 = 
	`li°_fú°_íåy
(&
sc
->
bóc⁄
.
bbuf
, 
©h_buf
, 
li°
);

201 
	`li°_dñ
(&
avp
->
av_bcbuf
->
li°
);

203 
¶Ÿ
 = 0; slŸ < 
ATH_BCBUF
; slot++) {

204 i‡(
sc
->
bóc⁄
.
b¶Ÿ
[
¶Ÿ
] =
NULL
) {

205 
avp
->
av_b¶Ÿ
 = 
¶Ÿ
;

210 
sc
->
bóc⁄
.
b¶Ÿ
[
avp
->
av_b¶Ÿ
] = 
vif
;

211 
sc
->
nb˙vifs
++;

213 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Added interfaceát beacon slot: %d\n",

214 
avp
->
av_b¶Ÿ
);

215 
	}
}

217 
	$©h9k_bóc⁄_ªmove_¶Ÿ
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
)

219 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

220 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

221 
©h_buf
 *
bf
 = 
avp
->
av_bcbuf
;

222 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

224 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Removing interfaceát beacon slot: %d\n",

225 
avp
->
av_b¶Ÿ
);

227 
	`èskÀt_dißbÀ
(&
sc
->
bc⁄_èskÀt
);

229 
cur_c⁄f
->
íabÀ_bóc⁄
 &~
	`BIT
(
avp
->
av_b¶Ÿ
);

231 i‡(
bf
 && bf->
bf_mpdu
) {

232 
sk_buff
 *
skb
 = 
bf
->
bf_mpdu
;

233 
	`dma_unm≠_sögÀ
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

234 
skb
->
Àn
, 
DMA_TO_DEVICE
);

235 
	`dev_k‰ì_skb_™y
(
skb
);

236 
bf
->
bf_mpdu
 = 
NULL
;

237 
bf
->
bf_buf_addr
 = 0;

240 
avp
->
av_bcbuf
 = 
NULL
;

241 
sc
->
bóc⁄
.
b¶Ÿ
[
avp
->
av_b¶Ÿ
] = 
NULL
;

242 
sc
->
nb˙vifs
--;

243 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
bóc⁄
.
bbuf
);

245 
	`èskÀt_íabÀ
(&
sc
->
bc⁄_èskÀt
);

246 
	}
}

248 
	$©h9k_bóc⁄_choo£_¶Ÿ
(
©h_so·c
 *
sc
)

250 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

251 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

252 
u16
 
ötvÆ
;

253 
u32
 
ts·u
;

254 
u64
 
tsf
;

255 
¶Ÿ
;

257 i‡(
sc
->
sc_ah
->
›mode
 !
NL80211_IFTYPE_AP
 &&

258 
sc
->
sc_ah
->
›mode
 !
NL80211_IFTYPE_MESH_POINT
) {

259 
	`©h_dbg
(
comm⁄
, 
BEACON
, "slot 0,Åsf: %llu\n",

260 
	`©h9k_hw_gëtsf64
(
sc
->
sc_ah
));

264 
ötvÆ
 = 
cur_c⁄f
->
bóc⁄_öãrvÆ
 ? : 
ATH_DEFAULT_BINTVAL
;

265 
tsf
 = 
	`©h9k_hw_gëtsf64
(
sc
->
sc_ah
);

266 
tsf
 +
	`TU_TO_USEC
(
sc
->
sc_ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
);

267 
ts·u
 = 
	`TSF_TO_TU
((
tsf
 * 
ATH_BCBUF
) >>32,Åsf * ATH_BCBUF);

268 
¶Ÿ
 = (
ts·u
 % (
ötvÆ
 * 
ATH_BCBUF
)) / intval;

270 
	`©h_dbg
(
comm⁄
, 
BEACON
, "slot: %dÅsf: %lluÅsftu: %u\n",

271 
¶Ÿ
, 
tsf
, 
ts·u
 / 
ATH_BCBUF
);

273  
¶Ÿ
;

274 
	}
}

276 
	$©h9k_£t_tsÁdju°
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
)

278 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

279 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

280 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
avp
->
ch™˘x
->
bóc⁄
;

281 
u32
 
tsÁdju°
;

283 i‡(
avp
->
av_b¶Ÿ
 == 0)

286 
tsÁdju°
 = 
cur_c⁄f
->
bóc⁄_öãrvÆ
 * 
avp
->
av_b¶Ÿ
;

287 
tsÁdju°
 = 
	`TU_TO_USEC
—sÁdju°Ë/ 
ATH_BCBUF
;

288 
avp
->
tsf_adju°
 = 
	`˝u_to_À64
(
tsÁdju°
);

290 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "tsfadjust is: %llu for bslot: %d\n",

291 ()
tsÁdju°
, 
avp
->
av_b¶Ÿ
);

292 
	}
}

294 
boﬁ
 
	$©h9k_cß_is_föished
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
)

296 i‡(!
vif
 || !vif->
cß_a˘ive
)

297  
Ál£
;

299 i‡(!
	`õì80211_cß_is_com∂ëe
(
vif
))

300  
Ál£
;

302 
	`õì80211_cß_föish
(
vif
);

303  
åue
;

304 
	}
}

306 
	$©h9k_cß_upd©e_vif
(*
d©a
, 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

308 
©h_so·c
 *
sc
 = 
d©a
;

309 
	`©h9k_cß_is_föished
(
sc
, 
vif
);

310 
	}
}

312 
	$©h9k_cß_upd©e
(
©h_so·c
 *
sc
)

314 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(
sc
->
hw
,

315 
IEEE80211_IFACE_ITER_NORMAL
,

316 
©h9k_cß_upd©e_vif
, 
sc
);

317 
	}
}

319 
	$©h9k_bóc⁄_èskÀt
(
d©a
)

321 
©h_so·c
 *
sc
 = (©h_so·¯*)
d©a
;

322 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

323 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

324 
©h_buf
 *
bf
 = 
NULL
;

325 
õì80211_vif
 *
vif
;

326 
boﬁ
 
edma
 = !!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
);

327 
¶Ÿ
;

329 i‡(
	`ã°_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
)) {

330 
	`©h_dbg
(
comm⁄
, 
RESET
,

342 i‡(
	`©h9k_hw_numtx≥ndög
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
) != 0) {

343 
sc
->
bóc⁄
.
bmiss˙t
++;

345 
	`©h9k_hw_check_«v
(
ah
);

353 i‡(!
	`©h_hw_check
(
sc
))

356 i‡(
sc
->
bóc⁄
.
bmiss˙t
 < 
BSTUCK_THRESH
 * sc->
nb˙vifs
) {

357 
	`©h_dbg
(
comm⁄
, 
BSTUCK
,

359 
sc
->
bóc⁄
.
bmiss˙t
);

360 
	`©h9k_hw_°›_dma_queue
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
);

361 i‡(
sc
->
bóc⁄
.
bmiss˙t
 > 3)

362 
	`©h9k_hw_b°uck_nfˇl
(
ah
);

363 } i‡(
sc
->
bóc⁄
.
bmiss˙t
 >
BSTUCK_THRESH
) {

364 
	`©h_dbg
(
comm⁄
, 
BSTUCK
, "beacon is officially stuck\n");

365 
sc
->
bóc⁄
.
bmiss˙t
 = 0;

366 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_BEACON_STUCK
);

372 
¶Ÿ
 = 
	`©h9k_bóc⁄_choo£_¶Ÿ
(
sc
);

373 
vif
 = 
sc
->
bóc⁄
.
b¶Ÿ
[
¶Ÿ
];

376 i‡(!
edma
) {

377 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

378 
	`©h_ch™˘x_bóc⁄_£¡_ev
(
sc
,

379 
ATH_CHANCTX_EVENT_BEACON_SENT
);

382 i‡(
	`©h9k_cß_is_föished
(
sc
, 
vif
))

386 i‡(!
vif
 || !vif->
bss_c⁄f
.
íabÀ_bóc⁄
)

389 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

390 
	`©h_ch™˘x_evít
(
sc
, 
vif
, 
ATH_CHANCTX_EVENT_BEACON_PREPARE
);

393 
bf
 = 
	`©h9k_bóc⁄_gíî©e
(
sc
->
hw
, 
vif
);

395 i‡(
sc
->
bóc⁄
.
bmiss˙t
 != 0) {

396 
	`©h_dbg
(
comm⁄
, 
BSTUCK
, "resume beacon xmitáfter %u misses\n",

397 
sc
->
bóc⁄
.
bmiss˙t
);

398 
sc
->
bóc⁄
.
bmiss˙t
 = 0;

417 i‡(
sc
->
bóc⁄
.
upd©e¶Ÿ
 =
UPDATE
) {

418 
sc
->
bóc⁄
.
upd©e¶Ÿ
 = 
COMMIT
;

419 
sc
->
bóc⁄
.
¶Ÿupd©e
 = 
¶Ÿ
;

420 } i‡(
sc
->
bóc⁄
.
upd©e¶Ÿ
 =
COMMIT
 &&

421 
sc
->
bóc⁄
.
¶Ÿupd©e
 =
¶Ÿ
) {

422 
ah
->
¶Ÿtime
 = 
sc
->
bóc⁄
.slottime;

423 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

424 
sc
->
bóc⁄
.
upd©e¶Ÿ
 = 
OK
;

427 i‡(
bf
) {

428 
	`©h9k_ª£t_bóc⁄_°©us
(
sc
);

430 
	`©h_dbg
(
comm⁄
, 
BEACON
,

431 "Tønsmôtög bóc⁄ f‹ slŸ: %d\n", 
¶Ÿ
);

434 
	`©h9k_hw_puâxbuf
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
, 
bf
->
bf_daddr
);

436 i‡(!
edma
)

437 
	`©h9k_hw_tx°¨t
(
ah
, 
sc
->
bóc⁄
.
bóc⁄q
);

439 
	}
}

444 
	$©h9k_bóc⁄_öô
(
©h_so·c
 *
sc
, 
u32
 
√xâbâ
,

445 
u32
 
ötvÆ
, 
boﬁ
 
ª£t_tsf
)

447 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

449 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

450 i‡(
ª£t_tsf
)

451 
	`©h9k_hw_ª£t_tsf
(
ah
);

452 
	`©h9k_bóc⁄q_c⁄fig
(
sc
);

453 
	`©h9k_hw_bóc⁄öô
(
ah
, 
√xâbâ
, 
ötvÆ
);

454 
sc
->
bóc⁄
.
bmiss˙t
 = 0;

455 
	`©h9k_hw_£t_öãºu±s
(
ah
);

456 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

457 
	}
}

464 
	$©h9k_bóc⁄_c⁄fig_≠
(
©h_so·c
 *
sc
,

465 
©h_bóc⁄_c⁄fig
 *
c⁄f
)

467 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

469 
	`©h9k_cmn_bóc⁄_c⁄fig_≠
(
ah
, 
c⁄f
, 
ATH_BCBUF
);

470 
	`©h9k_bóc⁄_öô
(
sc
, 
c⁄f
->
√xâbâ
, c⁄f->
ötvÆ
, 
Ál£
);

471 
	}
}

473 
	$©h9k_bóc⁄_c⁄fig_°a
(
©h_hw
 *
ah
,

474 
©h_bóc⁄_c⁄fig
 *
c⁄f
)

476 
©h9k_bóc⁄_°©e
 
bs
;

478 i‡(
	`©h9k_cmn_bóc⁄_c⁄fig_°a
(
ah
, 
c⁄f
, &
bs
Ë=-
EPERM
)

481 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

482 
	`©h9k_hw_£t_°a_bóc⁄_timîs
(
ah
, &
bs
);

483 
ah
->
imask
 |
ATH9K_INT_BMISS
;

485 
	`©h9k_hw_£t_öãºu±s
(
ah
);

486 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

487 
	}
}

489 
	$©h9k_bóc⁄_c⁄fig_adhoc
(
©h_so·c
 *
sc
,

490 
©h_bóc⁄_c⁄fig
 *
c⁄f
)

492 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

493 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

495 
	`©h9k_ª£t_bóc⁄_°©us
(
sc
);

497 
	`©h9k_cmn_bóc⁄_c⁄fig_adhoc
(
ah
, 
c⁄f
);

499 
	`©h9k_bóc⁄_öô
(
sc
, 
c⁄f
->
√xâbâ
, c⁄f->
ötvÆ
, c⁄f->
ibss_¸ót‹
);

505 i‡(!
c⁄f
->
ibss_¸ót‹
 && c⁄f->
íabÀ_bóc⁄
)

506 
	`£t_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
);

507 
	}
}

509 
boﬁ
 
	$©h9k_Ælow_bóc⁄_c⁄fig
(
©h_so·c
 *
sc
,

510 
õì80211_vif
 *
vif
)

512 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

513 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

515 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

522 i‡(
sc
->
cur_ch™
 !
avp
->
ch™˘x
)

523  
åue
;

526 i‡(
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_AP
) {

527 i‡(
vif
->
ty≥
 !
NL80211_IFTYPE_AP
) {

528 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

530  
Ál£
;

534 i‡(
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_STATION
) {

535 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_STATION
) &&

536 
	`ã°_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
) &&

537 
vif
 !
sc
->
cur_ch™
->
¥im¨y_°a
) {

538 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

540  
Ál£
;

544  
åue
;

545 
	}
}

547 
	$©h9k_ˇche_bóc⁄_c⁄fig
(
©h_so·c
 *
sc
,

548 
©h_ch™˘x
 *
˘x
,

549 
õì80211_bss_c⁄f
 *
bss_c⁄f
)

551 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

552 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
˘x
->
bóc⁄
;

554 
	`©h_dbg
(
comm⁄
, 
BEACON
,

555 "Cachög bóc⁄ d©®f‹ BSS: %pM\n", 
bss_c⁄f
->
bssid
);

557 
cur_c⁄f
->
bóc⁄_öãrvÆ
 = 
bss_c⁄f
->
bóc⁄_öt
;

558 
cur_c⁄f
->
dtim_≥riod
 = 
bss_c⁄f
->dtim_period;

559 
cur_c⁄f
->
dtim_cou¡
 = 1;

560 
cur_c⁄f
->
ibss_¸ót‹
 = 
bss_c⁄f
->ibss_creator;

568 i‡(
cur_c⁄f
->
bóc⁄_öãrvÆ
 == 0)

569 
cur_c⁄f
->
bóc⁄_öãrvÆ
 = 100;

571 
cur_c⁄f
->
bmiss_timeout
 =

572 
ATH_DEFAULT_BMISS_LIMIT
 * 
cur_c⁄f
->
bóc⁄_öãrvÆ
;

579 i‡(
cur_c⁄f
->
dtim_≥riod
 == 0)

580 
cur_c⁄f
->
dtim_≥riod
 = 1;

582 
	}
}

584 
	$©h9k_bóc⁄_c⁄fig
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
,

585 
u32
 
ch™ged
)

587 
õì80211_bss_c⁄f
 *
bss_c⁄f
 = &
vif
->bss_conf;

588 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

589 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

590 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

591 
©h_ch™˘x
 *
˘x
 = 
avp
->
ch™˘x
;

592 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
;

593 
Êags
;

594 
boﬁ
 
skù_bóc⁄
 = 
Ál£
;

596 i‡(!
˘x
)

599 
cur_c⁄f
 = &
avp
->
ch™˘x
->
bóc⁄
;

600 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_AP
)

601 
	`©h9k_£t_tsÁdju°
(
sc
, 
vif
);

603 i‡(!
	`©h9k_Ælow_bóc⁄_c⁄fig
(
sc
, 
vif
))

606 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_STATION
) {

607 
	`©h9k_ˇche_bóc⁄_c⁄fig
(
sc
, 
˘x
, 
bss_c⁄f
);

608 i‡(
˘x
 !
sc
->
cur_ch™
)

611 
	`©h9k_£t_bóc⁄
(
sc
);

612 
	`£t_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
);

620 i‡(
ch™ged
 & 
BSS_CHANGED_BEACON_ENABLED
) {

621 
boﬁ
 
íabÀd
 = 
cur_c⁄f
->
íabÀ_bóc⁄
;

623 i‡(!
bss_c⁄f
->
íabÀ_bóc⁄
) {

624 
cur_c⁄f
->
íabÀ_bóc⁄
 &~
	`BIT
(
avp
->
av_b¶Ÿ
);

626 
cur_c⁄f
->
íabÀ_bóc⁄
 |
	`BIT
(
avp
->
av_b¶Ÿ
);

627 i‡(!
íabÀd
)

628 
	`©h9k_ˇche_bóc⁄_c⁄fig
(
sc
, 
˘x
, 
bss_c⁄f
);

632 i‡(
˘x
 !
sc
->
cur_ch™
)

639 i‡(
cur_c⁄f
->
bóc⁄_öãrvÆ
) {

645 i‡((
ch™ged
 & 
BSS_CHANGED_IBSS
Ë&& !
bss_c⁄f
->
ibss_¸ót‹
 &&

646 
bss_c⁄f
->
íabÀ_bóc⁄
) {

647 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

648 
sc
->
ps_Êags
 |
PS_BEACON_SYNC
 | 
PS_WAIT_FOR_BEACON
;

649 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

650 
skù_bóc⁄
 = 
åue
;

652 
	`©h9k_£t_bóc⁄
(
sc
);

659 i‡(
cur_c⁄f
->
íabÀ_bóc⁄
 && !
skù_bóc⁄
)

660 
	`£t_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
);

662 
	`˛ór_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
);

664 
	}
}

666 
	$©h9k_£t_bóc⁄
(
©h_so·c
 *
sc
)

668 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

669 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

671 
sc
->
sc_ah
->
›mode
) {

672 
NL80211_IFTYPE_AP
:

673 
NL80211_IFTYPE_MESH_POINT
:

674 
	`©h9k_bóc⁄_c⁄fig_≠
(
sc
, 
cur_c⁄f
);

676 
NL80211_IFTYPE_ADHOC
:

677 
	`©h9k_bóc⁄_c⁄fig_adhoc
(
sc
, 
cur_c⁄f
);

679 
NL80211_IFTYPE_STATION
:

680 
	`©h9k_bóc⁄_c⁄fig_°a
(
sc
->
sc_ah
, 
cur_c⁄f
);

683 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Unsupported beaconing mode\n");

686 
	}
}

	@btcoex.c

17 
	~<löux/exp‹t.h
>

18 
	~"hw.h
"

20 
	e©h_bt_mode
 {

21 
	mATH_BT_COEX_MODE_LEGACY
,

22 
	mATH_BT_COEX_MODE_UNSLOTTED
,

23 
	mATH_BT_COEX_MODE_SLOTTED
,

24 
	mATH_BT_COEX_MODE_DISABLED
,

27 
	s©h_btc€x_c⁄fig
 {

28 
u8
 
	mbt_time_exãnd
;

29 
boﬁ
 
	mbt_tx°©e_exãnd
;

30 
boﬁ
 
	mbt_tx‰ame_exãnd
;

31 
©h_bt_mode
 
	mbt_mode
;

32 
boﬁ
 
	mbt_quõt_cﬁlisi⁄
;

33 
boﬁ
 
	mbt_rx˛ór_pﬁ¨ôy
;

34 
u8
 
	mbt_¥i‹ôy_time
;

35 
u8
 
	mbt_fú°_¶Ÿ_time
;

36 
boﬁ
 
	mbt_hﬁd_rx_˛ór
;

39 c⁄° 
u32
 
	g¨9003_wœn_weights
[
ATH_BTCOEX_STOMP_MAX
]

40 [
AR9300_NUM_WLAN_WEIGHTS
] = {

46 c⁄° 
u32
 
	gmci_wœn_weights
[
ATH_BTCOEX_STOMP_MAX
]

47 [
AR9300_NUM_WLAN_WEIGHTS
] = {

55 
	$©h9k_hw_öô_btc€x_hw
(
©h_hw
 *
ah
, 
qnum
)

57 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

58 c⁄° 
©h_btc€x_c⁄fig
 
©h_bt_c⁄fig
 = {

59 .
bt_time_exãnd
 = 0,

60 .
bt_tx°©e_exãnd
 = 
åue
,

61 .
bt_tx‰ame_exãnd
 = 
åue
,

62 .
bt_mode
 = 
ATH_BT_COEX_MODE_SLOTTED
,

63 .
bt_quõt_cﬁlisi⁄
 = 
åue
,

64 .
bt_rx˛ór_pﬁ¨ôy
 = 
åue
,

65 .
bt_¥i‹ôy_time
 = 2,

66 .
bt_fú°_¶Ÿ_time
 = 5,

67 .
bt_hﬁd_rx_˛ór
 = 
åue
,

69 
boﬁ
 
rx˛ór_pﬁ¨ôy
 = 
©h_bt_c⁄fig
.
bt_rx˛ór_pﬁ¨ôy
;

71 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

72 
rx˛ór_pﬁ¨ôy
 = !
©h_bt_c⁄fig
.
bt_rx˛ór_pﬁ¨ôy
;

74 
btc€x_hw
->
bt_c€x_mode
 =

75 (
btc€x_hw
->
bt_c€x_mode
 & 
AR_BT_QCU_THRESH
) |

76 
	`SM
(
©h_bt_c⁄fig
.
bt_time_exãnd
, 
AR_BT_TIME_EXTEND
) |

77 
	`SM
(
©h_bt_c⁄fig
.
bt_tx°©e_exãnd
, 
AR_BT_TXSTATE_EXTEND
) |

78 
	`SM
(
©h_bt_c⁄fig
.
bt_tx‰ame_exãnd
, 
AR_BT_TX_FRAME_EXTEND
) |

79 
	`SM
(
©h_bt_c⁄fig
.
bt_mode
, 
AR_BT_MODE
) |

80 
	`SM
(
©h_bt_c⁄fig
.
bt_quõt_cﬁlisi⁄
, 
AR_BT_QUIET
) |

81 
	`SM
(
rx˛ór_pﬁ¨ôy
, 
AR_BT_RX_CLEAR_POLARITY
) |

82 
	`SM
(
©h_bt_c⁄fig
.
bt_¥i‹ôy_time
, 
AR_BT_PRIORITY_TIME
) |

83 
	`SM
(
©h_bt_c⁄fig
.
bt_fú°_¶Ÿ_time
, 
AR_BT_FIRST_SLOT_TIME
) |

84 
	`SM
(
qnum
, 
AR_BT_QCU_THRESH
);

86 
btc€x_hw
->
bt_c€x_mode2
 =

87 
	`SM
(
©h_bt_c⁄fig
.
bt_hﬁd_rx_˛ór
, 
AR_BT_HOLD_RX_CLEAR
) |

88 
	`SM
(
ATH_BTCOEX_BMISS_THRESH
, 
AR_BT_BCN_MISS_THRESH
) |

89 
AR_BT_DISABLE_BT_ANT
;

90 
	}
}

91 
EXPORT_SYMBOL
(
©h9k_hw_öô_btc€x_hw
);

93 
	$©h9k_hw_btc€x_öô_scheme
(
©h_hw
 *
ah
)

95 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

96 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

101 i‡(!
comm⁄
->
btc€x_íabÀd
) {

102 
btc€x_hw
->
scheme
 = 
ATH_BTCOEX_CFG_NONE
;

106 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
) {

107 
btc€x_hw
->
scheme
 = 
ATH_BTCOEX_CFG_MCI
;

108 } i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

109 
btc€x_hw
->
scheme
 = 
ATH_BTCOEX_CFG_3WIRE
;

110 
btc€x_hw
->
bè˘ive_gpio
 = 
ATH_BTACTIVE_GPIO_9300
;

111 
btc€x_hw
->
wœ«˘ive_gpio
 = 
ATH_WLANACTIVE_GPIO_9300
;

112 
btc€x_hw
->
bçri‹ôy_gpio
 = 
ATH_BTPRIORITY_GPIO_9300
;

113 } i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

114 
btc€x_hw
->
bè˘ive_gpio
 = 
ATH_BTACTIVE_GPIO_9280
;

115 
btc€x_hw
->
wœ«˘ive_gpio
 = 
ATH_WLANACTIVE_GPIO_9280
;

117 i‡(
	`AR_SREV_9285
(
ah
)) {

118 
btc€x_hw
->
scheme
 = 
ATH_BTCOEX_CFG_3WIRE
;

119 
btc€x_hw
->
bçri‹ôy_gpio
 = 
ATH_BTPRIORITY_GPIO_9285
;

121 
btc€x_hw
->
scheme
 = 
ATH_BTCOEX_CFG_2WIRE
;

124 
	}
}

125 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_öô_scheme
);

127 
	$©h9k_hw_btc€x_öô_2wúe
(
©h_hw
 *
ah
)

129 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

132 
	`REG_CLR_BIT
(
ah
, 
AR_GPIO_INPUT_EN_VAL
,

133 (
AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_DEF
 |

134 
AR_GPIO_INPUT_EN_VAL_BT_FREQUENCY_DEF
));

136 
	`REG_SET_BIT
(
ah
, 
AR_GPIO_INPUT_EN_VAL
,

137 
AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_BB
);

140 
	`REG_RMW_FIELD
(
ah
, 
AR_GPIO_INPUT_MUX1
,

141 
AR_GPIO_INPUT_MUX1_BT_ACTIVE
,

142 
btc€x_hw
->
bè˘ive_gpio
);

145 
	`©h9k_hw_cfg_gpio_öput
(
ah
, 
btc€x_hw
->
bè˘ive_gpio
);

146 
	}
}

147 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_öô_2wúe
);

149 
	$©h9k_hw_btc€x_öô_3wúe
(
©h_hw
 *
ah
)

151 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

154 
	`REG_SET_BIT
(
ah
, 
AR_GPIO_INPUT_EN_VAL
,

155 (
AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_BB
 |

156 
AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_BB
));

160 
	`REG_RMW_FIELD
(
ah
, 
AR_GPIO_INPUT_MUX1
,

161 
AR_GPIO_INPUT_MUX1_BT_ACTIVE
,

162 
btc€x_hw
->
bè˘ive_gpio
);

164 
	`REG_RMW_FIELD
(
ah
, 
AR_GPIO_INPUT_MUX1
,

165 
AR_GPIO_INPUT_MUX1_BT_PRIORITY
,

166 
btc€x_hw
->
bçri‹ôy_gpio
);

170 
	`©h9k_hw_cfg_gpio_öput
(
ah
, 
btc€x_hw
->
bè˘ive_gpio
);

171 
	`©h9k_hw_cfg_gpio_öput
(
ah
, 
btc€x_hw
->
bçri‹ôy_gpio
);

172 
	}
}

173 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_öô_3wúe
);

175 
	$©h9k_hw_btc€x_öô_mci
(
©h_hw
 *
ah
)

177 
ah
->
btc€x_hw
.
mci
.
ªady
 = 
Ál£
;

178 
ah
->
btc€x_hw
.
mci
.
bt_°©e
 = 0;

179 
ah
->
btc€x_hw
.
mci
.
bt_vî_maj‹
 = 3;

180 
ah
->
btc€x_hw
.
mci
.
bt_vî_mö‹
 = 0;

181 
ah
->
btc€x_hw
.
mci
.
bt_vîsi⁄_known
 = 
Ál£
;

182 
ah
->
btc€x_hw
.
mci
.
upd©e_2g5g
 = 
åue
;

183 
ah
->
btc€x_hw
.
mci
.
is_2g
 = 
åue
;

184 
ah
->
btc€x_hw
.
mci
.
wœn_ch™√ls_upd©e
 = 
Ál£
;

185 
ah
->
btc€x_hw
.
mci
.
wœn_ch™√ls
[0] = 0x00000000;

186 
ah
->
btc€x_hw
.
mci
.
wœn_ch™√ls
[1] = 0xffffffff;

187 
ah
->
btc€x_hw
.
mci
.
wœn_ch™√ls
[2] = 0xffffffff;

188 
ah
->
btc€x_hw
.
mci
.
wœn_ch™√ls
[3] = 0x7fffffff;

189 
ah
->
btc€x_hw
.
mci
.
quîy_bt
 = 
åue
;

190 
ah
->
btc€x_hw
.
mci
.
unhÆt_bt_gpm
 = 
åue
;

191 
ah
->
btc€x_hw
.
mci
.
hÆãd_bt_gpm
 = 
Ál£
;

192 
ah
->
btc€x_hw
.
mci
.
√ed_Êush_btöfo
 = 
Ál£
;

193 
ah
->
btc€x_hw
.
mci
.
wœn_ˇl_£q
 = 0;

194 
ah
->
btc€x_hw
.
mci
.
wœn_ˇl_d⁄e
 = 0;

195 
ah
->
btc€x_hw
.
mci
.
c⁄fig
 = (
	`AR_SREV_9462
(ah)) ? 0x2201 : 0xa4c1;

196 
	}
}

197 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_öô_mci
);

199 
	$©h9k_hw_btc€x_íabÀ_2wúe
(
©h_hw
 *
ah
)

201 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

204 
	`©h9k_hw_cfg_ouçut
(
ah
, 
btc€x_hw
->
wœ«˘ive_gpio
,

205 
AR_GPIO_OUTPUT_MUX_AS_TX_FRAME
);

206 
	}
}

212 
	$©h9k_hw_btc€x_£t_weight
(
©h_hw
 *
ah
,

213 
u32
 
bt_weight
,

214 
u32
 
wœn_weight
,

215 
©h_°omp_ty≥
 
°omp_ty≥
)

217 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

218 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

219 
u8
 
tx¥io_shi·
[] = { 24, 16, 16, 0 };

220 
boﬁ
 
c⁄cur_tx
 = (
mci_hw
->c⁄cur_tx && 
btc€x_hw
->
tx_¥io
[
°omp_ty≥
]);

221 c⁄° 
u32
 *
weight
 = 
¨9003_wœn_weights
[
°omp_ty≥
];

222 
i
;

224 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

225 
btc€x_hw
->
bt_c€x_weights
 =

226 
	`SM
(
bt_weight
, 
AR_BTCOEX_BT_WGHT
) |

227 
	`SM
(
wœn_weight
, 
AR_BTCOEX_WL_WGHT
);

231 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

232 
©h_°omp_ty≥
 
°y≥
 =

233 ((
°omp_ty≥
 =
ATH_BTCOEX_STOMP_LOW
) &&

234 
btc€x_hw
->
mci
.
°omp_·p
) ?

235 
ATH_BTCOEX_STOMP_LOW_FTP
 : 
°omp_ty≥
;

236 
weight
 = 
mci_wœn_weights
[
°y≥
];

239 
i
 = 0; i < 
AR9300_NUM_WLAN_WEIGHTS
; i++) {

240 
btc€x_hw
->
bt_weight
[
i
] = 
AR9300_BT_WGHT
;

241 
btc€x_hw
->
wœn_weight
[
i
] = 
weight
[i];

242 i‡(
c⁄cur_tx
 && 
i
) {

243 
btc€x_hw
->
wœn_weight
[
i
] &=

244 ~(0xf‡<< 
tx¥io_shi·
[
i
-1]);

245 
btc€x_hw
->
wœn_weight
[
i
] |=

246 (
btc€x_hw
->
tx_¥io
[
°omp_ty≥
] <<

247 
tx¥io_shi·
[
i
-1]);

251 i‡(
c⁄cur_tx
) {

252 
btc€x_hw
->
wœn_weight
[
i
-1] &~(0xf‡<< 
tx¥io_shi·
[i-1]);

253 
btc€x_hw
->
wœn_weight
[
i
-1] |(btc€x_hw->
tx_¥io
[
°omp_ty≥
]

254 << 
tx¥io_shi·
[
i
-1]);

257 
	}
}

258 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_£t_weight
);

261 
	$©h9k_hw_btc€x_íabÀ_3wúe
(
©h_hw
 *
ah
)

263 
©h_btc€x_hw
 *
btc€x
 = &
ah
->
btc€x_hw
;

264 
u32
 
vÆ
;

265 
i
;

271 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_MODE
, 
btc€x
->
bt_c€x_mode
);

272 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_MODE2
, 
btc€x
->
bt_c€x_mode2
);

275 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

276 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_WL_WEIGHTS0
, 
btc€x
->
wœn_weight
[0]);

277 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_WL_WEIGHTS1
, 
btc€x
->
wœn_weight
[1]);

278 
i
 = 0; i < 
AR9300_NUM_BT_WEIGHTS
; i++)

279 
	`REG_WRITE
(
ah
, 
	`AR_BT_COEX_BT_WEIGHTS
(
i
),

280 
btc€x
->
bt_weight
[
i
]);

282 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_WEIGHT
, 
btc€x
->
bt_c€x_weights
);

286 i‡(
	`AR_SREV_9271
(
ah
)) {

287 
vÆ
 = 
	`REG_READ
(
ah
, 0x50040);

288 
vÆ
 &= 0xFFFFFEFF;

289 
	`REG_WRITE
(
ah
, 0x50040, 
vÆ
);

292 
	`REG_RMW_FIELD
(
ah
, 
AR_QUIET1
, 
AR_QUIET1_QUIET_ACK_CTS_ENABLE
, 1);

293 
	`REG_RMW_FIELD
(
ah
, 
AR_PCU_MISC
, 
AR_PCU_BT_ANT_PREVENT_RX
, 0);

295 
	`©h9k_hw_cfg_ouçut
(
ah
, 
btc€x
->
wœ«˘ive_gpio
,

296 
AR_GPIO_OUTPUT_MUX_AS_RX_CLEAR_EXTERNAL
);

297 
	}
}

299 
	$©h9k_hw_btc€x_íabÀ_mci
(
©h_hw
 *
ah
)

301 
©h_btc€x_hw
 *
btc€x
 = &
ah
->
btc€x_hw
;

302 
i
;

304 
i
 = 0; i < 
AR9300_NUM_BT_WEIGHTS
; i++)

305 
	`REG_WRITE
(
ah
, 
	`AR_MCI_COEX_WL_WEIGHTS
(
i
),

306 
btc€x
->
wœn_weight
[
i
]);

308 
	`REG_RMW_FIELD
(
ah
, 
AR_QUIET1
, 
AR_QUIET1_QUIET_ACK_CTS_ENABLE
, 1);

309 
btc€x
->
íabÀd
 = 
åue
;

310 
	}
}

312 
	$©h9k_hw_btc€x_dißbÀ_mci
(
©h_hw
 *
ah
)

314 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

315 
i
;

317 
	`©h9k_hw_btc€x_bt_°omp
(
ah
, 
ATH_BTCOEX_STOMP_NONE
);

319 
i
 = 0; i < 
AR9300_NUM_BT_WEIGHTS
; i++)

320 
	`REG_WRITE
(
ah
, 
	`AR_MCI_COEX_WL_WEIGHTS
(
i
),

321 
btc€x_hw
->
wœn_weight
[
i
]);

322 
	}
}

324 
	$©h9k_hw_btc€x_íabÀ
(
©h_hw
 *
ah
)

326 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

328 
	`©h9k_hw_gë_btc€x_scheme
(
ah
)) {

329 
ATH_BTCOEX_CFG_NONE
:

331 
ATH_BTCOEX_CFG_2WIRE
:

332 
	`©h9k_hw_btc€x_íabÀ_2wúe
(
ah
);

334 
ATH_BTCOEX_CFG_3WIRE
:

335 
	`©h9k_hw_btc€x_íabÀ_3wúe
(
ah
);

337 
ATH_BTCOEX_CFG_MCI
:

338 
	`©h9k_hw_btc€x_íabÀ_mci
(
ah
);

342 i‡(
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_MCI
) {

343 
	`REG_RMW
(
ah
, 
AR_GPIO_PDPU
,

344 (0x2 << (
btc€x_hw
->
bè˘ive_gpio
 * 2)),

345 (0x3 << (
btc€x_hw
->
bè˘ive_gpio
 * 2)));

348 
ah
->
btc€x_hw
.
íabÀd
 = 
åue
;

349 
	}
}

350 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_íabÀ
);

352 
	$©h9k_hw_btc€x_dißbÀ
(
©h_hw
 *
ah
)

354 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

355 
i
;

357 
btc€x_hw
->
íabÀd
 = 
Ál£
;

359 i‡(
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë=
ATH_BTCOEX_CFG_MCI
) {

360 
	`©h9k_hw_btc€x_dißbÀ_mci
(
ah
);

364 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

365 
	`©h9k_hw_£t_gpio
(
ah
, 
btc€x_hw
->
wœ«˘ive_gpio
, 0);

367 
	`©h9k_hw_cfg_ouçut
(
ah
, 
btc€x_hw
->
wœ«˘ive_gpio
,

368 
AR_GPIO_OUTPUT_MUX_AS_OUTPUT
);

370 i‡(
btc€x_hw
->
scheme
 =
ATH_BTCOEX_CFG_3WIRE
) {

371 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_MODE
, 
AR_BT_QUIET
 | 
AR_BT_MODE
);

372 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_MODE2
, 0);

374 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

375 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_WL_WEIGHTS0
, 0);

376 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_WL_WEIGHTS1
, 0);

377 
i
 = 0; i < 
AR9300_NUM_BT_WEIGHTS
; i++)

378 
	`REG_WRITE
(
ah
, 
	`AR_BT_COEX_BT_WEIGHTS
(
i
), 0);

380 
	`REG_WRITE
(
ah
, 
AR_BT_COEX_WEIGHT
, 0);

383 
	}
}

384 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_dißbÀ
);

389 
	$©h9k_hw_btc€x_bt_°omp
(
©h_hw
 *
ah
,

390 
©h_°omp_ty≥
 
°omp_ty≥
)

392 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

393 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 0, 0, 
°omp_ty≥
);

397 
°omp_ty≥
) {

398 
ATH_BTCOEX_STOMP_ALL
:

399 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 
AR_BT_COEX_WGHT
,

400 
AR_STOMP_ALL_WLAN_WGHT
, 0);

402 
ATH_BTCOEX_STOMP_LOW
:

403 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 
AR_BT_COEX_WGHT
,

404 
AR_STOMP_LOW_WLAN_WGHT
, 0);

406 
ATH_BTCOEX_STOMP_NONE
:

407 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 
AR_BT_COEX_WGHT
,

408 
AR_STOMP_NONE_WLAN_WGHT
, 0);

411 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BTCOEX
, "Invalid Stomptype\n");

414 
	}
}

415 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_bt_°omp
);

417 
	$©h9k_hw_btc€x_£t_c⁄cur_tx¥io
(
©h_hw
 *
ah
, 
u8
 *
°omp_tx¥io
)

419 
©h_btc€x_hw
 *
btc€x
 = &
ah
->
btc€x_hw
;

420 
i
;

422 
i
 = 0; i < 
ATH_BTCOEX_STOMP_MAX
; i++)

423 
btc€x
->
tx_¥io
[
i
] = 
°omp_tx¥io
[i];

424 
	}
}

425 
EXPORT_SYMBOL
(
©h9k_hw_btc€x_£t_c⁄cur_tx¥io
);

	@btcoex.h

17 #i‚de‡
BTCOEX_H


18 
	#BTCOEX_H


	)

20 
	~"hw.h
"

22 
	#ATH_WLANACTIVE_GPIO_9280
 5

	)

23 
	#ATH_BTACTIVE_GPIO_9280
 6

	)

24 
	#ATH_BTPRIORITY_GPIO_9285
 7

	)

26 
	#ATH_WLANACTIVE_GPIO_9300
 5

	)

27 
	#ATH_BTACTIVE_GPIO_9300
 4

	)

28 
	#ATH_BTPRIORITY_GPIO_9300
 8

	)

30 
	#ATH_BTCOEX_DEF_BT_PERIOD
 45

	)

31 
	#ATH_BTCOEX_DEF_DUTY_CYCLE
 55

	)

32 
	#ATH_BTCOEX_BTSCAN_DUTY_CYCLE
 90

	)

33 
	#ATH_BTCOEX_BMISS_THRESH
 50

	)

35 
	#ATH_BT_PRIORITY_TIME_THRESHOLD
 1000

	)

36 
	#ATH_BT_CNT_THRESHOLD
 3

	)

37 
	#ATH_BT_CNT_SCAN_THRESHOLD
 15

	)

39 
	#ATH_BTCOEX_RX_WAIT_TIME
 100

	)

40 
	#ATH_BTCOEX_STOMP_FTP_THRESH
 5

	)

42 
	#ATH_BTCOEX_HT20_MAX_TXPOWER
 0x14

	)

43 
	#ATH_BTCOEX_HT40_MAX_TXPOWER
 0x10

	)

45 
	#AR9300_NUM_BT_WEIGHTS
 4

	)

46 
	#AR9300_NUM_WLAN_WEIGHTS
 4

	)

48 
	#ATH_AIC_MAX_BT_CHANNEL
 79

	)

51 
	e©h_°omp_ty≥
 {

52 
	mATH_BTCOEX_STOMP_ALL
,

53 
	mATH_BTCOEX_STOMP_LOW
,

54 
	mATH_BTCOEX_STOMP_NONE
,

55 
	mATH_BTCOEX_STOMP_LOW_FTP
,

56 
	mATH_BTCOEX_STOMP_AUDIO
,

57 
	mATH_BTCOEX_STOMP_MAX


60 
	e©h_btc€x_scheme
 {

61 
	mATH_BTCOEX_CFG_NONE
,

62 
	mATH_BTCOEX_CFG_2WIRE
,

63 
	mATH_BTCOEX_CFG_3WIRE
,

64 
	mATH_BTCOEX_CFG_MCI
,

67 
	s©h9k_hw_mci
 {

68 
u32
 
	møw_öå
;

69 
u32
 
	mrx_msg_öå
;

70 
u32
 
	mc⁄t_°©us
;

71 
u32
 
	mgpm_addr
;

72 
u32
 
	mgpm_Àn
;

73 
u32
 
	mgpm_idx
;

74 
u32
 
	msched_addr
;

75 
u32
 
	mwœn_ch™√ls
[4];

76 
u32
 
	mwœn_ˇl_£q
;

77 
u32
 
	mwœn_ˇl_d⁄e
;

78 
u32
 
	mc⁄fig
;

79 
u8
 *
	mgpm_buf
;

80 
boﬁ
 
	mªady
;

81 
boﬁ
 
	mupd©e_2g5g
;

82 
boﬁ
 
	mis_2g
;

83 
boﬁ
 
	mquîy_bt
;

84 
boﬁ
 
	munhÆt_bt_gpm
;

85 
boﬁ
 
	mhÆãd_bt_gpm
;

86 
boﬁ
 
	m√ed_Êush_btöfo
;

87 
boﬁ
 
	mbt_vîsi⁄_known
;

88 
boﬁ
 
	mwœn_ch™√ls_upd©e
;

89 
u8
 
	mwœn_vî_maj‹
;

90 
u8
 
	mwœn_vî_mö‹
;

91 
u8
 
	mbt_vî_maj‹
;

92 
u8
 
	mbt_vî_mö‹
;

93 
u8
 
	mbt_°©e
;

94 
u8
 
	m°omp_·p
;

95 
boﬁ
 
	mc⁄cur_tx
;

96 
u32
 
	mœ°_ªcovîy
;

99 
	s©h9k_hw_aic
 {

100 
boﬁ
 
	maic_íabÀd
;

101 
u8
 
	maic_ˇl_°©e
;

102 
u8
 
	maic_ˇÀd_ch™
;

103 
u32
 
	maic_§am
[
ATH_AIC_MAX_BT_CHANNEL
];

104 
u32
 
	maic_ˇl_°¨t_time
;

107 
	s©h_btc€x_hw
 {

108 
©h_btc€x_scheme
 
	mscheme
;

109 
©h9k_hw_mci
 
	mmci
;

110 
©h9k_hw_aic
 
	maic
;

111 
boﬁ
 
	míabÀd
;

112 
u8
 
	mwœ«˘ive_gpio
;

113 
u8
 
	mbè˘ive_gpio
;

114 
u8
 
	mbçri‹ôy_gpio
;

115 
u32
 
	mbt_c€x_mode
;

116 
u32
 
	mbt_c€x_weights
;

117 
u32
 
	mbt_c€x_mode2
;

118 
u32
 
	mbt_weight
[
AR9300_NUM_BT_WEIGHTS
];

119 
u32
 
	mwœn_weight
[
AR9300_NUM_WLAN_WEIGHTS
];

120 
u8
 
	mtx_¥io
[
ATH_BTCOEX_STOMP_MAX
];

123 
©h9k_hw_btc€x_öô_scheme
(
©h_hw
 *
ah
);

124 
©h9k_hw_btc€x_öô_2wúe
(
©h_hw
 *
ah
);

125 
©h9k_hw_btc€x_öô_3wúe
(
©h_hw
 *
ah
);

126 
©h9k_hw_btc€x_öô_mci
(
©h_hw
 *
ah
);

127 
©h9k_hw_öô_btc€x_hw
(
©h_hw
 *
ah
, 
qnum
);

128 
©h9k_hw_btc€x_£t_weight
(
©h_hw
 *
ah
,

129 
u32
 
bt_weight
,

130 
u32
 
wœn_weight
,

131 
©h_°omp_ty≥
 
°omp_ty≥
);

132 
©h9k_hw_btc€x_dißbÀ
(
©h_hw
 *
ah
);

133 
©h9k_hw_btc€x_bt_°omp
(
©h_hw
 *
ah
,

134 
©h_°omp_ty≥
 
°omp_ty≥
);

135 
©h9k_hw_btc€x_£t_c⁄cur_tx¥io
(
©h_hw
 *
ah
, 
u8
 *
°omp_tx¥io
);

	@calib.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~<löux/exp‹t.h
>

24 
öt16_t
 
	$©h9k_hw_gë_nf_hi°_mid
(
öt16_t
 *
nfCÆBuf„r
)

26 
öt16_t
 
nfvÆ
;

27 
öt16_t
 
s‹t
[
ATH9K_NF_CAL_HIST_MAX
];

28 
i
, 
j
;

30 
i
 = 0; i < 
ATH9K_NF_CAL_HIST_MAX
; i++)

31 
s‹t
[
i
] = 
nfCÆBuf„r
[i];

33 
i
 = 0; i < 
ATH9K_NF_CAL_HIST_MAX
 - 1; i++) {

34 
j
 = 1; j < 
ATH9K_NF_CAL_HIST_MAX
 - 
i
; j++) {

35 i‡(
s‹t
[
j
] > sort[j - 1]) {

36 
nfvÆ
 = 
s‹t
[
j
];

37 
s‹t
[
j
] = sort[j - 1];

38 
s‹t
[
j
 - 1] = 
nfvÆ
;

42 
nfvÆ
 = 
s‹t
[(
ATH9K_NF_CAL_HIST_MAX
 - 1) >> 1];

44  
nfvÆ
;

45 
	}
}

47 
©h_nf_limôs
 *
	$©h9k_hw_gë_nf_limôs
(
©h_hw
 *
ah
,

48 
©h9k_ch™√l
 *
ch™
)

50 
©h_nf_limôs
 *
limô
;

52 i‡(!
ch™
 || 
	`IS_CHAN_2GHZ
(chan))

53 
limô
 = &
ah
->
nf_2g
;

55 
limô
 = &
ah
->
nf_5g
;

57  
limô
;

58 
	}
}

60 
s16
 
	$©h9k_hw_gë_deÁu…_nf
(
©h_hw
 *
ah
,

61 
©h9k_ch™√l
 *
ch™
)

63  
	`©h9k_hw_gë_nf_limôs
(
ah
, 
ch™
)->
nomöÆ
;

64 
	}
}

66 
s16
 
	$©h9k_hw_gëch™_noi£
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

67 
s16
 
nf
)

69 
s8
 
noi£
 = 
ATH_DEFAULT_NOISE_FLOOR
;

71 i‡(
nf
) {

72 
s8
 
dñè
 = 
nf
 - 
ATH9K_NF_CAL_NOISE_THRESH
 -

73 
	`©h9k_hw_gë_deÁu…_nf
(
ah
, 
ch™
);

74 i‡(
dñè
 > 0)

75 
noi£
 +
dñè
;

77  
noi£
;

78 
	}
}

79 
EXPORT_SYMBOL
(
©h9k_hw_gëch™_noi£
);

81 
	$©h9k_hw_upd©e_nfˇl_hi°_buf„r
(
©h_hw
 *
ah
,

82 
©h9k_hw_ˇl_d©a
 *
ˇl
,

83 
öt16_t
 *
nÁºay
)

85 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

86 
©h_nf_limôs
 *
limô
;

87 
©h9k_nfˇl_hi°
 *
h
;

88 
boﬁ
 
high_nf_mid
 = 
Ál£
;

89 
u8
 
chaömask
 = (
ah
->
rxchaömask
 << 3) |áh->rxchainmask;

90 
i
;

92 
h
 = 
ˇl
->
nfCÆHi°
;

93 
limô
 = 
	`©h9k_hw_gë_nf_limôs
(
ah
,áh->
curch™
);

95 
i
 = 0; i < 
NUM_NF_READINGS
; i++) {

96 i‡(!(
chaömask
 & (1 << 
i
)) ||

97 ((
i
 >
AR5416_MAX_CHAINS
Ë&& !
	`IS_CHAN_HT40
(
ah
->
curch™
)))

100 
h
[
i
].
nfCÆBuf„r
[h[i].
cuºIndex
] = 
nÁºay
[i];

102 i‡(++
h
[
i
].
cuºIndex
 >
ATH9K_NF_CAL_HIST_MAX
)

103 
h
[
i
].
cuºIndex
 = 0;

105 i‡(
h
[
i
].
övÆidNFcou¡
 > 0) {

106 
h
[
i
].
övÆidNFcou¡
--;

107 
h
[
i
].
¥ivNF
 = 
nÁºay
[i];

109 
h
[
i
].
¥ivNF
 =

110 
	`©h9k_hw_gë_nf_hi°_mid
(
h
[
i
].
nfCÆBuf„r
);

113 i‡(!
h
[
i
].
¥ivNF
)

116 i‡(
h
[
i
].
¥ivNF
 > 
limô
->
max
) {

117 
high_nf_mid
 = 
åue
;

119 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

121 
i
, 
h
[i].
¥ivNF
, 
limô
->
max
,

122 (
	`ã°_bô
(
NFCAL_INTF
, &
ˇl
->
ˇl_Êags
) ?

133 i‡(!
	`ã°_bô
(
NFCAL_INTF
, &
ˇl
->
ˇl_Êags
))

134 
h
[
i
].
¥ivNF
 = 
limô
->
max
;

143 i‡(!
high_nf_mid
)

144 
	`˛ór_bô
(
NFCAL_INTF
, &
ˇl
->
ˇl_Êags
);

145 
	}
}

147 
boﬁ
 
	$©h9k_hw_gë_nf_thªsh
(
©h_hw
 *
ah
,

148 
õì80211_b™d
 
b™d
,

149 
öt16_t
 *
n·
)

151 
b™d
) {

152 
IEEE80211_BAND_5GHZ
:

153 *
n·
 = (
öt8_t
)
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_NFTHRESH_5
);

155 
IEEE80211_BAND_2GHZ
:

156 *
n·
 = (
öt8_t
)
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_NFTHRESH_2
);

159 
	`BUG_ON
(1);

160  
Ál£
;

163  
åue
;

164 
	}
}

166 
	$©h9k_hw_ª£t_ˇlibøti⁄
(
©h_hw
 *
ah
,

167 
©h9k_ˇl_li°
 *
cuºCÆ
)

169 
i
;

171 
	`©h9k_hw_£tup_ˇlibøti⁄
(
ah
, 
cuºCÆ
);

173 
cuºCÆ
->
ˇlSèã
 = 
CAL_RUNNING
;

175 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

176 
ah
->
mós0
.
sign
[
i
] = 0;

177 
ah
->
mós1
.
sign
[
i
] = 0;

178 
ah
->
mós2
.
sign
[
i
] = 0;

179 
ah
->
mós3
.
sign
[
i
] = 0;

182 
ah
->
ˇl_ßm∂es
 = 0;

183 
	}
}

186 
boﬁ
 
	$©h9k_hw_ª£t_ˇlvÆid
(
©h_hw
 *
ah
)

188 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

189 
©h9k_ˇl_li°
 *
cuºCÆ
 = 
ah
->
ˇl_li°_cuº
;

191 i‡(!
ah
->
ˇld©a
)

192  
åue
;

194 i‡(!
	`AR_SREV_9100
(
ah
Ë&& !
	`AR_SREV_9160_10_OR_LATER
(ah))

195  
åue
;

197 i‡(
cuºCÆ
 =
NULL
)

198  
åue
;

200 i‡(
cuºCÆ
->
ˇlSèã
 !
CAL_DONE
) {

201 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Calibration state incorrect, %d\n",

202 
cuºCÆ
->
ˇlSèã
);

203  
åue
;

206 i‡(!(
ah
->
suµ_ˇls
 & 
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
))

207  
åue
;

209 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Resetting Cal %d state for channel %u\n",

210 
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
, 
ah
->
curch™
->
ch™
->
˚¡î_‰eq
);

212 
ah
->
ˇld©a
->
CÆVÆid
 &~
cuºCÆ
->
ˇlD©a
->
ˇlTy≥
;

213 
cuºCÆ
->
ˇlSèã
 = 
CAL_WAITING
;

215  
Ál£
;

216 
	}
}

217 
EXPORT_SYMBOL
(
©h9k_hw_ª£t_ˇlvÆid
);

219 
	$©h9k_hw_°¨t_nfˇl
(
©h_hw
 *
ah
, 
boﬁ
 
upd©e
)

221 i‡(
ah
->
ˇld©a
)

222 
	`£t_bô
(
NFCAL_PENDING
, &
ah
->
ˇld©a
->
ˇl_Êags
);

224 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

225 
AR_PHY_AGC_CONTROL_ENABLE_NF
);

227 i‡(
upd©e
)

228 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

229 
AR_PHY_AGC_CONTROL_NO_UPDATE_NF
);

231 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

232 
AR_PHY_AGC_CONTROL_NO_UPDATE_NF
);

234 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_NF
);

235 
	}
}

237 
	$©h9k_hw_lﬂdnf
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

239 
©h9k_nfˇl_hi°
 *
h
 = 
NULL
;

240 
i
, 
j
;

241 
u8
 
chaömask
 = (
ah
->
rxchaömask
 << 3) |áh->rxchainmask;

242 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

243 
s16
 
deÁu…_nf
 = 
	`©h9k_hw_gë_deÁu…_nf
(
ah
, 
ch™
);

245 i‡(
ah
->
ˇld©a
)

246 
h
 = 
ah
->
ˇld©a
->
nfCÆHi°
;

248 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

249 
i
 = 0; i < 
NUM_NF_READINGS
; i++) {

250 i‡(
chaömask
 & (1 << 
i
)) {

251 
s16
 
nfvÆ
;

253 i‡((
i
 >
AR5416_MAX_CHAINS
Ë&& !
	`IS_CHAN_HT40
(
ch™
))

256 i‡(
h
)

257 
nfvÆ
 = 
h
[
i
].
¥ivNF
;

259 
nfvÆ
 = 
deÁu…_nf
;

261 
	`REG_RMW
(
ah
,áh->
nf_ªgs
[
i
],

262 (((
u32
Ë
nfvÆ
 << 1) & 0x1ff), 0x1ff);

270 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

271 
AR_PHY_AGC_CONTROL_ENABLE_NF
);

272 
	`REG_CLR_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
,

273 
AR_PHY_AGC_CONTROL_NO_UPDATE_NF
);

274 
	`REG_SET_BIT
(
ah
, 
AR_PHY_AGC_CONTROL
, 
AR_PHY_AGC_CONTROL_NF
);

275 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

283 
j
 = 0; j < 10000; j++) {

284 i‡((
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
) &

285 
AR_PHY_AGC_CONTROL_NF
) == 0)

287 
	`udñay
(10);

299 i‡(
j
 == 10000) {

300 
	`©h_dbg
(
comm⁄
, 
ANY
,

302 
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
));

303  -
ETIMEDOUT
;

311 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

312 
i
 = 0; i < 
NUM_NF_READINGS
; i++) {

313 i‡(
chaömask
 & (1 << 
i
)) {

314 i‡((
i
 >
AR5416_MAX_CHAINS
Ë&& !
	`IS_CHAN_HT40
(
ch™
))

317 
	`REG_RMW
(
ah
,áh->
nf_ªgs
[
i
],

318 (((
u32
) (-50) << 1) & 0x1ff), 0x1ff);

321 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

324 
	}
}

327 
	$©h9k_hw_nf_ßnôize
(
©h_hw
 *
ah
, 
s16
 *
nf
)

329 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

330 
©h_nf_limôs
 *
limô
;

331 
i
;

333 i‡(
	`IS_CHAN_2GHZ
(
ah
->
curch™
))

334 
limô
 = &
ah
->
nf_2g
;

336 
limô
 = &
ah
->
nf_5g
;

338 
i
 = 0; i < 
NUM_NF_READINGS
; i++) {

339 i‡(!
nf
[
i
])

342 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

344 (
i
 >3 ? "ext" : "˘l"), i % 3, 
nf
[i]);

346 i‡(
nf
[
i
] > 
limô
->
max
) {

347 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

349 
i
, 
nf
[i], 
limô
->
max
);

350 
nf
[
i
] = 
limô
->
max
;

351 } i‡(
nf
[
i
] < 
limô
->
mö
) {

352 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

354 
i
, 
nf
[i], 
limô
->
mö
);

355 
nf
[
i
] = 
limô
->
nomöÆ
;

358 
	}
}

360 
boﬁ
 
	$©h9k_hw_gënf
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

362 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

363 
öt16_t
 
nf
, 
nfThªsh
;

364 
öt16_t
 
nÁºay
[
NUM_NF_READINGS
] = { 0 };

365 
©h9k_nfˇl_hi°
 *
h
;

366 
õì80211_ch™√l
 *
c
 = 
ch™
->chan;

367 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

369 i‡(
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
Ë& 
AR_PHY_AGC_CONTROL_NF
) {

370 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

372  
Ál£
;

375 
	`©h9k_hw_do_gënf
(
ah
, 
nÁºay
);

376 
	`©h9k_hw_nf_ßnôize
(
ah
, 
nÁºay
);

377 
nf
 = 
nÁºay
[0];

378 i‡(
	`©h9k_hw_gë_nf_thªsh
(
ah
, 
c
->
b™d
, &
nfThªsh
)

379 && 
nf
 > 
nfThªsh
) {

380 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

382 
nf
, 
nfThªsh
);

385 i‡(!
ˇld©a
) {

386 
ch™
->
noi£Êo‹
 = 
nf
;

387  
Ál£
;

390 
h
 = 
ˇld©a
->
nfCÆHi°
;

391 
	`˛ór_bô
(
NFCAL_PENDING
, &
ˇld©a
->
ˇl_Êags
);

392 
	`©h9k_hw_upd©e_nfˇl_hi°_buf„r
(
ah
, 
ˇld©a
, 
nÁºay
);

393 
ch™
->
noi£Êo‹
 = 
h
[0].
¥ivNF
;

394 
ah
->
noi£
 = 
	`©h9k_hw_gëch™_noi£
◊h, 
ch™
, ch™->
noi£Êo‹
);

395  
åue
;

396 
	}
}

397 
EXPORT_SYMBOL
(
©h9k_hw_gënf
);

399 
	$©h9k_öô_nfˇl_hi°_buf„r
(
©h_hw
 *
ah
,

400 
©h9k_ch™√l
 *
ch™
)

402 
©h9k_nfˇl_hi°
 *
h
;

403 
s16
 
deÁu…_nf
;

404 
i
, 
j
;

406 
ah
->
ˇld©a
->
ch™√l
 = 
ch™
->channel;

407 
ah
->
ˇld©a
->
ch™√lFœgs
 = 
ch™
->channelFlags;

408 
h
 = 
ah
->
ˇld©a
->
nfCÆHi°
;

409 
deÁu…_nf
 = 
	`©h9k_hw_gë_deÁu…_nf
(
ah
, 
ch™
);

410 
i
 = 0; i < 
NUM_NF_READINGS
; i++) {

411 
h
[
i
].
cuºIndex
 = 0;

412 
h
[
i
].
¥ivNF
 = 
deÁu…_nf
;

413 
h
[
i
].
övÆidNFcou¡
 = 
AR_PHY_CCA_FILTERWINDOW_LENGTH
;

414 
j
 = 0; j < 
ATH9K_NF_CAL_HIST_MAX
; j++) {

415 
h
[
i
].
nfCÆBuf„r
[
j
] = 
deÁu…_nf
;

418 
	}
}

421 
	$©h9k_hw_b°uck_nfˇl
(
©h_hw
 *
ah
)

423 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

425 i‡(
	`u∆ikñy
(!
ˇld©a
))

436 i‡(!
	`ã°_bô
(
NFCAL_PENDING
, &
ˇld©a
->
ˇl_Êags
))

437 
	`©h9k_hw_°¨t_nfˇl
(
ah
, 
åue
);

438 i‡(!(
	`REG_READ
(
ah
, 
AR_PHY_AGC_CONTROL
Ë& 
AR_PHY_AGC_CONTROL_NF
))

439 
	`©h9k_hw_gënf
(
ah
,áh->
curch™
);

441 
	`£t_bô
(
NFCAL_INTF
, &
ˇld©a
->
ˇl_Êags
);

442 
	}
}

443 
EXPORT_SYMBOL
(
©h9k_hw_b°uck_nfˇl
);

	@calib.h

17 #i‚de‡
CALIB_H


18 
	#CALIB_H


	)

20 
	~"hw.h
"

22 
	#AR_PHY_CCA_FILTERWINDOW_LENGTH
 5

	)

25 
	#ATH9K_NF_CAL_NOISE_THRESH
 6

	)

27 
	#NUM_NF_READINGS
 6

	)

28 
	#ATH9K_NF_CAL_HIST_MAX
 5

	)

30 
	s¨5416IniAºay
 {

31 
u32
 *
	mü_¨øy
;

32 
u32
 
	mü_rows
;

33 
u32
 
	mü_cﬁumns
;

36 
	#STATIC_INI_ARRAY
(
¨øy
) { \

37 .
ü_¨øy
 = (
u32
 *)(
¨øy
), \

38 .
ü_rows
 = 
	`ARRAY_SIZE
(
¨øy
), \

39 .
ü_cﬁumns
 = 
	`ARRAY_SIZE
(
¨øy
[0]), \

40 }

	)

42 
	#INIT_INI_ARRAY
(
öüºay
, 
¨øy
) do { \

43 (
öüºay
)->
ü_¨øy
 = (
u32
 *)(
¨øy
); \

44 (
öüºay
)->
ü_rows
 = 
	`ARRAY_SIZE
(
¨øy
); \

45 (
öüºay
)->
ü_cﬁumns
 = 
	`ARRAY_SIZE
(
¨øy
[0]); \

46 } 0)

	)

48 
	#INI_RA
(
öüºay
, 
row
, 
cﬁumn
) \

49 (((
öüºay
)->
ü_¨øy
)[(
row
Ë* ((öüºay)->
ü_cﬁumns
Ë+ (
cﬁumn
)])

	)

51 
	#INIT_CAL
(
_≥rCÆ
) do { \

52 (
_≥rCÆ
)->
ˇlSèã
 = 
CAL_WAITING
; \

53 (
_≥rCÆ
)->
ˇlNext
 = 
NULL
; \

54 } 0)

	)

56 
	#INSERT_CAL
(
_ahp
, 
_≥rCÆ
) \

58 i‡((
_ahp
)->
ˇl_li°_œ°
 =
NULL
) { \

59 (
_ahp
)->
ˇl_li°
 = \

60 (
_ahp
)->
ˇl_li°_œ°
 = (
_≥rCÆ
); \

61 ((
_ahp
)->
ˇl_li°_œ°
)->
ˇlNext
 = (
_≥rCÆ
); \

63 ((
_ahp
)->
ˇl_li°_œ°
)->
ˇlNext
 = (
_≥rCÆ
); \

64 (
_ahp
)->
ˇl_li°_œ°
 = (
_≥rCÆ
); \

65 (
_≥rCÆ
)->
ˇlNext
 = (
_ahp
)->
ˇl_li°
; \

67 } 0)

	)

69 
	e©h9k_ˇl_°©e
 {

70 
	mCAL_INACTIVE
,

71 
	mCAL_WAITING
,

72 
	mCAL_RUNNING
,

73 
	mCAL_DONE


76 
	#MIN_CAL_SAMPLES
 1

	)

77 
	#MAX_CAL_SAMPLES
 64

	)

78 
	#INIT_LOG_COUNT
 5

	)

79 
	#PER_MIN_LOG_COUNT
 2

	)

80 
	#PER_MAX_LOG_COUNT
 10

	)

82 
	s©h9k_≥rˇl_d©a
 {

83 
u32
 
	mˇlTy≥
;

84 
u32
 
	mˇlNumSam∂es
;

85 
u32
 
	mˇlCou¡Max
;

86 (*
	mˇlCﬁÀ˘
Ë(
	m©h_hw
 *);

87 (*
	mˇlPo°Proc
Ë(
	m©h_hw
 *, 
	mu8
);

90 
	s©h9k_ˇl_li°
 {

91 c⁄° 
©h9k_≥rˇl_d©a
 *
	mˇlD©a
;

92 
©h9k_ˇl_°©e
 
	mˇlSèã
;

93 
©h9k_ˇl_li°
 *
	mˇlNext
;

96 
	s©h9k_nfˇl_hi°
 {

97 
öt16_t
 
	mnfCÆBuf„r
[
ATH9K_NF_CAL_HIST_MAX
];

98 
u8
 
	mcuºIndex
;

99 
öt16_t
 
	m¥ivNF
;

100 
u8
 
	mövÆidNFcou¡
;

103 
	#MAX_PACAL_SKIPCOUNT
 8

	)

104 
	s©h9k_∑ˇl_öfo
{

105 
öt32_t
 
	m¥ev_off£t
;

106 
öt8_t
 
	mmax_skùcou¡
;

107 
öt8_t
 
	mskùcou¡
;

110 
boﬁ
 
©h9k_hw_ª£t_ˇlvÆid
(
©h_hw
 *
ah
);

111 
©h9k_hw_°¨t_nfˇl
(
©h_hw
 *
ah
, 
boﬁ
 
upd©e
);

112 
©h9k_hw_lﬂdnf
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

113 
boﬁ
 
©h9k_hw_gënf
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

114 
©h9k_öô_nfˇl_hi°_buf„r
(
©h_hw
 *
ah
,

115 
©h9k_ch™√l
 *
ch™
);

116 
©h9k_hw_b°uck_nfˇl
(
©h_hw
 *
ah
);

117 
©h9k_hw_ª£t_ˇlibøti⁄
(
©h_hw
 *
ah
,

118 
©h9k_ˇl_li°
 *
cuºCÆ
);

119 
s16
 
©h9k_hw_gëch™_noi£
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

120 
s16
 
nf
);

	@channel.c

17 
	~"©h9k.h
"

23 
	$©h_£t_ch™√l
(
©h_so·c
 *
sc
)

25 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

26 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

27 
õì80211_hw
 *
hw
 = 
sc
->hw;

28 
©h9k_ch™√l
 *
hch™
;

29 
cfg80211_ch™_def
 *
ch™def
 = &
sc
->
cur_ch™
->chandef;

30 
õì80211_ch™√l
 *
ch™
 = 
ch™def
->chan;

31 
pos
 = 
ch™
->
hw_vÆue
;

32 
ﬁd_pos
 = -1;

33 
r
;

35 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
))

36  -
EIO
;

38 i‡(
ah
->
curch™
)

39 
ﬁd_pos
 = 
ah
->
curch™
 - &ah->
ch™√ls
[0];

41 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Set channel: %d MHz width: %d\n",

42 
ch™
->
˚¡î_‰eq
, 
ch™def
->
width
);

45 
	`•ö_lock_bh
(&
comm⁄
->
cc_lock
);

46 
	`©h_upd©e_survey_°©s
(
sc
);

47 
	`•ö_u∆ock_bh
(&
comm⁄
->
cc_lock
);

49 
	`©h9k_cmn_gë_ch™√l
(
hw
, 
ah
, 
ch™def
);

56 i‡(!
sc
->
cur_ch™
->
offch™√l
 && sc->
cur_survey
 !&sc->
survey
[
pos
]) {

57 i‡(
sc
->
cur_survey
)

58 
sc
->
cur_survey
->
fûÀd
 &~
SURVEY_INFO_IN_USE
;

60 
sc
->
cur_survey
 = &sc->
survey
[
pos
];

62 
	`mem£t
(
sc
->
cur_survey
, 0, (
survey_öfo
));

63 
sc
->
cur_survey
->
fûÀd
 |
SURVEY_INFO_IN_USE
;

64 } i‡(!(
sc
->
survey
[
pos
].
fûÀd
 & 
SURVEY_INFO_IN_USE
)) {

65 
	`mem£t
(&
sc
->
survey
[
pos
], 0, (
survey_öfo
));

68 
hch™
 = &
sc
->
sc_ah
->
ch™√ls
[
pos
];

69 
r
 = 
	`©h_ª£t
(
sc
, 
hch™
);

70 i‡(
r
)

71  
r
;

77 i‡(
ﬁd_pos
 >= 0)

78 
	`©h_upd©e_survey_nf
(
sc
, 
ﬁd_pos
);

83 i‡(
hw
->
c⁄f
.
ød¨_íabÀd
) {

84 
u32
 
rxfûãr
;

86 
rxfûãr
 = 
	`©h9k_hw_gërxfûãr
(
ah
);

87 
rxfûãr
 |
ATH9K_RX_FILTER_PHYRADAR
 |

88 
ATH9K_RX_FILTER_PHYERR
;

89 
	`©h9k_hw_£åxfûãr
(
ah
, 
rxfûãr
);

90 
	`©h_dbg
(
comm⁄
, 
DFS
, "DFSÉnabledát freq %d\n",

91 
ch™
->
˚¡î_‰eq
);

94 i‡(
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
) &&

95 
sc
->
•ec_¥iv
.
•e˘øl_mode
 =
SPECTRAL_CHANSCAN
)

96 
	`©h9k_cmn_•e˘øl_sˇn_åiggî
(
comm⁄
, &
sc
->
•ec_¥iv
);

100 
	}
}

102 
	$©h_ch™˘x_öô
(
©h_so·c
 *
sc
)

104 
©h_ch™˘x
 *
˘x
;

105 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

106 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

107 
õì80211_ch™√l
 *
ch™
;

108 
i
, 
j
;

110 
sb™d
 = &
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
];

111 i‡(!
sb™d
->
n_ch™√ls
)

112 
sb™d
 = &
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
];

114 
ch™
 = &
sb™d
->
ch™√ls
[0];

115 
i
 = 0; i < 
ATH9K_NUM_CHANCTX
; i++) {

116 
˘x
 = &
sc
->
ch™˘x
[
i
];

117 
	`cfg80211_ch™def_¸óã
(&
˘x
->
ch™def
, 
ch™
, 
NL80211_CHAN_HT20
);

118 
	`INIT_LIST_HEAD
(&
˘x
->
vifs
);

119 
˘x
->
txpowî
 = 
ATH_TXPOWER_MAX
;

120 
˘x
->
Êush_timeout
 = 
HZ
 / 5;

121 
j
 = 0; j < 
	`ARRAY_SIZE
(
˘x
->
acq
); j++)

122 
	`INIT_LIST_HEAD
(&
˘x
->
acq
[
j
]);

124 
	}
}

126 
	$©h_ch™˘x_£t_ch™√l
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
,

127 
cfg80211_ch™_def
 *
ch™def
)

129 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

130 
boﬁ
 
cur_ch™
;

132 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

133 i‡(
ch™def
)

134 
	`mem˝y
(&
˘x
->
ch™def
, chandef, (*chandef));

135 
cur_ch™
 = 
sc
->cur_ch™ =
˘x
;

136 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

138 i‡(!
cur_ch™
) {

139 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

144 
	`©h_£t_ch™√l
(
sc
);

145 
	}
}

147 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


153 
©h_ch™˘x
* 
	$©h_is_go_ch™˘x_¥e£¡
(
©h_so·c
 *
sc
)

155 
©h_ch™˘x
 *
˘x
;

156 
©h_vif
 *
avp
;

157 
õì80211_vif
 *
vif
;

159 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

161 
	`©h_f‹_óch_ch™˘x
(
sc
, 
˘x
) {

162 i‡(!
˘x
->
a˘ive
)

165 
	`li°_f‹_óch_íåy
(
avp
, &
˘x
->
vifs
, 
li°
) {

166 
vif
 = 
avp
->vif;

168 i‡(
	`õì80211_vif_ty≥_p2p
(
vif
Ë=
NL80211_IFTYPE_P2P_GO
) {

169 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

170  
˘x
;

175 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

176  
NULL
;

177 
	}
}

183 c⁄° *
	$offch™√l_°©e_°rög
(
©h_offch™√l_°©e
 
°©e
)

185 
°©e
) {

186 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_IDLE
);

187 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_PROBE_SEND
);

188 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_PROBE_WAIT
);

189 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_SUSPEND
);

190 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_ROC_START
);

191 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_ROC_WAIT
);

192 
	`ˇ£_πn_°rög
(
ATH_OFFCHANNEL_ROC_DONE
);

196 
	}
}

198 c⁄° *
	$ch™˘x_evít_°rög
(
©h_ch™˘x_evít
 
ev
)

200 
ev
) {

201 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_BEACON_PREPARE
);

202 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_BEACON_SENT
);

203 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_TSF_TIMER
);

204 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_BEACON_RECEIVED
);

205 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_AUTHORIZED
);

206 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_SWITCH
);

207 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_ASSIGN
);

208 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_UNASSIGN
);

209 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_CHANGE
);

210 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL
);

214 
	}
}

216 c⁄° *
	$ch™˘x_°©e_°rög
(
©h_ch™˘x_°©e
 
°©e
)

218 
°©e
) {

219 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_STATE_IDLE
);

220 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
);

221 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_STATE_WAIT_FOR_TIMER
);

222 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_STATE_SWITCH
);

223 
	`ˇ£_πn_°rög
(
ATH_CHANCTX_STATE_FORCE_ACTIVE
);

227 
	}
}

229 
	$©h_ch™˘x_check_a˘ive
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
)

231 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

232 
©h_ch™˘x
 *
i˘x
;

233 
©h_vif
 *
avp
;

234 
boﬁ
 
a˘ive
 = 
Ál£
;

235 
u8
 
n_a˘ive
 = 0;

237 i‡(!
˘x
)

240 i‡(
˘x
 =&
sc
->
offch™√l
.
ch™
) {

241 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

243 i‡(
	`likñy
(
sc
->
sched
.
ch™√l_swôch_time
))

244 
˘x
->
Êush_timeout
 =

245 
	`u£cs_to_jiffõs
(
sc
->
sched
.
ch™√l_swôch_time
);

247 
˘x
->
Êush_timeout
 =

248 
	`m£cs_to_jiffõs
(10);

250 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

260 
i˘x
 = 
˘x
;

262 
	`li°_f‹_óch_íåy
(
avp
, &
˘x
->
vifs
, 
li°
) {

263 
õì80211_vif
 *
vif
 = 
avp
->vif;

265 
vif
->
ty≥
) {

266 
NL80211_IFTYPE_P2P_CLIENT
:

267 
NL80211_IFTYPE_STATION
:

268 i‡(
avp
->
assoc
)

269 
a˘ive
 = 
åue
;

272 
a˘ive
 = 
åue
;

276 
˘x
->
a˘ive
 =áctive;

278 
	`©h_f‹_óch_ch™˘x
(
sc
, 
˘x
) {

279 i‡(!
˘x
->
assig√d
 || 
	`li°_em±y
(&˘x->
vifs
))

281 
n_a˘ive
++;

284 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

286 i‡(
n_a˘ive
 <= 1) {

287 
i˘x
->
Êush_timeout
 = 
HZ
 / 5;

288 
	`˛ór_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
);

289 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

293 
i˘x
->
Êush_timeout
 = 
	`u£cs_to_jiffõs
(
sc
->
sched
.
ch™√l_swôch_time
);

295 i‡(
	`ã°_™d_£t_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
)) {

296 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

300 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

302 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

303 
	`©h_ch™˘x_evít
(
sc
, 
NULL
,

304 
ATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL
);

306 
	}
}

308 
©h_ch™˘x
 *

309 
	$©h_ch™˘x_gë_√xt
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
)

311 
idx
 = 
˘x
 - &
sc
->
ch™˘x
[0];

313  &
sc
->
ch™˘x
[!
idx
];

314 
	}
}

316 
	$©h_ch™˘x_adju°_tbâ_dñè
(
©h_so·c
 *
sc
)

318 
©h_ch™˘x
 *
¥ev
, *
cur
;

319 
time•ec
 
ts
;

320 
u32
 
cur_tsf
, 
¥ev_tsf
, 
bóc⁄_öt
;

321 
s32
 
off£t
;

323 
bóc⁄_öt
 = 
	`TU_TO_USEC
(
sc
->
cur_ch™
->
bóc⁄
.
bóc⁄_öãrvÆ
);

325 
cur
 = 
sc
->
cur_ch™
;

326 
¥ev
 = 
	`©h_ch™˘x_gë_√xt
(
sc
, 
cur
);

328 i‡(!
¥ev
->
swôch_a·î_bóc⁄
)

331 
	`gëøwm⁄Ÿ⁄ic
(&
ts
);

332 
cur_tsf
 = (
u32
Ë
cur
->
tsf_vÆ
 +

333 
	`©h9k_hw_gë_tsf_off£t
(&
cur
->
tsf_ts
, &
ts
);

335 
¥ev_tsf
 = 
¥ev
->
œ°_bóc⁄
 - (
u32
Ë¥ev->
tsf_vÆ
 + 
cur_tsf
;

336 
¥ev_tsf
 -
	`©h9k_hw_gë_tsf_off£t
(&
¥ev
->
tsf_ts
, &
ts
);

341 
off£t
 = 
cur_tsf
 - 
¥ev_tsf
;

344 i‡(
off£t
 < 0 || off£à> 3 * 
bóc⁄_öt
)

347 
off£t
 = 
bóc⁄_öt
 / 2 - (offset % beacon_int);

348 
¥ev
->
tsf_vÆ
 +
off£t
;

349 
	}
}

355 
	$©h_ch™˘x_£tup_timî
(
©h_so·c
 *
sc
, 
u32
 
tsf_time
)

357 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

358 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

360 
	`©h9k_hw_gí_timî_°¨t
(
ah
, 
sc
->
p2p_ps_timî
, 
tsf_time
, 1000000);

361 
tsf_time
 -
	`©h9k_hw_gëtsf32
(
ah
);

362 
tsf_time
 = 
	`m£cs_to_jiffõs
(tsf_time / 1000) + 1;

363 
	`mod_timî
(&
sc
->
sched
.
timî
, 
jiffõs
 + 
tsf_time
);

365 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

366 "Sëu∞ch™˘xÅimî wôhÅimeout: %d ms\n", 
	`jiffõs_to_m£cs
(
tsf_time
));

367 
	}
}

369 
	$©h_ch™˘x_h™dÀ_bmiss
(
©h_so·c
 *
sc
,

370 
©h_ch™˘x
 *
˘x
,

371 
©h_vif
 *
avp
)

379 i‡(
˘x
->
a˘ive
 && 
sc
->
sched
.
exãnd_ab£n˚
) {

380 
avp
->
nﬂ_duøti⁄
 = 0;

381 
sc
->
sched
.
exãnd_ab£n˚
 = 
Ál£
;

388 i‡(
˘x
->
a˘ive
 && 
sc
->
sched
.
bóc⁄_miss
 >= 2) {

389 
avp
->
nﬂ_duøti⁄
 = 0;

390 
sc
->
sched
.
exãnd_ab£n˚
 = 
åue
;

392 
	}
}

394 
	$©h_ch™˘x_offch™√l_nﬂ
(
©h_so·c
 *
sc
,

395 
©h_ch™˘x
 *
˘x
,

396 
©h_vif
 *
avp
,

397 
u32
 
tsf_time
)

399 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

401 
avp
->
nﬂ_ödex
++;

402 
avp
->
offch™√l_°¨t
 = 
tsf_time
;

403 
avp
->
offch™√l_duøti⁄
 = 
sc
->
sched
.offchannel_duration;

405 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

407 
avp
->
offch™√l_duøti⁄
,

408 
avp
->
offch™√l_°¨t
,

409 
avp
->
nﬂ_ödex
);

416 i‡(
˘x
->
a˘ive
 && 
avp
->
nﬂ_duøti⁄
)

417 
avp
->
nﬂ_duøti⁄
 = 0;

418 
	}
}

420 
	$©h_ch™˘x_£t_≥riodic_nﬂ
(
©h_so·c
 *
sc
,

421 
©h_vif
 *
avp
,

422 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
,

423 
u32
 
tsf_time
,

424 
u32
 
bóc⁄_öt
)

426 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

428 
avp
->
nﬂ_ödex
++;

429 
avp
->
nﬂ_°¨t
 = 
tsf_time
;

431 i‡(
sc
->
sched
.
exãnd_ab£n˚
)

432 
avp
->
nﬂ_duøti⁄
 = (3 * 
bóc⁄_öt
 / 2) +

433 
sc
->
sched
.
ch™√l_swôch_time
;

435 
avp
->
nﬂ_duøti⁄
 =

436 
	`TU_TO_USEC
(
cur_c⁄f
->
bóc⁄_öãrvÆ
) / 2 +

437 
sc
->
sched
.
ch™√l_swôch_time
;

439 i‡(
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
) ||

440 
sc
->
sched
.
exãnd_ab£n˚
)

441 
avp
->
≥riodic_nﬂ
 = 
Ál£
;

443 
avp
->
≥riodic_nﬂ
 = 
åue
;

445 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

447 
avp
->
nﬂ_duøti⁄
,

448 
avp
->
nﬂ_°¨t
,

449 
avp
->
nﬂ_ödex
,

450 
avp
->
≥riodic_nﬂ
);

451 
	}
}

453 
	$©h_ch™˘x_£t_⁄eshŸ_nﬂ
(
©h_so·c
 *
sc
,

454 
©h_vif
 *
avp
,

455 
u32
 
tsf_time
,

456 
u32
 
duøti⁄
)

458 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

460 
avp
->
nﬂ_ödex
++;

461 
avp
->
nﬂ_°¨t
 = 
tsf_time
;

462 
avp
->
≥riodic_nﬂ
 = 
Ál£
;

463 
avp
->
⁄eshŸ_nﬂ
 = 
åue
;

464 
avp
->
nﬂ_duøti⁄
 = 
duøti⁄
 + 
sc
->
sched
.
ch™√l_swôch_time
;

466 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

468 
avp
->
nﬂ_duøti⁄
,

469 
avp
->
nﬂ_°¨t
,

470 
avp
->
nﬂ_ödex
,

471 
avp
->
≥riodic_nﬂ
);

472 
	}
}

474 
	$©h_ch™˘x_evít
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
,

475 
©h_ch™˘x_evít
 
ev
)

477 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

478 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

479 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
;

480 
©h_vif
 *
avp
 = 
NULL
;

481 
©h_ch™˘x
 *
˘x
;

482 
u32
 
tsf_time
;

483 
u32
 
bóc⁄_öt
;

485 i‡(
vif
)

486 
avp
 = (
©h_vif
 *Ë
vif
->
drv_¥iv
;

488 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

490 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "cur_chan: %d MHz,Évent: %s, state: %s\n",

491 
sc
->
cur_ch™
->
ch™def
.
˚¡î_‰eq1
,

492 
	`ch™˘x_evít_°rög
(
ev
),

493 
	`ch™˘x_°©e_°rög
(
sc
->
sched
.
°©e
));

495 
ev
) {

496 
ATH_CHANCTX_EVENT_BEACON_PREPARE
:

497 i‡(
avp
->
offch™√l_duøti⁄
)

498 
avp
->
offch™√l_duøti⁄
 = 0;

500 i‡(
avp
->
⁄eshŸ_nﬂ
) {

501 
avp
->
nﬂ_duøti⁄
 = 0;

502 
avp
->
⁄eshŸ_nﬂ
 = 
Ál£
;

504 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

508 i‡(
avp
->
ch™˘x
 !
sc
->
cur_ch™
) {

509 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

514 i‡(
sc
->
sched
.
offch™√l_≥ndög
 && !sc->sched.
waô_swôch
) {

515 
sc
->
sched
.
offch™√l_≥ndög
 = 
Ál£
;

516 
sc
->
√xt_ch™
 = &sc->
offch™√l
.
ch™
;

517 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
;

518 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

522 
˘x
 = 
	`©h_ch™˘x_gë_√xt
(
sc
, sc->
cur_ch™
);

523 i‡(
˘x
->
a˘ive
 && 
sc
->
sched
.
°©e
 =
ATH_CHANCTX_STATE_IDLE
) {

524 
sc
->
√xt_ch™
 = 
˘x
;

525 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
;

526 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

531 i‡(
sc
->
sched
.
°©e
 =
ATH_CHANCTX_STATE_WAIT_FOR_TIMER
) {

532 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
;

533 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

537 i‡(
sc
->
sched
.
mgd_¥ï¨e_tx
)

538 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
;

546 i‡(!
˘x
->
a˘ive
 && 
avp
->
nﬂ_duøti⁄
 &&

547 
sc
->
sched
.
°©e
 !
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
) {

548 
avp
->
nﬂ_duøti⁄
 = 0;

549 
avp
->
≥riodic_nﬂ
 = 
Ál£
;

551 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

555 i‡(
sc
->
sched
.
°©e
 !
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
)

558 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "Pª∑rög bóc⁄ f‹ vif: %pM\n", 
vif
->
addr
);

560 
sc
->
sched
.
bóc⁄_≥ndög
 = 
åue
;

561 
sc
->
sched
.
√xt_tbâ
 = 
	`REG_READ
(
ah
, 
AR_NEXT_TBTT_TIMER
);

563 
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

564 
bóc⁄_öt
 = 
	`TU_TO_USEC
(
cur_c⁄f
->
bóc⁄_öãrvÆ
);

567 
tsf_time
 = 
sc
->
sched
.
√xt_tbâ
 + 
bóc⁄_öt
 / 4;

568 
sc
->
sched
.
swôch_°¨t_time
 = 
tsf_time
;

569 
sc
->
cur_ch™
->
œ°_bóc⁄
 = sc->
sched
.
√xt_tbâ
;

576 i‡(
sc
->
√xt_ch™
 =&sc->
offch™√l
.
ch™
) {

577 
	`©h_ch™˘x_offch™√l_nﬂ
(
sc
, 
˘x
, 
avp
, 
tsf_time
);

581 
	`©h_ch™˘x_h™dÀ_bmiss
(
sc
, 
˘x
, 
avp
);

589 i‡(
sc
->
sched
.
mgd_¥ï¨e_tx
) {

590 
	`©h_ch™˘x_£t_⁄eshŸ_nﬂ
(
sc
, 
avp
, 
tsf_time
,

591 
	`jiffõs_to_u£cs
(
HZ
 / 5));

596 i‡(
avp
->
nﬂ_duøti⁄
 && 
tsf_time
 -ávp->
nﬂ_°¨t
 > 
	`BIT
(30))

597 
avp
->
nﬂ_duøti⁄
 = 0;

604 i‡(
˘x
->
a˘ive
 &&

605 (!
avp
->
nﬂ_duøti⁄
 || 
sc
->
sched
.
f‹˚_nﬂ_upd©e
))

606 
	`©h_ch™˘x_£t_≥riodic_nﬂ
(
sc
, 
avp
, 
cur_c⁄f
,

607 
tsf_time
, 
bóc⁄_öt
);

609 i‡(
˘x
->
a˘ive
 && 
sc
->
sched
.
f‹˚_nﬂ_upd©e
)

610 
sc
->
sched
.
f‹˚_nﬂ_upd©e
 = 
Ál£
;

613 
ATH_CHANCTX_EVENT_BEACON_SENT
:

614 i‡(!
sc
->
sched
.
bóc⁄_≥ndög
) {

615 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

620 
sc
->
sched
.
bóc⁄_≥ndög
 = 
Ál£
;

622 i‡(
sc
->
sched
.
mgd_¥ï¨e_tx
) {

623 
sc
->
sched
.
mgd_¥ï¨e_tx
 = 
Ál£
;

624 
	`com∂ëe
(&
sc
->
go_bóc⁄
);

625 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

630 i‡(
sc
->
sched
.
°©e
 !
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
)

633 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

636 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_TIMER
;

637 
	`©h_ch™˘x_£tup_timî
(
sc
, sc->
sched
.
swôch_°¨t_time
);

639 
ATH_CHANCTX_EVENT_TSF_TIMER
:

640 i‡(
sc
->
sched
.
°©e
 !
ATH_CHANCTX_STATE_WAIT_FOR_TIMER
)

643 i‡(!
sc
->
cur_ch™
->
swôch_a·î_bóc⁄
 &&

644 
sc
->
sched
.
bóc⁄_≥ndög
)

645 
sc
->
sched
.
bóc⁄_miss
++;

647 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

650 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_SWITCH
;

651 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
ch™˘x_w‹k
);

653 
ATH_CHANCTX_EVENT_BEACON_RECEIVED
:

654 i‡(!
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
) ||

655 
sc
->
cur_ch™
 =&sc->
offch™√l
.
ch™
)

658 
sc
->
sched
.
bóc⁄_≥ndög
 = 
Ál£
;

659 
sc
->
sched
.
bóc⁄_miss
 = 0;

661 i‡(
sc
->
sched
.
°©e
 =
ATH_CHANCTX_STATE_FORCE_ACTIVE
 ||

662 !
sc
->
sched
.
bóc⁄_adju°
 ||

663 !
sc
->
cur_ch™
->
tsf_vÆ
)

666 
	`©h_ch™˘x_adju°_tbâ_dñè
(
sc
);

671 
tsf_time
 = 
sc
->
sched
.
swôch_°¨t_time
;

672 
tsf_time
 -(
u32
Ë
sc
->
cur_ch™
->
tsf_vÆ
 +

673 
	`©h9k_hw_gë_tsf_off£t
(&
sc
->
cur_ch™
->
tsf_ts
, 
NULL
);

674 
tsf_time
 +
	`©h9k_hw_gëtsf32
(
ah
);

676 
sc
->
sched
.
bóc⁄_adju°
 = 
Ál£
;

677 
	`©h_ch™˘x_£tup_timî
(
sc
, 
tsf_time
);

679 
ATH_CHANCTX_EVENT_AUTHORIZED
:

680 i‡(
sc
->
sched
.
°©e
 !
ATH_CHANCTX_STATE_FORCE_ACTIVE
 ||

681 
avp
->
ch™˘x
 !
sc
->
cur_ch™
)

684 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

687 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_IDLE
;

689 
ATH_CHANCTX_EVENT_SWITCH
:

690 i‡(!
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
) ||

691 
sc
->
sched
.
°©e
 =
ATH_CHANCTX_STATE_FORCE_ACTIVE
 ||

692 
sc
->
cur_ch™
->
swôch_a·î_bóc⁄
 ||

693 
sc
->
cur_ch™
 =&sc->
offch™√l
.
ch™
)

699 
sc
->
√xt_ch™
 = 
	`©h_ch™˘x_gë_√xt
(sc, sc->
cur_ch™
);

700 
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

702 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

705 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_TIMER
;

706 
sc
->
sched
.
waô_swôch
 = 
Ál£
;

708 
tsf_time
 = 
	`TU_TO_USEC
(
cur_c⁄f
->
bóc⁄_öãrvÆ
) / 2;

710 i‡(
sc
->
sched
.
exãnd_ab£n˚
) {

711 
sc
->
sched
.
bóc⁄_miss
 = 0;

712 
tsf_time
 *= 3;

715 
tsf_time
 -
sc
->
sched
.
ch™√l_swôch_time
;

716 
tsf_time
 +
	`©h9k_hw_gëtsf32
(
sc
->
sc_ah
);

717 
sc
->
sched
.
swôch_°¨t_time
 = 
tsf_time
;

719 
	`©h_ch™˘x_£tup_timî
(
sc
, 
tsf_time
);

720 
sc
->
sched
.
bóc⁄_≥ndög
 = 
åue
;

721 
sc
->
sched
.
bóc⁄_adju°
 = 
åue
;

723 
ATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL
:

724 i‡(
sc
->
cur_ch™
 =&sc->
offch™√l
.
ch™
 ||

725 
sc
->
cur_ch™
->
swôch_a·î_bóc⁄
)

728 
sc
->
√xt_ch™
 = 
	`©h_ch™˘x_gë_√xt
(sc, sc->
cur_ch™
);

729 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
ch™˘x_w‹k
);

731 
ATH_CHANCTX_EVENT_UNASSIGN
:

732 i‡(
sc
->
cur_ch™
->
assig√d
) {

733 i‡(
sc
->
√xt_ch™
 && !sc->√xt_ch™->
assig√d
 &&

734 
sc
->
√xt_ch™
 !&sc->
offch™√l
.
ch™
)

735 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_IDLE
;

739 
˘x
 = 
	`©h_ch™˘x_gë_√xt
(
sc
, sc->
cur_ch™
);

740 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_IDLE
;

741 i‡(!
˘x
->
assig√d
)

744 
sc
->
√xt_ch™
 = 
˘x
;

745 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
ch™˘x_w‹k
);

747 
ATH_CHANCTX_EVENT_ASSIGN
:

749 
ATH_CHANCTX_EVENT_CHANGE
:

753 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

754 
	}
}

756 
	$©h_ch™˘x_bóc⁄_£¡_ev
(
©h_so·c
 *
sc
,

757 
©h_ch™˘x_evít
 
ev
)

759 i‡(
sc
->
sched
.
bóc⁄_≥ndög
)

760 
	`©h_ch™˘x_evít
(
sc
, 
NULL
, 
ev
);

761 
	}
}

763 
	$©h_ch™˘x_bóc⁄_ªcv_ev
(
©h_so·c
 *
sc
,

764 
©h_ch™˘x_evít
 
ev
)

766 
	`©h_ch™˘x_evít
(
sc
, 
NULL
, 
ev
);

767 
	}
}

769 
	$©h_sˇn_ch™√l_duøti⁄
(
©h_so·c
 *
sc
,

770 
õì80211_ch™√l
 *
ch™
)

772 
cfg80211_sˇn_ªque°
 *
ªq
 = 
sc
->
offch™√l
.
sˇn_ªq
;

774 i‡(!
ªq
->
n_ssids
 || (
ch™
->
Êags
 & 
IEEE80211_CHAN_NO_IR
))

775  (
HZ
 / 9);

777  (
HZ
 / 16);

778 
	}
}

780 
	$©h_ch™˘x_swôch
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
,

781 
cfg80211_ch™_def
 *
ch™def
)

783 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

785 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

787 i‡(
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
) &&

788 (
sc
->
cur_ch™
 !
˘x
Ë&& (˘x =&sc->
offch™√l
.
ch™
)) {

789 i‡(
ch™def
)

790 
˘x
->
ch™def
 = *chandef;

792 
sc
->
sched
.
offch™√l_≥ndög
 = 
åue
;

793 
sc
->
sched
.
waô_swôch
 = 
åue
;

794 
sc
->
sched
.
offch™√l_duøti⁄
 =

795 
	`jiffõs_to_u£cs
(
sc
->
offch™√l
.
duøti⁄
) +

796 
sc
->
sched
.
ch™√l_swôch_time
;

798 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

799 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

804 
sc
->
√xt_ch™
 = 
˘x
;

805 i‡(
ch™def
) {

806 
˘x
->
ch™def
 = *chandef;

807 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

808 "Assig√dÇext_ch™Åÿ%d MHz\n", 
ch™def
->
˚¡î_‰eq1
);

811 i‡(
sc
->
√xt_ch™
 =&sc->
offch™√l
.
ch™
) {

812 
sc
->
sched
.
offch™√l_duøti⁄
 =

813 
	`jiffõs_to_u£cs
(
sc
->
offch™√l
.
duøti⁄
) +

814 
sc
->
sched
.
ch™√l_swôch_time
;

816 i‡(
ch™def
) {

817 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

819 
ch™def
->
˚¡î_‰eq1
,

820 
sc
->
sched
.
offch™√l_duøti⁄
);

823 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

824 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
ch™˘x_w‹k
);

825 
	}
}

827 
	$©h_ch™˘x_offch™_swôch
(
©h_so·c
 *
sc
,

828 
õì80211_ch™√l
 *
ch™
)

830 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

831 
cfg80211_ch™_def
 
ch™def
;

833 
	`cfg80211_ch™def_¸óã
(&
ch™def
, 
ch™
, 
NL80211_CHAN_NO_HT
);

834 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

835 "Ch™√»deföôi⁄ cª©ed: %d MHz\n", 
ch™def
.
˚¡î_‰eq1
);

837 
	`©h_ch™˘x_swôch
(
sc
, &sc->
offch™√l
.
ch™
, &
ch™def
);

838 
	}
}

840 
©h_ch™˘x
 *
	$©h_ch™˘x_gë_›î_ch™
(
©h_so·c
 *
sc
,

841 
boﬁ
 
a˘ive
)

843 
©h_ch™˘x
 *
˘x
;

845 
	`©h_f‹_óch_ch™˘x
(
sc
, 
˘x
) {

846 i‡(!
˘x
->
assig√d
 || 
	`li°_em±y
(&˘x->
vifs
))

848 i‡(
a˘ive
 && !
˘x
->active)

851 i‡(
˘x
->
swôch_a·î_bóc⁄
)

852  
˘x
;

855  &
sc
->
ch™˘x
[0];

856 
	}
}

859 
	$©h_sˇn_√xt_ch™√l
(
©h_so·c
 *
sc
)

861 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

862 
cfg80211_sˇn_ªque°
 *
ªq
 = 
sc
->
offch™√l
.
sˇn_ªq
;

863 
õì80211_ch™√l
 *
ch™
;

865 i‡(
sc
->
offch™√l
.
sˇn_idx
 >
ªq
->
n_ch™√ls
) {

866 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

869 
sc
->
offch™√l
.
sˇn_idx
,

870 
ªq
->
n_ch™√ls
);

872 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_IDLE
;

873 
	`©h_ch™˘x_swôch
(
sc
, 
	`©h_ch™˘x_gë_›î_ch™
(sc, 
Ál£
),

874 
NULL
);

878 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

880 
sc
->
offch™√l
.
sˇn_idx
);

882 
ch™
 = 
ªq
->
ch™√ls
[
sc
->
offch™√l
.
sˇn_idx
++];

883 
sc
->
offch™√l
.
duøti⁄
 = 
	`©h_sˇn_ch™√l_duøti⁄
(sc, 
ch™
);

884 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_PROBE_SEND
;

886 
	`©h_ch™˘x_offch™_swôch
(
sc
, 
ch™
);

887 
	}
}

889 
	$©h_offch™√l_√xt
(
©h_so·c
 *
sc
)

891 
õì80211_vif
 *
vif
;

893 i‡(
sc
->
offch™√l
.
sˇn_ªq
) {

894 
vif
 = 
sc
->
offch™√l
.
sˇn_vif
;

895 
sc
->
offch™√l
.
ch™
.
txpowî
 = 
vif
->
bss_c⁄f
.txpower;

896 
	`©h_sˇn_√xt_ch™√l
(
sc
);

897 } i‡(
sc
->
offch™√l
.
roc_vif
) {

898 
vif
 = 
sc
->
offch™√l
.
roc_vif
;

899 
sc
->
offch™√l
.
ch™
.
txpowî
 = 
vif
->
bss_c⁄f
.txpower;

900 
sc
->
offch™√l
.
duøti⁄
 =

901 
	`m£cs_to_jiffõs
(
sc
->
offch™√l
.
roc_duøti⁄
);

902 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_ROC_START
;

903 
	`©h_ch™˘x_offch™_swôch
(
sc
, sc->
offch™√l
.
roc_ch™
);

905 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

906 
sc
->
sched
.
offch™√l_≥ndög
 = 
Ál£
;

907 
sc
->
sched
.
waô_swôch
 = 
Ál£
;

908 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

910 
	`©h_ch™˘x_swôch
(
sc
, 
	`©h_ch™˘x_gë_›î_ch™
(sc, 
Ál£
),

911 
NULL
);

912 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_IDLE
;

913 i‡(
sc
->
ps_idÀ
)

914 
	`©h_ˇn˚l_w‹k
(
sc
);

916 
	}
}

918 
	$©h_roc_com∂ëe
(
©h_so·c
 *
sc
, 
©h_roc_com∂ëe_ªas⁄
 
ªas⁄
)

920 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

922 
sc
->
offch™√l
.
roc_vif
 = 
NULL
;

923 
sc
->
offch™√l
.
roc_ch™
 = 
NULL
;

925 
ªas⁄
) {

926 
ATH_ROC_COMPLETE_ABORT
:

927 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "RoCáborted\n");

928 
	`õì80211_ªmaö_⁄_ch™√l_expúed
(
sc
->
hw
);

930 
ATH_ROC_COMPLETE_EXPIRE
:

931 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "RoCÉxpired\n");

932 
	`õì80211_ªmaö_⁄_ch™√l_expúed
(
sc
->
hw
);

934 
ATH_ROC_COMPLETE_CANCEL
:

935 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "RoC canceled\n");

939 
	`©h_offch™√l_√xt
(
sc
);

940 
	`©h9k_ps_ª°‹e
(
sc
);

941 
	}
}

943 
	$©h_sˇn_com∂ëe
(
©h_so·c
 *
sc
, 
boﬁ
 
ab‹t
)

945 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

947 i‡(
ab‹t
)

948 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "HW scanáborted\n");

950 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "HW scan complete\n");

952 
sc
->
offch™√l
.
sˇn_ªq
 = 
NULL
;

953 
sc
->
offch™√l
.
sˇn_vif
 = 
NULL
;

954 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_IDLE
;

955 
	`õì80211_sˇn_com∂ëed
(
sc
->
hw
, 
ab‹t
);

956 
	`˛ór_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
);

957 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

958 i‡(
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
))

959 
sc
->
sched
.
f‹˚_nﬂ_upd©e
 = 
åue
;

960 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

961 
	`©h_offch™√l_√xt
(
sc
);

962 
	`©h9k_ps_ª°‹e
(
sc
);

963 
	}
}

965 
	$©h_sˇn_£nd_¥obe
(
©h_so·c
 *
sc
,

966 
cfg80211_ssid
 *
ssid
)

968 
cfg80211_sˇn_ªque°
 *
ªq
 = 
sc
->
offch™√l
.
sˇn_ªq
;

969 
õì80211_vif
 *
vif
 = 
sc
->
offch™√l
.
sˇn_vif
;

970 
©h_tx_c⁄åﬁ
 
tx˘l
 = {};

971 
sk_buff
 *
skb
;

972 
õì80211_tx_öfo
 *
öfo
;

973 
b™d
 = 
sc
->
offch™√l
.
ch™
.
ch™def
.chan->band;

975 
skb
 = 
	`õì80211_¥obîeq_gë
(
sc
->
hw
, 
vif
->
addr
,

976 
ssid
->ssid, ssid->
ssid_Àn
, 
ªq
->
õ_Àn
);

977 i‡(!
skb
)

980 
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

981 i‡(
ªq
->
no_cck
)

982 
öfo
->
Êags
 |
IEEE80211_TX_CTL_NO_CCK_RATE
;

984 i‡(
ªq
->
õ_Àn
)

985 
	`mem˝y
(
	`skb_put
(
skb
, 
ªq
->
õ_Àn
),Ñeq->
õ
,Ñeq->ie_len);

987 
	`skb_£t_queue_m≠pög
(
skb
, 
IEEE80211_AC_VO
);

989 i‡(!
	`õì80211_tx_¥ï¨e_skb
(
sc
->
hw
, 
vif
, 
skb
, 
b™d
, 
NULL
))

990 
îr‹
;

992 
tx˘l
.
txq
 = 
sc
->
tx
.
txq_m≠
[
IEEE80211_AC_VO
];

993 
tx˘l
.
f‹˚_ch™√l
 = 
åue
;

994 i‡(
	`©h_tx_°¨t
(
sc
->
hw
, 
skb
, &
tx˘l
))

995 
îr‹
;

999 
îr‹
:

1000 
	`õì80211_‰ì_txskb
(
sc
->
hw
, 
skb
);

1001 
	}
}

1003 
	$©h_sˇn_ch™√l_°¨t
(
©h_so·c
 *
sc
)

1005 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1006 
cfg80211_sˇn_ªque°
 *
ªq
 = 
sc
->
offch™√l
.
sˇn_ªq
;

1007 
i
;

1009 i‡(!(
sc
->
cur_ch™
->
ch™def
.
ch™
->
Êags
 & 
IEEE80211_CHAN_NO_IR
) &&

1010 
ªq
->
n_ssids
) {

1011 
i
 = 0; i < 
ªq
->
n_ssids
; i++)

1012 
	`©h_sˇn_£nd_¥obe
(
sc
, &
ªq
->
ssids
[
i
]);

1016 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1019 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_PROBE_WAIT
;

1020 
	`mod_timî
(&
sc
->
offch™√l
.
timî
, 
jiffõs
 + sc->offch™√l.
duøti⁄
);

1021 
	}
}

1023 
	$©h_ch™˘x_timî
(
d©a
)

1025 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
d©a
;

1026 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1028 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1031 
	`©h_ch™˘x_evít
(
sc
, 
NULL
, 
ATH_CHANCTX_EVENT_TSF_TIMER
);

1032 
	}
}

1034 
	$©h_offch™√l_timî
(
d©a
)

1036 
©h_so·c
 *
sc
 = (©h_so·¯*)
d©a
;

1037 
©h_ch™˘x
 *
˘x
;

1038 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1040 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "%s: offchannel state: %s\n",

1041 
__func__
, 
	`offch™√l_°©e_°rög
(
sc
->
offch™√l
.
°©e
));

1043 
sc
->
offch™√l
.
°©e
) {

1044 
ATH_OFFCHANNEL_PROBE_WAIT
:

1045 i‡(!
sc
->
offch™√l
.
sˇn_ªq
)

1049 
˘x
 = 
	`©h_ch™˘x_gë_›î_ch™
(
sc
, 
åue
);

1050 i‡(
˘x
->
a˘ive
) {

1051 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1055 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_SUSPEND
;

1056 
	`©h_ch™˘x_swôch
(
sc
, 
˘x
, 
NULL
);

1057 
	`mod_timî
(&
sc
->
offch™√l
.
timî
, 
jiffõs
 + 
HZ
 / 10);

1061 
ATH_OFFCHANNEL_SUSPEND
:

1062 i‡(!
sc
->
offch™√l
.
sˇn_ªq
)

1065 
	`©h_sˇn_√xt_ch™√l
(
sc
);

1067 
ATH_OFFCHANNEL_ROC_START
:

1068 
ATH_OFFCHANNEL_ROC_WAIT
:

1069 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_ROC_DONE
;

1070 
	`©h_roc_com∂ëe
(
sc
, 
ATH_ROC_COMPLETE_EXPIRE
);

1075 
	}
}

1077 
boﬁ


1078 
	$©h_ch™˘x_£nd_vif_ps_‰ame
(
©h_so·c
 *
sc
, 
©h_vif
 *
avp
,

1079 
boﬁ
 
powîßve
)

1081 
õì80211_vif
 *
vif
 = 
avp
->vif;

1082 
õì80211_°a
 *
°a
 = 
NULL
;

1083 
õì80211_hdr_3addr
 *
nuŒfunc
;

1084 
©h_tx_c⁄åﬁ
 
tx˘l
;

1085 
sk_buff
 *
skb
;

1086 
b™d
 = 
sc
->
cur_ch™
->
ch™def
.
ch™
->band;

1088 
vif
->
ty≥
) {

1089 
NL80211_IFTYPE_STATION
:

1090 i‡(!
avp
->
assoc
)

1091  
Ál£
;

1093 
skb
 = 
	`õì80211_nuŒfunc_gë
(
sc
->
hw
, 
vif
);

1094 i‡(!
skb
)

1095  
Ál£
;

1097 
nuŒfunc
 = (
õì80211_hdr_3addr
 *Ë
skb
->
d©a
;

1098 i‡(
powîßve
)

1099 
nuŒfunc
->
‰ame_c⁄åﬁ
 |=

1100 
	`˝u_to_À16
(
IEEE80211_FCTL_PM
);

1102 
	`skb_£t_queue_m≠pög
(
skb
, 
IEEE80211_AC_VO
);

1103 i‡(!
	`õì80211_tx_¥ï¨e_skb
(
sc
->
hw
, 
vif
, 
skb
, 
b™d
, &
°a
)) {

1104 
	`dev_k‰ì_skb_™y
(
skb
);

1105  
Ál£
;

1109  
Ál£
;

1112 
	`mem£t
(&
tx˘l
, 0, (txctl));

1113 
tx˘l
.
txq
 = 
sc
->
tx
.
txq_m≠
[
IEEE80211_AC_VO
];

1114 
tx˘l
.
°a
 = sta;

1115 
tx˘l
.
f‹˚_ch™√l
 = 
åue
;

1116 i‡(
	`©h_tx_°¨t
(
sc
->
hw
, 
skb
, &
tx˘l
)) {

1117 
	`õì80211_‰ì_txskb
(
sc
->
hw
, 
skb
);

1118  
Ál£
;

1121  
åue
;

1122 
	}
}

1124 
boﬁ


1125 
	$©h_ch™˘x_£nd_ps_‰ame
(
©h_so·c
 *
sc
, 
boﬁ
 
powîßve
)

1127 
©h_vif
 *
avp
;

1128 
boﬁ
 
£¡
 = 
Ál£
;

1130 
	`rcu_ªad_lock
();

1131 
	`li°_f‹_óch_íåy
(
avp
, &
sc
->
cur_ch™
->
vifs
, 
li°
) {

1132 i‡(
	`©h_ch™˘x_£nd_vif_ps_‰ame
(
sc
, 
avp
, 
powîßve
))

1133 
£¡
 = 
åue
;

1135 
	`rcu_ªad_u∆ock
();

1137  
£¡
;

1138 
	}
}

1140 
boﬁ
 
	$©h_ch™˘x_de„r_swôch
(
©h_so·c
 *
sc
)

1142 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1144 i‡(
sc
->
cur_ch™
 =&sc->
offch™√l
.
ch™
)

1145  
Ál£
;

1147 
sc
->
sched
.
°©e
) {

1148 
ATH_CHANCTX_STATE_SWITCH
:

1149  
Ál£
;

1150 
ATH_CHANCTX_STATE_IDLE
:

1151 i‡(!
sc
->
cur_ch™
->
swôch_a·î_bóc⁄
)

1152  
Ál£
;

1154 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1157 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_WAIT_FOR_BEACON
;

1163  
åue
;

1164 
	}
}

1166 
	$©h_offch™√l_ch™√l_ch™ge
(
©h_so·c
 *
sc
)

1168 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1170 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "%s: offchannel state: %s\n",

1171 
__func__
, 
	`offch™√l_°©e_°rög
(
sc
->
offch™√l
.
°©e
));

1173 
sc
->
offch™√l
.
°©e
) {

1174 
ATH_OFFCHANNEL_PROBE_SEND
:

1175 i‡(!
sc
->
offch™√l
.
sˇn_ªq
)

1178 i‡(
sc
->
cur_ch™
->
ch™def
.
ch™
 !=

1179 
sc
->
offch™√l
.
ch™
.
ch™def
.chan)

1182 
	`©h_sˇn_ch™√l_°¨t
(
sc
);

1184 
ATH_OFFCHANNEL_IDLE
:

1185 i‡(!
sc
->
offch™√l
.
sˇn_ªq
)

1188 
	`©h_sˇn_com∂ëe
(
sc
, 
Ál£
);

1190 
ATH_OFFCHANNEL_ROC_START
:

1191 i‡(
sc
->
cur_ch™
 !&sc->
offch™√l
.
ch™
)

1194 
sc
->
offch™√l
.
°©e
 = 
ATH_OFFCHANNEL_ROC_WAIT
;

1195 
	`mod_timî
(&
sc
->
offch™√l
.
timî
,

1196 
jiffõs
 + 
sc
->
offch™√l
.
duøti⁄
);

1197 
	`õì80211_ªady_⁄_ch™√l
(
sc
->
hw
);

1199 
ATH_OFFCHANNEL_ROC_DONE
:

1204 
	}
}

1206 
	$©h_ch™˘x_£t_√xt
(
©h_so·c
 *
sc
, 
boﬁ
 
f‹˚
)

1208 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1209 
©h_ch™˘x
 *
ﬁd_˘x
;

1210 
time•ec
 
ts
;

1211 
boﬁ
 
mósuª_time
 = 
Ál£
;

1212 
boﬁ
 
£nd_ps
 = 
Ál£
;

1213 
boﬁ
 
queues_°›≥d
 = 
Ál£
;

1215 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

1216 i‡(!
sc
->
√xt_ch™
) {

1217 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1221 i‡(!
f‹˚
 && 
	`©h_ch™˘x_de„r_swôch
(
sc
)) {

1222 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1226 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1228 
__func__
,

1229 
sc
->
cur_ch™
->
ch™def
.
˚¡î_‰eq1
,

1230 
sc
->
√xt_ch™
->
ch™def
.
˚¡î_‰eq1
);

1232 i‡(
sc
->
cur_ch™
 !sc->
√xt_ch™
) {

1233 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1235 
sc
->
cur_ch™
->
ch™def
.
˚¡î_‰eq1
);

1236 
sc
->
cur_ch™
->
°›≥d
 = 
åue
;

1237 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1239 i‡(
sc
->
√xt_ch™
 =&sc->
offch™√l
.
ch™
) {

1240 
	`gëøwm⁄Ÿ⁄ic
(&
ts
);

1241 
mósuª_time
 = 
åue
;

1244 
	`©h9k_ch™˘x_°›_queues
(
sc
, sc->
cur_ch™
);

1245 
queues_°›≥d
 = 
åue
;

1247 
	`__©h9k_Êush
(
sc
->
hw
, ~0, 
åue
, 
Ál£
, false);

1249 i‡(
	`©h_ch™˘x_£nd_ps_‰ame
(
sc
, 
åue
))

1250 
	`__©h9k_Êush
(
sc
->
hw
, 
	`BIT
(
IEEE80211_AC_VO
),

1251 
Ál£
, false, false);

1253 
£nd_ps
 = 
åue
;

1254 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

1256 i‡(
sc
->
cur_ch™
 !&sc->
offch™√l
.
ch™
) {

1257 
	`gëøwm⁄Ÿ⁄ic
(&
sc
->
cur_ch™
->
tsf_ts
);

1258 
sc
->
cur_ch™
->
tsf_vÆ
 = 
	`©h9k_hw_gëtsf64
(sc->
sc_ah
);

1261 
ﬁd_˘x
 = 
sc
->
cur_ch™
;

1262 
sc
->
cur_ch™
 = sc->
√xt_ch™
;

1263 
sc
->
cur_ch™
->
°›≥d
 = 
Ál£
;

1264 
sc
->
√xt_ch™
 = 
NULL
;

1266 i‡(!
sc
->
sched
.
offch™√l_≥ndög
)

1267 
sc
->
sched
.
offch™√l_duøti⁄
 = 0;

1269 i‡(
sc
->
sched
.
°©e
 !
ATH_CHANCTX_STATE_FORCE_ACTIVE
)

1270 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_IDLE
;

1272 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1274 i‡(
sc
->
sc_ah
->
chù_fuŒ¶ìp
 ||

1275 
	`memcmp
(&
sc
->
cur_ch™def
, &sc->
cur_ch™
->
ch™def
,

1276 (
sc
->
cur_ch™def
))) {

1277 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

1279 
__func__
, 
sc
->
cur_ch™
->
ch™def
.
˚¡î_‰eq1
);

1280 
	`©h_£t_ch™√l
(
sc
);

1281 i‡(
mósuª_time
)

1282 
sc
->
sched
.
ch™√l_swôch_time
 =

1283 
	`©h9k_hw_gë_tsf_off£t
(&
ts
, 
NULL
);

1288 
out
;

1291 i‡(
queues_°›≥d
)

1292 
	`©h9k_ch™˘x_wake_queues
(
sc
, 
ﬁd_˘x
);

1293 
out
:

1294 i‡(
£nd_ps
)

1295 
	`©h_ch™˘x_£nd_ps_‰ame
(
sc
, 
Ál£
);

1297 
	`©h_offch™√l_ch™√l_ch™ge
(
sc
);

1298 
	`©h_ch™˘x_evít
(
sc
, 
NULL
, 
ATH_CHANCTX_EVENT_SWITCH
);

1299 
	}
}

1301 
	$©h_ch™˘x_w‹k
(
w‹k_°ru˘
 *
w‹k
)

1303 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
w‹k
, ath_softc,

1304 
ch™˘x_w‹k
);

1305 
	`muãx_lock
(&
sc
->
muãx
);

1306 
	`©h_ch™˘x_£t_√xt
(
sc
, 
Ál£
);

1307 
	`muãx_u∆ock
(&
sc
->
muãx
);

1308 
	}
}

1310 
	$©h9k_offch™√l_öô
(
©h_so·c
 *
sc
)

1312 
©h_ch™˘x
 *
˘x
;

1313 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1314 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

1315 
õì80211_ch™√l
 *
ch™
;

1316 
i
;

1318 
sb™d
 = &
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
];

1319 i‡(!
sb™d
->
n_ch™√ls
)

1320 
sb™d
 = &
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
];

1322 
ch™
 = &
sb™d
->
ch™√ls
[0];

1324 
˘x
 = &
sc
->
offch™√l
.
ch™
;

1325 
	`INIT_LIST_HEAD
(&
˘x
->
vifs
);

1326 
˘x
->
txpowî
 = 
ATH_TXPOWER_MAX
;

1327 
	`cfg80211_ch™def_¸óã
(&
˘x
->
ch™def
, 
ch™
, 
NL80211_CHAN_HT20
);

1329 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘x
->
acq
); i++)

1330 
	`INIT_LIST_HEAD
(&
˘x
->
acq
[
i
]);

1332 
sc
->
offch™√l
.
ch™
.offch™√»
åue
;

1333 
	}
}

1335 
	$©h9k_öô_ch™√l_c⁄ãxt
(
©h_so·c
 *
sc
)

1337 
	`INIT_WORK
(&
sc
->
ch™˘x_w‹k
, 
©h_ch™˘x_w‹k
);

1339 
	`£tup_timî
(&
sc
->
offch™√l
.
timî
, 
©h_offch™√l_timî
,

1340 ()
sc
);

1341 
	`£tup_timî
(&
sc
->
sched
.
timî
, 
©h_ch™˘x_timî
,

1342 ()
sc
);

1344 
	`öô_com∂ëi⁄
(&
sc
->
go_bóc⁄
);

1345 
	}
}

1347 
	$©h9k_deöô_ch™√l_c⁄ãxt
(
©h_so·c
 *
sc
)

1349 
	`ˇn˚l_w‹k_sync
(&
sc
->
ch™˘x_w‹k
);

1350 
	}
}

1352 
boﬁ
 
	$©h9k_is_ch™˘x_íabÀd
()

1354  (
©h9k_u£_ch™˘x
 == 1);

1355 
	}
}

1361 
	$©h9k_ch™˘x_°›_queues
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
)

1363 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1364 
i
;

1366 i‡(
˘x
 =&
sc
->
offch™√l
.
ch™
) {

1367 
	`õì80211_°›_queue
(
sc
->
hw
,

1368 
sc
->
hw
->
offch™√l_tx_hw_queue
);

1370 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++)

1371 
	`õì80211_°›_queue
(
sc
->
hw
,

1372 
˘x
->
hw_queue_ba£
 + 
i
);

1375 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_AP
)

1376 
	`õì80211_°›_queue
(
sc
->
hw
, sc->hw->
queues
 - 2);

1377 
	}
}

1380 
	$©h9k_ch™˘x_wake_queues
(
©h_so·c
 *
sc
, 
©h_ch™˘x
 *
˘x
)

1382 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1383 
i
;

1385 i‡(
˘x
 =&
sc
->
offch™√l
.
ch™
) {

1386 
	`õì80211_wake_queue
(
sc
->
hw
,

1387 
sc
->
hw
->
offch™√l_tx_hw_queue
);

1389 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++)

1390 
	`õì80211_wake_queue
(
sc
->
hw
,

1391 
˘x
->
hw_queue_ba£
 + 
i
);

1394 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_AP
)

1395 
	`õì80211_wake_queue
(
sc
->
hw
, sc->hw->
queues
 - 2);

1396 
	}
}

1402 
	$©h9k_upd©e_p2p_ps_timî
(
©h_so·c
 *
sc
, 
©h_vif
 *
avp
)

1404 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1405 
s32
 
tsf
, 
èrgë_tsf
;

1407 i‡(!
avp
 || !avp->
nﬂ
.
has_√xt_tsf
)

1410 
	`©h9k_hw_gí_timî_°›
(
ah
, 
sc
->
p2p_ps_timî
);

1412 
tsf
 = 
	`©h9k_hw_gëtsf32
(
sc
->
sc_ah
);

1414 
èrgë_tsf
 = 
avp
->
nﬂ
.
√xt_tsf
;

1415 i‡(!
avp
->
nﬂ
.
ab£¡
)

1416 
èrgë_tsf
 -
ATH_P2P_PS_STOP_TIME
;

1418 i‡(
èrgë_tsf
 - 
tsf
 < 
ATH_P2P_PS_STOP_TIME
)

1419 
èrgë_tsf
 = 
tsf
 + 
ATH_P2P_PS_STOP_TIME
;

1421 
	`©h9k_hw_gí_timî_°¨t
(
ah
, 
sc
->
p2p_ps_timî
, (
u32
Ë
èrgë_tsf
, 1000000);

1422 
	}
}

1424 
	$©h9k_upd©e_p2p_ps
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
)

1426 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1427 
u32
 
tsf
;

1429 i‡(!
sc
->
p2p_ps_timî
)

1432 i‡(
vif
->
ty≥
 !
NL80211_IFTYPE_STATION
 || !vif->
p2p
)

1435 
sc
->
p2p_ps_vif
 = 
avp
;

1436 
tsf
 = 
	`©h9k_hw_gëtsf32
(
sc
->
sc_ah
);

1437 
	`õì80211_∑r£_p2p_nﬂ
(&
vif
->
bss_c⁄f
.
p2p_nﬂ_©å
, &
avp
->
nﬂ
, 
tsf
);

1438 
	`©h9k_upd©e_p2p_ps_timî
(
sc
, 
avp
);

1439 
	}
}

1441 
u8
 
	$©h9k_gë_˘wö
(
©h_so·c
 *
sc
, 
©h_vif
 *
avp
)

1443 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

1444 
u8
 
swôch_time
, 
˘wö
;

1453 
swôch_time
 = 
cur_c⁄f
->
bóc⁄_öãrvÆ
 / 4;

1455 
˘wö
 = 
avp
->
vif
->
bss_c⁄f
.
p2p_nﬂ_©å
.
›µs_˘wödow
;

1456 i‡(
˘wö
 && (˘wö < 
swôch_time
))

1457  
˘wö
;

1459 i‡(
swôch_time
 < 
P2P_DEFAULT_CTWIN
)

1462  
P2P_DEFAULT_CTWIN
;

1463 
	}
}

1465 
	$©h9k_bóc⁄_add_nﬂ
(
©h_so·c
 *
sc
, 
©h_vif
 *
avp
,

1466 
sk_buff
 *
skb
)

1468 c⁄° 
u8
 
nﬂ_õ_hdr
[] = {

1469 
WLAN_EID_VENDOR_SPECIFIC
,

1478 
õì80211_p2p_nﬂ_©å
 *
nﬂ
;

1479 
nﬂ_Àn
, 
nﬂ_desc
, 
i
 = 0;

1480 
u8
 *
hdr
;

1482 i‡(!
avp
->
offch™√l_duøti⁄
 && !avp->
nﬂ_duøti⁄
)

1485 
nﬂ_desc
 = !!
avp
->
offch™√l_duøti⁄
 + !!avp->
nﬂ_duøti⁄
;

1486 
nﬂ_Àn
 = 2 + (
õì80211_p2p_nﬂ_desc
Ë* 
nﬂ_desc
;

1488 
hdr
 = 
	`skb_put
(
skb
, (
nﬂ_õ_hdr
));

1489 
	`mem˝y
(
hdr
, 
nﬂ_õ_hdr
, (noa_ie_hdr));

1490 
hdr
[1] = (
nﬂ_õ_hdr
Ë+ 
nﬂ_Àn
 - 2;

1491 
hdr
[7] = 
nﬂ_Àn
;

1493 
nﬂ
 = (*Ë
	`skb_put
(
skb
, 
nﬂ_Àn
);

1494 
	`mem£t
(
nﬂ
, 0, 
nﬂ_Àn
);

1496 
nﬂ
->
ödex
 = 
avp
->
nﬂ_ödex
;

1497 
nﬂ
->
›µs_˘wödow
 = 
	`©h9k_gë_˘wö
(
sc
, 
avp
);

1499 i‡(
avp
->
nﬂ_duøti⁄
) {

1500 i‡(
avp
->
≥riodic_nﬂ
) {

1501 
u32
 
öãrvÆ
 = 
	`TU_TO_USEC
(
sc
->
cur_ch™
->
bóc⁄
.
bóc⁄_öãrvÆ
);

1502 
nﬂ
->
desc
[
i
].
cou¡
 = 255;

1503 
nﬂ
->
desc
[
i
].
öãrvÆ
 = 
	`˝u_to_À32
(interval);

1505 
nﬂ
->
desc
[
i
].
cou¡
 = 1;

1508 
nﬂ
->
desc
[
i
].
°¨t_time
 = 
	`˝u_to_À32
(
avp
->
nﬂ_°¨t
);

1509 
nﬂ
->
desc
[
i
].
duøti⁄
 = 
	`˝u_to_À32
(
avp
->
nﬂ_duøti⁄
);

1510 
i
++;

1513 i‡(
avp
->
offch™√l_duøti⁄
) {

1514 
nﬂ
->
desc
[
i
].
cou¡
 = 1;

1515 
nﬂ
->
desc
[
i
].
°¨t_time
 = 
	`˝u_to_À32
(
avp
->
offch™√l_°¨t
);

1516 
nﬂ
->
desc
[
i
].
duøti⁄
 = 
	`˝u_to_À32
(
avp
->
offch™√l_duøti⁄
);

1518 
	}
}

1520 
	$©h9k_p2p_ps_timî
(*
¥iv
)

1522 
©h_so·c
 *
sc
 = 
¥iv
;

1523 
©h_vif
 *
avp
 = 
sc
->
p2p_ps_vif
;

1524 
õì80211_vif
 *
vif
;

1525 
õì80211_°a
 *
°a
;

1526 
©h_node
 *
™
;

1527 
u32
 
tsf
;

1529 
	`dñ_timî_sync
(&
sc
->
sched
.
timî
);

1530 
	`©h9k_hw_gí_timî_°›
(
sc
->
sc_ah
, sc->
p2p_ps_timî
);

1531 
	`©h_ch™˘x_evít
(
sc
, 
NULL
, 
ATH_CHANCTX_EVENT_TSF_TIMER
);

1533 i‡(!
avp
 ||ávp->
ch™˘x
 !
sc
->
cur_ch™
)

1536 
tsf
 = 
	`©h9k_hw_gëtsf32
(
sc
->
sc_ah
);

1537 i‡(!
avp
->
nﬂ
.
ab£¡
)

1538 
tsf
 +
ATH_P2P_PS_STOP_TIME
;

1540 i‡(!
avp
->
nﬂ
.
has_√xt_tsf
 ||

1541 
avp
->
nﬂ
.
√xt_tsf
 - 
tsf
 > 
	`BIT
(31))

1542 
	`õì80211_upd©e_p2p_nﬂ
(&
avp
->
nﬂ
, 
tsf
);

1544 
	`©h9k_upd©e_p2p_ps_timî
(
sc
, 
avp
);

1546 
	`rcu_ªad_lock
();

1548 
vif
 = 
avp
->vif;

1549 
°a
 = 
	`õì80211_föd_°a
(
vif
, 
avp
->
bssid
);

1550 i‡(!
°a
)

1551 
out
;

1553 
™
 = (*Ë
°a
->
drv_¥iv
;

1554 i‡(
™
->
¶ìpög
 =!!
avp
->
nﬂ
.
ab£¡
)

1555 
out
;

1557 
™
->
¶ìpög
 = 
avp
->
nﬂ
.
ab£¡
;

1558 i‡(
™
->
¶ìpög
)

1559 
	`©h_tx_aggr_¶ìp
(
°a
, 
sc
, 
™
);

1561 
	`©h_tx_aggr_wakeup
(
sc
, 
™
);

1563 
out
:

1564 
	`rcu_ªad_u∆ock
();

1565 
	}
}

1567 
	$©h9k_p2p_bss_öfo_ch™ged
(
©h_so·c
 *
sc
,

1568 
õì80211_vif
 *
vif
)

1570 
Êags
;

1572 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

1573 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

1574 i‡(!(
sc
->
ps_Êags
 & 
PS_BEACON_SYNC
))

1575 
	`©h9k_upd©e_p2p_ps
(
sc
, 
vif
);

1576 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

1577 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

1578 
	}
}

1580 
	$©h9k_p2p_bóc⁄_sync
(
©h_so·c
 *
sc
)

1582 i‡(
sc
->
p2p_ps_vif
)

1583 
	`©h9k_upd©e_p2p_ps
(
sc
, sc->
p2p_ps_vif
->
vif
);

1584 
	}
}

1586 
	$©h9k_p2p_ªmove_vif
(
©h_so·c
 *
sc
,

1587 
õì80211_vif
 *
vif
)

1589 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1591 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

1592 i‡(
avp
 =
sc
->
p2p_ps_vif
) {

1593 
sc
->
p2p_ps_vif
 = 
NULL
;

1594 
	`©h9k_upd©e_p2p_ps_timî
(
sc
, 
NULL
);

1596 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

1597 
	}
}

1599 
	$©h9k_öô_p2p
(
©h_so·c
 *
sc
)

1601 
sc
->
p2p_ps_timî
 = 
	`©h_gí_timî_Æloc
(sc->
sc_ah
, 
©h9k_p2p_ps_timî
,

1602 
NULL
, 
sc
, 
AR_FIRST_NDP_TIMER
);

1603 i‡(!
sc
->
p2p_ps_timî
)

1604  -
ENOMEM
;

1607 
	}
}

1609 
	$©h9k_deöô_p2p
(
©h_so·c
 *
sc
)

1611 i‡(
sc
->
p2p_ps_timî
)

1612 
	`©h_gí_timî_‰ì
(
sc
->
sc_ah
, sc->
p2p_ps_timî
);

1613 
	}
}

	@common-beacon.c

17 
	~"comm⁄.h
"

19 
	#FUDGE
 2

	)

22 
u32
 
	$©h9k_mod_tsf64_tu
(
u64
 
tsf
, 
u32
 
div_tu
)

24 
u32
 
tsf_mod
, 
tsf_hi
, 
tsf_lo
, 
mod_hi
, 
mod_lo
;

26 
tsf_mod
 = 
tsf
 & (
	`BIT
(10) - 1);

27 
tsf_hi
 = 
tsf
 >> 32;

28 
tsf_lo
 = ((
u32
Ë
tsf
) >> 10;

30 
mod_hi
 = 
tsf_hi
 % 
div_tu
;

31 
mod_lo
 = ((
mod_hi
 << 22Ë+ 
tsf_lo
Ë% 
div_tu
;

33  (
mod_lo
 << 10Ë| 
tsf_mod
;

34 
	}
}

36 
u32
 
	$©h9k_gë_√xt_tbâ
(
©h_hw
 *
ah
, 
u64
 
tsf
,

37 
öãrvÆ
)

39 
off£t
;

41 
tsf
 +
	`TU_TO_USEC
(
FUDGE
 + 
ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
);

42 
off£t
 = 
	`©h9k_mod_tsf64_tu
(
tsf
, 
öãrvÆ
);

44  (
u32
Ë
tsf
 + 
	`TU_TO_USEC
(
öãrvÆ
Ë- 
off£t
;

45 
	}
}

55 
	$©h9k_cmn_bóc⁄_c⁄fig_°a
(
©h_hw
 *
ah
,

56 
©h_bóc⁄_c⁄fig
 *
c⁄f
,

57 
©h9k_bóc⁄_°©e
 *
bs
)

59 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

60 
dtim_ötvÆ
;

61 
u64
 
tsf
;

64 i‡(!
	`ã°_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
)) {

65 
	`©h_dbg
(
comm⁄
, 
BEACON
,

67  -
EPERM
;

70 
	`mem£t
(
bs
, 0, (*bs));

71 
c⁄f
->
ötvÆ
 = c⁄f->
bóc⁄_öãrvÆ
;

77 
dtim_ötvÆ
 = 
c⁄f
->
ötvÆ
 * c⁄f->
dtim_≥riod
;

83 
tsf
 = 
	`©h9k_hw_gëtsf64
(
ah
);

84 
c⁄f
->
√xâbâ
 = 
	`©h9k_gë_√xt_tbâ
(
ah
, 
tsf
, c⁄f->
ötvÆ
);

86 
bs
->
bs_ötvÆ
 = 
	`TU_TO_USEC
(
c⁄f
->
ötvÆ
);

87 
bs
->
bs_dtim≥riod
 = 
c⁄f
->
dtim_≥riod
 * bs->
bs_ötvÆ
;

88 
bs
->
bs_√xâbâ
 = 
c⁄f
->
√xâbâ
;

89 
bs
->
bs_√xtdtim
 = 
c⁄f
->
√xâbâ
;

90 i‡(
c⁄f
->
dtim_≥riod
 > 1)

91 
bs
->
bs_√xtdtim
 = 
	`©h9k_gë_√xt_tbâ
(
ah
, 
tsf
, 
dtim_ötvÆ
);

99 
bs
->
bs_bmis°hªshﬁd
 = 
	`DIV_ROUND_UP
(
c⁄f
->
bmiss_timeout
, c⁄f->
ötvÆ
);

100 i‡(
bs
->
bs_bmis°hªshﬁd
 > 15)

101 
bs
->
bs_bmis°hªshﬁd
 = 15;

102 i‡(
bs
->
bs_bmis°hªshﬁd
 <= 0)

103 
bs
->
bs_bmis°hªshﬁd
 = 1;

114 
bs
->
bs_¶ìpduøti⁄
 = 
	`TU_TO_USEC
(
	`roundup
(
	`IEEE80211_MS_TO_TU
(100),

115 
c⁄f
->
ötvÆ
));

116 i‡(
bs
->
bs_¶ìpduøti⁄
 > bs->
bs_dtim≥riod
)

117 
bs
->
bs_¶ìpduøti⁄
 = bs->
bs_dtim≥riod
;

120 
bs
->
bs_tsfo‹_thªshﬁd
 = 
ATH9K_TSFOOR_THRESHOLD
;

122 
	`©h_dbg
(
comm⁄
, 
BEACON
, "bmiss: %u sleep: %u\n",

123 
bs
->
bs_bmis°hªshﬁd
, bs->
bs_¶ìpduøti⁄
);

125 
	}
}

126 
EXPORT_SYMBOL
(
©h9k_cmn_bóc⁄_c⁄fig_°a
);

128 
	$©h9k_cmn_bóc⁄_c⁄fig_adhoc
(
©h_hw
 *
ah
,

129 
©h_bóc⁄_c⁄fig
 *
c⁄f
)

131 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

133 
c⁄f
->
ötvÆ
 = 
	`TU_TO_USEC
(c⁄f->
bóc⁄_öãrvÆ
);

135 i‡(
c⁄f
->
ibss_¸ót‹
)

136 
c⁄f
->
√xâbâ
 = c⁄f->
ötvÆ
;

138 
c⁄f
->
√xâbâ
 = 
	`©h9k_gë_√xt_tbâ
(
ah
, 
	`©h9k_hw_gëtsf64
(ah),

139 
c⁄f
->
bóc⁄_öãrvÆ
);

141 i‡(
c⁄f
->
íabÀ_bóc⁄
)

142 
ah
->
imask
 |
ATH9K_INT_SWBA
;

144 
ah
->
imask
 &~
ATH9K_INT_SWBA
;

146 
	`©h_dbg
(
comm⁄
, 
BEACON
,

148 (
c⁄f
->
íabÀ_bóc⁄
) ? "Enable" : "Disable",

149 
c⁄f
->
√xâbâ
, c⁄f->
ötvÆ
, c⁄f->
bóc⁄_öãrvÆ
);

150 
	}
}

151 
EXPORT_SYMBOL
(
©h9k_cmn_bóc⁄_c⁄fig_adhoc
);

158 
	$©h9k_cmn_bóc⁄_c⁄fig_≠
(
©h_hw
 *
ah
,

159 
©h_bóc⁄_c⁄fig
 *
c⁄f
,

160 
bc_buf
)

162 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

165 
c⁄f
->
ötvÆ
 = 
	`TU_TO_USEC
(c⁄f->
bóc⁄_öãrvÆ
);

166 
c⁄f
->
ötvÆ
 /
bc_buf
;

167 
c⁄f
->
√xâbâ
 = 
	`©h9k_gë_√xt_tbâ
(
ah
, 
	`©h9k_hw_gëtsf64
(ah),

168 
c⁄f
->
bóc⁄_öãrvÆ
);

170 i‡(
c⁄f
->
íabÀ_bóc⁄
)

171 
ah
->
imask
 |
ATH9K_INT_SWBA
;

173 
ah
->
imask
 &~
ATH9K_INT_SWBA
;

175 
	`©h_dbg
(
comm⁄
, 
BEACON
,

177 (
c⁄f
->
íabÀ_bóc⁄
) ? "Enable" : "Disable",

178 
c⁄f
->
√xâbâ
, c⁄f->
ötvÆ
, c⁄f->
bóc⁄_öãrvÆ
);

179 
	}
}

180 
EXPORT_SYMBOL
(
©h9k_cmn_bóc⁄_c⁄fig_≠
);

	@common-beacon.h

17 
	g©h_bóc⁄_c⁄fig
;

19 
©h9k_cmn_bóc⁄_c⁄fig_°a
(
©h_hw
 *
ah
,

20 
©h_bóc⁄_c⁄fig
 *
c⁄f
,

21 
©h9k_bóc⁄_°©e
 *
bs
);

22 
©h9k_cmn_bóc⁄_c⁄fig_adhoc
(
©h_hw
 *
ah
,

23 
©h_bóc⁄_c⁄fig
 *
c⁄f
);

24 
©h9k_cmn_bóc⁄_c⁄fig_≠
(
©h_hw
 *
ah
,

25 
©h_bóc⁄_c⁄fig
 *
c⁄f
,

26 
bc_buf
);

	@common-debug.c

17 
	~"comm⁄.h
"

19 
ssize_t
 
	$ªad_fûe_modÆ_ì¥om
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

20 
size_t
 
cou¡
, 
loff_t
 *
µos
)

22 
©h_hw
 *
ah
 = 
fûe
->
¥iv©e_d©a
;

23 
u32
 
Àn
 = 0, 
size
 = 6000;

24 *
buf
;

25 
size_t
 
ªtvÆ
;

27 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

28 i‡(
buf
 =
NULL
)

29  -
ENOMEM
;

31 
Àn
 = 
ah
->
ìp_›s
->
	`dump_ì¥om
◊h, 
Ál£
, 
buf
,Üí, 
size
);

33 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

34 
	`k‰ì
(
buf
);

36  
ªtvÆ
;

37 
	}
}

39 c⁄° 
fûe_›î©i⁄s
 
	gf›s_modÆ_ì¥om
 = {

40 .
ªad
 = 
ªad_fûe_modÆ_ì¥om
,

41 .
	g›í
 = 
sim∂e_›í
,

42 .
	gow√r
 = 
THIS_MODULE
,

43 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

47 
	$©h9k_cmn_debug_modÆ_ì¥om
(
díåy
 *
debugfs_phy
,

48 
©h_hw
 *
ah
)

50 
	`debugfs_¸óã_fûe
("modÆ_ì¥om", 
S_IRUSR
, 
debugfs_phy
, 
ah
,

51 &
f›s_modÆ_ì¥om
);

52 
	}
}

53 
EXPORT_SYMBOL
(
©h9k_cmn_debug_modÆ_ì¥om
);

55 
ssize_t
 
	$ªad_fûe_ba£_ì¥om
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

56 
size_t
 
cou¡
, 
loff_t
 *
µos
)

58 
©h_hw
 *
ah
 = 
fûe
->
¥iv©e_d©a
;

59 
u32
 
Àn
 = 0, 
size
 = 1500;

60 
ssize_t
 
ªtvÆ
 = 0;

61 *
buf
;

63 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

64 i‡(!
buf
)

65  -
ENOMEM
;

67 
Àn
 = 
ah
->
ìp_›s
->
	`dump_ì¥om
◊h, 
åue
, 
buf
,Üí, 
size
);

69 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

70 
	`k‰ì
(
buf
);

72  
ªtvÆ
;

73 
	}
}

75 c⁄° 
fûe_›î©i⁄s
 
	gf›s_ba£_ì¥om
 = {

76 .
ªad
 = 
ªad_fûe_ba£_ì¥om
,

77 .
	g›í
 = 
sim∂e_›í
,

78 .
	gow√r
 = 
THIS_MODULE
,

79 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

82 
	$©h9k_cmn_debug_ba£_ì¥om
(
díåy
 *
debugfs_phy
,

83 
©h_hw
 *
ah
)

85 
	`debugfs_¸óã_fûe
("ba£_ì¥om", 
S_IRUSR
, 
debugfs_phy
, 
ah
,

86 &
f›s_ba£_ì¥om
);

87 
	}
}

88 
EXPORT_SYMBOL
(
©h9k_cmn_debug_ba£_ì¥om
);

90 
	$©h9k_cmn_debug_°©_rx
(
©h_rx_°©s
 *
rx°©s
,

91 
©h_rx_°©us
 *
rs
)

93 
	#RX_PHY_ERR_INC
(
c
Ë
rx°©s
->
phy_îr_°©s
[c]++

	)

94 
	#RX_CMN_STAT_INC
(
c
Ë(
rx°©s
->c++)

	)

96 
	`RX_CMN_STAT_INC
(
rx_pkts_Æl
);

97 
rx°©s
->
rx_byãs_Æl
 +
rs
->
rs_d©Æí
;

99 i‡(
rs
->
rs_°©us
 & 
ATH9K_RXERR_CRC
)

100 
	`RX_CMN_STAT_INC
(
¸c_îr
);

101 i‡(
rs
->
rs_°©us
 & 
ATH9K_RXERR_DECRYPT
)

102 
	`RX_CMN_STAT_INC
(
de¸y±_¸c_îr
);

103 i‡(
rs
->
rs_°©us
 & 
ATH9K_RXERR_MIC
)

104 
	`RX_CMN_STAT_INC
(
mic_îr
);

105 i‡(
rs
->
rs_°©us
 & 
ATH9K_RX_DELIM_CRC_PRE
)

106 
	`RX_CMN_STAT_INC
(
¥e_dñim_¸c_îr
);

107 i‡(
rs
->
rs_°©us
 & 
ATH9K_RX_DELIM_CRC_POST
)

108 
	`RX_CMN_STAT_INC
(
po°_dñim_¸c_îr
);

109 i‡(
rs
->
rs_°©us
 & 
ATH9K_RX_DECRYPT_BUSY
)

110 
	`RX_CMN_STAT_INC
(
de¸y±_busy_îr
);

112 i‡(
rs
->
rs_°©us
 & 
ATH9K_RXERR_PHY
) {

113 
	`RX_CMN_STAT_INC
(
phy_îr
);

114 i‡(
rs
->
rs_phyîr
 < 
ATH9K_PHYERR_MAX
)

115 
	`RX_PHY_ERR_INC
(
rs
->
rs_phyîr
);

118 #unde‡
RX_CMN_STAT_INC


119 #unde‡
RX_PHY_ERR_INC


120 
	}
}

121 
EXPORT_SYMBOL
(
©h9k_cmn_debug_°©_rx
);

123 
ssize_t
 
	$ªad_fûe_ªcv
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

124 
size_t
 
cou¡
, 
loff_t
 *
µos
)

126 
	#RXS_ERR
(
s
, 
e
) \

128 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, \

129 "%18†: %10u\n", 
s
, \

130 
rx°©s
->
e
); \

131 } 0)

	)

133 
©h_rx_°©s
 *
rx°©s
 = 
fûe
->
¥iv©e_d©a
;

134 *
buf
;

135 
Àn
 = 0, 
size
 = 1600;

136 
ssize_t
 
ªtvÆ
 = 0;

138 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

139 i‡(
buf
 =
NULL
)

140  -
ENOMEM
;

142 
	`RXS_ERR
("PKTS-ALL", 
rx_pkts_Æl
);

143 
	`RXS_ERR
("BYTES-ALL", 
rx_byãs_Æl
);

144 
	`RXS_ERR
("BEACONS", 
rx_bóc⁄s
);

145 
	`RXS_ERR
("FRAGS", 
rx_‰ags
);

146 
	`RXS_ERR
("SPECTRAL", 
rx_•e˘øl
);

148 
	`RXS_ERR
("CRC ERR", 
¸c_îr
);

149 
	`RXS_ERR
("DECRYPT CRC ERR", 
de¸y±_¸c_îr
);

150 
	`RXS_ERR
("PHY ERR", 
phy_îr
);

151 
	`RXS_ERR
("MIC ERR", 
mic_îr
);

152 
	`RXS_ERR
("PRE-DELIM CRC ERR", 
¥e_dñim_¸c_îr
);

153 
	`RXS_ERR
("POST-DELIM CRC ERR", 
po°_dñim_¸c_îr
);

154 
	`RXS_ERR
("DECRYPT BUSY ERR", 
de¸y±_busy_îr
);

155 
	`RXS_ERR
("LENGTH-ERR", 
rx_Àn_îr
);

156 
	`RXS_ERR
("OOM-ERR", 
rx_oom_îr
);

157 
	`RXS_ERR
("RATE-ERR", 
rx_øã_îr
);

158 
	`RXS_ERR
("TOO-MANY-FRAGS", 
rx_too_m™y_‰ags_îr
);

160 i‡(
Àn
 > 
size
)

161 
Àn
 = 
size
;

163 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

164 
	`k‰ì
(
buf
);

166  
ªtvÆ
;

168 #unde‡
RXS_ERR


169 
	}
}

171 c⁄° 
fûe_›î©i⁄s
 
	gf›s_ªcv
 = {

172 .
ªad
 = 
ªad_fûe_ªcv
,

173 .
	g›í
 = 
sim∂e_›í
,

174 .
	gow√r
 = 
THIS_MODULE
,

175 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

178 
	$©h9k_cmn_debug_ªcv
(
díåy
 *
debugfs_phy
,

179 
©h_rx_°©s
 *
rx°©s
)

181 
	`debugfs_¸óã_fûe
("ªcv", 
S_IRUSR
, 
debugfs_phy
, 
rx°©s
,

182 &
f›s_ªcv
);

183 
	}
}

184 
EXPORT_SYMBOL
(
©h9k_cmn_debug_ªcv
);

186 
ssize_t
 
	$ªad_fûe_phy_îr
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

187 
size_t
 
cou¡
, 
loff_t
 *
µos
)

189 
	#PHY_ERR
(
s
, 
p
) \

190 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%22†: %10u\n", 
s
, \

191 
rx°©s
->
phy_îr_°©s
[
p
]);

	)

193 
©h_rx_°©s
 *
rx°©s
 = 
fûe
->
¥iv©e_d©a
;

194 *
buf
;

195 
Àn
 = 0, 
size
 = 1600;

196 
ssize_t
 
ªtvÆ
 = 0;

198 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

199 i‡(
buf
 =
NULL
)

200  -
ENOMEM
;

202 
	`PHY_ERR
("UNDERRUN ERR", 
ATH9K_PHYERR_UNDERRUN
);

203 
	`PHY_ERR
("TIMING ERR", 
ATH9K_PHYERR_TIMING
);

204 
	`PHY_ERR
("PARITY ERR", 
ATH9K_PHYERR_PARITY
);

205 
	`PHY_ERR
("RATE ERR", 
ATH9K_PHYERR_RATE
);

206 
	`PHY_ERR
("LENGTH ERR", 
ATH9K_PHYERR_LENGTH
);

207 
	`PHY_ERR
("RADAR ERR", 
ATH9K_PHYERR_RADAR
);

208 
	`PHY_ERR
("SERVICE ERR", 
ATH9K_PHYERR_SERVICE
);

209 
	`PHY_ERR
("TOR ERR", 
ATH9K_PHYERR_TOR
);

211 
	`PHY_ERR
("OFDM-TIMING ERR", 
ATH9K_PHYERR_OFDM_TIMING
);

212 
	`PHY_ERR
("OFDM-SIGNAL-PARITY ERR", 
ATH9K_PHYERR_OFDM_SIGNAL_PARITY
);

213 
	`PHY_ERR
("OFDM-RATE ERR", 
ATH9K_PHYERR_OFDM_RATE_ILLEGAL
);

214 
	`PHY_ERR
("OFDM-LENGTH ERR", 
ATH9K_PHYERR_OFDM_LENGTH_ILLEGAL
);

215 
	`PHY_ERR
("OFDM-POWER-DROP ERR", 
ATH9K_PHYERR_OFDM_POWER_DROP
);

216 
	`PHY_ERR
("OFDM-SERVICE ERR", 
ATH9K_PHYERR_OFDM_SERVICE
);

217 
	`PHY_ERR
("OFDM-RESTART ERR", 
ATH9K_PHYERR_OFDM_RESTART
);

219 
	`PHY_ERR
("CCK-BLOCKER ERR", 
ATH9K_PHYERR_CCK_BLOCKER
);

220 
	`PHY_ERR
("CCK-TIMING ERR", 
ATH9K_PHYERR_CCK_TIMING
);

221 
	`PHY_ERR
("CCK-HEADER-CRC ERR", 
ATH9K_PHYERR_CCK_HEADER_CRC
);

222 
	`PHY_ERR
("CCK-RATE ERR", 
ATH9K_PHYERR_CCK_RATE_ILLEGAL
);

223 
	`PHY_ERR
("CCK-LENGTH ERR", 
ATH9K_PHYERR_CCK_LENGTH_ILLEGAL
);

224 
	`PHY_ERR
("CCK-POWER-DROP ERR", 
ATH9K_PHYERR_CCK_POWER_DROP
);

225 
	`PHY_ERR
("CCK-SERVICE ERR", 
ATH9K_PHYERR_CCK_SERVICE
);

226 
	`PHY_ERR
("CCK-RESTART ERR", 
ATH9K_PHYERR_CCK_RESTART
);

228 
	`PHY_ERR
("HT-CRC ERR", 
ATH9K_PHYERR_HT_CRC_ERROR
);

229 
	`PHY_ERR
("HT-LENGTH ERR", 
ATH9K_PHYERR_HT_LENGTH_ILLEGAL
);

230 
	`PHY_ERR
("HT-RATE ERR", 
ATH9K_PHYERR_HT_RATE_ILLEGAL
);

231 
	`PHY_ERR
("HT-ZLF ERR", 
ATH9K_PHYERR_HT_ZLF
);

233 
	`PHY_ERR
("FALSE-RADAR-EXT ERR", 
ATH9K_PHYERR_FALSE_RADAR_EXT
);

234 
	`PHY_ERR
("GREEN-FIELD ERR", 
ATH9K_PHYERR_GREEN_FIELD
);

235 
	`PHY_ERR
("SPECTRAL ERR", 
ATH9K_PHYERR_SPECTRAL
);

237 i‡(
Àn
 > 
size
)

238 
Àn
 = 
size
;

240 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

241 
	`k‰ì
(
buf
);

243  
ªtvÆ
;

245 #unde‡
PHY_ERR


246 
	}
}

248 c⁄° 
fûe_›î©i⁄s
 
	gf›s_phy_îr
 = {

249 .
ªad
 = 
ªad_fûe_phy_îr
,

250 .
	g›í
 = 
sim∂e_›í
,

251 .
	gow√r
 = 
THIS_MODULE
,

252 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

255 
	$©h9k_cmn_debug_phy_îr
(
díåy
 *
debugfs_phy
,

256 
©h_rx_°©s
 *
rx°©s
)

258 
	`debugfs_¸óã_fûe
("phy_îr", 
S_IRUSR
, 
debugfs_phy
, 
rx°©s
,

259 &
f›s_phy_îr
);

260 
	}
}

261 
EXPORT_SYMBOL
(
©h9k_cmn_debug_phy_îr
);

	@common-debug.h

43 
	s©h_rx_°©s
 {

44 
u32
 
	mrx_pkts_Æl
;

45 
u32
 
	mrx_byãs_Æl
;

46 
u32
 
	m¸c_îr
;

47 
u32
 
	mde¸y±_¸c_îr
;

48 
u32
 
	mphy_îr
;

49 
u32
 
	mmic_îr
;

50 
u32
 
	m¥e_dñim_¸c_îr
;

51 
u32
 
	mpo°_dñim_¸c_îr
;

52 
u32
 
	mde¸y±_busy_îr
;

53 
u32
 
	mphy_îr_°©s
[
ATH9K_PHYERR_MAX
];

54 
u32
 
	mrx_Àn_îr
;

55 
u32
 
	mrx_oom_îr
;

56 
u32
 
	mrx_øã_îr
;

57 
u32
 
	mrx_too_m™y_‰ags_îr
;

58 
u32
 
	mrx_bóc⁄s
;

59 
u32
 
	mrx_‰ags
;

60 
u32
 
	mrx_•e˘øl
;

63 
©h9k_cmn_debug_modÆ_ì¥om
(
díåy
 *
debugfs_phy
,

64 
©h_hw
 *
ah
);

65 
©h9k_cmn_debug_ba£_ì¥om
(
díåy
 *
debugfs_phy
,

66 
©h_hw
 *
ah
);

67 
©h9k_cmn_debug_°©_rx
(
©h_rx_°©s
 *
rx°©s
,

68 
©h_rx_°©us
 *
rs
);

69 
©h9k_cmn_debug_ªcv
(
díåy
 *
debugfs_phy
,

70 
©h_rx_°©s
 *
rx°©s
);

71 
©h9k_cmn_debug_phy_îr
(
díåy
 *
debugfs_phy
,

72 
©h_rx_°©s
 *
rx°©s
);

	@common-init.c

19 
	~"comm⁄.h
"

21 
	#CHAN2G
(
_‰eq
, 
_idx
) { \

22 .
b™d
 = 
IEEE80211_BAND_2GHZ
, \

23 .
˚¡î_‰eq
 = (
_‰eq
), \

24 .
hw_vÆue
 = (
_idx
), \

25 .
max_powî
 = 20, \

26 }

	)

28 
	#CHAN5G
(
_‰eq
, 
_idx
) { \

29 .
b™d
 = 
IEEE80211_BAND_5GHZ
, \

30 .
˚¡î_‰eq
 = (
_‰eq
), \

31 .
hw_vÆue
 = (
_idx
), \

32 .
max_powî
 = 20, \

33 }

	)

39 c⁄° 
õì80211_ch™√l
 
	g©h9k_2ghz_ch™èbÀ
[] = {

40 
CHAN2G
(2412, 0),

41 
CHAN2G
(2417, 1),

42 
CHAN2G
(2422, 2),

43 
CHAN2G
(2427, 3),

44 
CHAN2G
(2432, 4),

45 
CHAN2G
(2437, 5),

46 
CHAN2G
(2442, 6),

47 
CHAN2G
(2447, 7),

48 
CHAN2G
(2452, 8),

49 
CHAN2G
(2457, 9),

50 
CHAN2G
(2462, 10),

51 
CHAN2G
(2467, 11),

52 
CHAN2G
(2472, 12),

53 
CHAN2G
(2484, 13),

60 c⁄° 
õì80211_ch™√l
 
	g©h9k_5ghz_ch™èbÀ
[] = {

62 
CHAN5G
(5180, 14),

63 
CHAN5G
(5200, 15),

64 
CHAN5G
(5220, 16),

65 
CHAN5G
(5240, 17),

67 
CHAN5G
(5260, 18),

68 
CHAN5G
(5280, 19),

69 
CHAN5G
(5300, 20),

70 
CHAN5G
(5320, 21),

72 
CHAN5G
(5500, 22),

73 
CHAN5G
(5520, 23),

74 
CHAN5G
(5540, 24),

75 
CHAN5G
(5560, 25),

76 
CHAN5G
(5580, 26),

77 
CHAN5G
(5600, 27),

78 
CHAN5G
(5620, 28),

79 
CHAN5G
(5640, 29),

80 
CHAN5G
(5660, 30),

81 
CHAN5G
(5680, 31),

82 
CHAN5G
(5700, 32),

84 
CHAN5G
(5745, 33),

85 
CHAN5G
(5765, 34),

86 
CHAN5G
(5785, 35),

87 
CHAN5G
(5805, 36),

88 
CHAN5G
(5825, 37),

92 
	#SHPCHECK
(
__hw_øã
, 
__Êags
) \

93 ((
__Êags
 & 
IEEE80211_RATE_SHORT_PREAMBLE
Ë? (
__hw_øã
 | 0x04 ) : 0)

	)

95 
	#RATE
(
_bôøã
, 
_hw_øã
, 
_Êags
) { \

96 .
bôøã
 = (
_bôøã
), \

97 .
Êags
 = (
_Êags
), \

98 .
hw_vÆue
 = (
_hw_øã
), \

99 .
hw_vÆue_sh‹t
 = (
	`SHPCHECK
(
_hw_øã
, 
_Êags
)) \

100 }

	)

102 
õì80211_øã
 
	g©h9k_Àgacy_øãs
[] = {

103 
RATE
(10, 0x1b, 0),

104 
RATE
(20, 0x1a, 
IEEE80211_RATE_SHORT_PREAMBLE
),

105 
RATE
(55, 0x19, 
IEEE80211_RATE_SHORT_PREAMBLE
),

106 
RATE
(110, 0x18, 
IEEE80211_RATE_SHORT_PREAMBLE
),

107 
RATE
(60, 0x0b, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

108 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

109 
RATE
(90, 0x0f, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

110 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

111 
RATE
(120, 0x0a, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

112 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

113 
RATE
(180, 0x0e, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

114 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

115 
RATE
(240, 0x09, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

116 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

117 
RATE
(360, 0x0d, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

118 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

119 
RATE
(480, 0x08, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

120 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

121 
RATE
(540, 0x0c, (
IEEE80211_RATE_SUPPORTS_5MHZ
 |

122 
IEEE80211_RATE_SUPPORTS_10MHZ
)),

125 
	$©h9k_cmn_öô_ch™√ls_øãs
(
©h_comm⁄
 *
comm⁄
)

127 
©h_hw
 *
ah
 = (©h_hw *)
comm⁄
->ah;

128 *
ch™√ls
;

130 
	`BUILD_BUG_ON
(
	`ARRAY_SIZE
(
©h9k_2ghz_ch™èbÀ
) +

131 
	`ARRAY_SIZE
(
©h9k_5ghz_ch™èbÀ
) !=

132 
ATH9K_NUM_CHANNELS
);

134 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_2GHZ
) {

135 
ch™√ls
 = 
	`devm_kzÆloc
(
ah
->
dev
,

136 (
©h9k_2ghz_ch™èbÀ
), 
GFP_KERNEL
);

137 i‡(!
ch™√ls
)

138  -
ENOMEM
;

140 
	`mem˝y
(
ch™√ls
, 
©h9k_2ghz_ch™èbÀ
,

141 (
©h9k_2ghz_ch™èbÀ
));

142 
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
].
ch™√ls
 = channels;

143 
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
].
b™d
 = IEEE80211_BAND_2GHZ;

144 
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
].
n_ch™√ls
 =

145 
	`ARRAY_SIZE
(
©h9k_2ghz_ch™èbÀ
);

146 
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
].
bôøãs
 = 
©h9k_Àgacy_øãs
;

147 
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
].
n_bôøãs
 =

148 
	`ARRAY_SIZE
(
©h9k_Àgacy_øãs
);

151 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_5GHZ
) {

152 
ch™√ls
 = 
	`devm_kzÆloc
(
ah
->
dev
,

153 (
©h9k_5ghz_ch™èbÀ
), 
GFP_KERNEL
);

154 i‡(!
ch™√ls
)

155  -
ENOMEM
;

157 
	`mem˝y
(
ch™√ls
, 
©h9k_5ghz_ch™èbÀ
,

158 (
©h9k_5ghz_ch™èbÀ
));

159 
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
].
ch™√ls
 = channels;

160 
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
].
b™d
 = IEEE80211_BAND_5GHZ;

161 
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
].
n_ch™√ls
 =

162 
	`ARRAY_SIZE
(
©h9k_5ghz_ch™èbÀ
);

163 
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
].
bôøãs
 =

164 
©h9k_Àgacy_øãs
 + 4;

165 
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
].
n_bôøãs
 =

166 
	`ARRAY_SIZE
(
©h9k_Àgacy_øãs
) - 4;

169 
	}
}

170 
EXPORT_SYMBOL
(
©h9k_cmn_öô_ch™√ls_øãs
);

172 
	$©h9k_cmn_£tup_ht_ˇp
(
©h_hw
 *
ah
,

173 
õì80211_°a_ht_ˇp
 *
ht_öfo
)

175 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

176 
u8
 
tx_°ªams
, 
rx_°ªams
;

177 
i
, 
max_°ªams
;

179 
ht_öfo
->
ht_suµ‹ãd
 = 
åue
;

180 
ht_öfo
->
ˇp
 = 
IEEE80211_HT_CAP_SUP_WIDTH_20_40
 |

181 
IEEE80211_HT_CAP_SM_PS
 |

182 
IEEE80211_HT_CAP_SGI_40
 |

183 
IEEE80211_HT_CAP_DSSSCCK40
;

185 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_LDPC
)

186 
ht_öfo
->
ˇp
 |
IEEE80211_HT_CAP_LDPC_CODING
;

188 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_SGI_20
)

189 
ht_öfo
->
ˇp
 |
IEEE80211_HT_CAP_SGI_20
;

191 
ht_öfo
->
ampdu_Á˘‹
 = 
IEEE80211_HT_MAX_AMPDU_64K
;

192 
ht_öfo
->
ampdu_dísôy
 = 
IEEE80211_HT_MPDU_DENSITY_8
;

194 i‡(
	`AR_SREV_9271
(
ah
Ë|| 
	`AR_SREV_9330
◊hË|| 
	`AR_SREV_9485
◊hË|| 
	`AR_SREV_9565
(ah))

195 
max_°ªams
 = 1;

196 i‡(
	`AR_SREV_9462
(
ah
))

197 
max_°ªams
 = 2;

198 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

199 
max_°ªams
 = 3;

201 
max_°ªams
 = 2;

203 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

204 i‡(
max_°ªams
 >= 2)

205 
ht_öfo
->
ˇp
 |
IEEE80211_HT_CAP_TX_STBC
;

206 
ht_öfo
->
ˇp
 |(1 << 
IEEE80211_HT_CAP_RX_STBC_SHIFT
);

210 
	`mem£t
(&
ht_öfo
->
mcs
, 0, (ht_info->mcs));

211 
tx_°ªams
 = 
	`©h9k_cmn_cou¡_°ªams
(
ah
->
txchaömask
, 
max_°ªams
);

212 
rx_°ªams
 = 
	`©h9k_cmn_cou¡_°ªams
(
ah
->
rxchaömask
, 
max_°ªams
);

214 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "TX streams %d, RX streams: %d\n",

215 
tx_°ªams
, 
rx_°ªams
);

217 i‡(
tx_°ªams
 !
rx_°ªams
) {

218 
ht_öfo
->
mcs
.
tx_∑øms
 |
IEEE80211_HT_MCS_TX_RX_DIFF
;

219 
ht_öfo
->
mcs
.
tx_∑øms
 |((
tx_°ªams
 - 1) <<

220 
IEEE80211_HT_MCS_TX_MAX_STREAMS_SHIFT
);

223 
i
 = 0; i < 
rx_°ªams
; i++)

224 
ht_öfo
->
mcs
.
rx_mask
[
i
] = 0xff;

226 
ht_öfo
->
mcs
.
tx_∑øms
 |
IEEE80211_HT_MCS_TX_DEFINED
;

227 
	}
}

228 
EXPORT_SYMBOL
(
©h9k_cmn_£tup_ht_ˇp
);

230 
	$©h9k_cmn_ªlﬂd_chaömask
(
©h_hw
 *
ah
)

232 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

234 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_HT
))

237 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_2GHZ
)

238 
	`©h9k_cmn_£tup_ht_ˇp
(
ah
,

239 &
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
].
ht_ˇp
);

240 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_5GHZ
)

241 
	`©h9k_cmn_£tup_ht_ˇp
(
ah
,

242 &
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
].
ht_ˇp
);

243 
	}
}

244 
EXPORT_SYMBOL
(
©h9k_cmn_ªlﬂd_chaömask
);

	@common-init.h

17 
©h9k_cmn_öô_ch™√ls_øãs
(
©h_comm⁄
 *
comm⁄
);

18 
©h9k_cmn_£tup_ht_ˇp
(
©h_hw
 *
ah
,

19 
õì80211_°a_ht_ˇp
 *
ht_öfo
);

20 
©h9k_cmn_ªlﬂd_chaömask
(
©h_hw
 *
ah
);

	@common-spectral.c

17 
	~<löux/ªœy.h
>

18 
	~<löux/øndom.h
>

19 
	~"©h9k.h
"

21 
s8
 
	$fix_rssi_öv_⁄ly
(
u8
 
rssi_vÆ
)

23 i‡(
rssi_vÆ
 == 128)

24 
rssi_vÆ
 = 0;

25  (
s8
Ë
rssi_vÆ
;

26 
	}
}

28 
	$©h_debug_£nd_f·_ßm∂e
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
,

29 
f·_ßm∂e_év
 *fft_sample_tlv)

31 
Àngth
;

32 i‡(!
•ec_¥iv
->
rfs_ch™_•ec_sˇn
)

35 
Àngth
 = 
	`__be16_to_˝u
(
f·_ßm∂e_év
->length) +

36 (*
f·_ßm∂e_év
);

37 
	`ªœy_wrôe
(
•ec_¥iv
->
rfs_ch™_•ec_sˇn
, 
f·_ßm∂e_év
, 
Àngth
);

38 
	}
}

40 (
	t©h_cmn_f·_idx_vÆid©‹
Ë(
	tu8
 *
	tßm∂e_íd
, 
	tbyãs_ªad
);

43 
	$©h_cmn_max_idx_vîify_ht20_f·
(
u8
 *
ßm∂e_íd
, 
byãs_ªad
)

45 
©h_ht20_mag_öfo
 *
mag_öfo
;

46 
u8
 *
ßm∂e
;

47 
u16
 
max_magnôude
;

48 
u8
 
max_ödex
;

49 
u8
 
max_exp
;

54 i‡(
byãs_ªad
 < 
SPECTRAL_HT20_SAMPLE_LEN
 - 1)

57 
mag_öfo
 = (
©h_ht20_mag_öfo
 *Ë(
ßm∂e_íd
 -

58 (
©h_ht20_mag_öfo
) + 1);

60 
ßm∂e
 = 
ßm∂e_íd
 - 
SPECTRAL_HT20_SAMPLE_LEN
 + 1;

62 
max_ödex
 = 
	`•e˘øl_max_ödex
(
mag_öfo
->
Æl_bös
,

63 
SPECTRAL_HT20_NUM_BINS
);

64 
max_magnôude
 = 
	`•e˘øl_max_magnôude
(
mag_öfo
->
Æl_bös
);

66 
max_exp
 = 
mag_öfo
->max_exp & 0xf;

72 i‡(
byãs_ªad
 < 
SPECTRAL_HT20_SAMPLE_LEN
 && 
max_ödex
 < 1)

75 i‡(
ßm∂e
[
max_ödex
] !(
max_magnôude
 >> 
max_exp
))

79 
	}
}

82 
	$©h_cmn_max_idx_vîify_ht20_40_f·
(
u8
 *
ßm∂e_íd
, 
byãs_ªad
)

84 
©h_ht20_40_mag_öfo
 *
mag_öfo
;

85 
u8
 *
ßm∂e
;

86 
u16
 
lowî_mag
, 
uµî_mag
;

87 
u8
 
lowî_max_ödex
, 
uµî_max_ödex
;

88 
u8
 
max_exp
;

89 
dc_pos
 = 
SPECTRAL_HT20_40_NUM_BINS
 / 2;

94 i‡(
byãs_ªad
 < 
SPECTRAL_HT20_40_SAMPLE_LEN
 - 1)

97 
mag_öfo
 = (
©h_ht20_40_mag_öfo
 *Ë(
ßm∂e_íd
 -

98 (
©h_ht20_40_mag_öfo
) + 1);

100 
ßm∂e
 = 
ßm∂e_íd
 - 
SPECTRAL_HT20_40_SAMPLE_LEN
 + 1;

102 
lowî_mag
 = 
	`•e˘øl_max_magnôude
(
mag_öfo
->
lowî_bös
);

103 
lowî_max_ödex
 = 
	`•e˘øl_max_ödex
(
mag_öfo
->
lowî_bös
,

104 
SPECTRAL_HT20_40_NUM_BINS
);

106 
uµî_mag
 = 
	`•e˘øl_max_magnôude
(
mag_öfo
->
uµî_bös
);

107 
uµî_max_ödex
 = 
	`•e˘øl_max_ödex
(
mag_öfo
->
uµî_bös
,

108 
SPECTRAL_HT20_40_NUM_BINS
);

110 
max_exp
 = 
mag_öfo
->max_exp & 0xf;

116 i‡(
byãs_ªad
 < 
SPECTRAL_HT20_40_SAMPLE_LEN
 &&

117 ((
uµî_max_ödex
 < 1Ë|| (
lowî_max_ödex
 < 1)))

123 i‡((
uµî_max_ödex
 - 
dc_pos
 > 0) &&

124 (
ßm∂e
[
uµî_max_ödex
] =(
uµî_mag
 >> 
max_exp
)))

125 
uµî_max_ödex
 -
dc_pos
;

127 i‡((
lowî_max_ödex
 - 
dc_pos
 > 0) &&

128 (
ßm∂e
[
lowî_max_ödex
 - 
dc_pos
] =(
lowî_mag
 >> 
max_exp
)))

129 
lowî_max_ödex
 -
dc_pos
;

131 i‡((
ßm∂e
[
uµî_max_ödex
 + 
dc_pos
] !(
uµî_mag
 >> 
max_exp
)) ||

132 (
ßm∂e
[
lowî_max_ödex
] !(
lowî_mag
 >> 
max_exp
)))

136 
	}
}

138 (
	t©h_cmn_f·_ßm∂e_h™dÀr
Ë(
	t©h_rx_°©us
 *
	trs
,

139 
	t©h_•ec_sˇn_¥iv
 *
	t•ec_¥iv
,

140 
	tu8
 *
	tßm∂e_buf
, 
	tu64
 
	ttsf
, 
	tu16
 
	t‰eq
, 
	tch™_ty≥
);

143 
	$©h_cmn_¥o˚ss_ht20_f·
(
©h_rx_°©us
 *
rs
,

144 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
,

145 
u8
 *
ßm∂e_buf
,

146 
u64
 
tsf
, 
u16
 
‰eq
, 
ch™_ty≥
)

148 
f·_ßm∂e_ht20
 
f·_ßm∂e_20
;

149 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
•ec_¥iv
->
ah
);

150 
©h_hw
 *
ah
 = 
•ec_¥iv
->ah;

151 
©h_ht20_mag_öfo
 *
mag_öfo
;

152 
f·_ßm∂e_év
 *
év
;

153 
i
 = 0;

154 
ªt
 = 0;

155 
dc_pos
 = 
SPECTRAL_HT20_NUM_BINS
 / 2;

156 
u16
 
magnôude
, 
tmp_mag
, 
Àngth
;

157 
u8
 
max_ödex
, 
bôm≠_w
, 
max_exp
;

159 
Àngth
 = (
f·_ßm∂e_20
Ë- (
f·_ßm∂e_év
);

160 
f·_ßm∂e_20
.
év
.
ty≥
 = 
ATH_FFT_SAMPLE_HT20
;

161 
f·_ßm∂e_20
.
év
.
Àngth
 = 
	`__˝u_to_be16
(length);

162 
f·_ßm∂e_20
.
‰eq
 = 
	`__˝u_to_be16
(freq);

163 
f·_ßm∂e_20
.
rssi
 = 
	`fix_rssi_öv_⁄ly
(
rs
->
rs_rssi_˘l
[0]);

164 
f·_ßm∂e_20
.
noi£
 = 
ah
->noise;

166 
mag_öfo
 = (
©h_ht20_mag_öfo
 *Ë(
ßm∂e_buf
 +

167 
SPECTRAL_HT20_NUM_BINS
);

169 
magnôude
 = 
	`•e˘øl_max_magnôude
(
mag_öfo
->
Æl_bös
);

170 
f·_ßm∂e_20
.
max_magnôude
 = 
	`__˝u_to_be16
(
magnôude
);

172 
max_ödex
 = 
	`•e˘øl_max_ödex
(
mag_öfo
->
Æl_bös
,

173 
SPECTRAL_HT20_NUM_BINS
);

174 
f·_ßm∂e_20
.
max_ödex
 = max_index;

176 
bôm≠_w
 = 
	`•e˘øl_bôm≠_weight
(
mag_öfo
->
Æl_bös
);

177 
f·_ßm∂e_20
.
bôm≠_weight
 = 
bôm≠_w
;

179 
max_exp
 = 
mag_öfo
->max_exp & 0xf;

180 
f·_ßm∂e_20
.
max_exp
 = max_exp;

182 
f·_ßm∂e_20
.
tsf
 = 
	`__˝u_to_be64
(tsf);

184 
	`mem˝y
(
f·_ßm∂e_20
.
d©a
, 
ßm∂e_buf
, 
SPECTRAL_HT20_NUM_BINS
);

186 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "FFT HT20 frame: max mag 0x%X,"

188 
magnôude
 >> 
max_exp
,

189 
max_ödex
);

191 i‡(
f·_ßm∂e_20
.
d©a
[
max_ödex
] !(
magnôude
 >> 
max_exp
)) {

192 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "Magnitude mismatch !\n");

193 
ªt
 = -1;

199 
f·_ßm∂e_20
.
d©a
[
dc_pos
] = (fft_sample_20.data[dc_pos + 1] +

200 
f·_ßm∂e_20
.
d©a
[
dc_pos
 - 1]) / 2;

206 i‡(
max_ödex
 =
dc_pos
) {

207 
tmp_mag
 = 0;

208 
i
 = 0; i < 
dc_pos
; i++) {

209 i‡(
f·_ßm∂e_20
.
d©a
[
i
] > 
tmp_mag
) {

210 
tmp_mag
 = 
f·_ßm∂e_20
.
d©a
[
i
];

211 
f·_ßm∂e_20
.
max_ödex
 = 
i
;

215 
magnôude
 = 
tmp_mag
 << 
max_exp
;

216 
f·_ßm∂e_20
.
max_magnôude
 = 
	`__˝u_to_be16
(
magnôude
);

218 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

220 
tmp_mag
, 
f·_ßm∂e_20
.
max_ödex
);

222 
i
 = 0; i < 
SPECTRAL_HT20_NUM_BINS
; i++) {

223 i‡(
f·_ßm∂e_20
.
d©a
[
i
] =(
magnôude
 >> 
max_exp
))

224 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

226 
f·_ßm∂e_20
.
d©a
[
i
], i);

228 i‡(
f·_ßm∂e_20
.
d©a
[
i
] > (
magnôude
 >> 
max_exp
)) {

229 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

231 
i
, 
f·_ßm∂e_20
.
d©a
[i]);

232 
ªt
 = -1;

236 i‡(
ªt
 < 0)

237  
ªt
;

239 
év
 = (
f·_ßm∂e_év
 *)&
f·_ßm∂e_20
;

241 
	`©h_debug_£nd_f·_ßm∂e
(
•ec_¥iv
, 
év
);

244 
	}
}

247 
	$©h_cmn_¥o˚ss_ht20_40_f·
(
©h_rx_°©us
 *
rs
,

248 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
,

249 
u8
 *
ßm∂e_buf
,

250 
u64
 
tsf
, 
u16
 
‰eq
, 
ch™_ty≥
)

252 
f·_ßm∂e_ht20_40
 
f·_ßm∂e_40
;

253 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
•ec_¥iv
->
ah
);

254 
©h_hw
 *
ah
 = 
•ec_¥iv
->ah;

255 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

256 
©h_ht20_40_mag_öfo
 *
mag_öfo
;

257 
f·_ßm∂e_év
 *
év
;

258 
dc_pos
 = 
SPECTRAL_HT20_40_NUM_BINS
 / 2;

259 
i
 = 0;

260 
ªt
 = 0;

261 
s16
 
ext_nf
;

262 
u16
 
lowî_mag
, 
uµî_mag
, 
tmp_mag
, 
Àngth
;

263 
s8
 
lowî_rssi
, 
uµî_rssi
;

264 
u8
 
lowî_max_ödex
, 
uµî_max_ödex
;

265 
u8
 
lowî_bôm≠_w
, 
uµî_bôm≠_w
, 
max_exp
;

267 i‡(
ˇld©a
)

268 
ext_nf
 = 
	`©h9k_hw_gëch™_noi£
(
ah
,áh->
curch™
,

269 
ˇld©a
->
nfCÆHi°
[3].
¥ivNF
);

271 
ext_nf
 = 
ATH_DEFAULT_NOISE_FLOOR
;

273 
Àngth
 = (
f·_ßm∂e_40
Ë- (
f·_ßm∂e_év
);

274 
f·_ßm∂e_40
.
év
.
ty≥
 = 
ATH_FFT_SAMPLE_HT20_40
;

275 
f·_ßm∂e_40
.
év
.
Àngth
 = 
	`__˝u_to_be16
(length);

276 
f·_ßm∂e_40
.
‰eq
 = 
	`__˝u_to_be16
(freq);

277 
f·_ßm∂e_40
.
ch™√l_ty≥
 = 
ch™_ty≥
;

279 i‡(
ch™_ty≥
 =
NL80211_CHAN_HT40PLUS
) {

280 
lowî_rssi
 = 
	`fix_rssi_öv_⁄ly
(
rs
->
rs_rssi_˘l
[0]);

281 
uµî_rssi
 = 
	`fix_rssi_öv_⁄ly
(
rs
->
rs_rssi_ext
[0]);

283 
f·_ßm∂e_40
.
lowî_noi£
 = 
ah
->
noi£
;

284 
f·_ßm∂e_40
.
uµî_noi£
 = 
ext_nf
;

286 
lowî_rssi
 = 
	`fix_rssi_öv_⁄ly
(
rs
->
rs_rssi_ext
[0]);

287 
uµî_rssi
 = 
	`fix_rssi_öv_⁄ly
(
rs
->
rs_rssi_˘l
[0]);

289 
f·_ßm∂e_40
.
lowî_noi£
 = 
ext_nf
;

290 
f·_ßm∂e_40
.
uµî_noi£
 = 
ah
->
noi£
;

293 
f·_ßm∂e_40
.
lowî_rssi
 =Üower_rssi;

294 
f·_ßm∂e_40
.
uµî_rssi
 = upper_rssi;

296 
mag_öfo
 = (
©h_ht20_40_mag_öfo
 *Ë(
ßm∂e_buf
 +

297 
SPECTRAL_HT20_40_NUM_BINS
);

299 
lowî_mag
 = 
	`•e˘øl_max_magnôude
(
mag_öfo
->
lowî_bös
);

300 
f·_ßm∂e_40
.
lowî_max_magnôude
 = 
	`__˝u_to_be16
(
lowî_mag
);

302 
uµî_mag
 = 
	`•e˘øl_max_magnôude
(
mag_öfo
->
uµî_bös
);

303 
f·_ßm∂e_40
.
uµî_max_magnôude
 = 
	`__˝u_to_be16
(
uµî_mag
);

305 
lowî_max_ödex
 = 
	`•e˘øl_max_ödex
(
mag_öfo
->
lowî_bös
,

306 
SPECTRAL_HT20_40_NUM_BINS
);

307 
f·_ßm∂e_40
.
lowî_max_ödex
 =Üower_max_index;

309 
uµî_max_ödex
 = 
	`•e˘øl_max_ödex
(
mag_öfo
->
uµî_bös
,

310 
SPECTRAL_HT20_40_NUM_BINS
);

311 
f·_ßm∂e_40
.
uµî_max_ödex
 = upper_max_index;

313 
lowî_bôm≠_w
 = 
	`•e˘øl_bôm≠_weight
(
mag_öfo
->
lowî_bös
);

314 
f·_ßm∂e_40
.
lowî_bôm≠_weight
 = 
lowî_bôm≠_w
;

316 
uµî_bôm≠_w
 = 
	`•e˘øl_bôm≠_weight
(
mag_öfo
->
uµî_bös
);

317 
f·_ßm∂e_40
.
uµî_bôm≠_weight
 = 
uµî_bôm≠_w
;

319 
max_exp
 = 
mag_öfo
->max_exp & 0xf;

320 
f·_ßm∂e_40
.
max_exp
 = max_exp;

322 
f·_ßm∂e_40
.
tsf
 = 
	`__˝u_to_be64
(tsf);

324 
	`mem˝y
(
f·_ßm∂e_40
.
d©a
, 
ßm∂e_buf
, 
SPECTRAL_HT20_40_NUM_BINS
);

326 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "FFT HT20/40 frame:Üower mag 0x%X,"

329 
lowî_mag
 >> 
max_exp
,

330 
lowî_max_ödex
,

331 
uµî_mag
 >> 
max_exp
,

332 
uµî_max_ödex
);

337 i‡((
uµî_max_ödex
 - 
dc_pos
 > 0) &&

338 (
f·_ßm∂e_40
.
d©a
[
uµî_max_ödex
] =(
uµî_mag
 >> 
max_exp
))) {

339 
uµî_max_ödex
 -
dc_pos
;

340 
f·_ßm∂e_40
.
uµî_max_ödex
 = upper_max_index;

343 i‡((
lowî_max_ödex
 - 
dc_pos
 > 0) &&

344 (
f·_ßm∂e_40
.
d©a
[
lowî_max_ödex
 - 
dc_pos
] ==

345 (
lowî_mag
 >> 
max_exp
))) {

346 
lowî_max_ödex
 -
dc_pos
;

347 
f·_ßm∂e_40
.
lowî_max_ödex
 =Üower_max_index;

353 i‡((
f·_ßm∂e_40
.
d©a
[
uµî_max_ödex
 + 
dc_pos
]

354 !(
uµî_mag
 >> 
max_exp
)) ||

355 (
f·_ßm∂e_40
.
d©a
[
lowî_max_ödex
]

356 !(
lowî_mag
 >> 
max_exp
))) {

357 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "Magnitude mismatch !\n");

358 
ªt
 = -1;

364 
f·_ßm∂e_40
.
d©a
[
dc_pos
] = (fft_sample_40.data[dc_pos + 1] +

365 
f·_ßm∂e_40
.
d©a
[
dc_pos
 - 1]) / 2;

371 i‡(
lowî_max_ödex
 =
dc_pos
) {

372 
tmp_mag
 = 0;

373 
i
 = 0; i < 
dc_pos
; i++) {

374 i‡(
f·_ßm∂e_40
.
d©a
[
i
] > 
tmp_mag
) {

375 
tmp_mag
 = 
f·_ßm∂e_40
.
d©a
[
i
];

376 
f·_ßm∂e_40
.
lowî_max_ödex
 = 
i
;

380 
lowî_mag
 = 
tmp_mag
 << 
max_exp
;

381 
f·_ßm∂e_40
.
lowî_max_magnôude
 = 
	`__˝u_to_be16
(
lowî_mag
);

383 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

385 
tmp_mag
, 
f·_ßm∂e_40
.
lowî_max_ödex
);

387 
i
 = 0; i < 
dc_pos
; i++) {

388 i‡(
f·_ßm∂e_40
.
d©a
[
i
] =(
lowî_mag
 >> 
max_exp
))

389 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

391 
f·_ßm∂e_40
.
d©a
[
i
], i);

393 i‡(
f·_ßm∂e_40
.
d©a
[
i
] > (
lowî_mag
 >> 
max_exp
)) {

394 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

396 
i
, 
f·_ßm∂e_40
.
d©a
[i]);

397 
ªt
 = -1;

401 i‡(
uµî_max_ödex
 =
dc_pos
) {

402 
tmp_mag
 = 0;

403 
i
 = 
dc_pos
; i < 
SPECTRAL_HT20_40_NUM_BINS
; i++) {

404 i‡(
f·_ßm∂e_40
.
d©a
[
i
] > 
tmp_mag
) {

405 
tmp_mag
 = 
f·_ßm∂e_40
.
d©a
[
i
];

406 
f·_ßm∂e_40
.
uµî_max_ödex
 = 
i
;

409 
uµî_mag
 = 
tmp_mag
 << 
max_exp
;

410 
f·_ßm∂e_40
.
uµî_max_magnôude
 = 
	`__˝u_to_be16
(
uµî_mag
);

412 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

414 
tmp_mag
, 
i
);

416 
i
 = 
dc_pos
; i < 
SPECTRAL_HT20_40_NUM_BINS
; i++) {

417 i‡(
f·_ßm∂e_40
.
d©a
[
i
] =(
uµî_mag
 >> 
max_exp
))

418 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

420 
f·_ßm∂e_40
.
d©a
[
i
], i);

422 i‡(
f·_ßm∂e_40
.
d©a
[
i
] > (
uµî_mag
 >> 
max_exp
)) {

423 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

425 
i
, 
f·_ßm∂e_40
.
d©a
[i]);

427 
ªt
 = -1;

431 i‡(
ªt
 < 0)

432  
ªt
;

434 
év
 = (
f·_ßm∂e_év
 *)&
f·_ßm∂e_40
;

436 
	`©h_debug_£nd_f·_ßm∂e
(
•ec_¥iv
, 
év
);

439 
	}
}

441 
ölöe
 

442 
	$©h_cmn_c›y_f·_‰ame
(
u8
 *
ö
, u8 *
out
, 
ßm∂e_Àn
, 
ßm∂e_byãs
)

444 
ßm∂e_byãs
 - 
ßm∂e_Àn
) {

447 
	`mem˝y
(&
out
[1], 
ö
,

448 
ßm∂e_Àn
 - 1);

452 
	`mem˝y
(
out
, 
ö
, 
ßm∂e_Àn
);

458 
	`mem˝y
(&
out
[1], 
ö
, 30);

459 
out
[31] = 
ö
[31];

460 
	`mem˝y
(&
out
[32], &
ö
[33],

461 
ßm∂e_Àn
 - 32);

467 
	`mem˝y
(
out
, 
ö
, 30);

468 
out
[30] = 
ö
[31];

469 
	`mem˝y
(&
out
[31], &
ö
[33],

470 
ßm∂e_Àn
 - 31);

475 
	}
}

478 
	$©h_cmn_is_f·_buf_fuŒ
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
)

480 
i
 = 0;

481 
ªt
 = 0;

482 
rch™
 *
rc
 = 
•ec_¥iv
->
rfs_ch™_•ec_sˇn
;

484 
	`f‹_óch_⁄löe_˝u
(
i
)

485 
ªt
 +
	`ªœy_buf_fuŒ
(
rc
->
buf
[
i
]);

487 
i
 = 
	`num_⁄löe_˝us
();

489 i‡(
ªt
 =
i
)

493 
	}
}

496 
	$©h_cmn_¥o˚ss_f·
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
, 
õì80211_hdr
 *
hdr
,

497 
©h_rx_°©us
 *
rs
, 
u64
 
tsf
)

499 
u8
 
ßm∂e_buf
[
SPECTRAL_SAMPLE_MAX_LEN
] = {0};

500 
©h_hw
 *
ah
 = 
•ec_¥iv
->ah;

501 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
•ec_¥iv
->
ah
);

502 
u8
 
num_bös
, *
vd©a
 = (u8 *)
hdr
;

503 
©h_ød¨_öfo
 *
ød¨_öfo
;

504 
Àn
 = 
rs
->
rs_d©Æí
;

505 
i
;

506 
gŸ_¶í
 = 0;

507 
u8
 *
ßm∂e_°¨t
;

508 
ßm∂e_byãs
 = 0;

509 
ªt
 = 0;

510 
u16
 
f·_Àn
, 
ßm∂e_Àn
, 
‰eq
 = 
ah
->
curch™
->
ch™
->
˚¡î_‰eq
;

511 
∆80211_ch™√l_ty≥
 
ch™_ty≥
;

512 
©h_cmn_f·_idx_vÆid©‹
 *
f·_idx_vÆid©‹
;

513 
©h_cmn_f·_ßm∂e_h™dÀr
 *
f·_h™dÀr
;

519 i‡(
rs
->
rs_phyîr
 !
ATH9K_PHYERR_RADAR
 &&

520 
rs
->
rs_phyîr
 !
ATH9K_PHYERR_FALSE_RADAR_EXT
 &&

521 
rs
->
rs_phyîr
 !
ATH9K_PHYERR_SPECTRAL
)

527 
ød¨_öfo
 = ((
©h_ød¨_öfo
 *)&
vd©a
[
Àn
]) - 1;

528 i‡(!(
ød¨_öfo
->
pul£_bw_öfo
 & 
SPECTRAL_SCAN_BITMASK
))

534 
ªt
 = 
	`©h_cmn_is_f·_buf_fuŒ
(
•ec_¥iv
);

535 i‡(
ªt
 == 1) {

536 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "FFTÑeport ignored,Ço space "

541 
ch™_ty≥
 = 
	`cfg80211_gë_ch™def_ty≥
(&
comm⁄
->
hw
->
c⁄f
.
ch™def
);

542 i‡((
ch™_ty≥
 =
NL80211_CHAN_HT40MINUS
) ||

543 (
ch™_ty≥
 =
NL80211_CHAN_HT40PLUS
)) {

544 
f·_Àn
 = 
SPECTRAL_HT20_40_TOTAL_DATA_LEN
;

545 
ßm∂e_Àn
 = 
SPECTRAL_HT20_40_SAMPLE_LEN
;

546 
num_bös
 = 
SPECTRAL_HT20_40_NUM_BINS
;

547 
f·_idx_vÆid©‹
 = &
©h_cmn_max_idx_vîify_ht20_40_f·
;

548 
f·_h™dÀr
 = &
©h_cmn_¥o˚ss_ht20_40_f·
;

550 
f·_Àn
 = 
SPECTRAL_HT20_TOTAL_DATA_LEN
;

551 
ßm∂e_Àn
 = 
SPECTRAL_HT20_SAMPLE_LEN
;

552 
num_bös
 = 
SPECTRAL_HT20_NUM_BINS
;

553 
f·_idx_vÆid©‹
 = 
©h_cmn_max_idx_vîify_ht20_f·
;

554 
f·_h™dÀr
 = &
©h_cmn_¥o˚ss_ht20_f·
;

557 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "GotÑadar dump bw_info: 0x%X,"

559 
ød¨_öfo
->
pul£_bw_öfo
,

560 
Àn
,

561 
f·_Àn
);

562 
ßm∂e_°¨t
 = 
vd©a
;

563 
i
 = 0; i < 
Àn
 - 2; i++) {

564 
ßm∂e_byãs
++;

572 i‡(
Àn
 <
f·_Àn
 + 2) {

573 
ßm∂e_byãs
 = 
Àn
 - (
©h_ød¨_öfo
);

574 
gŸ_¶í
 = 1;

584 i‡(
vd©a
[
i
] <0x7 && 
ßm∂e_byãs
 >
ßm∂e_Àn
 - 1) {

603 i‡((
ßm∂e_byãs
 > 
ßm∂e_Àn
 + 2) ||

604 ((
ßm∂e_byãs
 > 
ßm∂e_Àn
) &&

605 (
ßm∂e_°¨t
[31] != sample_start[32])))

614 i‡(!
	`f·_idx_vÆid©‹
(&
vd©a
[
i
], i)) {

615 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
,

616 "Found vÆid f· fømê© %i\n", 
i
);

617 
gŸ_¶í
 = 1;

621 i‡((
ßm∂e_°¨t
[31] == sample_start[32]) &&

622 (
ßm∂e_byãs
 >
ßm∂e_Àn
) &&

623 (
ßm∂e_byãs
 < 
ßm∂e_Àn
 + 2) &&

624 (
vd©a
[
i
 + 1] <= 0x7))

628 i‡((
ßm∂e_byãs
 =
ßm∂e_Àn
 - 1) &&

629 (
vd©a
[
i
 + 1] <= 0x7))

632 
gŸ_¶í
 = 1;

635 i‡(
gŸ_¶í
) {

636 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "FFT frameÜen: %i\n",

637 
ßm∂e_byãs
);

642 i‡(
ßm∂e_byãs
 !
ßm∂e_Àn
 && 
Àn
 <
f·_Àn
 + 2) {

643 
	`©h_cmn_c›y_f·_‰ame
(
ßm∂e_°¨t
,

644 
ßm∂e_buf
, 
ßm∂e_Àn
,

645 
ßm∂e_byãs
);

647 
	`f·_h™dÀr
(
rs
, 
•ec_¥iv
, 
ßm∂e_buf
,

648 
tsf
, 
‰eq
, 
ch™_ty≥
);

650 
	`mem£t
(
ßm∂e_buf
, 0, 
SPECTRAL_SAMPLE_MAX_LEN
);

655 
	`add_devi˚_øndom√ss
(
ßm∂e_buf
, 
num_bös
);

659 i‡(
ßm∂e_byãs
 =
ßm∂e_Àn
) {

660 
ªt
 = 
	`f·_h™dÀr
(
rs
, 
•ec_¥iv
, 
ßm∂e_°¨t
,

661 
tsf
, 
‰eq
, 
ch™_ty≥
);

666 
	`add_devi˚_øndom√ss
(
ßm∂e_°¨t
, 
num_bös
);

672 i‡(
Àn
 <
f·_Àn
 + 2)

675 
ßm∂e_°¨t
 = &
vd©a
[
i
 + 1];

682 i‡(
ªt
 == 0) {

683 
i
 +
num_bös
 - 2;

684 
ßm∂e_byãs
 = 
num_bös
 - 2;

686 
gŸ_¶í
 = 0;

690 
i
 -
num_bös
 - 2;

691 i‡(
Àn
 - 
i
 !(
©h_ød¨_öfo
))

692 
	`©h_dbg
(
comm⁄
, 
SPECTRAL_SCAN
, "FFTÑeportÅruncated"

694 
Àn
 - 
i
);

696 
	}
}

697 
EXPORT_SYMBOL
(
©h_cmn_¥o˚ss_f·
);

703 
ssize_t
 
	$ªad_fûe_•ec_sˇn_˘l
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

704 
size_t
 
cou¡
, 
loff_t
 *
µos
)

706 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

707 *
mode
 = "";

708 
Àn
;

710 
•ec_¥iv
->
•e˘øl_mode
) {

711 
SPECTRAL_DISABLED
:

712 
mode
 = "disable";

714 
SPECTRAL_BACKGROUND
:

715 
mode
 = "background";

717 
SPECTRAL_CHANSCAN
:

718 
mode
 = "chanscan";

720 
SPECTRAL_MANUAL
:

721 
mode
 = "manual";

724 
Àn
 = 
	`°æí
(
mode
);

725  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
mode
, 
Àn
);

726 
	}
}

728 
	$©h9k_cmn_•e˘øl_sˇn_åiggî
(
©h_comm⁄
 *
comm⁄
,

729 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
)

731 
©h_hw
 *
ah
 = 
•ec_¥iv
->ah;

732 
u32
 
rxfûãr
;

734 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

737 i‡(!
	`©h9k_hw_›s
(
ah
)->
•e˘øl_sˇn_åiggî
) {

738 
	`©h_îr
(
comm⁄
, "spectrumánalyzerÇot implemented onÅhis hardware\n");

742 
	`©h_ps_›s
(
comm⁄
)->
	`wakeup
(common);

743 
rxfûãr
 = 
	`©h9k_hw_gërxfûãr
(
ah
);

744 
	`©h9k_hw_£åxfûãr
(
ah
, 
rxfûãr
 |

745 
ATH9K_RX_FILTER_PHYRADAR
 |

746 
ATH9K_RX_FILTER_PHYERR
);

753 
	`©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
comm⁄
, 
•ec_¥iv
, s≥c_¥iv->
•e˘øl_mode
);

754 
	`©h9k_hw_›s
(
ah
)->
	`•e˘øl_sˇn_åiggî
(ah);

755 
	`©h_ps_›s
(
comm⁄
)->
	`ª°‹e
(common);

756 
	}
}

757 
EXPORT_SYMBOL
(
©h9k_cmn_•e˘øl_sˇn_åiggî
);

759 
	$©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
©h_comm⁄
 *
comm⁄
,

760 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
,

761 
•e˘øl_mode
 spectral_mode)

763 
©h_hw
 *
ah
 = 
•ec_¥iv
->ah;

765 i‡(!
	`©h9k_hw_›s
(
ah
)->
•e˘øl_sˇn_åiggî
) {

766 
	`©h_îr
(
comm⁄
, "spectrumánalyzerÇot implemented onÅhis hardware\n");

770 
•e˘øl_mode
) {

771 
SPECTRAL_DISABLED
:

772 
•ec_¥iv
->
•ec_c⁄fig
.
íabÀd
 = 0;

774 
SPECTRAL_BACKGROUND
:

778 
•ec_¥iv
->
•ec_c⁄fig
.
ídÀss
 = 1;

779 
•ec_¥iv
->
•ec_c⁄fig
.
íabÀd
 = 1;

781 
SPECTRAL_CHANSCAN
:

782 
SPECTRAL_MANUAL
:

783 
•ec_¥iv
->
•ec_c⁄fig
.
ídÀss
 = 0;

784 
•ec_¥iv
->
•ec_c⁄fig
.
íabÀd
 = 1;

790 
	`©h_ps_›s
(
comm⁄
)->
	`wakeup
(common);

791 
	`©h9k_hw_›s
(
ah
)->
	`•e˘øl_sˇn_c⁄fig
◊h, &
•ec_¥iv
->
•ec_c⁄fig
);

792 
	`©h_ps_›s
(
comm⁄
)->
	`ª°‹e
(common);

794 
•ec_¥iv
->
•e˘øl_mode
 = spectral_mode;

797 
	}
}

798 
EXPORT_SYMBOL
(
©h9k_cmn_•e˘øl_sˇn_c⁄fig
);

800 
ssize_t
 
	$wrôe_fûe_•ec_sˇn_˘l
(
fûe
 *file,

801 c⁄° 
__u£r
 *
u£r_buf
,

802 
size_t
 
cou¡
, 
loff_t
 *
µos
)

804 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

805 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
•ec_¥iv
->
ah
);

806 
buf
[32];

807 
ssize_t
 
Àn
;

809 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

810  -
EOPNOTSUPP
;

812 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

813 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

814  -
EFAULT
;

816 
buf
[
Àn
] = '\0';

818 i‡(
	`°∫cmp
("åiggî", 
buf
, 7) == 0) {

819 
	`©h9k_cmn_•e˘øl_sˇn_åiggî
(
comm⁄
, 
•ec_¥iv
);

820 } i‡(
	`°∫cmp
("background", 
buf
, 10) == 0) {

821 
	`©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
comm⁄
, 
•ec_¥iv
, 
SPECTRAL_BACKGROUND
);

822 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "spectral scan: background modeÉnabled\n");

823 } i‡(
	`°∫cmp
("ch™sˇn", 
buf
, 8) == 0) {

824 
	`©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
comm⁄
, 
•ec_¥iv
, 
SPECTRAL_CHANSCAN
);

825 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "spectral scan: channel scan modeÉnabled\n");

826 } i‡(
	`°∫cmp
("m™uÆ", 
buf
, 6) == 0) {

827 
	`©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
comm⁄
, 
•ec_¥iv
, 
SPECTRAL_MANUAL
);

828 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "spectral scan: manual modeÉnabled\n");

829 } i‡(
	`°∫cmp
("dißbÀ", 
buf
, 7) == 0) {

830 
	`©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
comm⁄
, 
•ec_¥iv
, 
SPECTRAL_DISABLED
);

831 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "spectral scan: disabled\n");

833  -
EINVAL
;

836  
cou¡
;

837 
	}
}

839 c⁄° 
fûe_›î©i⁄s
 
	gf›s_•ec_sˇn_˘l
 = {

840 .
ªad
 = 
ªad_fûe_•ec_sˇn_˘l
,

841 .
	gwrôe
 = 
wrôe_fûe_•ec_sˇn_˘l
,

842 .
	g›í
 = 
sim∂e_›í
,

843 .
	gow√r
 = 
THIS_MODULE
,

844 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

851 
ssize_t
 
	$ªad_fûe_•e˘øl_sh‹t_ª≥©
(
fûe
 *file,

852 
__u£r
 *
u£r_buf
,

853 
size_t
 
cou¡
, 
loff_t
 *
µos
)

855 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

856 
buf
[32];

857 
Àn
;

859 
Àn
 = 
	`•rötf
(
buf
, "%d\n", 
•ec_¥iv
->
•ec_c⁄fig
.
sh‹t_ª≥©
);

860  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

861 
	}
}

863 
ssize_t
 
	$wrôe_fûe_•e˘øl_sh‹t_ª≥©
(
fûe
 *file,

864 c⁄° 
__u£r
 *
u£r_buf
,

865 
size_t
 
cou¡
, 
loff_t
 *
µos
)

867 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

868 
vÆ
;

869 
buf
[32];

870 
ssize_t
 
Àn
;

872 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

873 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

874  -
EFAULT
;

876 
buf
[
Àn
] = '\0';

877 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

878  -
EINVAL
;

880 i‡(
vÆ
 > 1)

881  -
EINVAL
;

883 
•ec_¥iv
->
•ec_c⁄fig
.
sh‹t_ª≥©
 = 
vÆ
;

884  
cou¡
;

885 
	}
}

887 c⁄° 
fûe_›î©i⁄s
 
	gf›s_•e˘øl_sh‹t_ª≥©
 = {

888 .
ªad
 = 
ªad_fûe_•e˘øl_sh‹t_ª≥©
,

889 .
	gwrôe
 = 
wrôe_fûe_•e˘øl_sh‹t_ª≥©
,

890 .
	g›í
 = 
sim∂e_›í
,

891 .
	gow√r
 = 
THIS_MODULE
,

892 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

899 
ssize_t
 
	$ªad_fûe_•e˘øl_cou¡
(
fûe
 *file,

900 
__u£r
 *
u£r_buf
,

901 
size_t
 
cou¡
, 
loff_t
 *
µos
)

903 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

904 
buf
[32];

905 
Àn
;

907 
Àn
 = 
	`•rötf
(
buf
, "%d\n", 
•ec_¥iv
->
•ec_c⁄fig
.
cou¡
);

908  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

909 
	}
}

911 
ssize_t
 
	$wrôe_fûe_•e˘øl_cou¡
(
fûe
 *file,

912 c⁄° 
__u£r
 *
u£r_buf
,

913 
size_t
 
cou¡
, 
loff_t
 *
µos
)

915 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

916 
vÆ
;

917 
buf
[32];

918 
ssize_t
 
Àn
;

920 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

921 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

922  -
EFAULT
;

924 
buf
[
Àn
] = '\0';

925 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

926  -
EINVAL
;

928 i‡(
vÆ
 > 255)

929  -
EINVAL
;

931 
•ec_¥iv
->
•ec_c⁄fig
.
cou¡
 = 
vÆ
;

932  
cou¡
;

933 
	}
}

935 c⁄° 
fûe_›î©i⁄s
 
	gf›s_•e˘øl_cou¡
 = {

936 .
ªad
 = 
ªad_fûe_•e˘øl_cou¡
,

937 .
	gwrôe
 = 
wrôe_fûe_•e˘øl_cou¡
,

938 .
	g›í
 = 
sim∂e_›í
,

939 .
	gow√r
 = 
THIS_MODULE
,

940 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

947 
ssize_t
 
	$ªad_fûe_•e˘øl_≥riod
(
fûe
 *file,

948 
__u£r
 *
u£r_buf
,

949 
size_t
 
cou¡
, 
loff_t
 *
µos
)

951 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

952 
buf
[32];

953 
Àn
;

955 
Àn
 = 
	`•rötf
(
buf
, "%d\n", 
•ec_¥iv
->
•ec_c⁄fig
.
≥riod
);

956  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

957 
	}
}

959 
ssize_t
 
	$wrôe_fûe_•e˘øl_≥riod
(
fûe
 *file,

960 c⁄° 
__u£r
 *
u£r_buf
,

961 
size_t
 
cou¡
, 
loff_t
 *
µos
)

963 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

964 
vÆ
;

965 
buf
[32];

966 
ssize_t
 
Àn
;

968 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

969 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

970  -
EFAULT
;

972 
buf
[
Àn
] = '\0';

973 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

974  -
EINVAL
;

976 i‡(
vÆ
 > 255)

977  -
EINVAL
;

979 
•ec_¥iv
->
•ec_c⁄fig
.
≥riod
 = 
vÆ
;

980  
cou¡
;

981 
	}
}

983 c⁄° 
fûe_›î©i⁄s
 
	gf›s_•e˘øl_≥riod
 = {

984 .
ªad
 = 
ªad_fûe_•e˘øl_≥riod
,

985 .
	gwrôe
 = 
wrôe_fûe_•e˘øl_≥riod
,

986 .
	g›í
 = 
sim∂e_›í
,

987 .
	gow√r
 = 
THIS_MODULE
,

988 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

995 
ssize_t
 
	$ªad_fûe_•e˘øl_f·_≥riod
(
fûe
 *file,

996 
__u£r
 *
u£r_buf
,

997 
size_t
 
cou¡
, 
loff_t
 *
µos
)

999 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

1000 
buf
[32];

1001 
Àn
;

1003 
Àn
 = 
	`•rötf
(
buf
, "%d\n", 
•ec_¥iv
->
•ec_c⁄fig
.
f·_≥riod
);

1004  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

1005 
	}
}

1007 
ssize_t
 
	$wrôe_fûe_•e˘øl_f·_≥riod
(
fûe
 *file,

1008 c⁄° 
__u£r
 *
u£r_buf
,

1009 
size_t
 
cou¡
, 
loff_t
 *
µos
)

1011 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
 = 
fûe
->
¥iv©e_d©a
;

1012 
vÆ
;

1013 
buf
[32];

1014 
ssize_t
 
Àn
;

1016 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

1017 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

1018  -
EFAULT
;

1020 
buf
[
Àn
] = '\0';

1021 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

1022  -
EINVAL
;

1024 i‡(
vÆ
 > 15)

1025  -
EINVAL
;

1027 
•ec_¥iv
->
•ec_c⁄fig
.
f·_≥riod
 = 
vÆ
;

1028  
cou¡
;

1029 
	}
}

1031 c⁄° 
fûe_›î©i⁄s
 
	gf›s_•e˘øl_f·_≥riod
 = {

1032 .
ªad
 = 
ªad_fûe_•e˘øl_f·_≥riod
,

1033 .
	gwrôe
 = 
wrôe_fûe_•e˘øl_f·_≥riod
,

1034 .
	g›í
 = 
sim∂e_›í
,

1035 .
	gow√r
 = 
THIS_MODULE
,

1036 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

1043 
díåy
 *
	$¸óã_buf_fûe_h™dÀr
(c⁄° *
fûíame
,

1044 
díåy
 *
∑ª¡
,

1045 
umode_t
 
mode
,

1046 
rch™_buf
 *
buf
,

1047 *
is_globÆ
)

1049 
díåy
 *
buf_fûe
;

1051 
buf_fûe
 = 
	`debugfs_¸óã_fûe
(
fûíame
, 
mode
, 
∑ª¡
, 
buf
,

1052 &
ªœy_fûe_›î©i⁄s
);

1053 *
is_globÆ
 = 1;

1054  
buf_fûe
;

1055 
	}
}

1057 
	$ªmove_buf_fûe_h™dÀr
(
díåy
 *dentry)

1059 
	`debugfs_ªmove
(
díåy
);

1062 
	}
}

1064 
rch™_ˇŒbacks
 
	grfs_•ec_sˇn_cb
 = {

1065 .
¸óã_buf_fûe
 = 
¸óã_buf_fûe_h™dÀr
,

1066 .
	gªmove_buf_fûe
 = 
ªmove_buf_fûe_h™dÀr
,

1073 
	$©h9k_cmn_•e˘øl_deöô_debug
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
)

1075 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_DEBUGFS
)) {

1076 
	`ªœy_˛o£
(
•ec_¥iv
->
rfs_ch™_•ec_sˇn
);

1077 
•ec_¥iv
->
rfs_ch™_•ec_sˇn
 = 
NULL
;

1079 
	}
}

1080 
EXPORT_SYMBOL
(
©h9k_cmn_•e˘øl_deöô_debug
);

1082 
	$©h9k_cmn_•e˘øl_öô_debug
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
,

1083 
díåy
 *
debugfs_phy
)

1085 
•ec_¥iv
->
rfs_ch™_•ec_sˇn
 = 
	`ªœy_›í
("spectral_scan",

1086 
debugfs_phy
,

1087 1024, 256, &
rfs_•ec_sˇn_cb
,

1088 
NULL
);

1089 
	`debugfs_¸óã_fûe
("spectral_scan_ctl",

1090 
S_IRUSR
 | 
S_IWUSR
,

1091 
debugfs_phy
, 
•ec_¥iv
,

1092 &
f›s_•ec_sˇn_˘l
);

1093 
	`debugfs_¸óã_fûe
("spectral_short_repeat",

1094 
S_IRUSR
 | 
S_IWUSR
,

1095 
debugfs_phy
, 
•ec_¥iv
,

1096 &
f›s_•e˘øl_sh‹t_ª≥©
);

1097 
	`debugfs_¸óã_fûe
("spectral_count",

1098 
S_IRUSR
 | 
S_IWUSR
,

1099 
debugfs_phy
, 
•ec_¥iv
,

1100 &
f›s_•e˘øl_cou¡
);

1101 
	`debugfs_¸óã_fûe
("spectral_period",

1102 
S_IRUSR
 | 
S_IWUSR
,

1103 
debugfs_phy
, 
•ec_¥iv
,

1104 &
f›s_•e˘øl_≥riod
);

1105 
	`debugfs_¸óã_fûe
("spectral_fft_period",

1106 
S_IRUSR
 | 
S_IWUSR
,

1107 
debugfs_phy
, 
•ec_¥iv
,

1108 &
f›s_•e˘øl_f·_≥riod
);

1109 
	}
}

1110 
EXPORT_SYMBOL
(
©h9k_cmn_•e˘øl_öô_debug
);

	@common-spectral.h

17 #i‚de‡
SPECTRAL_H


18 
	#SPECTRAL_H


	)

20 
	~"../•e˘øl_comm⁄.h
"

32 
	e•e˘øl_mode
 {

33 
	mSPECTRAL_DISABLED
 = 0,

34 
	mSPECTRAL_BACKGROUND
,

35 
	mSPECTRAL_MANUAL
,

36 
	mSPECTRAL_CHANSCAN
,

39 
	#SPECTRAL_SCAN_BITMASK
 0x10

	)

41 
	s©h_ød¨_öfo
 {

42 
u8
 
	mpul£_Àngth_¥i
;

43 
u8
 
	mpul£_Àngth_ext
;

44 
u8
 
	mpul£_bw_öfo
;

45 } 
	g__∑cked
;

54 
	s©h_ht20_mag_öfo
 {

55 
u8
 
	mÆl_bös
[3];

56 
u8
 
	mmax_exp
;

57 } 
	g__∑cked
;

62 
	s©h_ht20_f·_∑ckë
 {

63 
u8
 
	md©a
[
SPECTRAL_HT20_NUM_BINS
];

64 
©h_ht20_mag_öfo
 
	mmag_öfo
;

65 
©h_ød¨_öfo
 
	mød¨_öfo
;

66 } 
	g__∑cked
;

68 
	#SPECTRAL_HT20_TOTAL_DATA_LEN
 ((
©h_ht20_f·_∑ckë
))

	)

69 
	#SPECTRAL_HT20_SAMPLE_LEN
 ((
©h_ht20_mag_öfo
) +\

70 
SPECTRAL_HT20_NUM_BINS
)

	)

82 
	s©h_ht20_40_mag_öfo
 {

83 
u8
 
	mlowî_bös
[3];

84 
u8
 
	muµî_bös
[3];

85 
u8
 
	mmax_exp
;

86 } 
	g__∑cked
;

91 
	s©h_ht20_40_f·_∑ckë
 {

92 
u8
 
	md©a
[
SPECTRAL_HT20_40_NUM_BINS
];

93 
©h_ht20_40_mag_öfo
 
	mmag_öfo
;

94 
©h_ød¨_öfo
 
	mød¨_öfo
;

95 } 
	g__∑cked
;

97 
	s©h_•ec_sˇn_¥iv
 {

98 
©h_hw
 *
	mah
;

100 
rch™
 *
	mrfs_ch™_•ec_sˇn
;

101 
•e˘øl_mode
 
	m•e˘øl_mode
;

102 
©h_•ec_sˇn
 
	m•ec_c⁄fig
;

105 
	#SPECTRAL_HT20_40_TOTAL_DATA_LEN
 ((
©h_ht20_40_f·_∑ckë
))

	)

106 
	#SPECTRAL_HT20_40_SAMPLE_LEN
 ((
©h_ht20_40_mag_öfo
) +\

107 
SPECTRAL_HT20_40_NUM_BINS
)

	)

109 
	#SPECTRAL_SAMPLE_MAX_LEN
 
SPECTRAL_HT20_40_SAMPLE_LEN


	)

112 
ölöe
 
u16
 
	$•e˘øl_max_magnôude
(
u8
 *
bös
)

114  (
bös
[0] & 0xc0) >> 6 |

115 (
bös
[1] & 0xff) << 2 |

116 (
bös
[2] & 0x03) << 10;

117 
	}
}

120 
ölöe
 
u8
 
	$•e˘øl_max_ödex
(
u8
 *
bös
, 
num_bös
)

122 
s8
 
m
 = (
bös
[2] & 0xfc) >> 2;

123 
u8
 
zîo_idx
 = 
num_bös
 / 2;

129 i‡(
m
 & 0x20) {

130 
m
 &= ~0x20;

131 
m
 |= 0xe0;

139 
m
 +
zîo_idx
;

142 i‡(
m
 < 0 || m > 
num_bös
 - 1)

143 
m
 = 0;

145  
m
;

146 
	}
}

149 
ölöe
 
u8
 
	$•e˘øl_bôm≠_weight
(
u8
 *
bös
)

151  
bös
[0] & 0x3f;

152 
	}
}

154 
©h9k_cmn_•e˘øl_öô_debug
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
, 
díåy
 *
debugfs_phy
);

155 
©h9k_cmn_•e˘øl_deöô_debug
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
);

157 
©h9k_cmn_•e˘øl_sˇn_åiggî
(
©h_comm⁄
 *
comm⁄
,

158 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
);

159 
©h9k_cmn_•e˘øl_sˇn_c⁄fig
(
©h_comm⁄
 *
comm⁄
,

160 
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
,

161 
•e˘øl_mode
 spectral_mode);

162 
©h_cmn_¥o˚ss_f·
(
©h_•ec_sˇn_¥iv
 *
•ec_¥iv
, 
õì80211_hdr
 *
hdr
,

163 
©h_rx_°©us
 *
rs
, 
u64
 
tsf
);

	@common.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

24 
	~"comm⁄.h
"

26 
MODULE_AUTHOR
("Atheros Communications");

27 
MODULE_DESCRIPTION
("SharedÜibrary for Atheros wireless 802.11n LAN cards.");

28 
MODULE_LICENSE
("Dual BSD/GPL");

31 
boﬁ
 
	$©h9k_cmn_rx_ac˚±
(
©h_comm⁄
 *
comm⁄
,

32 
õì80211_hdr
 *
hdr
,

33 
õì80211_rx_°©us
 *
rxs
,

34 
©h_rx_°©us
 *
rx_°©s
,

35 
boﬁ
 *
de¸y±_îr‹
,

36 
rxfûãr
)

38 
©h_hw
 *
ah
 = 
comm⁄
->ah;

39 
boﬁ
 
is_mc
, 
is_vÆid_tkù
, 
°rù_mic
, 
mic_îr‹
;

40 
__À16
 
fc
;

42 
fc
 = 
hdr
->
‰ame_c⁄åﬁ
;

44 
is_mc
 = !!
	`is_mu…iˇ°_ëhî_addr
(
hdr
->
addr1
);

45 
is_vÆid_tkù
 = 
rx_°©s
->
rs_keyix
 !
ATH9K_RXKEYIX_INVALID
 &&

46 
	`ã°_bô
(
rx_°©s
->
rs_keyix
, 
comm⁄
->
tkù_keym≠
);

47 
°rù_mic
 = 
is_vÆid_tkù
 && 
	`õì80211_is_d©a
(
fc
) &&

48 
	`õì80211_has_¥Ÿe˘ed
(
fc
) &&

49 !(
rx_°©s
->
rs_°©us
 &

50 (
ATH9K_RXERR_DECRYPT
 | 
ATH9K_RXERR_CRC
 | 
ATH9K_RXERR_MIC
 |

51 
ATH9K_RXERR_KEYMISS
));

58 i‡(
rx_°©s
->
rs_keyix
 =
ATH9K_RXKEYIX_INVALID
 ||

59 !
	`ã°_bô
(
rx_°©s
->
rs_keyix
, 
comm⁄
->
ccmp_keym≠
))

60 
rx_°©s
->
rs_°©us
 &~
ATH9K_RXERR_KEYMISS
;

62 
mic_îr‹
 = 
is_vÆid_tkù
 && !
	`õì80211_is_˘l
(
fc
) &&

63 !
	`õì80211_has_m‹e‰ags
(
fc
) &&

64 !(
	`À16_to_˝u
(
hdr
->
£q_˘æ
Ë& 
IEEE80211_SCTL_FRAG
) &&

65 (
rx_°©s
->
rs_°©us
 & 
ATH9K_RXERR_MIC
);

73 i‡(
rx_°©s
->
rs_°©us
 != 0) {

74 
u8
 
°©us_mask
;

76 i‡(
rx_°©s
->
rs_°©us
 & 
ATH9K_RXERR_CRC
) {

77 
rxs
->
Êag
 |
RX_FLAG_FAILED_FCS_CRC
;

78 
mic_îr‹
 = 
Ál£
;

81 i‡((
rx_°©s
->
rs_°©us
 & 
ATH9K_RXERR_DECRYPT
) ||

82 (!
is_mc
 && (
rx_°©s
->
rs_°©us
 & 
ATH9K_RXERR_KEYMISS
))) {

83 *
de¸y±_îr‹
 = 
åue
;

84 
mic_îr‹
 = 
Ál£
;

93 
°©us_mask
 = 
ATH9K_RXERR_DECRYPT
 | 
ATH9K_RXERR_MIC
 |

94 
ATH9K_RXERR_KEYMISS
;

96 i‡(
ah
->
is_m⁄ô‹ög
 && (
rxfûãr
 & 
FIF_FCSFAIL
))

97 
°©us_mask
 |
ATH9K_RXERR_CRC
;

99 i‡(
rx_°©s
->
rs_°©us
 & ~
°©us_mask
)

100  
Ál£
;

109 i‡(
°rù_mic
)

110 
rxs
->
Êag
 |
RX_FLAG_MMIC_STRIPPED
;

111 i‡(
is_mc
 && 
mic_îr‹
)

112 
rxs
->
Êag
 |
RX_FLAG_MMIC_ERROR
;

114  
åue
;

115 
	}
}

116 
EXPORT_SYMBOL
(
©h9k_cmn_rx_ac˚±
);

118 
	$©h9k_cmn_rx_skb_po°¥o˚ss
(
©h_comm⁄
 *
comm⁄
,

119 
sk_buff
 *
skb
,

120 
©h_rx_°©us
 *
rx_°©s
,

121 
õì80211_rx_°©us
 *
rxs
,

122 
boﬁ
 
de¸y±_îr‹
)

124 
©h_hw
 *
ah
 = 
comm⁄
->ah;

125 
õì80211_hdr
 *
hdr
;

126 
hdæí
, 
∑dpos
, 
∑dsize
;

127 
u8
 
keyix
;

128 
__À16
 
fc
;

131 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

132 
hdæí
 = 
	`õì80211_gë_hdæí_‰om_skb
(
skb
);

133 
fc
 = 
hdr
->
‰ame_c⁄åﬁ
;

134 
∑dpos
 = 
	`õì80211_hdæí
(
fc
);

144 
∑dsize
 = 
∑dpos
 & 3;

145 i‡(
∑dsize
 && 
skb
->
Àn
>=
∑dpos
+∑dsize+
FCS_LEN
) {

146 
	`memmove
(
skb
->
d©a
 + 
∑dsize
, skb->d©a, 
∑dpos
);

147 
	`skb_puŒ
(
skb
, 
∑dsize
);

150 
keyix
 = 
rx_°©s
->
rs_keyix
;

152 i‡(!(
keyix
 =
ATH9K_RXKEYIX_INVALID
Ë&& !
de¸y±_îr‹
 &&

153 
	`õì80211_has_¥Ÿe˘ed
(
fc
)) {

154 
rxs
->
Êag
 |
RX_FLAG_DECRYPTED
;

155 } i‡(
	`õì80211_has_¥Ÿe˘ed
(
fc
)

156 && !
de¸y±_îr‹
 && 
skb
->
Àn
 >
hdæí
 + 4) {

157 
keyix
 = 
skb
->
d©a
[
hdæí
 + 3] >> 6;

159 i‡(
	`ã°_bô
(
keyix
, 
comm⁄
->
keym≠
))

160 
rxs
->
Êag
 |
RX_FLAG_DECRYPTED
;

162 i‡(
ah
->
sw_mgmt_¸y±o_rx
 &&

163 (
rxs
->
Êag
 & 
RX_FLAG_DECRYPTED
) &&

164 
	`õì80211_is_mgmt
(
fc
))

166 
rxs
->
Êag
 &~
RX_FLAG_DECRYPTED
;

167 
	}
}

168 
EXPORT_SYMBOL
(
©h9k_cmn_rx_skb_po°¥o˚ss
);

170 
	$©h9k_cmn_¥o˚ss_øã
(
©h_comm⁄
 *
comm⁄
,

171 
õì80211_hw
 *
hw
,

172 
©h_rx_°©us
 *
rx_°©s
,

173 
õì80211_rx_°©us
 *
rxs
)

175 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

176 
õì80211_b™d
 
b™d
;

177 
i
 = 0;

178 
©h_hw
 *
ah
 = 
comm⁄
->ah;

180 
b™d
 = 
ah
->
curch™
->
ch™
->band;

181 
sb™d
 = 
hw
->
wùhy
->
b™ds
[
b™d
];

183 i‡(
	`IS_CHAN_QUARTER_RATE
(
ah
->
curch™
))

184 
rxs
->
Êag
 |
RX_FLAG_5MHZ
;

185 i‡(
	`IS_CHAN_HALF_RATE
(
ah
->
curch™
))

186 
rxs
->
Êag
 |
RX_FLAG_10MHZ
;

188 i‡(
rx_°©s
->
rs_øã
 & 0x80) {

190 
rxs
->
Êag
 |
RX_FLAG_HT
;

191 
rxs
->
Êag
 |
rx_°©s
->flag;

192 
rxs
->
øã_idx
 = 
rx_°©s
->
rs_øã
 & 0x7f;

196 
i
 = 0; i < 
sb™d
->
n_bôøãs
; i++) {

197 i‡(
sb™d
->
bôøãs
[
i
].
hw_vÆue
 =
rx_°©s
->
rs_øã
) {

198 
rxs
->
øã_idx
 = 
i
;

201 i‡(
sb™d
->
bôøãs
[
i
].
hw_vÆue_sh‹t
 =
rx_°©s
->
rs_øã
) {

202 
rxs
->
Êag
 |
RX_FLAG_SHORTPRE
;

203 
rxs
->
øã_idx
 = 
i
;

208  -
EINVAL
;

209 
	}
}

210 
EXPORT_SYMBOL
(
©h9k_cmn_¥o˚ss_øã
);

212 
	$©h9k_cmn_¥o˚ss_rssi
(
©h_comm⁄
 *
comm⁄
,

213 
õì80211_hw
 *
hw
,

214 
©h_rx_°©us
 *
rx_°©s
,

215 
õì80211_rx_°©us
 *
rxs
)

217 
©h_hw
 *
ah
 = 
comm⁄
->ah;

218 
œ°_rssi
;

219 
rssi
 = 
rx_°©s
->
rs_rssi
;

220 
i
, 
j
;

225 i‡(
rx_°©s
->
rs_m‹óggr
) {

226 
rxs
->
Êag
 |
RX_FLAG_NO_SIGNAL_VAL
;

234 i‡(
rx_°©s
->
rs_rssi
 =
ATH9K_RSSI_BAD
) {

235 
rxs
->
Êag
 |
RX_FLAG_NO_SIGNAL_VAL
;

239 
i
 = 0, 
j
 = 0; i < 
	`ARRAY_SIZE
(
rx_°©s
->
rs_rssi_˘l
); i++) {

240 
s8
 
rssi
;

242 i‡(!(
ah
->
rxchaömask
 & 
	`BIT
(
i
)))

245 
rssi
 = 
rx_°©s
->
rs_rssi_˘l
[
i
];

246 i‡(
rssi
 !
ATH9K_RSSI_BAD
) {

247 
rxs
->
chaös
 |
	`BIT
(
j
);

248 
rxs
->
chaö_sig«l
[
j
] = 
ah
->
noi£
 + 
rssi
;

250 
j
++;

256 i‡(
rx_°©s
->
is_mybóc⁄
 &&

257 ((
ah
->
›mode
 =
NL80211_IFTYPE_STATION
) ||

258 (
ah
->
›mode
 =
NL80211_IFTYPE_ADHOC
))) {

259 
	`ATH_RSSI_LPF
(
comm⁄
->
œ°_rssi
, 
rx_°©s
->
rs_rssi
);

260 
œ°_rssi
 = 
comm⁄
->last_rssi;

262 i‡(
	`likñy
(
œ°_rssi
 !
ATH_RSSI_DUMMY_MARKER
))

263 
rssi
 = 
	`ATH_EP_RND
(
œ°_rssi
, 
ATH_RSSI_EP_MULTIPLIER
);

264 i‡(
rssi
 < 0)

265 
rssi
 = 0;

267 
ah
->
°©s
.
avgbrssi
 = 
rssi
;

270 
rxs
->
sig«l
 = 
ah
->
noi£
 + 
rx_°©s
->
rs_rssi
;

271 
	}
}

272 
EXPORT_SYMBOL
(
©h9k_cmn_¥o˚ss_rssi
);

274 
	$©h9k_cmn_gë_hw_¸y±o_keyty≥
(
sk_buff
 *
skb
)

276 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

278 i‡(
tx_öfo
->
c⁄åﬁ
.
hw_key
) {

279 
tx_öfo
->
c⁄åﬁ
.
hw_key
->
cùhî
) {

280 
WLAN_CIPHER_SUITE_WEP40
:

281 
WLAN_CIPHER_SUITE_WEP104
:

282  
ATH9K_KEY_TYPE_WEP
;

283 
WLAN_CIPHER_SUITE_TKIP
:

284  
ATH9K_KEY_TYPE_TKIP
;

285 
WLAN_CIPHER_SUITE_CCMP
:

286  
ATH9K_KEY_TYPE_AES
;

292  
ATH9K_KEY_TYPE_CLEAR
;

293 
	}
}

294 
EXPORT_SYMBOL
(
©h9k_cmn_gë_hw_¸y±o_keyty≥
);

299 
	$©h9k_cmn_upd©e_ich™√l
(
©h9k_ch™√l
 *
ich™
,

300 
cfg80211_ch™_def
 *
ch™def
)

302 
õì80211_ch™√l
 *
ch™
 = 
ch™def
->chan;

303 
u16
 
Êags
 = 0;

305 
ich™
->
ch™√l
 = 
ch™
->
˚¡î_‰eq
;

306 
ich™
->
ch™
 = chan;

308 i‡(
ch™
->
b™d
 =
IEEE80211_BAND_5GHZ
)

309 
Êags
 |
CHANNEL_5GHZ
;

311 
ch™def
->
width
) {

312 
NL80211_CHAN_WIDTH_5
:

313 
Êags
 |
CHANNEL_QUARTER
;

315 
NL80211_CHAN_WIDTH_10
:

316 
Êags
 |
CHANNEL_HALF
;

318 
NL80211_CHAN_WIDTH_20_NOHT
:

320 
NL80211_CHAN_WIDTH_20
:

321 
Êags
 |
CHANNEL_HT
;

323 
NL80211_CHAN_WIDTH_40
:

324 i‡(
ch™def
->
˚¡î_‰eq1
 > ch™def->
ch™
->
˚¡î_‰eq
)

325 
Êags
 |
CHANNEL_HT40PLUS
 | 
CHANNEL_HT
;

327 
Êags
 |
CHANNEL_HT40MINUS
 | 
CHANNEL_HT
;

330 
	`WARN_ON
(1);

333 
ich™
->
ch™√lFœgs
 = 
Êags
;

334 
	}
}

339 
©h9k_ch™√l
 *
	$©h9k_cmn_gë_ch™√l
(
õì80211_hw
 *
hw
,

340 
©h_hw
 *
ah
,

341 
cfg80211_ch™_def
 *
ch™def
)

343 
õì80211_ch™√l
 *
curch™
 = 
ch™def
->
ch™
;

344 
©h9k_ch™√l
 *
ch™√l
;

346 
ch™√l
 = &
ah
->
ch™√ls
[
curch™
->
hw_vÆue
];

347 
	`©h9k_cmn_upd©e_ich™√l
(
ch™√l
, 
ch™def
);

349  
ch™√l
;

350 
	}
}

351 
EXPORT_SYMBOL
(
©h9k_cmn_gë_ch™√l
);

353 
	$©h9k_cmn_cou¡_°ªams
(
chaömask
, 
max
)

355 
°ªams
 = 0;

358 i‡(++
°ªams
 =
max
)

360 } (
chaömask
 = chainmask & (chainmask - 1)));

362  
°ªams
;

363 
	}
}

364 
EXPORT_SYMBOL
(
©h9k_cmn_cou¡_°ªams
);

366 
	$©h9k_cmn_upd©e_txpow
(
©h_hw
 *
ah
, 
u16
 
cur_txpow
,

367 
u16
 
√w_txpow
, u16 *
txpowî
)

369 
©h_ªguœt‹y
 *
ªg
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

371 i‡(
ªg
->
powî_limô
 !
√w_txpow
)

372 
	`©h9k_hw_£t_txpowîlimô
(
ah
, 
√w_txpow
, 
Ál£
);

375 *
txpowî
 = 
ªg
->
max_powî_Àvñ
;

376 
	}
}

377 
EXPORT_SYMBOL
(
©h9k_cmn_upd©e_txpow
);

379 
	$©h9k_cmn_öô_¸y±o
(
©h_hw
 *
ah
)

381 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

382 
i
 = 0;

385 
comm⁄
->
keymax
 = 
AR_KEYTABLE_SIZE
;

393 i‡(
ah
->
misc_mode
 & 
AR_PCU_MIC_NEW_LOC_ENA
)

394 
comm⁄
->
¸y±_ˇps
 |
ATH_CRYPT_CAP_MIC_COMBINED
;

400 
i
 = 0; i < 
comm⁄
->
keymax
; i++)

401 
	`©h_hw_keyª£t
(
comm⁄
, (
u16
Ë
i
);

402 
	}
}

403 
EXPORT_SYMBOL
(
©h9k_cmn_öô_¸y±o
);

405 
__öô
 
	$©h9k_cmn_öô
()

408 
	}
}

409 
moduÀ_öô
(
©h9k_cmn_öô
);

411 
__exô
 
	$©h9k_cmn_exô
()

414 
	}
}

415 
moduÀ_exô
(
©h9k_cmn_exô
);

	@common.h

17 
	~<√t/mac80211.h
>

19 
	~"../©h.h
"

21 
	~"hw.h
"

22 
	~"hw-›s.h
"

24 
	~"comm⁄-öô.h
"

25 
	~"comm⁄-bóc⁄.h
"

26 
	~"comm⁄-debug.h
"

27 
	~"comm⁄-•e˘øl.h
"

31 
	#WME_BA_BMP_SIZE
 64

	)

32 
	#WME_MAX_BA
 
WME_BA_BMP_SIZE


	)

33 
	#ATH_TID_MAX_BUFS
 (2 * 
WME_MAX_BA
)

	)

35 
	#ATH_RSSI_DUMMY_MARKER
 127

	)

36 
	#ATH_RSSI_LPF_LEN
 10

	)

37 
	#RSSI_LPF_THRESHOLD
 -20

	)

38 
	#ATH_RSSI_EP_MULTIPLIER
 (1<<7)

	)

39 
	#ATH_EP_MUL
(
x
, 
mul
Ë((xË* (mul))

	)

40 
	#ATH_RSSI_IN
(
x
Ë(
	`ATH_EP_MUL
((x), 
ATH_RSSI_EP_MULTIPLIER
))

	)

41 
	#ATH_LPF_RSSI
(
x
, 
y
, 
Àn
) \

42 ((
x
 !
ATH_RSSI_DUMMY_MARKER
Ë? (((xË* ((
Àn
Ë- 1Ë+ (
y
)Ë/ (Àn)Ë: (y))

	)

43 
	#ATH_RSSI_LPF
(
x
, 
y
) do { \

44 i‡((
y
Ë>
RSSI_LPF_THRESHOLD
) \

45 
x
 = 
	`ATH_LPF_RSSI
((x), 
	`ATH_RSSI_IN
((
y
)), 
ATH_RSSI_LPF_LEN
); \

46 } 0)

	)

47 
	#ATH_EP_RND
(
x
, 
mul
) \

48 (((
x
Ë+ ((
mul
)/2)Ë/ (mul))

	)

50 
	#IEEE80211_MS_TO_TU
(
x
Ë(((xË* 1000Ë/ 1024)

	)

52 
	s©h_bóc⁄_c⁄fig
 {

53 
	mbóc⁄_öãrvÆ
;

54 
u16
 
	mdtim_≥riod
;

55 
u16
 
	mbmiss_timeout
;

56 
u8
 
	mdtim_cou¡
;

57 
u8
 
	míabÀ_bóc⁄
;

58 
boﬁ
 
	mibss_¸ót‹
;

59 
u32
 
	m√xâbâ
;

60 
u32
 
	mötvÆ
;

63 
boﬁ
 
©h9k_cmn_rx_ac˚±
(
©h_comm⁄
 *
comm⁄
,

64 
õì80211_hdr
 *
hdr
,

65 
õì80211_rx_°©us
 *
rxs
,

66 
©h_rx_°©us
 *
rx_°©s
,

67 
boﬁ
 *
de¸y±_îr‹
,

68 
rxfûãr
);

69 
©h9k_cmn_rx_skb_po°¥o˚ss
(
©h_comm⁄
 *
comm⁄
,

70 
sk_buff
 *
skb
,

71 
©h_rx_°©us
 *
rx_°©s
,

72 
õì80211_rx_°©us
 *
rxs
,

73 
boﬁ
 
de¸y±_îr‹
);

74 
©h9k_cmn_¥o˚ss_øã
(
©h_comm⁄
 *
comm⁄
,

75 
õì80211_hw
 *
hw
,

76 
©h_rx_°©us
 *
rx_°©s
,

77 
õì80211_rx_°©us
 *
rxs
);

78 
©h9k_cmn_¥o˚ss_rssi
(
©h_comm⁄
 *
comm⁄
,

79 
õì80211_hw
 *
hw
,

80 
©h_rx_°©us
 *
rx_°©s
,

81 
õì80211_rx_°©us
 *
rxs
);

82 
©h9k_cmn_gë_hw_¸y±o_keyty≥
(
sk_buff
 *
skb
);

83 
©h9k_ch™√l
 *
©h9k_cmn_gë_ch™√l
(
õì80211_hw
 *
hw
,

84 
©h_hw
 *
ah
,

85 
cfg80211_ch™_def
 *
ch™def
);

86 
©h9k_cmn_cou¡_°ªams
(
chaömask
, 
max
);

87 
©h9k_cmn_btc€x_bt_°omp
(
©h_comm⁄
 *
comm⁄
,

88 
©h_°omp_ty≥
 
°omp_ty≥
);

89 
©h9k_cmn_upd©e_txpow
(
©h_hw
 *
ah
, 
u16
 
cur_txpow
,

90 
u16
 
√w_txpow
, u16 *
txpowî
);

91 
©h9k_cmn_öô_¸y±o
(
©h_hw
 *
ah
);

	@debug.c

17 
	~<löux/¶ab.h
>

18 
	~<löux/vmÆloc.h
>

19 
	~<löux/exp‹t.h
>

20 
	~<asm/u«lig√d.h
>

22 
	~"©h9k.h
"

24 
	#REG_WRITE_D
(
_ah
, 
_ªg
, 
_vÆ
) \

25 
	`©h9k_hw_comm⁄
(
_ah
)->
›s
->
	`wrôe
((_ah), (
_vÆ
), (
_ªg
))

	)

26 
	#REG_READ_D
(
_ah
, 
_ªg
) \

27 
	`©h9k_hw_comm⁄
(
_ah
)->
›s
->
	`ªad
((_ah), (
_ªg
))

	)

29 
	$©h9k_debug_sync_ˇu£
(
©h_so·c
 *
sc
, 
u32
 
sync_ˇu£
)

31 i‡(
sync_ˇu£
)

32 
sc
->
debug
.
°©s
.
i°©s
.
sync_ˇu£_Æl
++;

33 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RTC_IRQ
)

34 
sc
->
debug
.
°©s
.
i°©s
.
sync_πc_úq
++;

35 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_MAC_IRQ
)

36 
sc
->
debug
.
°©s
.
i°©s
.
sync_mac_úq
++;

37 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_EEPROM_ILLEGAL_ACCESS
)

38 
sc
->
debug
.
°©s
.
i°©s
.
ì¥om_ûÀgÆ_ac˚ss
++;

39 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_APB_TIMEOUT
)

40 
sc
->
debug
.
°©s
.
i°©s
.
≠b_timeout
++;

41 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_PCI_MODE_CONFLICT
)

42 
sc
->
debug
.
°©s
.
i°©s
.
pci_mode_c⁄Êi˘
++;

43 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_HOST1_FATAL
)

44 
sc
->
debug
.
°©s
.
i°©s
.
ho°1_Áèl
++;

45 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_HOST1_PERR
)

46 
sc
->
debug
.
°©s
.
i°©s
.
ho°1_≥º
++;

47 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_TRCV_FIFO_PERR
)

48 
sc
->
debug
.
°©s
.
i°©s
.
åcv_fifo_≥º
++;

49 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_EP
)

50 
sc
->
debug
.
°©s
.
i°©s
.
ødm_˝l_ï
++;

51 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_DLLP_ABORT
)

52 
sc
->
debug
.
°©s
.
i°©s
.
ødm_˝l_dŒp_ab‹t
++;

53 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_TLP_ABORT
)

54 
sc
->
debug
.
°©s
.
i°©s
.
ødm_˝l_ép_ab‹t
++;

55 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_ECRC_ERR
)

56 
sc
->
debug
.
°©s
.
i°©s
.
ødm_˝l_e¸c_îr
++;

57 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_RADM_CPL_TIMEOUT
)

58 
sc
->
debug
.
°©s
.
i°©s
.
ødm_˝l_timeout
++;

59 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_LOCAL_TIMEOUT
)

60 
sc
->
debug
.
°©s
.
i°©s
.
loˇl_timeout
++;

61 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_PM_ACCESS
)

62 
sc
->
debug
.
°©s
.
i°©s
.
pm_ac˚ss
++;

63 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_MAC_AWAKE
)

64 
sc
->
debug
.
°©s
.
i°©s
.
mac_awake
++;

65 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_MAC_ASLEEP
)

66 
sc
->
debug
.
°©s
.
i°©s
.
mac_a¶ìp
++;

67 i‡(
sync_ˇu£
 & 
AR_INTR_SYNC_MAC_SLEEP_ACCESS
)

68 
sc
->
debug
.
°©s
.
i°©s
.
mac_¶ìp_ac˚ss
++;

69 
	}
}

71 
ssize_t
 
	$©h9k_debugfs_ªad_buf
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

72 
size_t
 
cou¡
, 
loff_t
 *
µos
)

74 
u8
 *
buf
 = 
fûe
->
¥iv©e_d©a
;

75  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
	`°æí
(buf));

76 
	}
}

78 
	$©h9k_debugfs_ªÀa£_buf
(
öode
 *öode, 
fûe
 *file)

80 
	`v‰ì
(
fûe
->
¥iv©e_d©a
);

82 
	}
}

84 #ifde‡
CONFIG_ATH_DEBUG


86 
ssize_t
 
	$ªad_fûe_debug
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

87 
size_t
 
cou¡
, 
loff_t
 *
µos
)

89 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

90 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

91 
buf
[32];

92 
Àn
;

94 
Àn
 = 
	`•rötf
(
buf
, "0x%08x\n", 
comm⁄
->
debug_mask
);

95  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

96 
	}
}

98 
ssize_t
 
	$wrôe_fûe_debug
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

99 
size_t
 
cou¡
, 
loff_t
 *
µos
)

101 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

102 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

103 
mask
;

104 
buf
[32];

105 
ssize_t
 
Àn
;

107 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

108 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

109  -
EFAULT
;

111 
buf
[
Àn
] = '\0';

112 i‡(
	`k°πoul
(
buf
, 0, &
mask
))

113  -
EINVAL
;

115 
comm⁄
->
debug_mask
 = 
mask
;

116  
cou¡
;

117 
	}
}

119 c⁄° 
fûe_›î©i⁄s
 
	gf›s_debug
 = {

120 .
ªad
 = 
ªad_fûe_debug
,

121 .
	gwrôe
 = 
wrôe_fûe_debug
,

122 .
	g›í
 = 
sim∂e_›í
,

123 .
	gow√r
 = 
THIS_MODULE
,

124 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

129 
	#DMA_BUF_LEN
 1024

	)

132 
ssize_t
 
	$ªad_fûe_™i
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

133 
size_t
 
cou¡
, 
loff_t
 *
µos
)

135 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

136 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

137 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

138 
Àn
 = 0;

139 c⁄° 
size
 = 1024;

140 
ssize_t
 
ªtvÆ
 = 0;

141 *
buf
;

142 
i
;

144 c⁄° *
«me
;

145 
vÆ
;

146 } 
™i_öfo
[] = {

147 { "ANI RESET", 
ah
->
°©s
.
a°_™i_ª£t
 },

148 { "OFDM LEVEL", 
ah
->
™i
.
ofdmNoi£ImmunôyLevñ
 },

149 { "CCK LEVEL", 
ah
->
™i
.
cckNoi£ImmunôyLevñ
 },

150 { "SPUR UP", 
ah
->
°©s
.
a°_™i_•urup
 },

151 { "SPUR DOWN", 
ah
->
°©s
.
a°_™i_•urup
 },

152 { "OFDM WS-DET ON", 
ah
->
°©s
.
a°_™i_ofdm⁄
 },

153 { "OFDM WS-DET OFF", 
ah
->
°©s
.
a°_™i_ofdmoff
 },

154 { "MRC-CCK ON", 
ah
->
°©s
.
a°_™i_ccklow
 },

155 { "MRC-CCK OFF", 
ah
->
°©s
.
a°_™i_cckhigh
 },

156 { "FIR-STEP UP", 
ah
->
°©s
.
a°_™i_°ïup
 },

157 { "FIR-STEP DOWN", 
ah
->
°©s
.
a°_™i_°ïdown
 },

158 { "INV LISTENTIME", 
ah
->
°©s
.
a°_™i_ eg_‹_lzîo
 },

159 { "OFDM ERRORS", 
ah
->
°©s
.
a°_™i_ofdmîrs
 },

160 { "CCK ERRORS", 
ah
->
°©s
.
a°_™i_cckîrs
 },

163 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

164 i‡(
buf
 =
NULL
)

165  -
ENOMEM
;

167 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%15s: %s\n", "ANI",

168 
comm⁄
->
dißbÀ_™i
 ? "DISABLED" : "ENABLED");

170 i‡(
comm⁄
->
dißbÀ_™i
)

171 
exô
;

173 
i
 = 0; i < 
	`ARRAY_SIZE
(
™i_öfo
); i++)

174 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%15s: %u\n",

175 
™i_öfo
[
i
].
«me
,áni_öfo[i].
vÆ
);

177 
exô
:

178 i‡(
Àn
 > 
size
)

179 
Àn
 = 
size
;

181 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

182 
	`k‰ì
(
buf
);

184  
ªtvÆ
;

185 
	}
}

187 
ssize_t
 
	$wrôe_fûe_™i
(
fûe
 *file,

188 c⁄° 
__u£r
 *
u£r_buf
,

189 
size_t
 
cou¡
, 
loff_t
 *
µos
)

191 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

192 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

193 
™i
;

194 
buf
[32];

195 
ssize_t
 
Àn
;

197 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

198 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

199  -
EFAULT
;

201 
buf
[
Àn
] = '\0';

202 i‡(
	`k°πoul
(
buf
, 0, &
™i
))

203  -
EINVAL
;

205 i‡(
™i
 > 1)

206  -
EINVAL
;

208 
comm⁄
->
dißbÀ_™i
 = !
™i
;

210 i‡(
comm⁄
->
dißbÀ_™i
) {

211 
	`˛ór_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
);

212 
	`©h_°›_™i
(
sc
);

214 
	`©h_check_™i
(
sc
);

217  
cou¡
;

218 
	}
}

220 c⁄° 
fûe_›î©i⁄s
 
	gf›s_™i
 = {

221 .
ªad
 = 
ªad_fûe_™i
,

222 .
	gwrôe
 = 
wrôe_fûe_™i
,

223 .
	g›í
 = 
sim∂e_›í
,

224 .
	gow√r
 = 
THIS_MODULE
,

225 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

228 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


230 
ssize_t
 
	$ªad_fûe_bt_™t_divîsôy
(
fûe
 *file,

231 
__u£r
 *
u£r_buf
,

232 
size_t
 
cou¡
, 
loff_t
 *
µos
)

234 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

235 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

236 
buf
[32];

237 
Àn
;

239 
Àn
 = 
	`•rötf
(
buf
, "%d\n", 
comm⁄
->
bt_™t_divîsôy
);

240  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

241 
	}
}

243 
ssize_t
 
	$wrôe_fûe_bt_™t_divîsôy
(
fûe
 *file,

244 c⁄° 
__u£r
 *
u£r_buf
,

245 
size_t
 
cou¡
, 
loff_t
 *
µos
)

247 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

248 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

249 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
sc
->
sc_ah
->
ˇps
;

250 
bt_™t_divîsôy
;

251 
buf
[32];

252 
ssize_t
 
Àn
;

254 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

255 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

256  -
EFAULT
;

258 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_BT_ANT_DIV
))

259 
exô
;

261 
buf
[
Àn
] = '\0';

262 i‡(
	`k°πoul
(
buf
, 0, &
bt_™t_divîsôy
))

263  -
EINVAL
;

265 
comm⁄
->
bt_™t_divîsôy
 = !!bt_ant_diversity;

266 
	`©h9k_ps_wakeup
(
sc
);

267 
	`©h9k_hw_£t_bt_™t_divîsôy
(
sc
->
sc_ah
, 
comm⁄
->
bt_™t_divîsôy
);

268 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Enable WLAN/BT RX Antenna diversity: %d\n",

269 
comm⁄
->
bt_™t_divîsôy
);

270 
	`©h9k_ps_ª°‹e
(
sc
);

271 
exô
:

272  
cou¡
;

273 
	}
}

275 c⁄° 
fûe_›î©i⁄s
 
	gf›s_bt_™t_divîsôy
 = {

276 .
ªad
 = 
ªad_fûe_bt_™t_divîsôy
,

277 .
	gwrôe
 = 
wrôe_fûe_bt_™t_divîsôy
,

278 .
	g›í
 = 
sim∂e_›í
,

279 .
	gow√r
 = 
THIS_MODULE
,

280 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

285 
	$©h9k_debug_°©_™t
(
©h_so·c
 *
sc
,

286 
©h_hw_™tcomb_c⁄f
 *
div_™t_c⁄f
,

287 
maö_rssi_avg
, 
Æt_rssi_avg
)

289 
©h_™ã¬a_°©s
 *
as_maö
 = &
sc
->
debug
.
°©s
.
™t_°©s
[
ANT_MAIN
];

290 
©h_™ã¬a_°©s
 *
as_Æt
 = &
sc
->
debug
.
°©s
.
™t_°©s
[
ANT_ALT
];

292 
as_maö
->
 a_©ãm±_˙t
[
div_™t_c⁄f
->
maö_ a_c⁄f
]++;

293 
as_Æt
->
 a_©ãm±_˙t
[
div_™t_c⁄f
->
Æt_ a_c⁄f
]++;

295 
as_maö
->
rssi_avg
 = 
maö_rssi_avg
;

296 
as_Æt
->
rssi_avg
 = 
Æt_rssi_avg
;

297 
	}
}

299 
ssize_t
 
	$ªad_fûe_™ã¬a_divîsôy
(
fûe
 *file,

300 
__u£r
 *
u£r_buf
,

301 
size_t
 
cou¡
, 
loff_t
 *
µos
)

303 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

304 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

305 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

306 
©h_™ã¬a_°©s
 *
as_maö
 = &
sc
->
debug
.
°©s
.
™t_°©s
[
ANT_MAIN
];

307 
©h_™ã¬a_°©s
 *
as_Æt
 = &
sc
->
debug
.
°©s
.
™t_°©s
[
ANT_ALT
];

308 
©h_hw_™tcomb_c⁄f
 
div_™t_c⁄f
;

309 
Àn
 = 0;

310 c⁄° 
size
 = 1024;

311 
ssize_t
 
ªtvÆ
 = 0;

312 *
buf
;

313 c⁄° *
 a_c⁄f_°r
[4] = {

317 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

318 i‡(
buf
 =
NULL
)

319  -
ENOMEM
;

321 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
)) {

322 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%s\n",

324 
exô
;

327 
	`©h9k_ps_wakeup
(
sc
);

328 
	`©h9k_hw_™tdiv_comb_c⁄f_gë
(
ah
, &
div_™t_c⁄f
);

329 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Current MAIN config : %s\n",

330 
 a_c⁄f_°r
[
div_™t_c⁄f
.
maö_ a_c⁄f
]);

331 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Current ALT config : %s\n",

332 
 a_c⁄f_°r
[
div_™t_c⁄f
.
Æt_ a_c⁄f
]);

333 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Average MAIN RSSI : %d\n",

334 
as_maö
->
rssi_avg
);

335 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Average ALT RSSI : %d\n\n",

336 
as_Æt
->
rssi_avg
);

337 
	`©h9k_ps_ª°‹e
(
sc
);

339 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Packet Receive Cnt:\n");

340 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "-------------------\n");

342 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%30s%15s\n",

344 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

346 
as_maö
->
ªcv_˙t
,

347 
as_Æt
->
ªcv_˙t
);

348 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

350 
as_maö
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA1
],

351 
as_Æt
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA1
]);

352 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

354 
as_maö
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA2
],

355 
as_Æt
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA2
]);

356 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

358 
as_maö
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
],

359 
as_Æt
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
]);

360 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

362 
as_maö
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
],

363 
as_Æt
->
 a_ªcv_˙t
[
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
]);

365 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "\nLNA Config Attempts:\n");

366 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "--------------------\n");

368 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%30s%15s\n",

370 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

372 
as_maö
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA1
],

373 
as_Æt
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA1
]);

374 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

376 
as_maö
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA2
],

377 
as_Æt
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA2
]);

378 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

380 
as_maö
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
],

381 
as_Æt
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
]);

382 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%-14s:%15d%15d\n",

384 
as_maö
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
],

385 
as_Æt
->
 a_©ãm±_˙t
[
ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
]);

387 
exô
:

388 i‡(
Àn
 > 
size
)

389 
Àn
 = 
size
;

391 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

392 
	`k‰ì
(
buf
);

394  
ªtvÆ
;

395 
	}
}

397 c⁄° 
fûe_›î©i⁄s
 
	gf›s_™ã¬a_divîsôy
 = {

398 .
ªad
 = 
ªad_fûe_™ã¬a_divîsôy
,

399 .
	g›í
 = 
sim∂e_›í
,

400 .
	gow√r
 = 
THIS_MODULE
,

401 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

404 
	$ªad_fûe_dma
(
£q_fûe
 *
fûe
, *
d©a
)

406 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

407 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

408 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

409 
u32
 
vÆ
[
ATH9K_NUM_DMA_DEBUG_REGS
];

410 
i
, 
qcuOff£t
 = 0, 
dcuOff£t
 = 0;

411 
u32
 *
qcuBa£
 = &
vÆ
[0], *
dcuBa£
 = &val[4];

413 
	`©h9k_ps_wakeup
(
sc
);

415 
	`REG_WRITE_D
(
ah
, 
AR_MACMISC
,

416 ((
AR_MACMISC_DMA_OBS_LINE_8
 << 
AR_MACMISC_DMA_OBS_S
) |

417 (
AR_MACMISC_MISC_OBS_BUS_1
 <<

418 
AR_MACMISC_MISC_OBS_BUS_MSB_S
)));

420 
	`£q_puts
(
fûe
, "Raw DMA Debug values:\n");

422 
i
 = 0; i < 
ATH9K_NUM_DMA_DEBUG_REGS
; i++) {

423 i‡(
i
 % 4 == 0)

424 
	`£q_puts
(
fûe
, "\n");

426 
vÆ
[
i
] = 
	`REG_READ_D
(
ah
, 
AR_DMADBG_0
 + (ò* (
u32
)));

427 
	`£q_¥ötf
(
fûe
, "%d: %08x ", 
i
, 
vÆ
[i]);

430 
	`£q_puts
(
fûe
, "\n\n");

431 
	`£q_puts
(
fûe
, "Num QCU: chain_st fsp_ok fsp_st DCU: chain_st\n");

433 
i
 = 0; i < 
ATH9K_NUM_QUEUES
; i++, 
qcuOff£t
 +4, 
dcuOff£t
 += 5) {

434 i‡(
i
 == 8) {

435 
qcuOff£t
 = 0;

436 
qcuBa£
++;

439 i‡(
i
 == 6) {

440 
dcuOff£t
 = 0;

441 
dcuBa£
++;

444 
	`£q_¥ötf
(
fûe
, "%2d %2x %1x %2x %2x\n",

445 
i
, (*
qcuBa£
 & (0x7 << 
qcuOff£t
)) >> qcuOffset,

446 (*
qcuBa£
 & (0x8 << 
qcuOff£t
)) >> (qcuOffset + 3),

447 (
vÆ
[2] & (0x7 << (
i
 * 3))) >> (i * 3),

448 (*
dcuBa£
 & (0x1‡<< 
dcuOff£t
)) >> dcuOffset);

451 
	`£q_puts
(
fûe
, "\n");

453 
	`£q_¥ötf
(
fûe
, "qcu_stitch state: %2x qcu_fetch state: %2x\n",

454 (
vÆ
[3] & 0x003c0000) >> 18, (val[3] & 0x03c00000) >> 22);

455 
	`£q_¥ötf
(
fûe
, "qcu_complete state: %2x dcu_complete state: %2x\n",

456 (
vÆ
[3] & 0x1c000000) >> 26, (val[6] & 0x3));

457 
	`£q_¥ötf
(
fûe
, "dcu_arb state: %2x dcu_fp state: %2x\n",

458 (
vÆ
[5] & 0x06000000) >> 25, (val[5] & 0x38000000) >> 27);

459 
	`£q_¥ötf
(
fûe
, "chan_idle_dur: %3d chan_idle_dur_valid: %1d\n",

460 (
vÆ
[6] & 0x000003fc) >> 2, (val[6] & 0x00000400) >> 10);

461 
	`£q_¥ötf
(
fûe
, "txfifo_valid_0: %1dÅxfifo_valid_1: %1d\n",

462 (
vÆ
[6] & 0x00000800) >> 11, (val[6] & 0x00001000) >> 12);

463 
	`£q_¥ötf
(
fûe
, "txfifo_dcu_num_0: %2dÅxfifo_dcu_num_1: %2d\n",

464 (
vÆ
[6] & 0x0001e000) >> 13, (val[6] & 0x001e0000) >> 17);

466 
	`£q_¥ötf
(
fûe
, "pcu ob£rve: 0x%x\n", 
	`REG_READ_D
(
ah
, 
AR_OBS_BUS_1
));

467 
	`£q_¥ötf
(
fûe
, "AR_CR: 0x%x\n", 
	`REG_READ_D
(
ah
, 
AR_CR
));

469 
	`©h9k_ps_ª°‹e
(
sc
);

472 
	}
}

474 
	$©h_debug_°©_öãºu±
(
©h_so·c
 *
sc
, 
©h9k_öt
 
°©us
)

476 i‡(
°©us
)

477 
sc
->
debug
.
°©s
.
i°©s
.
tŸÆ
++;

478 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

479 i‡(
°©us
 & 
ATH9K_INT_RXLP
)

480 
sc
->
debug
.
°©s
.
i°©s
.
rxÕ
++;

481 i‡(
°©us
 & 
ATH9K_INT_RXHP
)

482 
sc
->
debug
.
°©s
.
i°©s
.
rxhp
++;

483 i‡(
°©us
 & 
ATH9K_INT_BB_WATCHDOG
)

484 
sc
->
debug
.
°©s
.
i°©s
.
bb_w©chdog
++;

486 i‡(
°©us
 & 
ATH9K_INT_RX
)

487 
sc
->
debug
.
°©s
.
i°©s
.
rxok
++;

489 i‡(
°©us
 & 
ATH9K_INT_RXEOL
)

490 
sc
->
debug
.
°©s
.
i°©s
.
rxeﬁ
++;

491 i‡(
°©us
 & 
ATH9K_INT_RXORN
)

492 
sc
->
debug
.
°©s
.
i°©s
.
rx‹n
++;

493 i‡(
°©us
 & 
ATH9K_INT_TX
)

494 
sc
->
debug
.
°©s
.
i°©s
.
txok
++;

495 i‡(
°©us
 & 
ATH9K_INT_TXURN
)

496 
sc
->
debug
.
°©s
.
i°©s
.
txu∫
++;

497 i‡(
°©us
 & 
ATH9K_INT_RXPHY
)

498 
sc
->
debug
.
°©s
.
i°©s
.
rxphyîr
++;

499 i‡(
°©us
 & 
ATH9K_INT_RXKCM
)

500 
sc
->
debug
.
°©s
.
i°©s
.
rx_keyˇche_miss
++;

501 i‡(
°©us
 & 
ATH9K_INT_SWBA
)

502 
sc
->
debug
.
°©s
.
i°©s
.
swba
++;

503 i‡(
°©us
 & 
ATH9K_INT_BMISS
)

504 
sc
->
debug
.
°©s
.
i°©s
.
bmiss
++;

505 i‡(
°©us
 & 
ATH9K_INT_BNR
)

506 
sc
->
debug
.
°©s
.
i°©s
.
bƒ
++;

507 i‡(
°©us
 & 
ATH9K_INT_CST
)

508 
sc
->
debug
.
°©s
.
i°©s
.
c°
++;

509 i‡(
°©us
 & 
ATH9K_INT_GTT
)

510 
sc
->
debug
.
°©s
.
i°©s
.
gâ
++;

511 i‡(
°©us
 & 
ATH9K_INT_TIM
)

512 
sc
->
debug
.
°©s
.
i°©s
.
tim
++;

513 i‡(
°©us
 & 
ATH9K_INT_CABEND
)

514 
sc
->
debug
.
°©s
.
i°©s
.
ˇbíd
++;

515 i‡(
°©us
 & 
ATH9K_INT_DTIMSYNC
)

516 
sc
->
debug
.
°©s
.
i°©s
.
dtimsync
++;

517 i‡(
°©us
 & 
ATH9K_INT_DTIM
)

518 
sc
->
debug
.
°©s
.
i°©s
.
dtim
++;

519 i‡(
°©us
 & 
ATH9K_INT_TSFOOR
)

520 
sc
->
debug
.
°©s
.
i°©s
.
tsfo‹
++;

521 i‡(
°©us
 & 
ATH9K_INT_MCI
)

522 
sc
->
debug
.
°©s
.
i°©s
.
mci
++;

523 i‡(
°©us
 & 
ATH9K_INT_GENTIMER
)

524 
sc
->
debug
.
°©s
.
i°©s
.
gí_timî
++;

525 
	}
}

527 
	$ªad_fûe_öãºu±
(
£q_fûe
 *
fûe
, *
d©a
)

529 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

530 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

532 
	#PR_IS
(
a
, 
s
) \

534 
	`£q_¥ötf
(
fûe
, "%21s: %10u\n", 
a
, \

535 
sc
->
debug
.
°©s
.
i°©s
.
s
); \

536 } 0)

	)

538 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

539 
	`PR_IS
("RXLP", 
rxÕ
);

540 
	`PR_IS
("RXHP", 
rxhp
);

541 
	`PR_IS
("WATHDOG", 
bb_w©chdog
);

543 
	`PR_IS
("RX", 
rxok
);

545 
	`PR_IS
("RXEOL", 
rxeﬁ
);

546 
	`PR_IS
("RXORN", 
rx‹n
);

547 
	`PR_IS
("TX", 
txok
);

548 
	`PR_IS
("TXURN", 
txu∫
);

549 
	`PR_IS
("MIB", 
mib
);

550 
	`PR_IS
("RXPHY", 
rxphyîr
);

551 
	`PR_IS
("RXKCM", 
rx_keyˇche_miss
);

552 
	`PR_IS
("SWBA", 
swba
);

553 
	`PR_IS
("BMISS", 
bmiss
);

554 
	`PR_IS
("BNR", 
bƒ
);

555 
	`PR_IS
("CST", 
c°
);

556 
	`PR_IS
("GTT", 
gâ
);

557 
	`PR_IS
("TIM", 
tim
);

558 
	`PR_IS
("CABEND", 
ˇbíd
);

559 
	`PR_IS
("DTIMSYNC", 
dtimsync
);

560 
	`PR_IS
("DTIM", 
dtim
);

561 
	`PR_IS
("TSFOOR", 
tsfo‹
);

562 
	`PR_IS
("MCI", 
mci
);

563 
	`PR_IS
("GENTIMER", 
gí_timî
);

564 
	`PR_IS
("TOTAL", 
tŸÆ
);

566 
	`£q_puts
(
fûe
, "SYNC_CAUSE stats:\n");

568 
	`PR_IS
("Sync-AŒ", 
sync_ˇu£_Æl
);

569 
	`PR_IS
("RTC-IRQ", 
sync_πc_úq
);

570 
	`PR_IS
("MAC-IRQ", 
sync_mac_úq
);

571 
	`PR_IS
("EEPROM-IŒegÆ-Ac˚ss", 
ì¥om_ûÀgÆ_ac˚ss
);

572 
	`PR_IS
("APB-Timeout", 
≠b_timeout
);

573 
	`PR_IS
("PCI-Mode-C⁄Êi˘", 
pci_mode_c⁄Êi˘
);

574 
	`PR_IS
("HOST1-F©Æ", 
ho°1_Áèl
);

575 
	`PR_IS
("HOST1-Pîr", 
ho°1_≥º
);

576 
	`PR_IS
("TRCV-FIFO-Pîr", 
åcv_fifo_≥º
);

577 
	`PR_IS
("RADM-CPL-EP", 
ødm_˝l_ï
);

578 
	`PR_IS
("RADM-CPL-DLLP-Ab‹t", 
ødm_˝l_dŒp_ab‹t
);

579 
	`PR_IS
("RADM-CPL-TLP-Ab‹t", 
ødm_˝l_ép_ab‹t
);

580 
	`PR_IS
("RADM-CPL-ECRC-Eº", 
ødm_˝l_e¸c_îr
);

581 
	`PR_IS
("RADM-CPL-Timeout", 
ødm_˝l_timeout
);

582 
	`PR_IS
("Loˇl-Bus-Timeout", 
loˇl_timeout
);

583 
	`PR_IS
("PM-Ac˚ss", 
pm_ac˚ss
);

584 
	`PR_IS
("MAC-Awake", 
mac_awake
);

585 
	`PR_IS
("MAC-A¶ìp", 
mac_a¶ìp
);

586 
	`PR_IS
("MAC-SÀï-Ac˚ss", 
mac_¶ìp_ac˚ss
);

589 
	}
}

591 
	$ªad_fûe_xmô
(
£q_fûe
 *
fûe
, *
d©a
)

593 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

594 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

596 
	`£q_¥ötf
(
fûe
, "%30s %10s%10s%10s\n\n", "BE", "BK", "VI", "VO");

598 
	`PR
("MPDU†Queued: ", 
queued
);

599 
	`PR
("MPDU†Com∂ëed: ", 
com∂ëed
);

600 
	`PR
("MPDU†XRërõd: ", 
xªåõs
);

601 
	`PR
("Aggªg©es: ", 
a_aggr
);

602 
	`PR
("AMPDU†Queued HW:", 
a_queued_hw
);

603 
	`PR
("AMPDU†Queued SW:", 
a_queued_sw
);

604 
	`PR
("AMPDU†Com∂ëed:", 
a_com∂ëed
);

605 
	`PR
("AMPDU†Rërõd: ", 
a_ªåõs
);

606 
	`PR
("AMPDU†XRërõd: ", 
a_xªåõs
);

607 
	`PR
("TXERR Fûãªd: ", 
txîr_fûãªd
);

608 
	`PR
("FIFO Undîrun: ", 
fifo_undîrun
);

609 
	`PR
("TXOP Ex˚eded: ", 
xtx›
);

610 
	`PR
("TXTIMER Expúy: ", 
timî_exp
);

611 
	`PR
("DESC CFG Eº‹: ", 
desc_cfg_îr
);

612 
	`PR
("DATA Undîrun: ", 
d©a_undîrun
);

613 
	`PR
("DELIM Undîrun: ", 
dñim_undîrun
);

614 
	`PR
("TX-Pkts-AŒ: ", 
tx_pkts_Æl
);

615 
	`PR
("TX-Byãs-AŒ: ", 
tx_byãs_Æl
);

616 
	`PR
("HW-put-tx-buf: ", 
puâxbuf
);

617 
	`PR
("HW-tx-°¨t: ", 
tx°¨t
);

618 
	`PR
("HW-tx-¥oc-desc: ", 
tx¥ocdesc
);

619 
	`PR
("TX-Faûed: ", 
txÁûed
);

622 
	}
}

624 
	$¥öt_queue
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

625 
£q_fûe
 *
fûe
)

627 
	`©h_txq_lock
(
sc
, 
txq
);

629 
	`£q_¥ötf
(
fûe
, "%s: %d ", "qnum", 
txq
->
axq_qnum
);

630 
	`£q_¥ötf
(
fûe
, "%s: %2d ", "qdïth", 
txq
->
axq_dïth
);

631 
	`£q_¥ötf
(
fûe
, "%s: %2d ", "ampdu-dïth", 
txq
->
axq_ampdu_dïth
);

632 
	`£q_¥ötf
(
fûe
, "%s: %3d ", "≥ndög", 
txq
->
≥ndög_‰ames
);

633 
	`£q_¥ötf
(
fûe
, "%s: %d\n", "°›≥d", 
txq
->
°›≥d
);

635 
	`©h_txq_u∆ock
(
sc
, 
txq
);

636 
	}
}

638 
	$ªad_fûe_queues
(
£q_fûe
 *
fûe
, *
d©a
)

640 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

641 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

642 
©h_txq
 *
txq
;

643 
i
;

644 c⁄° *
q«me
[4] = {

648 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++) {

649 
txq
 = 
sc
->
tx
.
txq_m≠
[
i
];

650 
	`£q_¥ötf
(
fûe
, "(%s): ", 
q«me
[
i
]);

651 
	`¥öt_queue
(
sc
, 
txq
, 
fûe
);

654 
	`£q_puts
(
fûe
, "(CAB): ");

655 
	`¥öt_queue
(
sc
, sc->
bóc⁄
.
ˇbq
, 
fûe
);

658 
	}
}

660 
	$ªad_fûe_misc
(
£q_fûe
 *
fûe
, *
d©a
)

662 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

663 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

664 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

665 
©h9k_vif_ôî_d©a
 
ôî_d©a
;

666 
©h_ch™˘x
 *
˘x
;

667 
ªg
;

668 
u32
 
rxfûãr
, 
i
;

670 
	`£q_¥ötf
(
fûe
, "BSSID: %pM\n", 
comm⁄
->
curbssid
);

671 
	`£q_¥ötf
(
fûe
, "BSSID-MASK: %pM\n", 
comm⁄
->
bssidmask
);

672 
	`£q_¥ötf
(
fûe
, "OPMODE: %s\n",

673 
	`©h_›mode_to_°rög
(
sc
->
sc_ah
->
›mode
));

675 
	`©h9k_ps_wakeup
(
sc
);

676 
rxfûãr
 = 
	`©h9k_hw_gërxfûãr
(
sc
->
sc_ah
);

677 
	`©h9k_ps_ª°‹e
(
sc
);

679 
	`£q_¥ötf
(
fûe
, "RXFILTER: 0x%x", 
rxfûãr
);

681 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_UCAST
)

682 
	`£q_puts
(
fûe
, " UCAST");

683 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_MCAST
)

684 
	`£q_puts
(
fûe
, " MCAST");

685 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_BCAST
)

686 
	`£q_puts
(
fûe
, " BCAST");

687 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_CONTROL
)

688 
	`£q_puts
(
fûe
, " CONTROL");

689 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_BEACON
)

690 
	`£q_puts
(
fûe
, " BEACON");

691 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_PROM
)

692 
	`£q_puts
(
fûe
, " PROM");

693 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_PROBEREQ
)

694 
	`£q_puts
(
fûe
, " PROBEREQ");

695 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_PHYERR
)

696 
	`£q_puts
(
fûe
, " PHYERR");

697 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_MYBEACON
)

698 
	`£q_puts
(
fûe
, " MYBEACON");

699 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_COMP_BAR
)

700 
	`£q_puts
(
fûe
, " COMP_BAR");

701 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_PSPOLL
)

702 
	`£q_puts
(
fûe
, " PSPOLL");

703 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_PHYRADAR
)

704 
	`£q_puts
(
fûe
, " PHYRADAR");

705 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_MCAST_BCAST_ALL
)

706 
	`£q_puts
(
fûe
, " MCAST_BCAST_ALL");

707 i‡(
rxfûãr
 & 
ATH9K_RX_FILTER_CONTROL_WRAPPER
)

708 
	`£q_puts
(
fûe
, " CONTROL_WRAPPER");

710 
	`£q_puts
(
fûe
, "\n");

712 
ªg
 = 
sc
->
sc_ah
->
imask
;

714 
	`£q_¥ötf
(
fûe
, "INTERRUPT-MASK: 0x%x", 
ªg
);

716 i‡(
ªg
 & 
ATH9K_INT_SWBA
)

717 
	`£q_puts
(
fûe
, " SWBA");

718 i‡(
ªg
 & 
ATH9K_INT_BMISS
)

719 
	`£q_puts
(
fûe
, " BMISS");

720 i‡(
ªg
 & 
ATH9K_INT_CST
)

721 
	`£q_puts
(
fûe
, " CST");

722 i‡(
ªg
 & 
ATH9K_INT_RX
)

723 
	`£q_puts
(
fûe
, " RX");

724 i‡(
ªg
 & 
ATH9K_INT_RXHP
)

725 
	`£q_puts
(
fûe
, " RXHP");

726 i‡(
ªg
 & 
ATH9K_INT_RXLP
)

727 
	`£q_puts
(
fûe
, " RXLP");

728 i‡(
ªg
 & 
ATH9K_INT_BB_WATCHDOG
)

729 
	`£q_puts
(
fûe
, " BB_WATCHDOG");

731 
	`£q_puts
(
fûe
, "\n");

733 
i
 = 0;

734 
	`©h_f‹_óch_ch™˘x
(
sc
, 
˘x
) {

735 i‡(
	`li°_em±y
(&
˘x
->
vifs
))

737 
	`©h9k_ˇlcuœã_ôî_d©a
(
sc
, 
˘x
, &
ôî_d©a
);

739 
	`£q_¥ötf
(
fûe
,

741 
i
++, ()(
˘x
->
assig√d
), 
ôî_d©a
.
«ps
,

742 
ôî_d©a
.
n°©i⁄s
,

743 
ôî_d©a
.
nmeshes
, iãr_d©a.
nwds
);

744 
	`£q_¥ötf
(
fûe
, " ADHOC: %i OCB: %i TOTAL: %hi BEACON-VIF: %hi\n",

745 
ôî_d©a
.
«dhocs
, iãr_d©a.
nocbs
, 
sc
->
cur_ch™
->
nvifs
,

746 
sc
->
nb˙vifs
);

750 
	}
}

752 
	$ªad_fûe_ª£t
(
£q_fûe
 *
fûe
, *
d©a
)

754 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

755 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

756 c⁄° * c⁄° 
ª£t_ˇu£
[
__RESET_TYPE_MAX
] = {

757 [
RESET_TYPE_BB_HANG
] = "Baseband Hang",

758 [
RESET_TYPE_BB_WATCHDOG
] = "Baseband Watchdog",

759 [
RESET_TYPE_FATAL_INT
] = "Fatal HW Error",

760 [
RESET_TYPE_TX_ERROR
] = "TX HWÉrror",

761 [
RESET_TYPE_TX_GTT
] = "TransmitÅimeout",

762 [
RESET_TYPE_TX_HANG
] = "TX Path Hang",

763 [
RESET_TYPE_PLL_HANG
] = "PLL RX Hang",

764 [
RESET_TYPE_MAC_HANG
] = "MAC Hang",

765 [
RESET_TYPE_BEACON_STUCK
] = "Stuck Beacon",

766 [
RESET_TYPE_MCI
] = "MCI Reset",

767 [
RESET_TYPE_CALIBRATION
] = "CalibrationÉrror",

768 [
RESET_TX_DMA_ERROR
] = "Tx DMA stopÉrror",

769 [
RESET_RX_DMA_ERROR
] = "Rx DMA stopÉrror",

771 
i
;

773 
i
 = 0; i < 
	`ARRAY_SIZE
(
ª£t_ˇu£
); i++) {

774 i‡(!
ª£t_ˇu£
[
i
])

777 
	`£q_¥ötf
(
fûe
, "%17s: %2d\n", 
ª£t_ˇu£
[
i
],

778 
sc
->
debug
.
°©s
.
ª£t
[
i
]);

782 
	}
}

784 
	$©h_debug_°©_tx
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

785 
©h_tx_°©us
 *
ts
, 
©h_txq
 *
txq
,

786 
Êags
)

788 
qnum
 = 
txq
->
axq_qnum
;

790 
	`TX_STAT_INC
(
qnum
, 
tx_pkts_Æl
);

791 
sc
->
debug
.
°©s
.
tx°©s
[
qnum
].
tx_byãs_Æl
 +
bf
->
bf_mpdu
->
Àn
;

793 i‡(
	`bf_ißmpdu
(
bf
)) {

794 i‡(
Êags
 & 
ATH_TX_ERROR
)

795 
	`TX_STAT_INC
(
qnum
, 
a_xªåõs
);

797 
	`TX_STAT_INC
(
qnum
, 
a_com∂ëed
);

799 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_XRETRY
)

800 
	`TX_STAT_INC
(
qnum
, 
xªåõs
);

802 
	`TX_STAT_INC
(
qnum
, 
com∂ëed
);

805 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_FILT
)

806 
	`TX_STAT_INC
(
qnum
, 
txîr_fûãªd
);

807 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_FIFO
)

808 
	`TX_STAT_INC
(
qnum
, 
fifo_undîrun
);

809 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_XTXOP
)

810 
	`TX_STAT_INC
(
qnum
, 
xtx›
);

811 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_TIMER_EXPIRED
)

812 
	`TX_STAT_INC
(
qnum
, 
timî_exp
);

813 i‡(
ts
->
ts_Êags
 & 
ATH9K_TX_DESC_CFG_ERR
)

814 
	`TX_STAT_INC
(
qnum
, 
desc_cfg_îr
);

815 i‡(
ts
->
ts_Êags
 & 
ATH9K_TX_DATA_UNDERRUN
)

816 
	`TX_STAT_INC
(
qnum
, 
d©a_undîrun
);

817 i‡(
ts
->
ts_Êags
 & 
ATH9K_TX_DELIM_UNDERRUN
)

818 
	`TX_STAT_INC
(
qnum
, 
dñim_undîrun
);

819 
	}
}

821 
	$©h_debug_°©_rx
(
©h_so·c
 *
sc
, 
©h_rx_°©us
 *
rs
)

823 
	`©h9k_cmn_debug_°©_rx
(&
sc
->
debug
.
°©s
.
rx°©s
, 
rs
);

824 
	}
}

826 
ssize_t
 
	$ªad_fûe_ªgidx
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

827 
size_t
 
cou¡
, 
loff_t
 *
µos
)

829 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

830 
buf
[32];

831 
Àn
;

833 
Àn
 = 
	`•rötf
(
buf
, "0x%08x\n", 
sc
->
debug
.
ªgidx
);

834  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

835 
	}
}

837 
ssize_t
 
	$wrôe_fûe_ªgidx
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

838 
size_t
 
cou¡
, 
loff_t
 *
µos
)

840 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

841 
ªgidx
;

842 
buf
[32];

843 
ssize_t
 
Àn
;

845 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

846 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

847  -
EFAULT
;

849 
buf
[
Àn
] = '\0';

850 i‡(
	`k°πoul
(
buf
, 0, &
ªgidx
))

851  -
EINVAL
;

853 
sc
->
debug
.
ªgidx
 =Ñegidx;

854  
cou¡
;

855 
	}
}

857 c⁄° 
fûe_›î©i⁄s
 
	gf›s_ªgidx
 = {

858 .
ªad
 = 
ªad_fûe_ªgidx
,

859 .
	gwrôe
 = 
wrôe_fûe_ªgidx
,

860 .
	g›í
 = 
sim∂e_›í
,

861 .
	gow√r
 = 
THIS_MODULE
,

862 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

865 
ssize_t
 
	$ªad_fûe_ªgvÆ
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

866 
size_t
 
cou¡
, 
loff_t
 *
µos
)

868 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

869 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

870 
buf
[32];

871 
Àn
;

872 
u32
 
ªgvÆ
;

874 
	`©h9k_ps_wakeup
(
sc
);

875 
ªgvÆ
 = 
	`REG_READ_D
(
ah
, 
sc
->
debug
.
ªgidx
);

876 
	`©h9k_ps_ª°‹e
(
sc
);

877 
Àn
 = 
	`•rötf
(
buf
, "0x%08x\n", 
ªgvÆ
);

878  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

879 
	}
}

881 
ssize_t
 
	$wrôe_fûe_ªgvÆ
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

882 
size_t
 
cou¡
, 
loff_t
 *
µos
)

884 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

885 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

886 
ªgvÆ
;

887 
buf
[32];

888 
ssize_t
 
Àn
;

890 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

891 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

892  -
EFAULT
;

894 
buf
[
Àn
] = '\0';

895 i‡(
	`k°πoul
(
buf
, 0, &
ªgvÆ
))

896  -
EINVAL
;

898 
	`©h9k_ps_wakeup
(
sc
);

899 
	`REG_WRITE_D
(
ah
, 
sc
->
debug
.
ªgidx
, 
ªgvÆ
);

900 
	`©h9k_ps_ª°‹e
(
sc
);

901  
cou¡
;

902 
	}
}

904 c⁄° 
fûe_›î©i⁄s
 
	gf›s_ªgvÆ
 = {

905 .
ªad
 = 
ªad_fûe_ªgvÆ
,

906 .
	gwrôe
 = 
wrôe_fûe_ªgvÆ
,

907 .
	g›í
 = 
sim∂e_›í
,

908 .
	gow√r
 = 
THIS_MODULE
,

909 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

912 
	#REGDUMP_LINE_SIZE
 20

	)

914 
	$›í_fûe_ªgdump
(
öode
 *öode, 
fûe
 *file)

916 
©h_so·c
 *
sc
 = 
öode
->
i_¥iv©e
;

917 
Àn
 = 0;

918 
u8
 *
buf
;

919 
i
;

920 
num_ªgs
, 
ªgdump_Àn
, 
max_ªg_off£t
;

922 
max_ªg_off£t
 = 
	`AR_SREV_9300_20_OR_LATER
(
sc
->
sc_ah
) ? 0x16bd4 : 0xb500;

923 
num_ªgs
 = 
max_ªg_off£t
 / 4 + 1;

924 
ªgdump_Àn
 = 
num_ªgs
 * 
REGDUMP_LINE_SIZE
 + 1;

925 
buf
 = 
	`vmÆloc
(
ªgdump_Àn
);

926 i‡(!
buf
)

927  -
ENOMEM
;

929 
	`©h9k_ps_wakeup
(
sc
);

930 
i
 = 0; i < 
num_ªgs
; i++)

931 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
ªgdump_Àn
 -Üen,

932 "0x%06x 0x%08x\n", 
i
 << 2, 
	`REG_READ
(
sc
->
sc_ah
, i << 2));

933 
	`©h9k_ps_ª°‹e
(
sc
);

935 
fûe
->
¥iv©e_d©a
 = 
buf
;

938 
	}
}

940 c⁄° 
fûe_›î©i⁄s
 
	gf›s_ªgdump
 = {

941 .
›í
 = 
›í_fûe_ªgdump
,

942 .
	gªad
 = 
©h9k_debugfs_ªad_buf
,

943 .
	gªÀa£
 = 
©h9k_debugfs_ªÀa£_buf
,

944 .
	gow√r
 = 
THIS_MODULE
,

945 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

948 
	$ªad_fûe_dump_nfˇl
(
£q_fûe
 *
fûe
, *
d©a
)

950 
õì80211_hw
 *
hw
 = 
	`dev_gë_drvd©a
(
fûe
->
¥iv©e
);

951 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

952 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

953 
©h9k_nfˇl_hi°
 *
h
 = 
sc
->
cur_ch™
->
ˇld©a
.
nfCÆHi°
;

954 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

955 
õì80211_c⁄f
 *
c⁄f
 = &
comm⁄
->
hw
->conf;

956 
u32
 
i
, 
j
;

957 
u8
 
chaömask
 = (
ah
->
rxchaömask
 << 3) |áh->rxchainmask;

958 
u8
 
ƒód
;

960 
	`£q_¥ötf
(
fûe
, "Ch™√»Noi£ Flo‹ : %d\n", 
ah
->
noi£
);

961 
	`£q_puts
(
fûe
, "Chain |ÖrivNF | # Readings | NF Readings\n");

962 
i
 = 0; i < 
NUM_NF_READINGS
; i++) {

963 i‡(!(
chaömask
 & (1 << 
i
)) ||

964 ((
i
 >
AR5416_MAX_CHAINS
Ë&& !
	`c⁄f_is_ht40
(
c⁄f
)))

967 
ƒód
 = 
AR_PHY_CCA_FILTERWINDOW_LENGTH
 - 
h
[
i
].
övÆidNFcou¡
;

968 
	`£q_¥ötf
(
fûe
, " %d\à%d\à%d\t\t", 
i
, 
h
[i].
¥ivNF
, 
ƒód
);

969 
j
 = 0; j < 
ƒód
; j++)

970 
	`£q_¥ötf
(
fûe
, " %d", 
h
[
i
].
nfCÆBuf„r
[
j
]);

971 
	`£q_puts
(
fûe
, "\n");

975 
	}
}

977 
	$›í_fûe_dump_nfˇl
(
öode
 *öode, 
fûe
 *
f
)

979  
	`sögÀ_›í
(
f
, 
ªad_fûe_dump_nfˇl
, 
öode
->
i_¥iv©e
);

980 
	}
}

982 c⁄° 
fûe_›î©i⁄s
 
	gf›s_dump_nfˇl
 = {

983 .
ªad
 = 
£q_ªad
,

984 .
	g›í
 = 
›í_fûe_dump_nfˇl
,

985 .
	gow√r
 = 
THIS_MODULE
,

986 .
	gŒ£ek
 = 
£q_l£ek
,

987 .
	gªÀa£
 = 
sögÀ_ªÀa£
,

990 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


991 
ssize_t
 
	$ªad_fûe_btc€x
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

992 
size_t
 
cou¡
, 
loff_t
 *
µos
)

994 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

995 
u32
 
Àn
 = 0, 
size
 = 1500;

996 *
buf
;

997 
size_t
 
ªtvÆ
;

999 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

1000 i‡(
buf
 =
NULL
)

1001  -
ENOMEM
;

1003 i‡(!
sc
->
sc_ah
->
comm⁄
.
btc€x_íabÀd
) {

1004 
Àn
 = 
	`s˙¥ötf
(
buf
, 
size
, "%s\n",

1006 
exô
;

1009 
Àn
 = 
	`©h9k_dump_btc€x
(
sc
, 
buf
, 
size
);

1010 
exô
:

1011 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

1012 
	`k‰ì
(
buf
);

1014  
ªtvÆ
;

1015 
	}
}

1017 c⁄° 
fûe_›î©i⁄s
 
	gf›s_btc€x
 = {

1018 .
ªad
 = 
ªad_fûe_btc€x
,

1019 .
	g›í
 = 
sim∂e_›í
,

1020 .
	gow√r
 = 
THIS_MODULE
,

1021 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

1025 #ifde‡
CONFIG_ATH9K_DYNACK


1026 
ssize_t
 
	$ªad_fûe_ackto
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

1027 
size_t
 
cou¡
, 
loff_t
 *
µos
)

1029 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

1030 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1031 
buf
[32];

1032 
Àn
;

1034 
Àn
 = 
	`•rötf
(
buf
, "%u %c\n", 
ah
->
dy«ck
.
ackto
,

1035 (
ah
->
dy«ck
.
íabÀd
) ? 'A' : 'S');

1037  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

1038 
	}
}

1040 c⁄° 
fûe_›î©i⁄s
 
	gf›s_ackto
 = {

1041 .
ªad
 = 
ªad_fûe_ackto
,

1042 .
	g›í
 = 
sim∂e_›í
,

1043 .
	gow√r
 = 
THIS_MODULE
,

1044 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

1048 #ifde‡
CONFIG_ATH9K_WOW


1050 
ssize_t
 
	$ªad_fûe_wow
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

1051 
size_t
 
cou¡
, 
loff_t
 *
µos
)

1053 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

1054 
Àn
 = 0, 
size
 = 32;

1055 
ssize_t
 
ªtvÆ
;

1056 *
buf
;

1058 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

1059 i‡(!
buf
)

1060  -
ENOMEM
;

1062 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "WOW: %s\n",

1063 
sc
->
f‹˚_wow
 ? "ENABLED" : "DISABLED");

1065 i‡(
Àn
 > 
size
)

1066 
Àn
 = 
size
;

1068 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

1069 
	`k‰ì
(
buf
);

1071  
ªtvÆ
;

1072 
	}
}

1074 
ssize_t
 
	$wrôe_fûe_wow
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

1075 
size_t
 
cou¡
, 
loff_t
 *
µos
)

1077 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

1078 
vÆ
;

1079 
buf
[32];

1080 
ssize_t
 
Àn
;

1082 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

1083 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

1084  -
EFAULT
;

1086 
buf
[
Àn
] = '\0';

1087 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

1088  -
EINVAL
;

1090 i‡(
vÆ
 != 1)

1091  -
EINVAL
;

1093 i‡(!
sc
->
f‹˚_wow
) {

1094 
sc
->
f‹˚_wow
 = 
åue
;

1095 
	`©h9k_öô_wow
(
sc
->
hw
);

1098  
cou¡
;

1099 
	}
}

1101 c⁄° 
fûe_›î©i⁄s
 
	gf›s_wow
 = {

1102 .
ªad
 = 
ªad_fûe_wow
,

1103 .
	gwrôe
 = 
wrôe_fûe_wow
,

1104 .
	g›í
 = 
sim∂e_›í
,

1105 .
	gow√r
 = 
THIS_MODULE
,

1106 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

1111 
ssize_t
 
	$ªad_fûe_çc
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

1112 
size_t
 
cou¡
, 
loff_t
 *
µos
)

1114 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

1115 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1116 
Àn
 = 0, 
size
 = 32;

1117 
ssize_t
 
ªtvÆ
;

1118 *
buf
;

1120 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

1121 i‡(!
buf
)

1122  -
ENOMEM
;

1124 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%s\n",

1125 
ah
->
çc_íabÀd
 ? "ENABLED" : "DISABLED");

1127 i‡(
Àn
 > 
size
)

1128 
Àn
 = 
size
;

1130 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

1131 
	`k‰ì
(
buf
);

1133  
ªtvÆ
;

1134 
	}
}

1136 
ssize_t
 
	$wrôe_fûe_çc
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

1137 
size_t
 
cou¡
, 
loff_t
 *
µos
)

1139 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

1140 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1141 
vÆ
;

1142 
buf
[32];

1143 
ssize_t
 
Àn
;

1144 
boﬁ
 
çc_íabÀd
;

1146 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

1147 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

1148  -
EFAULT
;

1150 
buf
[
Àn
] = '\0';

1151 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

1152  -
EINVAL
;

1154 i‡(
vÆ
 < 0 || val > 1)

1155  -
EINVAL
;

1157 
çc_íabÀd
 = !!
vÆ
;

1159 i‡(
çc_íabÀd
 !
ah
->tpc_enabled) {

1160 
ah
->
çc_íabÀd
 =Åpc_enabled;

1162 
	`muãx_lock
(&
sc
->
muãx
);

1163 
	`©h9k_£t_txpowî
(
sc
, 
NULL
);

1164 
	`muãx_u∆ock
(&
sc
->
muãx
);

1167  
cou¡
;

1168 
	}
}

1170 c⁄° 
fûe_›î©i⁄s
 
	gf›s_çc
 = {

1171 .
ªad
 = 
ªad_fûe_çc
,

1172 .
	gwrôe
 = 
wrôe_fûe_çc
,

1173 .
	g›í
 = 
sim∂e_›í
,

1174 .
	gow√r
 = 
THIS_MODULE
,

1175 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

1180 
	#AMKSTR
(
nm
Ë#nm "_BE", #nm "_BK", #nm "_VI", #nm "_VO"

	)

1181 c⁄° 
	g©h9k_g°rögs_°©s
[][
ETH_GSTRING_LEN
] = {

1186 
AMKSTR
(
d_tx_pkts
),

1187 
AMKSTR
(
d_tx_byãs
),

1188 
AMKSTR
(
d_tx_mpdus_queued
),

1189 
AMKSTR
(
d_tx_mpdus_com∂ëed
),

1190 
AMKSTR
(
d_tx_mpdu_xªåõs
),

1191 
AMKSTR
(
d_tx_aggªg©es
),

1192 
AMKSTR
(
d_tx_ampdus_queued_hw
),

1193 
AMKSTR
(
d_tx_ampdus_queued_sw
),

1194 
AMKSTR
(
d_tx_ampdus_com∂ëed
),

1195 
AMKSTR
(
d_tx_ampdu_ªåõs
),

1196 
AMKSTR
(
d_tx_ampdu_xªåõs
),

1197 
AMKSTR
(
d_tx_fifo_undîrun
),

1198 
AMKSTR
(
d_tx_›_ex˚eded
),

1199 
AMKSTR
(
d_tx_timî_expúy
),

1200 
AMKSTR
(
d_tx_desc_cfg_îr
),

1201 
AMKSTR
(
d_tx_d©a_undîrun
),

1202 
AMKSTR
(
d_tx_dñim_undîrun
),

1216 
	#ATH9K_SSTATS_LEN
 
	`ARRAY_SIZE
(
©h9k_g°rögs_°©s
)

	)

1218 
	$©h9k_gë_ë_°rögs
(
õì80211_hw
 *
hw
,

1219 
õì80211_vif
 *
vif
,

1220 
u32
 
s£t
, 
u8
 *
d©a
)

1222 i‡(
s£t
 =
ETH_SS_STATS
)

1223 
	`mem˝y
(
d©a
, *
©h9k_g°rögs_°©s
,

1224 (
©h9k_g°rögs_°©s
));

1225 
	}
}

1227 
	$©h9k_gë_ë_s£t_cou¡
(
õì80211_hw
 *
hw
,

1228 
õì80211_vif
 *
vif
, 
s£t
)

1230 i‡(
s£t
 =
ETH_SS_STATS
)

1231  
ATH9K_SSTATS_LEN
;

1233 
	}
}

1235 
	#AWDATA
(
ñem
) \

1237 
d©a
[
i
++] = 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_BE
)].
ñem
; \

1238 
d©a
[
i
++] = 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_BK
)].
ñem
; \

1239 
d©a
[
i
++] = 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_VI
)].
ñem
; \

1240 
d©a
[
i
++] = 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_VO
)].
ñem
; \

1241 } 0)

	)

1243 
	#AWDATA_RX
(
ñem
) \

1245 
d©a
[
i
++] = 
sc
->
debug
.
°©s
.
rx°©s
.
ñem
; \

1246 } 0)

	)

1248 
	$©h9k_gë_ë_°©s
(
õì80211_hw
 *
hw
,

1249 
õì80211_vif
 *
vif
,

1250 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
)

1252 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1253 
i
 = 0;

1255 
d©a
[
i
++] = (
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_BE
)].
tx_pkts_Æl
 +

1256 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_BK
)].
tx_pkts_Æl
 +

1257 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_VI
)].
tx_pkts_Æl
 +

1258 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_VO
)].
tx_pkts_Æl
);

1259 
d©a
[
i
++] = (
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_BE
)].
tx_byãs_Æl
 +

1260 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_BK
)].
tx_byãs_Æl
 +

1261 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_VI
)].
tx_byãs_Æl
 +

1262 
sc
->
debug
.
°©s
.
tx°©s
[
	`PR_QNUM
(
IEEE80211_AC_VO
)].
tx_byãs_Æl
);

1263 
	`AWDATA_RX
(
rx_pkts_Æl
);

1264 
	`AWDATA_RX
(
rx_byãs_Æl
);

1266 
	`AWDATA
(
tx_pkts_Æl
);

1267 
	`AWDATA
(
tx_byãs_Æl
);

1268 
	`AWDATA
(
queued
);

1269 
	`AWDATA
(
com∂ëed
);

1270 
	`AWDATA
(
xªåõs
);

1271 
	`AWDATA
(
a_aggr
);

1272 
	`AWDATA
(
a_queued_hw
);

1273 
	`AWDATA
(
a_queued_sw
);

1274 
	`AWDATA
(
a_com∂ëed
);

1275 
	`AWDATA
(
a_ªåõs
);

1276 
	`AWDATA
(
a_xªåõs
);

1277 
	`AWDATA
(
fifo_undîrun
);

1278 
	`AWDATA
(
xtx›
);

1279 
	`AWDATA
(
timî_exp
);

1280 
	`AWDATA
(
desc_cfg_îr
);

1281 
	`AWDATA
(
d©a_undîrun
);

1282 
	`AWDATA
(
dñim_undîrun
);

1284 
	`AWDATA_RX
(
¸c_îr
);

1285 
	`AWDATA_RX
(
de¸y±_¸c_îr
);

1286 
	`AWDATA_RX
(
phy_îr
);

1287 
	`AWDATA_RX
(
mic_îr
);

1288 
	`AWDATA_RX
(
¥e_dñim_¸c_îr
);

1289 
	`AWDATA_RX
(
po°_dñim_¸c_îr
);

1290 
	`AWDATA_RX
(
de¸y±_busy_îr
);

1292 
	`AWDATA_RX
(
phy_îr_°©s
[
ATH9K_PHYERR_RADAR
]);

1293 
	`AWDATA_RX
(
phy_îr_°©s
[
ATH9K_PHYERR_OFDM_TIMING
]);

1294 
	`AWDATA_RX
(
phy_îr_°©s
[
ATH9K_PHYERR_CCK_TIMING
]);

1296 
	`WARN_ON
(
i
 !
ATH9K_SSTATS_LEN
);

1297 
	}
}

1299 
	$©h9k_deöô_debug
(
©h_so·c
 *
sc
)

1301 
	`©h9k_cmn_•e˘øl_deöô_debug
(&
sc
->
•ec_¥iv
);

1302 
	}
}

1304 
	$©h9k_öô_debug
(
©h_hw
 *
ah
)

1306 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1307 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

1309 
sc
->
debug
.
debugfs_phy
 = 
	`debugfs_¸óã_dú
("ath9k",

1310 
sc
->
hw
->
wùhy
->
debugfsdú
);

1311 i‡(!
sc
->
debug
.
debugfs_phy
)

1312  -
ENOMEM
;

1314 #ifde‡
CONFIG_ATH_DEBUG


1315 
	`debugfs_¸óã_fûe
("debug", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1316 
sc
, &
f›s_debug
);

1319 
	`©h9k_dfs_öô_debug
(
sc
);

1320 
	`©h9k_tx99_öô_debug
(
sc
);

1321 
	`©h9k_cmn_•e˘øl_öô_debug
(&
sc
->
•ec_¥iv
, sc->
debug
.
debugfs_phy
);

1323 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "dma", sc->
debug
.
debugfs_phy
,

1324 
ªad_fûe_dma
);

1325 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "öãºu±", sc->
debug
.
debugfs_phy
,

1326 
ªad_fûe_öãºu±
);

1327 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "xmô", sc->
debug
.
debugfs_phy
,

1328 
ªad_fûe_xmô
);

1329 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "queues", sc->
debug
.
debugfs_phy
,

1330 
ªad_fûe_queues
);

1331 
	`debugfs_¸óã_u32
("qÀn_bk", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1332 &
sc
->
tx
.
txq_max_≥ndög
[
IEEE80211_AC_BK
]);

1333 
	`debugfs_¸óã_u32
("qÀn_be", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1334 &
sc
->
tx
.
txq_max_≥ndög
[
IEEE80211_AC_BE
]);

1335 
	`debugfs_¸óã_u32
("qÀn_vi", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1336 &
sc
->
tx
.
txq_max_≥ndög
[
IEEE80211_AC_VI
]);

1337 
	`debugfs_¸óã_u32
("qÀn_vo", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1338 &
sc
->
tx
.
txq_max_≥ndög
[
IEEE80211_AC_VO
]);

1339 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "misc", sc->
debug
.
debugfs_phy
,

1340 
ªad_fûe_misc
);

1341 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "ª£t", sc->
debug
.
debugfs_phy
,

1342 
ªad_fûe_ª£t
);

1344 
	`©h9k_cmn_debug_ªcv
(
sc
->
debug
.
debugfs_phy
, &sc->debug.
°©s
.
rx°©s
);

1345 
	`©h9k_cmn_debug_phy_îr
(
sc
->
debug
.
debugfs_phy
, &sc->debug.
°©s
.
rx°©s
);

1347 
	`debugfs_¸óã_u8
("rx_chaömask", 
S_IRUSR
, 
sc
->
debug
.
debugfs_phy
,

1348 &
ah
->
rxchaömask
);

1349 
	`debugfs_¸óã_u8
("tx_chaömask", 
S_IRUSR
, 
sc
->
debug
.
debugfs_phy
,

1350 &
ah
->
txchaömask
);

1351 
	`debugfs_¸óã_fûe
("™i", 
S_IRUSR
 | 
S_IWUSR
,

1352 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_™i
);

1353 
	`debugfs_¸óã_boﬁ
("∑¥d", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1354 &
sc
->
sc_ah
->
c⁄fig
.
íabÀ_∑¥d
);

1355 
	`debugfs_¸óã_fûe
("ªgidx", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1356 
sc
, &
f›s_ªgidx
);

1357 
	`debugfs_¸óã_fûe
("ªgvÆ", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1358 
sc
, &
f›s_ªgvÆ
);

1359 
	`debugfs_¸óã_boﬁ
("ign‹e_extcˇ", 
S_IRUSR
 | 
S_IWUSR
,

1360 
sc
->
debug
.
debugfs_phy
,

1361 &
ah
->
c⁄fig
.
cwm_ign‹e_extcˇ
);

1362 
	`debugfs_¸óã_fûe
("ªgdump", 
S_IRUSR
, 
sc
->
debug
.
debugfs_phy
, sc,

1363 &
f›s_ªgdump
);

1364 
	`debugfs_¸óã_devm_£qfûe
(
sc
->
dev
, "dump_nfcal",

1365 
sc
->
debug
.
debugfs_phy
,

1366 
ªad_fûe_dump_nfˇl
);

1368 
	`©h9k_cmn_debug_ba£_ì¥om
(
sc
->
debug
.
debugfs_phy
, sc->
sc_ah
);

1369 
	`©h9k_cmn_debug_modÆ_ì¥om
(
sc
->
debug
.
debugfs_phy
, sc->
sc_ah
);

1371 
	`debugfs_¸óã_u32
("gpio_mask", 
S_IRUSR
 | 
S_IWUSR
,

1372 
sc
->
debug
.
debugfs_phy
, &sc->
sc_ah
->
gpio_mask
);

1373 
	`debugfs_¸óã_u32
("gpio_vÆ", 
S_IRUSR
 | 
S_IWUSR
,

1374 
sc
->
debug
.
debugfs_phy
, &sc->
sc_ah
->
gpio_vÆ
);

1375 
	`debugfs_¸óã_fûe
("™ã¬a_divîsôy", 
S_IRUSR
,

1376 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_™ã¬a_divîsôy
);

1377 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


1378 
	`debugfs_¸óã_fûe
("bt_™t_divîsôy", 
S_IRUSR
 | 
S_IWUSR
,

1379 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_bt_™t_divîsôy
);

1380 
	`debugfs_¸óã_fûe
("btc€x", 
S_IRUSR
, 
sc
->
debug
.
debugfs_phy
, sc,

1381 &
f›s_btc€x
);

1384 #ifde‡
CONFIG_ATH9K_WOW


1385 
	`debugfs_¸óã_fûe
("wow", 
S_IRUSR
 | 
S_IWUSR
,

1386 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_wow
);

1389 #ifde‡
CONFIG_ATH9K_DYNACK


1390 
	`debugfs_¸óã_fûe
("ack_to", 
S_IRUSR
 | 
S_IWUSR
, 
sc
->
debug
.
debugfs_phy
,

1391 
sc
, &
f›s_ackto
);

1393 
	`debugfs_¸óã_fûe
("çc", 
S_IRUSR
 | 
S_IWUSR
,

1394 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_çc
);

1397 
	}
}

	@debug.h

17 #i‚de‡
DEBUG_H


18 
	#DEBUG_H


	)

20 
	~"hw.h
"

21 
	~"dfs_debug.h
"

23 
	g©h_txq
;

24 
	g©h_buf
;

25 
	gf·_ßm∂e_év
;

27 #ifde‡
CONFIG_ATH9K_DEBUGFS


28 
	#TX_STAT_INC
(
q
, 
c
Ë
sc
->
debug
.
°©s
.
tx°©s
[q].c++

	)

29 
	#RX_STAT_INC
(
c
Ë(
sc
->
debug
.
°©s
.
rx°©s
.c++)

	)

30 
	#RESET_STAT_INC
(
sc
, 
ty≥
Ësc->
debug
.
°©s
.
ª£t
[ty≥]++

	)

31 
	#ANT_STAT_INC
(
i
, 
c
Ë
sc
->
debug
.
°©s
.
™t_°©s
[i].c++

	)

32 
	#ANT_LNA_INC
(
i
, 
c
Ë
sc
->
debug
.
°©s
.
™t_°©s
[i].
 a_ªcv_˙t
[c]++;

	)

34 
	#TX_STAT_INC
(
q
, 
c
Ëdÿ{ } 0)

	)

35 
	#RX_STAT_INC
(
c
)

	)

36 
	#RESET_STAT_INC
(
sc
, 
ty≥
Ëdÿ{ } 0)

	)

37 
	#ANT_STAT_INC
(
i
, 
c
Ëdÿ{ } 0)

	)

38 
	#ANT_LNA_INC
(
i
, 
c
Ëdÿ{ } 0)

	)

41 
	e©h_ª£t_ty≥
 {

42 
	mRESET_TYPE_BB_HANG
,

43 
	mRESET_TYPE_BB_WATCHDOG
,

44 
	mRESET_TYPE_FATAL_INT
,

45 
	mRESET_TYPE_TX_ERROR
,

46 
	mRESET_TYPE_TX_GTT
,

47 
	mRESET_TYPE_TX_HANG
,

48 
	mRESET_TYPE_PLL_HANG
,

49 
	mRESET_TYPE_MAC_HANG
,

50 
	mRESET_TYPE_BEACON_STUCK
,

51 
	mRESET_TYPE_MCI
,

52 
	mRESET_TYPE_CALIBRATION
,

53 
	mRESET_TX_DMA_ERROR
,

54 
	mRESET_RX_DMA_ERROR
,

55 
	m__RESET_TYPE_MAX


58 #ifde‡
CONFIG_ATH9K_DEBUGFS


90 
	s©h_öãºu±_°©s
 {

91 
u32
 
	mtŸÆ
;

92 
u32
 
	mrxok
;

93 
u32
 
	mrxÕ
;

94 
u32
 
	mrxhp
;

95 
u32
 
	mrxeﬁ
;

96 
u32
 
	mrx‹n
;

97 
u32
 
	mtxok
;

98 
u32
 
	mtxeﬁ
;

99 
u32
 
	mtxu∫
;

100 
u32
 
	mmib
;

101 
u32
 
	mrxphyîr
;

102 
u32
 
	mrx_keyˇche_miss
;

103 
u32
 
	mswba
;

104 
u32
 
	mbmiss
;

105 
u32
 
	mbƒ
;

106 
u32
 
	mc°
;

107 
u32
 
	mgâ
;

108 
u32
 
	mtim
;

109 
u32
 
	mˇbíd
;

110 
u32
 
	mdtimsync
;

111 
u32
 
	mdtim
;

112 
u32
 
	mbb_w©chdog
;

113 
u32
 
	mtsfo‹
;

114 
u32
 
	mmci
;

115 
u32
 
	mgí_timî
;

118 
u32
 
	msync_ˇu£_Æl
;

119 
u32
 
	msync_πc_úq
;

120 
u32
 
	msync_mac_úq
;

121 
u32
 
	mì¥om_ûÀgÆ_ac˚ss
;

122 
u32
 
	m≠b_timeout
;

123 
u32
 
	mpci_mode_c⁄Êi˘
;

124 
u32
 
	mho°1_Áèl
;

125 
u32
 
	mho°1_≥º
;

126 
u32
 
	måcv_fifo_≥º
;

127 
u32
 
	mødm_˝l_ï
;

128 
u32
 
	mødm_˝l_dŒp_ab‹t
;

129 
u32
 
	mødm_˝l_ép_ab‹t
;

130 
u32
 
	mødm_˝l_e¸c_îr
;

131 
u32
 
	mødm_˝l_timeout
;

132 
u32
 
	mloˇl_timeout
;

133 
u32
 
	mpm_ac˚ss
;

134 
u32
 
	mmac_awake
;

135 
u32
 
	mmac_a¶ìp
;

136 
u32
 
	mmac_¶ìp_ac˚ss
;

169 
	s©h_tx_°©s
 {

170 
u32
 
	mtx_pkts_Æl
;

171 
u32
 
	mtx_byãs_Æl
;

172 
u32
 
	mqueued
;

173 
u32
 
	mcom∂ëed
;

174 
u32
 
	mxªåõs
;

175 
u32
 
	ma_aggr
;

176 
u32
 
	ma_queued_hw
;

177 
u32
 
	ma_queued_sw
;

178 
u32
 
	ma_com∂ëed
;

179 
u32
 
	ma_ªåõs
;

180 
u32
 
	ma_xªåõs
;

181 
u32
 
	mtxîr_fûãªd
;

182 
u32
 
	mfifo_undîrun
;

183 
u32
 
	mxtx›
;

184 
u32
 
	mtimî_exp
;

185 
u32
 
	mdesc_cfg_îr
;

186 
u32
 
	md©a_undîrun
;

187 
u32
 
	mdñim_undîrun
;

188 
u32
 
	mpuâxbuf
;

189 
u32
 
	mtx°¨t
;

190 
u32
 
	mtx¥ocdesc
;

191 
u32
 
	mtxÁûed
;

197 
	#PR_QNUM
(
_n
Ë
sc
->
tx
.
txq_m≠
[_n]->
axq_qnum


	)

198 
	#TXSTATS
 
sc
->
debug
.
°©s
.
tx°©s


	)

199 
	#PR
(
°r
, 
ñem
) \

201 
	`£q_¥ötf
(
fûe
, "%s%13u%11u%10u%10u\n", 
°r
, \

202 
TXSTATS
[
	`PR_QNUM
(
IEEE80211_AC_BE
)].
ñem
,\

203 
TXSTATS
[
	`PR_QNUM
(
IEEE80211_AC_BK
)].
ñem
,\

204 
TXSTATS
[
	`PR_QNUM
(
IEEE80211_AC_VI
)].
ñem
,\

205 
TXSTATS
[
	`PR_QNUM
(
IEEE80211_AC_VO
)].
ñem
); \

206 } 0)

	)

208 
	s©h_rx_øã_°©s
 {

210 
u32
 
	mht20_˙t
;

211 
u32
 
	mht40_˙t
;

212 
u32
 
	msgi_˙t
;

213 
u32
 
	mlgi_˙t
;

214 } 
	mht_°©s
[24];

217 
u32
 
	mofdm_˙t
;

218 } 
	mofdm_°©s
[8];

221 
u32
 
	mcck_Õ_˙t
;

222 
u32
 
	mcck_•_˙t
;

223 } 
	mcck_°©s
[4];

226 
	#ANT_MAIN
 0

	)

227 
	#ANT_ALT
 1

	)

229 
	s©h_™ã¬a_°©s
 {

230 
u32
 
	mªcv_˙t
;

231 
u32
 
	mrssi_avg
;

232 
u32
 
	m a_ªcv_˙t
[4];

233 
u32
 
	m a_©ãm±_˙t
[4];

236 
	s©h_°©s
 {

237 
©h_öãºu±_°©s
 
	mi°©s
;

238 
©h_tx_°©s
 
	mtx°©s
[
ATH9K_NUM_TX_QUEUES
];

239 
©h_rx_°©s
 
	mrx°©s
;

240 
©h_dfs_°©s
 
	mdfs_°©s
;

241 
©h_™ã¬a_°©s
 
	m™t_°©s
[2];

242 
u32
 
	mª£t
[
__RESET_TYPE_MAX
];

245 
	s©h9k_debug
 {

246 
díåy
 *
	mdebugfs_phy
;

247 
u32
 
	mªgidx
;

248 
©h_°©s
 
	m°©s
;

251 
©h9k_öô_debug
(
©h_hw
 *
ah
);

252 
©h9k_deöô_debug
(
©h_so·c
 *
sc
);

254 
©h_debug_°©_öãºu±
(
©h_so·c
 *
sc
, 
©h9k_öt
 
°©us
);

255 
©h_debug_°©_tx
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

256 
©h_tx_°©us
 *
ts
, 
©h_txq
 *
txq
,

257 
Êags
);

258 
©h_debug_°©_rx
(
©h_so·c
 *
sc
, 
©h_rx_°©us
 *
rs
);

259 
©h9k_gë_ë_s£t_cou¡
(
õì80211_hw
 *
hw
,

260 
õì80211_vif
 *
vif
, 
s£t
);

261 
©h9k_gë_ë_°©s
(
õì80211_hw
 *
hw
,

262 
õì80211_vif
 *
vif
,

263 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
);

264 
©h9k_gë_ë_°rögs
(
õì80211_hw
 *
hw
,

265 
õì80211_vif
 *
vif
,

266 
u32
 
s£t
, 
u8
 *
d©a
);

267 
©h9k_°a_add_debugfs
(
õì80211_hw
 *
hw
,

268 
õì80211_vif
 *
vif
,

269 
õì80211_°a
 *
°a
,

270 
díåy
 *
dú
);

271 
©h9k_debug_°©_™t
(
©h_so·c
 *
sc
,

272 
©h_hw_™tcomb_c⁄f
 *
div_™t_c⁄f
,

273 
maö_rssi_avg
, 
Æt_rssi_avg
);

274 
©h9k_debug_sync_ˇu£
(
©h_so·c
 *
sc
, 
u32
 
sync_ˇu£
);

278 
ölöe
 
	$©h9k_öô_debug
(
©h_hw
 *
ah
)

281 
	}
}

283 
ölöe
 
	$©h9k_deöô_debug
(
©h_so·c
 *
sc
)

285 
	}
}

286 
ölöe
 
	$©h_debug_°©_öãºu±
(
©h_so·c
 *
sc
,

287 
©h9k_öt
 
°©us
)

289 
	}
}

290 
ölöe
 
	$©h_debug_°©_tx
(
©h_so·c
 *
sc
,

291 
©h_buf
 *
bf
,

292 
©h_tx_°©us
 *
ts
,

293 
©h_txq
 *
txq
,

294 
Êags
)

296 
	}
}

297 
ölöe
 
	$©h_debug_°©_rx
(
©h_so·c
 *
sc
,

298 
©h_rx_°©us
 *
rs
)

300 
	}
}

301 
ölöe
 
	$©h9k_debug_°©_™t
(
©h_so·c
 *
sc
,

302 
©h_hw_™tcomb_c⁄f
 *
div_™t_c⁄f
,

303 
maö_rssi_avg
, 
Æt_rssi_avg
)

306 
	}
}

308 
ölöe
 

309 
	$©h9k_debug_sync_ˇu£
(
©h_so·c
 *
sc
, 
u32
 
sync_ˇu£
)

311 
	}
}

315 #ifde‡
CONFIG_ATH9K_STATION_STATISTICS


316 
©h_debug_øã_°©s
(
©h_so·c
 *
sc
,

317 
©h_rx_°©us
 *
rs
,

318 
sk_buff
 *
skb
);

320 
ölöe
 
	$©h_debug_øã_°©s
(
©h_so·c
 *
sc
,

321 
©h_rx_°©us
 *
rs
,

322 
sk_buff
 *
skb
)

324 
	}
}

	@debug_sta.c

17 
	~"©h9k.h
"

23 
ssize_t
 
	$ªad_fûe_node_aggr
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

24 
size_t
 
cou¡
, 
loff_t
 *
µos
)

26 
©h_node
 *
™
 = 
fûe
->
¥iv©e_d©a
;

27 
©h_so·c
 *
sc
 = 
™
->sc;

28 
©h_©x_tid
 *
tid
;

29 
©h_txq
 *
txq
;

30 
u32
 
Àn
 = 0, 
size
 = 4096;

31 *
buf
;

32 
size_t
 
ªtvÆ
;

33 
tidno
;

35 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

36 i‡(
buf
 =
NULL
)

37  -
ENOMEM
;

39 i‡(!
™
->
°a
->
ht_ˇp
.
ht_suµ‹ãd
) {

40 
Àn
 = 
	`s˙¥ötf
(
buf
, 
size
, "%s\n",

42 
exô
;

45 
Àn
 = 
	`s˙¥ötf
(
buf
, 
size
, "Max-AMPDU: %d\n",

46 
™
->
maxampdu
);

47 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "MPDU Density: %d\n\n",

48 
™
->
mpdudísôy
);

50 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

55 
tidno
 = 0, 
tid
 = &
™
->tid[tidno];

56 
tidno
 < 
IEEE80211_NUM_TIDS
;Åidno++, 
tid
++) {

57 
txq
 = 
tid
->txq;

58 
	`©h_txq_lock
(
sc
, 
txq
);

59 i‡(
tid
->
a˘ive
) {

60 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

62 
tid
->
tidno
,

63 
tid
->
£q_°¨t
,

64 
tid
->
£q_√xt
,

65 
tid
->
baw_size
,

66 
tid
->
baw_hód
,

67 
tid
->
baw_èû
,

68 
tid
->
b¨_ödex
,

69 !
	`li°_em±y
(&
tid
->
li°
));

71 
	`©h_txq_u∆ock
(
sc
, 
txq
);

73 
exô
:

74 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

75 
	`k‰ì
(
buf
);

77  
ªtvÆ
;

78 
	}
}

80 c⁄° 
fûe_›î©i⁄s
 
	gf›s_node_aggr
 = {

81 .
ªad
 = 
ªad_fûe_node_aggr
,

82 .
	g›í
 = 
sim∂e_›í
,

83 .
	gow√r
 = 
THIS_MODULE
,

84 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

91 
	$©h_debug_øã_°©s
(
©h_so·c
 *
sc
,

92 
©h_rx_°©us
 *
rs
,

93 
sk_buff
 *
skb
)

95 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*Ë
skb
->
d©a
;

96 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

97 
õì80211_rx_°©us
 *
rxs
;

98 
©h_rx_øã_°©s
 *
r°©s
;

99 
õì80211_°a
 *
°a
;

100 
©h_node
 *
™
;

102 i‡(!
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
))

105 
	`rcu_ªad_lock
();

107 
°a
 = 
	`õì80211_föd_°a_by_iÁddr
(
sc
->
hw
, 
hdr
->
addr2
, 
NULL
);

108 i‡(!
°a
)

109 
exô
;

111 
™
 = (
©h_node
 *Ë
°a
->
drv_¥iv
;

112 
r°©s
 = &
™
->
rx_øã_°©s
;

113 
rxs
 = 
	`IEEE80211_SKB_RXCB
(
skb
);

115 i‡(
	`IS_HT_RATE
(
rs
->
rs_øã
)) {

116 i‡(
rxs
->
øã_idx
 >
	`ARRAY_SIZE
(
r°©s
->
ht_°©s
))

117 
exô
;

119 i‡(
rxs
->
Êag
 & 
RX_FLAG_40MHZ
)

120 
r°©s
->
ht_°©s
[
rxs
->
øã_idx
].
ht40_˙t
++;

122 
r°©s
->
ht_°©s
[
rxs
->
øã_idx
].
ht20_˙t
++;

124 i‡(
rxs
->
Êag
 & 
RX_FLAG_SHORT_GI
)

125 
r°©s
->
ht_°©s
[
rxs
->
øã_idx
].
sgi_˙t
++;

127 
r°©s
->
ht_°©s
[
rxs
->
øã_idx
].
lgi_˙t
++;

129 
exô
;

132 i‡(
	`IS_CCK_RATE
(
rs
->
rs_øã
)) {

133 i‡(
rxs
->
Êag
 & 
RX_FLAG_SHORTPRE
)

134 
r°©s
->
cck_°©s
[
rxs
->
øã_idx
].
cck_•_˙t
++;

136 
r°©s
->
cck_°©s
[
rxs
->
øã_idx
].
cck_Õ_˙t
++;

138 
exô
;

141 i‡(
	`IS_OFDM_RATE
(
rs
->
rs_øã
)) {

142 i‡(
ah
->
curch™
->
ch™
->
b™d
 =
IEEE80211_BAND_2GHZ
)

143 
r°©s
->
ofdm_°©s
[
rxs
->
øã_idx
 - 4].
ofdm_˙t
++;

145 
r°©s
->
ofdm_°©s
[
rxs
->
øã_idx
].
ofdm_˙t
++;

147 
exô
:

148 
	`rcu_ªad_u∆ock
();

149 
	}
}

151 
	#PRINT_CCK_RATE
(
°r
, 
i
, 
•
) \

153 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, \

155 
°r
, \

156 (
•
Ë? 
r°©s
->
cck_°©s
[
i
].
cck_•_˙t
 : \

157 
r°©s
->
cck_°©s
[
i
].
cck_Õ_˙t
); \

158 } 0)

	)

160 
	#PRINT_OFDM_RATE
(
°r
, 
i
) \

162 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, \

164 
°r
, \

165 
r°©s
->
ofdm_°©s
[
i
].
ofdm_˙t
); \

166 } 0)

	)

168 
ssize_t
 
	$ªad_fûe_node_ªcv
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

169 
size_t
 
cou¡
, 
loff_t
 *
µos
)

171 
©h_node
 *
™
 = 
fûe
->
¥iv©e_d©a
;

172 
©h_so·c
 *
sc
 = 
™
->sc;

173 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

174 
©h_rx_øã_°©s
 *
r°©s
;

175 
õì80211_°a
 *
°a
 = 
™
->sta;

176 
õì80211_b™d
 
b™d
;

177 
u32
 
Àn
 = 0, 
size
 = 4096;

178 *
buf
;

179 
size_t
 
ªtvÆ
;

180 
i
;

182 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

183 i‡(
buf
 =
NULL
)

184  -
ENOMEM
;

186 
b™d
 = 
ah
->
curch™
->
ch™
->band;

187 
r°©s
 = &
™
->
rx_øã_°©s
;

189 i‡(!
°a
->
ht_ˇp
.
ht_suµ‹ãd
)

190 
Àgacy
;

192 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

196 
i
 = 0; i < 24; i++) {

197 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

199 "MCS", 
i
,

200 
r°©s
->
ht_°©s
[
i
].
ht20_˙t
,

201 
r°©s
->
ht_°©s
[
i
].
ht40_˙t
,

202 
r°©s
->
ht_°©s
[
i
].
sgi_˙t
,

203 
r°©s
->
ht_°©s
[
i
].
lgi_˙t
);

206 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "\n");

208 
Àgacy
:

209 i‡(
b™d
 =
IEEE80211_BAND_2GHZ
) {

210 
	`PRINT_CCK_RATE
("CCK-1M/LP", 0, 
Ál£
);

211 
	`PRINT_CCK_RATE
("CCK-2M/LP", 1, 
Ál£
);

212 
	`PRINT_CCK_RATE
("CCK-5.5M/LP", 2, 
Ál£
);

213 
	`PRINT_CCK_RATE
("CCK-11M/LP", 3, 
Ál£
);

215 
	`PRINT_CCK_RATE
("CCK-2M/SP", 1, 
åue
);

216 
	`PRINT_CCK_RATE
("CCK-5.5M/SP", 2, 
åue
);

217 
	`PRINT_CCK_RATE
("CCK-11M/SP", 3, 
åue
);

220 
	`PRINT_OFDM_RATE
("OFDM-6M", 0);

221 
	`PRINT_OFDM_RATE
("OFDM-9M", 1);

222 
	`PRINT_OFDM_RATE
("OFDM-12M", 2);

223 
	`PRINT_OFDM_RATE
("OFDM-18M", 3);

224 
	`PRINT_OFDM_RATE
("OFDM-24M", 4);

225 
	`PRINT_OFDM_RATE
("OFDM-36M", 5);

226 
	`PRINT_OFDM_RATE
("OFDM-48M", 6);

227 
	`PRINT_OFDM_RATE
("OFDM-54M", 7);

229 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

230 
	`k‰ì
(
buf
);

232  
ªtvÆ
;

233 
	}
}

235 #unde‡
PRINT_OFDM_RATE


236 #unde‡
PRINT_CCK_RATE


238 c⁄° 
fûe_›î©i⁄s
 
	gf›s_node_ªcv
 = {

239 .
ªad
 = 
ªad_fûe_node_ªcv
,

240 .
	g›í
 = 
sim∂e_›í
,

241 .
	gow√r
 = 
THIS_MODULE
,

242 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

245 
	$©h9k_°a_add_debugfs
(
õì80211_hw
 *
hw
,

246 
õì80211_vif
 *
vif
,

247 
õì80211_°a
 *
°a
,

248 
díåy
 *
dú
)

250 
©h_node
 *
™
 = (©h_nodê*)
°a
->
drv_¥iv
;

252 
	`debugfs_¸óã_fûe
("node_aggr", 
S_IRUGO
, 
dú
, 
™
, &
f›s_node_aggr
);

253 
	`debugfs_¸óã_fûe
("node_ªcv", 
S_IRUGO
, 
dú
, 
™
, &
f›s_node_ªcv
);

254 
	}
}

	@dfs.c

18 
	~"hw.h
"

19 
	~"hw-›s.h
"

20 
	~"©h9k.h
"

21 
	~"dfs.h
"

22 
	~"dfs_debug.h
"

25 
	s©h_ød¨_d©a
 {

26 
u8
 
	mpul£_bw_öfo
;

27 
u8
 
	mrssi
;

28 
u8
 
	mext_rssi
;

29 
u8
 
	mpul£_Àngth_ext
;

30 
u8
 
	mpul£_Àngth_¥i
;

39 c⁄° 
	gBIN_DELTA_MIN
 = 1;

40 c⁄° 
	gBIN_DELTA_MAX
 = 10;

43 
	#NUM_DIFFS
 3

	)

44 c⁄° 
	gFFT_NUM_SAMPLES
 = (
NUM_DIFFS
 + 1);

47 c⁄° 
	gMAX_DIFF
 = 2;

50 c⁄° 
	gMIN_CHIRP_PULSE_WIDTH
 = 20;

51 c⁄° 
	gMAX_CHIRP_PULSE_WIDTH
 = 110;

53 
	s©h9k_dfs_f·_20
 {

54 
u8
 
	mbö
[28];

55 
u8
 
	mlowî_bös
[3];

56 } 
	g__∑cked
;

57 
	s©h9k_dfs_f·_40
 {

58 
u8
 
	mbö
[64];

59 
u8
 
	mlowî_bös
[3];

60 
u8
 
	muµî_bös
[3];

61 } 
	g__∑cked
;

63 
ölöe
 
	$f·_max_ödex
(
u8
 *
bös
)

65  (
bös
[2] & 0xfc) >> 2;

66 
	}
}

67 
ölöe
 
	$f·_max_magnôude
(
u8
 *
bös
)

69  (
bös
[0] & 0xc0) >> 6 | bins[1] << 2 | (bins[2] & 0x03) << 10;

70 
	}
}

71 
ölöe
 
u8
 
	$f·_bôm≠_weight
(
u8
 *
bös
)

73  
bös
[0] & 0x3f;

74 
	}
}

76 
	$©h9k_gë_max_ödex_ht40
(
©h9k_dfs_f·_40
 *
f·
,

77 
boﬁ
 
is_˘l
, boﬁ 
is_ext
)

79 c⁄° 
DFS_UPPER_BIN_OFFSET
 = 64;

81 i‡(
is_˘l
 && 
is_ext
) {

83 
is_˘l
 = 
	`f·_bôm≠_weight
(
f·
->
lowî_bös
) != 0;

84 
is_ext
 = 
	`f·_bôm≠_weight
(
f·
->
uµî_bös
) != 0;

87 i‡(
is_˘l
 && 
is_ext
) {

88 
mag_lowî
 = 
	`f·_max_magnôude
(
f·
->
lowî_bös
);

89 
mag_uµî
 = 
	`f·_max_magnôude
(
f·
->
uµî_bös
);

90 i‡(
mag_uµî
 > 
mag_lowî
)

91 
is_˘l
 = 
Ál£
;

93 
is_ext
 = 
Ál£
;

96 i‡(
is_˘l
)

97  
	`f·_max_ödex
(
f·
->
lowî_bös
);

98  
	`f·_max_ödex
(
f·
->
uµî_bös
Ë+ 
DFS_UPPER_BIN_OFFSET
;

99 
	}
}

100 
boﬁ
 
	$©h9k_check_chúpög
(
©h_so·c
 *
sc
, 
u8
 *
d©a
,

101 
d©Æí
, 
boﬁ
 
is_˘l
, boﬁ 
is_ext
)

103 
i
;

104 
max_bö
[
FFT_NUM_SAMPLES
];

105 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

106 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

107 
¥ev_dñè
;

109 i‡(
	`IS_CHAN_HT40
(
ah
->
curch™
)) {

110 
©h9k_dfs_f·_40
 *
f·
 = (©h9k_dfs_f·_40 *Ë
d©a
;

111 
num_f·_∑ckës
 = 
d©Æí
 / (*
f·
);

112 i‡(
num_f·_∑ckës
 == 0)

113  
Ál£
;

115 
	`©h_dbg
(
comm⁄
, 
DFS
, "HT40: datalen=%d,Çum_fft_packets=%d\n",

116 
d©Æí
, 
num_f·_∑ckës
);

117 i‡(
num_f·_∑ckës
 < (
FFT_NUM_SAMPLES
)) {

118 
	`©h_dbg
(
comm⁄
, 
DFS
, "notÉnoughÖackets for chirp\n");

119  
Ál£
;

122 i‡((
d©Æí
 % (*
f·
)) == 2) {

123 
f·
 = (
©h9k_dfs_f·_40
 *Ë(
d©a
 + 2);

124 
	`©h_dbg
(
comm⁄
, 
DFS
, "fixing datalen by 2\n");

126 i‡(
	`IS_CHAN_HT40MINUS
(
ah
->
curch™
)) {

127 
ãmp
 = 
is_˘l
;

128 
is_˘l
 = 
is_ext
;

129 
is_ext
 = 
ãmp
;

131 
i
 = 0; i < 
FFT_NUM_SAMPLES
; i++)

132 
max_bö
[
i
] = 
	`©h9k_gë_max_ödex_ht40
(
f·
 + i, 
is_˘l
,

133 
is_ext
);

135 
©h9k_dfs_f·_20
 *
f·
 = (©h9k_dfs_f·_20 *Ë
d©a
;

136 
num_f·_∑ckës
 = 
d©Æí
 / (*
f·
);

137 i‡(
num_f·_∑ckës
 == 0)

138  
Ál£
;

139 
	`©h_dbg
(
comm⁄
, 
DFS
, "HT20: datalen=%d,Çum_fft_packets=%d\n",

140 
d©Æí
, 
num_f·_∑ckës
);

141 i‡(
num_f·_∑ckës
 < (
FFT_NUM_SAMPLES
)) {

142 
	`©h_dbg
(
comm⁄
, 
DFS
, "notÉnoughÖackets for chirp\n");

143  
Ál£
;

146 
i
 = 0; i < 
FFT_NUM_SAMPLES
; i++)

147 
max_bö
[
i
] = 
	`f·_max_ödex
(
f·
[i].
lowî_bös
) ^ 0x20;

149 
	`©h_dbg
(
comm⁄
, 
DFS
, "bin_max = [%d, %d, %d, %d]\n",

150 
max_bö
[0], max_bin[1], max_bin[2], max_bin[3]);

156 
¥ev_dñè
 = 0;

157 
i
 = 0; i < 
NUM_DIFFS
; i++) {

158 
ddñè
 = -1;

159 
dñè
 = 
max_bö
[
i
 + 1] - max_bin[i];

162 i‡(
	`abs
(
dñè
Ë< 
BIN_DELTA_MIN
 ||ábs(dñèË> 
BIN_DELTA_MAX
) {

163 
	`©h_dbg
(
comm⁄
, 
DFS
, "CHIRP: invalid delta %d "

164 "ö sam∂ê%d\n", 
dñè
, 
i
);

165  
Ál£
;

167 i‡(
i
 == 0)

168 
d⁄e
;

169 
ddñè
 = 
dñè
 - 
¥ev_dñè
;

170 i‡(
	`abs
(
ddñè
Ë> 
MAX_DIFF
) {

171 
	`©h_dbg
(
comm⁄
, 
DFS
, "CHIRP: ddelta %dÅoo high\n",

172 
ddñè
);

173  
Ál£
;

175 
d⁄e
:

176 
	`©h_dbg
(
comm⁄
, 
DFS
, "CHIRP - %d: delta=%d, ddelta=%d\n",

177 
i
, 
dñè
, 
ddñè
);

178 
¥ev_dñè
 = 
dñè
;

180  
åue
;

181 
	}
}

185 
u32
 
	$dur_to_u£cs
(
©h_hw
 *
ah
, 
u32
 
dur
)

187 c⁄° 
u32
 
AR93X_NSECS_PER_DUR
 = 800;

188 c⁄° 
u32
 
AR93X_NSECS_PER_DUR_FAST
 = (8000 / 11);

189 
u32
 
n£cs
;

191 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
,áh->
curch™
))

192 
n£cs
 = 
dur
 * 
AR93X_NSECS_PER_DUR_FAST
;

194 
n£cs
 = 
dur
 * 
AR93X_NSECS_PER_DUR
;

196  (
n£cs
 + 500) / 1000;

197 
	}
}

199 
	#PRI_CH_RADAR_FOUND
 0x01

	)

200 
	#EXT_CH_RADAR_FOUND
 0x02

	)

201 
boﬁ


202 
	$©h9k_po°¥o˚ss_ød¨_evít
(
©h_so·c
 *
sc
,

203 
©h_ød¨_d©a
 *
¨d
,

204 
pul£_evít
 *
≥
)

206 
u8
 
rssi
;

207 
u16
 
dur
;

213 
¨d
->
pul£_bw_öfo
 &= 0x03;

215 
¨d
->
pul£_bw_öfo
) {

216 
PRI_CH_RADAR_FOUND
:

218 
dur
 = 
¨d
->
pul£_Àngth_¥i
;

219 
	`DFS_STAT_INC
(
sc
, 
¥i_phy_îr‹s
);

224 
rssi
 = (
¨d
->
ext_rssi
 >= (ard->rssi + 3)) ? 0 :árd->rssi;

226 
EXT_CH_RADAR_FOUND
:

228 
dur
 = 
¨d
->
pul£_Àngth_ext
;

229 
	`DFS_STAT_INC
(
sc
, 
ext_phy_îr‹s
);

234 
rssi
 = (
¨d
->rssò>◊rd->
ext_rssi
 + 12)) ? 0 :árd->ext_rssi;

236 (
PRI_CH_RADAR_FOUND
 | 
EXT_CH_RADAR_FOUND
):

244 i‡(
¨d
->
pul£_Àngth_ext
 >¨d->
pul£_Àngth_¥i
)

245 
dur
 = 
¨d
->
pul£_Àngth_ext
;

247 
dur
 = 
¨d
->
pul£_Àngth_¥i
;

248 
	`DFS_STAT_INC
(
sc
, 
dc_phy_îr‹s
);

251 
rssi
 = (
¨d
->rssò<árd->
ext_rssi
) ?árd->ext_rssi :árd->rssi;

258 
	`DFS_STAT_INC
(
sc
, 
bwöfo_disˇrds
);

259  
Ál£
;

262 i‡(
rssi
 == 0) {

263 
	`DFS_STAT_INC
(
sc
, 
rssi_disˇrds
);

264  
Ál£
;

268 
≥
->
width
 = 
	`dur_to_u£cs
(
sc
->
sc_ah
, 
dur
);

269 
≥
->
rssi
 =Ñssi;

271 
	`DFS_STAT_INC
(
sc
, 
pul£s_dëe˘ed
);

272  
åue
;

273 
	}
}

276 
	$©h9k_dfs_¥o˚ss_ød¨_pul£
(
©h_so·c
 *
sc
, 
pul£_evít
 *
≥
)

278 
dfs_∑âîn_dëe˘‹
 *
pd
 = 
sc
->
dfs_dëe˘‹
;

279 
	`DFS_STAT_INC
(
sc
, 
pul£s_¥o˚s£d
);

280 i‡(
pd
 =
NULL
)

282 i‡(!
pd
->
	`add_pul£
’d, 
≥
))

284 
	`DFS_STAT_INC
(
sc
, 
ød¨_dëe˘ed
);

285 
	`õì80211_ød¨_dëe˘ed
(
sc
->
hw
);

286 
	}
}

291 
	$©h9k_dfs_¥o˚ss_phyîr
(
©h_so·c
 *
sc
, *
d©a
,

292 
©h_rx_°©us
 *
rs
, 
u64
 
ma˘ime
)

294 
©h_ød¨_d©a
 
¨d
;

295 
u16
 
d©Æí
;

296 *
vd©a_íd
;

297 
pul£_evít
 
≥
;

298 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

299 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

301 
	`DFS_STAT_INC
(
sc
, 
pul£s_tŸÆ
);

302 i‡((
rs
->
rs_phyîr
 !
ATH9K_PHYERR_RADAR
) &&

303 (
rs
->
rs_phyîr
 !
ATH9K_PHYERR_FALSE_RADAR_EXT
)) {

304 
	`©h_dbg
(
comm⁄
, 
DFS
,

306 
rs
->
rs_phyîr
);

307 
	`DFS_STAT_INC
(
sc
, 
pul£s_no_dfs
);

311 
d©Æí
 = 
rs
->
rs_d©Æí
;

312 i‡(
d©Æí
 == 0) {

313 
	`DFS_STAT_INC
(
sc
, 
d©Æí_disˇrds
);

317 
¨d
.
rssi
 = 
rs
->
rs_rssi_˘l
[0];

318 
¨d
.
ext_rssi
 = 
rs
->
rs_rssi_ext
[0];

324 i‡(
¨d
.
rssi
 & 0x80)

325 
¨d
.
rssi
 = 0;

326 i‡(
¨d
.
ext_rssi
 & 0x80)

327 
¨d
.
ext_rssi
 = 0;

329 
vd©a_íd
 = (*)
d©a
 + 
d©Æí
;

330 
¨d
.
pul£_bw_öfo
 = 
vd©a_íd
[-1];

331 
¨d
.
pul£_Àngth_ext
 = 
vd©a_íd
[-2];

332 
¨d
.
pul£_Àngth_¥i
 = 
vd©a_íd
[-3];

333 
≥
.
‰eq
 = 
ah
->
curch™
->
ch™√l
;

334 
≥
.
ts
 = 
ma˘ime
;

335 i‡(!
	`©h9k_po°¥o˚ss_ød¨_evít
(
sc
, &
¨d
, &
≥
))

338 i‡(
≥
.
width
 > 
MIN_CHIRP_PULSE_WIDTH
 &&

339 
≥
.
width
 < 
MAX_CHIRP_PULSE_WIDTH
) {

340 
boﬁ
 
is_˘l
 = !!(
¨d
.
pul£_bw_öfo
 & 
PRI_CH_RADAR_FOUND
);

341 
boﬁ
 
is_ext
 = !!(
¨d
.
pul£_bw_öfo
 & 
EXT_CH_RADAR_FOUND
);

342 
˛í
 = 
d©Æí
 - 3;

343 
≥
.
chúp
 = 
	`©h9k_check_chúpög
(
sc
, 
d©a
, 
˛í
, 
is_˘l
, 
is_ext
);

345 
≥
.
chúp
 = 
Ál£
;

348 
	`©h_dbg
(
comm⁄
, 
DFS
,

351 
¨d
.
pul£_bw_öfo
, 
≥
.
‰eq
,Öe.
ts
,Öe.
width
,Öe.
rssi
,

352 
≥
.
ts
 - 
sc
->
dfs_¥ev_pul£_ts
);

353 
sc
->
dfs_¥ev_pul£_ts
 = 
≥
.
ts
;

354 i‡(
¨d
.
pul£_bw_öfo
 & 
PRI_CH_RADAR_FOUND
)

355 
	`©h9k_dfs_¥o˚ss_ød¨_pul£
(
sc
, &
≥
);

356 i‡(
	`IS_CHAN_HT40
(
ah
->
curch™
) &&

357 
¨d
.
pul£_bw_öfo
 & 
EXT_CH_RADAR_FOUND
) {

358 
≥
.
‰eq
 +
	`IS_CHAN_HT40PLUS
(
ah
->
curch™
) ? 20 : -20;

359 
	`©h9k_dfs_¥o˚ss_ød¨_pul£
(
sc
, &
≥
);

361 
	}
}

362 #unde‡
PRI_CH_RADAR_FOUND


363 #unde‡
EXT_CH_RADAR_FOUND


	@dfs.h

18 #i‚de‡
ATH9K_DFS_H


19 
	#ATH9K_DFS_H


	)

20 
	~"../dfs_∑âîn_dëe˘‹.h
"

22 #i‡
deföed
(
CONFIG_ATH9K_DFS_CERTIFIED
)

37 
©h9k_dfs_¥o˚ss_phyîr
(
©h_so·c
 *
sc
, *
d©a
,

38 
©h_rx_°©us
 *
rs
, 
u64
 
ma˘ime
);

40 
ölöe
 

41 
	$©h9k_dfs_¥o˚ss_phyîr
(
©h_so·c
 *
sc
, *
d©a
,

42 
©h_rx_°©us
 *
rs
, 
u64
 
ma˘ime
Ë{ 
	}
}

	@dfs_debug.c

18 
	~<löux/debugfs.h
>

19 
	~<löux/exp‹t.h
>

21 
	~"©h9k.h
"

22 
	~"dfs_debug.h
"

23 
	~"../dfs_∑âîn_dëe˘‹.h
"

25 
©h_dfs_poﬁ_°©s
 
	gdfs_poﬁ_°©s
 = { 0 };

27 
	#ATH9K_DFS_STAT
(
s
, 
p
) \

28 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%28†: %10u\n", 
s
, \

29 
sc
->
debug
.
°©s
.
dfs_°©s
.
p
);

	)

30 
	#ATH9K_DFS_POOL_STAT
(
s
, 
p
) \

31 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%28†: %10u\n", 
s
, \

32 
dfs_poﬁ_°©s
.
p
);

	)

34 
ssize_t
 
	$ªad_fûe_dfs
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

35 
size_t
 
cou¡
, 
loff_t
 *
µos
)

37 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

38 
©h9k_hw_vîsi⁄
 *
hw_vî
 = &
sc
->
sc_ah
->
hw_vîsi⁄
;

39 *
buf
;

40 
Àn
 = 0, 
size
 = 8000;

41 
ssize_t
 
ªtvÆ
 = 0;

43 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

44 i‡(
buf
 =
NULL
)

45  -
ENOMEM
;

47 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "DFS support for "

49 
hw_vî
->
macVîsi⁄
, hw_vî->
macRev
,

50 (
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_DFS
) ?

53 i‡(!
sc
->
dfs_dëe˘‹
) {

54 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

56 
exô
;

59 
dfs_poﬁ_°©s
 = 
sc
->
dfs_dëe˘‹
->
	`gë_°©s
(sc->dfs_detector);

61 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Pulse detector statistics:\n");

62 
	`ATH9K_DFS_STAT
("pul£Évít†ªp‹ãd ", 
pul£s_tŸÆ
);

63 
	`ATH9K_DFS_STAT
("övÆidÖul£Évít† ", 
pul£s_no_dfs
);

64 
	`ATH9K_DFS_STAT
("DFSÖul£†dëe˘ed ", 
pul£s_dëe˘ed
);

65 
	`ATH9K_DFS_STAT
("D©Æí disˇrd† ", 
d©Æí_disˇrds
);

66 
	`ATH9K_DFS_STAT
("RSSI disˇrd† ", 
rssi_disˇrds
);

67 
	`ATH9K_DFS_STAT
("BW infÿdisˇrd† ", 
bwöfo_disˇrds
);

68 
	`ATH9K_DFS_STAT
("Prim¨y ch™√»pul£† ", 
¥i_phy_îr‹s
);

69 
	`ATH9K_DFS_STAT
("Sec⁄d¨y ch™√»pul£s", 
ext_phy_îr‹s
);

70 
	`ATH9K_DFS_STAT
("DuÆ ch™√»pul£† ", 
dc_phy_îr‹s
);

71 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Radar detector statistics "

73 
sc
->
dfs_dëe˘‹
->
ªgi⁄
);

74 
	`ATH9K_DFS_STAT
("Pul£Évít†¥o˚s£d ", 
pul£s_¥o˚s£d
);

75 
	`ATH9K_DFS_STAT
("Rad¨†dëe˘ed ", 
ød¨_dëe˘ed
);

76 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Global Pool statistics:\n");

77 
	`ATH9K_DFS_POOL_STAT
("PoﬁÑe„ªn˚† ", 
poﬁ_ª„ªn˚
);

78 
	`ATH9K_DFS_POOL_STAT
("Pul£†Æloˇãd ", 
pul£_Æloˇãd
);

79 
	`ATH9K_DFS_POOL_STAT
("Pul£†Ælo¯îr‹ ", 
pul£_Æloc_îr‹
);

80 
	`ATH9K_DFS_POOL_STAT
("Pul£†ö u£ ", 
pul£_u£d
);

81 
	`ATH9K_DFS_POOL_STAT
("Seqs.áŒoˇãd ", 
p£q_Æloˇãd
);

82 
	`ATH9K_DFS_POOL_STAT
("Seqs.áŒo¯îr‹ ", 
p£q_Æloc_îr‹
);

83 
	`ATH9K_DFS_POOL_STAT
("Seqs. i¿u£ ", 
p£q_u£d
);

85 
exô
:

86 i‡(
Àn
 > 
size
)

87 
Àn
 = 
size
;

89 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

90 
	`k‰ì
(
buf
);

92  
ªtvÆ
;

93 
	}
}

96 
	#DFS_STATS_RESET_MAGIC
 0x80000000

	)

97 
ssize_t
 
	$wrôe_fûe_dfs
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

98 
size_t
 
cou¡
, 
loff_t
 *
µos
)

100 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

101 
vÆ
;

102 
buf
[32];

103 
ssize_t
 
Àn
;

105 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

106 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

107  -
EFAULT
;

109 
buf
[
Àn
] = '\0';

110 i‡(
	`k°πoul
(
buf
, 0, &
vÆ
))

111  -
EINVAL
;

113 i‡(
vÆ
 =
DFS_STATS_RESET_MAGIC
)

114 
	`mem£t
(&
sc
->
debug
.
°©s
.
dfs_°©s
, 0,

115 (
sc
->
debug
.
°©s
.
dfs_°©s
));

116  
cou¡
;

117 
	}
}

119 
ssize_t
 
	$wrôe_fûe_simuœã_ød¨
(
fûe
 *file,

120 c⁄° 
__u£r
 *
u£r_buf
,

121 
size_t
 
cou¡
, 
loff_t
 *
µos
)

123 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

125 
	`õì80211_ød¨_dëe˘ed
(
sc
->
hw
);

127  
cou¡
;

128 
	}
}

130 c⁄° 
fûe_›î©i⁄s
 
	gf›s_simuœã_ød¨
 = {

131 .
wrôe
 = 
wrôe_fûe_simuœã_ød¨
,

132 .
	g›í
 = 
sim∂e_›í
,

133 .
	gow√r
 = 
THIS_MODULE
,

134 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

137 c⁄° 
fûe_›î©i⁄s
 
	gf›s_dfs_°©s
 = {

138 .
ªad
 = 
ªad_fûe_dfs
,

139 .
	gwrôe
 = 
wrôe_fûe_dfs
,

140 .
	g›í
 = 
sim∂e_›í
,

141 .
	gow√r
 = 
THIS_MODULE
,

142 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

145 
	$©h9k_dfs_öô_debug
(
©h_so·c
 *
sc
)

147 
	`debugfs_¸óã_fûe
("dfs_°©s", 
S_IRUSR
,

148 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_dfs_°©s
);

149 
	`debugfs_¸óã_fûe
("dfs_simuœã_ød¨", 
S_IWUSR
,

150 
sc
->
debug
.
debugfs_phy
, sc, &
f›s_simuœã_ød¨
);

151 
	}
}

	@dfs_debug.h

19 #i‚de‡
ATH9K_DFS_DEBUG_H


20 
	#ATH9K_DFS_DEBUG_H


	)

22 
	~"hw.h
"

24 
	g©h_so·c
;

40 
	s©h_dfs_°©s
 {

42 
u32
 
	mpul£s_tŸÆ
;

43 
u32
 
	mpul£s_no_dfs
;

44 
u32
 
	mpul£s_dëe˘ed
;

45 
u32
 
	md©Æí_disˇrds
;

46 
u32
 
	mrssi_disˇrds
;

47 
u32
 
	mbwöfo_disˇrds
;

48 
u32
 
	m¥i_phy_îr‹s
;

49 
u32
 
	mext_phy_îr‹s
;

50 
u32
 
	mdc_phy_îr‹s
;

52 
u32
 
	mpul£s_¥o˚s£d
;

53 
u32
 
	mød¨_dëe˘ed
;

56 #i‡
deföed
(
CONFIG_ATH9K_DFS_DEBUGFS
)

58 
	#DFS_STAT_INC
(
sc
, 
c
Ë(sc->
debug
.
°©s
.
dfs_°©s
.c++)

	)

59 
©h9k_dfs_öô_debug
(
©h_so·c
 *
sc
);

61 
©h_dfs_poﬁ_°©s
 
globÆ_dfs_poﬁ_°©s
;

65 
	#DFS_STAT_INC
(
sc
, 
c
Ëdÿ{ } 0)

	)

66 
ölöe
 
	$©h9k_dfs_öô_debug
(
©h_so·c
 *
sc
Ë{ 
	}
}

	@dynack.c

17 
	~"©h9k.h
"

18 
	~"hw.h
"

19 
	~"dy«ck.h
"

21 
	#COMPUTE_TO
 (5 * 
HZ
)

	)

22 
	#LATEACK_DELAY
 (10 * 
HZ
)

	)

23 
	#LATEACK_TO
 256

	)

24 
	#MAX_DELAY
 300

	)

25 
	#EWMA_LEVEL
 96

	)

26 
	#EWMA_DIV
 128

	)

32 
ölöe
 
u32
 
	$©h_dy«ck_ewma
(
u32
 
ﬁd
, u32 
√w
)

34  (
√w
 * (
EWMA_DIV
 - 
EWMA_LEVEL
Ë+ 
ﬁd
 * EWMA_LEVEL) / EWMA_DIV;

35 
	}
}

43 
ölöe
 
u32
 
	$©h_dy«ck_gë_sifs
(
©h_hw
 *
ah
, 
phy
)

45 
u32
 
sifs
 = 
CCK_SIFS_TIME
;

47 i‡(
phy
 =
WLAN_RC_PHY_OFDM
) {

48 i‡(
	`IS_CHAN_QUARTER_RATE
(
ah
->
curch™
))

49 
sifs
 = 
OFDM_SIFS_TIME_QUARTER
;

50 i‡(
	`IS_CHAN_HALF_RATE
(
ah
->
curch™
))

51 
sifs
 = 
OFDM_SIFS_TIME_HALF
;

53 
sifs
 = 
OFDM_SIFS_TIME
;

55  
sifs
;

56 
	}
}

63 
ölöe
 
boﬁ
 
	$©h_dy«ck_bssidmask
(
©h_hw
 *
ah
, c⁄° 
u8
 *
mac
)

65 
i
;

66 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

68 
i
 = 0; i < 
ETH_ALEN
; i++) {

69 i‡((
comm⁄
->
maˇddr
[
i
] & comm⁄->
bssidmask
[i]) !=

70 (
mac
[
i
] & 
comm⁄
->
bssidmask
[i]))

71  
Ál£
;

74  
åue
;

75 
	}
}

83 
	$©h_dy«ck_compuã_ackto
(
©h_hw
 *
ah
)

85 
©h_node
 *
™
;

86 
u32
 
to
 = 0;

87 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

88 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

90 
	`li°_f‹_óch_íåy
(
™
, &
da
->
nodes
, 
li°
)

91 i‡(
™
->
ackto
 > 
to
)

92 
to
 = 
™
->
ackto
;

94 i‡(
to
 && 
da
->
ackto
 !=Åo) {

95 
u32
 
¶Ÿtime
;

97 
¶Ÿtime
 = (
to
 - 3) / 2;

98 
da
->
ackto
 = 
to
;

99 
	`©h_dbg
(
comm⁄
, 
DYNACK
, "ACKÅimeout %u slottime %u\n",

100 
da
->
ackto
, 
¶Ÿtime
);

101 
	`©h9k_hw_£t¶Ÿtime
(
ah
, 
¶Ÿtime
);

102 
	`©h9k_hw_£t_ack_timeout
(
ah
, 
da
->
ackto
);

103 
	`©h9k_hw_£t_˘s_timeout
(
ah
, 
da
->
ackto
);

105 
	}
}

113 
	$©h_dy«ck_compuã_to
(
©h_hw
 *
ah
)

115 
u32
 
ackto
, 
ack_ts
;

116 
u8
 *
d°
, *
§c
;

117 
õì80211_°a
 *
°a
;

118 
©h_node
 *
™
;

119 
ts_öfo
 *
°_ts
;

120 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

122 
	`rcu_ªad_lock
();

124 
da
->
°_rbf
.
h_rb
 !da->°_rbf.
t_rb
 &&

125 
da
->
ack_rbf
.
h_rb
 !da->ack_rbf.
t_rb
) {

126 
ack_ts
 = 
da
->
ack_rbf
.
t°amp
[da->ack_rbf.
h_rb
];

127 
°_ts
 = &
da
->
°_rbf
.
ts
[da->°_rbf.
h_rb
];

128 
d°
 = 
da
->
°_rbf
.
addr
[da->°_rbf.
h_rb
].
h_de°
;

129 
§c
 = 
da
->
°_rbf
.
addr
[da->°_rbf.
h_rb
].
h_§c
;

131 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
DYNACK
,

133 
ack_ts
, 
°_ts
->
t°amp
, st_ts->
dur
,

134 
da
->
ack_rbf
.
h_rb
, da->
°_rbf
.h_rb);

136 i‡(
ack_ts
 > 
°_ts
->
t°amp
 + st_ts->
dur
) {

137 
ackto
 = 
ack_ts
 - 
°_ts
->
t°amp
 - st_ts->
dur
;

139 i‡(
ackto
 < 
MAX_DELAY
) {

140 
°a
 = 
	`õì80211_föd_°a_by_iÁddr
(
ah
->
hw
, 
d°
,

141 
§c
);

142 i‡(
°a
) {

143 
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

144 
™
->
ackto
 = 
	`©h_dy«ck_ewma
(an->ackto,

145 
ackto
);

146 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
DYNACK
,

147 "%pMÅÿ%u\n", 
d°
, 
™
->
ackto
);

148 i‡(
	`time_is_bef‹e_jiffõs
(
da
->
…o
)) {

149 
	`©h_dy«ck_compuã_ackto
(
ah
);

150 
da
->
…o
 = 
jiffõs
 + 
COMPUTE_TO
;

153 
	`INCR
(
da
->
ack_rbf
.
h_rb
, 
ATH_DYN_BUF
);

155 
	`INCR
(
da
->
°_rbf
.
h_rb
, 
ATH_DYN_BUF
);

157 
	`INCR
(
da
->
ack_rbf
.
h_rb
, 
ATH_DYN_BUF
);

161 
	`rcu_ªad_u∆ock
();

162 
	}
}

171 
	$©h_dy«ck_ßm∂e_tx_ts
(
©h_hw
 *
ah
, 
sk_buff
 *
skb
,

172 
©h_tx_°©us
 *
ts
)

174 
u8
 
ridx
;

175 
õì80211_hdr
 *
hdr
;

176 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

177 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

178 
õì80211_tx_öfo
 *
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

180 i‡((
öfo
->
Êags
 & 
IEEE80211_TX_CTL_NO_ACK
Ë|| !
da
->
íabÀd
)

183 
	`•ö_lock_bh
(&
da
->
qlock
);

185 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

188 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_XRETRY
) {

189 i‡(
	`õì80211_is_assoc_ªq
(
hdr
->
‰ame_c⁄åﬁ
) ||

190 
	`õì80211_is_assoc_ª•
(
hdr
->
‰ame_c⁄åﬁ
)) {

191 
	`©h_dbg
(
comm⁄
, 
DYNACK
, "lateáck\n");

192 
	`©h9k_hw_£t¶Ÿtime
(
ah
, (
LATEACK_TO
 - 3) / 2);

193 
	`©h9k_hw_£t_ack_timeout
(
ah
, 
LATEACK_TO
);

194 
	`©h9k_hw_£t_˘s_timeout
(
ah
, 
LATEACK_TO
);

195 
da
->
…o
 = 
jiffõs
 + 
LATEACK_DELAY
;

198 
	`•ö_u∆ock_bh
(&
da
->
qlock
);

202 
ridx
 = 
ts
->
ts_øãödex
;

204 
da
->
°_rbf
.
ts
[da->°_rbf.
t_rb
].
t°amp
 =Ås->
ts_t°amp
;

205 
da
->
°_rbf
.
ts
[da->°_rbf.
t_rb
].
dur
 =Ås->
duøti⁄
;

206 
	`ëhî_addr_c›y
(
da
->
°_rbf
.
addr
[da->°_rbf.
t_rb
].
h_de°
, 
hdr
->
addr1
);

207 
	`ëhî_addr_c›y
(
da
->
°_rbf
.
addr
[da->°_rbf.
t_rb
].
h_§c
, 
hdr
->
addr2
);

209 i‡(!(
öfo
->
°©us
.
øãs
[
ridx
].
Êags
 & 
IEEE80211_TX_RC_MCS
)) {

210 
u32
 
phy
, 
sifs
;

211 c⁄° 
õì80211_øã
 *
øã
;

212 
õì80211_tx_øã
 *
øãs
 = 
öfo
->
°©us
.rates;

214 
øã
 = &
comm⁄
->
sb™ds
[
öfo
->
b™d
].
bôøãs
[
øãs
[
ridx
].
idx
];

215 i‡(
öfo
->
b™d
 =
IEEE80211_BAND_2GHZ
 &&

216 !(
øã
->
Êags
 & 
IEEE80211_RATE_ERP_G
))

217 
phy
 = 
WLAN_RC_PHY_CCK
;

219 
phy
 = 
WLAN_RC_PHY_OFDM
;

221 
sifs
 = 
	`©h_dy«ck_gë_sifs
(
ah
, 
phy
);

222 
da
->
°_rbf
.
ts
[da->°_rbf.
t_rb
].
dur
 -
sifs
;

225 
	`©h_dbg
(
comm⁄
, 
DYNACK
, "{%pM}Åx sample %u [dur %u][h %u-t %u]\n",

226 
hdr
->
addr1
, 
da
->
°_rbf
.
ts
[da->°_rbf.
t_rb
].
t°amp
,

227 
da
->
°_rbf
.
ts
[da->°_rbf.
t_rb
].
dur
, da->°_rbf.
h_rb
,

228 (
da
->
°_rbf
.
t_rb
 + 1Ë% 
ATH_DYN_BUF
);

230 
	`INCR
(
da
->
°_rbf
.
t_rb
, 
ATH_DYN_BUF
);

231 i‡(
da
->
°_rbf
.
t_rb
 =da->°_rbf.
h_rb
)

232 
	`INCR
(
da
->
°_rbf
.
h_rb
, 
ATH_DYN_BUF
);

234 
	`©h_dy«ck_compuã_to
(
ah
);

236 
	`•ö_u∆ock_bh
(&
da
->
qlock
);

237 
	}
}

238 
EXPORT_SYMBOL
(
©h_dy«ck_ßm∂e_tx_ts
);

247 
	$©h_dy«ck_ßm∂e_ack_ts
(
©h_hw
 *
ah
, 
sk_buff
 *
skb
,

248 
u32
 
ts
)

250 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

251 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

252 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*)
skb
->
d©a
;

254 i‡(!
	`©h_dy«ck_bssidmask
(
ah
, 
hdr
->
addr1
Ë|| !
da
->
íabÀd
)

257 
	`•ö_lock_bh
(&
da
->
qlock
);

258 
da
->
ack_rbf
.
t°amp
[da->ack_rbf.
t_rb
] = 
ts
;

260 
	`©h_dbg
(
comm⁄
, 
DYNACK
, "rx sample %u [h %u-t %u]\n",

261 
da
->
ack_rbf
.
t°amp
[da->ack_rbf.
t_rb
],

262 
da
->
ack_rbf
.
h_rb
, (da->ack_rbf.
t_rb
 + 1Ë% 
ATH_DYN_BUF
);

264 
	`INCR
(
da
->
ack_rbf
.
t_rb
, 
ATH_DYN_BUF
);

265 i‡(
da
->
ack_rbf
.
t_rb
 =da->ack_rbf.
h_rb
)

266 
	`INCR
(
da
->
ack_rbf
.
h_rb
, 
ATH_DYN_BUF
);

268 
	`©h_dy«ck_compuã_to
(
ah
);

270 
	`•ö_u∆ock_bh
(&
da
->
qlock
);

271 
	}
}

272 
EXPORT_SYMBOL
(
©h_dy«ck_ßm∂e_ack_ts
);

280 
	$©h_dy«ck_node_öô
(
©h_hw
 *
ah
, 
©h_node
 *
™
)

283 
u32
 
ackto
 = 
ATH9K_SLOT_TIME_9
 + 16 + 64;

284 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

286 
™
->
ackto
 =áckto;

288 
	`•ö_lock
(&
da
->
qlock
);

289 
	`li°_add_èû
(&
™
->
li°
, &
da
->
nodes
);

290 
	`•ö_u∆ock
(&
da
->
qlock
);

291 
	}
}

292 
EXPORT_SYMBOL
(
©h_dy«ck_node_öô
);

300 
	$©h_dy«ck_node_deöô
(
©h_hw
 *
ah
, 
©h_node
 *
™
)

302 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

304 
	`•ö_lock
(&
da
->
qlock
);

305 
	`li°_dñ
(&
™
->
li°
);

306 
	`•ö_u∆ock
(&
da
->
qlock
);

307 
	}
}

308 
EXPORT_SYMBOL
(
©h_dy«ck_node_deöô
);

315 
	$©h_dy«ck_ª£t
(
©h_hw
 *
ah
)

318 
u32
 
ackto
 = 
ATH9K_SLOT_TIME_9
 + 16 + 64;

319 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

321 
da
->
…o
 = 
jiffõs
;

322 
da
->
ackto
 =áckto;

324 
da
->
°_rbf
.
t_rb
 = 0;

325 
da
->
°_rbf
.
h_rb
 = 0;

326 
da
->
ack_rbf
.
t_rb
 = 0;

327 
da
->
ack_rbf
.
h_rb
 = 0;

330 
	`©h9k_hw_£t¶Ÿtime
(
ah
, (
ackto
 - 3) / 2);

331 
	`©h9k_hw_£t_ack_timeout
(
ah
, 
ackto
);

332 
	`©h9k_hw_£t_˘s_timeout
(
ah
, 
ackto
);

333 
	}
}

334 
EXPORT_SYMBOL
(
©h_dy«ck_ª£t
);

341 
	$©h_dy«ck_öô
(
©h_hw
 *
ah
)

343 
©h_dy«ck
 *
da
 = &
ah
->
dy«ck
;

345 
	`mem£t
(
da
, 0, (
©h_dy«ck
));

347 
	`•ö_lock_öô
(&
da
->
qlock
);

348 
	`INIT_LIST_HEAD
(&
da
->
nodes
);

350 
ah
->
hw
->
wùhy
->
„©uªs
 |
NL80211_FEATURE_ACKTO_ESTIMATION
;

351 
	}
}

	@dynack.h

17 #i‚de‡
DYNACK_H


18 
	#DYNACK_H


	)

20 
	#ATH_DYN_BUF
 64

	)

22 
	g©h_hw
;

23 
	g©h_node
;

31 
	s©h_dyn_rxbuf
 {

32 
u16
 
	mh_rb
, 
	mt_rb
;

33 
u32
 
	mt°amp
[
ATH_DYN_BUF
];

36 
	sts_öfo
 {

37 
u32
 
	mt°amp
;

38 
u32
 
	mdur
;

41 
	shaddr_∑ú
 {

42 
u8
 
	mh_de°
[
ETH_ALEN
];

43 
u8
 
	mh_§c
[
ETH_ALEN
];

53 
	s©h_dyn_txbuf
 {

54 
u16
 
	mh_rb
, 
	mt_rb
;

55 
haddr_∑ú
 
	maddr
[
ATH_DYN_BUF
];

56 
ts_öfo
 
	mts
[
ATH_DYN_BUF
];

69 
	s©h_dy«ck
 {

70 
boﬁ
 
	míabÀd
;

71 
	mackto
;

72 
	m…o
;

74 
li°_hód
 
	mnodes
;

77 
•ölock_t
 
	mqlock
;

78 
©h_dyn_rxbuf
 
	mack_rbf
;

79 
©h_dyn_txbuf
 
	m°_rbf
;

82 #i‡
deföed
(
CONFIG_ATH9K_DYNACK
)

83 
©h_dy«ck_ª£t
(
©h_hw
 *
ah
);

84 
©h_dy«ck_node_öô
(
©h_hw
 *
ah
, 
©h_node
 *
™
);

85 
©h_dy«ck_node_deöô
(
©h_hw
 *
ah
, 
©h_node
 *
™
);

86 
©h_dy«ck_öô
(
©h_hw
 *
ah
);

87 
©h_dy«ck_ßm∂e_ack_ts
(
©h_hw
 *
ah
, 
sk_buff
 *
skb
, 
u32
 
ts
);

88 
©h_dy«ck_ßm∂e_tx_ts
(
©h_hw
 *
ah
, 
sk_buff
 *
skb
,

89 
©h_tx_°©us
 *
ts
);

91 
ölöe
 
	$©h_dy«ck_öô
(
©h_hw
 *
ah
Ë{
	}
}

92 
ölöe
 
	$©h_dy«ck_node_öô
(
©h_hw
 *
ah
,

93 
©h_node
 *
™
Ë{
	}
}

94 
ölöe
 
	$©h_dy«ck_node_deöô
(
©h_hw
 *
ah
,

95 
©h_node
 *
™
Ë{
	}
}

96 
ölöe
 
	$©h_dy«ck_ßm∂e_ack_ts
(
©h_hw
 *
ah
,

97 
sk_buff
 *
skb
, 
u32
 
ts
Ë{
	}
}

98 
ölöe
 
	$©h_dy«ck_ßm∂e_tx_ts
(
©h_hw
 *
ah
,

99 
sk_buff
 *
skb
,

100 
©h_tx_°©us
 *
ts
Ë{
	}
}

	@eeprom.c

17 
	~"hw.h
"

19 
	$©h9k_hw_™Æog_shi·_ªgwrôe
(
©h_hw
 *
ah
, 
u32
 
ªg
, u32 
vÆ
)

21 
	`REG_WRITE
(
ah
, 
ªg
, 
vÆ
);

23 i‡(
ah
->
c⁄fig
.
™Æog_shi·ªg
)

24 
	`udñay
(100);

25 
	}
}

27 
	$©h9k_hw_™Æog_shi·_rmw
(
©h_hw
 *
ah
, 
u32
 
ªg
, u32 
mask
,

28 
u32
 
shi·
, u32 
vÆ
)

30 
	`REG_RMW
(
ah
, 
ªg
, ((
vÆ
 << 
shi·
Ë& 
mask
), mask);

32 i‡(
ah
->
c⁄fig
.
™Æog_shi·ªg
)

33 
	`udñay
(100);

34 
	}
}

36 
öt16_t
 
	$©h9k_hw_öãΩﬁ©e
(
u16
 
èrgë
, u16 
§cLe·
, u16 
§cRight
,

37 
öt16_t
 
èrgëLe·
, i¡16_à
èrgëRight
)

39 
öt16_t
 
rv
;

41 i‡(
§cRight
 =
§cLe·
) {

42 
rv
 = 
èrgëLe·
;

44 
rv
 = (
öt16_t
Ë(((
èrgë
 - 
§cLe·
Ë* 
èrgëRight
 +

45 (
§cRight
 - 
èrgë
Ë* 
èrgëLe·
) /

46 (
§cRight
 - 
§cLe·
));

48  
rv
;

49 
	}
}

51 
boﬁ
 
	$©h9k_hw_gë_lowî_uµî_ödex
(
u8
 
èrgë
, u8 *
pLi°
, 
u16
 
li°Size
,

52 
u16
 *
ödexL
, u16 *
ödexR
)

54 
u16
 
i
;

56 i‡(
èrgë
 <
pLi°
[0]) {

57 *
ödexL
 = *
ödexR
 = 0;

58  
åue
;

60 i‡(
èrgë
 >
pLi°
[
li°Size
 - 1]) {

61 *
ödexL
 = *
ödexR
 = (
u16
Ë(
li°Size
 - 1);

62  
åue
;

65 
i
 = 0; i < 
li°Size
 - 1; i++) {

66 i‡(
pLi°
[
i
] =
èrgë
) {

67 *
ödexL
 = *
ödexR
 = 
i
;

68  
åue
;

70 i‡(
èrgë
 < 
pLi°
[
i
 + 1]) {

71 *
ödexL
 = 
i
;

72 *
ödexR
 = (
u16
Ë(
i
 + 1);

73  
Ál£
;

76  
Ál£
;

77 
	}
}

79 
	$©h9k_hw_usb_gí_fûl_ì¥om
(
©h_hw
 *
ah
, 
u16
 *
ìp_d©a
,

80 
ìp_°¨t_loc
, 
size
)

82 
i
 = 0, 
j
, 
addr
;

83 
u32
 
addrd©a
[8];

84 
u32
 
d©a
[8];

86 
addr
 = 0;ádd∏< 
size
;áddr++) {

87 
addrd©a
[
i
] = 
AR5416_EEPROM_OFFSET
 +

88 ((
addr
 + 
ìp_°¨t_loc
Ë<< 
AR5416_EEPROM_S
);

89 
i
++;

90 i‡(
i
 == 8) {

91 
	`REG_READ_MULTI
(
ah
, 
addrd©a
, 
d©a
, 
i
);

93 
j
 = 0; j < 
i
; j++) {

94 *
ìp_d©a
 = 
d©a
[
j
];

95 
ìp_d©a
++;

97 
i
 = 0;

101 i‡(
i
 != 0) {

102 
	`REG_READ_MULTI
(
ah
, 
addrd©a
, 
d©a
, 
i
);

104 
j
 = 0; j < 
i
; j++) {

105 *
ìp_d©a
 = 
d©a
[
j
];

106 
ìp_d©a
++;

109 
	}
}

111 
boﬁ
 
	$©h9k_hw_nvøm_ªad_blob
(
©h_hw
 *
ah
, 
u32
 
off
,

112 
u16
 *
d©a
)

114 
u16
 *
blob_d©a
;

116 i‡(
off
 * (
u16
Ë> 
ah
->
ì¥om_blob
->
size
)

117  
Ál£
;

119 
blob_d©a
 = (
u16
 *)
ah
->
ì¥om_blob
->
d©a
;

120 *
d©a
 = 
blob_d©a
[
off
];

121  
åue
;

122 
	}
}

124 
boﬁ
 
	$©h9k_hw_nvøm_ªad
(
©h_hw
 *
ah
, 
u32
 
off
, 
u16
 *
d©a
)

126 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

127 
boﬁ
 
ªt
;

129 i‡(
ah
->
ì¥om_blob
)

130 
ªt
 = 
	`©h9k_hw_nvøm_ªad_blob
(
ah
, 
off
, 
d©a
);

132 
ªt
 = 
comm⁄
->
bus_›s
->
	`ì¥om_ªad
(comm⁄, 
off
, 
d©a
);

134 i‡(!
ªt
)

135 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

136 "u«bÀÅÿªadÉïromÑegi⁄áàoff£à%u\n", 
off
);

138  
ªt
;

139 
	}
}

141 
	$©h9k_hw_fûl_vpd_èbÀ
(
u8
 
pwrMö
, u8 
pwrMax
, u8 *
pPwrLi°
,

142 
u8
 *
pVpdLi°
, 
u16
 
numI¡î˚±s
,

143 
u8
 *
pRëVpdLi°
)

145 
u16
 
i
, 
k
;

146 
u8
 
cuºPwr
 = 
pwrMö
;

147 
u16
 
idxL
 = 0, 
idxR
 = 0;

149 
i
 = 0; i <(
pwrMax
 - 
pwrMö
) / 2; i++) {

150 
	`©h9k_hw_gë_lowî_uµî_ödex
(
cuºPwr
, 
pPwrLi°
,

151 
numI¡î˚±s
, &(
idxL
),

152 &(
idxR
));

153 i‡(
idxR
 < 1)

154 
idxR
 = 1;

155 i‡(
idxL
 =
numI¡î˚±s
 - 1)

156 
idxL
 = (
u16
Ë(
numI¡î˚±s
 - 2);

157 i‡(
pPwrLi°
[
idxL
] =pPwrLi°[
idxR
])

158 
k
 = 
pVpdLi°
[
idxL
];

160 
k
 = (
u16
)(((
cuºPwr
 - 
pPwrLi°
[
idxL
]Ë* 
pVpdLi°
[
idxR
] +

161 (
pPwrLi°
[
idxR
] - 
cuºPwr
Ë* 
pVpdLi°
[
idxL
]) /

162 (
pPwrLi°
[
idxR
] -ÖPwrLi°[
idxL
]));

163 
pRëVpdLi°
[
i
] = (
u8
Ë
k
;

164 
cuºPwr
 += 2;

166 
	}
}

168 
	$©h9k_hw_gë_Àgacy_èrgë_powîs
(
©h_hw
 *
ah
,

169 
©h9k_ch™√l
 *
ch™
,

170 
ˇl_èrgë_powî_Àg
 *
powInfo
,

171 
u16
 
numCh™√ls
,

172 
ˇl_èrgë_powî_Àg
 *
pNewPowî
,

173 
u16
 
numR©es
, 
boﬁ
 
isExtT¨gë
)

175 
ch™_˚¡îs
 
˚¡îs
;

176 
u16
 
˛o
, 
chi
;

177 
i
;

178 
m©chIndex
 = -1, 
lowIndex
 = -1;

179 
u16
 
‰eq
;

181 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

182 
‰eq
 = (
isExtT¨gë
Ë? 
˚¡îs
.
ext_˚¡î
 : cíãrs.
˘l_˚¡î
;

184 i‡(
‰eq
 <
	`©h9k_hw_fbö2‰eq
(
powInfo
[0].
bCh™√l
,

185 
	`IS_CHAN_2GHZ
(
ch™
))) {

186 
m©chIndex
 = 0;

188 
i
 = 0; (ò< 
numCh™√ls
) &&

189 (
powInfo
[
i
].
bCh™√l
 !
AR5416_BCHAN_UNUSED
); i++) {

190 i‡(
‰eq
 =
	`©h9k_hw_fbö2‰eq
(
powInfo
[
i
].
bCh™√l
,

191 
	`IS_CHAN_2GHZ
(
ch™
))) {

192 
m©chIndex
 = 
i
;

194 } i‡(
‰eq
 < 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
i
].
bCh™√l
,

195 
	`IS_CHAN_2GHZ
(
ch™
)Ë&& 
i
 > 0 &&

196 
‰eq
 > 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
i
 - 1].
bCh™√l
,

197 
	`IS_CHAN_2GHZ
(
ch™
))) {

198 
lowIndex
 = 
i
 - 1;

202 i‡((
m©chIndex
 =-1Ë&& (
lowIndex
 == -1))

203 
m©chIndex
 = 
i
 - 1;

206 i‡(
m©chIndex
 != -1) {

207 *
pNewPowî
 = 
powInfo
[
m©chIndex
];

209 
˛o
 = 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
lowIndex
].
bCh™√l
,

210 
	`IS_CHAN_2GHZ
(
ch™
));

211 
chi
 = 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
lowIndex
 + 1].
bCh™√l
,

212 
	`IS_CHAN_2GHZ
(
ch™
));

214 
i
 = 0; i < 
numR©es
; i++) {

215 
pNewPowî
->
tPow2x
[
i
] =

216 (
u8
)
	`©h9k_hw_öãΩﬁ©e
(
‰eq
, 
˛o
, 
chi
,

217 
powInfo
[
lowIndex
].
tPow2x
[
i
],

218 
powInfo
[
lowIndex
 + 1].
tPow2x
[
i
]);

221 
	}
}

223 
	$©h9k_hw_gë_èrgë_powîs
(
©h_hw
 *
ah
,

224 
©h9k_ch™√l
 *
ch™
,

225 
ˇl_èrgë_powî_ht
 *
powInfo
,

226 
u16
 
numCh™√ls
,

227 
ˇl_èrgë_powî_ht
 *
pNewPowî
,

228 
u16
 
numR©es
, 
boﬁ
 
isHt40T¨gë
)

230 
ch™_˚¡îs
 
˚¡îs
;

231 
u16
 
˛o
, 
chi
;

232 
i
;

233 
m©chIndex
 = -1, 
lowIndex
 = -1;

234 
u16
 
‰eq
;

236 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

237 
‰eq
 = 
isHt40T¨gë
 ? 
˚¡îs
.
sy¡h_˚¡î
 : cíãrs.
˘l_˚¡î
;

239 i‡(
‰eq
 <
	`©h9k_hw_fbö2‰eq
(
powInfo
[0].
bCh™√l
, 
	`IS_CHAN_2GHZ
(
ch™
))) {

240 
m©chIndex
 = 0;

242 
i
 = 0; (ò< 
numCh™√ls
) &&

243 (
powInfo
[
i
].
bCh™√l
 !
AR5416_BCHAN_UNUSED
); i++) {

244 i‡(
‰eq
 =
	`©h9k_hw_fbö2‰eq
(
powInfo
[
i
].
bCh™√l
,

245 
	`IS_CHAN_2GHZ
(
ch™
))) {

246 
m©chIndex
 = 
i
;

249 i‡(
‰eq
 < 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
i
].
bCh™√l
,

250 
	`IS_CHAN_2GHZ
(
ch™
)Ë&& 
i
 > 0 &&

251 
‰eq
 > 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
i
 - 1].
bCh™√l
,

252 
	`IS_CHAN_2GHZ
(
ch™
))) {

253 
lowIndex
 = 
i
 - 1;

257 i‡((
m©chIndex
 =-1Ë&& (
lowIndex
 == -1))

258 
m©chIndex
 = 
i
 - 1;

261 i‡(
m©chIndex
 != -1) {

262 *
pNewPowî
 = 
powInfo
[
m©chIndex
];

264 
˛o
 = 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
lowIndex
].
bCh™√l
,

265 
	`IS_CHAN_2GHZ
(
ch™
));

266 
chi
 = 
	`©h9k_hw_fbö2‰eq
(
powInfo
[
lowIndex
 + 1].
bCh™√l
,

267 
	`IS_CHAN_2GHZ
(
ch™
));

269 
i
 = 0; i < 
numR©es
; i++) {

270 
pNewPowî
->
tPow2x
[
i
] = (
u8
)
	`©h9k_hw_öãΩﬁ©e
(
‰eq
,

271 
˛o
, 
chi
,

272 
powInfo
[
lowIndex
].
tPow2x
[
i
],

273 
powInfo
[
lowIndex
 + 1].
tPow2x
[
i
]);

276 
	}
}

278 
u16
 
	$©h9k_hw_gë_max_edge_powî
(
u16
 
‰eq
, 
ˇl_˘l_edges
 *
pRdEdgesPowî
,

279 
boﬁ
 
is2GHz
, 
num_b™d_edges
)

281 
u16
 
twi˚MaxEdgePowî
 = 
MAX_RATE_POWER
;

282 
i
;

284 
i
 = 0; (ò< 
num_b™d_edges
) &&

285 (
pRdEdgesPowî
[
i
].
bCh™√l
 !
AR5416_BCHAN_UNUSED
); i++) {

286 i‡(
‰eq
 =
	`©h9k_hw_fbö2‰eq
(
pRdEdgesPowî
[
i
].
bCh™√l
, 
is2GHz
)) {

287 
twi˚MaxEdgePowî
 = 
	`CTL_EDGE_TPOWER
(
pRdEdgesPowî
[
i
].
˘l
);

289 } i‡((
i
 > 0) &&

290 (
‰eq
 < 
	`©h9k_hw_fbö2‰eq
(
pRdEdgesPowî
[
i
].
bCh™√l
,

291 
is2GHz
))) {

292 i‡(
	`©h9k_hw_fbö2‰eq
(
pRdEdgesPowî
[
i
 - 1].
bCh™√l
,

293 
is2GHz
Ë< 
‰eq
 &&

294 
	`CTL_EDGE_FLAGS
(
pRdEdgesPowî
[
i
 - 1].
˘l
)) {

295 
twi˚MaxEdgePowî
 =

296 
	`CTL_EDGE_TPOWER
(
pRdEdgesPowî
[
i
 - 1].
˘l
);

302  
twi˚MaxEdgePowî
;

303 
	}
}

305 
u16
 
	$©h9k_hw_gë_sˇÀd_powî
(
©h_hw
 *
ah
, 
u16
 
powî_limô
,

306 
u8
 
™ã¬a_ªdu˘i⁄
)

308 
u16
 
ªdu˘i⁄
 = 
™ã¬a_ªdu˘i⁄
;

314 
	`¨5416_gë_¡xchaös
(
ah
->
txchaömask
)) {

318 
ªdu˘i⁄
 +
POWER_CORRECTION_FOR_TWO_CHAIN
;

321 
ªdu˘i⁄
 +
POWER_CORRECTION_FOR_THREE_CHAIN
;

325 i‡(
powî_limô
 > 
ªdu˘i⁄
)

326 
powî_limô
 -
ªdu˘i⁄
;

328 
powî_limô
 = 0;

330  
powî_limô
;

331 
	}
}

333 
	$©h9k_hw_upd©e_ªguœt‹y_maxpowî
(
©h_hw
 *
ah
)

335 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

336 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

338 
	`¨5416_gë_¡xchaös
(
ah
->
txchaömask
)) {

342 
ªguœt‹y
->
max_powî_Àvñ
 +
POWER_CORRECTION_FOR_TWO_CHAIN
;

345 
ªguœt‹y
->
max_powî_Àvñ
 +
POWER_CORRECTION_FOR_THREE_CHAIN
;

348 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Invalid chainmask configuration\n");

351 
	}
}

353 
	$©h9k_hw_gë_gaö_bound¨õs_pdadcs
(
©h_hw
 *
ah
,

354 
©h9k_ch™√l
 *
ch™
,

355 *
pRawD©aSë
,

356 
u8
 *
bCh™s
, 
u16
 
avaûPõrs
,

357 
u16
 
tPdGaöOvîœp
,

358 
u16
 *
pPdGaöBound¨õs
, 
u8
 *
pPDADCVÆues
,

359 
u16
 
numXpdGaös
)

361 
i
, 
j
, 
k
;

362 
öt16_t
 
ss
;

363 
u16
 
idxL
 = 0, 
idxR
 = 0, 
numPõrs
;

364 
u8
 
vpdTabÀL
[
AR5416_NUM_PD_GAINS
]

365 [
AR5416_MAX_PWR_RANGE_IN_HALF_DB
];

366 
u8
 
vpdTabÀR
[
AR5416_NUM_PD_GAINS
]

367 [
AR5416_MAX_PWR_RANGE_IN_HALF_DB
];

368 
u8
 
vpdTabÀI
[
AR5416_NUM_PD_GAINS
]

369 [
AR5416_MAX_PWR_RANGE_IN_HALF_DB
];

371 
u8
 *
pVpdL
, *
pVpdR
, *
pPwrL
, *
pPwrR
;

372 
u8
 
möPwrT4
[
AR5416_NUM_PD_GAINS
];

373 
u8
 
maxPwrT4
[
AR5416_NUM_PD_GAINS
];

374 
öt16_t
 
vpdSãp
;

375 
öt16_t
 
tmpVÆ
;

376 
u16
 
sizeCuºVpdTabÀ
, 
maxIndex
, 
tgtIndex
;

377 
boﬁ
 
m©ch
;

378 
öt16_t
 
möDñè
 = 0;

379 
ch™_˚¡îs
 
˚¡îs
;

380 
pdgaö_bound¨y_deÁu…
;

381 
ˇl_d©a_≥r_‰eq
 *
d©a_def
 = 
pRawD©aSë
;

382 
ˇl_d©a_≥r_‰eq_4k
 *
d©a_4k
 = 
pRawD©aSë
;

383 
ˇl_d©a_≥r_‰eq_¨9287
 *
d©a_9287
 = 
pRawD©aSë
;

384 
boﬁ
 
ì¥om_4k
 = 
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9271
(ah);

385 
öãr˚±s
;

387 i‡(
	`AR_SREV_9287
(
ah
))

388 
öãr˚±s
 = 
AR9287_PD_GAIN_ICEPTS
;

390 
öãr˚±s
 = 
AR5416_PD_GAIN_ICEPTS
;

392 
	`mem£t
(&
möPwrT4
, 0, 
AR5416_NUM_PD_GAINS
);

393 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

395 
numPõrs
 = 0;ÇumPõr†< 
avaûPõrs
;ÇumPiers++) {

396 i‡(
bCh™s
[
numPõrs
] =
AR5416_BCHAN_UNUSED
)

400 
m©ch
 = 
	`©h9k_hw_gë_lowî_uµî_ödex
((
u8
)
	`FREQ2FBIN
(
˚¡îs
.
sy¡h_˚¡î
,

401 
	`IS_CHAN_2GHZ
(
ch™
)),

402 
bCh™s
, 
numPõrs
, &
idxL
, &
idxR
);

404 i‡(
m©ch
) {

405 i‡(
	`AR_SREV_9287
(
ah
)) {

406 
i
 = 0; i < 
numXpdGaös
; i++) {

407 
möPwrT4
[
i
] = 
d©a_9287
[
idxL
].
pwrPdg
[i][0];

408 
maxPwrT4
[
i
] = 
d©a_9287
[
idxL
].
pwrPdg
[i][
öãr˚±s
 - 1];

409 
	`©h9k_hw_fûl_vpd_èbÀ
(
möPwrT4
[
i
], 
maxPwrT4
[i],

410 
d©a_9287
[
idxL
].
pwrPdg
[
i
],

411 
d©a_9287
[
idxL
].
vpdPdg
[
i
],

412 
öãr˚±s
,

413 
vpdTabÀI
[
i
]);

415 } i‡(
ì¥om_4k
) {

416 
i
 = 0; i < 
numXpdGaös
; i++) {

417 
möPwrT4
[
i
] = 
d©a_4k
[
idxL
].
pwrPdg
[i][0];

418 
maxPwrT4
[
i
] = 
d©a_4k
[
idxL
].
pwrPdg
[i][
öãr˚±s
 - 1];

419 
	`©h9k_hw_fûl_vpd_èbÀ
(
möPwrT4
[
i
], 
maxPwrT4
[i],

420 
d©a_4k
[
idxL
].
pwrPdg
[
i
],

421 
d©a_4k
[
idxL
].
vpdPdg
[
i
],

422 
öãr˚±s
,

423 
vpdTabÀI
[
i
]);

426 
i
 = 0; i < 
numXpdGaös
; i++) {

427 
möPwrT4
[
i
] = 
d©a_def
[
idxL
].
pwrPdg
[i][0];

428 
maxPwrT4
[
i
] = 
d©a_def
[
idxL
].
pwrPdg
[i][
öãr˚±s
 - 1];

429 
	`©h9k_hw_fûl_vpd_èbÀ
(
möPwrT4
[
i
], 
maxPwrT4
[i],

430 
d©a_def
[
idxL
].
pwrPdg
[
i
],

431 
d©a_def
[
idxL
].
vpdPdg
[
i
],

432 
öãr˚±s
,

433 
vpdTabÀI
[
i
]);

437 
i
 = 0; i < 
numXpdGaös
; i++) {

438 i‡(
	`AR_SREV_9287
(
ah
)) {

439 
pVpdL
 = 
d©a_9287
[
idxL
].
vpdPdg
[
i
];

440 
pPwrL
 = 
d©a_9287
[
idxL
].
pwrPdg
[
i
];

441 
pVpdR
 = 
d©a_9287
[
idxR
].
vpdPdg
[
i
];

442 
pPwrR
 = 
d©a_9287
[
idxR
].
pwrPdg
[
i
];

443 } i‡(
ì¥om_4k
) {

444 
pVpdL
 = 
d©a_4k
[
idxL
].
vpdPdg
[
i
];

445 
pPwrL
 = 
d©a_4k
[
idxL
].
pwrPdg
[
i
];

446 
pVpdR
 = 
d©a_4k
[
idxR
].
vpdPdg
[
i
];

447 
pPwrR
 = 
d©a_4k
[
idxR
].
pwrPdg
[
i
];

449 
pVpdL
 = 
d©a_def
[
idxL
].
vpdPdg
[
i
];

450 
pPwrL
 = 
d©a_def
[
idxL
].
pwrPdg
[
i
];

451 
pVpdR
 = 
d©a_def
[
idxR
].
vpdPdg
[
i
];

452 
pPwrR
 = 
d©a_def
[
idxR
].
pwrPdg
[
i
];

455 
möPwrT4
[
i
] = 
	`max
(
pPwrL
[0], 
pPwrR
[0]);

457 
maxPwrT4
[
i
] =

458 
	`mö
(
pPwrL
[
öãr˚±s
 - 1],

459 
pPwrR
[
öãr˚±s
 - 1]);

462 
	`©h9k_hw_fûl_vpd_èbÀ
(
möPwrT4
[
i
], 
maxPwrT4
[i],

463 
pPwrL
, 
pVpdL
,

464 
öãr˚±s
,

465 
vpdTabÀL
[
i
]);

466 
	`©h9k_hw_fûl_vpd_èbÀ
(
möPwrT4
[
i
], 
maxPwrT4
[i],

467 
pPwrR
, 
pVpdR
,

468 
öãr˚±s
,

469 
vpdTabÀR
[
i
]);

471 
j
 = 0; j <(
maxPwrT4
[
i
] - 
möPwrT4
[i]) / 2; j++) {

472 
vpdTabÀI
[
i
][
j
] =

473 (
u8
)(
	`©h9k_hw_öãΩﬁ©e
((
u16
)

474 
	`FREQ2FBIN
(
˚¡îs
.

475 
sy¡h_˚¡î
,

476 
IS_CHAN_2GHZ


477 (
ch™
)),

478 
bCh™s
[
idxL
], bCh™s[
idxR
],

479 
vpdTabÀL
[
i
][
j
], 
vpdTabÀR
[i][j]));

484 
k
 = 0;

486 
i
 = 0; i < 
numXpdGaös
; i++) {

487 i‡(
i
 =(
numXpdGaös
 - 1))

488 
pPdGaöBound¨õs
[
i
] =

489 (
u16
)(
maxPwrT4
[
i
] / 2);

491 
pPdGaöBound¨õs
[
i
] =

492 (
u16
)((
maxPwrT4
[
i
] + 
möPwrT4
[i + 1]) / 4);

494 
pPdGaöBound¨õs
[
i
] =

495 
	`mö
((
u16
)
MAX_RATE_POWER
, 
pPdGaöBound¨õs
[
i
]);

497 
möDñè
 = 0;

499 i‡(
i
 == 0) {

500 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

501 
ss
 = (
öt16_t
)(0 - (
möPwrT4
[
i
] / 2));

503 
ss
 = 0;

505 
ss
 = (
öt16_t
)((
pPdGaöBound¨õs
[
i
 - 1] -

506 (
möPwrT4
[
i
] / 2)) -

507 
tPdGaöOvîœp
 + 1 + 
möDñè
);

509 
vpdSãp
 = (
öt16_t
)(
vpdTabÀI
[
i
][1] - vpdTableI[i][0]);

510 
vpdSãp
 = (
öt16_t
)((vpdStep < 1) ? 1 : vpdStep);

512 (
ss
 < 0Ë&& (
k
 < (
AR5416_NUM_PDADC_VALUES
 - 1))) {

513 
tmpVÆ
 = (
öt16_t
)(
vpdTabÀI
[
i
][0] + 
ss
 * 
vpdSãp
);

514 
pPDADCVÆues
[
k
++] = (
u8
)((
tmpVÆ
 < 0) ? 0 :ÅmpVal);

515 
ss
++;

518 
sizeCuºVpdTabÀ
 = (
u8
Ë((
maxPwrT4
[
i
] - 
möPwrT4
[i]) / 2 + 1);

519 
tgtIndex
 = (
u8
)(
pPdGaöBound¨õs
[
i
] + 
tPdGaöOvîœp
 -

520 (
möPwrT4
[
i
] / 2));

521 
maxIndex
 = (
tgtIndex
 < 
sizeCuºVpdTabÀ
) ?

522 
tgtIndex
 : 
sizeCuºVpdTabÀ
;

524 (
ss
 < 
maxIndex
Ë&& (
k
 < (
AR5416_NUM_PDADC_VALUES
 - 1))) {

525 
pPDADCVÆues
[
k
++] = 
vpdTabÀI
[
i
][
ss
++];

528 
vpdSãp
 = (
öt16_t
)(
vpdTabÀI
[
i
][
sizeCuºVpdTabÀ
 - 1] -

529 
vpdTabÀI
[
i
][
sizeCuºVpdTabÀ
 - 2]);

530 
vpdSãp
 = (
öt16_t
)((vpdStep < 1) ? 1 : vpdStep);

532 i‡(
tgtIndex
 >
maxIndex
) {

533 (
ss
 <
tgtIndex
) &&

534 (
k
 < (
AR5416_NUM_PDADC_VALUES
 - 1))) {

535 
tmpVÆ
 = (
öt16_t
)((
vpdTabÀI
[
i
][
sizeCuºVpdTabÀ
 - 1] +

536 (
ss
 - 
maxIndex
 + 1Ë* 
vpdSãp
));

537 
pPDADCVÆues
[
k
++] = (
u8
)((
tmpVÆ
 > 255) ?

538 255 : 
tmpVÆ
);

539 
ss
++;

544 i‡(
ì¥om_4k
)

545 
pdgaö_bound¨y_deÁu…
 = 58;

547 
pdgaö_bound¨y_deÁu…
 = 
pPdGaöBound¨õs
[
i
 - 1];

549 
i
 < 
AR5416_PD_GAINS_IN_MASK
) {

550 
pPdGaöBound¨õs
[
i
] = 
pdgaö_bound¨y_deÁu…
;

551 
i
++;

554 
k
 < 
AR5416_NUM_PDADC_VALUES
) {

555 
pPDADCVÆues
[
k
] =ÖPDADCValues[k - 1];

556 
k
++;

558 
	}
}

560 
	$©h9k_hw_ì¥om_öô
(
©h_hw
 *
ah
)

562 
°©us
;

564 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

565 
ah
->
ìp_›s
 = &
ìp_¨9300_›s
;

566 i‡(
	`AR_SREV_9287
(
ah
)) {

567 
ah
->
ìp_›s
 = &
ìp_¨9287_›s
;

568 } i‡(
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9271
(ah)) {

569 
ah
->
ìp_›s
 = &
ìp_4k_›s
;

571 
ah
->
ìp_›s
 = &
ìp_def_›s
;

574 i‡(!
ah
->
ìp_›s
->
	`fûl_ì¥om
(ah))

575  -
EIO
;

577 
°©us
 = 
ah
->
ìp_›s
->
	`check_ì¥om
(ah);

579  
°©us
;

580 
	}
}

	@eeprom.h

17 #i‚de‡
EEPROM_H


18 
	#EEPROM_H


	)

20 
	#AR_EEPROM_MODAL_SPURS
 5

	)

22 
	~"../©h.h
"

23 
	~<√t/cfg80211.h
>

24 
	~"¨9003_ì¥om.h
"

26 #ifde‡
__BIG_ENDIAN


27 
	#AR5416_EEPROM_MAGIC
 0x5Ø5

	)

29 
	#AR5416_EEPROM_MAGIC
 0xa55a

	)

32 
	#CTRY_DEBUG
 0x1ff

	)

33 
	#CTRY_DEFAULT
 0

	)

35 
	#AR_EEPROM_EEPCAP_COMPRESS_DIS
 0x0001

	)

36 
	#AR_EEPROM_EEPCAP_AES_DIS
 0x0002

	)

37 
	#AR_EEPROM_EEPCAP_FASTFRAME_DIS
 0x0004

	)

38 
	#AR_EEPROM_EEPCAP_BURST_DIS
 0x0008

	)

39 
	#AR_EEPROM_EEPCAP_MAXQCU
 0x01F0

	)

40 
	#AR_EEPROM_EEPCAP_MAXQCU_S
 4

	)

41 
	#AR_EEPROM_EEPCAP_HEAVY_CLIP_EN
 0x0200

	)

42 
	#AR_EEPROM_EEPCAP_KC_ENTRIES
 0xF000

	)

43 
	#AR_EEPROM_EEPCAP_KC_ENTRIES_S
 12

	)

45 
	#AR_EEPROM_EEREGCAP_EN_FCC_MIDBAND
 0x0040

	)

46 
	#AR_EEPROM_EEREGCAP_EN_KK_U1_EVEN
 0x0080

	)

47 
	#AR_EEPROM_EEREGCAP_EN_KK_U2
 0x0100

	)

48 
	#AR_EEPROM_EEREGCAP_EN_KK_MIDBAND
 0x0200

	)

49 
	#AR_EEPROM_EEREGCAP_EN_KK_U1_ODD
 0x0400

	)

50 
	#AR_EEPROM_EEREGCAP_EN_KK_NEW_11A
 0x0800

	)

52 
	#AR_EEPROM_EEREGCAP_EN_KK_U1_ODD_PRE4_0
 0x4000

	)

53 
	#AR_EEPROM_EEREGCAP_EN_KK_NEW_11A_PRE4_0
 0x8000

	)

55 
	#AR5416_EEPROM_MAGIC_OFFSET
 0x0

	)

56 
	#AR5416_EEPROM_S
 2

	)

57 
	#AR5416_EEPROM_OFFSET
 0x2000

	)

58 
	#AR5416_EEPROM_MAX
 0x´0

	)

60 
	#AR5416_EEPROM_START_ADDR
 \

61 (
	`AR_SREV_9100
(
ah
)Ë? 0x1fff1000 : 0x503f1200

	)

63 
	#SD_NO_CTL
 0xE0

	)

64 
	#NO_CTL
 0xff

	)

65 
	#CTL_MODE_M
 0xf

	)

66 
	#CTL_11A
 0

	)

67 
	#CTL_11B
 1

	)

68 
	#CTL_11G
 2

	)

69 
	#CTL_2GHT20
 5

	)

70 
	#CTL_5GHT20
 6

	)

71 
	#CTL_2GHT40
 7

	)

72 
	#CTL_5GHT40
 8

	)

74 
	#EXT_ADDITIVE
 (0x8000)

	)

75 
	#CTL_11A_EXT
 (
CTL_11A
 | 
EXT_ADDITIVE
)

	)

76 
	#CTL_11G_EXT
 (
CTL_11G
 | 
EXT_ADDITIVE
)

	)

77 
	#CTL_11B_EXT
 (
CTL_11B
 | 
EXT_ADDITIVE
)

	)

79 
	#SUB_NUM_CTL_MODES_AT_5G_40
 2

	)

80 
	#SUB_NUM_CTL_MODES_AT_2G_40
 3

	)

82 
	#POWER_CORRECTION_FOR_TWO_CHAIN
 6

	)

83 
	#POWER_CORRECTION_FOR_THREE_CHAIN
 10

	)

95 
	#AR9285_RDEXT_DEFAULT
 0x1F

	)

97 
	#ATH9K_POW_SM
(
_r
, 
_s
Ë(((_rË& 0x3fË<< (_s))

	)

98 
	#FREQ2FBIN
(
x
, 
y
Ë((yË? ((xË- 2300Ë: (((xË- 4800Ë/ 5))

	)

99 
	#FBIN2FREQ
(
x
, 
y
Ë((yË? (2300 + xË: (4800 + 5 * x))

	)

100 
	#©h9k_hw_u£_Êash
(
_ah
Ë(!(_ah->
ah_Êags
 & 
AH_USE_EEPROM
))

	)

102 
	#AR5416_VER_MASK
 (
ìp
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
)

	)

103 
	#OLC_FOR_AR9280_20_LATER
 (
	`AR_SREV_9280_20_OR_LATER
(
ah
) && \

104 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_OL_PWRCTRL
))

	)

105 
	#OLC_FOR_AR9287_10_LATER
 (
	`AR_SREV_9287_11_OR_LATER
(
ah
) && \

106 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_OL_PWRCTRL
))

	)

108 
	#EEP_RFSILENT_ENABLED
 0x0001

	)

109 
	#EEP_RFSILENT_ENABLED_S
 0

	)

110 
	#EEP_RFSILENT_POLARITY
 0x0002

	)

111 
	#EEP_RFSILENT_POLARITY_S
 1

	)

112 
	#EEP_RFSILENT_GPIO_SEL
 ((
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
◊h)Ë? 0x00f¯: 0x001c)

	)

113 
	#EEP_RFSILENT_GPIO_SEL_S
 2

	)

115 
	#AR5416_OPFLAGS_11A
 0x01

	)

116 
	#AR5416_OPFLAGS_11G
 0x02

	)

117 
	#AR5416_OPFLAGS_N_5G_HT40
 0x04

	)

118 
	#AR5416_OPFLAGS_N_2G_HT40
 0x08

	)

119 
	#AR5416_OPFLAGS_N_5G_HT20
 0x10

	)

120 
	#AR5416_OPFLAGS_N_2G_HT20
 0x20

	)

122 
	#AR5416_EEP_NO_BACK_VER
 0x1

	)

123 
	#AR5416_EEP_VER
 0xE

	)

124 
	#AR5416_EEP_VER_MINOR_MASK
 0x0FFF

	)

125 
	#AR5416_EEP_MINOR_VER_2
 0x2

	)

126 
	#AR5416_EEP_MINOR_VER_3
 0x3

	)

127 
	#AR5416_EEP_MINOR_VER_7
 0x7

	)

128 
	#AR5416_EEP_MINOR_VER_9
 0x9

	)

129 
	#AR5416_EEP_MINOR_VER_16
 0x10

	)

130 
	#AR5416_EEP_MINOR_VER_17
 0x11

	)

131 
	#AR5416_EEP_MINOR_VER_19
 0x13

	)

132 
	#AR5416_EEP_MINOR_VER_20
 0x14

	)

133 
	#AR5416_EEP_MINOR_VER_21
 0x15

	)

134 
	#AR5416_EEP_MINOR_VER_22
 0x16

	)

136 
	#AR5416_NUM_5G_CAL_PIERS
 8

	)

137 
	#AR5416_NUM_2G_CAL_PIERS
 4

	)

138 
	#AR5416_NUM_5G_20_TARGET_POWERS
 8

	)

139 
	#AR5416_NUM_5G_40_TARGET_POWERS
 8

	)

140 
	#AR5416_NUM_2G_CCK_TARGET_POWERS
 3

	)

141 
	#AR5416_NUM_2G_20_TARGET_POWERS
 4

	)

142 
	#AR5416_NUM_2G_40_TARGET_POWERS
 4

	)

143 
	#AR5416_NUM_CTLS
 24

	)

144 
	#AR5416_NUM_BAND_EDGES
 8

	)

145 
	#AR5416_NUM_PD_GAINS
 4

	)

146 
	#AR5416_PD_GAINS_IN_MASK
 4

	)

147 
	#AR5416_PD_GAIN_ICEPTS
 5

	)

148 
	#AR5416_NUM_PDADC_VALUES
 128

	)

149 
	#AR5416_BCHAN_UNUSED
 0xFF

	)

150 
	#AR5416_MAX_PWR_RANGE_IN_HALF_DB
 64

	)

151 
	#AR5416_MAX_CHAINS
 3

	)

152 
	#AR9300_MAX_CHAINS
 3

	)

153 
	#AR5416_PWR_TABLE_OFFSET_DB
 -5

	)

156 
	#AR5416_EEP_RXGAIN_23DB_BACKOFF
 0

	)

157 
	#AR5416_EEP_RXGAIN_13DB_BACKOFF
 1

	)

158 
	#AR5416_EEP_RXGAIN_ORIG
 2

	)

161 
	#AR5416_EEP_TXGAIN_ORIGINAL
 0

	)

162 
	#AR5416_EEP_TXGAIN_HIGH_POWER
 1

	)

164 
	#AR5416_EEP4K_START_LOC
 64

	)

165 
	#AR5416_EEP4K_NUM_2G_CAL_PIERS
 3

	)

166 
	#AR5416_EEP4K_NUM_2G_CCK_TARGET_POWERS
 3

	)

167 
	#AR5416_EEP4K_NUM_2G_20_TARGET_POWERS
 3

	)

168 
	#AR5416_EEP4K_NUM_2G_40_TARGET_POWERS
 3

	)

169 
	#AR5416_EEP4K_NUM_CTLS
 12

	)

170 
	#AR5416_EEP4K_NUM_BAND_EDGES
 4

	)

171 
	#AR5416_EEP4K_NUM_PD_GAINS
 2

	)

172 
	#AR5416_EEP4K_MAX_CHAINS
 1

	)

174 
	#AR9280_TX_GAIN_TABLE_SIZE
 22

	)

176 
	#AR9287_EEP_VER
 0xE

	)

177 
	#AR9287_EEP_VER_MINOR_MASK
 0xFFF

	)

178 
	#AR9287_EEP_MINOR_VER_1
 0x1

	)

179 
	#AR9287_EEP_MINOR_VER_2
 0x2

	)

180 
	#AR9287_EEP_MINOR_VER_3
 0x3

	)

181 
	#AR9287_EEP_MINOR_VER
 
AR9287_EEP_MINOR_VER_3


	)

182 
	#AR9287_EEP_MINOR_VER_b
 
AR9287_EEP_MINOR_VER


	)

183 
	#AR9287_EEP_NO_BACK_VER
 
AR9287_EEP_MINOR_VER_1


	)

185 
	#AR9287_EEP_START_LOC
 128

	)

186 
	#AR9287_HTC_EEP_START_LOC
 256

	)

187 
	#AR9287_NUM_2G_CAL_PIERS
 3

	)

188 
	#AR9287_NUM_2G_CCK_TARGET_POWERS
 3

	)

189 
	#AR9287_NUM_2G_20_TARGET_POWERS
 3

	)

190 
	#AR9287_NUM_2G_40_TARGET_POWERS
 3

	)

191 
	#AR9287_NUM_CTLS
 12

	)

192 
	#AR9287_NUM_BAND_EDGES
 4

	)

193 
	#AR9287_PD_GAIN_ICEPTS
 1

	)

194 
	#AR9287_EEPMISC_BIG_ENDIAN
 0x01

	)

195 
	#AR9287_EEPMISC_WOW
 0x02

	)

196 
	#AR9287_MAX_CHAINS
 2

	)

197 
	#AR9287_ANT_16S
 32

	)

199 
	#AR9287_DATA_SZ
 32

	)

201 
	#AR9287_PWR_TABLE_OFFSET_DB
 -5

	)

203 
	#AR9287_CHECKSUM_LOCATION
 (
AR9287_EEP_START_LOC
 + 1)

	)

205 
	#CTL_EDGE_TPOWER
(
_˘l
Ë((_˘lË& 0x3f)

	)

206 
	#CTL_EDGE_FLAGS
(
_˘l
Ë(((_˘lË>> 6Ë& 0x03)

	)

208 
	#LNA_CTL_BUF_MODE
 
	`BIT
(0)

	)

209 
	#LNA_CTL_ISEL_LO
 
	`BIT
(1)

	)

210 
	#LNA_CTL_ISEL_HI
 
	`BIT
(2)

	)

211 
	#LNA_CTL_BUF_IN
 
	`BIT
(3)

	)

212 
	#LNA_CTL_FEM_BAND
 
	`BIT
(4)

	)

213 
	#LNA_CTL_LOCAL_BIAS
 
	`BIT
(5)

	)

214 
	#LNA_CTL_FORCE_XPA
 
	`BIT
(6)

	)

215 
	#LNA_CTL_USE_ANT1
 
	`BIT
(7)

	)

217 
	eì¥om_∑øm
 {

218 
	mEEP_NFTHRESH_5
,

219 
	mEEP_NFTHRESH_2
,

220 
	mEEP_MAC_MSW
,

221 
	mEEP_MAC_MID
,

222 
	mEEP_MAC_LSW
,

223 
	mEEP_REG_0
,

224 
	mEEP_OP_CAP
,

225 
	mEEP_OP_MODE
,

226 
	mEEP_RF_SILENT
,

227 
	mEEP_OB_5
,

228 
	mEEP_DB_5
,

229 
	mEEP_OB_2
,

230 
	mEEP_DB_2
,

231 
	mEEP_MINOR_REV
,

232 
	mEEP_TX_MASK
,

233 
	mEEP_RX_MASK
,

234 
	mEEP_FSTCLK_5G
,

235 
	mEEP_RXGAIN_TYPE
,

236 
	mEEP_OL_PWRCTRL
,

237 
	mEEP_TXGAIN_TYPE
,

238 
	mEEP_RC_CHAIN_MASK
,

239 
	mEEP_DAC_HPWR_5G
,

240 
	mEEP_FRAC_N_5G
,

241 
	mEEP_DEV_TYPE
,

242 
	mEEP_TEMPSENSE_SLOPE
,

243 
	mEEP_TEMPSENSE_SLOPE_PAL_ON
,

244 
	mEEP_PWR_TABLE_OFFSET
,

245 
	mEEP_PAPRD
,

246 
	mEEP_MODAL_VER
,

247 
	mEEP_ANT_DIV_CTL1
,

248 
	mEEP_CHAIN_MASK_REDUCE
,

249 
	mEEP_ANTENNA_GAIN_2G
,

250 
	mEEP_ANTENNA_GAIN_5G
,

253 
	e¨5416_øãs
 {

254 
	møã6mb
, 
	møã9mb
, 
	møã12mb
, 
	møã18mb
,

255 
	møã24mb
, 
	møã36mb
, 
	møã48mb
, 
	møã54mb
,

256 
	møã1l
, 
	møã2l
, 
	møã2s
, 
	møã5_5l
,

257 
	møã5_5s
, 
	møã11l
, 
	møã11s
, 
	møãXr
,

258 
	møãHt20_0
, 
	møãHt20_1
, 
	møãHt20_2
, 
	møãHt20_3
,

259 
	møãHt20_4
, 
	møãHt20_5
, 
	møãHt20_6
, 
	møãHt20_7
,

260 
	møãHt40_0
, 
	møãHt40_1
, 
	møãHt40_2
, 
	møãHt40_3
,

261 
	møãHt40_4
, 
	møãHt40_5
, 
	møãHt40_6
, 
	møãHt40_7
,

262 
	møãDupCck
, 
	møãDupOfdm
, 
	møãExtCck
, 
	møãExtOfdm
,

263 
	mAr5416R©eSize


266 
	e©h9k_hÆ_‰eq_b™d
 {

267 
	mATH9K_HAL_FREQ_BAND_5GHZ
 = 0,

268 
	mATH9K_HAL_FREQ_BAND_2GHZ
 = 1

271 
	sba£_ìp_hódî
 {

272 
u16
 
	mÀngth
;

273 
u16
 
	mchecksum
;

274 
u16
 
	mvîsi⁄
;

275 
u8
 
	m›C≠Fœgs
;

276 
u8
 
	mìpMisc
;

277 
u16
 
	mªgDmn
[2];

278 
u8
 
	mmacAddr
[6];

279 
u8
 
	mrxMask
;

280 
u8
 
	mtxMask
;

281 
u16
 
	mrfSûít
;

282 
u16
 
	mblueToŸhO±i⁄s
;

283 
u16
 
	mdevi˚C≠
;

284 
u32
 
	mböBuûdNumbî
;

285 
u8
 
	mdevi˚Ty≥
;

286 
u8
 
	mpwd˛köd
;

287 
u8
 
	mÁ°Clk5g
;

288 
u8
 
	mdivChaö
;

289 
u8
 
	mrxGaöTy≥
;

290 
u8
 
	mdacHiPwrMode_5G
;

291 
u8
 
	m›íLo›PwrC¡l
;

292 
u8
 
	mdacLpMode
;

293 
u8
 
	mtxGaöTy≥
;

294 
u8
 
	mrcChaöMask
;

295 
u8
 
	mdesúedSˇÀCCK
;

296 
u8
 
	mpwr_èbÀ_off£t
;

297 
u8
 
	m‰ac_n_5g
;

298 
u8
 
	mfutuªBa£_3
[21];

299 } 
	g__∑cked
;

301 
	sba£_ìp_hódî_4k
 {

302 
u16
 
	mÀngth
;

303 
u16
 
	mchecksum
;

304 
u16
 
	mvîsi⁄
;

305 
u8
 
	m›C≠Fœgs
;

306 
u8
 
	mìpMisc
;

307 
u16
 
	mªgDmn
[2];

308 
u8
 
	mmacAddr
[6];

309 
u8
 
	mrxMask
;

310 
u8
 
	mtxMask
;

311 
u16
 
	mrfSûít
;

312 
u16
 
	mblueToŸhO±i⁄s
;

313 
u16
 
	mdevi˚C≠
;

314 
u32
 
	mböBuûdNumbî
;

315 
u8
 
	mdevi˚Ty≥
;

316 
u8
 
	mtxGaöTy≥
;

317 } 
	g__∑cked
;

320 
	s•ur_ch™
 {

321 
u16
 
	m•urCh™
;

322 
u8
 
	m•urR™geLow
;

323 
u8
 
	m•urR™geHigh
;

324 } 
	g__∑cked
;

326 
	smodÆ_ìp_hódî
 {

327 
u32
 
	m™tCålChaö
[
AR5416_MAX_CHAINS
];

328 
u32
 
	m™tCålComm⁄
;

329 
u8
 
	m™ã¬aGaöCh
[
AR5416_MAX_CHAINS
];

330 
u8
 
	mswôchSëéög
;

331 
u8
 
	mtxRxAâíCh
[
AR5416_MAX_CHAINS
];

332 
u8
 
	mrxTxM¨göCh
[
AR5416_MAX_CHAINS
];

333 
u8
 
	madcDesúedSize
;

334 
u8
 
	mpgaDesúedSize
;

335 
u8
 
	mx aGaöCh
[
AR5416_MAX_CHAINS
];

336 
u8
 
	mtxEndToX∑Off
;

337 
u8
 
	mtxEndToRxOn
;

338 
u8
 
	mtxFømeToX∑On
;

339 
u8
 
	mthªsh62
;

340 
u8
 
	mnoi£Flo‹ThªshCh
[
AR5416_MAX_CHAINS
];

341 
u8
 
	mxpdGaö
;

342 
u8
 
	mxpd
;

343 
u8
 
	miqCÆICh
[
AR5416_MAX_CHAINS
];

344 
u8
 
	miqCÆQCh
[
AR5416_MAX_CHAINS
];

345 
u8
 
	mpdGaöOvîœp
;

346 
u8
 
	mob
;

347 
u8
 
	mdb
;

348 
u8
 
	mx∑BüsLvl
;

349 
u8
 
	mpwrDe¸ó£F‹2Chaö
;

350 
u8
 
	mpwrDe¸ó£F‹3Chaö
;

351 
u8
 
	mtxFømeToD©aSèπ
;

352 
u8
 
	mtxFømeToPaOn
;

353 
u8
 
	mht40PowîIncF‹Pdadc
;

354 
u8
 
	mbswAâí
[
AR5416_MAX_CHAINS
];

355 
u8
 
	mbswM¨gö
[
AR5416_MAX_CHAINS
];

356 
u8
 
	mswSëéeHt40
;

357 
u8
 
	mx©ãn2Db
[
AR5416_MAX_CHAINS
];

358 
u8
 
	mx©ãn2M¨gö
[
AR5416_MAX_CHAINS
];

359 
u8
 
	mob_ch1
;

360 
u8
 
	mdb_ch1
;

361 
u8
 
	m a_˘l
;

362 
u8
 
	mmiscBôs
;

363 
u16
 
	mx∑BüsLvlFªq
[3];

364 
u8
 
	mfutuªModÆ
[6];

366 
•ur_ch™
 
	m•urCh™s
[
AR_EEPROM_MODAL_SPURS
];

367 } 
	g__∑cked
;

369 
	sˇlD©aPîFªqOpLo›
 {

370 
u8
 
	mpwrPdg
[2][5];

371 
u8
 
	mvpdPdg
[2][5];

372 
u8
 
	mpcdac
[2][5];

373 
u8
 
	mem±y
[2][5];

374 } 
	g__∑cked
;

376 
	smodÆ_ìp_4k_hódî
 {

377 
u32
 
	m™tCålChaö
[
AR5416_EEP4K_MAX_CHAINS
];

378 
u32
 
	m™tCålComm⁄
;

379 
u8
 
	m™ã¬aGaöCh
[
AR5416_EEP4K_MAX_CHAINS
];

380 
u8
 
	mswôchSëéög
;

381 
u8
 
	mtxRxAâíCh
[
AR5416_EEP4K_MAX_CHAINS
];

382 
u8
 
	mrxTxM¨göCh
[
AR5416_EEP4K_MAX_CHAINS
];

383 
u8
 
	madcDesúedSize
;

384 
u8
 
	mpgaDesúedSize
;

385 
u8
 
	mx aGaöCh
[
AR5416_EEP4K_MAX_CHAINS
];

386 
u8
 
	mtxEndToX∑Off
;

387 
u8
 
	mtxEndToRxOn
;

388 
u8
 
	mtxFømeToX∑On
;

389 
u8
 
	mthªsh62
;

390 
u8
 
	mnoi£Flo‹ThªshCh
[
AR5416_EEP4K_MAX_CHAINS
];

391 
u8
 
	mxpdGaö
;

392 
u8
 
	mxpd
;

393 
u8
 
	miqCÆICh
[
AR5416_EEP4K_MAX_CHAINS
];

394 
u8
 
	miqCÆQCh
[
AR5416_EEP4K_MAX_CHAINS
];

395 
u8
 
	mpdGaöOvîœp
;

396 #ifde‡
__BIG_ENDIAN_BITFIELD


397 
u8
 
	mob_1
:4, 
	mob_0
:4;

398 
u8
 
	mdb1_1
:4, 
	mdb1_0
:4;

400 
u8
 
	mob_0
:4, 
	mob_1
:4;

401 
u8
 
	mdb1_0
:4, 
	mdb1_1
:4;

403 
u8
 
	mx∑BüsLvl
;

404 
u8
 
	mtxFømeToD©aSèπ
;

405 
u8
 
	mtxFømeToPaOn
;

406 
u8
 
	mht40PowîIncF‹Pdadc
;

407 
u8
 
	mbswAâí
[
AR5416_EEP4K_MAX_CHAINS
];

408 
u8
 
	mbswM¨gö
[
AR5416_EEP4K_MAX_CHAINS
];

409 
u8
 
	mswSëéeHt40
;

410 
u8
 
	mx©ãn2Db
[
AR5416_EEP4K_MAX_CHAINS
];

411 
u8
 
	mx©ãn2M¨gö
[
AR5416_EEP4K_MAX_CHAINS
];

412 #ifde‡
__BIG_ENDIAN_BITFIELD


413 
u8
 
	mdb2_1
:4, 
	mdb2_0
:4;

415 
u8
 
	mdb2_0
:4, 
	mdb2_1
:4;

417 
u8
 
	mvîsi⁄
;

418 #ifde‡
__BIG_ENDIAN_BITFIELD


419 
u8
 
	mob_3
:4, 
	mob_2
:4;

420 
u8
 
	m™tdiv_˘l1
:4, 
	mob_4
:4;

421 
u8
 
	mdb1_3
:4, 
	mdb1_2
:4;

422 
u8
 
	m™tdiv_˘l2
:4, 
	mdb1_4
:4;

423 
u8
 
	mdb2_2
:4, 
	mdb2_3
:4;

424 
u8
 
	mª£rved
:4, 
	mdb2_4
:4;

426 
u8
 
	mob_2
:4, 
	mob_3
:4;

427 
u8
 
	mob_4
:4, 
	m™tdiv_˘l1
:4;

428 
u8
 
	mdb1_2
:4, 
	mdb1_3
:4;

429 
u8
 
	mdb1_4
:4, 
	m™tdiv_˘l2
:4;

430 
u8
 
	mdb2_2
:4, 
	mdb2_3
:4;

431 
u8
 
	mdb2_4
:4, 
	mª£rved
:4;

433 
u8
 
	mtx_divîsôy
;

434 
u8
 
	mÊc_pwr_thªsh
;

435 
u8
 
	mbb_sˇÀ_smπ_™ã¬a
;

436 
	#EEP_4K_BB_DESIRED_SCALE_MASK
 0x1f

	)

437 
u8
 
	mfutuªModÆ
[1];

438 
•ur_ch™
 
	m•urCh™s
[
AR_EEPROM_MODAL_SPURS
];

439 } 
	g__∑cked
;

441 
	sba£_ìp_¨9287_hódî
 {

442 
u16
 
	mÀngth
;

443 
u16
 
	mchecksum
;

444 
u16
 
	mvîsi⁄
;

445 
u8
 
	m›C≠Fœgs
;

446 
u8
 
	mìpMisc
;

447 
u16
 
	mªgDmn
[2];

448 
u8
 
	mmacAddr
[6];

449 
u8
 
	mrxMask
;

450 
u8
 
	mtxMask
;

451 
u16
 
	mrfSûít
;

452 
u16
 
	mblueToŸhO±i⁄s
;

453 
u16
 
	mdevi˚C≠
;

454 
u32
 
	mböBuûdNumbî
;

455 
u8
 
	mdevi˚Ty≥
;

456 
u8
 
	m›íLo›PwrC¡l
;

457 
öt8_t
 
	mpwrTabÀOff£t
;

458 
öt8_t
 
	mãmpSísSl›e
;

459 
öt8_t
 
	mãmpSísSl›ePÆOn
;

460 
u8
 
	mfutuªBa£
[29];

461 } 
	g__∑cked
;

463 
	smodÆ_ìp_¨9287_hódî
 {

464 
u32
 
	m™tCålChaö
[
AR9287_MAX_CHAINS
];

465 
u32
 
	m™tCålComm⁄
;

466 
öt8_t
 
	m™ã¬aGaöCh
[
AR9287_MAX_CHAINS
];

467 
u8
 
	mswôchSëéög
;

468 
u8
 
	mtxRxAâíCh
[
AR9287_MAX_CHAINS
];

469 
u8
 
	mrxTxM¨göCh
[
AR9287_MAX_CHAINS
];

470 
öt8_t
 
	madcDesúedSize
;

471 
u8
 
	mtxEndToX∑Off
;

472 
u8
 
	mtxEndToRxOn
;

473 
u8
 
	mtxFømeToX∑On
;

474 
u8
 
	mthªsh62
;

475 
öt8_t
 
	mnoi£Flo‹ThªshCh
[
AR9287_MAX_CHAINS
];

476 
u8
 
	mxpdGaö
;

477 
u8
 
	mxpd
;

478 
öt8_t
 
	miqCÆICh
[
AR9287_MAX_CHAINS
];

479 
öt8_t
 
	miqCÆQCh
[
AR9287_MAX_CHAINS
];

480 
u8
 
	mpdGaöOvîœp
;

481 
u8
 
	mx∑BüsLvl
;

482 
u8
 
	mtxFømeToD©aSèπ
;

483 
u8
 
	mtxFømeToPaOn
;

484 
u8
 
	mht40PowîIncF‹Pdadc
;

485 
u8
 
	mbswAâí
[
AR9287_MAX_CHAINS
];

486 
u8
 
	mbswM¨gö
[
AR9287_MAX_CHAINS
];

487 
u8
 
	mswSëéeHt40
;

488 
u8
 
	mvîsi⁄
;

489 
u8
 
	mdb1
;

490 
u8
 
	mdb2
;

491 
u8
 
	mob_cck
;

492 
u8
 
	mob_psk
;

493 
u8
 
	mob_qam
;

494 
u8
 
	mob_∑l_off
;

495 
u8
 
	mfutuªModÆ
[30];

496 
•ur_ch™
 
	m•urCh™s
[
AR_EEPROM_MODAL_SPURS
];

497 } 
	g__∑cked
;

499 
	sˇl_d©a_≥r_‰eq
 {

500 
u8
 
	mpwrPdg
[
AR5416_NUM_PD_GAINS
][
AR5416_PD_GAIN_ICEPTS
];

501 
u8
 
	mvpdPdg
[
AR5416_NUM_PD_GAINS
][
AR5416_PD_GAIN_ICEPTS
];

502 } 
	g__∑cked
;

504 
	sˇl_d©a_≥r_‰eq_4k
 {

505 
u8
 
	mpwrPdg
[
AR5416_EEP4K_NUM_PD_GAINS
][
AR5416_PD_GAIN_ICEPTS
];

506 
u8
 
	mvpdPdg
[
AR5416_EEP4K_NUM_PD_GAINS
][
AR5416_PD_GAIN_ICEPTS
];

507 } 
	g__∑cked
;

509 
	sˇl_èrgë_powî_Àg
 {

510 
u8
 
	mbCh™√l
;

511 
u8
 
	mtPow2x
[4];

512 } 
	g__∑cked
;

514 
	sˇl_èrgë_powî_ht
 {

515 
u8
 
	mbCh™√l
;

516 
u8
 
	mtPow2x
[8];

517 } 
	g__∑cked
;

519 
	sˇl_˘l_edges
 {

520 
u8
 
	mbCh™√l
;

521 
u8
 
	m˘l
;

522 } 
	g__∑cked
;

524 
	sˇl_d©a_›_lo›_¨9287
 {

525 
u8
 
	mpwrPdg
[2][5];

526 
u8
 
	mvpdPdg
[2][5];

527 
u8
 
	mpcdac
[2][5];

528 
u8
 
	mem±y
[2][5];

529 } 
	g__∑cked
;

531 
	sˇl_d©a_≥r_‰eq_¨9287
 {

532 
u8
 
	mpwrPdg
[
AR5416_NUM_PD_GAINS
][
AR9287_PD_GAIN_ICEPTS
];

533 
u8
 
	mvpdPdg
[
AR5416_NUM_PD_GAINS
][
AR9287_PD_GAIN_ICEPTS
];

534 } 
	g__∑cked
;

536 
	uˇl_d©a_≥r_‰eq_¨9287_u
 {

537 
ˇl_d©a_›_lo›_¨9287
 
	mˇlD©aO≥n
;

538 
ˇl_d©a_≥r_‰eq_¨9287
 
	mˇlD©aClo£
;

539 } 
	g__∑cked
;

541 
	sˇl_˘l_d©a_¨9287
 {

542 
ˇl_˘l_edges


543 
	m˘lEdges
[
AR9287_MAX_CHAINS
][
AR9287_NUM_BAND_EDGES
];

544 } 
	g__∑cked
;

546 
	sˇl_˘l_d©a
 {

547 
ˇl_˘l_edges


548 
	m˘lEdges
[
AR5416_MAX_CHAINS
][
AR5416_NUM_BAND_EDGES
];

549 } 
	g__∑cked
;

551 
	sˇl_˘l_d©a_4k
 {

552 
ˇl_˘l_edges


553 
	m˘lEdges
[
AR5416_EEP4K_MAX_CHAINS
][
AR5416_EEP4K_NUM_BAND_EDGES
];

554 } 
	g__∑cked
;

556 
	s¨5416_ì¥om_def
 {

557 
ba£_ìp_hódî
 
	mba£EïHódî
;

558 
u8
 
	mcu°D©a
[64];

559 
modÆ_ìp_hódî
 
	mmodÆHódî
[2];

560 
u8
 
	mˇlFªqPõr5G
[
AR5416_NUM_5G_CAL_PIERS
];

561 
u8
 
	mˇlFªqPõr2G
[
AR5416_NUM_2G_CAL_PIERS
];

562 
ˇl_d©a_≥r_‰eq


563 
	mˇlPõrD©a5G
[
AR5416_MAX_CHAINS
][
AR5416_NUM_5G_CAL_PIERS
];

564 
ˇl_d©a_≥r_‰eq


565 
	mˇlPõrD©a2G
[
AR5416_MAX_CHAINS
][
AR5416_NUM_2G_CAL_PIERS
];

566 
ˇl_èrgë_powî_Àg


567 
	mˇlT¨gëPowî5G
[
AR5416_NUM_5G_20_TARGET_POWERS
];

568 
ˇl_èrgë_powî_ht


569 
	mˇlT¨gëPowî5GHT20
[
AR5416_NUM_5G_20_TARGET_POWERS
];

570 
ˇl_èrgë_powî_ht


571 
	mˇlT¨gëPowî5GHT40
[
AR5416_NUM_5G_40_TARGET_POWERS
];

572 
ˇl_èrgë_powî_Àg


573 
	mˇlT¨gëPowîCck
[
AR5416_NUM_2G_CCK_TARGET_POWERS
];

574 
ˇl_èrgë_powî_Àg


575 
	mˇlT¨gëPowî2G
[
AR5416_NUM_2G_20_TARGET_POWERS
];

576 
ˇl_èrgë_powî_ht


577 
	mˇlT¨gëPowî2GHT20
[
AR5416_NUM_2G_20_TARGET_POWERS
];

578 
ˇl_èrgë_powî_ht


579 
	mˇlT¨gëPowî2GHT40
[
AR5416_NUM_2G_40_TARGET_POWERS
];

580 
u8
 
	m˘lIndex
[
AR5416_NUM_CTLS
];

581 
ˇl_˘l_d©a
 
	m˘lD©a
[
AR5416_NUM_CTLS
];

582 
u8
 
	m∑ddög
;

583 } 
	g__∑cked
;

585 
	s¨5416_ì¥om_4k
 {

586 
ba£_ìp_hódî_4k
 
	mba£EïHódî
;

587 
u8
 
	mcu°D©a
[20];

588 
modÆ_ìp_4k_hódî
 
	mmodÆHódî
;

589 
u8
 
	mˇlFªqPõr2G
[
AR5416_EEP4K_NUM_2G_CAL_PIERS
];

590 
ˇl_d©a_≥r_‰eq_4k


591 
	mˇlPõrD©a2G
[
AR5416_EEP4K_MAX_CHAINS
][
AR5416_EEP4K_NUM_2G_CAL_PIERS
];

592 
ˇl_èrgë_powî_Àg


593 
	mˇlT¨gëPowîCck
[
AR5416_EEP4K_NUM_2G_CCK_TARGET_POWERS
];

594 
ˇl_èrgë_powî_Àg


595 
	mˇlT¨gëPowî2G
[
AR5416_EEP4K_NUM_2G_20_TARGET_POWERS
];

596 
ˇl_èrgë_powî_ht


597 
	mˇlT¨gëPowî2GHT20
[
AR5416_EEP4K_NUM_2G_20_TARGET_POWERS
];

598 
ˇl_èrgë_powî_ht


599 
	mˇlT¨gëPowî2GHT40
[
AR5416_EEP4K_NUM_2G_40_TARGET_POWERS
];

600 
u8
 
	m˘lIndex
[
AR5416_EEP4K_NUM_CTLS
];

601 
ˇl_˘l_d©a_4k
 
	m˘lD©a
[
AR5416_EEP4K_NUM_CTLS
];

602 
u8
 
	m∑ddög
;

603 } 
	g__∑cked
;

605 
	s¨9287_ì¥om
 {

606 
ba£_ìp_¨9287_hódî
 
	mba£EïHódî
;

607 
u8
 
	mcu°D©a
[
AR9287_DATA_SZ
];

608 
modÆ_ìp_¨9287_hódî
 
	mmodÆHódî
;

609 
u8
 
	mˇlFªqPõr2G
[
AR9287_NUM_2G_CAL_PIERS
];

610 
ˇl_d©a_≥r_‰eq_¨9287_u


611 
	mˇlPõrD©a2G
[
AR9287_MAX_CHAINS
][
AR9287_NUM_2G_CAL_PIERS
];

612 
ˇl_èrgë_powî_Àg


613 
	mˇlT¨gëPowîCck
[
AR9287_NUM_2G_CCK_TARGET_POWERS
];

614 
ˇl_èrgë_powî_Àg


615 
	mˇlT¨gëPowî2G
[
AR9287_NUM_2G_20_TARGET_POWERS
];

616 
ˇl_èrgë_powî_ht


617 
	mˇlT¨gëPowî2GHT20
[
AR9287_NUM_2G_20_TARGET_POWERS
];

618 
ˇl_èrgë_powî_ht


619 
	mˇlT¨gëPowî2GHT40
[
AR9287_NUM_2G_40_TARGET_POWERS
];

620 
u8
 
	m˘lIndex
[
AR9287_NUM_CTLS
];

621 
ˇl_˘l_d©a_¨9287
 
	m˘lD©a
[
AR9287_NUM_CTLS
];

622 
u8
 
	m∑ddög
;

623 } 
	g__∑cked
;

625 
	eªg_ext_bôm≠
 {

626 
	mREG_EXT_FCC_MIDBAND
 = 0,

627 
	mREG_EXT_JAPAN_MIDBAND
 = 1,

628 
	mREG_EXT_FCC_DFS_HT40
 = 2,

629 
	mREG_EXT_JAPAN_NONDFS_HT40
 = 3,

630 
	mREG_EXT_JAPAN_DFS_HT40
 = 4

633 
	s©h9k_cou¡ry_íåy
 {

634 
u16
 
	mcou¡ryCode
;

635 
u16
 
	mªgDmnEnum
;

636 
u16
 
	mªgDmn5G
;

637 
u16
 
	mªgDmn2G
;

638 
u8
 
	misMu…idomaö
;

639 
u8
 
	miso
[3];

642 
	sì¥om_›s
 {

643 (*
	mcheck_ì¥om
)(
©h_hw
 *
	mhw
);

644 
u32
 (*
gë_ì¥om
)(
©h_hw
 *
	mhw
, 
ì¥om_∑øm
 
	m∑øm
);

645 
boﬁ
 (*
fûl_ì¥om
)(
©h_hw
 *
	mhw
);

646 
u32
 (*
dump_ì¥om
)(
©h_hw
 *
	mhw
, 
boﬁ
 
	mdump_ba£_hdr
, 
u8
 *
	mbuf
,

647 
u32
 
	mÀn
, u32 
	msize
);

648 (*
	mgë_ì¥om_vî
)(
©h_hw
 *
	mhw
);

649 (*
	mgë_ì¥om_ªv
)(
©h_hw
 *
	mhw
);

650 (*
	m£t_bﬂrd_vÆues
)(
©h_hw
 *
	mhw
, 
©h9k_ch™√l
 *
	mch™
);

651 (*
	m£t_addac
)(
©h_hw
 *
	mhw
, 
©h9k_ch™√l
 *
	mch™
);

652 (*
	m£t_txpowî
)(
©h_hw
 *
	mhw
, 
©h9k_ch™√l
 *
	mch™
,

653 
u16
 
	mcfgCé
, 
u8
 
	mtwi˚A¡í«Redu˘i⁄
,

654 
u8
 
	mpowîLimô
, 
boﬁ
 
	mã°
);

655 
u16
 (*
gë_•ur_ch™√l
)(
©h_hw
 *
	mah
, u16 
	mi
, 
boﬁ
 
	mis2GHz
);

658 
©h9k_hw_™Æog_shi·_ªgwrôe
(
©h_hw
 *
ah
, 
u32
 
ªg
, u32 
vÆ
);

659 
©h9k_hw_™Æog_shi·_rmw
(
©h_hw
 *
ah
, 
u32
 
ªg
, u32 
mask
,

660 
u32
 
shi·
, u32 
vÆ
);

661 
öt16_t
 
©h9k_hw_öãΩﬁ©e
(
u16
 
èrgë
, u16 
§cLe·
, u16 
§cRight
,

662 
öt16_t
 
èrgëLe·
,

663 
öt16_t
 
èrgëRight
);

664 
boﬁ
 
©h9k_hw_gë_lowî_uµî_ödex
(
u8
 
èrgë
, u8 *
pLi°
, 
u16
 
li°Size
,

665 
u16
 *
ödexL
, u16 *
ödexR
);

666 
boﬁ
 
©h9k_hw_nvøm_ªad
(
©h_hw
 *
ah
, 
u32
 
off
, 
u16
 *
d©a
);

667 
©h9k_hw_usb_gí_fûl_ì¥om
(
©h_hw
 *
ah
, 
u16
 *
ìp_d©a
,

668 
ìp_°¨t_loc
, 
size
);

669 
©h9k_hw_fûl_vpd_èbÀ
(
u8
 
pwrMö
, u8 
pwrMax
, u8 *
pPwrLi°
,

670 
u8
 *
pVpdLi°
, 
u16
 
numI¡î˚±s
,

671 
u8
 *
pRëVpdLi°
);

672 
©h9k_hw_gë_Àgacy_èrgë_powîs
(
©h_hw
 *
ah
,

673 
©h9k_ch™√l
 *
ch™
,

674 
ˇl_èrgë_powî_Àg
 *
powInfo
,

675 
u16
 
numCh™√ls
,

676 
ˇl_èrgë_powî_Àg
 *
pNewPowî
,

677 
u16
 
numR©es
, 
boﬁ
 
isExtT¨gë
);

678 
©h9k_hw_gë_èrgë_powîs
(
©h_hw
 *
ah
,

679 
©h9k_ch™√l
 *
ch™
,

680 
ˇl_èrgë_powî_ht
 *
powInfo
,

681 
u16
 
numCh™√ls
,

682 
ˇl_èrgë_powî_ht
 *
pNewPowî
,

683 
u16
 
numR©es
, 
boﬁ
 
isHt40T¨gë
);

684 
u16
 
©h9k_hw_gë_max_edge_powî
(u16 
‰eq
, 
ˇl_˘l_edges
 *
pRdEdgesPowî
,

685 
boﬁ
 
is2GHz
, 
num_b™d_edges
);

686 
u16
 
©h9k_hw_gë_sˇÀd_powî
(
©h_hw
 *
ah
, u16 
powî_limô
,

687 
u8
 
™ã¬a_ªdu˘i⁄
);

688 
©h9k_hw_upd©e_ªguœt‹y_maxpowî
(
©h_hw
 *
ah
);

689 
©h9k_hw_ì¥om_öô
(
©h_hw
 *
ah
);

691 
©h9k_hw_gë_gaö_bound¨õs_pdadcs
(
©h_hw
 *
ah
,

692 
©h9k_ch™√l
 *
ch™
,

693 *
pRawD©aSë
,

694 
u8
 *
bCh™s
, 
u16
 
avaûPõrs
,

695 
u16
 
tPdGaöOvîœp
,

696 
u16
 *
pPdGaöBound¨õs
, 
u8
 *
pPDADCVÆues
,

697 
u16
 
numXpdGaös
);

699 
ölöe
 
u16
 
	$©h9k_hw_fbö2‰eq
(
u8
 
fbö
, 
boﬁ
 
is2GHz
)

701 i‡(
fbö
 =
AR5416_BCHAN_UNUSED
)

702  
fbö
;

704  (
u16
Ë((
is2GHz
Ë? (2300 + 
fbö
) : (4800 + 5 * fbin));

705 
	}
}

707 
	#¨5416_gë_¡xchaös
(
_txchaömask
) \

708 (((
_txchaömask
 >> 2) & 1) + \

709 ((
_txchaömask
 >> 1Ë& 1Ë+ (_txchaömask & 1))

	)

711 c⁄° 
ì¥om_›s
 
ìp_def_›s
;

712 c⁄° 
ì¥om_›s
 
ìp_4k_›s
;

713 c⁄° 
ì¥om_›s
 
ìp_¨9287_›s
;

714 c⁄° 
ì¥om_›s
 
ìp_¨9287_›s
;

715 c⁄° 
ì¥om_›s
 
ìp_¨9300_›s
;

	@eeprom_4k.c

17 
	~<asm/u«lig√d.h
>

18 
	~"hw.h
"

19 
	~"¨9002_phy.h
"

21 
	$©h9k_hw_4k_gë_ì¥om_vî
(
©h_hw
 *
ah
)

23  ((
ah
->
ì¥om
.
m≠4k
.
ba£EïHódî
.
vîsi⁄
 >> 12) & 0xF);

24 
	}
}

26 
	$©h9k_hw_4k_gë_ì¥om_ªv
(
©h_hw
 *
ah
)

28  ((
ah
->
ì¥om
.
m≠4k
.
ba£EïHódî
.
vîsi⁄
) & 0xFFF);

29 
	}
}

31 
	#SIZE_EEPROM_4K
 ((
¨5416_ì¥om_4k
Ë/ (
u16
))

	)

33 
boﬁ
 
	$__©h9k_hw_4k_fûl_ì¥om
(
©h_hw
 *
ah
)

35 
u16
 *
ìp_d©a
 = (u16 *)&
ah
->
ì¥om
.
m≠4k
;

36 
addr
, 
ìp_°¨t_loc
 = 64;

38 
addr
 = 0;ádd∏< 
SIZE_EEPROM_4K
;áddr++) {

39 i‡(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
addr
 + 
ìp_°¨t_loc
, 
ìp_d©a
))

40  
Ál£
;

41 
ìp_d©a
++;

44  
åue
;

45 
	}
}

47 
boﬁ
 
	$__©h9k_hw_usb_4k_fûl_ì¥om
(
©h_hw
 *
ah
)

49 
u16
 *
ìp_d©a
 = (u16 *)&
ah
->
ì¥om
.
m≠4k
;

51 
	`©h9k_hw_usb_gí_fûl_ì¥om
(
ah
, 
ìp_d©a
, 64, 
SIZE_EEPROM_4K
);

53  
åue
;

54 
	}
}

56 
boﬁ
 
	$©h9k_hw_4k_fûl_ì¥om
(
©h_hw
 *
ah
)

58 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

60 i‡(!
	`©h9k_hw_u£_Êash
(
ah
)) {

61 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Reading from EEPROM,Çot flash\n");

64 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_USB
)

65  
	`__©h9k_hw_usb_4k_fûl_ì¥om
(
ah
);

67  
	`__©h9k_hw_4k_fûl_ì¥om
(
ah
);

68 
	}
}

70 #i‡
deföed
(
CONFIG_ATH9K_DEBUGFS
Ë|| deföed(
CONFIG_ATH9K_HTC_DEBUGFS
)

71 
u32
 
	$©h9k_dump_4k_modÆ_ì¥om
(*
buf
, 
u32
 
Àn
, u32 
size
,

72 
modÆ_ìp_4k_hódî
 *
modÆ_hdr
)

74 
	`PR_EEP
("Chaö0 A¡. C⁄åﬁ", 
modÆ_hdr
->
™tCålChaö
[0]);

75 
	`PR_EEP
("A¡. Comm⁄ C⁄åﬁ", 
modÆ_hdr
->
™tCålComm⁄
);

76 
	`PR_EEP
("Chaö0 A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaöCh
[0]);

77 
	`PR_EEP
("Swôch Sëée", 
modÆ_hdr
->
swôchSëéög
);

78 
	`PR_EEP
("Chaö0 TxRxAâí", 
modÆ_hdr
->
txRxAâíCh
[0]);

79 
	`PR_EEP
("Chaö0 RxTxM¨gö", 
modÆ_hdr
->
rxTxM¨göCh
[0]);

80 
	`PR_EEP
("ADC Desúed size", 
modÆ_hdr
->
adcDesúedSize
);

81 
	`PR_EEP
("PGA Desúed size", 
modÆ_hdr
->
pgaDesúedSize
);

82 
	`PR_EEP
("Chaö0 x ®Gaö", 
modÆ_hdr
->
x aGaöCh
[0]);

83 
	`PR_EEP
("txEndToX∑Off", 
modÆ_hdr
->
txEndToX∑Off
);

84 
	`PR_EEP
("txEndToRxOn", 
modÆ_hdr
->
txEndToRxOn
);

85 
	`PR_EEP
("txFømeToX∑On", 
modÆ_hdr
->
txFømeToX∑On
);

86 
	`PR_EEP
("CCA Thªshﬁd)", 
modÆ_hdr
->
thªsh62
);

87 
	`PR_EEP
("Chaö0 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[0]);

88 
	`PR_EEP
("xpdGaö", 
modÆ_hdr
->
xpdGaö
);

89 
	`PR_EEP
("Exã∫Æ PD", 
modÆ_hdr
->
xpd
);

90 
	`PR_EEP
("Chaö0 I C€fficõ¡", 
modÆ_hdr
->
iqCÆICh
[0]);

91 
	`PR_EEP
("Chaö0 Q C€fficõ¡", 
modÆ_hdr
->
iqCÆQCh
[0]);

92 
	`PR_EEP
("pdGaöOvîœp", 
modÆ_hdr
->
pdGaöOvîœp
);

93 
	`PR_EEP
("O/D Bü†Vîsi⁄", 
modÆ_hdr
->
vîsi⁄
);

94 
	`PR_EEP
("CCK OuçutBüs", 
modÆ_hdr
->
ob_0
);

95 
	`PR_EEP
("BPSK OuçutBüs", 
modÆ_hdr
->
ob_1
);

96 
	`PR_EEP
("QPSK OuçutBüs", 
modÆ_hdr
->
ob_2
);

97 
	`PR_EEP
("16QAM OuçutBüs", 
modÆ_hdr
->
ob_3
);

98 
	`PR_EEP
("64QAM OuçutBüs", 
modÆ_hdr
->
ob_4
);

99 
	`PR_EEP
("CCK Drivî1_Büs", 
modÆ_hdr
->
db1_0
);

100 
	`PR_EEP
("BPSK Drivî1_Büs", 
modÆ_hdr
->
db1_1
);

101 
	`PR_EEP
("QPSK Drivî1_Büs", 
modÆ_hdr
->
db1_2
);

102 
	`PR_EEP
("16QAM Drivî1_Büs", 
modÆ_hdr
->
db1_3
);

103 
	`PR_EEP
("64QAM Drivî1_Büs", 
modÆ_hdr
->
db1_4
);

104 
	`PR_EEP
("CCK Drivî2_Büs", 
modÆ_hdr
->
db2_0
);

105 
	`PR_EEP
("BPSK Drivî2_Büs", 
modÆ_hdr
->
db2_1
);

106 
	`PR_EEP
("QPSK Drivî2_Büs", 
modÆ_hdr
->
db2_2
);

107 
	`PR_EEP
("16QAM Drivî2_Büs", 
modÆ_hdr
->
db2_3
);

108 
	`PR_EEP
("64QAM Drivî2_Büs", 
modÆ_hdr
->
db2_4
);

109 
	`PR_EEP
("xPA Bü†Levñ", 
modÆ_hdr
->
x∑BüsLvl
);

110 
	`PR_EEP
("txFømeToD©aSèπ", 
modÆ_hdr
->
txFømeToD©aSèπ
);

111 
	`PR_EEP
("txFømeToPaOn", 
modÆ_hdr
->
txFømeToPaOn
);

112 
	`PR_EEP
("HT40 Powî Inc.", 
modÆ_hdr
->
ht40PowîIncF‹Pdadc
);

113 
	`PR_EEP
("Chaö0 bswAâí", 
modÆ_hdr
->
bswAâí
[0]);

114 
	`PR_EEP
("Chaö0 bswM¨gö", 
modÆ_hdr
->
bswM¨gö
[0]);

115 
	`PR_EEP
("HT40 Swôch Sëée", 
modÆ_hdr
->
swSëéeHt40
);

116 
	`PR_EEP
("Chaö0 x©ãn2Db", 
modÆ_hdr
->
x©ãn2Db
[0]);

117 
	`PR_EEP
("Chaö0 x©ãn2M¨gö", 
modÆ_hdr
->
x©ãn2M¨gö
[0]);

118 
	`PR_EEP
("A¡. Divîsôy cé1", 
modÆ_hdr
->
™tdiv_˘l1
);

119 
	`PR_EEP
("A¡. Divîsôy cé2", 
modÆ_hdr
->
™tdiv_˘l2
);

120 
	`PR_EEP
("TX Divîsôy", 
modÆ_hdr
->
tx_divîsôy
);

122  
Àn
;

123 
	}
}

125 
u32
 
	$©h9k_hw_4k_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

126 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

128 
¨5416_ì¥om_4k
 *
ìp
 = &
ah
->
ì¥om
.
m≠4k
;

129 
ba£_ìp_hódî_4k
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

131 i‡(!
dump_ba£_hdr
) {

132 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

134 
Àn
 = 
	`©h9k_dump_4k_modÆ_ì¥om
(
buf
,Üí, 
size
,

135 &
ìp
->
modÆHódî
);

136 
out
;

139 
	`PR_EEP
("Maj‹ Vîsi⁄", 
pBa£
->
vîsi⁄
 >> 12);

140 
	`PR_EEP
("Mö‹ Vîsi⁄", 
pBa£
->
vîsi⁄
 & 0xFFF);

141 
	`PR_EEP
("Checksum", 
pBa£
->
checksum
);

142 
	`PR_EEP
("Lígth", 
pBa£
->
Àngth
);

143 
	`PR_EEP
("RegDomaö1", 
pBa£
->
ªgDmn
[0]);

144 
	`PR_EEP
("RegDomaö2", 
pBa£
->
ªgDmn
[1]);

145 
	`PR_EEP
("TX Mask", 
pBa£
->
txMask
);

146 
	`PR_EEP
("RX Mask", 
pBa£
->
rxMask
);

147 
	`PR_EEP
("AŒow 5GHz", !!(
pBa£
->
›C≠Fœgs
 & 
AR5416_OPFLAGS_11A
));

148 
	`PR_EEP
("AŒow 2GHz", !!(
pBa£
->
›C≠Fœgs
 & 
AR5416_OPFLAGS_11G
));

149 
	`PR_EEP
("DißbÀ 2GHz HT20", !!(
pBa£
->
›C≠Fœgs
 &

150 
AR5416_OPFLAGS_N_2G_HT20
));

151 
	`PR_EEP
("DißbÀ 2GHz HT40", !!(
pBa£
->
›C≠Fœgs
 &

152 
AR5416_OPFLAGS_N_2G_HT40
));

153 
	`PR_EEP
("DißbÀ 5Ghz HT20", !!(
pBa£
->
›C≠Fœgs
 &

154 
AR5416_OPFLAGS_N_5G_HT20
));

155 
	`PR_EEP
("DißbÀ 5Ghz HT40", !!(
pBa£
->
›C≠Fœgs
 &

156 
AR5416_OPFLAGS_N_5G_HT40
));

157 
	`PR_EEP
("Big Endün", !!(
pBa£
->
ìpMisc
 & 0x01));

158 
	`PR_EEP
("CÆ Bö Maj‹ Vî", (
pBa£
->
böBuûdNumbî
 >> 24) & 0xFF);

159 
	`PR_EEP
("CÆ Bö Mö‹ Vî", (
pBa£
->
böBuûdNumbî
 >> 16) & 0xFF);

160 
	`PR_EEP
("CÆ Bö Buûd", (
pBa£
->
böBuûdNumbî
 >> 8) & 0xFF);

161 
	`PR_EEP
("TX GaöÅy≥", 
pBa£
->
txGaöTy≥
);

163 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%20s : %pM\n", "MacAddress",

164 
pBa£
->
macAddr
);

166 
out
:

167 i‡(
Àn
 > 
size
)

168 
Àn
 = 
size
;

170  
Àn
;

171 
	}
}

173 
u32
 
	$©h9k_hw_4k_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

174 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

177 
	}
}

181 #unde‡
SIZE_EEPROM_4K


183 
	$©h9k_hw_4k_check_ì¥om
(
©h_hw
 *
ah
)

185 
	#EEPROM_4K_SIZE
 ((
¨5416_ì¥om_4k
Ë/ (
u16
))

	)

186 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

187 
¨5416_ì¥om_4k
 *
ìp
 = &
ah
->
ì¥om
.
m≠4k
;

188 
u16
 *
ìpd©a
, 
ãmp
, 
magic
, 
magic2
;

189 
u32
 
sum
 = 0, 
ñ
;

190 
boﬁ
 
√ed_sw≠
 = 
Ál£
;

191 
i
, 
addr
;

194 i‡(!
	`©h9k_hw_u£_Êash
(
ah
)) {

195 i‡(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
AR5416_EEPROM_MAGIC_OFFSET
,

196 &
magic
)) {

197 
	`©h_îr
(
comm⁄
, "Reading Magic # failed\n");

198  
Ál£
;

201 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Ród Magi¯0x%04X\n", 
magic
);

203 i‡(
magic
 !
AR5416_EEPROM_MAGIC
) {

204 
magic2
 = 
	`swab16
(
magic
);

206 i‡(
magic2
 =
AR5416_EEPROM_MAGIC
) {

207 
√ed_sw≠
 = 
åue
;

208 
ìpd©a
 = (
u16
 *Ë(&
ah
->
ì¥om
);

210 
addr
 = 0;ádd∏< 
EEPROM_4K_SIZE
;áddr++) {

211 
ãmp
 = 
	`swab16
(*
ìpd©a
);

212 *
ìpd©a
 = 
ãmp
;

213 
ìpd©a
++;

216 
	`©h_îr
(
comm⁄
,

218  -
EINVAL
;

223 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "need_swap = %s\n",

224 
√ed_sw≠
 ? "True" : "False");

226 i‡(
√ed_sw≠
)

227 
ñ
 = 
	`swab16
(
ah
->
ì¥om
.
m≠4k
.
ba£EïHódî
.
Àngth
);

229 
ñ
 = 
ah
->
ì¥om
.
m≠4k
.
ba£EïHódî
.
Àngth
;

231 i‡(
ñ
 > (
¨5416_ì¥om_4k
))

232 
ñ
 = (
¨5416_ì¥om_4k
Ë/ (
u16
);

234 
ñ
 =É»/ (
u16
);

236 
ìpd©a
 = (
u16
 *)(&
ah
->
ì¥om
);

238 
i
 = 0; i < 
ñ
; i++)

239 
sum
 ^*
ìpd©a
++;

241 i‡(
√ed_sw≠
) {

242 
u32
 
öãgî
;

243 
u16
 
w‹d
;

245 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

248 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
Àngth
);

249 
ìp
->
ba£EïHódî
.
Àngth
 = 
w‹d
;

251 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
checksum
);

252 
ìp
->
ba£EïHódî
.
checksum
 = 
w‹d
;

254 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
vîsi⁄
);

255 
ìp
->
ba£EïHódî
.
vîsi⁄
 = 
w‹d
;

257 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
ªgDmn
[0]);

258 
ìp
->
ba£EïHódî
.
ªgDmn
[0] = 
w‹d
;

260 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
ªgDmn
[1]);

261 
ìp
->
ba£EïHódî
.
ªgDmn
[1] = 
w‹d
;

263 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
rfSûít
);

264 
ìp
->
ba£EïHódî
.
rfSûít
 = 
w‹d
;

266 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
blueToŸhO±i⁄s
);

267 
ìp
->
ba£EïHódî
.
blueToŸhO±i⁄s
 = 
w‹d
;

269 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
devi˚C≠
);

270 
ìp
->
ba£EïHódî
.
devi˚C≠
 = 
w‹d
;

272 
öãgî
 = 
	`swab32
(
ìp
->
modÆHódî
.
™tCålComm⁄
);

273 
ìp
->
modÆHódî
.
™tCålComm⁄
 = 
öãgî
;

275 
i
 = 0; i < 
AR5416_EEP4K_MAX_CHAINS
; i++) {

276 
öãgî
 = 
	`swab32
(
ìp
->
modÆHódî
.
™tCålChaö
[
i
]);

277 
ìp
->
modÆHódî
.
™tCålChaö
[
i
] = 
öãgî
;

280 
i
 = 0; i < 
AR_EEPROM_MODAL_SPURS
; i++) {

281 
w‹d
 = 
	`swab16
(
ìp
->
modÆHódî
.
•urCh™s
[
i
].
•urCh™
);

282 
ìp
->
modÆHódî
.
•urCh™s
[
i
].
•urCh™
 = 
w‹d
;

286 i‡(
sum
 !0xfff‡|| 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
◊hË!
AR5416_EEP_VER
 ||

287 
ah
->
ìp_›s
->
	`gë_ì¥om_ªv
◊hË< 
AR5416_EEP_NO_BACK_VER
) {

288 
	`©h_îr
(
comm⁄
, "Bad EEPROM checksum 0x%x orÑevision 0x%04x\n",

289 
sum
, 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
(ah));

290  -
EINVAL
;

294 #unde‡
EEPROM_4K_SIZE


295 
	}
}

297 
u32
 
	$©h9k_hw_4k_gë_ì¥om
(
©h_hw
 *
ah
,

298 
ì¥om_∑øm
 
∑øm
)

300 
¨5416_ì¥om_4k
 *
ìp
 = &
ah
->
ì¥om
.
m≠4k
;

301 
modÆ_ìp_4k_hódî
 *
pModÆ
 = &
ìp
->
modÆHódî
;

302 
ba£_ìp_hódî_4k
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

303 
u16
 
vî_mö‹
;

305 
vî_mö‹
 = 
pBa£
->
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
;

307 
∑øm
) {

308 
EEP_NFTHRESH_2
:

309  
pModÆ
->
noi£Flo‹ThªshCh
[0];

310 
EEP_MAC_LSW
:

311  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
);

312 
EEP_MAC_MID
:

313  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
 + 2);

314 
EEP_MAC_MSW
:

315  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
 + 4);

316 
EEP_REG_0
:

317  
pBa£
->
ªgDmn
[0];

318 
EEP_OP_CAP
:

319  
pBa£
->
devi˚C≠
;

320 
EEP_OP_MODE
:

321  
pBa£
->
›C≠Fœgs
;

322 
EEP_RF_SILENT
:

323  
pBa£
->
rfSûít
;

324 
EEP_OB_2
:

325  
pModÆ
->
ob_0
;

326 
EEP_DB_2
:

327  
pModÆ
->
db1_1
;

328 
EEP_MINOR_REV
:

329  
vî_mö‹
;

330 
EEP_TX_MASK
:

331  
pBa£
->
txMask
;

332 
EEP_RX_MASK
:

333  
pBa£
->
rxMask
;

334 
EEP_FRAC_N_5G
:

336 
EEP_PWR_TABLE_OFFSET
:

337  
AR5416_PWR_TABLE_OFFSET_DB
;

338 
EEP_MODAL_VER
:

339  
pModÆ
->
vîsi⁄
;

340 
EEP_ANT_DIV_CTL1
:

341  
pModÆ
->
™tdiv_˘l1
;

342 
EEP_TXGAIN_TYPE
:

343  
pBa£
->
txGaöTy≥
;

344 
EEP_ANTENNA_GAIN_2G
:

345  
pModÆ
->
™ã¬aGaöCh
[0];

349 
	}
}

351 
	$©h9k_hw_£t_4k_powî_ˇl_èbÀ
(
©h_hw
 *
ah
,

352 
©h9k_ch™√l
 *
ch™
)

354 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

355 
¨5416_ì¥om_4k
 *
pEïD©a
 = &
ah
->
ì¥om
.
m≠4k
;

356 
ˇl_d©a_≥r_‰eq_4k
 *
pRawD©a£t
;

357 
u8
 *
pCÆBCh™s
 = 
NULL
;

358 
u16
 
pdGaöOvîœp_t2
;

359 
u8
 
pdadcVÆues
[
AR5416_NUM_PDADC_VALUES
];

360 
u16
 
gaöBound¨õs
[
AR5416_PD_GAINS_IN_MASK
];

361 
u16
 
numPõrs
, 
i
, 
j
;

362 
u16
 
numXpdGaö
, 
xpdMask
;

363 
u16
 
xpdGaöVÆues
[
AR5416_EEP4K_NUM_PD_GAINS
] = { 0, 0 };

364 
u32
 
ªg32
, 
ªgOff£t
, 
ªgChaöOff£t
;

366 
xpdMask
 = 
pEïD©a
->
modÆHódî
.
xpdGaö
;

368 i‡((
pEïD©a
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

369 
AR5416_EEP_MINOR_VER_2
) {

370 
pdGaöOvîœp_t2
 =

371 
pEïD©a
->
modÆHódî
.
pdGaöOvîœp
;

373 
pdGaöOvîœp_t2
 = (
u16
)(
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_TPCRG5
),

374 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
));

377 
pCÆBCh™s
 = 
pEïD©a
->
ˇlFªqPõr2G
;

378 
numPõrs
 = 
AR5416_EEP4K_NUM_2G_CAL_PIERS
;

380 
numXpdGaö
 = 0;

382 
i
 = 1; i <
AR5416_PD_GAINS_IN_MASK
; i++) {

383 i‡((
xpdMask
 >> (
AR5416_PD_GAINS_IN_MASK
 - 
i
)) & 1) {

384 i‡(
numXpdGaö
 >
AR5416_EEP4K_NUM_PD_GAINS
)

386 
xpdGaöVÆues
[
numXpdGaö
] =

387 (
u16
)(
AR5416_PD_GAINS_IN_MASK
 - 
i
);

388 
numXpdGaö
++;

392 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

393 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_NUM_PD_GAIN
,

394 (
numXpdGaö
 - 1) & 0x3);

395 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_1
,

396 
xpdGaöVÆues
[0]);

397 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_2
,

398 
xpdGaöVÆues
[1]);

399 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_3
, 0);

400 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

402 
i
 = 0; i < 
AR5416_EEP4K_MAX_CHAINS
; i++) {

403 
ªgChaöOff£t
 = 
i
 * 0x1000;

405 i‡(
pEïD©a
->
ba£EïHódî
.
txMask
 & (1 << 
i
)) {

406 
pRawD©a£t
 = 
pEïD©a
->
ˇlPõrD©a2G
[
i
];

408 
	`©h9k_hw_gë_gaö_bound¨õs_pdadcs
(
ah
, 
ch™
,

409 
pRawD©a£t
, 
pCÆBCh™s
,

410 
numPõrs
, 
pdGaöOvîœp_t2
,

411 
gaöBound¨õs
,

412 
pdadcVÆues
, 
numXpdGaö
);

414 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

416 
	`REG_WRITE
(
ah
, 
AR_PHY_TPCRG5
 + 
ªgChaöOff£t
,

417 
	`SM
(
pdGaöOvîœp_t2
,

418 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
)

419 | 
	`SM
(
gaöBound¨õs
[0],

420 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1
)

421 | 
	`SM
(
gaöBound¨õs
[1],

422 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2
)

423 | 
	`SM
(
gaöBound¨õs
[2],

424 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3
)

425 | 
	`SM
(
gaöBound¨õs
[3],

426 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4
));

428 
ªgOff£t
 = 
AR_PHY_BASE
 + (672 << 2Ë+ 
ªgChaöOff£t
;

429 
j
 = 0; j < 32; j++) {

430 
ªg32
 = 
	`gë_u«lig√d_À32
(&
pdadcVÆues
[4 * 
j
]);

431 
	`REG_WRITE
(
ah
, 
ªgOff£t
, 
ªg32
);

433 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

435 
i
, 
ªgChaöOff£t
, 
ªgOff£t
,

436 
ªg32
);

437 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

443 
i
, 4 * 
j
, 
pdadcVÆues
[4 * j],

444 4 * 
j
 + 1, 
pdadcVÆues
[4 * j + 1],

445 4 * 
j
 + 2, 
pdadcVÆues
[4 * j + 2],

446 4 * 
j
 + 3, 
pdadcVÆues
[4 * j + 3]);

448 
ªgOff£t
 += 4;

451 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

454 
	}
}

456 
	$©h9k_hw_£t_4k_powî_≥r_øã_èbÀ
(
©h_hw
 *
ah
,

457 
©h9k_ch™√l
 *
ch™
,

458 
öt16_t
 *
øãsAºay
,

459 
u16
 
cfgCé
,

460 
u16
 
™ã¬a_ªdu˘i⁄
,

461 
u16
 
powîLimô
)

463 
	#CMP_TEST_GRP
 \

464 (((
cfgCé
 & ~
CTL_MODE_M
)| (
pCéMode
[
˘lMode
] & CTL_MODE_M)) == \

465 
pEïD©a
->
˘lIndex
[
i
]) \

466 || (((
cfgCé
 & ~
CTL_MODE_M
Ë| (
pCéMode
[
˘lMode
] & CTL_MODE_M)) == \

467 ((
pEïD©a
->
˘lIndex
[
i
] & 
CTL_MODE_M
Ë| 
SD_NO_CTL
))

	)

469 
i
;

470 
u16
 
twi˚MöEdgePowî
;

471 
u16
 
twi˚MaxEdgePowî
;

472 
u16
 
sˇÀdPowî
 = 0, 
möCéPowî
;

473 
u16
 
numCéModes
;

474 c⁄° 
u16
 *
pCéMode
;

475 
u16
 
˘lMode
, 
‰eq
;

476 
ch™_˚¡îs
 
˚¡îs
;

477 
ˇl_˘l_d©a_4k
 *
ªp
;

478 
¨5416_ì¥om_4k
 *
pEïD©a
 = &
ah
->
ì¥om
.
m≠4k
;

479 
ˇl_èrgë_powî_Àg
 
èrgëPowîOfdm
, 
èrgëPowîCck
 = {

482 
ˇl_èrgë_powî_Àg
 
èrgëPowîOfdmExt
 = {

483 0, { 0, 0, 0, 0} }, 
èrgëPowîCckExt
 = {

486 
ˇl_èrgë_powî_ht
 
èrgëPowîHt20
, 
èrgëPowîHt40
 = {

489 c⁄° 
u16
 
˘lModesF‹11g
[] = {

490 
CTL_11B
, 
CTL_11G
, 
CTL_2GHT20
,

491 
CTL_11B_EXT
, 
CTL_11G_EXT
, 
CTL_2GHT40


494 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

496 
sˇÀdPowî
 = 
powîLimô
 - 
™ã¬a_ªdu˘i⁄
;

497 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11g
Ë- 
SUB_NUM_CTL_MODES_AT_2G_40
;

498 
pCéMode
 = 
˘lModesF‹11g
;

500 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

501 
pEïD©a
->
ˇlT¨gëPowîCck
,

502 
AR5416_NUM_2G_CCK_TARGET_POWERS
,

503 &
èrgëPowîCck
, 4, 
Ál£
);

504 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

505 
pEïD©a
->
ˇlT¨gëPowî2G
,

506 
AR5416_NUM_2G_20_TARGET_POWERS
,

507 &
èrgëPowîOfdm
, 4, 
Ál£
);

508 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

509 
pEïD©a
->
ˇlT¨gëPowî2GHT20
,

510 
AR5416_NUM_2G_20_TARGET_POWERS
,

511 &
èrgëPowîHt20
, 8, 
Ál£
);

513 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

514 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11g
);

515 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

516 
pEïD©a
->
ˇlT¨gëPowî2GHT40
,

517 
AR5416_NUM_2G_40_TARGET_POWERS
,

518 &
èrgëPowîHt40
, 8, 
åue
);

519 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

520 
pEïD©a
->
ˇlT¨gëPowîCck
,

521 
AR5416_NUM_2G_CCK_TARGET_POWERS
,

522 &
èrgëPowîCckExt
, 4, 
åue
);

523 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

524 
pEïD©a
->
ˇlT¨gëPowî2G
,

525 
AR5416_NUM_2G_20_TARGET_POWERS
,

526 &
èrgëPowîOfdmExt
, 4, 
åue
);

529 
˘lMode
 = 0; céModê< 
numCéModes
; ctlMode++) {

530 
boﬁ
 
isHt40CéMode
 = (
pCéMode
[
˘lMode
] =
CTL_5GHT40
) ||

531 (
pCéMode
[
˘lMode
] =
CTL_2GHT40
);

533 i‡(
isHt40CéMode
)

534 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

535 i‡(
pCéMode
[
˘lMode
] & 
EXT_ADDITIVE
)

536 
‰eq
 = 
˚¡îs
.
ext_˚¡î
;

538 
‰eq
 = 
˚¡îs
.
˘l_˚¡î
;

540 
twi˚MaxEdgePowî
 = 
MAX_RATE_POWER
;

542 
i
 = 0; (ò< 
AR5416_EEP4K_NUM_CTLS
) &&

543 
pEïD©a
->
˘lIndex
[
i
]; i++) {

545 i‡(
CMP_TEST_GRP
) {

546 
ªp
 = &(
pEïD©a
->
˘lD©a
[
i
]);

548 
twi˚MöEdgePowî
 = 
	`©h9k_hw_gë_max_edge_powî
(

549 
‰eq
,

550 
ªp
->
˘lEdges
[

551 
	`¨5416_gë_¡xchaös
(
ah
->
txchaömask
) - 1],

552 
	`IS_CHAN_2GHZ
(
ch™
),

553 
AR5416_EEP4K_NUM_BAND_EDGES
);

555 i‡((
cfgCé
 & ~
CTL_MODE_M
Ë=
SD_NO_CTL
) {

556 
twi˚MaxEdgePowî
 =

557 
	`mö
(
twi˚MaxEdgePowî
,

558 
twi˚MöEdgePowî
);

560 
twi˚MaxEdgePowî
 = 
twi˚MöEdgePowî
;

566 
möCéPowî
 = (
u8
)
	`mö
(
twi˚MaxEdgePowî
, 
sˇÀdPowî
);

568 
pCéMode
[
˘lMode
]) {

569 
CTL_11B
:

570 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîCck
.
tPow2x
); i++) {

571 
èrgëPowîCck
.
tPow2x
[
i
] =

572 
	`mö
((
u16
)
èrgëPowîCck
.
tPow2x
[
i
],

573 
möCéPowî
);

576 
CTL_11G
:

577 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîOfdm
.
tPow2x
); i++) {

578 
èrgëPowîOfdm
.
tPow2x
[
i
] =

579 
	`mö
((
u16
)
èrgëPowîOfdm
.
tPow2x
[
i
],

580 
möCéPowî
);

583 
CTL_2GHT20
:

584 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt20
.
tPow2x
); i++) {

585 
èrgëPowîHt20
.
tPow2x
[
i
] =

586 
	`mö
((
u16
)
èrgëPowîHt20
.
tPow2x
[
i
],

587 
möCéPowî
);

590 
CTL_11B_EXT
:

591 
èrgëPowîCckExt
.
tPow2x
[0] =

592 
	`mö
((
u16
)
èrgëPowîCckExt
.
tPow2x
[0],

593 
möCéPowî
);

595 
CTL_11G_EXT
:

596 
èrgëPowîOfdmExt
.
tPow2x
[0] =

597 
	`mö
((
u16
)
èrgëPowîOfdmExt
.
tPow2x
[0],

598 
möCéPowî
);

600 
CTL_2GHT40
:

601 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt40
.
tPow2x
); i++) {

602 
èrgëPowîHt40
.
tPow2x
[
i
] =

603 
	`mö
((
u16
)
èrgëPowîHt40
.
tPow2x
[
i
],

604 
möCéPowî
);

612 
øãsAºay
[
øã6mb
] =

613 
øãsAºay
[
øã9mb
] =

614 
øãsAºay
[
øã12mb
] =

615 
øãsAºay
[
øã18mb
] =

616 
øãsAºay
[
øã24mb
] =

617 
èrgëPowîOfdm
.
tPow2x
[0];

619 
øãsAºay
[
øã36mb
] = 
èrgëPowîOfdm
.
tPow2x
[1];

620 
øãsAºay
[
øã48mb
] = 
èrgëPowîOfdm
.
tPow2x
[2];

621 
øãsAºay
[
øã54mb
] = 
èrgëPowîOfdm
.
tPow2x
[3];

622 
øãsAºay
[
øãXr
] = 
èrgëPowîOfdm
.
tPow2x
[0];

624 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt20
.
tPow2x
); i++)

625 
øãsAºay
[
øãHt20_0
 + 
i
] = 
èrgëPowîHt20
.
tPow2x
[i];

627 
øãsAºay
[
øã1l
] = 
èrgëPowîCck
.
tPow2x
[0];

628 
øãsAºay
[
øã2s
] =Ñ©esAºay[
øã2l
] = 
èrgëPowîCck
.
tPow2x
[1];

629 
øãsAºay
[
øã5_5s
] =Ñ©esAºay[
øã5_5l
] = 
èrgëPowîCck
.
tPow2x
[2];

630 
øãsAºay
[
øã11s
] =Ñ©esAºay[
øã11l
] = 
èrgëPowîCck
.
tPow2x
[3];

632 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

633 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt40
.
tPow2x
); i++) {

634 
øãsAºay
[
øãHt40_0
 + 
i
] =

635 
èrgëPowîHt40
.
tPow2x
[
i
];

637 
øãsAºay
[
øãDupOfdm
] = 
èrgëPowîHt40
.
tPow2x
[0];

638 
øãsAºay
[
øãDupCck
] = 
èrgëPowîHt40
.
tPow2x
[0];

639 
øãsAºay
[
øãExtOfdm
] = 
èrgëPowîOfdmExt
.
tPow2x
[0];

640 
øãsAºay
[
øãExtCck
] = 
èrgëPowîCckExt
.
tPow2x
[0];

643 #unde‡
CMP_TEST_GRP


644 
	}
}

646 
	$©h9k_hw_4k_£t_txpowî
(
©h_hw
 *
ah
,

647 
©h9k_ch™√l
 *
ch™
,

648 
u16
 
cfgCé
,

649 
u8
 
twi˚A¡í«Redu˘i⁄
,

650 
u8
 
powîLimô
, 
boﬁ
 
ã°
)

652 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

653 
¨5416_ì¥om_4k
 *
pEïD©a
 = &
ah
->
ì¥om
.
m≠4k
;

654 
modÆ_ìp_4k_hódî
 *
pModÆ
 = &
pEïD©a
->
modÆHódî
;

655 
öt16_t
 
øãsAºay
[
Ar5416R©eSize
];

656 
u8
 
ht40PowîIncF‹Pdadc
 = 2;

657 
i
;

659 
	`mem£t
(
øãsAºay
, 0, (ratesArray));

661 i‡((
pEïD©a
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

662 
AR5416_EEP_MINOR_VER_2
) {

663 
ht40PowîIncF‹Pdadc
 = 
pModÆ
->ht40PowerIncForPdadc;

666 
	`©h9k_hw_£t_4k_powî_≥r_øã_èbÀ
(
ah
, 
ch™
,

667 &
øãsAºay
[0], 
cfgCé
,

668 
twi˚A¡í«Redu˘i⁄
,

669 
powîLimô
);

671 
	`©h9k_hw_£t_4k_powî_ˇl_èbÀ
(
ah
, 
ch™
);

673 
ªguœt‹y
->
max_powî_Àvñ
 = 0;

674 
i
 = 0; i < 
	`ARRAY_SIZE
(
øãsAºay
); i++) {

675 i‡(
øãsAºay
[
i
] > 
MAX_RATE_POWER
)

676 
øãsAºay
[
i
] = 
MAX_RATE_POWER
;

678 i‡(
øãsAºay
[
i
] > 
ªguœt‹y
->
max_powî_Àvñ
)

679 
ªguœt‹y
->
max_powî_Àvñ
 = 
øãsAºay
[
i
];

682 i‡(
ã°
)

685 
i
 = 0; i < 
Ar5416R©eSize
; i++)

686 
øãsAºay
[
i
] -
AR5416_PWR_TABLE_OFFSET_DB
 * 2;

688 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

691 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE1
,

692 
	`ATH9K_POW_SM
(
øãsAºay
[
øã18mb
], 24)

693 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã12mb
], 16)

694 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã9mb
], 8)

695 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã6mb
], 0));

696 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE2
,

697 
	`ATH9K_POW_SM
(
øãsAºay
[
øã54mb
], 24)

698 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã48mb
], 16)

699 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã36mb
], 8)

700 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã24mb
], 0));

703 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE3
,

704 
	`ATH9K_POW_SM
(
øãsAºay
[
øã2s
], 24)

705 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã2l
], 16)

706 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãXr
], 8)

707 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã1l
], 0));

708 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE4
,

709 
	`ATH9K_POW_SM
(
øãsAºay
[
øã11s
], 24)

710 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã11l
], 16)

711 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã5_5s
], 8)

712 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã5_5l
], 0));

715 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE5
,

716 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_3
], 24)

717 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_2
], 16)

718 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_1
], 8)

719 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_0
], 0));

720 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE6
,

721 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_7
], 24)

722 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_6
], 16)

723 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_5
], 8)

724 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_4
], 0));

727 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

728 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE7
,

729 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_3
] +

730 
ht40PowîIncF‹Pdadc
, 24)

731 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_2
] +

732 
ht40PowîIncF‹Pdadc
, 16)

733 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_1
] +

734 
ht40PowîIncF‹Pdadc
, 8)

735 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_0
] +

736 
ht40PowîIncF‹Pdadc
, 0));

737 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE8
,

738 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_7
] +

739 
ht40PowîIncF‹Pdadc
, 24)

740 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_6
] +

741 
ht40PowîIncF‹Pdadc
, 16)

742 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_5
] +

743 
ht40PowîIncF‹Pdadc
, 8)

744 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_4
] +

745 
ht40PowîIncF‹Pdadc
, 0));

746 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE9
,

747 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtOfdm
], 24)

748 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtCck
], 16)

749 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupOfdm
], 8)

750 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupCck
], 0));

754 i‡(
ah
->
çc_íabÀd
) {

755 
ht40_dñè
;

757 
ht40_dñè
 = (
	`IS_CHAN_HT40
(
ch™
)Ë? 
ht40PowîIncF‹Pdadc
 : 0;

758 
	`¨5008_hw_öô_øã_txpowî
(
ah
, 
øãsAºay
, 
ch™
, 
ht40_dñè
);

760 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE_MAX
,

761 
MAX_RATE_POWER
 | 
AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE
);

764 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE_MAX
, 
MAX_RATE_POWER
);

767 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

768 
	}
}

770 
	$©h9k_hw_4k_£t_gaö
(
©h_hw
 *
ah
,

771 
modÆ_ìp_4k_hódî
 *
pModÆ
,

772 
¨5416_ì¥om_4k
 *
ìp
,

773 
u8
 
txRxAâíLoˇl
)

775 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

776 
	`REG_RMW
(
ah
, 
AR_PHY_SWITCH_CHAIN_0
,

777 
pModÆ
->
™tCålChaö
[0], 0);

779 
	`REG_RMW
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0),

780 
	`SM
(
pModÆ
->
iqCÆICh
[0], 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
) |

781 
	`SM
(
pModÆ
->
iqCÆQCh
[0], 
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
),

782 
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
 | 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
);

784 i‡((
ìp
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

785 
AR5416_EEP_MINOR_VER_3
) {

786 
txRxAâíLoˇl
 = 
pModÆ
->
txRxAâíCh
[0];

788 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
,

789 
AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN
, 
pModÆ
->
bswM¨gö
[0]);

790 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
,

791 
AR_PHY_GAIN_2GHZ_XATTEN1_DB
, 
pModÆ
->
bswAâí
[0]);

792 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
,

793 
AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN
,

794 
pModÆ
->
x©ãn2M¨gö
[0]);

795 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
,

796 
AR_PHY_GAIN_2GHZ_XATTEN2_DB
, 
pModÆ
->
x©ãn2Db
[0]);

799 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 0x1000,

800 
AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN
,

801 
pModÆ
->
bswM¨gö
[0]);

802 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 0x1000,

803 
AR_PHY_GAIN_2GHZ_XATTEN1_DB
, 
pModÆ
->
bswAâí
[0]);

804 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 0x1000,

805 
AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN
,

806 
pModÆ
->
x©ãn2M¨gö
[0]);

807 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 0x1000,

808 
AR_PHY_GAIN_2GHZ_XATTEN2_DB
,

809 
pModÆ
->
x©ãn2Db
[0]);

812 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RXGAIN
,

813 
AR9280_PHY_RXGAIN_TXRX_ATTEN
, 
txRxAâíLoˇl
);

814 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RXGAIN
,

815 
AR9280_PHY_RXGAIN_TXRX_MARGIN
, 
pModÆ
->
rxTxM¨göCh
[0]);

817 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RXGAIN
 + 0x1000,

818 
AR9280_PHY_RXGAIN_TXRX_ATTEN
, 
txRxAâíLoˇl
);

819 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RXGAIN
 + 0x1000,

820 
AR9280_PHY_RXGAIN_TXRX_MARGIN
, 
pModÆ
->
rxTxM¨göCh
[0]);

821 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

822 
	}
}

828 
	$©h9k_hw_4k_£t_bﬂrd_vÆues
(
©h_hw
 *
ah
,

829 
©h9k_ch™√l
 *
ch™
)

831 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

832 
modÆ_ìp_4k_hódî
 *
pModÆ
;

833 
¨5416_ì¥om_4k
 *
ìp
 = &
ah
->
ì¥om
.
m≠4k
;

834 
ba£_ìp_hódî_4k
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

835 
u8
 
txRxAâíLoˇl
;

836 
u8
 
ob
[5], 
db1
[5], 
db2
[5];

837 
u8
 
™t_div_c⁄åﬁ1
, 
™t_div_c⁄åﬁ2
;

838 
u8
 
bb_desúed_sˇÀ
;

839 
u32
 
ªgVÆ
;

841 
pModÆ
 = &
ìp
->
modÆHódî
;

842 
txRxAâíLoˇl
 = 23;

844 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_COM
, 
pModÆ
->
™tCålComm⁄
);

847 
	`©h9k_hw_4k_£t_gaö
(
ah
, 
pModÆ
, 
ìp
, 
txRxAâíLoˇl
);

850 i‡(
pModÆ
->
vîsi⁄
 >= 3) {

851 
™t_div_c⁄åﬁ1
 = 
pModÆ
->
™tdiv_˘l1
;

852 
™t_div_c⁄åﬁ2
 = 
pModÆ
->
™tdiv_˘l2
;

854 
ªgVÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
);

855 
ªgVÆ
 &(~(
AR_PHY_9285_ANT_DIV_CTL_ALL
));

857 
ªgVÆ
 |
	`SM
(
™t_div_c⁄åﬁ1
,

858 
AR_PHY_9285_ANT_DIV_CTL
);

859 
ªgVÆ
 |
	`SM
(
™t_div_c⁄åﬁ2
,

860 
AR_PHY_9285_ANT_DIV_ALT_LNACONF
);

861 
ªgVÆ
 |
	`SM
((
™t_div_c⁄åﬁ2
 >> 2),

862 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF
);

863 
ªgVÆ
 |
	`SM
((
™t_div_c⁄åﬁ1
 >> 1),

864 
AR_PHY_9285_ANT_DIV_ALT_GAINTB
);

865 
ªgVÆ
 |
	`SM
((
™t_div_c⁄åﬁ1
 >> 2),

866 
AR_PHY_9285_ANT_DIV_MAIN_GAINTB
);

869 
	`REG_WRITE
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
, 
ªgVÆ
);

870 
ªgVÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
);

871 
ªgVÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_DETECT
);

872 
ªgVÆ
 &(~
AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV
);

873 
ªgVÆ
 |
	`SM
((
™t_div_c⁄åﬁ1
 >> 3),

874 
AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV
);

876 
	`REG_WRITE
(
ah
, 
AR_PHY_CCK_DETECT
, 
ªgVÆ
);

877 
ªgVÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_CCK_DETECT
);

879 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
) {

884 
ªgVÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
);

885 
ªgVÆ
 &(~(
AR_PHY_9285_ANT_DIV_MAIN_LNACONF
 |

886 
AR_PHY_9285_ANT_DIV_ALT_LNACONF
));

888 
ªgVÆ
 |(
ATH_ANT_DIV_COMB_LNA1
 <<

889 
AR_PHY_9285_ANT_DIV_MAIN_LNACONF_S
);

890 
ªgVÆ
 |(
ATH_ANT_DIV_COMB_LNA2
 <<

891 
AR_PHY_9285_ANT_DIV_ALT_LNACONF_S
);

892 
ªgVÆ
 &(~(
AR_PHY_9285_FAST_DIV_BIAS
));

893 
ªgVÆ
 |(0 << 
AR_PHY_9285_FAST_DIV_BIAS_S
);

894 
	`REG_WRITE
(
ah
, 
AR_PHY_MULTICHAIN_GAIN_CTL
, 
ªgVÆ
);

898 i‡(
pModÆ
->
vîsi⁄
 >= 2) {

899 
ob
[0] = 
pModÆ
->
ob_0
;

900 
ob
[1] = 
pModÆ
->
ob_1
;

901 
ob
[2] = 
pModÆ
->
ob_2
;

902 
ob
[3] = 
pModÆ
->
ob_3
;

903 
ob
[4] = 
pModÆ
->
ob_4
;

905 
db1
[0] = 
pModÆ
->
db1_0
;

906 
db1
[1] = 
pModÆ
->
db1_1
;

907 
db1
[2] = 
pModÆ
->
db1_2
;

908 
db1
[3] = 
pModÆ
->
db1_3
;

909 
db1
[4] = 
pModÆ
->
db1_4
;

911 
db2
[0] = 
pModÆ
->
db2_0
;

912 
db2
[1] = 
pModÆ
->
db2_1
;

913 
db2
[2] = 
pModÆ
->
db2_2
;

914 
db2
[3] = 
pModÆ
->
db2_3
;

915 
db2
[4] = 
pModÆ
->
db2_4
;

916 } i‡(
pModÆ
->
vîsi⁄
 == 1) {

917 
ob
[0] = 
pModÆ
->
ob_0
;

918 
ob
[1] = ob[2] = ob[3] = ob[4] = 
pModÆ
->
ob_1
;

919 
db1
[0] = 
pModÆ
->
db1_0
;

920 
db1
[1] = db1[2] = db1[3] = db1[4] = 
pModÆ
->
db1_1
;

921 
db2
[0] = 
pModÆ
->
db2_0
;

922 
db2
[1] = db2[2] = db2[3] = db2[4] = 
pModÆ
->
db2_1
;

924 
i
;

926 
i
 = 0; i < 5; i++) {

927 
ob
[
i
] = 
pModÆ
->
ob_0
;

928 
db1
[
i
] = 
pModÆ
->
db1_0
;

929 
db2
[
i
] = 
pModÆ
->
db1_0
;

933 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

934 i‡(
	`AR_SREV_9271
(
ah
)) {

935 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

936 
AR9285_AN_RF2G3
,

937 
AR9271_AN_RF2G3_OB_cck
,

938 
AR9271_AN_RF2G3_OB_cck_S
,

939 
ob
[0]);

940 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

941 
AR9285_AN_RF2G3
,

942 
AR9271_AN_RF2G3_OB_psk
,

943 
AR9271_AN_RF2G3_OB_psk_S
,

944 
ob
[1]);

945 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

946 
AR9285_AN_RF2G3
,

947 
AR9271_AN_RF2G3_OB_qam
,

948 
AR9271_AN_RF2G3_OB_qam_S
,

949 
ob
[2]);

950 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

951 
AR9285_AN_RF2G3
,

952 
AR9271_AN_RF2G3_DB_1
,

953 
AR9271_AN_RF2G3_DB_1_S
,

954 
db1
[0]);

955 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

956 
AR9285_AN_RF2G4
,

957 
AR9271_AN_RF2G4_DB_2
,

958 
AR9271_AN_RF2G4_DB_2_S
,

959 
db2
[0]);

961 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

962 
AR9285_AN_RF2G3
,

963 
AR9285_AN_RF2G3_OB_0
,

964 
AR9285_AN_RF2G3_OB_0_S
,

965 
ob
[0]);

966 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

967 
AR9285_AN_RF2G3
,

968 
AR9285_AN_RF2G3_OB_1
,

969 
AR9285_AN_RF2G3_OB_1_S
,

970 
ob
[1]);

971 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

972 
AR9285_AN_RF2G3
,

973 
AR9285_AN_RF2G3_OB_2
,

974 
AR9285_AN_RF2G3_OB_2_S
,

975 
ob
[2]);

976 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

977 
AR9285_AN_RF2G3
,

978 
AR9285_AN_RF2G3_OB_3
,

979 
AR9285_AN_RF2G3_OB_3_S
,

980 
ob
[3]);

981 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

982 
AR9285_AN_RF2G3
,

983 
AR9285_AN_RF2G3_OB_4
,

984 
AR9285_AN_RF2G3_OB_4_S
,

985 
ob
[4]);

987 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

988 
AR9285_AN_RF2G3
,

989 
AR9285_AN_RF2G3_DB1_0
,

990 
AR9285_AN_RF2G3_DB1_0_S
,

991 
db1
[0]);

992 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

993 
AR9285_AN_RF2G3
,

994 
AR9285_AN_RF2G3_DB1_1
,

995 
AR9285_AN_RF2G3_DB1_1_S
,

996 
db1
[1]);

997 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

998 
AR9285_AN_RF2G3
,

999 
AR9285_AN_RF2G3_DB1_2
,

1000 
AR9285_AN_RF2G3_DB1_2_S
,

1001 
db1
[2]);

1002 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1003 
AR9285_AN_RF2G4
,

1004 
AR9285_AN_RF2G4_DB1_3
,

1005 
AR9285_AN_RF2G4_DB1_3_S
,

1006 
db1
[3]);

1007 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1008 
AR9285_AN_RF2G4
,

1009 
AR9285_AN_RF2G4_DB1_4
,

1010 
AR9285_AN_RF2G4_DB1_4_S
, 
db1
[4]);

1012 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1013 
AR9285_AN_RF2G4
,

1014 
AR9285_AN_RF2G4_DB2_0
,

1015 
AR9285_AN_RF2G4_DB2_0_S
,

1016 
db2
[0]);

1017 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1018 
AR9285_AN_RF2G4
,

1019 
AR9285_AN_RF2G4_DB2_1
,

1020 
AR9285_AN_RF2G4_DB2_1_S
,

1021 
db2
[1]);

1022 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1023 
AR9285_AN_RF2G4
,

1024 
AR9285_AN_RF2G4_DB2_2
,

1025 
AR9285_AN_RF2G4_DB2_2_S
,

1026 
db2
[2]);

1027 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1028 
AR9285_AN_RF2G4
,

1029 
AR9285_AN_RF2G4_DB2_3
,

1030 
AR9285_AN_RF2G4_DB2_3_S
,

1031 
db2
[3]);

1032 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
,

1033 
AR9285_AN_RF2G4
,

1034 
AR9285_AN_RF2G4_DB2_4
,

1035 
AR9285_AN_RF2G4_DB2_4_S
,

1036 
db2
[4]);

1038 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

1040 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

1041 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SETTLING
, 
AR_PHY_SETTLING_SWITCH
,

1042 
pModÆ
->
swôchSëéög
);

1043 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_DESIRED_SZ
, 
AR_PHY_DESIRED_SZ_ADC
,

1044 
pModÆ
->
adcDesúedSize
);

1046 
	`REG_RMW
(
ah
, 
AR_PHY_RF_CTL4
,

1047 
	`SM
(
pModÆ
->
txEndToX∑Off
, 
AR_PHY_RF_CTL4_TX_END_XPAA_OFF
) |

1048 
	`SM
(
pModÆ
->
txEndToX∑Off
, 
AR_PHY_RF_CTL4_TX_END_XPAB_OFF
) |

1049 
	`SM
(
pModÆ
->
txFømeToX∑On
, 
AR_PHY_RF_CTL4_FRAME_XPAA_ON
) |

1050 
	`SM
(
pModÆ
->
txFømeToX∑On
, 
AR_PHY_RF_CTL4_FRAME_XPAB_ON
), 0);

1052 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL3
, 
AR_PHY_TX_END_TO_A2_RX_ON
,

1053 
pModÆ
->
txEndToRxOn
);

1055 i‡(
	`AR_SREV_9271_10
(
ah
))

1056 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL3
, 
AR_PHY_TX_END_TO_A2_RX_ON
,

1057 
pModÆ
->
txEndToRxOn
);

1058 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCA
, 
AR9280_PHY_CCA_THRESH62
,

1059 
pModÆ
->
thªsh62
);

1060 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_CCA0
, 
AR_PHY_EXT_CCA0_THRESH62
,

1061 
pModÆ
->
thªsh62
);

1063 i‡((
ìp
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

1064 
AR5416_EEP_MINOR_VER_2
) {

1065 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL2
, 
AR_PHY_TX_END_DATA_START
,

1066 
pModÆ
->
txFømeToD©aSèπ
);

1067 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL2
, 
AR_PHY_TX_END_PA_ON
,

1068 
pModÆ
->
txFømeToPaOn
);

1071 i‡((
ìp
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

1072 
AR5416_EEP_MINOR_VER_3
) {

1073 i‡(
	`IS_CHAN_HT40
(
ch™
))

1074 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SETTLING
,

1075 
AR_PHY_SETTLING_SWITCH
,

1076 
pModÆ
->
swSëéeHt40
);

1079 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

1081 
bb_desúed_sˇÀ
 = (
pModÆ
->
bb_sˇÀ_smπ_™ã¬a
 &

1082 
EEP_4K_BB_DESIRED_SCALE_MASK
);

1083 i‡((
pBa£
->
txGaöTy≥
 =0Ë&& (
bb_desúed_sˇÀ
 != 0)) {

1084 
u32
 
pwr˘æ
, 
mask
, 
˛r
;

1086 
mask
 = 
	`BIT
(0)|BIT(5)|BIT(10)|BIT(15)|BIT(20)|BIT(25);

1087 
pwr˘æ
 = 
mask
 * 
bb_desúed_sˇÀ
;

1088 
˛r
 = 
mask
 * 0x1f;

1089 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

1090 
	`REG_RMW
(
ah
, 
AR_PHY_TX_PWRCTRL8
, 
pwr˘æ
, 
˛r
);

1091 
	`REG_RMW
(
ah
, 
AR_PHY_TX_PWRCTRL10
, 
pwr˘æ
, 
˛r
);

1092 
	`REG_RMW
(
ah
, 
AR_PHY_CH0_TX_PWRCTRL12
, 
pwr˘æ
, 
˛r
);

1094 
mask
 = 
	`BIT
(0)|BIT(5)|BIT(15);

1095 
pwr˘æ
 = 
mask
 * 
bb_desúed_sˇÀ
;

1096 
˛r
 = 
mask
 * 0x1f;

1097 
	`REG_RMW
(
ah
, 
AR_PHY_TX_PWRCTRL9
, 
pwr˘æ
, 
˛r
);

1099 
mask
 = 
	`BIT
(0)|BIT(5);

1100 
pwr˘æ
 = 
mask
 * 
bb_desúed_sˇÀ
;

1101 
˛r
 = 
mask
 * 0x1f;

1102 
	`REG_RMW
(
ah
, 
AR_PHY_CH0_TX_PWRCTRL11
, 
pwr˘æ
, 
˛r
);

1103 
	`REG_RMW
(
ah
, 
AR_PHY_CH0_TX_PWRCTRL13
, 
pwr˘æ
, 
˛r
);

1104 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

1106 
	}
}

1108 
u16
 
	$©h9k_hw_4k_gë_•ur_ch™√l
(
©h_hw
 *
ah
, 
u16
 
i
, 
boﬁ
 
is2GHz
)

1110  
ah
->
ì¥om
.
m≠4k
.
modÆHódî
.
•urCh™s
[
i
].
•urCh™
;

1111 
	}
}

1113 c⁄° 
ì¥om_›s
 
	gìp_4k_›s
 = {

1114 .
check_ì¥om
 = 
©h9k_hw_4k_check_ì¥om
,

1115 .
	ggë_ì¥om
 = 
©h9k_hw_4k_gë_ì¥om
,

1116 .
	gfûl_ì¥om
 = 
©h9k_hw_4k_fûl_ì¥om
,

1117 .
	gdump_ì¥om
 = 
©h9k_hw_4k_dump_ì¥om
,

1118 .
	ggë_ì¥om_vî
 = 
©h9k_hw_4k_gë_ì¥om_vî
,

1119 .
	ggë_ì¥om_ªv
 = 
©h9k_hw_4k_gë_ì¥om_ªv
,

1120 .
	g£t_bﬂrd_vÆues
 = 
©h9k_hw_4k_£t_bﬂrd_vÆues
,

1121 .
	g£t_txpowî
 = 
©h9k_hw_4k_£t_txpowî
,

1122 .
	ggë_•ur_ch™√l
 = 
©h9k_hw_4k_gë_•ur_ch™√l


	@eeprom_9287.c

17 
	~<asm/u«lig√d.h
>

18 
	~"hw.h
"

19 
	~"¨9002_phy.h
"

21 
	#SIZE_EEPROM_AR9287
 ((
¨9287_ì¥om
Ë/ (
u16
))

	)

23 
	$©h9k_hw_¨9287_gë_ì¥om_vî
(
©h_hw
 *
ah
)

25  (
ah
->
ì¥om
.
m≠9287
.
ba£EïHódî
.
vîsi⁄
 >> 12) & 0xF;

26 
	}
}

28 
	$©h9k_hw_¨9287_gë_ì¥om_ªv
(
©h_hw
 *
ah
)

30  (
ah
->
ì¥om
.
m≠9287
.
ba£EïHódî
.
vîsi⁄
) & 0xFFF;

31 
	}
}

33 
boﬁ
 
	$__©h9k_hw_¨9287_fûl_ì¥om
(
©h_hw
 *
ah
)

35 
¨9287_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
m≠9287
;

36 
u16
 *
ìp_d©a
;

37 
addr
, 
ìp_°¨t_loc
 = 
AR9287_EEP_START_LOC
;

38 
ìp_d©a
 = (
u16
 *)
ìp
;

40 
addr
 = 0;ádd∏< 
SIZE_EEPROM_AR9287
;áddr++) {

41 i‡(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
addr
 + 
ìp_°¨t_loc
, 
ìp_d©a
))

42  
Ál£
;

43 
ìp_d©a
++;

46  
åue
;

47 
	}
}

49 
boﬁ
 
	$__©h9k_hw_usb_¨9287_fûl_ì¥om
(
©h_hw
 *
ah
)

51 
u16
 *
ìp_d©a
 = (u16 *)&
ah
->
ì¥om
.
m≠9287
;

53 
	`©h9k_hw_usb_gí_fûl_ì¥om
(
ah
, 
ìp_d©a
,

54 
AR9287_HTC_EEP_START_LOC
,

55 
SIZE_EEPROM_AR9287
);

56  
åue
;

57 
	}
}

59 
boﬁ
 
	$©h9k_hw_¨9287_fûl_ì¥om
(
©h_hw
 *
ah
)

61 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

63 i‡(!
	`©h9k_hw_u£_Êash
(
ah
)) {

64 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Reading from EEPROM,Çot flash\n");

67 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_USB
)

68  
	`__©h9k_hw_usb_¨9287_fûl_ì¥om
(
ah
);

70  
	`__©h9k_hw_¨9287_fûl_ì¥om
(
ah
);

71 
	}
}

73 #i‡
deföed
(
CONFIG_ATH9K_DEBUGFS
Ë|| deföed(
CONFIG_ATH9K_HTC_DEBUGFS
)

74 
u32
 
	$¨9287_dump_modÆ_ì¥om
(*
buf
, 
u32
 
Àn
, u32 
size
,

75 
modÆ_ìp_¨9287_hódî
 *
modÆ_hdr
)

77 
	`PR_EEP
("Chaö0 A¡. C⁄åﬁ", 
modÆ_hdr
->
™tCålChaö
[0]);

78 
	`PR_EEP
("Chaö1 A¡. C⁄åﬁ", 
modÆ_hdr
->
™tCålChaö
[1]);

79 
	`PR_EEP
("A¡. Comm⁄ C⁄åﬁ", 
modÆ_hdr
->
™tCålComm⁄
);

80 
	`PR_EEP
("Chaö0 A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaöCh
[0]);

81 
	`PR_EEP
("Chaö1 A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaöCh
[1]);

82 
	`PR_EEP
("Swôch Sëée", 
modÆ_hdr
->
swôchSëéög
);

83 
	`PR_EEP
("Chaö0 TxRxAâí", 
modÆ_hdr
->
txRxAâíCh
[0]);

84 
	`PR_EEP
("Chaö1 TxRxAâí", 
modÆ_hdr
->
txRxAâíCh
[1]);

85 
	`PR_EEP
("Chaö0 RxTxM¨gö", 
modÆ_hdr
->
rxTxM¨göCh
[0]);

86 
	`PR_EEP
("Chaö1 RxTxM¨gö", 
modÆ_hdr
->
rxTxM¨göCh
[1]);

87 
	`PR_EEP
("ADC Desúed size", 
modÆ_hdr
->
adcDesúedSize
);

88 
	`PR_EEP
("txEndToX∑Off", 
modÆ_hdr
->
txEndToX∑Off
);

89 
	`PR_EEP
("txEndToRxOn", 
modÆ_hdr
->
txEndToRxOn
);

90 
	`PR_EEP
("txFømeToX∑On", 
modÆ_hdr
->
txFømeToX∑On
);

91 
	`PR_EEP
("CCA Thªshﬁd)", 
modÆ_hdr
->
thªsh62
);

92 
	`PR_EEP
("Chaö0 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[0]);

93 
	`PR_EEP
("Chaö1 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[1]);

94 
	`PR_EEP
("xpdGaö", 
modÆ_hdr
->
xpdGaö
);

95 
	`PR_EEP
("Exã∫Æ PD", 
modÆ_hdr
->
xpd
);

96 
	`PR_EEP
("Chaö0 I C€fficõ¡", 
modÆ_hdr
->
iqCÆICh
[0]);

97 
	`PR_EEP
("Chaö1 I C€fficõ¡", 
modÆ_hdr
->
iqCÆICh
[1]);

98 
	`PR_EEP
("Chaö0 Q C€fficõ¡", 
modÆ_hdr
->
iqCÆQCh
[0]);

99 
	`PR_EEP
("Chaö1 Q C€fficõ¡", 
modÆ_hdr
->
iqCÆQCh
[1]);

100 
	`PR_EEP
("pdGaöOvîœp", 
modÆ_hdr
->
pdGaöOvîœp
);

101 
	`PR_EEP
("xPA Bü†Levñ", 
modÆ_hdr
->
x∑BüsLvl
);

102 
	`PR_EEP
("txFømeToD©aSèπ", 
modÆ_hdr
->
txFømeToD©aSèπ
);

103 
	`PR_EEP
("txFømeToPaOn", 
modÆ_hdr
->
txFømeToPaOn
);

104 
	`PR_EEP
("HT40 Powî Inc.", 
modÆ_hdr
->
ht40PowîIncF‹Pdadc
);

105 
	`PR_EEP
("Chaö0 bswAâí", 
modÆ_hdr
->
bswAâí
[0]);

106 
	`PR_EEP
("Chaö1 bswAâí", 
modÆ_hdr
->
bswAâí
[1]);

107 
	`PR_EEP
("Chaö0 bswM¨gö", 
modÆ_hdr
->
bswM¨gö
[0]);

108 
	`PR_EEP
("Chaö1 bswM¨gö", 
modÆ_hdr
->
bswM¨gö
[1]);

109 
	`PR_EEP
("HT40 Swôch Sëée", 
modÆ_hdr
->
swSëéeHt40
);

110 
	`PR_EEP
("AR92x7 Vîsi⁄", 
modÆ_hdr
->
vîsi⁄
);

111 
	`PR_EEP
("DrivîBüs1", 
modÆ_hdr
->
db1
);

112 
	`PR_EEP
("DrivîBüs2", 
modÆ_hdr
->
db1
);

113 
	`PR_EEP
("CCK OuçutBüs", 
modÆ_hdr
->
ob_cck
);

114 
	`PR_EEP
("PSK OuçutBüs", 
modÆ_hdr
->
ob_psk
);

115 
	`PR_EEP
("QAM OuçutBüs", 
modÆ_hdr
->
ob_qam
);

116 
	`PR_EEP
("PAL_OFF OuçutBüs", 
modÆ_hdr
->
ob_∑l_off
);

118  
Àn
;

119 
	}
}

121 
u32
 
	$©h9k_hw_¨9287_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

122 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

124 
¨9287_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
m≠9287
;

125 
ba£_ìp_¨9287_hódî
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

127 i‡(!
dump_ba£_hdr
) {

128 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

130 
Àn
 = 
	`¨9287_dump_modÆ_ì¥om
(
buf
,Üí, 
size
,

131 &
ìp
->
modÆHódî
);

132 
out
;

135 
	`PR_EEP
("Maj‹ Vîsi⁄", 
pBa£
->
vîsi⁄
 >> 12);

136 
	`PR_EEP
("Mö‹ Vîsi⁄", 
pBa£
->
vîsi⁄
 & 0xFFF);

137 
	`PR_EEP
("Checksum", 
pBa£
->
checksum
);

138 
	`PR_EEP
("Lígth", 
pBa£
->
Àngth
);

139 
	`PR_EEP
("RegDomaö1", 
pBa£
->
ªgDmn
[0]);

140 
	`PR_EEP
("RegDomaö2", 
pBa£
->
ªgDmn
[1]);

141 
	`PR_EEP
("TX Mask", 
pBa£
->
txMask
);

142 
	`PR_EEP
("RX Mask", 
pBa£
->
rxMask
);

143 
	`PR_EEP
("AŒow 5GHz", !!(
pBa£
->
›C≠Fœgs
 & 
AR5416_OPFLAGS_11A
));

144 
	`PR_EEP
("AŒow 2GHz", !!(
pBa£
->
›C≠Fœgs
 & 
AR5416_OPFLAGS_11G
));

145 
	`PR_EEP
("DißbÀ 2GHz HT20", !!(
pBa£
->
›C≠Fœgs
 &

146 
AR5416_OPFLAGS_N_2G_HT20
));

147 
	`PR_EEP
("DißbÀ 2GHz HT40", !!(
pBa£
->
›C≠Fœgs
 &

148 
AR5416_OPFLAGS_N_2G_HT40
));

149 
	`PR_EEP
("DißbÀ 5Ghz HT20", !!(
pBa£
->
›C≠Fœgs
 &

150 
AR5416_OPFLAGS_N_5G_HT20
));

151 
	`PR_EEP
("DißbÀ 5Ghz HT40", !!(
pBa£
->
›C≠Fœgs
 &

152 
AR5416_OPFLAGS_N_5G_HT40
));

153 
	`PR_EEP
("Big Endün", !!(
pBa£
->
ìpMisc
 & 0x01));

154 
	`PR_EEP
("CÆ Bö Maj‹ Vî", (
pBa£
->
böBuûdNumbî
 >> 24) & 0xFF);

155 
	`PR_EEP
("CÆ Bö Mö‹ Vî", (
pBa£
->
böBuûdNumbî
 >> 16) & 0xFF);

156 
	`PR_EEP
("CÆ Bö Buûd", (
pBa£
->
böBuûdNumbî
 >> 8) & 0xFF);

157 
	`PR_EEP
("Powî TabÀ Off£t", 
pBa£
->
pwrTabÀOff£t
);

158 
	`PR_EEP
("O≥nLo› Powî Cål", 
pBa£
->
›íLo›PwrC¡l
);

160 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%20s : %pM\n", "MacAddress",

161 
pBa£
->
macAddr
);

163 
out
:

164 i‡(
Àn
 > 
size
)

165 
Àn
 = 
size
;

167  
Àn
;

168 
	}
}

170 
u32
 
	$©h9k_hw_¨9287_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

171 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

174 
	}
}

178 
	$©h9k_hw_¨9287_check_ì¥om
(
©h_hw
 *
ah
)

180 
u32
 
sum
 = 0, 
ñ
, 
öãgî
;

181 
u16
 
ãmp
, 
w‹d
, 
magic
, 
magic2
, *
ìpd©a
;

182 
i
, 
addr
;

183 
boﬁ
 
√ed_sw≠
 = 
Ál£
;

184 
¨9287_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
m≠9287
;

185 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

187 i‡(!
	`©h9k_hw_u£_Êash
(
ah
)) {

188 i‡(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
AR5416_EEPROM_MAGIC_OFFSET
,

189 &
magic
)) {

190 
	`©h_îr
(
comm⁄
, "Reading Magic # failed\n");

191  
Ál£
;

194 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Ród Magi¯0x%04X\n", 
magic
);

196 i‡(
magic
 !
AR5416_EEPROM_MAGIC
) {

197 
magic2
 = 
	`swab16
(
magic
);

199 i‡(
magic2
 =
AR5416_EEPROM_MAGIC
) {

200 
√ed_sw≠
 = 
åue
;

201 
ìpd©a
 = (
u16
 *)(&
ah
->
ì¥om
);

203 
addr
 = 0;ádd∏< 
SIZE_EEPROM_AR9287
;áddr++) {

204 
ãmp
 = 
	`swab16
(*
ìpd©a
);

205 *
ìpd©a
 = 
ãmp
;

206 
ìpd©a
++;

209 
	`©h_îr
(
comm⁄
,

211  -
EINVAL
;

216 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "need_swap = %s\n",

217 
√ed_sw≠
 ? "True" : "False");

219 i‡(
√ed_sw≠
)

220 
ñ
 = 
	`swab16
(
ah
->
ì¥om
.
m≠9287
.
ba£EïHódî
.
Àngth
);

222 
ñ
 = 
ah
->
ì¥om
.
m≠9287
.
ba£EïHódî
.
Àngth
;

224 i‡(
ñ
 > (
¨9287_ì¥om
))

225 
ñ
 = (
¨9287_ì¥om
Ë/ (
u16
);

227 
ñ
 =É»/ (
u16
);

229 
ìpd©a
 = (
u16
 *)(&
ah
->
ì¥om
);

231 
i
 = 0; i < 
ñ
; i++)

232 
sum
 ^*
ìpd©a
++;

234 i‡(
√ed_sw≠
) {

235 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
Àngth
);

236 
ìp
->
ba£EïHódî
.
Àngth
 = 
w‹d
;

238 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
checksum
);

239 
ìp
->
ba£EïHódî
.
checksum
 = 
w‹d
;

241 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
vîsi⁄
);

242 
ìp
->
ba£EïHódî
.
vîsi⁄
 = 
w‹d
;

244 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
ªgDmn
[0]);

245 
ìp
->
ba£EïHódî
.
ªgDmn
[0] = 
w‹d
;

247 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
ªgDmn
[1]);

248 
ìp
->
ba£EïHódî
.
ªgDmn
[1] = 
w‹d
;

250 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
rfSûít
);

251 
ìp
->
ba£EïHódî
.
rfSûít
 = 
w‹d
;

253 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
blueToŸhO±i⁄s
);

254 
ìp
->
ba£EïHódî
.
blueToŸhO±i⁄s
 = 
w‹d
;

256 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
devi˚C≠
);

257 
ìp
->
ba£EïHódî
.
devi˚C≠
 = 
w‹d
;

259 
öãgî
 = 
	`swab32
(
ìp
->
modÆHódî
.
™tCålComm⁄
);

260 
ìp
->
modÆHódî
.
™tCålComm⁄
 = 
öãgî
;

262 
i
 = 0; i < 
AR9287_MAX_CHAINS
; i++) {

263 
öãgî
 = 
	`swab32
(
ìp
->
modÆHódî
.
™tCålChaö
[
i
]);

264 
ìp
->
modÆHódî
.
™tCålChaö
[
i
] = 
öãgî
;

267 
i
 = 0; i < 
AR_EEPROM_MODAL_SPURS
; i++) {

268 
w‹d
 = 
	`swab16
(
ìp
->
modÆHódî
.
•urCh™s
[
i
].
•urCh™
);

269 
ìp
->
modÆHódî
.
•urCh™s
[
i
].
•urCh™
 = 
w‹d
;

273 i‡(
sum
 !0xfff‡|| 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
◊hË!
AR9287_EEP_VER


274 || 
ah
->
ìp_›s
->
	`gë_ì¥om_ªv
◊hË< 
AR5416_EEP_NO_BACK_VER
) {

275 
	`©h_îr
(
comm⁄
, "Bad EEPROM checksum 0x%x orÑevision 0x%04x\n",

276 
sum
, 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
(ah));

277  -
EINVAL
;

281 
	}
}

283 
u32
 
	$©h9k_hw_¨9287_gë_ì¥om
(
©h_hw
 *
ah
,

284 
ì¥om_∑øm
 
∑øm
)

286 
¨9287_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
m≠9287
;

287 
modÆ_ìp_¨9287_hódî
 *
pModÆ
 = &
ìp
->
modÆHódî
;

288 
ba£_ìp_¨9287_hódî
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

289 
u16
 
vî_mö‹
;

291 
vî_mö‹
 = 
pBa£
->
vîsi⁄
 & 
AR9287_EEP_VER_MINOR_MASK
;

293 
∑øm
) {

294 
EEP_NFTHRESH_2
:

295  
pModÆ
->
noi£Flo‹ThªshCh
[0];

296 
EEP_MAC_LSW
:

297  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
);

298 
EEP_MAC_MID
:

299  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
 + 2);

300 
EEP_MAC_MSW
:

301  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
 + 4);

302 
EEP_REG_0
:

303  
pBa£
->
ªgDmn
[0];

304 
EEP_OP_CAP
:

305  
pBa£
->
devi˚C≠
;

306 
EEP_OP_MODE
:

307  
pBa£
->
›C≠Fœgs
;

308 
EEP_RF_SILENT
:

309  
pBa£
->
rfSûít
;

310 
EEP_MINOR_REV
:

311  
vî_mö‹
;

312 
EEP_TX_MASK
:

313  
pBa£
->
txMask
;

314 
EEP_RX_MASK
:

315  
pBa£
->
rxMask
;

316 
EEP_DEV_TYPE
:

317  
pBa£
->
devi˚Ty≥
;

318 
EEP_OL_PWRCTRL
:

319  
pBa£
->
›íLo›PwrC¡l
;

320 
EEP_TEMPSENSE_SLOPE
:

321 i‡(
vî_mö‹
 >
AR9287_EEP_MINOR_VER_2
)

322  
pBa£
->
ãmpSísSl›e
;

325 
EEP_TEMPSENSE_SLOPE_PAL_ON
:

326 i‡(
vî_mö‹
 >
AR9287_EEP_MINOR_VER_3
)

327  
pBa£
->
ãmpSísSl›ePÆOn
;

330 
EEP_ANTENNA_GAIN_2G
:

331  
	`max_t
(
u8
, 
pModÆ
->
™ã¬aGaöCh
[0],

332 
pModÆ
->
™ã¬aGaöCh
[1]);

336 
	}
}

338 
	$¨9287_ì¥om_gë_tx_gaö_ödex
(
©h_hw
 *
ah
,

339 
©h9k_ch™√l
 *
ch™
,

340 
ˇl_d©a_›_lo›_¨9287
 *
pRawD©a£tOpLo›
,

341 
u8
 *
pCÆCh™s
, 
u16
 
avaûPõrs
, 
öt8_t
 *
pPwr
)

343 
u16
 
idxL
 = 0, 
idxR
 = 0, 
numPõrs
;

344 
boﬁ
 
m©ch
;

345 
ch™_˚¡îs
 
˚¡îs
;

347 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

349 
numPõrs
 = 0;ÇumPõr†< 
avaûPõrs
;ÇumPiers++) {

350 i‡(
pCÆCh™s
[
numPõrs
] =
AR5416_BCHAN_UNUSED
)

354 
m©ch
 = 
	`©h9k_hw_gë_lowî_uµî_ödex
(

355 (
u8
)
	`FREQ2FBIN
(
˚¡îs
.
sy¡h_˚¡î
, 
	`IS_CHAN_2GHZ
(
ch™
)),

356 
pCÆCh™s
, 
numPõrs
, &
idxL
, &
idxR
);

358 i‡(
m©ch
) {

359 *
pPwr
 = (
öt8_t
Ë
pRawD©a£tOpLo›
[
idxL
].
pwrPdg
[0][0];

361 *
pPwr
 = ((
öt8_t
Ë
pRawD©a£tOpLo›
[
idxL
].
pwrPdg
[0][0] +

362 (
öt8_t
Ë
pRawD©a£tOpLo›
[
idxR
].
pwrPdg
[0][0])/2;

365 
	}
}

367 
	$¨9287_ì¥om_ﬁpc_£t_pdadcs
(
©h_hw
 *
ah
,

368 
öt32_t
 
txPowî
, 
u16
 
chaö
)

370 
u32
 
tmpVÆ
;

371 
u32
 
a
;

375 
tmpVÆ
 = 
	`REG_READ
(
ah
, 0xa270);

376 
tmpVÆ
 =ÅmpVal & 0xFCFFFFFF;

377 
tmpVÆ
 =ÅmpVal | (0x3 << 24);

378 
	`REG_WRITE
(
ah
, 0xa270, 
tmpVÆ
);

382 
tmpVÆ
 = 
	`REG_READ
(
ah
, 0xb270);

383 
tmpVÆ
 =ÅmpVal & 0xFCFFFFFF;

384 
tmpVÆ
 =ÅmpVal | (0x3 << 24);

385 
	`REG_WRITE
(
ah
, 0xb270, 
tmpVÆ
);

389 i‡(
chaö
 == 0) {

390 
tmpVÆ
 = 
	`REG_READ
(
ah
, 0xa398);

391 
tmpVÆ
 =ÅmpVal & 0xff00ffff;

392 
a
 = (
txPowî
)&0xff;

393 
tmpVÆ
 =ÅmpVÆ | (
a
 << 16);

394 
	`REG_WRITE
(
ah
, 0xa398, 
tmpVÆ
);

399 i‡(
chaö
 == 1) {

400 
tmpVÆ
 = 
	`REG_READ
(
ah
, 0xb398);

401 
tmpVÆ
 =ÅmpVal & 0xff00ffff;

402 
a
 = (
txPowî
)&0xff;

403 
tmpVÆ
 =ÅmpVÆ | (
a
 << 16);

404 
	`REG_WRITE
(
ah
, 0xb398, 
tmpVÆ
);

406 
	}
}

408 
	$©h9k_hw_£t_¨9287_powî_ˇl_èbÀ
(
©h_hw
 *
ah
,

409 
©h9k_ch™√l
 *
ch™
)

411 
ˇl_d©a_≥r_‰eq_¨9287
 *
pRawD©a£t
;

412 
ˇl_d©a_›_lo›_¨9287
 *
pRawD©a£tO≥nLo›
;

413 
u8
 *
pCÆBCh™s
 = 
NULL
;

414 
u16
 
pdGaöOvîœp_t2
;

415 
u8
 
pdadcVÆues
[
AR5416_NUM_PDADC_VALUES
];

416 
u16
 
gaöBound¨õs
[
AR5416_PD_GAINS_IN_MASK
];

417 
u16
 
numPõrs
 = 0, 
i
, 
j
;

418 
u16
 
numXpdGaö
, 
xpdMask
;

419 
u16
 
xpdGaöVÆues
[
AR5416_NUM_PD_GAINS
] = {0, 0, 0, 0};

420 
u32
 
ªg32
, 
ªgOff£t
, 
ªgChaöOff£t
, 
ªgvÆ
;

421 
öt16_t
 
diff
 = 0;

422 
¨9287_ì¥om
 *
pEïD©a
 = &
ah
->
ì¥om
.
m≠9287
;

424 
xpdMask
 = 
pEïD©a
->
modÆHódî
.
xpdGaö
;

426 i‡((
pEïD©a
->
ba£EïHódî
.
vîsi⁄
 & 
AR9287_EEP_VER_MINOR_MASK
) >=

427 
AR9287_EEP_MINOR_VER_2
)

428 
pdGaöOvîœp_t2
 = 
pEïD©a
->
modÆHódî
.
pdGaöOvîœp
;

430 
pdGaöOvîœp_t2
 = (
u16
)(
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_TPCRG5
),

431 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
));

433 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

434 
pCÆBCh™s
 = 
pEïD©a
->
ˇlFªqPõr2G
;

435 
numPõrs
 = 
AR9287_NUM_2G_CAL_PIERS
;

436 i‡(
	`©h9k_hw_¨9287_gë_ì¥om
(
ah
, 
EEP_OL_PWRCTRL
)) {

437 
pRawD©a£tO≥nLo›
 =

438 (
ˇl_d©a_›_lo›_¨9287
 *)
pEïD©a
->
ˇlPõrD©a2G
[0];

439 
ah
->
öôPDADC
 = 
pRawD©a£tO≥nLo›
->
vpdPdg
[0][0];

443 
numXpdGaö
 = 0;

446 
i
 = 1; i <
AR5416_PD_GAINS_IN_MASK
; i++) {

447 i‡((
xpdMask
 >> (
AR5416_PD_GAINS_IN_MASK
 - 
i
)) & 1) {

448 i‡(
numXpdGaö
 >
AR5416_NUM_PD_GAINS
)

450 
xpdGaöVÆues
[
numXpdGaö
] =

451 (
u16
)(
AR5416_PD_GAINS_IN_MASK
-
i
);

452 
numXpdGaö
++;

456 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_NUM_PD_GAIN
,

457 (
numXpdGaö
 - 1) & 0x3);

458 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_1
,

459 
xpdGaöVÆues
[0]);

460 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_2
,

461 
xpdGaöVÆues
[1]);

462 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_3
,

463 
xpdGaöVÆues
[2]);

465 
i
 = 0; i < 
AR9287_MAX_CHAINS
; i++) {

466 
ªgChaöOff£t
 = 
i
 * 0x1000;

468 i‡(
pEïD©a
->
ba£EïHódî
.
txMask
 & (1 << 
i
)) {

469 
pRawD©a£tO≥nLo›
 =

470 (
ˇl_d©a_›_lo›_¨9287
 *)
pEïD©a
->
ˇlPõrD©a2G
[
i
];

472 i‡(
	`©h9k_hw_¨9287_gë_ì¥om
(
ah
, 
EEP_OL_PWRCTRL
)) {

473 
öt8_t
 
txPowî
;

474 
	`¨9287_ì¥om_gë_tx_gaö_ödex
(
ah
, 
ch™
,

475 
pRawD©a£tO≥nLo›
,

476 
pCÆBCh™s
, 
numPõrs
,

477 &
txPowî
);

478 
	`¨9287_ì¥om_ﬁpc_£t_pdadcs
(
ah
, 
txPowî
, 
i
);

480 
pRawD©a£t
 =

481 (
ˇl_d©a_≥r_‰eq_¨9287
 *)

482 
pEïD©a
->
ˇlPõrD©a2G
[
i
];

484 
	`©h9k_hw_gë_gaö_bound¨õs_pdadcs
(
ah
, 
ch™
,

485 
pRawD©a£t
,

486 
pCÆBCh™s
, 
numPõrs
,

487 
pdGaöOvîœp_t2
,

488 
gaöBound¨õs
,

489 
pdadcVÆues
,

490 
numXpdGaö
);

493 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

495 i‡(
i
 == 0) {

496 i‡(!
	`©h9k_hw_¨9287_gë_ì¥om
(
ah
,

497 
EEP_OL_PWRCTRL
)) {

499 
ªgvÆ
 = 
	`SM
(
pdGaöOvîœp_t2
,

500 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
)

501 | 
	`SM
(
gaöBound¨õs
[0],

502 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_1
)

503 | 
	`SM
(
gaöBound¨õs
[1],

504 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_2
)

505 | 
	`SM
(
gaöBound¨õs
[2],

506 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_3
)

507 | 
	`SM
(
gaöBound¨õs
[3],

508 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_4
);

510 
	`REG_WRITE
(
ah
,

511 
AR_PHY_TPCRG5
 + 
ªgChaöOff£t
,

512 
ªgvÆ
);

516 i‡((
öt32_t
)
AR9287_PWR_TABLE_OFFSET_DB
 !=

517 
pEïD©a
->
ba£EïHódî
.
pwrTabÀOff£t
) {

518 
diff
 = (
u16
)(
pEïD©a
->
ba£EïHódî
.
pwrTabÀOff£t
 -

519 (
öt32_t
)
AR9287_PWR_TABLE_OFFSET_DB
);

520 
diff
 *= 2;

522 
j
 = 0; j < ((
u16
)
AR5416_NUM_PDADC_VALUES
-
diff
); j++)

523 
pdadcVÆues
[
j
] =ÖdadcVÆues[j+
diff
];

525 
j
 = (
u16
)(
AR5416_NUM_PDADC_VALUES
-
diff
);

526 
j
 < 
AR5416_NUM_PDADC_VALUES
; j++)

527 
pdadcVÆues
[
j
] =

528 
pdadcVÆues
[
AR5416_NUM_PDADC_VALUES
-
diff
];

531 i‡(!
	`©h9k_hw_¨9287_gë_ì¥om
(
ah
, 
EEP_OL_PWRCTRL
)) {

532 
ªgOff£t
 = 
AR_PHY_BASE
 +

533 (672 << 2Ë+ 
ªgChaöOff£t
;

535 
j
 = 0; j < 32; j++) {

536 
ªg32
 = 
	`gë_u«lig√d_À32
(&
pdadcVÆues
[4 * 
j
]);

538 
	`REG_WRITE
(
ah
, 
ªgOff£t
, 
ªg32
);

539 
ªgOff£t
 += 4;

542 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

545 
	}
}

547 
	$©h9k_hw_£t_¨9287_powî_≥r_øã_èbÀ
(
©h_hw
 *
ah
,

548 
©h9k_ch™√l
 *
ch™
,

549 
öt16_t
 *
øãsAºay
,

550 
u16
 
cfgCé
,

551 
u16
 
™ã¬a_ªdu˘i⁄
,

552 
u16
 
powîLimô
)

554 
	#CMP_CTL
 \

555 (((
cfgCé
 & ~
CTL_MODE_M
Ë| (
pCéMode
[
˘lMode
] & CTL_MODE_M)) == \

556 
pEïD©a
->
˘lIndex
[
i
])

	)

558 
	#CMP_NO_CTL
 \

559 (((
cfgCé
 & ~
CTL_MODE_M
Ë| (
pCéMode
[
˘lMode
] & CTL_MODE_M)) == \

560 ((
pEïD©a
->
˘lIndex
[
i
] & 
CTL_MODE_M
Ë| 
SD_NO_CTL
))

	)

562 
u16
 
twi˚MaxEdgePowî
;

563 
i
;

564 
ˇl_˘l_d©a_¨9287
 *
ªp
;

565 
ˇl_èrgë_powî_Àg
 
èrgëPowîOfdm
 = {0, {0, 0, 0, 0} },

566 
èrgëPowîCck
 = {0, {0, 0, 0, 0} };

567 
ˇl_èrgë_powî_Àg
 
èrgëPowîOfdmExt
 = {0, {0, 0, 0, 0} },

568 
èrgëPowîCckExt
 = {0, {0, 0, 0, 0} };

569 
ˇl_èrgë_powî_ht
 
èrgëPowîHt20
,

570 
èrgëPowîHt40
 = {0, {0, 0, 0, 0} };

571 
u16
 
sˇÀdPowî
 = 0, 
möCéPowî
;

572 c⁄° 
u16
 
˘lModesF‹11g
[] = {

573 
CTL_11B
, 
CTL_11G
, 
CTL_2GHT20
,

574 
CTL_11B_EXT
, 
CTL_11G_EXT
, 
CTL_2GHT40


576 
u16
 
numCéModes
 = 0;

577 c⁄° 
u16
 *
pCéMode
 = 
NULL
;

578 
u16
 
˘lMode
, 
‰eq
;

579 
ch™_˚¡îs
 
˚¡îs
;

580 
tx_chaömask
;

581 
u16
 
twi˚MöEdgePowî
;

582 
¨9287_ì¥om
 *
pEïD©a
 = &
ah
->
ì¥om
.
m≠9287
;

583 
tx_chaömask
 = 
ah
->
txchaömask
;

585 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

586 
sˇÀdPowî
 = 
	`©h9k_hw_gë_sˇÀd_powî
(
ah
, 
powîLimô
,

587 
™ã¬a_ªdu˘i⁄
);

592 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

594 
numCéModes
 =

595 
	`ARRAY_SIZE
(
˘lModesF‹11g
Ë- 
SUB_NUM_CTL_MODES_AT_2G_40
;

597 
pCéMode
 = 
˘lModesF‹11g
;

599 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

600 
pEïD©a
->
ˇlT¨gëPowîCck
,

601 
AR9287_NUM_2G_CCK_TARGET_POWERS
,

602 &
èrgëPowîCck
, 4, 
Ál£
);

603 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

604 
pEïD©a
->
ˇlT¨gëPowî2G
,

605 
AR9287_NUM_2G_20_TARGET_POWERS
,

606 &
èrgëPowîOfdm
, 4, 
Ál£
);

607 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

608 
pEïD©a
->
ˇlT¨gëPowî2GHT20
,

609 
AR9287_NUM_2G_20_TARGET_POWERS
,

610 &
èrgëPowîHt20
, 8, 
Ál£
);

612 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

614 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11g
);

615 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

616 
pEïD©a
->
ˇlT¨gëPowî2GHT40
,

617 
AR9287_NUM_2G_40_TARGET_POWERS
,

618 &
èrgëPowîHt40
, 8, 
åue
);

619 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

620 
pEïD©a
->
ˇlT¨gëPowîCck
,

621 
AR9287_NUM_2G_CCK_TARGET_POWERS
,

622 &
èrgëPowîCckExt
, 4, 
åue
);

623 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

624 
pEïD©a
->
ˇlT¨gëPowî2G
,

625 
AR9287_NUM_2G_20_TARGET_POWERS
,

626 &
èrgëPowîOfdmExt
, 4, 
åue
);

630 
˘lMode
 = 0; céModê< 
numCéModes
; ctlMode++) {

631 
boﬁ
 
isHt40CéMode
 =

632 (
pCéMode
[
˘lMode
] =
CTL_2GHT40
Ë? 
åue
 : 
Ál£
;

634 i‡(
isHt40CéMode
)

635 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

636 i‡(
pCéMode
[
˘lMode
] & 
EXT_ADDITIVE
)

637 
‰eq
 = 
˚¡îs
.
ext_˚¡î
;

639 
‰eq
 = 
˚¡îs
.
˘l_˚¡î
;

641 
twi˚MaxEdgePowî
 = 
MAX_RATE_POWER
;

643 
i
 = 0; (ò< 
AR9287_NUM_CTLS
Ë&& 
pEïD©a
->
˘lIndex
[i]; i++) {

644 
ˇl_˘l_edges
 *
pRdEdgesPowî
;

650 i‡(
CMP_CTL
 || 
CMP_NO_CTL
) {

651 
ªp
 = &(
pEïD©a
->
˘lD©a
[
i
]);

652 
pRdEdgesPowî
 =

653 
ªp
->
˘lEdges
[
	`¨5416_gë_¡xchaös
(
tx_chaömask
) - 1];

655 
twi˚MöEdgePowî
 = 
	`©h9k_hw_gë_max_edge_powî
(
‰eq
,

656 
pRdEdgesPowî
,

657 
	`IS_CHAN_2GHZ
(
ch™
),

658 
AR5416_NUM_BAND_EDGES
);

660 i‡((
cfgCé
 & ~
CTL_MODE_M
Ë=
SD_NO_CTL
) {

661 
twi˚MaxEdgePowî
 = 
	`mö
(twiceMaxEdgePower,

662 
twi˚MöEdgePowî
);

664 
twi˚MaxEdgePowî
 = 
twi˚MöEdgePowî
;

670 
möCéPowî
 = (
u8
)
	`mö
(
twi˚MaxEdgePowî
, 
sˇÀdPowî
);

673 
pCéMode
[
˘lMode
]) {

674 
CTL_11B
:

675 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîCck
.
tPow2x
); i++) {

676 
èrgëPowîCck
.
tPow2x
[
i
] =

677 (
u8
)
	`mö
((
u16
)
èrgëPowîCck
.
tPow2x
[
i
],

678 
möCéPowî
);

681 
CTL_11A
:

682 
CTL_11G
:

683 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîOfdm
.
tPow2x
); i++) {

684 
èrgëPowîOfdm
.
tPow2x
[
i
] =

685 (
u8
)
	`mö
((
u16
)
èrgëPowîOfdm
.
tPow2x
[
i
],

686 
möCéPowî
);

689 
CTL_5GHT20
:

690 
CTL_2GHT20
:

691 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt20
.
tPow2x
); i++) {

692 
èrgëPowîHt20
.
tPow2x
[
i
] =

693 (
u8
)
	`mö
((
u16
)
èrgëPowîHt20
.
tPow2x
[
i
],

694 
möCéPowî
);

697 
CTL_11B_EXT
:

698 
èrgëPowîCckExt
.
tPow2x
[0] =

699 (
u8
)
	`mö
((
u16
)
èrgëPowîCckExt
.
tPow2x
[0],

700 
möCéPowî
);

702 
CTL_11A_EXT
:

703 
CTL_11G_EXT
:

704 
èrgëPowîOfdmExt
.
tPow2x
[0] =

705 (
u8
)
	`mö
((
u16
)
èrgëPowîOfdmExt
.
tPow2x
[0],

706 
möCéPowî
);

708 
CTL_5GHT40
:

709 
CTL_2GHT40
:

710 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt40
.
tPow2x
); i++) {

711 
èrgëPowîHt40
.
tPow2x
[
i
] =

712 (
u8
)
	`mö
((
u16
)
èrgëPowîHt40
.
tPow2x
[
i
],

713 
möCéPowî
);

723 
øãsAºay
[
øã6mb
] =

724 
øãsAºay
[
øã9mb
] =

725 
øãsAºay
[
øã12mb
] =

726 
øãsAºay
[
øã18mb
] =

727 
øãsAºay
[
øã24mb
] = 
èrgëPowîOfdm
.
tPow2x
[0];

729 
øãsAºay
[
øã36mb
] = 
èrgëPowîOfdm
.
tPow2x
[1];

730 
øãsAºay
[
øã48mb
] = 
èrgëPowîOfdm
.
tPow2x
[2];

731 
øãsAºay
[
øã54mb
] = 
èrgëPowîOfdm
.
tPow2x
[3];

732 
øãsAºay
[
øãXr
] = 
èrgëPowîOfdm
.
tPow2x
[0];

734 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt20
.
tPow2x
); i++)

735 
øãsAºay
[
øãHt20_0
 + 
i
] = 
èrgëPowîHt20
.
tPow2x
[i];

737 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

738 
øãsAºay
[
øã1l
] = 
èrgëPowîCck
.
tPow2x
[0];

739 
øãsAºay
[
øã2s
] =

740 
øãsAºay
[
øã2l
] = 
èrgëPowîCck
.
tPow2x
[1];

741 
øãsAºay
[
øã5_5s
] =

742 
øãsAºay
[
øã5_5l
] = 
èrgëPowîCck
.
tPow2x
[2];

743 
øãsAºay
[
øã11s
] =

744 
øãsAºay
[
øã11l
] = 
èrgëPowîCck
.
tPow2x
[3];

746 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

747 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt40
.
tPow2x
); i++)

748 
øãsAºay
[
øãHt40_0
 + 
i
] = 
èrgëPowîHt40
.
tPow2x
[i];

750 
øãsAºay
[
øãDupOfdm
] = 
èrgëPowîHt40
.
tPow2x
[0];

751 
øãsAºay
[
øãDupCck
] = 
èrgëPowîHt40
.
tPow2x
[0];

752 
øãsAºay
[
øãExtOfdm
] = 
èrgëPowîOfdmExt
.
tPow2x
[0];

754 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

755 
øãsAºay
[
øãExtCck
] = 
èrgëPowîCckExt
.
tPow2x
[0];

758 #unde‡
CMP_CTL


759 #unde‡
CMP_NO_CTL


760 
	}
}

762 
	$©h9k_hw_¨9287_£t_txpowî
(
©h_hw
 *
ah
,

763 
©h9k_ch™√l
 *
ch™
, 
u16
 
cfgCé
,

764 
u8
 
twi˚A¡í«Redu˘i⁄
,

765 
u8
 
powîLimô
, 
boﬁ
 
ã°
)

767 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

768 
¨9287_ì¥om
 *
pEïD©a
 = &
ah
->
ì¥om
.
m≠9287
;

769 
modÆ_ìp_¨9287_hódî
 *
pModÆ
 = &
pEïD©a
->
modÆHódî
;

770 
öt16_t
 
øãsAºay
[
Ar5416R©eSize
];

771 
u8
 
ht40PowîIncF‹Pdadc
 = 2;

772 
i
;

774 
	`mem£t
(
øãsAºay
, 0, (ratesArray));

776 i‡((
pEïD©a
->
ba£EïHódî
.
vîsi⁄
 & 
AR9287_EEP_VER_MINOR_MASK
) >=

777 
AR9287_EEP_MINOR_VER_2
)

778 
ht40PowîIncF‹Pdadc
 = 
pModÆ
->ht40PowerIncForPdadc;

780 
	`©h9k_hw_£t_¨9287_powî_≥r_øã_èbÀ
(
ah
, 
ch™
,

781 &
øãsAºay
[0], 
cfgCé
,

782 
twi˚A¡í«Redu˘i⁄
,

783 
powîLimô
);

785 
	`©h9k_hw_£t_¨9287_powî_ˇl_èbÀ
(
ah
, 
ch™
);

787 
ªguœt‹y
->
max_powî_Àvñ
 = 0;

788 
i
 = 0; i < 
	`ARRAY_SIZE
(
øãsAºay
); i++) {

789 i‡(
øãsAºay
[
i
] > 
MAX_RATE_POWER
)

790 
øãsAºay
[
i
] = 
MAX_RATE_POWER
;

792 i‡(
øãsAºay
[
i
] > 
ªguœt‹y
->
max_powî_Àvñ
)

793 
ªguœt‹y
->
max_powî_Àvñ
 = 
øãsAºay
[
i
];

796 
	`©h9k_hw_upd©e_ªguœt‹y_maxpowî
(
ah
);

798 i‡(
ã°
)

801 
i
 = 0; i < 
Ar5416R©eSize
; i++)

802 
øãsAºay
[
i
] -
AR9287_PWR_TABLE_OFFSET_DB
 * 2;

804 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

807 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE1
,

808 
	`ATH9K_POW_SM
(
øãsAºay
[
øã18mb
], 24)

809 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã12mb
], 16)

810 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã9mb
], 8)

811 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã6mb
], 0));

813 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE2
,

814 
	`ATH9K_POW_SM
(
øãsAºay
[
øã54mb
], 24)

815 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã48mb
], 16)

816 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã36mb
], 8)

817 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã24mb
], 0));

820 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

821 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE3
,

822 
	`ATH9K_POW_SM
(
øãsAºay
[
øã2s
], 24)

823 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã2l
], 16)

824 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãXr
], 8)

825 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã1l
], 0));

826 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE4
,

827 
	`ATH9K_POW_SM
(
øãsAºay
[
øã11s
], 24)

828 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã11l
], 16)

829 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã5_5s
], 8)

830 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã5_5l
], 0));

834 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE5
,

835 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_3
], 24)

836 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_2
], 16)

837 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_1
], 8)

838 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_0
], 0));

840 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE6
,

841 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_7
], 24)

842 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_6
], 16)

843 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_5
], 8)

844 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_4
], 0));

847 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

848 i‡(
	`©h9k_hw_¨9287_gë_ì¥om
(
ah
, 
EEP_OL_PWRCTRL
)) {

849 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE7
,

850 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_3
], 24)

851 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_2
], 16)

852 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_1
], 8)

853 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_0
], 0));

855 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE8
,

856 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_7
], 24)

857 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_6
], 16)

858 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_5
], 8)

859 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_4
], 0));

861 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE7
,

862 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_3
] +

863 
ht40PowîIncF‹Pdadc
, 24)

864 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_2
] +

865 
ht40PowîIncF‹Pdadc
, 16)

866 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_1
] +

867 
ht40PowîIncF‹Pdadc
, 8)

868 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_0
] +

869 
ht40PowîIncF‹Pdadc
, 0));

871 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE8
,

872 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_7
] +

873 
ht40PowîIncF‹Pdadc
, 24)

874 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_6
] +

875 
ht40PowîIncF‹Pdadc
, 16)

876 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_5
] +

877 
ht40PowîIncF‹Pdadc
, 8)

878 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_4
] +

879 
ht40PowîIncF‹Pdadc
, 0));

883 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE9
,

884 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtOfdm
], 24)

885 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtCck
], 16)

886 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupOfdm
], 8)

887 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupCck
], 0));

891 i‡(
ah
->
çc_íabÀd
) {

892 
ht40_dñè
;

894 
ht40_dñè
 = (
	`IS_CHAN_HT40
(
ch™
)Ë? 
ht40PowîIncF‹Pdadc
 : 0;

895 
	`¨5008_hw_öô_øã_txpowî
(
ah
, 
øãsAºay
, 
ch™
, 
ht40_dñè
);

897 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE_MAX
,

898 
MAX_RATE_POWER
 | 
AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE
);

901 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE_MAX
, 
MAX_RATE_POWER
);

904 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

905 
	}
}

907 
	$©h9k_hw_¨9287_£t_bﬂrd_vÆues
(
©h_hw
 *
ah
,

908 
©h9k_ch™√l
 *
ch™
)

910 
¨9287_ì¥om
 *
ìp
 = &
ah
->
ì¥om
.
m≠9287
;

911 
modÆ_ìp_¨9287_hódî
 *
pModÆ
 = &
ìp
->
modÆHódî
;

912 
u32
 
ªgChaöOff£t
, 
ªgvÆ
;

913 
u8
 
txRxAâíLoˇl
;

914 
i
;

916 
pModÆ
 = &
ìp
->
modÆHódî
;

918 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_COM
, 
pModÆ
->
™tCålComm⁄
);

920 
i
 = 0; i < 
AR9287_MAX_CHAINS
; i++) {

921 
ªgChaöOff£t
 = 
i
 * 0x1000;

923 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_CHAIN_0
 + 
ªgChaöOff£t
,

924 
pModÆ
->
™tCålChaö
[
i
]);

926 
	`REG_WRITE
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0Ë+ 
ªgChaöOff£t
,

927 (
	`REG_READ
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0Ë+ 
ªgChaöOff£t
)

928 & ~(
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
 |

929 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
)) |

930 
	`SM
(
pModÆ
->
iqCÆICh
[
i
],

931 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
) |

932 
	`SM
(
pModÆ
->
iqCÆQCh
[
i
],

933 
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
));

935 
txRxAâíLoˇl
 = 
pModÆ
->
txRxAâíCh
[
i
];

937 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

938 
AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN
,

939 
pModÆ
->
bswM¨gö
[
i
]);

940 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

941 
AR_PHY_GAIN_2GHZ_XATTEN1_DB
,

942 
pModÆ
->
bswAâí
[
i
]);

943 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RXGAIN
 + 
ªgChaöOff£t
,

944 
AR9280_PHY_RXGAIN_TXRX_ATTEN
,

945 
txRxAâíLoˇl
);

946 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RXGAIN
 + 
ªgChaöOff£t
,

947 
AR9280_PHY_RXGAIN_TXRX_MARGIN
,

948 
pModÆ
->
rxTxM¨göCh
[
i
]);

952 i‡(
	`IS_CHAN_HT40
(
ch™
))

953 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SETTLING
,

954 
AR_PHY_SETTLING_SWITCH
, 
pModÆ
->
swSëéeHt40
);

956 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SETTLING
,

957 
AR_PHY_SETTLING_SWITCH
, 
pModÆ
->
swôchSëéög
);

959 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_DESIRED_SZ
,

960 
AR_PHY_DESIRED_SZ_ADC
, 
pModÆ
->
adcDesúedSize
);

962 
	`REG_WRITE
(
ah
, 
AR_PHY_RF_CTL4
,

963 
	`SM
(
pModÆ
->
txEndToX∑Off
, 
AR_PHY_RF_CTL4_TX_END_XPAA_OFF
)

964 | 
	`SM
(
pModÆ
->
txEndToX∑Off
, 
AR_PHY_RF_CTL4_TX_END_XPAB_OFF
)

965 | 
	`SM
(
pModÆ
->
txFømeToX∑On
, 
AR_PHY_RF_CTL4_FRAME_XPAA_ON
)

966 | 
	`SM
(
pModÆ
->
txFømeToX∑On
, 
AR_PHY_RF_CTL4_FRAME_XPAB_ON
));

968 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL3
,

969 
AR_PHY_TX_END_TO_A2_RX_ON
, 
pModÆ
->
txEndToRxOn
);

971 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCA
,

972 
AR9280_PHY_CCA_THRESH62
, 
pModÆ
->
thªsh62
);

973 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_CCA0
,

974 
AR_PHY_EXT_CCA0_THRESH62
, 
pModÆ
->
thªsh62
);

976 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR9287_AN_RF2G3_CH0
);

977 
ªgvÆ
 &~(
AR9287_AN_RF2G3_DB1
 |

978 
AR9287_AN_RF2G3_DB2
 |

979 
AR9287_AN_RF2G3_OB_CCK
 |

980 
AR9287_AN_RF2G3_OB_PSK
 |

981 
AR9287_AN_RF2G3_OB_QAM
 |

982 
AR9287_AN_RF2G3_OB_PAL_OFF
);

983 
ªgvÆ
 |(
	`SM
(
pModÆ
->
db1
, 
AR9287_AN_RF2G3_DB1
) |

984 
	`SM
(
pModÆ
->
db2
, 
AR9287_AN_RF2G3_DB2
) |

985 
	`SM
(
pModÆ
->
ob_cck
, 
AR9287_AN_RF2G3_OB_CCK
) |

986 
	`SM
(
pModÆ
->
ob_psk
, 
AR9287_AN_RF2G3_OB_PSK
) |

987 
	`SM
(
pModÆ
->
ob_qam
, 
AR9287_AN_RF2G3_OB_QAM
) |

988 
	`SM
(
pModÆ
->
ob_∑l_off
, 
AR9287_AN_RF2G3_OB_PAL_OFF
));

990 
	`©h9k_hw_™Æog_shi·_ªgwrôe
(
ah
, 
AR9287_AN_RF2G3_CH0
, 
ªgvÆ
);

992 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR9287_AN_RF2G3_CH1
);

993 
ªgvÆ
 &~(
AR9287_AN_RF2G3_DB1
 |

994 
AR9287_AN_RF2G3_DB2
 |

995 
AR9287_AN_RF2G3_OB_CCK
 |

996 
AR9287_AN_RF2G3_OB_PSK
 |

997 
AR9287_AN_RF2G3_OB_QAM
 |

998 
AR9287_AN_RF2G3_OB_PAL_OFF
);

999 
ªgvÆ
 |(
	`SM
(
pModÆ
->
db1
, 
AR9287_AN_RF2G3_DB1
) |

1000 
	`SM
(
pModÆ
->
db2
, 
AR9287_AN_RF2G3_DB2
) |

1001 
	`SM
(
pModÆ
->
ob_cck
, 
AR9287_AN_RF2G3_OB_CCK
) |

1002 
	`SM
(
pModÆ
->
ob_psk
, 
AR9287_AN_RF2G3_OB_PSK
) |

1003 
	`SM
(
pModÆ
->
ob_qam
, 
AR9287_AN_RF2G3_OB_QAM
) |

1004 
	`SM
(
pModÆ
->
ob_∑l_off
, 
AR9287_AN_RF2G3_OB_PAL_OFF
));

1006 
	`©h9k_hw_™Æog_shi·_ªgwrôe
(
ah
, 
AR9287_AN_RF2G3_CH1
, 
ªgvÆ
);

1008 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL2
,

1009 
AR_PHY_TX_END_DATA_START
, 
pModÆ
->
txFømeToD©aSèπ
);

1010 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL2
,

1011 
AR_PHY_TX_END_PA_ON
, 
pModÆ
->
txFømeToPaOn
);

1013 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR9287_AN_TOP2
,

1014 
AR9287_AN_TOP2_XPABIAS_LVL
,

1015 
AR9287_AN_TOP2_XPABIAS_LVL_S
,

1016 
pModÆ
->
x∑BüsLvl
);

1017 
	}
}

1019 
u16
 
	$©h9k_hw_¨9287_gë_•ur_ch™√l
(
©h_hw
 *
ah
,

1020 
u16
 
i
, 
boﬁ
 
is2GHz
)

1022  
ah
->
ì¥om
.
m≠9287
.
modÆHódî
.
•urCh™s
[
i
].
•urCh™
;

1023 
	}
}

1025 c⁄° 
ì¥om_›s
 
	gìp_¨9287_›s
 = {

1026 .
check_ì¥om
 = 
©h9k_hw_¨9287_check_ì¥om
,

1027 .
	ggë_ì¥om
 = 
©h9k_hw_¨9287_gë_ì¥om
,

1028 .
	gfûl_ì¥om
 = 
©h9k_hw_¨9287_fûl_ì¥om
,

1029 .
	gdump_ì¥om
 = 
©h9k_hw_¨9287_dump_ì¥om
,

1030 .
	ggë_ì¥om_vî
 = 
©h9k_hw_¨9287_gë_ì¥om_vî
,

1031 .
	ggë_ì¥om_ªv
 = 
©h9k_hw_¨9287_gë_ì¥om_ªv
,

1032 .
	g£t_bﬂrd_vÆues
 = 
©h9k_hw_¨9287_£t_bﬂrd_vÆues
,

1033 .
	g£t_txpowî
 = 
©h9k_hw_¨9287_£t_txpowî
,

1034 .
	ggë_•ur_ch™√l
 = 
©h9k_hw_¨9287_gë_•ur_ch™√l


	@eeprom_def.c

17 
	~<asm/u«lig√d.h
>

18 
	~"hw.h
"

19 
	~"¨9002_phy.h
"

21 
	$©h9k_gë_txgaö_ödex
(
©h_hw
 *
ah
,

22 
©h9k_ch™√l
 *
ch™
,

23 
ˇlD©aPîFªqOpLo›
 *
øwD©a£tOpLo›
,

24 
u8
 *
ˇlCh™s
, 
u16
 
avaûPõrs
, u8 *
pwr
, u8 *
pcdacIdx
)

26 
u8
 
pcdac
, 
i
 = 0;

27 
u16
 
idxL
 = 0, 
idxR
 = 0, 
numPõrs
;

28 
boﬁ
 
m©ch
;

29 
ch™_˚¡îs
 
˚¡îs
;

31 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

33 
numPõrs
 = 0;ÇumPõr†< 
avaûPõrs
;ÇumPiers++)

34 i‡(
ˇlCh™s
[
numPõrs
] =
AR5416_BCHAN_UNUSED
)

37 
m©ch
 = 
	`©h9k_hw_gë_lowî_uµî_ödex
(

38 (
u8
)
	`FREQ2FBIN
(
˚¡îs
.
sy¡h_˚¡î
, 
	`IS_CHAN_2GHZ
(
ch™
)),

39 
ˇlCh™s
, 
numPõrs
, &
idxL
, &
idxR
);

40 i‡(
m©ch
) {

41 
pcdac
 = 
øwD©a£tOpLo›
[
idxL
].pcdac[0][0];

42 *
pwr
 = 
øwD©a£tOpLo›
[
idxL
].
pwrPdg
[0][0];

44 
pcdac
 = 
øwD©a£tOpLo›
[
idxR
].pcdac[0][0];

45 *
pwr
 = (
øwD©a£tOpLo›
[
idxL
].
pwrPdg
[0][0] +

46 
øwD©a£tOpLo›
[
idxR
].
pwrPdg
[0][0])/2;

49 
pcdac
 > 
ah
->
‹igöÆGaö
[
i
] &&

50 
i
 < (
AR9280_TX_GAIN_TABLE_SIZE
 - 1))

51 
i
++;

53 *
pcdacIdx
 = 
i
;

54 
	}
}

56 
	$©h9k_ﬁc_gë_pdadcs
(
©h_hw
 *
ah
,

57 
u32
 
öôTxGaö
,

58 
txPowî
,

59 
u8
 *
pPDADCVÆues
)

61 
u32
 
i
;

62 
u32
 
off£t
;

64 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_PWRCTRL6_0
,

65 
AR_PHY_TX_PWRCTRL_ERR_EST_MODE
, 3);

66 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_PWRCTRL6_1
,

67 
AR_PHY_TX_PWRCTRL_ERR_EST_MODE
, 3);

69 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_PWRCTRL7
,

70 
AR_PHY_TX_PWRCTRL_INIT_TX_GAIN
, 
öôTxGaö
);

72 
off£t
 = 
txPowî
;

73 
i
 = 0; i < 
AR5416_NUM_PDADC_VALUES
; i++)

74 i‡(
i
 < 
off£t
)

75 
pPDADCVÆues
[
i
] = 0x0;

77 
pPDADCVÆues
[
i
] = 0xFF;

78 
	}
}

80 
	$©h9k_hw_def_gë_ì¥om_vî
(
©h_hw
 *
ah
)

82  ((
ah
->
ì¥om
.
def
.
ba£EïHódî
.
vîsi⁄
 >> 12) & 0xF);

83 
	}
}

85 
	$©h9k_hw_def_gë_ì¥om_ªv
(
©h_hw
 *
ah
)

87  ((
ah
->
ì¥om
.
def
.
ba£EïHódî
.
vîsi⁄
) & 0xFFF);

88 
	}
}

90 
	#SIZE_EEPROM_DEF
 ((
¨5416_ì¥om_def
Ë/ (
u16
))

	)

92 
boﬁ
 
	$__©h9k_hw_def_fûl_ì¥om
(
©h_hw
 *
ah
)

94 
u16
 *
ìp_d©a
 = (u16 *)&
ah
->
ì¥om
.
def
;

95 
addr
, 
¨5416_ìp_°¨t_loc
 = 0x100;

97 
addr
 = 0;ádd∏< 
SIZE_EEPROM_DEF
;áddr++) {

98 i‡(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
addr
 + 
¨5416_ìp_°¨t_loc
,

99 
ìp_d©a
))

100  
Ál£
;

101 
ìp_d©a
++;

103  
åue
;

104 
	}
}

106 
boﬁ
 
	$__©h9k_hw_usb_def_fûl_ì¥om
(
©h_hw
 *
ah
)

108 
u16
 *
ìp_d©a
 = (u16 *)&
ah
->
ì¥om
.
def
;

110 
	`©h9k_hw_usb_gí_fûl_ì¥om
(
ah
, 
ìp_d©a
,

111 0x100, 
SIZE_EEPROM_DEF
);

112  
åue
;

113 
	}
}

115 
boﬁ
 
	$©h9k_hw_def_fûl_ì¥om
(
©h_hw
 *
ah
)

117 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

119 i‡(!
	`©h9k_hw_u£_Êash
(
ah
)) {

120 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "Reading from EEPROM,Çot flash\n");

123 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_USB
)

124  
	`__©h9k_hw_usb_def_fûl_ì¥om
(
ah
);

126  
	`__©h9k_hw_def_fûl_ì¥om
(
ah
);

127 
	}
}

129 #unde‡
SIZE_EEPROM_DEF


131 #i‡
deföed
(
CONFIG_ATH9K_DEBUGFS
Ë|| deföed(
CONFIG_ATH9K_HTC_DEBUGFS
)

132 
u32
 
	$©h9k_def_dump_modÆ_ì¥om
(*
buf
, 
u32
 
Àn
, u32 
size
,

133 
modÆ_ìp_hódî
 *
modÆ_hdr
)

135 
	`PR_EEP
("Chaö0 A¡. C⁄åﬁ", 
modÆ_hdr
->
™tCålChaö
[0]);

136 
	`PR_EEP
("Chaö1 A¡. C⁄åﬁ", 
modÆ_hdr
->
™tCålChaö
[1]);

137 
	`PR_EEP
("Chaö2 A¡. C⁄åﬁ", 
modÆ_hdr
->
™tCålChaö
[2]);

138 
	`PR_EEP
("A¡. Comm⁄ C⁄åﬁ", 
modÆ_hdr
->
™tCålComm⁄
);

139 
	`PR_EEP
("Chaö0 A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaöCh
[0]);

140 
	`PR_EEP
("Chaö1 A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaöCh
[1]);

141 
	`PR_EEP
("Chaö2 A¡. Gaö", 
modÆ_hdr
->
™ã¬aGaöCh
[2]);

142 
	`PR_EEP
("Swôch Sëée", 
modÆ_hdr
->
swôchSëéög
);

143 
	`PR_EEP
("Chaö0 TxRxAâí", 
modÆ_hdr
->
txRxAâíCh
[0]);

144 
	`PR_EEP
("Chaö1 TxRxAâí", 
modÆ_hdr
->
txRxAâíCh
[1]);

145 
	`PR_EEP
("Chaö2 TxRxAâí", 
modÆ_hdr
->
txRxAâíCh
[2]);

146 
	`PR_EEP
("Chaö0 RxTxM¨gö", 
modÆ_hdr
->
rxTxM¨göCh
[0]);

147 
	`PR_EEP
("Chaö1 RxTxM¨gö", 
modÆ_hdr
->
rxTxM¨göCh
[1]);

148 
	`PR_EEP
("Chaö2 RxTxM¨gö", 
modÆ_hdr
->
rxTxM¨göCh
[2]);

149 
	`PR_EEP
("ADC Desúed size", 
modÆ_hdr
->
adcDesúedSize
);

150 
	`PR_EEP
("PGA Desúed size", 
modÆ_hdr
->
pgaDesúedSize
);

151 
	`PR_EEP
("Chaö0 x ®Gaö", 
modÆ_hdr
->
x aGaöCh
[0]);

152 
	`PR_EEP
("Chaö1 x ®Gaö", 
modÆ_hdr
->
x aGaöCh
[1]);

153 
	`PR_EEP
("Chaö2 x ®Gaö", 
modÆ_hdr
->
x aGaöCh
[2]);

154 
	`PR_EEP
("txEndToX∑Off", 
modÆ_hdr
->
txEndToX∑Off
);

155 
	`PR_EEP
("txEndToRxOn", 
modÆ_hdr
->
txEndToRxOn
);

156 
	`PR_EEP
("txFømeToX∑On", 
modÆ_hdr
->
txFømeToX∑On
);

157 
	`PR_EEP
("CCA Thªshﬁd)", 
modÆ_hdr
->
thªsh62
);

158 
	`PR_EEP
("Chaö0 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[0]);

159 
	`PR_EEP
("Chaö1 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[1]);

160 
	`PR_EEP
("Chaö2 NF Thªshﬁd", 
modÆ_hdr
->
noi£Flo‹ThªshCh
[2]);

161 
	`PR_EEP
("xpdGaö", 
modÆ_hdr
->
xpdGaö
);

162 
	`PR_EEP
("Exã∫Æ PD", 
modÆ_hdr
->
xpd
);

163 
	`PR_EEP
("Chaö0 I C€fficõ¡", 
modÆ_hdr
->
iqCÆICh
[0]);

164 
	`PR_EEP
("Chaö1 I C€fficõ¡", 
modÆ_hdr
->
iqCÆICh
[1]);

165 
	`PR_EEP
("Chaö2 I C€fficõ¡", 
modÆ_hdr
->
iqCÆICh
[2]);

166 
	`PR_EEP
("Chaö0 Q C€fficõ¡", 
modÆ_hdr
->
iqCÆQCh
[0]);

167 
	`PR_EEP
("Chaö1 Q C€fficõ¡", 
modÆ_hdr
->
iqCÆQCh
[1]);

168 
	`PR_EEP
("Chaö2 Q C€fficõ¡", 
modÆ_hdr
->
iqCÆQCh
[2]);

169 
	`PR_EEP
("pdGaöOvîœp", 
modÆ_hdr
->
pdGaöOvîœp
);

170 
	`PR_EEP
("Chaö0 OuçutBüs", 
modÆ_hdr
->
ob
);

171 
	`PR_EEP
("Chaö0 DrivîBüs", 
modÆ_hdr
->
db
);

172 
	`PR_EEP
("xPA Bü†Levñ", 
modÆ_hdr
->
x∑BüsLvl
);

173 
	`PR_EEP
("2chaöÖw∏de¸ó£", 
modÆ_hdr
->
pwrDe¸ó£F‹2Chaö
);

174 
	`PR_EEP
("3chaöÖw∏de¸ó£", 
modÆ_hdr
->
pwrDe¸ó£F‹3Chaö
);

175 
	`PR_EEP
("txFømeToD©aSèπ", 
modÆ_hdr
->
txFømeToD©aSèπ
);

176 
	`PR_EEP
("txFømeToPaOn", 
modÆ_hdr
->
txFømeToPaOn
);

177 
	`PR_EEP
("HT40 Powî Inc.", 
modÆ_hdr
->
ht40PowîIncF‹Pdadc
);

178 
	`PR_EEP
("Chaö0 bswAâí", 
modÆ_hdr
->
bswAâí
[0]);

179 
	`PR_EEP
("Chaö1 bswAâí", 
modÆ_hdr
->
bswAâí
[1]);

180 
	`PR_EEP
("Chaö2 bswAâí", 
modÆ_hdr
->
bswAâí
[2]);

181 
	`PR_EEP
("Chaö0 bswM¨gö", 
modÆ_hdr
->
bswM¨gö
[0]);

182 
	`PR_EEP
("Chaö1 bswM¨gö", 
modÆ_hdr
->
bswM¨gö
[1]);

183 
	`PR_EEP
("Chaö2 bswM¨gö", 
modÆ_hdr
->
bswM¨gö
[2]);

184 
	`PR_EEP
("HT40 Swôch Sëée", 
modÆ_hdr
->
swSëéeHt40
);

185 
	`PR_EEP
("Chaö0 x©ãn2Db", 
modÆ_hdr
->
x©ãn2Db
[0]);

186 
	`PR_EEP
("Chaö1 x©ãn2Db", 
modÆ_hdr
->
x©ãn2Db
[1]);

187 
	`PR_EEP
("Chaö2 x©ãn2Db", 
modÆ_hdr
->
x©ãn2Db
[2]);

188 
	`PR_EEP
("Chaö0 x©ãn2M¨gö", 
modÆ_hdr
->
x©ãn2M¨gö
[0]);

189 
	`PR_EEP
("Chaö1 x©ãn2M¨gö", 
modÆ_hdr
->
x©ãn2M¨gö
[1]);

190 
	`PR_EEP
("Chaö2 x©ãn2M¨gö", 
modÆ_hdr
->
x©ãn2M¨gö
[2]);

191 
	`PR_EEP
("Chaö1 OuçutBüs", 
modÆ_hdr
->
ob_ch1
);

192 
	`PR_EEP
("Chaö1 DrivîBüs", 
modÆ_hdr
->
db_ch1
);

193 
	`PR_EEP
("LNA C⁄åﬁ", 
modÆ_hdr
->
 a_˘l
);

194 
	`PR_EEP
("XPA Bü†Fªq0", 
modÆ_hdr
->
x∑BüsLvlFªq
[0]);

195 
	`PR_EEP
("XPA Bü†Fªq1", 
modÆ_hdr
->
x∑BüsLvlFªq
[1]);

196 
	`PR_EEP
("XPA Bü†Fªq2", 
modÆ_hdr
->
x∑BüsLvlFªq
[2]);

198  
Àn
;

199 
	}
}

201 
u32
 
	$©h9k_hw_def_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

202 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

204 
¨5416_ì¥om_def
 *
ìp
 = &
ah
->
ì¥om
.
def
;

205 
ba£_ìp_hódî
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

207 i‡(!
dump_ba£_hdr
) {

208 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

210 
Àn
 = 
	`©h9k_def_dump_modÆ_ì¥om
(
buf
,Üí, 
size
,

211 &
ìp
->
modÆHódî
[0]);

212 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

214 
Àn
 = 
	`©h9k_def_dump_modÆ_ì¥om
(
buf
,Üí, 
size
,

215 &
ìp
->
modÆHódî
[1]);

216 
out
;

219 
	`PR_EEP
("Maj‹ Vîsi⁄", 
pBa£
->
vîsi⁄
 >> 12);

220 
	`PR_EEP
("Mö‹ Vîsi⁄", 
pBa£
->
vîsi⁄
 & 0xFFF);

221 
	`PR_EEP
("Checksum", 
pBa£
->
checksum
);

222 
	`PR_EEP
("Lígth", 
pBa£
->
Àngth
);

223 
	`PR_EEP
("RegDomaö1", 
pBa£
->
ªgDmn
[0]);

224 
	`PR_EEP
("RegDomaö2", 
pBa£
->
ªgDmn
[1]);

225 
	`PR_EEP
("TX Mask", 
pBa£
->
txMask
);

226 
	`PR_EEP
("RX Mask", 
pBa£
->
rxMask
);

227 
	`PR_EEP
("AŒow 5GHz", !!(
pBa£
->
›C≠Fœgs
 & 
AR5416_OPFLAGS_11A
));

228 
	`PR_EEP
("AŒow 2GHz", !!(
pBa£
->
›C≠Fœgs
 & 
AR5416_OPFLAGS_11G
));

229 
	`PR_EEP
("DißbÀ 2GHz HT20", !!(
pBa£
->
›C≠Fœgs
 &

230 
AR5416_OPFLAGS_N_2G_HT20
));

231 
	`PR_EEP
("DißbÀ 2GHz HT40", !!(
pBa£
->
›C≠Fœgs
 &

232 
AR5416_OPFLAGS_N_2G_HT40
));

233 
	`PR_EEP
("DißbÀ 5Ghz HT20", !!(
pBa£
->
›C≠Fœgs
 &

234 
AR5416_OPFLAGS_N_5G_HT20
));

235 
	`PR_EEP
("DißbÀ 5Ghz HT40", !!(
pBa£
->
›C≠Fœgs
 &

236 
AR5416_OPFLAGS_N_5G_HT40
));

237 
	`PR_EEP
("Big Endün", !!(
pBa£
->
ìpMisc
 & 0x01));

238 
	`PR_EEP
("CÆ Bö Maj‹ Vî", (
pBa£
->
böBuûdNumbî
 >> 24) & 0xFF);

239 
	`PR_EEP
("CÆ Bö Mö‹ Vî", (
pBa£
->
böBuûdNumbî
 >> 16) & 0xFF);

240 
	`PR_EEP
("CÆ Bö Buûd", (
pBa£
->
böBuûdNumbî
 >> 8) & 0xFF);

241 
	`PR_EEP
("O≥nLo› Powî Cål", 
pBa£
->
›íLo›PwrC¡l
);

243 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%20s : %pM\n", "MacAddress",

244 
pBa£
->
macAddr
);

246 
out
:

247 i‡(
Àn
 > 
size
)

248 
Àn
 = 
size
;

250  
Àn
;

251 
	}
}

253 
u32
 
	$©h9k_hw_def_dump_ì¥om
(
©h_hw
 *
ah
, 
boﬁ
 
dump_ba£_hdr
,

254 
u8
 *
buf
, 
u32
 
Àn
, u32 
size
)

257 
	}
}

261 
	$©h9k_hw_def_check_ì¥om
(
©h_hw
 *
ah
)

263 
¨5416_ì¥om_def
 *
ìp
 = &
ah
->
ì¥om
.
def
;

264 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

265 
u16
 *
ìpd©a
, 
ãmp
, 
magic
;

266 
u32
 
sum
 = 0, 
ñ
;

267 
boﬁ
 
√ed_sw≠
 = 
Ál£
;

268 
i
, 
addr
, 
size
;

270 i‡(!
	`©h9k_hw_nvøm_ªad
(
ah
, 
AR5416_EEPROM_MAGIC_OFFSET
, &
magic
)) {

271 
	`©h_îr
(
comm⁄
, "Reading Magic # failed\n");

272  
Ál£
;

275 i‡(
	`swab16
(
magic
Ë=
AR5416_EEPROM_MAGIC
 &&

276 !(
ah
->
ah_Êags
 & 
AH_NO_EEP_SWAP
)) {

277 
size
 = (
¨5416_ì¥om_def
);

278 
√ed_sw≠
 = 
åue
;

279 
ìpd©a
 = (
u16
 *Ë(&
ah
->
ì¥om
);

281 
addr
 = 0;ádd∏< 
size
 / (
u16
);áddr++) {

282 
ãmp
 = 
	`swab16
(*
ìpd©a
);

283 *
ìpd©a
 = 
ãmp
;

284 
ìpd©a
++;

288 
	`©h_dbg
(
comm⁄
, 
EEPROM
, "need_swap = %s\n",

289 
√ed_sw≠
 ? "True" : "False");

291 i‡(
√ed_sw≠
)

292 
ñ
 = 
	`swab16
(
ah
->
ì¥om
.
def
.
ba£EïHódî
.
Àngth
);

294 
ñ
 = 
ah
->
ì¥om
.
def
.
ba£EïHódî
.
Àngth
;

296 i‡(
ñ
 > (
¨5416_ì¥om_def
))

297 
ñ
 = (
¨5416_ì¥om_def
Ë/ (
u16
);

299 
ñ
 =É»/ (
u16
);

301 
ìpd©a
 = (
u16
 *)(&
ah
->
ì¥om
);

303 
i
 = 0; i < 
ñ
; i++)

304 
sum
 ^*
ìpd©a
++;

306 i‡(
√ed_sw≠
) {

307 
u32
 
öãgî
, 
j
;

308 
u16
 
w‹d
;

310 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

313 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
Àngth
);

314 
ìp
->
ba£EïHódî
.
Àngth
 = 
w‹d
;

316 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
checksum
);

317 
ìp
->
ba£EïHódî
.
checksum
 = 
w‹d
;

319 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
vîsi⁄
);

320 
ìp
->
ba£EïHódî
.
vîsi⁄
 = 
w‹d
;

322 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
ªgDmn
[0]);

323 
ìp
->
ba£EïHódî
.
ªgDmn
[0] = 
w‹d
;

325 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
ªgDmn
[1]);

326 
ìp
->
ba£EïHódî
.
ªgDmn
[1] = 
w‹d
;

328 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
rfSûít
);

329 
ìp
->
ba£EïHódî
.
rfSûít
 = 
w‹d
;

331 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
blueToŸhO±i⁄s
);

332 
ìp
->
ba£EïHódî
.
blueToŸhO±i⁄s
 = 
w‹d
;

334 
w‹d
 = 
	`swab16
(
ìp
->
ba£EïHódî
.
devi˚C≠
);

335 
ìp
->
ba£EïHódî
.
devi˚C≠
 = 
w‹d
;

337 
j
 = 0; j < 
	`ARRAY_SIZE
(
ìp
->
modÆHódî
); j++) {

338 
modÆ_ìp_hódî
 *
pModÆ
 =

339 &
ìp
->
modÆHódî
[
j
];

340 
öãgî
 = 
	`swab32
(
pModÆ
->
™tCålComm⁄
);

341 
pModÆ
->
™tCålComm⁄
 = 
öãgî
;

343 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

344 
öãgî
 = 
	`swab32
(
pModÆ
->
™tCålChaö
[
i
]);

345 
pModÆ
->
™tCålChaö
[
i
] = 
öãgî
;

347 
i
 = 0; i < 3; i++) {

348 
w‹d
 = 
	`swab16
(
pModÆ
->
x∑BüsLvlFªq
[
i
]);

349 
pModÆ
->
x∑BüsLvlFªq
[
i
] = 
w‹d
;

352 
i
 = 0; i < 
AR_EEPROM_MODAL_SPURS
; i++) {

353 
w‹d
 = 
	`swab16
(
pModÆ
->
•urCh™s
[
i
].
•urCh™
);

354 
pModÆ
->
•urCh™s
[
i
].
•urCh™
 = 
w‹d
;

359 i‡(
sum
 !0xfff‡|| 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
◊hË!
AR5416_EEP_VER
 ||

360 
ah
->
ìp_›s
->
	`gë_ì¥om_ªv
◊hË< 
AR5416_EEP_NO_BACK_VER
) {

361 
	`©h_îr
(
comm⁄
, "Bad EEPROM checksum 0x%x orÑevision 0x%04x\n",

362 
sum
, 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
(ah));

363  -
EINVAL
;

367 i‡((
ah
->
hw_vîsi⁄
.
devid
 =
AR9280_DEVID_PCI
) &&

368 ((
ìp
->
ba£EïHódî
.
vîsi⁄
 & 0xff) > 0x0a) &&

369 (
ìp
->
ba£EïHódî
.
pwd˛köd
 == 0))

370 
ah
->
√ed_™_t›2_fixup
 = 
åue
;

372 i‡((
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_USB
) &&

373 (
	`AR_SREV_9280
(
ah
)))

374 
ìp
->
modÆHódî
[0].
x∑BüsLvl
 = 0;

377 
	}
}

379 
u32
 
	$©h9k_hw_def_gë_ì¥om
(
©h_hw
 *
ah
,

380 
ì¥om_∑øm
 
∑øm
)

382 
¨5416_ì¥om_def
 *
ìp
 = &
ah
->
ì¥om
.
def
;

383 
modÆ_ìp_hódî
 *
pModÆ
 = 
ìp
->
modÆHódî
;

384 
ba£_ìp_hódî
 *
pBa£
 = &
ìp
->
ba£EïHódî
;

385 
b™d
 = 0;

387 
∑øm
) {

388 
EEP_NFTHRESH_5
:

389  
pModÆ
[0].
noi£Flo‹ThªshCh
[0];

390 
EEP_NFTHRESH_2
:

391  
pModÆ
[1].
noi£Flo‹ThªshCh
[0];

392 
EEP_MAC_LSW
:

393  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
);

394 
EEP_MAC_MID
:

395  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
 + 2);

396 
EEP_MAC_MSW
:

397  
	`gë_u«lig√d_be16
(
pBa£
->
macAddr
 + 4);

398 
EEP_REG_0
:

399  
pBa£
->
ªgDmn
[0];

400 
EEP_OP_CAP
:

401  
pBa£
->
devi˚C≠
;

402 
EEP_OP_MODE
:

403  
pBa£
->
›C≠Fœgs
;

404 
EEP_RF_SILENT
:

405  
pBa£
->
rfSûít
;

406 
EEP_OB_5
:

407  
pModÆ
[0].
ob
;

408 
EEP_DB_5
:

409  
pModÆ
[0].
db
;

410 
EEP_OB_2
:

411  
pModÆ
[1].
ob
;

412 
EEP_DB_2
:

413  
pModÆ
[1].
db
;

414 
EEP_MINOR_REV
:

415  
AR5416_VER_MASK
;

416 
EEP_TX_MASK
:

417  
pBa£
->
txMask
;

418 
EEP_RX_MASK
:

419  
pBa£
->
rxMask
;

420 
EEP_FSTCLK_5G
:

421  
pBa£
->
Á°Clk5g
;

422 
EEP_RXGAIN_TYPE
:

423  
pBa£
->
rxGaöTy≥
;

424 
EEP_TXGAIN_TYPE
:

425  
pBa£
->
txGaöTy≥
;

426 
EEP_OL_PWRCTRL
:

427 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_19
)

428  
pBa£
->
›íLo›PwrC¡l
 ? 
åue
 : 
Ál£
;

430  
Ál£
;

431 
EEP_RC_CHAIN_MASK
:

432 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_19
)

433  
pBa£
->
rcChaöMask
;

436 
EEP_DAC_HPWR_5G
:

437 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_20
)

438  
pBa£
->
dacHiPwrMode_5G
;

441 
EEP_FRAC_N_5G
:

442 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_22
)

443  
pBa£
->
‰ac_n_5g
;

446 
EEP_PWR_TABLE_OFFSET
:

447 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_21
)

448  
pBa£
->
pwr_èbÀ_off£t
;

450  
AR5416_PWR_TABLE_OFFSET_DB
;

451 
EEP_ANTENNA_GAIN_2G
:

452 
b™d
 = 1;

454 
EEP_ANTENNA_GAIN_5G
:

455  
	`max_t
(
u8
, max_t(u8,

456 
pModÆ
[
b™d
].
™ã¬aGaöCh
[0],

457 
pModÆ
[
b™d
].
™ã¬aGaöCh
[1]),

458 
pModÆ
[
b™d
].
™ã¬aGaöCh
[2]);

462 
	}
}

464 
	$©h9k_hw_def_£t_gaö
(
©h_hw
 *
ah
,

465 
modÆ_ìp_hódî
 *
pModÆ
,

466 
¨5416_ì¥om_def
 *
ìp
,

467 
u8
 
txRxAâíLoˇl
, 
ªgChaöOff£t
, 
i
)

469 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

470 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_3
) {

471 
txRxAâíLoˇl
 = 
pModÆ
->
txRxAâíCh
[
i
];

473 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

474 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

475 
AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN
,

476 
pModÆ
->
bswM¨gö
[
i
]);

477 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

478 
AR_PHY_GAIN_2GHZ_XATTEN1_DB
,

479 
pModÆ
->
bswAâí
[
i
]);

480 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

481 
AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN
,

482 
pModÆ
->
x©ãn2M¨gö
[
i
]);

483 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

484 
AR_PHY_GAIN_2GHZ_XATTEN2_DB
,

485 
pModÆ
->
x©ãn2Db
[
i
]);

487 
	`REG_RMW
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

488 
	`SM
(
pModÆ
-> 
bswM¨gö
[
i
], 
AR_PHY_GAIN_2GHZ_BSW_MARGIN
),

489 
AR_PHY_GAIN_2GHZ_BSW_MARGIN
);

490 
	`REG_RMW
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

491 
	`SM
(
pModÆ
->
bswAâí
[
i
], 
AR_PHY_GAIN_2GHZ_BSW_ATTEN
),

492 
AR_PHY_GAIN_2GHZ_BSW_ATTEN
);

496 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

497 
	`REG_RMW_FIELD
(
ah
,

498 
AR_PHY_RXGAIN
 + 
ªgChaöOff£t
,

499 
AR9280_PHY_RXGAIN_TXRX_ATTEN
, 
txRxAâíLoˇl
);

500 
	`REG_RMW_FIELD
(
ah
,

501 
AR_PHY_RXGAIN
 + 
ªgChaöOff£t
,

502 
AR9280_PHY_RXGAIN_TXRX_MARGIN
, 
pModÆ
->
rxTxM¨göCh
[
i
]);

504 
	`REG_RMW
(
ah
, 
AR_PHY_RXGAIN
 + 
ªgChaöOff£t
,

505 
	`SM
(
txRxAâíLoˇl
, 
AR_PHY_RXGAIN_TXRX_ATTEN
),

506 
AR_PHY_RXGAIN_TXRX_ATTEN
);

507 
	`REG_RMW
(
ah
, 
AR_PHY_GAIN_2GHZ
 + 
ªgChaöOff£t
,

508 
	`SM
(
pModÆ
->
rxTxM¨göCh
[
i
], 
AR_PHY_GAIN_2GHZ_RXTX_MARGIN
),

509 
AR_PHY_GAIN_2GHZ_RXTX_MARGIN
);

511 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

512 
	}
}

514 
	$©h9k_hw_def_£t_bﬂrd_vÆues
(
©h_hw
 *
ah
,

515 
©h9k_ch™√l
 *
ch™
)

517 
modÆ_ìp_hódî
 *
pModÆ
;

518 
¨5416_ì¥om_def
 *
ìp
 = &
ah
->
ì¥om
.
def
;

519 
i
, 
ªgChaöOff£t
;

520 
u8
 
txRxAâíLoˇl
;

522 
pModÆ
 = &(
ìp
->
modÆHódî
[
	`IS_CHAN_2GHZ
(
ch™
)]);

523 
txRxAâíLoˇl
 = 
	`IS_CHAN_2GHZ
(
ch™
) ? 23 : 44;

525 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_COM
, 
pModÆ
->
™tCålComm⁄
 & 0xffff);

527 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

528 i‡(
	`AR_SREV_9280
(
ah
)) {

529 i‡(
i
 >= 2)

533 i‡((
ah
->
rxchaömask
 =5 ||áh->
txchaömask
 =5Ë&& (
i
 != 0))

534 
ªgChaöOff£t
 = (
i
 == 1) ? 0x2000 : 0x1000;

536 
ªgChaöOff£t
 = 
i
 * 0x1000;

538 
	`REG_WRITE
(
ah
, 
AR_PHY_SWITCH_CHAIN_0
 + 
ªgChaöOff£t
,

539 
pModÆ
->
™tCålChaö
[
i
]);

541 
	`REG_WRITE
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0Ë+ 
ªgChaöOff£t
,

542 (
	`REG_READ
(
ah
, 
	`AR_PHY_TIMING_CTRL4
(0Ë+ 
ªgChaöOff£t
) &

543 ~(
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
 |

544 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
)) |

545 
	`SM
(
pModÆ
->
iqCÆICh
[
i
],

546 
AR_PHY_TIMING_CTRL4_IQCORR_Q_I_COFF
) |

547 
	`SM
(
pModÆ
->
iqCÆQCh
[
i
],

548 
AR_PHY_TIMING_CTRL4_IQCORR_Q_Q_COFF
));

550 
	`©h9k_hw_def_£t_gaö
(
ah
, 
pModÆ
, 
ìp
, 
txRxAâíLoˇl
,

551 
ªgChaöOff£t
, 
i
);

554 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

555 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

556 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF2G1_CH0
,

557 
AR_AN_RF2G1_CH0_OB
,

558 
AR_AN_RF2G1_CH0_OB_S
,

559 
pModÆ
->
ob
);

560 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF2G1_CH0
,

561 
AR_AN_RF2G1_CH0_DB
,

562 
AR_AN_RF2G1_CH0_DB_S
,

563 
pModÆ
->
db
);

564 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF2G1_CH1
,

565 
AR_AN_RF2G1_CH1_OB
,

566 
AR_AN_RF2G1_CH1_OB_S
,

567 
pModÆ
->
ob_ch1
);

568 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF2G1_CH1
,

569 
AR_AN_RF2G1_CH1_DB
,

570 
AR_AN_RF2G1_CH1_DB_S
,

571 
pModÆ
->
db_ch1
);

573 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF5G1_CH0
,

574 
AR_AN_RF5G1_CH0_OB5
,

575 
AR_AN_RF5G1_CH0_OB5_S
,

576 
pModÆ
->
ob
);

577 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF5G1_CH0
,

578 
AR_AN_RF5G1_CH0_DB5
,

579 
AR_AN_RF5G1_CH0_DB5_S
,

580 
pModÆ
->
db
);

581 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF5G1_CH1
,

582 
AR_AN_RF5G1_CH1_OB5
,

583 
AR_AN_RF5G1_CH1_OB5_S
,

584 
pModÆ
->
ob_ch1
);

585 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_RF5G1_CH1
,

586 
AR_AN_RF5G1_CH1_DB5
,

587 
AR_AN_RF5G1_CH1_DB5_S
,

588 
pModÆ
->
db_ch1
);

590 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_TOP2
,

591 
AR_AN_TOP2_XPABIAS_LVL
,

592 
AR_AN_TOP2_XPABIAS_LVL_S
,

593 
pModÆ
->
x∑BüsLvl
);

594 
	`©h9k_hw_™Æog_shi·_rmw
(
ah
, 
AR_AN_TOP2
,

595 
AR_AN_TOP2_LOCALBIAS
,

596 
AR_AN_TOP2_LOCALBIAS_S
,

597 !!(
pModÆ
->
 a_˘l
 &

598 
LNA_CTL_LOCAL_BIAS
));

599 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_XPA_CFG
, 
AR_PHY_FORCE_XPA_CFG
,

600 !!(
pModÆ
->
 a_˘l
 & 
LNA_CTL_FORCE_XPA
));

603 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SETTLING
, 
AR_PHY_SETTLING_SWITCH
,

604 
pModÆ
->
swôchSëéög
);

605 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_DESIRED_SZ
, 
AR_PHY_DESIRED_SZ_ADC
,

606 
pModÆ
->
adcDesúedSize
);

608 i‡(!
	`AR_SREV_9280_20_OR_LATER
(
ah
))

609 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_DESIRED_SZ
,

610 
AR_PHY_DESIRED_SZ_PGA
,

611 
pModÆ
->
pgaDesúedSize
);

613 
	`REG_WRITE
(
ah
, 
AR_PHY_RF_CTL4
,

614 
	`SM
(
pModÆ
->
txEndToX∑Off
, 
AR_PHY_RF_CTL4_TX_END_XPAA_OFF
)

615 | 
	`SM
(
pModÆ
->
txEndToX∑Off
,

616 
AR_PHY_RF_CTL4_TX_END_XPAB_OFF
)

617 | 
	`SM
(
pModÆ
->
txFømeToX∑On
,

618 
AR_PHY_RF_CTL4_FRAME_XPAA_ON
)

619 | 
	`SM
(
pModÆ
->
txFømeToX∑On
,

620 
AR_PHY_RF_CTL4_FRAME_XPAB_ON
));

622 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL3
, 
AR_PHY_TX_END_TO_A2_RX_ON
,

623 
pModÆ
->
txEndToRxOn
);

625 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

626 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCA
, 
AR9280_PHY_CCA_THRESH62
,

627 
pModÆ
->
thªsh62
);

628 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_CCA0
,

629 
AR_PHY_EXT_CCA0_THRESH62
,

630 
pModÆ
->
thªsh62
);

632 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCA
, 
AR_PHY_CCA_THRESH62
,

633 
pModÆ
->
thªsh62
);

634 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_EXT_CCA
,

635 
AR_PHY_EXT_CCA_THRESH62
,

636 
pModÆ
->
thªsh62
);

639 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_2
) {

640 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL2
,

641 
AR_PHY_TX_END_DATA_START
,

642 
pModÆ
->
txFømeToD©aSèπ
);

643 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_RF_CTL2
, 
AR_PHY_TX_END_PA_ON
,

644 
pModÆ
->
txFømeToPaOn
);

647 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_3
) {

648 i‡(
	`IS_CHAN_HT40
(
ch™
))

649 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_SETTLING
,

650 
AR_PHY_SETTLING_SWITCH
,

651 
pModÆ
->
swSëéeHt40
);

654 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
) &&

655 
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_19
)

656 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_CCK_TX_CTRL
,

657 
AR_PHY_CCK_TX_CTRL_TX_DAC_SCALE_CCK
,

658 
pModÆ
->
miscBôs
);

661 i‡(
	`AR_SREV_9280_20
(
ah
Ë&& 
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_20
) {

662 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

663 
	`REG_RMW_FIELD
(
ah
, 
AR_AN_TOP1
, 
AR_AN_TOP1_DACIPMODE
,

664 
ìp
->
ba£EïHódî
.
dacLpMode
);

665 i‡(
ìp
->
ba£EïHódî
.
dacHiPwrMode_5G
)

666 
	`REG_RMW_FIELD
(
ah
, 
AR_AN_TOP1
, 
AR_AN_TOP1_DACIPMODE
, 0);

668 
	`REG_RMW_FIELD
(
ah
, 
AR_AN_TOP1
, 
AR_AN_TOP1_DACIPMODE
,

669 
ìp
->
ba£EïHódî
.
dacLpMode
);

671 
	`udñay
(100);

673 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_FRAME_CTL
, 
AR_PHY_FRAME_CTL_TX_CLIP
,

674 
pModÆ
->
miscBôs
 >> 2);

676 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TX_PWRCTRL9
,

677 
AR_PHY_TX_DESIRED_SCALE_CCK
,

678 
ìp
->
ba£EïHódî
.
desúedSˇÀCCK
);

680 
	}
}

682 
	$©h9k_hw_def_£t_addac
(
©h_hw
 *
ah
,

683 
©h9k_ch™√l
 *
ch™
)

685 
	#XPA_LVL_FREQ
(
˙t
Ë(
pModÆ
->
x∑BüsLvlFªq
[˙t])

	)

686 
modÆ_ìp_hódî
 *
pModÆ
;

687 
¨5416_ì¥om_def
 *
ìp
 = &
ah
->
ì¥om
.
def
;

688 
u8
 
bü¶evñ
;

690 i‡(
ah
->
hw_vîsi⁄
.
macVîsi⁄
 !
AR_SREV_VERSION_9160
)

693 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om_ªv
◊hË< 
AR5416_EEP_MINOR_VER_7
)

696 
pModÆ
 = &(
ìp
->
modÆHódî
[
	`IS_CHAN_2GHZ
(
ch™
)]);

698 i‡(
pModÆ
->
x∑BüsLvl
 != 0xff) {

699 
bü¶evñ
 = 
pModÆ
->
x∑BüsLvl
;

701 
u16
 
ª£tFªqBö
, 
‰eqBö
, 
‰eqCou¡
 = 0;

702 
ch™_˚¡îs
 
˚¡îs
;

704 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

706 
ª£tFªqBö
 = 
	`FREQ2FBIN
(
˚¡îs
.
sy¡h_˚¡î
,

707 
	`IS_CHAN_2GHZ
(
ch™
));

708 
‰eqBö
 = 
	`XPA_LVL_FREQ
(0) & 0xff;

709 
bü¶evñ
 = (
u8
Ë(
	`XPA_LVL_FREQ
(0) >> 14);

711 
‰eqCou¡
++;

713 
‰eqCou¡
 < 3) {

714 i‡(
	`XPA_LVL_FREQ
(
‰eqCou¡
) == 0x0)

717 
‰eqBö
 = 
	`XPA_LVL_FREQ
(
‰eqCou¡
) & 0xff;

718 i‡(
ª£tFªqBö
 >
‰eqBö
)

719 
bü¶evñ
 = (
u8
)(
	`XPA_LVL_FREQ
(
‰eqCou¡
) >> 14);

722 
‰eqCou¡
++;

726 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

727 
	`INI_RA
(&
ah
->
öiAddac
, 7, 1) = (INI_RA(&ah->iniAddac,

728 7, 1Ë& (~0x18)Ë| 
bü¶evñ
 << 3;

730 
	`INI_RA
(&
ah
->
öiAddac
, 6, 1) = (INI_RA(&ah->iniAddac,

731 6, 1Ë& (~0xc0)Ë| 
bü¶evñ
 << 6;

733 #unde‡
XPA_LVL_FREQ


734 
	}
}

736 
öt16_t
 
	$©h9k_ch™ge_gaö_bound¨y_£âög
(
©h_hw
 *
ah
,

737 
u16
 *
gb
,

738 
u16
 
numXpdGaö
,

739 
u16
 
pdGaöOvîœp_t2
,

740 
öt8_t
 
pwr_èbÀ_off£t
,

741 
öt16_t
 *
diff
)

744 
u16
 
k
;

751 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

752 
u16
 
gb_limô
;

754 i‡(
AR5416_PWR_TABLE_OFFSET_DB
 !
pwr_èbÀ_off£t
) {

756 *
diff
 = (
u16
)(
pwr_èbÀ_off£t
 - 
AR5416_PWR_TABLE_OFFSET_DB
);

758 *
diff
 *= 2;

762 
k
 = 0; k < 
numXpdGaö
; k++)

763 
gb
[
k
] = (
u16
)(gb[k] - *
diff
);

768 
gb_limô
 = (
u16
)(
MAX_RATE_POWER
 - 
pdGaöOvîœp_t2
);

770 
k
 = 0; k < 
numXpdGaö
; k++)

771 
gb
[
k
] = (
u16
)
	`mö
(
gb_limô
, gb[k]);

774  *
diff
;

775 
	}
}

777 
	$©h9k_adju°_pdadc_vÆues
(
©h_hw
 *
ah
,

778 
öt8_t
 
pwr_èbÀ_off£t
,

779 
öt16_t
 
diff
,

780 
u8
 *
pdadcVÆues
)

782 
	#NUM_PDADC
(
diff
Ë(
AR5416_NUM_PDADC_VALUES
 - diff)

	)

783 
u16
 
k
;

790 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

791 i‡(
AR5416_PWR_TABLE_OFFSET_DB
 !
pwr_èbÀ_off£t
) {

793 
k
 = 0; k < (
u16
)
	`NUM_PDADC
(
diff
); k++ ) {

794 
pdadcVÆues
[
k
] =ÖdadcVÆues[k + 
diff
];

798 
k
 = (
u16
)
	`NUM_PDADC
(
diff
); k < NUM_PDADC(0); k++) {

799 
pdadcVÆues
[
k
] =ÖdadcVÆues[
	`NUM_PDADC
(
diff
)];

803 #unde‡
NUM_PDADC


804 
	}
}

806 
	$©h9k_hw_£t_def_powî_ˇl_èbÀ
(
©h_hw
 *
ah
,

807 
©h9k_ch™√l
 *
ch™
)

809 
	#SM_PD_GAIN
(
x
Ë
	`SM
(0x38, 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_
##x)

	)

810 
	#SM_PDGAIN_B
(
x
, 
y
) \

811 
	`SM
((
gaöBound¨õs
[
x
]), 
AR_PHY_TPCRG5_PD_GAIN_BOUNDARY_
##
y
)

	)

812 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

813 
¨5416_ì¥om_def
 *
pEïD©a
 = &
ah
->
ì¥om
.
def
;

814 
ˇl_d©a_≥r_‰eq
 *
pRawD©a£t
;

815 
u8
 *
pCÆBCh™s
 = 
NULL
;

816 
u16
 
pdGaöOvîœp_t2
;

817 
u8
 
pdadcVÆues
[
AR5416_NUM_PDADC_VALUES
];

818 
u16
 
gaöBound¨õs
[
AR5416_PD_GAINS_IN_MASK
];

819 
u16
 
numPõrs
, 
i
, 
j
;

820 
öt16_t
 
diff
 = 0;

821 
u16
 
numXpdGaö
, 
xpdMask
;

822 
u16
 
xpdGaöVÆues
[
AR5416_NUM_PD_GAINS
] = { 0, 0, 0, 0 };

823 
u32
 
ªg32
, 
ªgOff£t
, 
ªgChaöOff£t
;

824 
öt16_t
 
modÆIdx
;

825 
öt8_t
 
pwr_èbÀ_off£t
;

827 
modÆIdx
 = 
	`IS_CHAN_2GHZ
(
ch™
) ? 1 : 0;

828 
xpdMask
 = 
pEïD©a
->
modÆHódî
[
modÆIdx
].
xpdGaö
;

830 
pwr_èbÀ_off£t
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_PWR_TABLE_OFFSET
);

832 i‡((
pEïD©a
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

833 
AR5416_EEP_MINOR_VER_2
) {

834 
pdGaöOvîœp_t2
 =

835 
pEïD©a
->
modÆHódî
[
modÆIdx
].
pdGaöOvîœp
;

837 
pdGaöOvîœp_t2
 = (
u16
)(
	`MS
(
	`REG_READ
(
ah
, 
AR_PHY_TPCRG5
),

838 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
));

841 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

842 
pCÆBCh™s
 = 
pEïD©a
->
ˇlFªqPõr2G
;

843 
numPõrs
 = 
AR5416_NUM_2G_CAL_PIERS
;

845 
pCÆBCh™s
 = 
pEïD©a
->
ˇlFªqPõr5G
;

846 
numPõrs
 = 
AR5416_NUM_5G_CAL_PIERS
;

849 i‡(
OLC_FOR_AR9280_20_LATER
 && 
	`IS_CHAN_2GHZ
(
ch™
)) {

850 
pRawD©a£t
 = 
pEïD©a
->
ˇlPõrD©a2G
[0];

851 
ah
->
öôPDADC
 = ((
ˇlD©aPîFªqOpLo›
 *)

852 
pRawD©a£t
)->
vpdPdg
[0][0];

855 
numXpdGaö
 = 0;

857 
i
 = 1; i <
AR5416_PD_GAINS_IN_MASK
; i++) {

858 i‡((
xpdMask
 >> (
AR5416_PD_GAINS_IN_MASK
 - 
i
)) & 1) {

859 i‡(
numXpdGaö
 >
AR5416_NUM_PD_GAINS
)

861 
xpdGaöVÆues
[
numXpdGaö
] =

862 (
u16
)(
AR5416_PD_GAINS_IN_MASK
 - 
i
);

863 
numXpdGaö
++;

867 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_NUM_PD_GAIN
,

868 (
numXpdGaö
 - 1) & 0x3);

869 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_1
,

870 
xpdGaöVÆues
[0]);

871 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_2
,

872 
xpdGaöVÆues
[1]);

873 
	`REG_RMW_FIELD
(
ah
, 
AR_PHY_TPCRG1
, 
AR_PHY_TPCRG1_PD_GAIN_3
,

874 
xpdGaöVÆues
[2]);

876 
i
 = 0; i < 
AR5416_MAX_CHAINS
; i++) {

877 i‡((
ah
->
rxchaömask
 =5 ||áh->
txchaömask
 == 5) &&

878 (
i
 != 0)) {

879 
ªgChaöOff£t
 = (
i
 == 1) ? 0x2000 : 0x1000;

881 
ªgChaöOff£t
 = 
i
 * 0x1000;

883 i‡(
pEïD©a
->
ba£EïHódî
.
txMask
 & (1 << 
i
)) {

884 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

885 
pRawD©a£t
 = 
pEïD©a
->
ˇlPõrD©a2G
[
i
];

887 
pRawD©a£t
 = 
pEïD©a
->
ˇlPõrD©a5G
[
i
];

890 i‡(
OLC_FOR_AR9280_20_LATER
) {

891 
u8
 
pcdacIdx
;

892 
u8
 
txPowî
;

894 
	`©h9k_gë_txgaö_ödex
(
ah
, 
ch™
,

895 (
ˇlD©aPîFªqOpLo›
 *)
pRawD©a£t
,

896 
pCÆBCh™s
, 
numPõrs
, &
txPowî
, &
pcdacIdx
);

897 
	`©h9k_ﬁc_gë_pdadcs
(
ah
, 
pcdacIdx
,

898 
txPowî
/2, 
pdadcVÆues
);

900 
	`©h9k_hw_gë_gaö_bound¨õs_pdadcs
(
ah
,

901 
ch™
, 
pRawD©a£t
,

902 
pCÆBCh™s
, 
numPõrs
,

903 
pdGaöOvîœp_t2
,

904 
gaöBound¨õs
,

905 
pdadcVÆues
,

906 
numXpdGaö
);

909 
diff
 = 
	`©h9k_ch™ge_gaö_bound¨y_£âög
(
ah
,

910 
gaöBound¨õs
,

911 
numXpdGaö
,

912 
pdGaöOvîœp_t2
,

913 
pwr_èbÀ_off£t
,

914 &
diff
);

916 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

918 i‡(
OLC_FOR_AR9280_20_LATER
) {

919 
	`REG_WRITE
(
ah
,

920 
AR_PHY_TPCRG5
 + 
ªgChaöOff£t
,

921 
	`SM
(0x6,

922 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
) |

923 
	`SM_PD_GAIN
(1) | SM_PD_GAIN(2) |

924 
	`SM_PD_GAIN
(3) | SM_PD_GAIN(4));

926 
	`REG_WRITE
(
ah
,

927 
AR_PHY_TPCRG5
 + 
ªgChaöOff£t
,

928 
	`SM
(
pdGaöOvîœp_t2
,

929 
AR_PHY_TPCRG5_PD_GAIN_OVERLAP
)|

930 
	`SM_PDGAIN_B
(0, 1) |

931 
	`SM_PDGAIN_B
(1, 2) |

932 
	`SM_PDGAIN_B
(2, 3) |

933 
	`SM_PDGAIN_B
(3, 4));

936 
	`©h9k_adju°_pdadc_vÆues
(
ah
, 
pwr_èbÀ_off£t
,

937 
diff
, 
pdadcVÆues
);

939 
ªgOff£t
 = 
AR_PHY_BASE
 + (672 << 2Ë+ 
ªgChaöOff£t
;

940 
j
 = 0; j < 32; j++) {

941 
ªg32
 = 
	`gë_u«lig√d_À32
(&
pdadcVÆues
[4 * 
j
]);

942 
	`REG_WRITE
(
ah
, 
ªgOff£t
, 
ªg32
);

944 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

946 
i
, 
ªgChaöOff£t
, 
ªgOff£t
,

947 
ªg32
);

948 
	`©h_dbg
(
comm⁄
, 
EEPROM
,

950 
i
, 4 * 
j
, 
pdadcVÆues
[4 * j],

951 4 * 
j
 + 1, 
pdadcVÆues
[4 * j + 1],

952 4 * 
j
 + 2, 
pdadcVÆues
[4 * j + 2],

953 4 * 
j
 + 3, 
pdadcVÆues
[4 * j + 3]);

955 
ªgOff£t
 += 4;

957 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

961 #unde‡
SM_PD_GAIN


962 #unde‡
SM_PDGAIN_B


963 
	}
}

965 
	$©h9k_hw_£t_def_powî_≥r_øã_èbÀ
(
©h_hw
 *
ah
,

966 
©h9k_ch™√l
 *
ch™
,

967 
öt16_t
 *
øãsAºay
,

968 
u16
 
cfgCé
,

969 
u16
 
™ã¬a_ªdu˘i⁄
,

970 
u16
 
powîLimô
)

972 
¨5416_ì¥om_def
 *
pEïD©a
 = &
ah
->
ì¥om
.
def
;

973 
u16
 
twi˚MaxEdgePowî
;

974 
i
;

975 
ˇl_˘l_d©a
 *
ªp
;

976 
ˇl_èrgë_powî_Àg
 
èrgëPowîOfdm
, 
èrgëPowîCck
 = {

979 
ˇl_èrgë_powî_Àg
 
èrgëPowîOfdmExt
 = {

980 0, { 0, 0, 0, 0} }, 
èrgëPowîCckExt
 = {

983 
ˇl_èrgë_powî_ht
 
èrgëPowîHt20
, 
èrgëPowîHt40
 = {

986 
u16
 
sˇÀdPowî
 = 0, 
möCéPowî
;

987 c⁄° 
u16
 
˘lModesF‹11a
[] = {

988 
CTL_11A
, 
CTL_5GHT20
, 
CTL_11A_EXT
, 
CTL_5GHT40


990 c⁄° 
u16
 
˘lModesF‹11g
[] = {

991 
CTL_11B
, 
CTL_11G
, 
CTL_2GHT20
,

992 
CTL_11B_EXT
, 
CTL_11G_EXT
, 
CTL_2GHT40


994 
u16
 
numCéModes
;

995 c⁄° 
u16
 *
pCéMode
;

996 
u16
 
˘lMode
, 
‰eq
;

997 
ch™_˚¡îs
 
˚¡îs
;

998 
tx_chaömask
;

999 
u16
 
twi˚MöEdgePowî
;

1001 
tx_chaömask
 = 
ah
->
txchaömask
;

1003 
	`©h9k_hw_gë_ch™√l_˚¡îs
(
ah
, 
ch™
, &
˚¡îs
);

1005 
sˇÀdPowî
 = 
	`©h9k_hw_gë_sˇÀd_powî
(
ah
, 
powîLimô
,

1006 
™ã¬a_ªdu˘i⁄
);

1008 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

1009 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11g
) -

1010 
SUB_NUM_CTL_MODES_AT_2G_40
;

1011 
pCéMode
 = 
˘lModesF‹11g
;

1013 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

1014 
pEïD©a
->
ˇlT¨gëPowîCck
,

1015 
AR5416_NUM_2G_CCK_TARGET_POWERS
,

1016 &
èrgëPowîCck
, 4, 
Ál£
);

1017 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

1018 
pEïD©a
->
ˇlT¨gëPowî2G
,

1019 
AR5416_NUM_2G_20_TARGET_POWERS
,

1020 &
èrgëPowîOfdm
, 4, 
Ál£
);

1021 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

1022 
pEïD©a
->
ˇlT¨gëPowî2GHT20
,

1023 
AR5416_NUM_2G_20_TARGET_POWERS
,

1024 &
èrgëPowîHt20
, 8, 
Ál£
);

1026 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

1027 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11g
);

1028 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

1029 
pEïD©a
->
ˇlT¨gëPowî2GHT40
,

1030 
AR5416_NUM_2G_40_TARGET_POWERS
,

1031 &
èrgëPowîHt40
, 8, 
åue
);

1032 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

1033 
pEïD©a
->
ˇlT¨gëPowîCck
,

1034 
AR5416_NUM_2G_CCK_TARGET_POWERS
,

1035 &
èrgëPowîCckExt
, 4, 
åue
);

1036 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

1037 
pEïD©a
->
ˇlT¨gëPowî2G
,

1038 
AR5416_NUM_2G_20_TARGET_POWERS
,

1039 &
èrgëPowîOfdmExt
, 4, 
åue
);

1042 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11a
) -

1043 
SUB_NUM_CTL_MODES_AT_5G_40
;

1044 
pCéMode
 = 
˘lModesF‹11a
;

1046 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

1047 
pEïD©a
->
ˇlT¨gëPowî5G
,

1048 
AR5416_NUM_5G_20_TARGET_POWERS
,

1049 &
èrgëPowîOfdm
, 4, 
Ál£
);

1050 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

1051 
pEïD©a
->
ˇlT¨gëPowî5GHT20
,

1052 
AR5416_NUM_5G_20_TARGET_POWERS
,

1053 &
èrgëPowîHt20
, 8, 
Ál£
);

1055 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

1056 
numCéModes
 = 
	`ARRAY_SIZE
(
˘lModesF‹11a
);

1057 
	`©h9k_hw_gë_èrgë_powîs
(
ah
, 
ch™
,

1058 
pEïD©a
->
ˇlT¨gëPowî5GHT40
,

1059 
AR5416_NUM_5G_40_TARGET_POWERS
,

1060 &
èrgëPowîHt40
, 8, 
åue
);

1061 
	`©h9k_hw_gë_Àgacy_èrgë_powîs
(
ah
, 
ch™
,

1062 
pEïD©a
->
ˇlT¨gëPowî5G
,

1063 
AR5416_NUM_5G_20_TARGET_POWERS
,

1064 &
èrgëPowîOfdmExt
, 4, 
åue
);

1068 
˘lMode
 = 0; céModê< 
numCéModes
; ctlMode++) {

1069 
boﬁ
 
isHt40CéMode
 = (
pCéMode
[
˘lMode
] =
CTL_5GHT40
) ||

1070 (
pCéMode
[
˘lMode
] =
CTL_2GHT40
);

1071 i‡(
isHt40CéMode
)

1072 
‰eq
 = 
˚¡îs
.
sy¡h_˚¡î
;

1073 i‡(
pCéMode
[
˘lMode
] & 
EXT_ADDITIVE
)

1074 
‰eq
 = 
˚¡îs
.
ext_˚¡î
;

1076 
‰eq
 = 
˚¡îs
.
˘l_˚¡î
;

1078 
twi˚MaxEdgePowî
 = 
MAX_RATE_POWER
;

1080 
i
 = 0; (ò< 
AR5416_NUM_CTLS
Ë&& 
pEïD©a
->
˘lIndex
[i]; i++) {

1081 i‡((((
cfgCé
 & ~
CTL_MODE_M
) |

1082 (
pCéMode
[
˘lMode
] & 
CTL_MODE_M
)) ==

1083 
pEïD©a
->
˘lIndex
[
i
]) ||

1084 (((
cfgCé
 & ~
CTL_MODE_M
) |

1085 (
pCéMode
[
˘lMode
] & 
CTL_MODE_M
)) ==

1086 ((
pEïD©a
->
˘lIndex
[
i
] & 
CTL_MODE_M
Ë| 
SD_NO_CTL
))) {

1087 
ªp
 = &(
pEïD©a
->
˘lD©a
[
i
]);

1089 
twi˚MöEdgePowî
 = 
	`©h9k_hw_gë_max_edge_powî
(
‰eq
,

1090 
ªp
->
˘lEdges
[
	`¨5416_gë_¡xchaös
(
tx_chaömask
) - 1],

1091 
	`IS_CHAN_2GHZ
(
ch™
), 
AR5416_NUM_BAND_EDGES
);

1093 i‡((
cfgCé
 & ~
CTL_MODE_M
Ë=
SD_NO_CTL
) {

1094 
twi˚MaxEdgePowî
 = 
	`mö
(twiceMaxEdgePower,

1095 
twi˚MöEdgePowî
);

1097 
twi˚MaxEdgePowî
 = 
twi˚MöEdgePowî
;

1103 
möCéPowî
 = 
	`mö
(
twi˚MaxEdgePowî
, 
sˇÀdPowî
);

1105 
pCéMode
[
˘lMode
]) {

1106 
CTL_11B
:

1107 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîCck
.
tPow2x
); i++) {

1108 
èrgëPowîCck
.
tPow2x
[
i
] =

1109 
	`mö
((
u16
)
èrgëPowîCck
.
tPow2x
[
i
],

1110 
möCéPowî
);

1113 
CTL_11A
:

1114 
CTL_11G
:

1115 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîOfdm
.
tPow2x
); i++) {

1116 
èrgëPowîOfdm
.
tPow2x
[
i
] =

1117 
	`mö
((
u16
)
èrgëPowîOfdm
.
tPow2x
[
i
],

1118 
möCéPowî
);

1121 
CTL_5GHT20
:

1122 
CTL_2GHT20
:

1123 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt20
.
tPow2x
); i++) {

1124 
èrgëPowîHt20
.
tPow2x
[
i
] =

1125 
	`mö
((
u16
)
èrgëPowîHt20
.
tPow2x
[
i
],

1126 
möCéPowî
);

1129 
CTL_11B_EXT
:

1130 
èrgëPowîCckExt
.
tPow2x
[0] = 
	`mö
((
u16
)

1131 
èrgëPowîCckExt
.
tPow2x
[0],

1132 
möCéPowî
);

1134 
CTL_11A_EXT
:

1135 
CTL_11G_EXT
:

1136 
èrgëPowîOfdmExt
.
tPow2x
[0] = 
	`mö
((
u16
)

1137 
èrgëPowîOfdmExt
.
tPow2x
[0],

1138 
möCéPowî
);

1140 
CTL_5GHT40
:

1141 
CTL_2GHT40
:

1142 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt40
.
tPow2x
); i++) {

1143 
èrgëPowîHt40
.
tPow2x
[
i
] =

1144 
	`mö
((
u16
)
èrgëPowîHt40
.
tPow2x
[
i
],

1145 
möCéPowî
);

1153 
øãsAºay
[
øã6mb
] =Ñ©esAºay[
øã9mb
] =Ñ©esAºay[
øã12mb
] =

1154 
øãsAºay
[
øã18mb
] =Ñ©esAºay[
øã24mb
] =

1155 
èrgëPowîOfdm
.
tPow2x
[0];

1156 
øãsAºay
[
øã36mb
] = 
èrgëPowîOfdm
.
tPow2x
[1];

1157 
øãsAºay
[
øã48mb
] = 
èrgëPowîOfdm
.
tPow2x
[2];

1158 
øãsAºay
[
øã54mb
] = 
èrgëPowîOfdm
.
tPow2x
[3];

1159 
øãsAºay
[
øãXr
] = 
èrgëPowîOfdm
.
tPow2x
[0];

1161 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt20
.
tPow2x
); i++)

1162 
øãsAºay
[
øãHt20_0
 + 
i
] = 
èrgëPowîHt20
.
tPow2x
[i];

1164 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

1165 
øãsAºay
[
øã1l
] = 
èrgëPowîCck
.
tPow2x
[0];

1166 
øãsAºay
[
øã2s
] =Ñ©esAºay[
øã2l
] =

1167 
èrgëPowîCck
.
tPow2x
[1];

1168 
øãsAºay
[
øã5_5s
] =Ñ©esAºay[
øã5_5l
] =

1169 
èrgëPowîCck
.
tPow2x
[2];

1170 
øãsAºay
[
øã11s
] =Ñ©esAºay[
øã11l
] =

1171 
èrgëPowîCck
.
tPow2x
[3];

1173 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

1174 
i
 = 0; i < 
	`ARRAY_SIZE
(
èrgëPowîHt40
.
tPow2x
); i++) {

1175 
øãsAºay
[
øãHt40_0
 + 
i
] =

1176 
èrgëPowîHt40
.
tPow2x
[
i
];

1178 
øãsAºay
[
øãDupOfdm
] = 
èrgëPowîHt40
.
tPow2x
[0];

1179 
øãsAºay
[
øãDupCck
] = 
èrgëPowîHt40
.
tPow2x
[0];

1180 
øãsAºay
[
øãExtOfdm
] = 
èrgëPowîOfdmExt
.
tPow2x
[0];

1181 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

1182 
øãsAºay
[
øãExtCck
] =

1183 
èrgëPowîCckExt
.
tPow2x
[0];

1186 
	}
}

1188 
	$©h9k_hw_def_£t_txpowî
(
©h_hw
 *
ah
,

1189 
©h9k_ch™√l
 *
ch™
,

1190 
u16
 
cfgCé
,

1191 
u8
 
twi˚A¡í«Redu˘i⁄
,

1192 
u8
 
powîLimô
, 
boﬁ
 
ã°
)

1194 
	#RT_AR_DELTA
(
x
Ë(
øãsAºay
[x] - 
cck_ofdm_dñè
)

	)

1195 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

1196 
¨5416_ì¥om_def
 *
pEïD©a
 = &
ah
->
ì¥om
.
def
;

1197 
modÆ_ìp_hódî
 *
pModÆ
 =

1198 &(
pEïD©a
->
modÆHódî
[
	`IS_CHAN_2GHZ
(
ch™
)]);

1199 
öt16_t
 
øãsAºay
[
Ar5416R©eSize
];

1200 
u8
 
ht40PowîIncF‹Pdadc
 = 2;

1201 
i
, 
cck_ofdm_dñè
 = 0;

1203 
	`mem£t
(
øãsAºay
, 0, (ratesArray));

1205 i‡((
pEïD©a
->
ba£EïHódî
.
vîsi⁄
 & 
AR5416_EEP_VER_MINOR_MASK
) >=

1206 
AR5416_EEP_MINOR_VER_2
) {

1207 
ht40PowîIncF‹Pdadc
 = 
pModÆ
->ht40PowerIncForPdadc;

1210 
	`©h9k_hw_£t_def_powî_≥r_øã_èbÀ
(
ah
, 
ch™
,

1211 &
øãsAºay
[0], 
cfgCé
,

1212 
twi˚A¡í«Redu˘i⁄
,

1213 
powîLimô
);

1215 
	`©h9k_hw_£t_def_powî_ˇl_èbÀ
(
ah
, 
ch™
);

1217 
ªguœt‹y
->
max_powî_Àvñ
 = 0;

1218 
i
 = 0; i < 
	`ARRAY_SIZE
(
øãsAºay
); i++) {

1219 i‡(
øãsAºay
[
i
] > 
MAX_RATE_POWER
)

1220 
øãsAºay
[
i
] = 
MAX_RATE_POWER
;

1221 i‡(
øãsAºay
[
i
] > 
ªguœt‹y
->
max_powî_Àvñ
)

1222 
ªguœt‹y
->
max_powî_Àvñ
 = 
øãsAºay
[
i
];

1225 
	`©h9k_hw_upd©e_ªguœt‹y_maxpowî
(
ah
);

1227 i‡(
ã°
)

1230 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

1231 
i
 = 0; i < 
Ar5416R©eSize
; i++) {

1232 
öt8_t
 
pwr_èbÀ_off£t
;

1234 
pwr_èbÀ_off£t
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
(ah,

1235 
EEP_PWR_TABLE_OFFSET
);

1236 
øãsAºay
[
i
] -
pwr_èbÀ_off£t
 * 2;

1240 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1242 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE1
,

1243 
	`ATH9K_POW_SM
(
øãsAºay
[
øã18mb
], 24)

1244 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã12mb
], 16)

1245 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã9mb
], 8)

1246 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã6mb
], 0));

1247 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE2
,

1248 
	`ATH9K_POW_SM
(
øãsAºay
[
øã54mb
], 24)

1249 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã48mb
], 16)

1250 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã36mb
], 8)

1251 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã24mb
], 0));

1253 i‡(
	`IS_CHAN_2GHZ
(
ch™
)) {

1254 i‡(
OLC_FOR_AR9280_20_LATER
) {

1255 
cck_ofdm_dñè
 = 2;

1256 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE3
,

1257 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã2s
), 24)

1258 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã2l
), 16)

1259 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãXr
], 8)

1260 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã1l
), 0));

1261 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE4
,

1262 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã11s
), 24)

1263 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã11l
), 16)

1264 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã5_5s
), 8)

1265 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øã5_5l
), 0));

1267 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE3
,

1268 
	`ATH9K_POW_SM
(
øãsAºay
[
øã2s
], 24)

1269 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã2l
], 16)

1270 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãXr
], 8)

1271 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã1l
], 0));

1272 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE4
,

1273 
	`ATH9K_POW_SM
(
øãsAºay
[
øã11s
], 24)

1274 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã11l
], 16)

1275 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã5_5s
], 8)

1276 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øã5_5l
], 0));

1280 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE5
,

1281 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_3
], 24)

1282 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_2
], 16)

1283 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_1
], 8)

1284 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_0
], 0));

1285 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE6
,

1286 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_7
], 24)

1287 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_6
], 16)

1288 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_5
], 8)

1289 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt20_4
], 0));

1291 i‡(
	`IS_CHAN_HT40
(
ch™
)) {

1292 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE7
,

1293 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_3
] +

1294 
ht40PowîIncF‹Pdadc
, 24)

1295 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_2
] +

1296 
ht40PowîIncF‹Pdadc
, 16)

1297 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_1
] +

1298 
ht40PowîIncF‹Pdadc
, 8)

1299 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_0
] +

1300 
ht40PowîIncF‹Pdadc
, 0));

1301 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE8
,

1302 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_7
] +

1303 
ht40PowîIncF‹Pdadc
, 24)

1304 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_6
] +

1305 
ht40PowîIncF‹Pdadc
, 16)

1306 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_5
] +

1307 
ht40PowîIncF‹Pdadc
, 8)

1308 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãHt40_4
] +

1309 
ht40PowîIncF‹Pdadc
, 0));

1310 i‡(
OLC_FOR_AR9280_20_LATER
) {

1311 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE9
,

1312 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtOfdm
], 24)

1313 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øãExtCck
), 16)

1314 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupOfdm
], 8)

1315 | 
	`ATH9K_POW_SM
(
	`RT_AR_DELTA
(
øãDupCck
), 0));

1317 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE9
,

1318 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtOfdm
], 24)

1319 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãExtCck
], 16)

1320 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupOfdm
], 8)

1321 | 
	`ATH9K_POW_SM
(
øãsAºay
[
øãDupCck
], 0));

1325 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_SUB
,

1326 
	`ATH9K_POW_SM
(
pModÆ
->
pwrDe¸ó£F‹3Chaö
, 6)

1327 | 
	`ATH9K_POW_SM
(
pModÆ
->
pwrDe¸ó£F‹2Chaö
, 0));

1330 i‡(
ah
->
çc_íabÀd
) {

1331 
ht40_dñè
;

1333 
ht40_dñè
 = (
	`IS_CHAN_HT40
(
ch™
)Ë? 
ht40PowîIncF‹Pdadc
 : 0;

1334 
	`¨5008_hw_öô_øã_txpowî
(
ah
, 
øãsAºay
, 
ch™
, 
ht40_dñè
);

1336 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE_MAX
,

1337 
MAX_RATE_POWER
 | 
AR_PHY_POWER_TX_RATE_MAX_TPC_ENABLE
);

1340 
	`REG_WRITE
(
ah
, 
AR_PHY_POWER_TX_RATE_MAX
, 
MAX_RATE_POWER
);

1343 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1344 
	}
}

1346 
u16
 
	$©h9k_hw_def_gë_•ur_ch™√l
(
©h_hw
 *
ah
, 
u16
 
i
, 
boﬁ
 
is2GHz
)

1348  
ah
->
ì¥om
.
def
.
modÆHódî
[
is2GHz
].
•urCh™s
[
i
].
•urCh™
;

1349 
	}
}

1351 c⁄° 
ì¥om_›s
 
	gìp_def_›s
 = {

1352 .
check_ì¥om
 = 
©h9k_hw_def_check_ì¥om
,

1353 .
	ggë_ì¥om
 = 
©h9k_hw_def_gë_ì¥om
,

1354 .
	gfûl_ì¥om
 = 
©h9k_hw_def_fûl_ì¥om
,

1355 .
	gdump_ì¥om
 = 
©h9k_hw_def_dump_ì¥om
,

1356 .
	ggë_ì¥om_vî
 = 
©h9k_hw_def_gë_ì¥om_vî
,

1357 .
	ggë_ì¥om_ªv
 = 
©h9k_hw_def_gë_ì¥om_ªv
,

1358 .
	g£t_bﬂrd_vÆues
 = 
©h9k_hw_def_£t_bﬂrd_vÆues
,

1359 .
	g£t_addac
 = 
©h9k_hw_def_£t_addac
,

1360 .
	g£t_txpowî
 = 
©h9k_hw_def_£t_txpowî
,

1361 .
	ggë_•ur_ch™√l
 = 
©h9k_hw_def_gë_•ur_ch™√l


	@gpio.c

17 
	~"©h9k.h
"

23 #ifde‡
CONFIG_MAC80211_LEDS


24 
	$©h_Àd_brighäess
(
Àd_˛assdev
 *
Àd_cdev
,

25 
Àd_brighäess
 
brighäess
)

27 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
Àd_cdev
, ath_softc,Üed_cdev);

28 
u32
 
vÆ
 = (
brighäess
 =
LED_OFF
);

30 i‡(
sc
->
sc_ah
->
c⁄fig
.
Àd_a˘ive_high
)

31 
vÆ
 = !val;

33 
	`©h9k_hw_£t_gpio
(
sc
->
sc_ah
, sc->sc_ah->
Àd_pö
, 
vÆ
);

34 
	}
}

36 
	$©h_deöô_Àds
(
©h_so·c
 *
sc
)

38 i‡(!
sc
->
Àd_ªgi°îed
)

41 
	`©h_Àd_brighäess
(&
sc
->
Àd_cdev
, 
LED_OFF
);

42 
	`Àd_˛assdev_uƒegi°î
(&
sc
->
Àd_cdev
);

43 
	}
}

45 
	$©h_öô_Àds
(
©h_so·c
 *
sc
)

47 
ªt
;

49 i‡(
	`AR_SREV_9100
(
sc
->
sc_ah
))

52 i‡(!
©h9k_Àd_blök
)

53 
sc
->
Àd_cdev
.
deÁu…_åiggî
 =

54 
	`õì80211_gë_ødio_Àd_«me
(
sc
->
hw
);

56 
	`¢¥ötf
(
sc
->
Àd_«me
, (sc->led_name),

57 "©h9k-%s", 
	`wùhy_«me
(
sc
->
hw
->
wùhy
));

58 
sc
->
Àd_cdev
.
«me
 = sc->
Àd_«me
;

59 
sc
->
Àd_cdev
.
brighäess_£t
 = 
©h_Àd_brighäess
;

61 
ªt
 = 
	`Àd_˛assdev_ªgi°î
(
	`wùhy_dev
(
sc
->
hw
->
wùhy
), &sc->
Àd_cdev
);

62 i‡(
ªt
 < 0)

65 
sc
->
Àd_ªgi°îed
 = 
åue
;

66 
	}
}

68 
	$©h_fûl_Àd_pö
(
©h_so·c
 *
sc
)

70 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

72 i‡(
	`AR_SREV_9100
(
ah
))

75 i‡(
ah
->
Àd_pö
 >= 0) {

76 i‡(!((1 << 
ah
->
Àd_pö
Ë& 
AR_GPIO_OE_OUT_MASK
))

77 
	`©h9k_hw_ªque°_gpio
(
ah
,áh->
Àd_pö
, "ath9k-led");

81 i‡(
	`AR_SREV_9287
(
ah
))

82 
ah
->
Àd_pö
 = 
ATH_LED_PIN_9287
;

83 i‡(
	`AR_SREV_9485
(
sc
->
sc_ah
))

84 
ah
->
Àd_pö
 = 
ATH_LED_PIN_9485
;

85 i‡(
	`AR_SREV_9300
(
sc
->
sc_ah
))

86 
ah
->
Àd_pö
 = 
ATH_LED_PIN_9300
;

87 i‡(
	`AR_SREV_9462
(
sc
->
sc_ah
Ë|| 
	`AR_SREV_9565
(sc->sc_ah))

88 
ah
->
Àd_pö
 = 
ATH_LED_PIN_9462
;

90 
ah
->
Àd_pö
 = 
ATH_LED_PIN_DEF
;

93 
	`©h9k_hw_cfg_ouçut
(
ah
,áh->
Àd_pö
, 
AR_GPIO_OUTPUT_MUX_AS_OUTPUT
);

96 
	`©h9k_hw_£t_gpio
(
ah
,áh->
Àd_pö
, (ah->
c⁄fig
.
Àd_a˘ive_high
) ? 0 : 1);

97 
	}
}

104 
boﬁ
 
	$©h_is_rfkûl_£t
(
©h_so·c
 *
sc
)

106 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

107 
boﬁ
 
is_blocked
;

109 
	`©h9k_ps_wakeup
(
sc
);

110 
is_blocked
 = 
	`©h9k_hw_gpio_gë
(
ah
,áh->
rfkûl_gpio
) ==

111 
ah
->
rfkûl_pﬁ¨ôy
;

112 
	`©h9k_ps_ª°‹e
(
sc
);

114  
is_blocked
;

115 
	}
}

117 
	$©h9k_rfkûl_pﬁl_°©e
(
õì80211_hw
 *
hw
)

119 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

120 
boﬁ
 
blocked
 = !!
	`©h_is_rfkûl_£t
(
sc
);

122 
	`wùhy_rfkûl_£t_hw_°©e
(
hw
->
wùhy
, 
blocked
);

123 
	}
}

125 
	$©h_°¨t_rfkûl_pﬁl
(
©h_so·c
 *
sc
)

127 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

129 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_RFSILENT
)

130 
	`wùhy_rfkûl_°¨t_pﬁlög
(
sc
->
hw
->
wùhy
);

131 
	}
}

133 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


142 
	$©h_dëe˘_bt_¥i‹ôy
(
©h_so·c
 *
sc
)

144 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

145 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

147 i‡(
	`©h9k_hw_gpio_gë
(
sc
->
sc_ah
, 
ah
->
btc€x_hw
.
bçri‹ôy_gpio
))

148 
btc€x
->
bt_¥i‹ôy_˙t
++;

150 i‡(
	`time_a·î
(
jiffõs
, 
btc€x
->
bt_¥i‹ôy_time
 +

151 
	`m£cs_to_jiffõs
(
ATH_BT_PRIORITY_TIME_THRESHOLD
))) {

152 
	`˛ór_bô
(
BT_OP_PRIORITY_DETECTED
, &
btc€x
->
›_Êags
);

153 
	`˛ór_bô
(
BT_OP_SCAN
, &
btc€x
->
›_Êags
);

155 i‡(
btc€x
->
bt_¥i‹ôy_˙t
 >
ATH_BT_CNT_SCAN_THRESHOLD
) {

156 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
BTCOEX
,

158 
	`£t_bô
(
BT_OP_PRIORITY_DETECTED
, &
btc€x
->
›_Êags
);

159 
	`£t_bô
(
BT_OP_SCAN
, &
btc€x
->
›_Êags
);

160 } i‡(
btc€x
->
bt_¥i‹ôy_˙t
 >
ATH_BT_CNT_THRESHOLD
) {

161 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
BTCOEX
,

163 
	`£t_bô
(
BT_OP_PRIORITY_DETECTED
, &
btc€x
->
›_Êags
);

166 
btc€x
->
bt_¥i‹ôy_˙t
 = 0;

167 
btc€x
->
bt_¥i‹ôy_time
 = 
jiffõs
;

169 
	}
}

171 
	$©h_mci_·p_adju°
(
©h_so·c
 *
sc
)

173 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

174 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

175 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

177 i‡(
btc€x
->
bt_waô_time
 > 
ATH_BTCOEX_RX_WAIT_TIME
) {

178 i‡(
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_NEED_FTP_STOMP
) &&

179 (
mci
->
num_∑n
 || mci->
num_Ÿhî_a˛
))

180 
ah
->
btc€x_hw
.
mci
.
°omp_·p
 =

181 (
sc
->
rx
.
num_pkts
 < 
ATH_BTCOEX_STOMP_FTP_THRESH
);

183 
ah
->
btc€x_hw
.
mci
.
°omp_·p
 = 
Ál£
;

184 
btc€x
->
bt_waô_time
 = 0;

185 
sc
->
rx
.
num_pkts
 = 0;

187 
	}
}

194 
	$©h_btc€x_≥riod_timî
(
d©a
)

196 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
d©a
;

197 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

198 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

199 
©h_°omp_ty≥
 
°omp_ty≥
;

200 
u32
 
timî_≥riod
;

201 
Êags
;

203 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

204 i‡(
sc
->
sc_ah
->
powî_mode
 =
ATH9K_PM_NETWORK_SLEEP
) {

205 
btc€x
->
bt_waô_time
 +btc€x->
btc€x_≥riod
;

206 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

207 
skù_hw_wakeup
;

209 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

211 
	`©h9k_ps_wakeup
(
sc
);

212 
	`•ö_lock_bh
(&
btc€x
->
btc€x_lock
);

214 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
) {

215 
	`©h9k_mci_upd©e_rssi
(
sc
);

216 
	`©h_mci_·p_adju°
(
sc
);

219 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
))

220 
	`©h_dëe˘_bt_¥i‹ôy
(
sc
);

222 
°omp_ty≥
 = 
btc€x
->
bt_°omp_ty≥
;

223 
timî_≥riod
 = 
btc€x
->
btc€x_no_°omp
;

225 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
)) {

226 i‡(
	`ã°_bô
(
BT_OP_SCAN
, &
btc€x
->
›_Êags
)) {

227 
°omp_ty≥
 = 
ATH_BTCOEX_STOMP_ALL
;

228 
timî_≥riod
 = 
btc€x
->
btsˇn_no_°omp
;

230 } i‡(
btc€x
->
°omp_audio
 >= 5) {

231 
°omp_ty≥
 = 
ATH_BTCOEX_STOMP_AUDIO
;

232 
btc€x
->
°omp_audio
 = 0;

235 
	`©h9k_hw_btc€x_bt_°omp
(
ah
, 
°omp_ty≥
);

236 
	`©h9k_hw_btc€x_íabÀ
(
ah
);

238 
	`•ö_u∆ock_bh
(&
btc€x
->
btc€x_lock
);

240 i‡(
btc€x
->
btc€x_≥riod
 !btc€x->
btc€x_no_°omp
)

241 
	`mod_timî
(&
btc€x
->
no_°omp_timî
,

242 
jiffõs
 + 
	`m£cs_to_jiffõs
(
timî_≥riod
));

244 
	`©h9k_ps_ª°‹e
(
sc
);

246 
skù_hw_wakeup
:

247 
	`mod_timî
(&
btc€x
->
≥riod_timî
,

248 
jiffõs
 + 
	`m£cs_to_jiffõs
(
btc€x
->
btc€x_≥riod
));

249 
	}
}

255 
	$©h_btc€x_no_°omp_timî
(
¨g
)

257 
©h_so·c
 *
sc
 = (©h_so·¯*)
¨g
;

258 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

259 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

261 
	`©h9k_ps_wakeup
(
sc
);

262 
	`•ö_lock_bh
(&
btc€x
->
btc€x_lock
);

264 i‡(
btc€x
->
bt_°omp_ty≥
 =
ATH_BTCOEX_STOMP_LOW
 ||

265 (!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
) &&

266 
	`ã°_bô
(
BT_OP_SCAN
, &
btc€x
->
›_Êags
)))

267 
	`©h9k_hw_btc€x_bt_°omp
(
ah
, 
ATH_BTCOEX_STOMP_NONE
);

268 i‡(
btc€x
->
bt_°omp_ty≥
 =
ATH_BTCOEX_STOMP_ALL
)

269 
	`©h9k_hw_btc€x_bt_°omp
(
ah
, 
ATH_BTCOEX_STOMP_LOW
);

271 
	`©h9k_hw_btc€x_íabÀ
(
ah
);

272 
	`•ö_u∆ock_bh
(&
btc€x
->
btc€x_lock
);

273 
	`©h9k_ps_ª°‹e
(
sc
);

274 
	}
}

276 
	$©h_öô_btc€x_timî
(
©h_so·c
 *
sc
)

278 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

280 
btc€x
->
btc€x_≥riod
 = 
ATH_BTCOEX_DEF_BT_PERIOD
;

281 
btc€x
->
btc€x_no_°omp
 = (100 - 
ATH_BTCOEX_DEF_DUTY_CYCLE
) *

282 
btc€x
->
btc€x_≥riod
 / 100;

283 
btc€x
->
btsˇn_no_°omp
 = (100 - 
ATH_BTCOEX_BTSCAN_DUTY_CYCLE
) *

284 
btc€x
->
btc€x_≥riod
 / 100;

285 
btc€x
->
bt_°omp_ty≥
 = 
ATH_BTCOEX_STOMP_LOW
;

287 
	`£tup_timî
(&
btc€x
->
≥riod_timî
, 
©h_btc€x_≥riod_timî
,

288 (Ë
sc
);

289 
	`£tup_timî
(&
btc€x
->
no_°omp_timî
, 
©h_btc€x_no_°omp_timî
,

290 (Ë
sc
);

292 
	`•ö_lock_öô
(&
btc€x
->
btc€x_lock
);

293 
	}
}

298 
	$©h9k_btc€x_timî_ªsume
(
©h_so·c
 *
sc
)

300 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

301 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

303 i‡(
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_3WIRE
 &&

304 
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_MCI
)

307 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BTCOEX
, "Starting btcoexÅimers\n");

310 
	`dñ_timî_sync
(&
btc€x
->
no_°omp_timî
);

312 
btc€x
->
bt_¥i‹ôy_˙t
 = 0;

313 
btc€x
->
bt_¥i‹ôy_time
 = 
jiffõs
;

314 
	`˛ór_bô
(
BT_OP_PRIORITY_DETECTED
, &
btc€x
->
›_Êags
);

315 
	`˛ór_bô
(
BT_OP_SCAN
, &
btc€x
->
›_Êags
);

317 
	`mod_timî
(&
btc€x
->
≥riod_timî
, 
jiffõs
);

318 
	}
}

323 
	$©h9k_btc€x_timî_∑u£
(
©h_so·c
 *
sc
)

325 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

326 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

328 i‡(
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_3WIRE
 &&

329 
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_MCI
)

332 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BTCOEX
, "Stopping btcoexÅimers\n");

334 
	`dñ_timî_sync
(&
btc€x
->
≥riod_timî
);

335 
	`dñ_timî_sync
(&
btc€x
->
no_°omp_timî
);

336 
	}
}

338 
	$©h9k_btc€x_°›_gí_timî
(
©h_so·c
 *
sc
)

340 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

342 
	`dñ_timî_sync
(&
btc€x
->
no_°omp_timî
);

343 
	}
}

345 
u16
 
	$©h9k_btc€x_aggr_limô
(
©h_so·c
 *
sc
, 
u32
 
max_4ms_‰amñí
)

347 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

348 
©h_mci_¥ofûe
 *
mci
 = &
sc
->
btc€x
.mci;

349 
u16
 
aggr_limô
 = 0;

351 i‡((
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
Ë&& 
mci
->
aggr_limô
)

352 
aggr_limô
 = (
max_4ms_‰amñí
 * 
mci
->aggr_limit) >> 4;

353 i‡(
	`ã°_bô
(
BT_OP_PRIORITY_DETECTED
, &
btc€x
->
›_Êags
))

354 
aggr_limô
 = 
	`mö
((
max_4ms_‰amñí
 * 3) / 8,

355 (
u32
)
ATH_AMPDU_LIMIT_MAX
);

357  
aggr_limô
;

358 
	}
}

360 
	$©h9k_btc€x_h™dÀ_öãºu±
(
©h_so·c
 *
sc
, 
u32
 
°©us
)

362 i‡(
°©us
 & 
ATH9K_INT_MCI
)

363 
	`©h_mci_öå
(
sc
);

364 
	}
}

366 
	$©h9k_°¨t_btc€x
(
©h_so·c
 *
sc
)

368 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

370 i‡(
ah
->
btc€x_hw
.
íabÀd
 ||

371 
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë=
ATH_BTCOEX_CFG_NONE
)

374 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
))

375 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 
AR_BT_COEX_WGHT
,

376 
AR_STOMP_LOW_WLAN_WGHT
, 0);

378 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 0, 0,

379 
ATH_BTCOEX_STOMP_NONE
);

380 
	`©h9k_hw_btc€x_íabÀ
(
ah
);

381 
	`©h9k_btc€x_timî_ªsume
(
sc
);

382 
	}
}

384 
	$©h9k_°›_btc€x
(
©h_so·c
 *
sc
)

386 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

388 i‡(!
ah
->
btc€x_hw
.
íabÀd
 ||

389 
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë=
ATH_BTCOEX_CFG_NONE
)

392 
	`©h9k_btc€x_timî_∑u£
(
sc
);

393 
	`©h9k_hw_btc€x_dißbÀ
(
ah
);

395 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
)

396 
	`©h_mci_Êush_¥ofûe
(&
sc
->
btc€x
.
mci
);

397 
	}
}

399 
	$©h9k_deöô_btc€x
(
©h_so·c
 *
sc
)

401 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

403 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

404 
	`©h_mci_˛ónup
(
sc
);

405 
	}
}

407 
	$©h9k_öô_btc€x
(
©h_so·c
 *
sc
)

409 
©h_txq
 *
txq
;

410 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

411 
r
;

413 
	`©h9k_hw_btc€x_öô_scheme
(
ah
);

415 
	`©h9k_hw_gë_btc€x_scheme
(
sc
->
sc_ah
)) {

416 
ATH_BTCOEX_CFG_NONE
:

418 
ATH_BTCOEX_CFG_2WIRE
:

419 
	`©h9k_hw_btc€x_öô_2wúe
(
sc
->
sc_ah
);

421 
ATH_BTCOEX_CFG_3WIRE
:

422 
	`©h9k_hw_btc€x_öô_3wúe
(
sc
->
sc_ah
);

423 
	`©h_öô_btc€x_timî
(
sc
);

424 
txq
 = 
sc
->
tx
.
txq_m≠
[
IEEE80211_AC_BE
];

425 
	`©h9k_hw_öô_btc€x_hw
(
sc
->
sc_ah
, 
txq
->
axq_qnum
);

427 
ATH_BTCOEX_CFG_MCI
:

428 
	`©h_öô_btc€x_timî
(
sc
);

430 
sc
->
btc€x
.
duty_cy˛e
 = 
ATH_BTCOEX_DEF_DUTY_CYCLE
;

431 
	`INIT_LIST_HEAD
(&
sc
->
btc€x
.
mci
.
öfo
);

432 
	`©h9k_hw_btc€x_öô_mci
(
ah
);

434 
r
 = 
	`©h_mci_£tup
(
sc
);

435 i‡(
r
)

436  
r
;

440 
	`WARN_ON
(1);

445 
	}
}

447 
	$©h9k_dump_mci_btc€x
(
©h_so·c
 *
sc
, 
u8
 *
buf
, 
u32
 
size
)

449 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

450 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

451 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

452 
©h_btc€x_hw
 *
btc€x_hw
 = &
ah
->btcoex_hw;

453 
u32
 
Àn
 = 0;

454 
i
;

456 
	`ATH_DUMP_BTCOEX
("TŸÆ BTÖrofûes", 
	`NUM_PROF
(
mci
));

457 
	`ATH_DUMP_BTCOEX
("MGMT", 
mci
->
num_mgmt
);

458 
	`ATH_DUMP_BTCOEX
("SCO", 
mci
->
num_sco
);

459 
	`ATH_DUMP_BTCOEX
("A2DP", 
mci
->
num_a2dp
);

460 
	`ATH_DUMP_BTCOEX
("HID", 
mci
->
num_hid
);

461 
	`ATH_DUMP_BTCOEX
("PAN", 
mci
->
num_∑n
);

462 
	`ATH_DUMP_BTCOEX
("ACL", 
mci
->
num_Ÿhî_a˛
);

463 
	`ATH_DUMP_BTCOEX
("BDR", 
mci
->
num_bdr
);

464 
	`ATH_DUMP_BTCOEX
("Aggr. Limô", 
mci
->
aggr_limô
);

465 
	`ATH_DUMP_BTCOEX
("Stom∞Ty≥", 
btc€x
->
bt_°omp_ty≥
);

466 
	`ATH_DUMP_BTCOEX
("BTC€x Pîiod (m£c)", 
btc€x
->
btc€x_≥riod
);

467 
	`ATH_DUMP_BTCOEX
("Duty Cy˛e", 
btc€x
->
duty_cy˛e
);

468 
	`ATH_DUMP_BTCOEX
("BT WaôÅime", 
btc€x
->
bt_waô_time
);

469 
	`ATH_DUMP_BTCOEX
("C⁄cuºíàTx", 
btc€x_hw
->
mci
.
c⁄cur_tx
);

470 
	`ATH_DUMP_BTCOEX
("C⁄cuºíàRSSI c¡", 
btc€x
->
rssi_cou¡
);

472 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "BT Weights: ");

473 
i
 = 0; i < 
AR9300_NUM_BT_WEIGHTS
; i++)

474 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%08x ",

475 
btc€x_hw
->
bt_weight
[
i
]);

476 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "\n");

477 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "WLAN Weights: ");

478 
i
 = 0; i < 
AR9300_NUM_BT_WEIGHTS
; i++)

479 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%08x ",

480 
btc€x_hw
->
wœn_weight
[
i
]);

481 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "\n");

482 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "Tx Priorities: ");

483 
i
 = 0; i < 
ATH_BTCOEX_STOMP_MAX
; i++)

484 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%08x ",

485 
btc€x_hw
->
tx_¥io
[
i
]);

487 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "\n");

489  
Àn
;

490 
	}
}

492 
	$©h9k_dump_Àgacy_btc€x
(
©h_so·c
 *
sc
, 
u8
 *
buf
, 
u32
 
size
)

495 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

496 
u32
 
Àn
 = 0;

498 
	`ATH_DUMP_BTCOEX
("Stom∞Ty≥", 
btc€x
->
bt_°omp_ty≥
);

499 
	`ATH_DUMP_BTCOEX
("BTC€x Pîiod (m£c)", 
btc€x
->
btc€x_≥riod
);

500 
	`ATH_DUMP_BTCOEX
("Duty Cy˛e", 
btc€x
->
duty_cy˛e
);

501 
	`ATH_DUMP_BTCOEX
("BT WaôÅime", 
btc€x
->
bt_waô_time
);

503  
Àn
;

504 
	}
}

506 
	$©h9k_dump_btc€x
(
©h_so·c
 *
sc
, 
u8
 *
buf
, 
u32
 
size
)

508 i‡(
	`©h9k_hw_mci_is_íabÀd
(
sc
->
sc_ah
))

509  
	`©h9k_dump_mci_btc€x
(
sc
, 
buf
, 
size
);

511  
	`©h9k_dump_Àgacy_btc€x
(
sc
, 
buf
, 
size
);

512 
	}
}

	@hif_usb.c

17 
	~<asm/u«lig√d.h
>

18 
	~"htc.h
"

20 
MODULE_FIRMWARE
(
HTC_7010_MODULE_FW
);

21 
MODULE_FIRMWARE
(
HTC_9271_MODULE_FW
);

23 
usb_devi˚_id
 
	g©h9k_hif_usb_ids
[] = {

24 { 
USB_DEVICE
(0x0cf3, 0x9271) },

25 { 
USB_DEVICE
(0x0cf3, 0x1006) },

26 { 
USB_DEVICE
(0x0846, 0x9030) },

27 { 
USB_DEVICE
(0x07D1, 0x3A10) },

28 { 
USB_DEVICE
(0x13D3, 0x3327) },

29 { 
USB_DEVICE
(0x13D3, 0x3328) },

30 { 
USB_DEVICE
(0x13D3, 0x3346) },

31 { 
USB_DEVICE
(0x13D3, 0x3348) },

32 { 
USB_DEVICE
(0x13D3, 0x3349) },

33 { 
USB_DEVICE
(0x13D3, 0x3350) },

34 { 
USB_DEVICE
(0x04CA, 0x4605) },

35 { 
USB_DEVICE
(0x040D, 0x3801) },

36 { 
USB_DEVICE
(0x0cf3, 0xb003) },

37 { 
USB_DEVICE
(0x0cf3, 0xb002) },

38 { 
USB_DEVICE
(0x057c, 0x8403) },

39 { 
USB_DEVICE
(0x0471, 0x209e) },

41 { 
USB_DEVICE
(0x0cf3, 0x7015),

42 .
drivî_öfo
 = 
AR9287_USB
 },

43 { 
USB_DEVICE
(0x1668, 0x1200),

44 .
	gdrivî_öfo
 = 
AR9287_USB
 },

46 { 
USB_DEVICE
(0x0cf3, 0x7010),

47 .
	gdrivî_öfo
 = 
AR9280_USB
 },

48 { 
USB_DEVICE
(0x0846, 0x9018),

49 .
	gdrivî_öfo
 = 
AR9280_USB
 },

50 { 
USB_DEVICE
(0x083A, 0xA704),

51 .
	gdrivî_öfo
 = 
AR9280_USB
 },

52 { 
USB_DEVICE
(0x0411, 0x017f),

53 .
	gdrivî_öfo
 = 
AR9280_USB
 },

54 { 
USB_DEVICE
(0x0411, 0x0197),

55 .
	gdrivî_öfo
 = 
AR9280_USB
 },

56 { 
USB_DEVICE
(0x04da, 0x3904),

57 .
	gdrivî_öfo
 = 
AR9280_USB
 },

59 { 
USB_DEVICE
(0x0cf3, 0x20ff),

60 .
	gdrivî_öfo
 = 
STORAGE_DEVICE
 },

65 
MODULE_DEVICE_TABLE
(
usb
, 
©h9k_hif_usb_ids
);

67 
__hif_usb_tx
(
hif_devi˚_usb
 *
hif_dev
);

69 
	$hif_usb_ªgout_cb
(
urb
 *urb)

71 
cmd_buf
 *
cmd
 = (cmd_bu‡*)
urb
->
c⁄ãxt
;

73 
urb
->
°©us
) {

76 -
ENOENT
:

77 -
ECONNRESET
:

78 -
ENODEV
:

79 -
ESHUTDOWN
:

80 
‰ì
;

85 i‡(
cmd
) {

86 
	`©h9k_htc_txcom∂ëi⁄_cb
(
cmd
->
hif_dev
->
htc_h™dÀ
,

87 
cmd
->
skb
, 
åue
);

88 
	`k‰ì
(
cmd
);

92 
‰ì
:

93 
	`k‰ì_skb
(
cmd
->
skb
);

94 
	`k‰ì
(
cmd
);

95 
	}
}

97 
	$hif_usb_£nd_ªgout
(
hif_devi˚_usb
 *
hif_dev
,

98 
sk_buff
 *
skb
)

100 
urb
 *urb;

101 
cmd_buf
 *
cmd
;

102 
ªt
 = 0;

104 
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_KERNEL
);

105 i‡(
urb
 =
NULL
)

106  -
ENOMEM
;

108 
cmd
 = 
	`kzÆloc
((*cmd), 
GFP_KERNEL
);

109 i‡(
cmd
 =
NULL
) {

110 
	`usb_‰ì_urb
(
urb
);

111  -
ENOMEM
;

114 
cmd
->
skb
 = skb;

115 
cmd
->
hif_dev
 = hif_dev;

117 
	`usb_fûl_öt_urb
(
urb
, 
hif_dev
->
udev
,

118 
	`usb_¢döçùe
(
hif_dev
->
udev
, 
USB_REG_OUT_PIPE
),

119 
skb
->
d©a
, skb->
Àn
,

120 
hif_usb_ªgout_cb
, 
cmd
, 1);

122 
	`usb_™ch‹_urb
(
urb
, &
hif_dev
->
ªgout_submôãd
);

123 
ªt
 = 
	`usb_submô_urb
(
urb
, 
GFP_KERNEL
);

124 i‡(
ªt
) {

125 
	`usb_u«nch‹_urb
(
urb
);

126 
	`k‰ì
(
cmd
);

128 
	`usb_‰ì_urb
(
urb
);

130  
ªt
;

131 
	}
}

133 
	$hif_usb_mgmt_cb
(
urb
 *urb)

135 
cmd_buf
 *
cmd
 = (cmd_bu‡*)
urb
->
c⁄ãxt
;

136 
hif_devi˚_usb
 *
hif_dev
;

137 
boﬁ
 
txok
 = 
åue
;

139 i‡(!
cmd
 || !cmd->
skb
 || !cmd->
hif_dev
)

142 
hif_dev
 = 
cmd
->hif_dev;

144 
urb
->
°©us
) {

147 -
ENOENT
:

148 -
ECONNRESET
:

149 -
ENODEV
:

150 -
ESHUTDOWN
:

151 
txok
 = 
Ál£
;

157 
	`•ö_lock
(&
hif_dev
->
tx
.
tx_lock
);

158 i‡(
hif_dev
->
tx
.
Êags
 & 
HIF_USB_TX_FLUSH
) {

159 
	`•ö_u∆ock
(&
hif_dev
->
tx
.
tx_lock
);

160 
	`dev_k‰ì_skb_™y
(
cmd
->
skb
);

161 
	`k‰ì
(
cmd
);

164 
	`•ö_u∆ock
(&
hif_dev
->
tx
.
tx_lock
);

168 
txok
 = 
Ál£
;

172 
	`skb_puŒ
(
cmd
->
skb
, 4);

173 
	`©h9k_htc_txcom∂ëi⁄_cb
(
cmd
->
hif_dev
->
htc_h™dÀ
,

174 
cmd
->
skb
, 
txok
);

175 
	`k‰ì
(
cmd
);

176 
	}
}

178 
	$hif_usb_£nd_mgmt
(
hif_devi˚_usb
 *
hif_dev
,

179 
sk_buff
 *
skb
)

181 
urb
 *urb;

182 
cmd_buf
 *
cmd
;

183 
ªt
 = 0;

184 
__À16
 *
hdr
;

186 
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_ATOMIC
);

187 i‡(
urb
 =
NULL
)

188  -
ENOMEM
;

190 
cmd
 = 
	`kzÆloc
((*cmd), 
GFP_ATOMIC
);

191 i‡(
cmd
 =
NULL
) {

192 
	`usb_‰ì_urb
(
urb
);

193  -
ENOMEM
;

196 
cmd
->
skb
 = skb;

197 
cmd
->
hif_dev
 = hif_dev;

199 
hdr
 = (
__À16
 *Ë
	`skb_push
(
skb
, 4);

200 *
hdr
++ = 
	`˝u_to_À16
(
skb
->
Àn
 - 4);

201 *
hdr
++ = 
	`˝u_to_À16
(
ATH_USB_TX_STREAM_MODE_TAG
);

203 
	`usb_fûl_bulk_urb
(
urb
, 
hif_dev
->
udev
,

204 
	`usb_¢dbulkpùe
(
hif_dev
->
udev
, 
USB_WLAN_TX_PIPE
),

205 
skb
->
d©a
, skb->
Àn
,

206 
hif_usb_mgmt_cb
, 
cmd
);

208 
	`usb_™ch‹_urb
(
urb
, &
hif_dev
->
mgmt_submôãd
);

209 
ªt
 = 
	`usb_submô_urb
(
urb
, 
GFP_ATOMIC
);

210 i‡(
ªt
) {

211 
	`usb_u«nch‹_urb
(
urb
);

212 
	`k‰ì
(
cmd
);

214 
	`usb_‰ì_urb
(
urb
);

216  
ªt
;

217 
	}
}

219 
ölöe
 
	$©h9k_skb_queue_purge
(
hif_devi˚_usb
 *
hif_dev
,

220 
sk_buff_hód
 *
li°
)

222 
sk_buff
 *
skb
;

224 (
skb
 = 
	`__skb_dequeue
(
li°
)Ë!
NULL
) {

225 
	`dev_k‰ì_skb_™y
(
skb
);

227 
	}
}

229 
ölöe
 
	$©h9k_skb_queue_com∂ëe
(
hif_devi˚_usb
 *
hif_dev
,

230 
sk_buff_hód
 *
queue
,

231 
boﬁ
 
txok
)

233 
sk_buff
 *
skb
;

235 (
skb
 = 
	`__skb_dequeue
(
queue
)Ë!
NULL
) {

236 #ifde‡
CONFIG_ATH9K_HTC_DEBUGFS


237 
 
 = 
skb
->
Àn
;

239 
	`©h9k_htc_txcom∂ëi⁄_cb
(
hif_dev
->
htc_h™dÀ
,

240 
skb
, 
txok
);

241 i‡(
txok
) {

242 
	`TX_STAT_INC
(
skb_suc˚ss
);

243 
	`TX_STAT_ADD
(
skb_suc˚ss_byãs
, 
 
);

246 
	`TX_STAT_INC
(
skb_Áûed
);

248 
	}
}

250 
	$hif_usb_tx_cb
(
urb
 *urb)

252 
tx_buf
 *tx_bu‡(tx_bu‡*Ë
urb
->
c⁄ãxt
;

253 
hif_devi˚_usb
 *
hif_dev
;

254 
boﬁ
 
txok
 = 
åue
;

256 i‡(!
tx_buf
 || !tx_buf->
hif_dev
)

259 
hif_dev
 = 
tx_buf
->hif_dev;

261 
urb
->
°©us
) {

264 -
ENOENT
:

265 -
ECONNRESET
:

266 -
ENODEV
:

267 -
ESHUTDOWN
:

268 
txok
 = 
Ál£
;

274 
	`•ö_lock
(&
hif_dev
->
tx
.
tx_lock
);

275 i‡(
hif_dev
->
tx
.
Êags
 & 
HIF_USB_TX_FLUSH
) {

276 
	`•ö_u∆ock
(&
hif_dev
->
tx
.
tx_lock
);

277 
	`©h9k_skb_queue_purge
(
hif_dev
, &
tx_buf
->
skb_queue
);

280 
	`•ö_u∆ock
(&
hif_dev
->
tx
.
tx_lock
);

284 
txok
 = 
Ál£
;

288 
	`©h9k_skb_queue_com∂ëe
(
hif_dev
, &
tx_buf
->
skb_queue
, 
txok
);

291 
tx_buf
->
Àn
 =Åx_buf->
off£t
 = 0;

292 
	`__skb_queue_hód_öô
(&
tx_buf
->
skb_queue
);

295 
	`•ö_lock
(&
hif_dev
->
tx
.
tx_lock
);

296 
	`li°_move_èû
(&
tx_buf
->
li°
, &
hif_dev
->
tx
.tx_buf);

297 
hif_dev
->
tx
.
tx_buf_˙t
++;

298 i‡(!(
hif_dev
->
tx
.
Êags
 & 
HIF_USB_TX_STOP
))

299 
	`__hif_usb_tx
(
hif_dev
);

300 
	`TX_STAT_INC
(
buf_com∂ëed
);

301 
	`•ö_u∆ock
(&
hif_dev
->
tx
.
tx_lock
);

302 
	}
}

305 
	$__hif_usb_tx
(
hif_devi˚_usb
 *
hif_dev
)

307 
tx_buf
 *tx_bu‡
NULL
;

308 
sk_buff
 *
nskb
 = 
NULL
;

309 
ªt
 = 0, 
i
;

310 
u16
 
tx_skb_˙t
 = 0;

311 
u8
 *
buf
;

312 
__À16
 *
hdr
;

314 i‡(
hif_dev
->
tx
.
tx_skb_˙t
 == 0)

318 i‡(
	`li°_em±y
(&
hif_dev
->
tx
.
tx_buf
))

321 
tx_buf
 = 
	`li°_fú°_íåy
(&
hif_dev
->
tx
.tx_buf, tx_buf, 
li°
);

322 
	`li°_move_èû
(&
tx_buf
->
li°
, &
hif_dev
->
tx
.
tx_≥ndög
);

323 
hif_dev
->
tx
.
tx_buf_˙t
--;

325 
tx_skb_˙t
 = 
	`mö_t
(
u16
, 
hif_dev
->
tx
.tx_skb_˙t, 
MAX_TX_AGGR_NUM
);

327 
i
 = 0; i < 
tx_skb_˙t
; i++) {

328 
nskb
 = 
	`__skb_dequeue
(&
hif_dev
->
tx
.
tx_skb_queue
);

331 
	`BUG_ON
(!
nskb
);

333 
hif_dev
->
tx
.
tx_skb_˙t
--;

335 
buf
 = 
tx_buf
->buf;

336 
buf
 +
tx_buf
->
off£t
;

337 
hdr
 = (
__À16
 *)
buf
;

338 *
hdr
++ = 
	`˝u_to_À16
(
nskb
->
Àn
);

339 *
hdr
++ = 
	`˝u_to_À16
(
ATH_USB_TX_STREAM_MODE_TAG
);

340 
buf
 += 4;

341 
	`mem˝y
(
buf
, 
nskb
->
d©a
,Çskb->
Àn
);

342 
tx_buf
->
Àn
 = 
nskb
->len + 4;

344 i‡(
i
 < (
tx_skb_˙t
 - 1))

345 
tx_buf
->
off£t
 +((—x_buf->
Àn
 - 1) / 4) + 1) * 4;

347 i‡(
i
 =(
tx_skb_˙t
 - 1))

348 
tx_buf
->
Àn
 +tx_buf->
off£t
;

350 
	`__skb_queue_èû
(&
tx_buf
->
skb_queue
, 
nskb
);

351 
	`TX_STAT_INC
(
skb_queued
);

354 
	`usb_fûl_bulk_urb
(
tx_buf
->
urb
, 
hif_dev
->
udev
,

355 
	`usb_¢dbulkpùe
(
hif_dev
->
udev
, 
USB_WLAN_TX_PIPE
),

356 
tx_buf
->
buf
,Åx_buf->
Àn
,

357 
hif_usb_tx_cb
, 
tx_buf
);

359 
ªt
 = 
	`usb_submô_urb
(
tx_buf
->
urb
, 
GFP_ATOMIC
);

360 i‡(
ªt
) {

361 
tx_buf
->
Àn
 =Åx_buf->
off£t
 = 0;

362 
	`©h9k_skb_queue_com∂ëe
(
hif_dev
, &
tx_buf
->
skb_queue
, 
Ál£
);

363 
	`__skb_queue_hód_öô
(&
tx_buf
->
skb_queue
);

364 
	`li°_move_èû
(&
tx_buf
->
li°
, &
hif_dev
->
tx
.tx_buf);

365 
hif_dev
->
tx
.
tx_buf_˙t
++;

368 i‡(!
ªt
)

369 
	`TX_STAT_INC
(
buf_queued
);

371  
ªt
;

372 
	}
}

374 
	$hif_usb_£nd_tx
(
hif_devi˚_usb
 *
hif_dev
, 
sk_buff
 *
skb
)

376 
©h9k_htc_tx_˘l
 *
tx_˘l
;

377 
Êags
;

378 
ªt
 = 0;

380 
	`•ö_lock_úqßve
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

382 i‡(
hif_dev
->
tx
.
Êags
 & 
HIF_USB_TX_STOP
) {

383 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

384  -
ENODEV
;

388 i‡(
hif_dev
->
tx
.
tx_skb_˙t
 > 
MAX_TX_BUF_NUM
) {

389 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

390  -
ENOMEM
;

393 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

395 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

398 i‡((
tx_˘l
->
ty≥
 =
ATH9K_HTC_MGMT
) ||

399 (
tx_˘l
->
ty≥
 =
ATH9K_HTC_BEACON
)) {

400 
ªt
 = 
	`hif_usb_£nd_mgmt
(
hif_dev
, 
skb
);

403 
	`•ö_lock_úqßve
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

405 i‡((
tx_˘l
->
ty≥
 =
ATH9K_HTC_NORMAL
) ||

406 (
tx_˘l
->
ty≥
 =
ATH9K_HTC_AMPDU
)) {

407 
	`__skb_queue_èû
(&
hif_dev
->
tx
.
tx_skb_queue
, 
skb
);

408 
hif_dev
->
tx
.
tx_skb_˙t
++;

412 i‡((
hif_dev
->
tx
.
tx_buf_˙t
 =
MAX_TX_URB_NUM
) &&

413 (
hif_dev
->
tx
.
tx_skb_˙t
 < 2)) {

414 
	`__hif_usb_tx
(
hif_dev
);

417 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

419  
ªt
;

420 
	}
}

422 
	$hif_usb_°¨t
(*
hif_h™dÀ
)

424 
hif_devi˚_usb
 *
hif_dev
 = (hif_devi˚_usb *)
hif_h™dÀ
;

425 
Êags
;

427 
hif_dev
->
Êags
 |
HIF_USB_START
;

429 
	`•ö_lock_úqßve
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

430 
hif_dev
->
tx
.
Êags
 &~
HIF_USB_TX_STOP
;

431 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

432 
	}
}

434 
	$hif_usb_°›
(*
hif_h™dÀ
)

436 
hif_devi˚_usb
 *
hif_dev
 = (hif_devi˚_usb *)
hif_h™dÀ
;

437 
tx_buf
 *tx_bu‡
NULL
, *
tx_buf_tmp
 = NULL;

438 
Êags
;

440 
	`•ö_lock_úqßve
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

441 
	`©h9k_skb_queue_com∂ëe
(
hif_dev
, &hif_dev->
tx
.
tx_skb_queue
, 
Ál£
);

442 
hif_dev
->
tx
.
tx_skb_˙t
 = 0;

443 
hif_dev
->
tx
.
Êags
 |
HIF_USB_TX_STOP
;

444 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

447 
	`li°_f‹_óch_íåy_ß„
(
tx_buf
, 
tx_buf_tmp
,

448 &
hif_dev
->
tx
.
tx_≥ndög
, 
li°
) {

449 
	`usb_kûl_urb
(
tx_buf
->
urb
);

452 
	`usb_kûl_™ch‹ed_urbs
(&
hif_dev
->
mgmt_submôãd
);

453 
	}
}

455 
	$hif_usb_£nd
(*
hif_h™dÀ
, 
u8
 
pùe_id
, 
sk_buff
 *
skb
)

457 
hif_devi˚_usb
 *
hif_dev
 = (hif_devi˚_usb *)
hif_h™dÀ
;

458 
ªt
 = 0;

460 
pùe_id
) {

461 
USB_WLAN_TX_PIPE
:

462 
ªt
 = 
	`hif_usb_£nd_tx
(
hif_dev
, 
skb
);

464 
USB_REG_OUT_PIPE
:

465 
ªt
 = 
	`hif_usb_£nd_ªgout
(
hif_dev
, 
skb
);

468 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

469 "©h9k_htc: InvÆid TXÖùe: %d\n", 
pùe_id
);

470 
ªt
 = -
EINVAL
;

474  
ªt
;

475 
	}
}

477 
ölöe
 
boﬁ
 
	$check_ödex
(
sk_buff
 *
skb
, 
u8
 
idx
)

479 
©h9k_htc_tx_˘l
 *
tx_˘l
;

481 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

483 i‡((
tx_˘l
->
ty≥
 =
ATH9K_HTC_AMPDU
) &&

484 (
tx_˘l
->
°a_idx
 =
idx
))

485  
åue
;

487  
Ál£
;

488 
	}
}

490 
	$hif_usb_°a_døö
(*
hif_h™dÀ
, 
u8
 
idx
)

492 
hif_devi˚_usb
 *
hif_dev
 = (hif_devi˚_usb *)
hif_h™dÀ
;

493 
sk_buff
 *
skb
, *
tmp
;

494 
Êags
;

496 
	`•ö_lock_úqßve
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

498 
	`skb_queue_wÆk_ß„
(&
hif_dev
->
tx
.
tx_skb_queue
, 
skb
, 
tmp
) {

499 i‡(
	`check_ödex
(
skb
, 
idx
)) {

500 
	`__skb_u∆ök
(
skb
, &
hif_dev
->
tx
.
tx_skb_queue
);

501 
	`©h9k_htc_txcom∂ëi⁄_cb
(
hif_dev
->
htc_h™dÀ
,

502 
skb
, 
Ál£
);

503 
hif_dev
->
tx
.
tx_skb_˙t
--;

504 
	`TX_STAT_INC
(
skb_Áûed
);

508 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

509 
	}
}

511 
©h9k_htc_hif
 
	ghif_usb
 = {

512 .
å™•‹t
 = 
ATH9K_HIF_USB
,

513 .
	g«me
 = "ath9k_hif_usb",

515 .
	gc⁄åﬁ_ul_pùe
 = 
USB_REG_OUT_PIPE
,

516 .
	gc⁄åﬁ_dl_pùe
 = 
USB_REG_IN_PIPE
,

518 .
	g°¨t
 = 
hif_usb_°¨t
,

519 .
	g°›
 = 
hif_usb_°›
,

520 .
	g°a_døö
 = 
hif_usb_°a_døö
,

521 .
	g£nd
 = 
hif_usb_£nd
,

524 
	$©h9k_hif_usb_rx_°ªam
(
hif_devi˚_usb
 *
hif_dev
,

525 
sk_buff
 *
skb
)

527 
sk_buff
 *
nskb
, *
skb_poﬁ
[
MAX_PKT_NUM_IN_TRANSFER
];

528 
ödex
 = 0, 
i
 = 0, 
Àn
 = 
skb
->len;

529 
rx_ªmaö_Àn
, 
rx_pkt_Àn
;

530 
u16
 
poﬁ_ödex
 = 0;

531 
u8
 *
±r
;

533 
	`•ö_lock
(&
hif_dev
->
rx_lock
);

535 
rx_ªmaö_Àn
 = 
hif_dev
->rx_remain_len;

536 
rx_pkt_Àn
 = 
hif_dev
->
rx_å™s„r_Àn
;

538 i‡(
rx_ªmaö_Àn
 != 0) {

539 
sk_buff
 *
ªmaö_skb
 = 
hif_dev
->remain_skb;

541 i‡(
ªmaö_skb
) {

542 
±r
 = (
u8
 *Ë
ªmaö_skb
->
d©a
;

544 
ödex
 = 
rx_ªmaö_Àn
;

545 
rx_ªmaö_Àn
 -
hif_dev
->
rx_∑d_Àn
;

546 
±r
 +
rx_pkt_Àn
;

548 
	`mem˝y
(
±r
, 
skb
->
d©a
, 
rx_ªmaö_Àn
);

550 
rx_pkt_Àn
 +
rx_ªmaö_Àn
;

551 
hif_dev
->
rx_ªmaö_Àn
 = 0;

552 
	`skb_put
(
ªmaö_skb
, 
rx_pkt_Àn
);

554 
skb_poﬁ
[
poﬁ_ödex
++] = 
ªmaö_skb
;

557 
ödex
 = 
rx_ªmaö_Àn
;

561 
	`•ö_u∆ock
(&
hif_dev
->
rx_lock
);

563 
ödex
 < 
Àn
) {

564 
u16
 
pkt_Àn
;

565 
u16
 
pkt_èg
;

566 
u16
 
∑d_Àn
;

567 
chk_idx
;

569 
±r
 = (
u8
 *Ë
skb
->
d©a
;

571 
pkt_Àn
 = 
	`gë_u«lig√d_À16
(
±r
 + 
ödex
);

572 
pkt_èg
 = 
	`gë_u«lig√d_À16
(
±r
 + 
ödex
 + 2);

574 i‡(
pkt_èg
 !
ATH_USB_RX_STREAM_MODE_TAG
) {

575 
	`RX_STAT_INC
(
skb_dr›≥d
);

579 
∑d_Àn
 = 4 - (
pkt_Àn
 & 0x3);

580 i‡(
∑d_Àn
 == 4)

581 
∑d_Àn
 = 0;

583 
chk_idx
 = 
ödex
;

584 
ödex
 = index + 4 + 
pkt_Àn
 + 
∑d_Àn
;

586 i‡(
ödex
 > 
MAX_RX_BUF_SIZE
) {

587 
	`•ö_lock
(&
hif_dev
->
rx_lock
);

588 
hif_dev
->
rx_ªmaö_Àn
 = 
ödex
 - 
MAX_RX_BUF_SIZE
;

589 
hif_dev
->
rx_å™s„r_Àn
 =

590 
MAX_RX_BUF_SIZE
 - 
chk_idx
 - 4;

591 
hif_dev
->
rx_∑d_Àn
 = 
∑d_Àn
;

593 
nskb
 = 
	`__dev_Æloc_skb
(
pkt_Àn
 + 32, 
GFP_ATOMIC
);

594 i‡(!
nskb
) {

595 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

597 
	`•ö_u∆ock
(&
hif_dev
->
rx_lock
);

598 
îr
;

600 
	`skb_ª£rve
(
nskb
, 32);

601 
	`RX_STAT_INC
(
skb_Æloˇãd
);

603 
	`mem˝y
(
nskb
->
d©a
, &(
skb
->d©a[
chk_idx
+4]),

604 
hif_dev
->
rx_å™s„r_Àn
);

607 
hif_dev
->
ªmaö_skb
 = 
nskb
;

608 
	`•ö_u∆ock
(&
hif_dev
->
rx_lock
);

610 
nskb
 = 
	`__dev_Æloc_skb
(
pkt_Àn
 + 32, 
GFP_ATOMIC
);

611 i‡(!
nskb
) {

612 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

614 
îr
;

616 
	`skb_ª£rve
(
nskb
, 32);

617 
	`RX_STAT_INC
(
skb_Æloˇãd
);

619 
	`mem˝y
(
nskb
->
d©a
, &(
skb
->d©a[
chk_idx
+4]), 
pkt_Àn
);

620 
	`skb_put
(
nskb
, 
pkt_Àn
);

621 
skb_poﬁ
[
poﬁ_ödex
++] = 
nskb
;

625 
îr
:

626 
i
 = 0; i < 
poﬁ_ödex
; i++) {

627 
	`RX_STAT_ADD
(
skb_com∂ëed_byãs
, 
skb_poﬁ
[
i
]->
Àn
);

628 
	`©h9k_htc_rx_msg
(
hif_dev
->
htc_h™dÀ
, 
skb_poﬁ
[
i
],

629 
skb_poﬁ
[
i
]->
Àn
, 
USB_WLAN_RX_PIPE
);

630 
	`RX_STAT_INC
(
skb_com∂ëed
);

632 
	}
}

634 
	$©h9k_hif_usb_rx_cb
(
urb
 *urb)

636 
sk_buff
 *
skb
 = (sk_buf‡*Ë
urb
->
c⁄ãxt
;

637 
hif_devi˚_usb
 *
hif_dev
 =

638 
	`usb_gë_ötfd©a
(
	`usb_i‚um_to_if
(
urb
->
dev
, 0));

639 
ªt
;

641 i‡(!
skb
)

644 i‡(!
hif_dev
)

645 
‰ì
;

647 
urb
->
°©us
) {

650 -
ENOENT
:

651 -
ECONNRESET
:

652 -
ENODEV
:

653 -
ESHUTDOWN
:

654 
‰ì
;

656 
ªsubmô
;

659 i‡(
	`likñy
(
urb
->
a˘uÆ_Àngth
 != 0)) {

660 
	`skb_put
(
skb
, 
urb
->
a˘uÆ_Àngth
);

661 
	`©h9k_hif_usb_rx_°ªam
(
hif_dev
, 
skb
);

664 
ªsubmô
:

665 
	`skb_ª£t_èû_poöãr
(
skb
);

666 
	`skb_åim
(
skb
, 0);

668 
	`usb_™ch‹_urb
(
urb
, &
hif_dev
->
rx_submôãd
);

669 
ªt
 = 
	`usb_submô_urb
(
urb
, 
GFP_ATOMIC
);

670 i‡(
ªt
) {

671 
	`usb_u«nch‹_urb
(
urb
);

672 
‰ì
;

676 
‰ì
:

677 
	`k‰ì_skb
(
skb
);

678 
	}
}

680 
	$©h9k_hif_usb_ªg_ö_cb
(
urb
 *urb)

682 
sk_buff
 *
skb
 = (sk_buf‡*Ë
urb
->
c⁄ãxt
;

683 
sk_buff
 *
nskb
;

684 
hif_devi˚_usb
 *
hif_dev
 =

685 
	`usb_gë_ötfd©a
(
	`usb_i‚um_to_if
(
urb
->
dev
, 0));

686 
ªt
;

688 i‡(!
skb
)

691 i‡(!
hif_dev
)

692 
‰ì
;

694 
urb
->
°©us
) {

697 -
ENOENT
:

698 -
ECONNRESET
:

699 -
ENODEV
:

700 -
ESHUTDOWN
:

701 
‰ì
;

703 
	`skb_ª£t_èû_poöãr
(
skb
);

704 
	`skb_åim
(
skb
, 0);

706 
ªsubmô
;

709 i‡(
	`likñy
(
urb
->
a˘uÆ_Àngth
 != 0)) {

710 
	`skb_put
(
skb
, 
urb
->
a˘uÆ_Àngth
);

713 
	`©h9k_htc_rx_msg
(
hif_dev
->
htc_h™dÀ
, 
skb
,

714 
skb
->
Àn
, 
USB_REG_IN_PIPE
);

717 
nskb
 = 
	`Æloc_skb
(
MAX_REG_IN_BUF_SIZE
, 
GFP_ATOMIC
);

718 i‡(!
nskb
) {

719 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

721 
urb
->
c⁄ãxt
 = 
NULL
;

725 
	`usb_fûl_öt_urb
(
urb
, 
hif_dev
->
udev
,

726 
	`usb_rcvöçùe
(
hif_dev
->
udev
,

727 
USB_REG_IN_PIPE
),

728 
nskb
->
d©a
, 
MAX_REG_IN_BUF_SIZE
,

729 
©h9k_hif_usb_ªg_ö_cb
, 
nskb
, 1);

732 
ªsubmô
:

733 
	`usb_™ch‹_urb
(
urb
, &
hif_dev
->
ªg_ö_submôãd
);

734 
ªt
 = 
	`usb_submô_urb
(
urb
, 
GFP_ATOMIC
);

735 i‡(
ªt
) {

736 
	`usb_u«nch‹_urb
(
urb
);

737 
‰ì
;

741 
‰ì
:

742 
	`k‰ì_skb
(
skb
);

743 
urb
->
c⁄ãxt
 = 
NULL
;

744 
	}
}

746 
	$©h9k_hif_usb_dóŒoc_tx_urbs
(
hif_devi˚_usb
 *
hif_dev
)

748 
tx_buf
 *tx_bu‡
NULL
, *
tx_buf_tmp
 = NULL;

749 
Êags
;

751 
	`li°_f‹_óch_íåy_ß„
(
tx_buf
, 
tx_buf_tmp
,

752 &
hif_dev
->
tx
.
tx_buf
, 
li°
) {

753 
	`usb_kûl_urb
(
tx_buf
->
urb
);

754 
	`li°_dñ
(&
tx_buf
->
li°
);

755 
	`usb_‰ì_urb
(
tx_buf
->
urb
);

756 
	`k‰ì
(
tx_buf
->
buf
);

757 
	`k‰ì
(
tx_buf
);

760 
	`•ö_lock_úqßve
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

761 
hif_dev
->
tx
.
Êags
 |
HIF_USB_TX_FLUSH
;

762 
	`•ö_u∆ock_úqª°‹e
(&
hif_dev
->
tx
.
tx_lock
, 
Êags
);

764 
	`li°_f‹_óch_íåy_ß„
(
tx_buf
, 
tx_buf_tmp
,

765 &
hif_dev
->
tx
.
tx_≥ndög
, 
li°
) {

766 
	`usb_kûl_urb
(
tx_buf
->
urb
);

767 
	`li°_dñ
(&
tx_buf
->
li°
);

768 
	`usb_‰ì_urb
(
tx_buf
->
urb
);

769 
	`k‰ì
(
tx_buf
->
buf
);

770 
	`k‰ì
(
tx_buf
);

773 
	`usb_kûl_™ch‹ed_urbs
(&
hif_dev
->
mgmt_submôãd
);

774 
	}
}

776 
	$©h9k_hif_usb_Æloc_tx_urbs
(
hif_devi˚_usb
 *
hif_dev
)

778 
tx_buf
 *tx_buf;

779 
i
;

781 
	`INIT_LIST_HEAD
(&
hif_dev
->
tx
.
tx_buf
);

782 
	`INIT_LIST_HEAD
(&
hif_dev
->
tx
.
tx_≥ndög
);

783 
	`•ö_lock_öô
(&
hif_dev
->
tx
.
tx_lock
);

784 
	`__skb_queue_hód_öô
(&
hif_dev
->
tx
.
tx_skb_queue
);

785 
	`öô_usb_™ch‹
(&
hif_dev
->
mgmt_submôãd
);

787 
i
 = 0; i < 
MAX_TX_URB_NUM
; i++) {

788 
tx_buf
 = 
	`kzÆloc
((tx_buf), 
GFP_KERNEL
);

789 i‡(!
tx_buf
)

790 
îr
;

792 
tx_buf
->
buf
 = 
	`kzÆloc
(
MAX_TX_BUF_SIZE
, 
GFP_KERNEL
);

793 i‡(!
tx_buf
->
buf
)

794 
îr
;

796 
tx_buf
->
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_KERNEL
);

797 i‡(!
tx_buf
->
urb
)

798 
îr
;

800 
tx_buf
->
hif_dev
 = hif_dev;

801 
	`__skb_queue_hód_öô
(&
tx_buf
->
skb_queue
);

803 
	`li°_add_èû
(&
tx_buf
->
li°
, &
hif_dev
->
tx
.tx_buf);

806 
hif_dev
->
tx
.
tx_buf_˙t
 = 
MAX_TX_URB_NUM
;

809 
îr
:

810 i‡(
tx_buf
) {

811 
	`k‰ì
(
tx_buf
->
buf
);

812 
	`k‰ì
(
tx_buf
);

814 
	`©h9k_hif_usb_dóŒoc_tx_urbs
(
hif_dev
);

815  -
ENOMEM
;

816 
	}
}

818 
	$©h9k_hif_usb_dóŒoc_rx_urbs
(
hif_devi˚_usb
 *
hif_dev
)

820 
	`usb_kûl_™ch‹ed_urbs
(&
hif_dev
->
rx_submôãd
);

821 
	}
}

823 
	$©h9k_hif_usb_Æloc_rx_urbs
(
hif_devi˚_usb
 *
hif_dev
)

825 
urb
 *urb = 
NULL
;

826 
sk_buff
 *
skb
 = 
NULL
;

827 
i
, 
ªt
;

829 
	`öô_usb_™ch‹
(&
hif_dev
->
rx_submôãd
);

830 
	`•ö_lock_öô
(&
hif_dev
->
rx_lock
);

832 
i
 = 0; i < 
MAX_RX_URB_NUM
; i++) {

835 
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_KERNEL
);

836 i‡(
urb
 =
NULL
) {

837 
ªt
 = -
ENOMEM
;

838 
îr_urb
;

842 
skb
 = 
	`Æloc_skb
(
MAX_RX_BUF_SIZE
, 
GFP_KERNEL
);

843 i‡(!
skb
) {

844 
ªt
 = -
ENOMEM
;

845 
îr_skb
;

848 
	`usb_fûl_bulk_urb
(
urb
, 
hif_dev
->
udev
,

849 
	`usb_rcvbulkpùe
(
hif_dev
->
udev
,

850 
USB_WLAN_RX_PIPE
),

851 
skb
->
d©a
, 
MAX_RX_BUF_SIZE
,

852 
©h9k_hif_usb_rx_cb
, 
skb
);

855 
	`usb_™ch‹_urb
(
urb
, &
hif_dev
->
rx_submôãd
);

858 
ªt
 = 
	`usb_submô_urb
(
urb
, 
GFP_KERNEL
);

859 i‡(
ªt
) {

860 
	`usb_u«nch‹_urb
(
urb
);

861 
îr_submô
;

868 
	`usb_‰ì_urb
(
urb
);

873 
îr_submô
:

874 
	`k‰ì_skb
(
skb
);

875 
îr_skb
:

876 
	`usb_‰ì_urb
(
urb
);

877 
îr_urb
:

878 
	`©h9k_hif_usb_dóŒoc_rx_urbs
(
hif_dev
);

879  
ªt
;

880 
	}
}

882 
	$©h9k_hif_usb_dóŒoc_ªg_ö_urbs
(
hif_devi˚_usb
 *
hif_dev
)

884 
	`usb_kûl_™ch‹ed_urbs
(&
hif_dev
->
ªg_ö_submôãd
);

885 
	}
}

887 
	$©h9k_hif_usb_Æloc_ªg_ö_urbs
(
hif_devi˚_usb
 *
hif_dev
)

889 
urb
 *urb = 
NULL
;

890 
sk_buff
 *
skb
 = 
NULL
;

891 
i
, 
ªt
;

893 
	`öô_usb_™ch‹
(&
hif_dev
->
ªg_ö_submôãd
);

895 
i
 = 0; i < 
MAX_REG_IN_URB_NUM
; i++) {

898 
urb
 = 
	`usb_Æloc_urb
(0, 
GFP_KERNEL
);

899 i‡(
urb
 =
NULL
) {

900 
ªt
 = -
ENOMEM
;

901 
îr_urb
;

905 
skb
 = 
	`Æloc_skb
(
MAX_REG_IN_BUF_SIZE
, 
GFP_KERNEL
);

906 i‡(!
skb
) {

907 
ªt
 = -
ENOMEM
;

908 
îr_skb
;

911 
	`usb_fûl_öt_urb
(
urb
, 
hif_dev
->
udev
,

912 
	`usb_rcvöçùe
(
hif_dev
->
udev
,

913 
USB_REG_IN_PIPE
),

914 
skb
->
d©a
, 
MAX_REG_IN_BUF_SIZE
,

915 
©h9k_hif_usb_ªg_ö_cb
, 
skb
, 1);

918 
	`usb_™ch‹_urb
(
urb
, &
hif_dev
->
ªg_ö_submôãd
);

921 
ªt
 = 
	`usb_submô_urb
(
urb
, 
GFP_KERNEL
);

922 i‡(
ªt
) {

923 
	`usb_u«nch‹_urb
(
urb
);

924 
îr_submô
;

931 
	`usb_‰ì_urb
(
urb
);

936 
îr_submô
:

937 
	`k‰ì_skb
(
skb
);

938 
îr_skb
:

939 
	`usb_‰ì_urb
(
urb
);

940 
îr_urb
:

941 
	`©h9k_hif_usb_dóŒoc_ªg_ö_urbs
(
hif_dev
);

942  
ªt
;

943 
	}
}

945 
	$©h9k_hif_usb_Æloc_urbs
(
hif_devi˚_usb
 *
hif_dev
)

948 
	`öô_usb_™ch‹
(&
hif_dev
->
ªgout_submôãd
);

951 i‡(
	`©h9k_hif_usb_Æloc_tx_urbs
(
hif_dev
) < 0)

952 
îr
;

955 i‡(
	`©h9k_hif_usb_Æloc_rx_urbs
(
hif_dev
) < 0)

956 
îr_rx
;

959 i‡(
	`©h9k_hif_usb_Æloc_ªg_ö_urbs
(
hif_dev
) < 0)

960 
îr_ªg
;

963 
îr_ªg
:

964 
	`©h9k_hif_usb_dóŒoc_rx_urbs
(
hif_dev
);

965 
îr_rx
:

966 
	`©h9k_hif_usb_dóŒoc_tx_urbs
(
hif_dev
);

967 
îr
:

968  -
ENOMEM
;

969 
	}
}

971 
	$©h9k_hif_usb_dóŒoc_urbs
(
hif_devi˚_usb
 *
hif_dev
)

973 
	`usb_kûl_™ch‹ed_urbs
(&
hif_dev
->
ªgout_submôãd
);

974 
	`©h9k_hif_usb_dóŒoc_ªg_ö_urbs
(
hif_dev
);

975 
	`©h9k_hif_usb_dóŒoc_tx_urbs
(
hif_dev
);

976 
	`©h9k_hif_usb_dóŒoc_rx_urbs
(
hif_dev
);

977 
	}
}

979 
	$©h9k_hif_usb_dow∆ﬂd_fw
(
hif_devi˚_usb
 *
hif_dev
)

981 
å™s„r
, 
îr
;

982 c⁄° *
d©a
 = 
hif_dev
->
fw_d©a
;

983 
size_t
 
Àn
 = 
hif_dev
->
fw_size
;

984 
u32
 
addr
 = 
AR9271_FIRMWARE
;

985 
u8
 *
buf
 = 
	`kzÆloc
(4096, 
GFP_KERNEL
);

986 
u32
 
fúm_off£t
;

988 i‡(!
buf
)

989  -
ENOMEM
;

991 
Àn
) {

992 
å™s„r
 = 
	`mö_t
(
size_t
, 
Àn
, 4096);

993 
	`mem˝y
(
buf
, 
d©a
, 
å™s„r
);

995 
îr
 = 
	`usb_c⁄åﬁ_msg
(
hif_dev
->
udev
,

996 
	`usb_¢d˘æpùe
(
hif_dev
->
udev
, 0),

997 
FIRMWARE_DOWNLOAD
, 0x40 | 
USB_DIR_OUT
,

998 
addr
 >> 8, 0, 
buf
, 
å™s„r
, 
HZ
);

999 i‡(
îr
 < 0) {

1000 
	`k‰ì
(
buf
);

1001  
îr
;

1004 
Àn
 -
å™s„r
;

1005 
d©a
 +
å™s„r
;

1006 
addr
 +
å™s„r
;

1008 
	`k‰ì
(
buf
);

1010 i‡(
	`IS_AR7010_DEVICE
(
hif_dev
->
usb_devi˚_id
->
drivî_öfo
))

1011 
fúm_off£t
 = 
AR7010_FIRMWARE_TEXT
;

1013 
fúm_off£t
 = 
AR9271_FIRMWARE_TEXT
;

1018 
îr
 = 
	`usb_c⁄åﬁ_msg
(
hif_dev
->
udev
, 
	`usb_¢d˘æpùe
(hif_dev->udev, 0),

1019 
FIRMWARE_DOWNLOAD_COMP
,

1020 0x40 | 
USB_DIR_OUT
,

1021 
fúm_off£t
 >> 8, 0, 
NULL
, 0, 
HZ
);

1022 i‡(
îr
)

1023  -
EIO
;

1025 
	`dev_öfo
(&
hif_dev
->
udev
->
dev
, "ath9k_htc: Transferred FW: %s, size: %ld\n",

1026 
hif_dev
->
fw_«me
, (Ëhif_dev->
fw_size
);

1029 
	}
}

1031 
	$©h9k_hif_usb_dev_öô
(
hif_devi˚_usb
 *
hif_dev
)

1033 
ªt
;

1035 
ªt
 = 
	`©h9k_hif_usb_dow∆ﬂd_fw
(
hif_dev
);

1036 i‡(
ªt
) {

1037 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

1039 
hif_dev
->
fw_«me
);

1040  
ªt
;

1044 
ªt
 = 
	`©h9k_hif_usb_Æloc_urbs
(
hif_dev
);

1045 i‡(
ªt
) {

1046 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

1048  
ªt
;

1052 
	}
}

1054 
	$©h9k_hif_usb_dev_deöô
(
hif_devi˚_usb
 *
hif_dev
)

1056 
	`©h9k_hif_usb_dóŒoc_urbs
(
hif_dev
);

1057 
	}
}

1063 
	$©h9k_hif_usb_fúmw¨e_Áû
(
hif_devi˚_usb
 *
hif_dev
)

1065 
devi˚
 *
dev
 = &
hif_dev
->
udev
->dev;

1066 
devi˚
 *
∑ª¡
 = 
dev
->parent;

1068 
	`com∂ëe_Æl
(&
hif_dev
->
fw_d⁄e
);

1070 i‡(
∑ª¡
)

1071 
	`devi˚_lock
(
∑ª¡
);

1073 
	`devi˚_ªÀa£_drivî
(
dev
);

1075 i‡(
∑ª¡
)

1076 
	`devi˚_u∆ock
(
∑ª¡
);

1077 
	}
}

1079 
©h9k_hif_usb_fúmw¨e_cb
(c⁄° 
fúmw¨e
 *
fw
, *
c⁄ãxt
);

1082 
	$©h9k_hif_ªque°_fúmw¨e
(
hif_devi˚_usb
 *
hif_dev
,

1083 
boﬁ
 
fú°
)

1085 
ödex
[8], *
chù
;

1086 
ªt
;

1088 i‡(
fú°
) {

1089 i‡(
htc_u£_dev_fw
) {

1090 
hif_dev
->
fw_mö‹_ödex
 = 
FIRMWARE_MINOR_IDX_MAX
 + 1;

1091 
	`•rötf
(
ödex
, "%s", "dev");

1093 
hif_dev
->
fw_mö‹_ödex
 = 
FIRMWARE_MINOR_IDX_MAX
;

1094 
	`•rötf
(
ödex
, "%d", 
hif_dev
->
fw_mö‹_ödex
);

1097 
hif_dev
->
fw_mö‹_ödex
--;

1098 
	`•rötf
(
ödex
, "%d", 
hif_dev
->
fw_mö‹_ödex
);

1102 i‡(
MAJOR_VERSION_REQ
 =1 && 
hif_dev
->
fw_mö‹_ödex
 == 3) {

1103 c⁄° *
fûíame
;

1105 i‡(
	`IS_AR7010_DEVICE
(
hif_dev
->
usb_devi˚_id
->
drivî_öfo
))

1106 
fûíame
 = 
FIRMWARE_AR7010_1_1
;

1108 
fûíame
 = 
FIRMWARE_AR9271
;

1113 
	`¢¥ötf
(
hif_dev
->
fw_«me
, (hif_dev->fw_name),

1114 "%s", 
fûíame
);

1116 } i‡(
hif_dev
->
fw_mö‹_ödex
 < 
FIRMWARE_MINOR_IDX_MIN
) {

1117 
	`dev_îr
(&
hif_dev
->
udev
->
dev
, "no suitable firmware found!\n");

1119  -
ENOENT
;

1121 i‡(
	`IS_AR7010_DEVICE
(
hif_dev
->
usb_devi˚_id
->
drivî_öfo
))

1122 
chù
 = "7010";

1124 
chù
 = "9271";

1130 
	`¢¥ötf
(
hif_dev
->
fw_«me
, (hif_dev->fw_name),

1131 "%s/htc_%s-%d.%s.0.fw", 
HTC_FW_PATH
,

1132 
chù
, 
MAJOR_VERSION_REQ
, 
ödex
);

1135 
ªt
 = 
	`ªque°_fúmw¨e_nowaô
(
THIS_MODULE
, 
åue
, 
hif_dev
->
fw_«me
,

1136 &
hif_dev
->
udev
->
dev
, 
GFP_KERNEL
,

1137 
hif_dev
, 
©h9k_hif_usb_fúmw¨e_cb
);

1138 i‡(
ªt
) {

1139 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

1141 
hif_dev
->
fw_«me
);

1142  
ªt
;

1145 
	`dev_öfo
(&
hif_dev
->
udev
->
dev
, "ath9k_htc: Firmware %sÑequested\n",

1146 
hif_dev
->
fw_«me
);

1148  
ªt
;

1149 
	}
}

1151 
	$©h9k_hif_usb_fúmw¨e_cb
(c⁄° 
fúmw¨e
 *
fw
, *
c⁄ãxt
)

1153 
hif_devi˚_usb
 *
hif_dev
 = 
c⁄ãxt
;

1154 
ªt
;

1156 i‡(!
fw
) {

1157 
ªt
 = 
	`©h9k_hif_ªque°_fúmw¨e
(
hif_dev
, 
Ál£
);

1158 i‡(!
ªt
)

1161 
	`dev_îr
(&
hif_dev
->
udev
->
dev
,

1163 
hif_dev
->
fw_«me
);

1164 
îr_fw
;

1167 
hif_dev
->
htc_h™dÀ
 = 
	`©h9k_htc_hw_Æloc
(hif_dev, &
hif_usb
,

1168 &
hif_dev
->
udev
->
dev
);

1169 i‡(
hif_dev
->
htc_h™dÀ
 =
NULL
)

1170 
îr_dev_Æloc
;

1172 
hif_dev
->
fw_d©a
 = 
fw
->
d©a
;

1173 
hif_dev
->
fw_size
 = 
fw
->
size
;

1177 
ªt
 = 
	`©h9k_hif_usb_dev_öô
(
hif_dev
);

1178 i‡(
ªt
)

1179 
îr_dev_öô
;

1181 
ªt
 = 
	`©h9k_htc_hw_öô
(
hif_dev
->
htc_h™dÀ
,

1182 &
hif_dev
->
öãrÁ˚
->
dev
,

1183 
hif_dev
->
usb_devi˚_id
->
idProdu˘
,

1184 
hif_dev
->
udev
->
¥odu˘
,

1185 
hif_dev
->
usb_devi˚_id
->
drivî_öfo
);

1186 i‡(
ªt
) {

1187 
ªt
 = -
EINVAL
;

1188 
îr_htc_hw_öô
;

1191 
	`ªÀa£_fúmw¨e
(
fw
);

1192 
hif_dev
->
Êags
 |
HIF_USB_READY
;

1193 
	`com∂ëe_Æl
(&
hif_dev
->
fw_d⁄e
);

1197 
îr_htc_hw_öô
:

1198 
	`©h9k_hif_usb_dev_deöô
(
hif_dev
);

1199 
îr_dev_öô
:

1200 
	`©h9k_htc_hw_‰ì
(
hif_dev
->
htc_h™dÀ
);

1201 
îr_dev_Æloc
:

1202 
	`ªÀa£_fúmw¨e
(
fw
);

1203 
îr_fw
:

1204 
	`©h9k_hif_usb_fúmw¨e_Áû
(
hif_dev
);

1205 
	}
}

1210 
	$£nd_eje˘_comm™d
(
usb_öãrÁ˚
 *
öãrÁ˚
)

1212 
usb_devi˚
 *
udev
 = 
	`öãrÁ˚_to_usbdev
(
öãrÁ˚
);

1213 
usb_ho°_öãrÁ˚
 *
iÁ˚_desc
 = &
öãrÁ˚
->
Æt£âög
[0];

1214 
usb_ídpoöt_des¸ùt‹
 *
ídpoöt
;

1215 *
cmd
;

1216 
u8
 
bulk_out_ï
;

1217 
r
;

1220 
r
 = 1;Ñ >= 0;Ñ--) {

1221 
ídpoöt
 = &
iÁ˚_desc
->ídpoöt[
r
].
desc
;

1222 i‡(
	`usb_ídpoöt_dú_out
(
ídpoöt
) &&

1223 
	`usb_ídpoöt_x„r_bulk
(
ídpoöt
)) {

1224 
bulk_out_ï
 = 
ídpoöt
->
bEndpoötAddªss
;

1228 i‡(
r
 == -1) {

1229 
	`dev_îr
(&
udev
->
dev
,

1231  -
ENODEV
;

1234 
cmd
 = 
	`kzÆloc
(31, 
GFP_KERNEL
);

1235 i‡(
cmd
 =
NULL
)

1236  -
ENODEV
;

1239 
cmd
[0] = 0x55;

1240 
cmd
[1] = 0x53;

1241 
cmd
[2] = 0x42;

1242 
cmd
[3] = 0x43;

1243 
cmd
[14] = 6;

1245 
cmd
[15] = 0x1b;

1246 
cmd
[19] = 0x2;

1248 
	`dev_öfo
(&
udev
->
dev
, "Ejecting storage device...\n");

1249 
r
 = 
	`usb_bulk_msg
(
udev
, 
	`usb_¢dbulkpùe
(udev, 
bulk_out_ï
),

1250 
cmd
, 31, 
NULL
, 2000);

1251 
	`k‰ì
(
cmd
);

1252 i‡(
r
)

1253  
r
;

1258 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

1260 
	}
}

1262 
	$©h9k_hif_usb_¥obe
(
usb_öãrÁ˚
 *
öãrÁ˚
,

1263 c⁄° 
usb_devi˚_id
 *
id
)

1265 
usb_devi˚
 *
udev
 = 
	`öãrÁ˚_to_usbdev
(
öãrÁ˚
);

1266 
hif_devi˚_usb
 *
hif_dev
;

1267 
ªt
 = 0;

1269 i‡(
id
->
drivî_öfo
 =
STORAGE_DEVICE
)

1270  
	`£nd_eje˘_comm™d
(
öãrÁ˚
);

1272 
hif_dev
 = 
	`kzÆloc
((
hif_devi˚_usb
), 
GFP_KERNEL
);

1273 i‡(!
hif_dev
) {

1274 
ªt
 = -
ENOMEM
;

1275 
îr_Æloc
;

1278 
	`usb_gë_dev
(
udev
);

1280 
hif_dev
->
udev
 = udev;

1281 
hif_dev
->
öãrÁ˚
 = interface;

1282 
hif_dev
->
usb_devi˚_id
 = 
id
;

1283 #ifde‡
CONFIG_PM


1284 
udev
->
ª£t_ªsume
 = 1;

1286 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
hif_dev
);

1288 
	`öô_com∂ëi⁄
(&
hif_dev
->
fw_d⁄e
);

1290 
ªt
 = 
	`©h9k_hif_ªque°_fúmw¨e
(
hif_dev
, 
åue
);

1291 i‡(
ªt
)

1292 
îr_fw_ªq
;

1294  
ªt
;

1296 
îr_fw_ªq
:

1297 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

1298 
	`k‰ì
(
hif_dev
);

1299 
	`usb_put_dev
(
udev
);

1300 
îr_Æloc
:

1301  
ªt
;

1302 
	}
}

1304 
	$©h9k_hif_usb_ªboŸ
(
usb_devi˚
 *
udev
)

1306 
u32
 
ªboŸ_cmd
 = 0xffffffff;

1307 *
buf
;

1308 
ªt
;

1310 
buf
 = 
	`kmemdup
(&
ªboŸ_cmd
, 4, 
GFP_KERNEL
);

1311 i‡(!
buf
)

1314 
ªt
 = 
	`usb_öãºu±_msg
(
udev
, 
	`usb_¢döçùe
(udev, 
USB_REG_OUT_PIPE
),

1315 
buf
, 4, 
NULL
, 
HZ
);

1316 i‡(
ªt
)

1317 
	`dev_îr
(&
udev
->
dev
, "ath9k_htc: USBÑeboot failed\n");

1319 
	`k‰ì
(
buf
);

1320 
	}
}

1322 
	$©h9k_hif_usb_disc⁄√˘
(
usb_öãrÁ˚
 *
öãrÁ˚
)

1324 
usb_devi˚
 *
udev
 = 
	`öãrÁ˚_to_usbdev
(
öãrÁ˚
);

1325 
hif_devi˚_usb
 *
hif_dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

1326 
boﬁ
 
u≈lugged
 = (
udev
->
°©e
 =
USB_STATE_NOTATTACHED
Ë? 
åue
 : 
Ál£
;

1328 i‡(!
hif_dev
)

1331 
	`waô_f‹_com∂ëi⁄
(&
hif_dev
->
fw_d⁄e
);

1333 i‡(
hif_dev
->
Êags
 & 
HIF_USB_READY
) {

1334 
	`©h9k_htc_hw_deöô
(
hif_dev
->
htc_h™dÀ
, 
u≈lugged
);

1335 
	`©h9k_htc_hw_‰ì
(
hif_dev
->
htc_h™dÀ
);

1336 
	`©h9k_hif_usb_dev_deöô
(
hif_dev
);

1339 
	`usb_£t_ötfd©a
(
öãrÁ˚
, 
NULL
);

1343 i‡(!
u≈lugged
 && (
hif_dev
->
Êags
 & 
HIF_USB_READY
))

1344 
	`©h9k_hif_usb_ªboŸ
(
udev
);

1346 
	`k‰ì
(
hif_dev
);

1347 
	`dev_öfo
(&
udev
->
dev
, "ath9k_htc: USBÜayer deinitialized\n");

1348 
	`usb_put_dev
(
udev
);

1349 
	}
}

1351 #ifde‡
CONFIG_PM


1352 
	$©h9k_hif_usb_su•íd
(
usb_öãrÁ˚
 *
öãrÁ˚
,

1353 
pm_mesßge_t
 
mesßge
)

1355 
hif_devi˚_usb
 *
hif_dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

1361 i‡(!(
hif_dev
->
Êags
 & 
HIF_USB_START
))

1362 
	`©h9k_htc_su•íd
(
hif_dev
->
htc_h™dÀ
);

1364 
	`waô_f‹_com∂ëi⁄
(&
hif_dev
->
fw_d⁄e
);

1366 i‡(
hif_dev
->
Êags
 & 
HIF_USB_READY
)

1367 
	`©h9k_hif_usb_dóŒoc_urbs
(
hif_dev
);

1370 
	}
}

1372 
	$©h9k_hif_usb_ªsume
(
usb_öãrÁ˚
 *
öãrÁ˚
)

1374 
hif_devi˚_usb
 *
hif_dev
 = 
	`usb_gë_ötfd©a
(
öãrÁ˚
);

1375 
htc_èrgë
 *
htc_h™dÀ
 = 
hif_dev
->htc_handle;

1376 
ªt
;

1377 c⁄° 
fúmw¨e
 *
fw
;

1379 
ªt
 = 
	`©h9k_hif_usb_Æloc_urbs
(
hif_dev
);

1380 i‡(
ªt
)

1381  
ªt
;

1383 i‡(
hif_dev
->
Êags
 & 
HIF_USB_READY
) {

1385 
ªt
 = 
	`ªque°_fúmw¨e
(&
fw
, 
hif_dev
->
fw_«me
,

1386 &
hif_dev
->
udev
->
dev
);

1387 i‡(
ªt
)

1388 
Áû_ªsume
;

1390 
hif_dev
->
fw_d©a
 = 
fw
->
d©a
;

1391 
hif_dev
->
fw_size
 = 
fw
->
size
;

1392 
ªt
 = 
	`©h9k_hif_usb_dow∆ﬂd_fw
(
hif_dev
);

1393 
	`ªÀa£_fúmw¨e
(
fw
);

1394 i‡(
ªt
)

1395 
Áû_ªsume
;

1397 
	`©h9k_hif_usb_dóŒoc_urbs
(
hif_dev
);

1398  -
EIO
;

1401 
	`mdñay
(100);

1403 
ªt
 = 
	`©h9k_htc_ªsume
(
htc_h™dÀ
);

1405 i‡(
ªt
)

1406 
Áû_ªsume
;

1410 
Áû_ªsume
:

1411 
	`©h9k_hif_usb_dóŒoc_urbs
(
hif_dev
);

1413  
ªt
;

1414 
	}
}

1417 
usb_drivî
 
	g©h9k_hif_usb_drivî
 = {

1418 .
«me
 = 
KBUILD_MODNAME
,

1419 .
	g¥obe
 = 
©h9k_hif_usb_¥obe
,

1420 .
	gdisc⁄√˘
 = 
©h9k_hif_usb_disc⁄√˘
,

1421 #ifde‡
CONFIG_PM


1422 .
	gsu•íd
 = 
©h9k_hif_usb_su•íd
,

1423 .
	gªsume
 = 
©h9k_hif_usb_ªsume
,

1424 .
	gª£t_ªsume
 = 
©h9k_hif_usb_ªsume
,

1426 .
	gid_èbÀ
 = 
©h9k_hif_usb_ids
,

1427 .
	gso·_unböd
 = 1,

1428 .
	gdißbÀ_hub_öôüãd_Õm
 = 1,

1431 
	$©h9k_hif_usb_öô
()

1433  
	`usb_ªgi°î
(&
©h9k_hif_usb_drivî
);

1434 
	}
}

1436 
	$©h9k_hif_usb_exô
()

1438 
	`usb_dîegi°î
(&
©h9k_hif_usb_drivî
);

1439 
	}
}

	@hif_usb.h

17 #i‚de‡
HTC_USB_H


18 
	#HTC_USB_H


	)

21 
	#FIRMWARE_AR7010_1_1
 "htc_7010.fw"

	)

22 
	#FIRMWARE_AR9271
 "htc_9271.fw"

	)

25 
	#MAJOR_VERSION_REQ
 1

	)

26 
	#MINOR_VERSION_REQ
 3

	)

28 
	#FIRMWARE_MINOR_IDX_MAX
 4

	)

29 
	#FIRMWARE_MINOR_IDX_MIN
 3

	)

30 
	#HTC_FW_PATH
 "©h9k_htc"

	)

32 
	#HTC_9271_MODULE_FW
 
HTC_FW_PATH
 "/htc_9271-" \

33 
	`__°rögify
(
MAJOR_VERSION_REQ
) \

34 "." 
	`__°rögify
(
FIRMWARE_MINOR_IDX_MAX
Ë".0.fw"

	)

35 
	#HTC_7010_MODULE_FW
 
HTC_FW_PATH
 "/htc_7010-" \

36 
	`__°rögify
(
MAJOR_VERSION_REQ
) \

37 "." 
	`__°rögify
(
FIRMWARE_MINOR_IDX_MAX
Ë".0.fw"

	)

39 
htc_u£_dev_fw
;

41 
	#IS_AR7010_DEVICE
(
_v
Ë(((_vË=
AR9280_USB
Ë|| ((_vË=
AR9287_USB
))

	)

43 
	#AR9271_FIRMWARE
 0x501000

	)

44 
	#AR9271_FIRMWARE_TEXT
 0x903000

	)

45 
	#AR7010_FIRMWARE_TEXT
 0x906000

	)

47 
	#FIRMWARE_DOWNLOAD
 0x30

	)

48 
	#FIRMWARE_DOWNLOAD_COMP
 0x31

	)

50 
	#ATH_USB_RX_STREAM_MODE_TAG
 0x4e00

	)

51 
	#ATH_USB_TX_STREAM_MODE_TAG
 0x697e

	)

54 
	#MAX_TX_URB_NUM
 8

	)

55 
	#MAX_TX_BUF_NUM
 256

	)

56 
	#MAX_TX_BUF_SIZE
 32768

	)

57 
	#MAX_TX_AGGR_NUM
 20

	)

59 
	#MAX_RX_URB_NUM
 8

	)

60 
	#MAX_RX_BUF_SIZE
 16384

	)

61 
	#MAX_PKT_NUM_IN_TRANSFER
 10

	)

63 
	#MAX_REG_OUT_URB_NUM
 1

	)

64 
	#MAX_REG_IN_URB_NUM
 64

	)

66 
	#MAX_REG_IN_BUF_SIZE
 64

	)

69 
	#USB_WLAN_TX_PIPE
 1

	)

70 
	#USB_WLAN_RX_PIPE
 2

	)

71 
	#USB_REG_IN_PIPE
 3

	)

72 
	#USB_REG_OUT_PIPE
 4

	)

74 
	#HIF_USB_MAX_RXPIPES
 2

	)

75 
	#HIF_USB_MAX_TXPIPES
 4

	)

77 
	stx_buf
 {

78 
u8
 *
	mbuf
;

79 
u16
 
	mÀn
;

80 
u16
 
	moff£t
;

81 
urb
 *
	murb
;

82 
sk_buff_hód
 
	mskb_queue
;

83 
hif_devi˚_usb
 *
	mhif_dev
;

84 
li°_hód
 
	mli°
;

87 
	#HIF_USB_TX_STOP
 
	`BIT
(0)

	)

88 
	#HIF_USB_TX_FLUSH
 
	`BIT
(1)

	)

90 
	shif_usb_tx
 {

91 
u8
 
	mÊags
;

92 
u8
 
	mtx_buf_˙t
;

93 
u16
 
	mtx_skb_˙t
;

94 
sk_buff_hód
 
	mtx_skb_queue
;

95 
li°_hód
 
	mtx_buf
;

96 
li°_hód
 
	mtx_≥ndög
;

97 
•ölock_t
 
	mtx_lock
;

100 
	scmd_buf
 {

101 
sk_buff
 *
	mskb
;

102 
hif_devi˚_usb
 *
	mhif_dev
;

105 
	#HIF_USB_START
 
	`BIT
(0)

	)

106 
	#HIF_USB_READY
 
	`BIT
(1)

	)

108 
	shif_devi˚_usb
 {

109 
usb_devi˚
 *
	mudev
;

110 
usb_öãrÁ˚
 *
	möãrÁ˚
;

111 c⁄° 
usb_devi˚_id
 *
	musb_devi˚_id
;

112 c⁄° *
	mfw_d©a
;

113 
size_t
 
	mfw_size
;

114 
com∂ëi⁄
 
	mfw_d⁄e
;

115 
htc_èrgë
 *
	mhtc_h™dÀ
;

116 
hif_usb_tx
 
	mtx
;

117 
usb_™ch‹
 
	mªgout_submôãd
;

118 
usb_™ch‹
 
	mrx_submôãd
;

119 
usb_™ch‹
 
	mªg_ö_submôãd
;

120 
usb_™ch‹
 
	mmgmt_submôãd
;

121 
sk_buff
 *
	mªmaö_skb
;

122 
	mfw_«me
[32];

123 
	mfw_mö‹_ödex
;

124 
	mrx_ªmaö_Àn
;

125 
	mrx_pkt_Àn
;

126 
	mrx_å™s„r_Àn
;

127 
	mrx_∑d_Àn
;

128 
•ölock_t
 
	mrx_lock
;

129 
u8
 
	mÊags
;

132 
©h9k_hif_usb_öô
();

133 
©h9k_hif_usb_exô
();

	@htc.h

17 #i‚de‡
HTC_H


18 
	#HTC_H


	)

20 
	~<löux/moduÀ.h
>

21 
	~<löux/usb.h
>

22 
	~<löux/fúmw¨e.h
>

23 
	~<löux/skbuff.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/ëhîdevi˚.h
>

26 
	~<löux/Àds.h
>

27 
	~<löux/¶ab.h
>

28 
	~<√t/mac80211.h
>

30 
	~"comm⁄.h
"

31 
	~"htc_h°.h
"

32 
	~"hif_usb.h
"

33 
	~"wmi.h
"

35 
	#ATH_STA_SHORT_CALINTERVAL
 1000

	)

36 
	#ATH_AP_SHORT_CALINTERVAL
 100

	)

37 
	#ATH_ANI_POLLINTERVAL
 100

	)

38 
	#ATH_LONG_CALINTERVAL
 30000

	)

39 
	#ATH_RESTART_CALINTERVAL
 1200000

	)

41 
	#ATH_DEFAULT_BMISS_LIMIT
 10

	)

42 
	#TSF_TO_TU
(
_h
, 
_l
) \

43 ((((
u32
)(
_h
)Ë<< 22Ë| (((u32)(
_l
)Ë>> 10))

	)

45 
õì80211_›s
 
©h9k_htc_›s
;

46 
htc_mod∑øm_nohw¸y±
;

47 #ifde‡
CONFIG_MAC80211_LEDS


48 
©h9k_htc_Àd_blök
;

51 
	ehtc_phymode
 {

52 
	mHTC_MODE_11NA
 = 0,

53 
	mHTC_MODE_11NG
 = 1

56 
	ehtc_›mode
 {

57 
	mHTC_M_STA
 = 1,

58 
	mHTC_M_IBSS
 = 0,

59 
	mHTC_M_AHDEMO
 = 3,

60 
	mHTC_M_HOSTAP
 = 6,

61 
	mHTC_M_MONITOR
 = 8,

62 
	mHTC_M_WDS
 = 2

65 
	#ATH9K_HTC_AMPDU
 1

	)

66 
	#ATH9K_HTC_NORMAL
 2

	)

67 
	#ATH9K_HTC_BEACON
 3

	)

68 
	#ATH9K_HTC_MGMT
 4

	)

70 
	#ATH9K_HTC_TX_CTSONLY
 0x1

	)

71 
	#ATH9K_HTC_TX_RTSCTS
 0x2

	)

73 
	stx_‰ame_hdr
 {

74 
u8
 
	md©a_ty≥
;

75 
u8
 
	mnode_idx
;

76 
u8
 
	mvif_idx
;

77 
u8
 
	mtidno
;

78 
__be32
 
	mÊags
;

79 
u8
 
	mkey_ty≥
;

80 
u8
 
	mkeyix
;

81 
u8
 
	mcookõ
;

82 
u8
 
	m∑d
;

83 } 
	g__∑cked
;

85 
	stx_mgmt_hdr
 {

86 
u8
 
	mnode_idx
;

87 
u8
 
	mvif_idx
;

88 
u8
 
	mtidno
;

89 
u8
 
	mÊags
;

90 
u8
 
	mkey_ty≥
;

91 
u8
 
	mkeyix
;

92 
u8
 
	mcookõ
;

93 
u8
 
	m∑d
;

94 } 
	g__∑cked
;

96 
	stx_bóc⁄_hódî
 {

97 
u8
 
	mvif_ödex
;

98 
u8
 
	mÀn_ch™ged
;

99 
u16
 
	mªv
;

100 } 
	g__∑cked
;

102 
	#MAX_TX_AMPDU_SUBFRAMES_9271
 17

	)

103 
	#MAX_TX_AMPDU_SUBFRAMES_7010
 22

	)

105 
	s©h9k_htc_ˇp_èrgë
 {

106 
__be32
 
	mampdu_limô
;

107 
u8
 
	mampdu_sub‰ames
;

108 
u8
 
	míabÀ_c€x
;

109 
u8
 
	mtx_chaömask
;

110 
u8
 
	m∑d
;

111 } 
	g__∑cked
;

113 
	s©h9k_htc_èrgë_vif
 {

114 
u8
 
	mödex
;

115 
u8
 
	m›mode
;

116 
u8
 
	mmyaddr
[
ETH_ALEN
];

117 
u8
 
	m©h_ˇp
;

118 
__be16
 
	mπ°hªshﬁd
;

119 
u8
 
	m∑d
;

120 } 
	g__∑cked
;

122 
	s©h9k_htc_èrgë_°a
 {

123 
u8
 
	mmaˇddr
[
ETH_ALEN
];

124 
u8
 
	mbssid
[
ETH_ALEN
];

125 
u8
 
	m°a_ödex
;

126 
u8
 
	mvif_ödex
;

127 
u8
 
	mis_vif_°a
;

128 
__be16
 
	mÊags
;

129 
__be16
 
	mhtˇp
;

130 
__be16
 
	mmaxampdu
;

131 
u8
 
	m∑d
;

132 } 
	g__∑cked
;

134 
	s©h9k_htc_èrgë_aggr
 {

135 
u8
 
	m°a_ödex
;

136 
u8
 
	mtidno
;

137 
u8
 
	maggr_íabÀ
;

138 
u8
 
	m∑ddög
;

139 } 
	g__∑cked
;

141 
	#ATH_HTC_RATE_MAX
 30

	)

143 
	#WLAN_RC_DS_FLAG
 0x01

	)

144 
	#WLAN_RC_40_FLAG
 0x02

	)

145 
	#WLAN_RC_SGI_FLAG
 0x04

	)

146 
	#WLAN_RC_HT_FLAG
 0x08

	)

147 
	#ATH_RC_TX_STBC_FLAG
 0x20

	)

149 
	s©h9k_htc_øã£t
 {

150 
u8
 
	mrs_ƒ©es
;

151 
u8
 
	mrs_øãs
[
ATH_HTC_RATE_MAX
];

154 
	s©h9k_htc_øã
 {

155 
©h9k_htc_øã£t
 
	mÀgacy_øãs
;

156 
©h9k_htc_øã£t
 
	mht_øãs
;

157 } 
	g__∑cked
;

159 
	s©h9k_htc_èrgë_øã
 {

160 
u8
 
	m°a_ödex
;

161 
u8
 
	mi¢ew
;

162 
__be32
 
	mˇpÊags
;

163 
©h9k_htc_øã
 
	møãs
;

166 
	s©h9k_htc_èrgë_øã_mask
 {

167 
u8
 
	mvif_ödex
;

168 
u8
 
	mb™d
;

169 
__be32
 
	mmask
;

170 
u16
 
	m∑d
;

171 } 
	g__∑cked
;

173 
	s©h9k_htc_èrgë_öt_°©s
 {

174 
__be32
 
	mrx
;

175 
__be32
 
	mrx‹n
;

176 
__be32
 
	mrxeﬁ
;

177 
__be32
 
	mtxu∫
;

178 
__be32
 
	mtxto
;

179 
__be32
 
	mc°
;

180 } 
	g__∑cked
;

182 
	s©h9k_htc_èrgë_tx_°©s
 {

183 
__be32
 
	mxªåõs
;

184 
__be32
 
	mfif€º
;

185 
__be32
 
	mfûãªd
;

186 
__be32
 
	mtimî_exp
;

187 
__be32
 
	msh‹åërõs
;

188 
__be32
 
	ml⁄gªåõs
;

189 
__be32
 
	mqnuŒ
;

190 
__be32
 
	míˇp_Áû
;

191 
__be32
 
	mnobuf
;

192 } 
	g__∑cked
;

194 
	s©h9k_htc_èrgë_rx_°©s
 {

195 
__be32
 
	mnobuf
;

196 
__be32
 
	mho°_£nd
;

197 
__be32
 
	mho°_d⁄e
;

198 } 
	g__∑cked
;

200 
	#ATH9K_HTC_MAX_VIF
 2

	)

201 
	#ATH9K_HTC_MAX_BCN_VIF
 2

	)

203 
	#INC_VIF
(
_¥iv
, 
_ty≥
) do { \

204 
_ty≥
) { \

205 
NL80211_IFTYPE_STATION
: \

206 
_¥iv
->
num_°a_vif
++; \

208 
NL80211_IFTYPE_ADHOC
: \

209 
_¥iv
->
num_ibss_vif
++; \

211 
NL80211_IFTYPE_AP
: \

212 
_¥iv
->
num_≠_vif
++; \

214 
NL80211_IFTYPE_MESH_POINT
: \

215 
_¥iv
->
num_mbss_vif
++; \

220 } 0)

	)

222 
	#DEC_VIF
(
_¥iv
, 
_ty≥
) do { \

223 
_ty≥
) { \

224 
NL80211_IFTYPE_STATION
: \

225 
_¥iv
->
num_°a_vif
--; \

227 
NL80211_IFTYPE_ADHOC
: \

228 
_¥iv
->
num_ibss_vif
--; \

230 
NL80211_IFTYPE_AP
: \

231 
_¥iv
->
num_≠_vif
--; \

233 
NL80211_IFTYPE_MESH_POINT
: \

234 
_¥iv
->
num_mbss_vif
--; \

239 } 0)

	)

241 
	s©h9k_htc_vif
 {

242 
u8
 
	mödex
;

243 
u16
 
	m£q_no
;

244 
boﬁ
 
	mbóc⁄_c⁄figuªd
;

245 
	mb¶Ÿ
;

246 
__À64
 
	mtsÁdju°
;

249 
	s©h9k_vif_ôî_d©a
 {

250 c⁄° 
u8
 *
	mhw_maˇddr
;

251 
u8
 
	mmask
[
ETH_ALEN
];

254 
	#ATH9K_HTC_MAX_STA
 8

	)

255 
	#ATH9K_HTC_MAX_TID
 8

	)

257 
	etid_aggr_°©e
 {

258 
	mAGGR_STOP
 = 0,

259 
	mAGGR_PROGRESS
,

260 
	mAGGR_START
,

261 
	mAGGR_OPERATIONAL


264 
	s©h9k_htc_°a
 {

265 
u8
 
	mödex
;

266 
tid_aggr_°©e
 
	mtid_°©e
[
ATH9K_HTC_MAX_TID
];

267 
w‹k_°ru˘
 
	mrc_upd©e_w‹k
;

268 
©h9k_htc_¥iv
 *
	mhtc_¥iv
;

271 
	#ATH9K_HTC_RXBUF
 256

	)

272 
	#HTC_RX_FRAME_HEADER_SIZE
 40

	)

274 
	s©h9k_htc_rxbuf
 {

275 
boﬁ
 
	mö_¥o˚ss
;

276 
sk_buff
 *
	mskb
;

277 
©h_htc_rx_°©us
 
	mrx°©us
;

278 
li°_hód
 
	mli°
;

281 
	s©h9k_htc_rx
 {

282 
li°_hód
 
	mrxbuf
;

283 
•ölock_t
 
	mrxbuÊock
;

286 
	#ATH9K_HTC_TX_CLEANUP_INTERVAL
 50

	)

287 
	#ATH9K_HTC_TX_TIMEOUT_INTERVAL
 3000

	)

288 
	#ATH9K_HTC_TX_RESERVE
 10

	)

289 
	#ATH9K_HTC_TX_TIMEOUT_COUNT
 40

	)

290 
	#ATH9K_HTC_TX_THRESHOLD
 (
MAX_TX_BUF_NUM
 - 
ATH9K_HTC_TX_RESERVE
)

	)

292 
	#ATH9K_HTC_OP_TX_QUEUES_STOP
 
	`BIT
(0)

	)

293 
	#ATH9K_HTC_OP_TX_DRAIN
 
	`BIT
(1)

	)

295 
	s©h9k_htc_tx
 {

296 
u8
 
	mÊags
;

297 
	mqueued_˙t
;

298 
sk_buff_hód
 
	mmgmt_ï_queue
;

299 
sk_buff_hód
 
	mˇb_ï_queue
;

300 
sk_buff_hód
 
	md©a_be_queue
;

301 
sk_buff_hód
 
	md©a_bk_queue
;

302 
sk_buff_hód
 
	md©a_vi_queue
;

303 
sk_buff_hód
 
	md©a_vo_queue
;

304 
sk_buff_hód
 
	mtx_Áûed
;

305 
DECLARE_BITMAP
(
tx_¶Ÿ
, 
MAX_TX_BUF_NUM
);

306 
timî_li°
 
	m˛ónup_timî
;

307 
•ölock_t
 
	mtx_lock
;

310 
	s©h9k_htc_tx_˘l
 {

311 
u8
 
	mty≥
;

312 
u8
 
	mïid
;

313 
u8
 
	mtxok
;

314 
u8
 
	m°a_idx
;

315 
	mtime°amp
;

318 
ölöe
 
©h9k_htc_tx_˘l
 *
	$HTC_SKB_CB
(
sk_buff
 *
skb
)

320 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

322 
	`BUILD_BUG_ON
((
©h9k_htc_tx_˘l
) >

323 
IEEE80211_TX_INFO_DRIVER_DATA_SIZE
);

324  (
©h9k_htc_tx_˘l
 *Ë&
tx_öfo
->
drivî_d©a
;

325 
	}
}

327 #ifde‡
CONFIG_ATH9K_HTC_DEBUGFS


329 
	#TX_STAT_INC
(
c
Ë(
hif_dev
->
htc_h™dÀ
->
drv_¥iv
->
debug
.
tx_°©s
.c++)

	)

330 
	#TX_STAT_ADD
(
c
, 
a
Ë(
hif_dev
->
htc_h™dÀ
->
drv_¥iv
->
debug
.
tx_°©s
.¯+a)

	)

331 
	#RX_STAT_INC
(
c
Ë(
hif_dev
->
htc_h™dÀ
->
drv_¥iv
->
debug
.
skbrx_°©s
.c++)

	)

332 
	#RX_STAT_ADD
(
c
, 
a
Ë(
hif_dev
->
htc_h™dÀ
->
drv_¥iv
->
debug
.
skbrx_°©s
.¯+a)

	)

333 
	#CAB_STAT_INC
 
¥iv
->
debug
.
tx_°©s
.
ˇb_queued
++

	)

335 
	#TX_QSTAT_INC
(
q
Ë(
¥iv
->
debug
.
tx_°©s
.
queue_°©s
[q]++)

	)

337 
©h9k_htc_îr_°©_rx
(
©h9k_htc_¥iv
 *
¥iv
,

338 
©h_rx_°©us
 *
rs
);

340 
	s©h_tx_°©s
 {

341 
u32
 
	mbuf_queued
;

342 
u32
 
	mbuf_com∂ëed
;

343 
u32
 
	mskb_queued
;

344 
u32
 
	mskb_suc˚ss
;

345 
u32
 
	mskb_suc˚ss_byãs
;

346 
u32
 
	mskb_Áûed
;

347 
u32
 
	mˇb_queued
;

348 
u32
 
	mqueue_°©s
[
IEEE80211_NUM_ACS
];

351 
	s©h_skbrx_°©s
 {

352 
u32
 
	mskb_Æloˇãd
;

353 
u32
 
	mskb_com∂ëed
;

354 
u32
 
	mskb_com∂ëed_byãs
;

355 
u32
 
	mskb_dr›≥d
;

358 
	s©h9k_debug
 {

359 
díåy
 *
	mdebugfs_phy
;

360 
©h_tx_°©s
 
	mtx_°©s
;

361 
©h_rx_°©s
 
	mrx_°©s
;

362 
©h_skbrx_°©s
 
	mskbrx_°©s
;

365 
©h9k_htc_gë_ë_°rögs
(
õì80211_hw
 *
hw
,

366 
õì80211_vif
 *
vif
,

367 
u32
 
s£t
, 
u8
 *
d©a
);

368 
©h9k_htc_gë_ë_s£t_cou¡
(
õì80211_hw
 *
hw
,

369 
õì80211_vif
 *
vif
, 
s£t
);

370 
©h9k_htc_gë_ë_°©s
(
õì80211_hw
 *
hw
,

371 
õì80211_vif
 *
vif
,

372 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
);

375 
	#TX_STAT_INC
(
c
Ëdÿ{ } 0)

	)

376 
	#TX_STAT_ADD
(
c
, 
a
Ëdÿ{ } 0)

	)

377 
	#RX_STAT_INC
(
c
Ëdÿ{ } 0)

	)

378 
	#RX_STAT_ADD
(
c
, 
a
Ëdÿ{ } 0)

	)

379 
	#CAB_STAT_INC
 dÿ{ } 0)

	)

381 
	#TX_QSTAT_INC
(
c
Ëdÿ{ } 0)

	)

383 
ölöe
 
	$©h9k_htc_îr_°©_rx
(
©h9k_htc_¥iv
 *
¥iv
,

384 
©h_rx_°©us
 *
rs
)

386 
	}
}

390 
	#ATH_LED_PIN_DEF
 1

	)

391 
	#ATH_LED_PIN_9287
 10

	)

392 
	#ATH_LED_PIN_9271
 15

	)

393 
	#ATH_LED_PIN_7010
 12

	)

395 
	#BSTUCK_THRESHOLD
 10

	)

401 
	#DEFAULT_SWBA_RESPONSE
 40

	)

402 
	#MIN_SWBA_RESPONSE
 10

	)

404 
	shtc_bóc⁄
 {

406 
	mOK
,

407 
	mUPDATE
,

408 
	mCOMMIT


409 } 
	mupd©e¶Ÿ
;

411 
õì80211_vif
 *
	mb¶Ÿ
[
ATH9K_HTC_MAX_BCN_VIF
];

412 
u32
 
	mbmiss˙t
;

413 
u32
 
	mbóc⁄q
;

414 
	m¶Ÿtime
;

415 
	m¶Ÿupd©e
;

418 
	s©h_btc€x
 {

419 
u32
 
	mbt_¥i‹ôy_˙t
;

420 
	mbt_¥i‹ôy_time
;

421 
	mbt_°omp_ty≥
;

422 
u32
 
	mbtc€x_no_°omp
;

423 
u32
 
	mbtc€x_≥riod
;

424 
u32
 
	mbtsˇn_no_°omp
;

427 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


428 
©h9k_htc_öô_btc€x
(
©h9k_htc_¥iv
 *
¥iv
, *
¥odu˘
);

429 
©h9k_htc_°¨t_btc€x
(
©h9k_htc_¥iv
 *
¥iv
);

430 
©h9k_htc_°›_btc€x
(
©h9k_htc_¥iv
 *
¥iv
);

432 
ölöe
 
	$©h9k_htc_öô_btc€x
(
©h9k_htc_¥iv
 *
¥iv
, *
¥odu˘
)

434 
	}
}

435 
ölöe
 
	$©h9k_htc_°¨t_btc€x
(
©h9k_htc_¥iv
 *
¥iv
)

437 
	}
}

438 
ölöe
 
	$©h9k_htc_°›_btc€x
(
©h9k_htc_¥iv
 *
¥iv
)

440 
	}
}

443 
	#OP_BT_PRIORITY_DETECTED
 3

	)

444 
	#OP_BT_SCAN
 4

	)

445 
	#OP_TSF_RESET
 6

	)

447 
	ehtc_›_Êags
 {

448 
	mHTC_FWFLAG_NO_RMW
,

451 
	s©h9k_htc_¥iv
 {

452 
devi˚
 *
	mdev
;

453 
õì80211_hw
 *
	mhw
;

454 
©h_hw
 *
	mah
;

455 
htc_èrgë
 *
	mhtc
;

456 
wmi
 *
	mwmi
;

458 
u16
 
	mfw_vîsi⁄_maj‹
;

459 
u16
 
	mfw_vîsi⁄_mö‹
;

461 
htc_ídpoöt_id
 
	mwmi_cmd_ï
;

462 
htc_ídpoöt_id
 
	mbóc⁄_ï
;

463 
htc_ídpoöt_id
 
	mˇb_ï
;

464 
htc_ídpoöt_id
 
	mu≠sd_ï
;

465 
htc_ídpoöt_id
 
	mmgmt_ï
;

466 
htc_ídpoöt_id
 
	md©a_be_ï
;

467 
htc_ídpoöt_id
 
	md©a_bk_ï
;

468 
htc_ídpoöt_id
 
	md©a_vi_ï
;

469 
htc_ídpoöt_id
 
	md©a_vo_ï
;

471 
u8
 
	mvif_¶Ÿ
;

472 
u8
 
	mm⁄_vif_idx
;

473 
u8
 
	m°a_¶Ÿ
;

474 
u8
 
	mvif_°a_pos
[
ATH9K_HTC_MAX_VIF
];

475 
u8
 
	mnum_ibss_vif
;

476 
u8
 
	mnum_mbss_vif
;

477 
u8
 
	mnum_°a_vif
;

478 
u8
 
	mnum_°a_assoc_vif
;

479 
u8
 
	mnum_≠_vif
;

481 
u16
 
	mcuπxpow
;

482 
u16
 
	mtxpowlimô
;

483 
u16
 
	mnvifs
;

484 
u16
 
	mn°©i⁄s
;

485 
boﬁ
 
	mª¨m_™i
;

486 
boﬁ
 
	mªc⁄fig_bóc⁄
;

487 
	mrxfûãr
;

488 
	m›_Êags
;

489 
	mfw_Êags
;

491 
©h9k_hw_ˇl_d©a
 
	mˇld©a
;

492 
©h_•ec_sˇn_¥iv
 
	m•ec_¥iv
;

494 
•ölock_t
 
	mbóc⁄_lock
;

495 
©h_bóc⁄_c⁄fig
 
	mcur_bóc⁄_c⁄f
;

496 
htc_bóc⁄
 
	mbóc⁄
;

498 
©h9k_htc_rx
 
	mrx
;

499 
©h9k_htc_tx
 
	mtx
;

501 
èskÀt_°ru˘
 
	mswba_èskÀt
;

502 
èskÀt_°ru˘
 
	mrx_èskÀt
;

503 
dñayed_w‹k
 
	m™i_w‹k
;

504 
èskÀt_°ru˘
 
	mtx_Áûed_èskÀt
;

505 
w‹k_°ru˘
 
	mps_w‹k
;

506 
w‹k_°ru˘
 
	mÁèl_w‹k
;

508 
muãx
 
	mhtc_pm_lock
;

509 
	mps_u£cou¡
;

510 
boﬁ
 
	mps_íabÀd
;

511 
boﬁ
 
	mps_idÀ
;

513 #ifde‡
CONFIG_MAC80211_LEDS


514 
Àd_brighäess
 
	mbrighäess
;

515 
boﬁ
 
	mÀd_ªgi°îed
;

516 
	mÀd_«me
[32];

517 
Àd_˛assdev
 
	mÀd_cdev
;

518 
w‹k_°ru˘
 
	mÀd_w‹k
;

521 
	mˇbq
;

522 
	mhwq_m≠
[
IEEE80211_NUM_ACS
];

524 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


525 
©h_btc€x
 
	mbtc€x
;

528 
dñayed_w‹k
 
	mc€x_≥riod_w‹k
;

529 
dñayed_w‹k
 
	mduty_cy˛e_w‹k
;

530 #ifde‡
CONFIG_ATH9K_HTC_DEBUGFS


531 
©h9k_debug
 
	mdebug
;

533 
muãx
 
	mmuãx
;

534 
õì80211_vif
 *
	mcß_vif
;

537 
ölöe
 
	$©h_ªad_ˇchesize
(
©h_comm⁄
 *
comm⁄
, *
csz
)

539 
comm⁄
->
bus_›s
->
	`ªad_ˇchesize
(comm⁄, 
csz
);

540 
	}
}

542 
©h9k_htc_ª£t
(
©h9k_htc_¥iv
 *
¥iv
);

544 
©h9k_htc_assign_b¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
,

545 
õì80211_vif
 *
vif
);

546 
©h9k_htc_ªmove_b¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
,

547 
õì80211_vif
 *
vif
);

548 
©h9k_htc_£t_tsÁdju°
(
©h9k_htc_¥iv
 *
¥iv
,

549 
õì80211_vif
 *
vif
);

550 
©h9k_htc_bóc⁄q_c⁄fig
(
©h9k_htc_¥iv
 *
¥iv
);

551 
©h9k_htc_bóc⁄_c⁄fig
(
©h9k_htc_¥iv
 *
¥iv
,

552 
õì80211_vif
 *
vif
);

553 
©h9k_htc_bóc⁄_ªc⁄fig
(
©h9k_htc_¥iv
 *
¥iv
);

554 
©h9k_htc_swba
(
©h9k_htc_¥iv
 *
¥iv
,

555 
wmi_evít_swba
 *
swba
);

557 
©h9k_htc_rxï
(*
¥iv
, 
sk_buff
 *
skb
,

558 
htc_ídpoöt_id
 
ï_id
);

559 
©h9k_htc_txï
(*
¥iv
, 
sk_buff
 *
skb
, 
htc_ídpoöt_id
 
ï_id
,

560 
boﬁ
 
txok
);

561 
©h9k_htc_bóc⁄ï
(*
drv_¥iv
, 
sk_buff
 *
skb
,

562 
htc_ídpoöt_id
 
ï_id
, 
boﬁ
 
txok
);

564 
©h9k_htc_upd©e_ˇp_èrgë
(
©h9k_htc_¥iv
 *
¥iv
,

565 
u8
 
íabÀ_c€x
);

566 
©h9k_htc_™i_w‹k
(
w‹k_°ru˘
 *
w‹k
);

567 
©h9k_htc_°¨t_™i
(
©h9k_htc_¥iv
 *
¥iv
);

568 
©h9k_htc_°›_™i
(
©h9k_htc_¥iv
 *
¥iv
);

570 
©h9k_tx_öô
(
©h9k_htc_¥iv
 *
¥iv
);

571 
©h9k_htc_tx_°¨t
(
©h9k_htc_¥iv
 *
¥iv
,

572 
õì80211_°a
 *
°a
,

573 
sk_buff
 *
skb
, 
u8
 
¶Ÿ
, 
boﬁ
 
is_ˇb
);

574 
©h9k_tx_˛ónup
(
©h9k_htc_¥iv
 *
¥iv
);

575 
boﬁ
 
©h9k_htc_txq_£tup
(
©h9k_htc_¥iv
 *
¥iv
, 
subty≥
);

576 
©h9k_htc_ˇbq_£tup
(
©h9k_htc_¥iv
 *
¥iv
);

577 
gë_hw_qnum
(
u16
 
queue
, *
hwq_m≠
);

578 
©h_htc_txq_upd©e
(
©h9k_htc_¥iv
 *
¥iv
, 
qnum
,

579 
©h9k_tx_queue_öfo
 *
qöfo
);

580 
©h9k_htc_check_°›_queues
(
©h9k_htc_¥iv
 *
¥iv
);

581 
©h9k_htc_check_wake_queues
(
©h9k_htc_¥iv
 *
¥iv
);

582 
©h9k_htc_tx_gë_¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
);

583 
©h9k_htc_tx_˛ór_¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
, 
¶Ÿ
);

584 
©h9k_htc_tx_døö
(
©h9k_htc_¥iv
 *
¥iv
);

585 
©h9k_htc_tx°©us
(
©h9k_htc_¥iv
 *
¥iv
, *
wmi_evít
);

586 
©h9k_tx_Áûed_èskÀt
(
d©a
);

587 
©h9k_htc_tx_˛ónup_timî
(
d©a
);

588 
boﬁ
 
©h9k_htc_cß_is_föished
(
©h9k_htc_¥iv
 *
¥iv
);

590 
©h9k_rx_öô
(
©h9k_htc_¥iv
 *
¥iv
);

591 
©h9k_rx_˛ónup
(
©h9k_htc_¥iv
 *
¥iv
);

592 
©h9k_ho°_rx_öô
(
©h9k_htc_¥iv
 *
¥iv
);

593 
©h9k_rx_èskÀt
(
d©a
);

594 
u32
 
©h9k_htc_ˇl¸xfûãr
(
©h9k_htc_¥iv
 *
¥iv
);

596 
©h9k_htc_ps_wakeup
(
©h9k_htc_¥iv
 *
¥iv
);

597 
©h9k_htc_ps_ª°‹e
(
©h9k_htc_¥iv
 *
¥iv
);

598 
©h9k_ps_w‹k
(
w‹k_°ru˘
 *
w‹k
);

599 
boﬁ
 
©h9k_htc_£çowî
(
©h9k_htc_¥iv
 *
¥iv
,

600 
©h9k_powî_mode
 
mode
);

602 
©h9k_°¨t_rfkûl_pﬁl
(
©h9k_htc_¥iv
 *
¥iv
);

603 
©h9k_htc_rfkûl_pﬁl_°©e
(
õì80211_hw
 *
hw
);

605 
ba£_ìp_hódî
 *
©h9k_htc_gë_ì¥om_ba£
(
©h9k_htc_¥iv
 *
¥iv
);

607 #ifde‡
CONFIG_MAC80211_LEDS


608 
©h9k_c⁄figuª_Àds
(
©h9k_htc_¥iv
 *
¥iv
);

609 
©h9k_öô_Àds
(
©h9k_htc_¥iv
 *
¥iv
);

610 
©h9k_deöô_Àds
(
©h9k_htc_¥iv
 *
¥iv
);

611 
©h9k_Àd_w‹k
(
w‹k_°ru˘
 *
w‹k
);

613 
ölöe
 
	$©h9k_c⁄figuª_Àds
(
©h9k_htc_¥iv
 *
¥iv
)

615 
	}
}

617 
ölöe
 
	$©h9k_öô_Àds
(
©h9k_htc_¥iv
 *
¥iv
)

619 
	}
}

621 
ölöe
 
	$©h9k_deöô_Àds
(
©h9k_htc_¥iv
 *
¥iv
)

623 
	}
}

625 
ölöe
 
	$©h9k_Àd_w‹k
(
w‹k_°ru˘
 *
w‹k
)

627 
	}
}

630 
©h9k_htc_¥obe_devi˚
(
htc_èrgë
 *
htc_h™dÀ
, 
devi˚
 *
dev
,

631 
u16
 
devid
, *
¥odu˘
, 
u32
 
drv_öfo
);

632 
©h9k_htc_disc⁄√˘_devi˚
(
htc_èrgë
 *
htc_h™dÀ
, 
boﬁ
 
hŸu≈lug
);

633 #ifde‡
CONFIG_PM


634 
©h9k_htc_su•íd
(
htc_èrgë
 *
htc_h™dÀ
);

635 
©h9k_htc_ªsume
(
htc_èrgë
 *
htc_h™dÀ
);

637 #ifde‡
CONFIG_ATH9K_HTC_DEBUGFS


638 
©h9k_htc_öô_debug
(
©h_hw
 *
ah
);

639 
©h9k_htc_deöô_debug
(
©h9k_htc_¥iv
 *
¥iv
);

641 
ölöe
 
	$©h9k_htc_öô_debug
(
©h_hw
 *
ah
Ë{  0; 
	}
};

642 
ölöe
 
	$©h9k_htc_deöô_debug
(
©h9k_htc_¥iv
 *
¥iv
)

644 
	}
}

	@htc_drv_beacon.c

17 
	~"htc.h
"

19 
	#FUDGE
 2

	)

21 
	$©h9k_htc_bóc⁄q_c⁄fig
(
©h9k_htc_¥iv
 *
¥iv
)

23 
©h_hw
 *
ah
 = 
¥iv
->ah;

24 
©h9k_tx_queue_öfo
 
qi
, 
qi_be
;

26 
	`mem£t
(&
qi
, 0, (
©h9k_tx_queue_öfo
));

27 
	`mem£t
(&
qi_be
, 0, (
©h9k_tx_queue_öfo
));

29 
	`©h9k_hw_gë_txq_¥›s
(
ah
, 
¥iv
->
bóc⁄
.
bóc⁄q
, &
qi
);

31 i‡(
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_AP
 ||

32 
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_MESH_POINT
) {

33 
qi
.
tqi_aifs
 = 1;

34 
qi
.
tqi_cwmö
 = 0;

35 
qi
.
tqi_cwmax
 = 0;

36 } i‡(
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_ADHOC
) {

37 
qnum
 = 
¥iv
->
hwq_m≠
[
IEEE80211_AC_BE
];

39 
	`©h9k_hw_gë_txq_¥›s
(
ah
, 
qnum
, &
qi_be
);

41 
qi
.
tqi_aifs
 = 
qi_be
.tqi_aifs;

48 i‡(
ah
->
¶Ÿtime
 =
ATH9K_SLOT_TIME_20
)

49 
qi
.
tqi_cwmö
 = 2*
qi_be
.tqi_cwmin;

51 
qi
.
tqi_cwmö
 = 4*
qi_be
.tqi_cwmin;

53 
qi
.
tqi_cwmax
 = 
qi_be
.tqi_cwmax;

57 i‡(!
	`©h9k_hw_£t_txq_¥›s
(
ah
, 
¥iv
->
bóc⁄
.
bóc⁄q
, &
qi
)) {

58 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

59 "U«bÀÅÿupd©êbóc⁄ queuê%u!\n", 
¥iv
->
bóc⁄
.
bóc⁄q
);

61 
	`©h9k_hw_ª£âxqueue
(
ah
, 
¥iv
->
bóc⁄
.
bóc⁄q
);

63 
	}
}

68 
	$©h9k_htc_bóc⁄_öô
(
©h9k_htc_¥iv
 *
¥iv
,

69 
©h_bóc⁄_c⁄fig
 *
c⁄f
,

70 
boﬁ
 
ª£t_tsf
)

72 
©h_hw
 *
ah
 = 
¥iv
->ah;

73 
ªt
 
	`__©åibuã__
 ((
unu£d
));

74 
__be32
 
htc_imask
 = 0;

75 
u8
 
cmd_r•
;

77 i‡(
c⁄f
->
ötvÆ
 >
	`TU_TO_USEC
(
DEFAULT_SWBA_RESPONSE
))

78 
ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
 = 
DEFAULT_SWBA_RESPONSE
;

80 
ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
 = 
MIN_SWBA_RESPONSE
;

82 
	`WMI_CMD
(
WMI_DISABLE_INTR_CMDID
);

83 i‡(
ª£t_tsf
)

84 
	`©h9k_hw_ª£t_tsf
(
ah
);

85 
	`©h9k_htc_bóc⁄q_c⁄fig
(
¥iv
);

86 
	`©h9k_hw_bóc⁄öô
(
ah
, 
c⁄f
->
√xâbâ
, c⁄f->
ötvÆ
);

87 
¥iv
->
bóc⁄
.
bmiss˙t
 = 0;

88 
htc_imask
 = 
	`˝u_to_be32
(
ah
->
imask
);

89 
	`WMI_CMD_BUF
(
WMI_ENABLE_INTR_CMDID
, &
htc_imask
);

90 
	}
}

92 
	$©h9k_htc_bóc⁄_c⁄fig_°a
(
©h9k_htc_¥iv
 *
¥iv
,

93 
©h_bóc⁄_c⁄fig
 *
bss_c⁄f
)

95 
©h9k_bóc⁄_°©e
 
bs
;

96 
©h9k_öt
 
imask
 = 0;

97 
__be32
 
htc_imask
 = 0;

98 
ªt
 
	`__©åibuã__
 ((
unu£d
));

99 
u8
 
cmd_r•
;

101 i‡(
	`©h9k_cmn_bóc⁄_c⁄fig_°a
(
¥iv
->
ah
, 
bss_c⁄f
, &
bs
Ë=-
EPERM
)

104 
	`WMI_CMD
(
WMI_DISABLE_INTR_CMDID
);

105 
	`©h9k_hw_£t_°a_bóc⁄_timîs
(
¥iv
->
ah
, &
bs
);

106 
imask
 |
ATH9K_INT_BMISS
;

107 
htc_imask
 = 
	`˝u_to_be32
(
imask
);

108 
	`WMI_CMD_BUF
(
WMI_ENABLE_INTR_CMDID
, &
htc_imask
);

109 
	}
}

111 
	$©h9k_htc_bóc⁄_c⁄fig_≠
(
©h9k_htc_¥iv
 *
¥iv
,

112 
©h_bóc⁄_c⁄fig
 *
c⁄f
)

114 
©h_hw
 *
ah
 = 
¥iv
->ah;

115 
ah
->
imask
 = 0;

117 
	`©h9k_cmn_bóc⁄_c⁄fig_≠
(
ah
, 
c⁄f
, 
ATH9K_HTC_MAX_BCN_VIF
);

118 
	`©h9k_htc_bóc⁄_öô
(
¥iv
, 
c⁄f
, 
Ál£
);

119 
	}
}

121 
	$©h9k_htc_bóc⁄_c⁄fig_adhoc
(
©h9k_htc_¥iv
 *
¥iv
,

122 
©h_bóc⁄_c⁄fig
 *
c⁄f
)

124 
©h_hw
 *
ah
 = 
¥iv
->ah;

125 
ah
->
imask
 = 0;

127 
	`©h9k_cmn_bóc⁄_c⁄fig_adhoc
(
ah
, 
c⁄f
);

128 
	`©h9k_htc_bóc⁄_öô
(
¥iv
, 
c⁄f
, c⁄f->
ibss_¸ót‹
);

129 
	}
}

131 
	$©h9k_htc_bóc⁄ï
(*
drv_¥iv
, 
sk_buff
 *
skb
,

132 
htc_ídpoöt_id
 
ï_id
, 
boﬁ
 
txok
)

134 
	`dev_k‰ì_skb_™y
(
skb
);

135 
	}
}

137 
	$©h9k_htc_£nd_buf„ªd
(
©h9k_htc_¥iv
 *
¥iv
,

138 
¶Ÿ
)

140 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

141 
õì80211_vif
 *
vif
;

142 
sk_buff
 *
skb
;

143 
õì80211_hdr
 *
hdr
;

144 
∑dpos
, 
∑dsize
, 
ªt
, 
tx_¶Ÿ
;

146 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

148 
vif
 = 
¥iv
->
bóc⁄
.
b¶Ÿ
[
¶Ÿ
];

150 
skb
 = 
	`õì80211_gë_buf„ªd_bc
(
¥iv
->
hw
, 
vif
);

152 
skb
) {

153 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

155 
∑dpos
 = 
	`õì80211_hdæí
(
hdr
->
‰ame_c⁄åﬁ
);

156 
∑dsize
 = 
∑dpos
 & 3;

157 i‡(
∑dsize
 && 
skb
->
Àn
 > 
∑dpos
) {

158 i‡(
	`skb_hódroom
(
skb
Ë< 
∑dsize
) {

159 
	`dev_k‰ì_skb_™y
(
skb
);

160 
√xt
;

162 
	`skb_push
(
skb
, 
∑dsize
);

163 
	`memmove
(
skb
->
d©a
, skb->d©®+ 
∑dsize
, 
∑dpos
);

166 
tx_¶Ÿ
 = 
	`©h9k_htc_tx_gë_¶Ÿ
(
¥iv
);

167 i‡(
tx_¶Ÿ
 < 0) {

168 
	`©h_dbg
(
comm⁄
, 
XMIT
, "No free CAB slot\n");

169 
	`dev_k‰ì_skb_™y
(
skb
);

170 
√xt
;

173 
ªt
 = 
	`©h9k_htc_tx_°¨t
(
¥iv
, 
NULL
, 
skb
, 
tx_¶Ÿ
, 
åue
);

174 i‡(
ªt
 != 0) {

175 
	`©h9k_htc_tx_˛ór_¶Ÿ
(
¥iv
, 
tx_¶Ÿ
);

176 
	`dev_k‰ì_skb_™y
(
skb
);

178 
	`©h_dbg
(
comm⁄
, 
XMIT
, "FailedÅo send CAB frame\n");

180 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

181 
¥iv
->
tx
.
queued_˙t
++;

182 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

184 
√xt
:

185 
skb
 = 
	`õì80211_gë_buf„ªd_bc
(
¥iv
->
hw
, 
vif
);

188 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

189 
	}
}

191 
	$©h9k_htc_£nd_bóc⁄
(
©h9k_htc_¥iv
 *
¥iv
,

192 
¶Ÿ
)

194 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

195 
õì80211_vif
 *
vif
;

196 
©h9k_htc_vif
 *
avp
;

197 
tx_bóc⁄_hódî
 
bóc⁄_hdr
;

198 
©h9k_htc_tx_˘l
 *
tx_˘l
;

199 
õì80211_tx_öfo
 *
öfo
;

200 
õì80211_mgmt
 *
mgmt
;

201 
sk_buff
 *
bóc⁄
;

202 
u8
 *
tx_fhdr
;

203 
ªt
;

205 
	`mem£t
(&
bóc⁄_hdr
, 0, (
tx_bóc⁄_hódî
));

207 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

209 
vif
 = 
¥iv
->
bóc⁄
.
b¶Ÿ
[
¶Ÿ
];

210 
avp
 = (
©h9k_htc_vif
 *)
vif
->
drv_¥iv
;

212 i‡(
	`u∆ikñy
(
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
))) {

213 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

218 
bóc⁄
 = 
	`õì80211_bóc⁄_gë
(
¥iv
->
hw
, 
vif
);

219 i‡(!
bóc⁄
) {

220 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

228 
mgmt
 = (
õì80211_mgmt
 *)
bóc⁄
->
d©a
;

229 
mgmt
->
u
.
bóc⁄
.
time°amp
 = 
avp
->
tsÁdju°
;

231 
öfo
 = 
	`IEEE80211_SKB_CB
(
bóc⁄
);

232 i‡(
öfo
->
Êags
 & 
IEEE80211_TX_CTL_ASSIGN_SEQ
) {

233 
õì80211_hdr
 *
hdr
 =

234 (
õì80211_hdr
 *Ë
bóc⁄
->
d©a
;

235 
avp
->
£q_no
 += 0x10;

236 
hdr
->
£q_˘æ
 &
	`˝u_to_À16
(
IEEE80211_SCTL_FRAG
);

237 
hdr
->
£q_˘æ
 |
	`˝u_to_À16
(
avp
->
£q_no
);

240 
tx_˘l
 = 
	`HTC_SKB_CB
(
bóc⁄
);

241 
	`mem£t
(
tx_˘l
, 0, (*tx_ctl));

243 
tx_˘l
->
ty≥
 = 
ATH9K_HTC_BEACON
;

244 
tx_˘l
->
ïid
 = 
¥iv
->
bóc⁄_ï
;

246 
bóc⁄_hdr
.
vif_ödex
 = 
avp
->
ödex
;

247 
tx_fhdr
 = 
	`skb_push
(
bóc⁄
, (
bóc⁄_hdr
));

248 
	`mem˝y
(
tx_fhdr
, (
u8
 *Ë&
bóc⁄_hdr
, (beacon_hdr));

250 
ªt
 = 
	`htc_£nd
(
¥iv
->
htc
, 
bóc⁄
);

251 i‡(
ªt
 != 0) {

252 i‡(
ªt
 =-
ENOMEM
) {

253 
	`©h_dbg
(
comm⁄
, 
BSTUCK
,

256 
	`dev_k‰ì_skb_™y
(
bóc⁄
);

259 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

261 
	`©h9k_htc_cß_is_föished
(
¥iv
);

262 
	}
}

264 
	$©h9k_htc_choo£_b¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
,

265 
wmi_evít_swba
 *
swba
)

267 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

268 
u64
 
tsf
;

269 
u32
 
ts·u
;

270 
u16
 
ötvÆ
;

271 
¶Ÿ
;

273 
ötvÆ
 = 
¥iv
->
cur_bóc⁄_c⁄f
.
bóc⁄_öãrvÆ
;

275 
tsf
 = 
	`be64_to_˝u
(
swba
->tsf);

276 
ts·u
 = 
	`TSF_TO_TU
(
tsf
 >> 32,Åsf);

277 
¶Ÿ
 = ((
ts·u
 % 
ötvÆ
Ë* 
ATH9K_HTC_MAX_BCN_VIF
) / intval;

278 
¶Ÿ
 = 
ATH9K_HTC_MAX_BCN_VIF
 - slot - 1;

280 
	`©h_dbg
(
comm⁄
, 
BEACON
,

282 
¶Ÿ
, 
tsf
, 
ts·u
, 
ötvÆ
);

284  
¶Ÿ
;

285 
	}
}

287 
	$©h9k_htc_swba
(
©h9k_htc_¥iv
 *
¥iv
,

288 
wmi_evít_swba
 *
swba
)

290 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

291 
¶Ÿ
;

293 i‡(
swba
->
bóc⁄_≥ndög
 != 0) {

294 
¥iv
->
bóc⁄
.
bmiss˙t
++;

295 i‡(
¥iv
->
bóc⁄
.
bmiss˙t
 > 
BSTUCK_THRESHOLD
) {

296 
	`©h_dbg
(
comm⁄
, 
BSTUCK
, "Beacon stuck, HWÑeset\n");

297 
	`õì80211_queue_w‹k
(
¥iv
->
hw
,

298 &
¥iv
->
Áèl_w‹k
);

303 i‡(
¥iv
->
bóc⁄
.
bmiss˙t
) {

304 
	`©h_dbg
(
comm⁄
, 
BSTUCK
,

306 
¥iv
->
bóc⁄
.
bmiss˙t
);

307 
¥iv
->
bóc⁄
.
bmiss˙t
 = 0;

310 
¶Ÿ
 = 
	`©h9k_htc_choo£_b¶Ÿ
(
¥iv
, 
swba
);

311 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

312 i‡(
¥iv
->
bóc⁄
.
b¶Ÿ
[
¶Ÿ
] =
NULL
) {

313 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

316 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

318 
	`©h9k_htc_£nd_buf„ªd
(
¥iv
, 
¶Ÿ
);

319 
	`©h9k_htc_£nd_bóc⁄
(
¥iv
, 
¶Ÿ
);

320 
	}
}

322 
	$©h9k_htc_assign_b¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
,

323 
õì80211_vif
 *
vif
)

325 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

326 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*)
vif
->
drv_¥iv
;

327 
i
 = 0;

329 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

330 
i
 = 0; i < 
ATH9K_HTC_MAX_BCN_VIF
; i++) {

331 i‡(
¥iv
->
bóc⁄
.
b¶Ÿ
[
i
] =
NULL
) {

332 
avp
->
b¶Ÿ
 = 
i
;

337 
¥iv
->
bóc⁄
.
b¶Ÿ
[
avp
->b¶Ÿ] = 
vif
;

338 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

340 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Added interfaceát beacon slot: %d\n",

341 
avp
->
b¶Ÿ
);

342 
	}
}

344 
	$©h9k_htc_ªmove_b¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
,

345 
õì80211_vif
 *
vif
)

347 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

348 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*)
vif
->
drv_¥iv
;

350 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

351 
¥iv
->
bóc⁄
.
b¶Ÿ
[
avp
->b¶Ÿ] = 
NULL
;

352 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

354 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Removed interfaceát beacon slot: %d\n",

355 
avp
->
b¶Ÿ
);

356 
	}
}

362 
	$©h9k_htc_£t_tsÁdju°
(
©h9k_htc_¥iv
 *
¥iv
,

363 
õì80211_vif
 *
vif
)

365 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

366 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*)
vif
->
drv_¥iv
;

367 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
¥iv
->
cur_bóc⁄_c⁄f
;

368 
u64
 
tsÁdju°
;

370 i‡(
avp
->
b¶Ÿ
 == 0)

378 
tsÁdju°
 = 
cur_c⁄f
->
bóc⁄_öãrvÆ
 * 
avp
->
b¶Ÿ
 / 
ATH9K_HTC_MAX_BCN_VIF
;

379 
avp
->
tsÁdju°
 = 
	`˝u_to_À64
(
	`TU_TO_USEC
(tsfadjust));

381 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "tsfadjust is: %llu for bslot: %d\n",

382 ()
tsÁdju°
, 
avp
->
b¶Ÿ
);

383 
	}
}

385 
	$©h9k_htc_bóc⁄_ôî
(*
d©a
, 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

387 
boﬁ
 *
bóc⁄_c⁄figuªd
 = (boﬁ *)
d©a
;

388 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*Ë
vif
->
drv_¥iv
;

390 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_STATION
 &&

391 
avp
->
bóc⁄_c⁄figuªd
)

392 *
bóc⁄_c⁄figuªd
 = 
åue
;

393 
	}
}

395 
boﬁ
 
	$©h9k_htc_check_bóc⁄_c⁄fig
(
©h9k_htc_¥iv
 *
¥iv
,

396 
õì80211_vif
 *
vif
)

398 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

399 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
¥iv
->
cur_bóc⁄_c⁄f
;

400 
õì80211_bss_c⁄f
 *
bss_c⁄f
 = &
vif
->bss_conf;

401 
boﬁ
 
bóc⁄_c⁄figuªd
;

408 i‡((
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_AP
) &&

409 (
¥iv
->
num_≠_vif
 > 1) &&

410 (
vif
->
ty≥
 =
NL80211_IFTYPE_AP
) &&

411 (
cur_c⁄f
->
bóc⁄_öãrvÆ
 !
bss_c⁄f
->
bóc⁄_öt
)) {

412 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

414  
Ál£
;

421 i‡(
¥iv
->
num_≠_vif
 &&

422 (
vif
->
ty≥
 !
NL80211_IFTYPE_AP
)) {

423 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

425  
Ál£
;

432 i‡((
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_STATION
) &&

433 (
¥iv
->
num_°a_vif
 > 1) &&

434 (
vif
->
ty≥
 =
NL80211_IFTYPE_STATION
)) {

435 
bóc⁄_c⁄figuªd
 = 
Ál£
;

436 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(

437 
¥iv
->
hw
, 
IEEE80211_IFACE_ITER_RESUME_ALL
,

438 
©h9k_htc_bóc⁄_ôî
, &
bóc⁄_c⁄figuªd
);

440 i‡(
bóc⁄_c⁄figuªd
) {

441 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

443  
Ál£
;

447  
åue
;

448 
	}
}

450 
	$©h9k_htc_bóc⁄_c⁄fig
(
©h9k_htc_¥iv
 *
¥iv
,

451 
õì80211_vif
 *
vif
)

453 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

454 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
¥iv
->
cur_bóc⁄_c⁄f
;

455 
õì80211_bss_c⁄f
 *
bss_c⁄f
 = &
vif
->bss_conf;

456 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*Ë
vif
->
drv_¥iv
;

458 i‡(!
	`©h9k_htc_check_bóc⁄_c⁄fig
(
¥iv
, 
vif
))

461 
cur_c⁄f
->
bóc⁄_öãrvÆ
 = 
bss_c⁄f
->
bóc⁄_öt
;

462 i‡(
cur_c⁄f
->
bóc⁄_öãrvÆ
 == 0)

463 
cur_c⁄f
->
bóc⁄_öãrvÆ
 = 100;

465 
cur_c⁄f
->
dtim_≥riod
 = 
bss_c⁄f
->dtim_period;

466 
cur_c⁄f
->
bmiss_timeout
 =

467 
ATH_DEFAULT_BMISS_LIMIT
 * 
cur_c⁄f
->
bóc⁄_öãrvÆ
;

469 
vif
->
ty≥
) {

470 
NL80211_IFTYPE_STATION
:

471 
	`©h9k_htc_bóc⁄_c⁄fig_°a
(
¥iv
, 
cur_c⁄f
);

472 
avp
->
bóc⁄_c⁄figuªd
 = 
åue
;

474 
NL80211_IFTYPE_ADHOC
:

475 
	`©h9k_htc_bóc⁄_c⁄fig_adhoc
(
¥iv
, 
cur_c⁄f
);

477 
NL80211_IFTYPE_MESH_POINT
:

478 
NL80211_IFTYPE_AP
:

479 
	`©h9k_htc_bóc⁄_c⁄fig_≠
(
¥iv
, 
cur_c⁄f
);

482 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Unsupported beaconing mode\n");

485 
	}
}

487 
	$©h9k_htc_bóc⁄_ªc⁄fig
(
©h9k_htc_¥iv
 *
¥iv
)

489 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

490 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
¥iv
->
cur_bóc⁄_c⁄f
;

492 
¥iv
->
ah
->
›mode
) {

493 
NL80211_IFTYPE_STATION
:

494 
	`©h9k_htc_bóc⁄_c⁄fig_°a
(
¥iv
, 
cur_c⁄f
);

496 
NL80211_IFTYPE_ADHOC
:

497 
	`©h9k_htc_bóc⁄_c⁄fig_adhoc
(
¥iv
, 
cur_c⁄f
);

499 
NL80211_IFTYPE_MESH_POINT
:

500 
NL80211_IFTYPE_AP
:

501 
	`©h9k_htc_bóc⁄_c⁄fig_≠
(
¥iv
, 
cur_c⁄f
);

504 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Unsupported beaconing mode\n");

507 
	}
}

509 
boﬁ
 
	$©h9k_htc_cß_is_föished
(
©h9k_htc_¥iv
 *
¥iv
)

511 
õì80211_vif
 *
vif
;

513 
vif
 = 
¥iv
->
cß_vif
;

514 i‡(!
vif
 || !vif->
cß_a˘ive
)

515  
Ál£
;

517 i‡(!
	`õì80211_cß_is_com∂ëe
(
vif
))

518  
Ál£
;

520 
	`õì80211_cß_föish
(
vif
);

522 
¥iv
->
cß_vif
 = 
NULL
;

523  
åue
;

524 
	}
}

	@htc_drv_debug.c

17 
	~"htc.h
"

19 
ssize_t
 
	$ªad_fûe_tgt_öt_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

20 
size_t
 
cou¡
, 
loff_t
 *
µos
)

22 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

23 
©h9k_htc_èrgë_öt_°©s
 
cmd_r•
;

24 
buf
[512];

25 
Àn
 = 0;

26 
ªt
 = 0;

28 
	`mem£t
(&
cmd_r•
, 0, (cmd_rsp));

30 
	`©h9k_htc_ps_wakeup
(
¥iv
);

32 
	`WMI_CMD
(
WMI_INT_STATS_CMDID
);

33 i‡(
ªt
) {

34 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

35  -
EINVAL
;

38 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

40 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

42 
	`be32_to_˝u
(
cmd_r•
.
rx
));

44 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

46 
	`be32_to_˝u
(
cmd_r•
.
rx‹n
));

48 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

50 
	`be32_to_˝u
(
cmd_r•
.
rxeﬁ
));

52 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

54 
	`be32_to_˝u
(
cmd_r•
.
txu∫
));

56 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

58 
	`be32_to_˝u
(
cmd_r•
.
txto
));

60 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

62 
	`be32_to_˝u
(
cmd_r•
.
c°
));

64 i‡(
Àn
 > (
buf
))

65 
Àn
 = (
buf
);

67  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

68 
	}
}

70 c⁄° 
fûe_›î©i⁄s
 
	gf›s_tgt_öt_°©s
 = {

71 .
ªad
 = 
ªad_fûe_tgt_öt_°©s
,

72 .
	g›í
 = 
sim∂e_›í
,

73 .
	gow√r
 = 
THIS_MODULE
,

74 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

77 
ssize_t
 
	$ªad_fûe_tgt_tx_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

78 
size_t
 
cou¡
, 
loff_t
 *
µos
)

80 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

81 
©h9k_htc_èrgë_tx_°©s
 
cmd_r•
;

82 
buf
[512];

83 
Àn
 = 0;

84 
ªt
 = 0;

86 
	`mem£t
(&
cmd_r•
, 0, (cmd_rsp));

88 
	`©h9k_htc_ps_wakeup
(
¥iv
);

90 
	`WMI_CMD
(
WMI_TX_STATS_CMDID
);

91 i‡(
ªt
) {

92 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

93  -
EINVAL
;

96 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

98 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

100 
	`be32_to_˝u
(
cmd_r•
.
xªåõs
));

102 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

104 
	`be32_to_˝u
(
cmd_r•
.
fif€º
));

106 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

108 
	`be32_to_˝u
(
cmd_r•
.
fûãªd
));

110 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

112 
	`be32_to_˝u
(
cmd_r•
.
timî_exp
));

114 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

116 
	`be32_to_˝u
(
cmd_r•
.
sh‹åërõs
));

118 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

120 
	`be32_to_˝u
(
cmd_r•
.
l⁄gªåõs
));

122 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

124 
	`be32_to_˝u
(
cmd_r•
.
qnuŒ
));

126 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

128 
	`be32_to_˝u
(
cmd_r•
.
íˇp_Áû
));

130 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

132 
	`be32_to_˝u
(
cmd_r•
.
nobuf
));

134 i‡(
Àn
 > (
buf
))

135 
Àn
 = (
buf
);

137  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

138 
	}
}

140 c⁄° 
fûe_›î©i⁄s
 
	gf›s_tgt_tx_°©s
 = {

141 .
ªad
 = 
ªad_fûe_tgt_tx_°©s
,

142 .
	g›í
 = 
sim∂e_›í
,

143 .
	gow√r
 = 
THIS_MODULE
,

144 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

147 
ssize_t
 
	$ªad_fûe_tgt_rx_°©s
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

148 
size_t
 
cou¡
, 
loff_t
 *
µos
)

150 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

151 
©h9k_htc_èrgë_rx_°©s
 
cmd_r•
;

152 
buf
[512];

153 
Àn
 = 0;

154 
ªt
 = 0;

156 
	`mem£t
(&
cmd_r•
, 0, (cmd_rsp));

158 
	`©h9k_htc_ps_wakeup
(
¥iv
);

160 
	`WMI_CMD
(
WMI_RX_STATS_CMDID
);

161 i‡(
ªt
) {

162 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

163  -
EINVAL
;

166 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

168 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

170 
	`be32_to_˝u
(
cmd_r•
.
nobuf
));

172 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

174 
	`be32_to_˝u
(
cmd_r•
.
ho°_£nd
));

176 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

178 
	`be32_to_˝u
(
cmd_r•
.
ho°_d⁄e
));

180 i‡(
Àn
 > (
buf
))

181 
Àn
 = (
buf
);

183  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

184 
	}
}

186 c⁄° 
fûe_›î©i⁄s
 
	gf›s_tgt_rx_°©s
 = {

187 .
ªad
 = 
ªad_fûe_tgt_rx_°©s
,

188 .
	g›í
 = 
sim∂e_›í
,

189 .
	gow√r
 = 
THIS_MODULE
,

190 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

193 
ssize_t
 
	$ªad_fûe_xmô
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

194 
size_t
 
cou¡
, 
loff_t
 *
µos
)

196 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

197 
buf
[512];

198 
Àn
 = 0;

200 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

202 
¥iv
->
debug
.
tx_°©s
.
buf_queued
);

203 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

205 
¥iv
->
debug
.
tx_°©s
.
buf_com∂ëed
);

206 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

208 
¥iv
->
debug
.
tx_°©s
.
skb_queued
);

209 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

211 
¥iv
->
debug
.
tx_°©s
.
skb_suc˚ss
);

212 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

214 
¥iv
->
debug
.
tx_°©s
.
skb_Áûed
);

215 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

217 
¥iv
->
debug
.
tx_°©s
.
ˇb_queued
);

219 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

221 
¥iv
->
debug
.
tx_°©s
.
queue_°©s
[
IEEE80211_AC_BE
]);

222 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

224 
¥iv
->
debug
.
tx_°©s
.
queue_°©s
[
IEEE80211_AC_BK
]);

225 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

227 
¥iv
->
debug
.
tx_°©s
.
queue_°©s
[
IEEE80211_AC_VI
]);

228 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen,

230 
¥iv
->
debug
.
tx_°©s
.
queue_°©s
[
IEEE80211_AC_VO
]);

232 i‡(
Àn
 > (
buf
))

233 
Àn
 = (
buf
);

235  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

236 
	}
}

238 c⁄° 
fûe_›î©i⁄s
 
	gf›s_xmô
 = {

239 .
ªad
 = 
ªad_fûe_xmô
,

240 .
	g›í
 = 
sim∂e_›í
,

241 .
	gow√r
 = 
THIS_MODULE
,

242 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

245 
	$©h9k_htc_îr_°©_rx
(
©h9k_htc_¥iv
 *
¥iv
,

246 
©h_rx_°©us
 *
rs
)

248 
	`©h9k_cmn_debug_°©_rx
(&
¥iv
->
debug
.
rx_°©s
, 
rs
);

249 
	}
}

251 
ssize_t
 
	$ªad_fûe_skb_rx
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

252 
size_t
 
cou¡
, 
loff_t
 *
µos
)

254 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

255 *
buf
;

256 
Àn
 = 0, 
size
 = 1500;

257 
ssize_t
 
ªtvÆ
 = 0;

259 
buf
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

260 i‡(
buf
 =
NULL
)

261  -
ENOMEM
;

263 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

265 
¥iv
->
debug
.
skbrx_°©s
.
skb_Æloˇãd
);

266 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

268 
¥iv
->
debug
.
skbrx_°©s
.
skb_com∂ëed
);

269 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen,

271 
¥iv
->
debug
.
skbrx_°©s
.
skb_dr›≥d
);

273 i‡(
Àn
 > 
size
)

274 
Àn
 = 
size
;

276 
ªtvÆ
 = 
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

277 
	`k‰ì
(
buf
);

279  
ªtvÆ
;

280 
	}
}

282 c⁄° 
fûe_›î©i⁄s
 
	gf›s_skb_rx
 = {

283 .
ªad
 = 
ªad_fûe_skb_rx
,

284 .
	g›í
 = 
sim∂e_›í
,

285 .
	gow√r
 = 
THIS_MODULE
,

286 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

289 
ssize_t
 
	$ªad_fûe_¶Ÿ
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

290 
size_t
 
cou¡
, 
loff_t
 *
µos
)

292 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

293 
buf
[512];

294 
Àn
;

296 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

297 
Àn
 = 
	`s˙¥ötf
(
buf
, (buf),

300 
MAX_TX_BUF_NUM
, 
¥iv
->
tx
.
tx_¶Ÿ
,

301 
	`bôm≠_weight
(
¥iv
->
tx
.
tx_¶Ÿ
, 
MAX_TX_BUF_NUM
));

302 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

303  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

304 
	}
}

306 c⁄° 
fûe_›î©i⁄s
 
	gf›s_¶Ÿ
 = {

307 .
ªad
 = 
ªad_fûe_¶Ÿ
,

308 .
	g›í
 = 
sim∂e_›í
,

309 .
	gow√r
 = 
THIS_MODULE
,

310 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

313 
ssize_t
 
	$ªad_fûe_queue
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

314 
size_t
 
cou¡
, 
loff_t
 *
µos
)

316 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

317 
buf
[512];

318 
Àn
 = 0;

320 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

321 "Mgmàídpoöt", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
mgmt_ï_queue
));

323 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

324 "CabÉndpoöt", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
ˇb_ï_queue
));

326 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

327 "D©®BEÉndpoöt", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
d©a_be_queue
));

329 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

330 "D©®BKÉndpoöt", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
d©a_bk_queue
));

332 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

333 "D©®VIÉndpoöt", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
d©a_vi_queue
));

335 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

336 "D©®VOÉndpoöt", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
d©a_vo_queue
));

338 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

339 "Faûed queue", 
	`skb_queue_Àn
(&
¥iv
->
tx
.
tx_Áûed
));

341 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

342 
Àn
 +
	`s˙¥ötf
(
buf
 +Üen, (buf) -Üen, "%20s : %10u\n",

343 "Queued cou¡", 
¥iv
->
tx
.
queued_˙t
);

344 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

346 i‡(
Àn
 > (
buf
))

347 
Àn
 = (
buf
);

349  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

351 
	}
}

353 c⁄° 
fûe_›î©i⁄s
 
	gf›s_queue
 = {

354 .
ªad
 = 
ªad_fûe_queue
,

355 .
	g›í
 = 
sim∂e_›í
,

356 .
	gow√r
 = 
THIS_MODULE
,

357 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

360 
ssize_t
 
	$ªad_fûe_debug
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

361 
size_t
 
cou¡
, 
loff_t
 *
µos
)

363 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

364 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

365 
buf
[32];

366 
Àn
;

368 
Àn
 = 
	`•rötf
(
buf
, "0x%08x\n", 
comm⁄
->
debug_mask
);

369  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

370 
	}
}

372 
ssize_t
 
	$wrôe_fûe_debug
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

373 
size_t
 
cou¡
, 
loff_t
 *
µos
)

375 
©h9k_htc_¥iv
 *
¥iv
 = 
fûe
->
¥iv©e_d©a
;

376 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

377 
mask
;

378 
buf
[32];

379 
ssize_t
 
Àn
;

381 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

382 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

383  -
EFAULT
;

385 
buf
[
Àn
] = '\0';

386 i‡(
	`k°πoul
(
buf
, 0, &
mask
))

387  -
EINVAL
;

389 
comm⁄
->
debug_mask
 = 
mask
;

390  
cou¡
;

391 
	}
}

393 c⁄° 
fûe_›î©i⁄s
 
	gf›s_debug
 = {

394 .
ªad
 = 
ªad_fûe_debug
,

395 .
	gwrôe
 = 
wrôe_fûe_debug
,

396 .
	g›í
 = 
sim∂e_›í
,

397 .
	gow√r
 = 
THIS_MODULE
,

398 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

402 
	#AMKSTR
(
nm
Ë#nm "_BE", #nm "_BK", #nm "_VI", #nm "_VO"

	)

403 c⁄° 
	g©h9k_htc_g°rögs_°©s
[][
ETH_GSTRING_LEN
] = {

409 
AMKSTR
(
d_tx_pkts
),

424 
	#ATH9K_HTC_SSTATS_LEN
 
	`ARRAY_SIZE
(
©h9k_htc_g°rögs_°©s
)

	)

426 
	$©h9k_htc_gë_ë_°rögs
(
õì80211_hw
 *
hw
,

427 
õì80211_vif
 *
vif
,

428 
u32
 
s£t
, 
u8
 *
d©a
)

430 i‡(
s£t
 =
ETH_SS_STATS
)

431 
	`mem˝y
(
d©a
, *
©h9k_htc_g°rögs_°©s
,

432 (
©h9k_htc_g°rögs_°©s
));

433 
	}
}

435 
	$©h9k_htc_gë_ë_s£t_cou¡
(
õì80211_hw
 *
hw
,

436 
õì80211_vif
 *
vif
, 
s£t
)

438 i‡(
s£t
 =
ETH_SS_STATS
)

439  
ATH9K_HTC_SSTATS_LEN
;

441 
	}
}

443 
	#STXBASE
 
¥iv
->
debug
.
tx_°©s


	)

444 
	#SRXBASE
 
¥iv
->
debug
.
rx_°©s


	)

445 
	#SKBTXBASE
 
¥iv
->
debug
.
tx_°©s


	)

446 
	#SKBRXBASE
 
¥iv
->
debug
.
skbrx_°©s


	)

447 
	#ASTXQ
(
a
) \

448 
d©a
[
i
++] = 
STXBASE
.
a
[
IEEE80211_AC_BE
]; \

449 
d©a
[
i
++] = 
STXBASE
.
a
[
IEEE80211_AC_BK
]; \

450 
d©a
[
i
++] = 
STXBASE
.
a
[
IEEE80211_AC_VI
]; \

451 
d©a
[
i
++] = 
STXBASE
.
a
[
IEEE80211_AC_VO
]

	)

453 
	$©h9k_htc_gë_ë_°©s
(
õì80211_hw
 *
hw
,

454 
õì80211_vif
 *
vif
,

455 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
)

457 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

458 
i
 = 0;

460 
d©a
[
i
++] = 
SKBTXBASE
.
skb_suc˚ss
;

461 
d©a
[
i
++] = 
SKBTXBASE
.
skb_suc˚ss_byãs
;

462 
d©a
[
i
++] = 
SKBRXBASE
.
skb_com∂ëed
;

463 
d©a
[
i
++] = 
SKBRXBASE
.
skb_com∂ëed_byãs
;

465 
	`ASTXQ
(
queue_°©s
);

467 
d©a
[
i
++] = 
SRXBASE
.
¸c_îr
;

468 
d©a
[
i
++] = 
SRXBASE
.
de¸y±_¸c_îr
;

469 
d©a
[
i
++] = 
SRXBASE
.
phy_îr
;

470 
d©a
[
i
++] = 
SRXBASE
.
mic_îr
;

471 
d©a
[
i
++] = 
SRXBASE
.
¥e_dñim_¸c_îr
;

472 
d©a
[
i
++] = 
SRXBASE
.
po°_dñim_¸c_îr
;

473 
d©a
[
i
++] = 
SRXBASE
.
de¸y±_busy_îr
;

475 
d©a
[
i
++] = 
SRXBASE
.
phy_îr_°©s
[
ATH9K_PHYERR_RADAR
];

476 
d©a
[
i
++] = 
SRXBASE
.
phy_îr_°©s
[
ATH9K_PHYERR_OFDM_TIMING
];

477 
d©a
[
i
++] = 
SRXBASE
.
phy_îr_°©s
[
ATH9K_PHYERR_CCK_TIMING
];

479 
	`WARN_ON
(
i
 !
ATH9K_HTC_SSTATS_LEN
);

480 
	}
}

482 
	$©h9k_htc_deöô_debug
(
©h9k_htc_¥iv
 *
¥iv
)

484 
	`©h9k_cmn_•e˘øl_deöô_debug
(&
¥iv
->
•ec_¥iv
);

485 
	}
}

487 
	$©h9k_htc_öô_debug
(
©h_hw
 *
ah
)

489 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

490 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

492 
¥iv
->
debug
.
debugfs_phy
 = 
	`debugfs_¸óã_dú
(
KBUILD_MODNAME
,

493 
¥iv
->
hw
->
wùhy
->
debugfsdú
);

494 i‡(!
¥iv
->
debug
.
debugfs_phy
)

495  -
ENOMEM
;

497 
	`©h9k_cmn_•e˘øl_öô_debug
(&
¥iv
->
•ec_¥iv
,Öriv->
debug
.
debugfs_phy
);

499 
	`debugfs_¸óã_fûe
("tgt_öt_°©s", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

500 
¥iv
, &
f›s_tgt_öt_°©s
);

501 
	`debugfs_¸óã_fûe
("tgt_tx_°©s", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

502 
¥iv
, &
f›s_tgt_tx_°©s
);

503 
	`debugfs_¸óã_fûe
("tgt_rx_°©s", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

504 
¥iv
, &
f›s_tgt_rx_°©s
);

505 
	`debugfs_¸óã_fûe
("xmô", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

506 
¥iv
, &
f›s_xmô
);

507 
	`debugfs_¸óã_fûe
("skb_rx", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

508 
¥iv
, &
f›s_skb_rx
);

510 
	`©h9k_cmn_debug_ªcv
(
¥iv
->
debug
.
debugfs_phy
, &¥iv->debug.
rx_°©s
);

511 
	`©h9k_cmn_debug_phy_îr
(
¥iv
->
debug
.
debugfs_phy
, &¥iv->debug.
rx_°©s
);

513 
	`debugfs_¸óã_fûe
("¶Ÿ", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

514 
¥iv
, &
f›s_¶Ÿ
);

515 
	`debugfs_¸óã_fûe
("queue", 
S_IRUSR
, 
¥iv
->
debug
.
debugfs_phy
,

516 
¥iv
, &
f›s_queue
);

517 
	`debugfs_¸óã_fûe
("debug", 
S_IRUSR
 | 
S_IWUSR
, 
¥iv
->
debug
.
debugfs_phy
,

518 
¥iv
, &
f›s_debug
);

520 
	`©h9k_cmn_debug_ba£_ì¥om
(
¥iv
->
debug
.
debugfs_phy
,Öriv->
ah
);

521 
	`©h9k_cmn_debug_modÆ_ì¥om
(
¥iv
->
debug
.
debugfs_phy
,Öriv->
ah
);

524 
	}
}

	@htc_drv_gpio.c

17 
	~"htc.h
"

23 
	#ATH_HTC_BTCOEX_PRODUCT_ID
 "wb193"

	)

25 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


30 
	$©h_dëe˘_bt_¥i‹ôy
(
©h9k_htc_¥iv
 *
¥iv
)

32 
©h_btc€x
 *
btc€x
 = &
¥iv
->btcoex;

33 
©h_hw
 *
ah
 = 
¥iv
->ah;

35 i‡(
	`©h9k_hw_gpio_gë
(
ah
,áh->
btc€x_hw
.
bçri‹ôy_gpio
))

36 
btc€x
->
bt_¥i‹ôy_˙t
++;

38 i‡(
	`time_a·î
(
jiffõs
, 
btc€x
->
bt_¥i‹ôy_time
 +

39 
	`m£cs_to_jiffõs
(
ATH_BT_PRIORITY_TIME_THRESHOLD
))) {

40 
	`˛ór_bô
(
OP_BT_PRIORITY_DETECTED
, &
¥iv
->
›_Êags
);

41 
	`˛ór_bô
(
OP_BT_SCAN
, &
¥iv
->
›_Êags
);

43 i‡(
btc€x
->
bt_¥i‹ôy_˙t
 >
ATH_BT_CNT_SCAN_THRESHOLD
) {

44 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BTCOEX
,

46 
	`£t_bô
(
OP_BT_PRIORITY_DETECTED
, &
¥iv
->
›_Êags
);

47 
	`£t_bô
(
OP_BT_SCAN
, &
¥iv
->
›_Êags
);

48 } i‡(
btc€x
->
bt_¥i‹ôy_˙t
 >
ATH_BT_CNT_THRESHOLD
) {

49 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BTCOEX
,

51 
	`£t_bô
(
OP_BT_PRIORITY_DETECTED
, &
¥iv
->
›_Êags
);

54 
btc€x
->
bt_¥i‹ôy_˙t
 = 0;

55 
btc€x
->
bt_¥i‹ôy_time
 = 
jiffõs
;

57 
	}
}

64 
	$©h_btc€x_≥riod_w‹k
(
w‹k_°ru˘
 *
w‹k
)

66 
©h9k_htc_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, ath9k_htc_priv,

67 
c€x_≥riod_w‹k
.
w‹k
);

68 
©h_btc€x
 *
btc€x
 = &
¥iv
->btcoex;

69 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

70 
u32
 
timî_≥riod
;

71 
ªt
;

73 
	`©h_dëe˘_bt_¥i‹ôy
(
¥iv
);

75 
ªt
 = 
	`©h9k_htc_upd©e_ˇp_èrgë
(
¥iv
,

76 
	`ã°_bô
(
OP_BT_PRIORITY_DETECTED
, &
¥iv
->
›_Êags
));

77 i‡(
ªt
) {

78 
	`©h_îr
(
comm⁄
, "UnableÅo set BTCOEXÖarameters\n");

82 
	`©h9k_hw_btc€x_bt_°omp
(
¥iv
->
ah
, 
	`ã°_bô
(
OP_BT_SCAN
, &¥iv->
›_Êags
) ?

83 
ATH_BTCOEX_STOMP_ALL
 : 
btc€x
->
bt_°omp_ty≥
);

85 
	`©h9k_hw_btc€x_íabÀ
(
¥iv
->
ah
);

86 
timî_≥riod
 = 
	`ã°_bô
(
OP_BT_SCAN
, &
¥iv
->
›_Êags
) ?

87 
btc€x
->
btsˇn_no_°omp
 : btc€x->
btc€x_no_°omp
;

88 
	`õì80211_queue_dñayed_w‹k
(
¥iv
->
hw
, &¥iv->
duty_cy˛e_w‹k
,

89 
	`m£cs_to_jiffõs
(
timî_≥riod
));

90 
	`õì80211_queue_dñayed_w‹k
(
¥iv
->
hw
, &¥iv->
c€x_≥riod_w‹k
,

91 
	`m£cs_to_jiffõs
(
btc€x
->
btc€x_≥riod
));

92 
	}
}

98 
	$©h_btc€x_duty_cy˛e_w‹k
(
w‹k_°ru˘
 *
w‹k
)

100 
©h9k_htc_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, ath9k_htc_priv,

101 
duty_cy˛e_w‹k
.
w‹k
);

102 
©h_hw
 *
ah
 = 
¥iv
->ah;

103 
©h_btc€x
 *
btc€x
 = &
¥iv
->btcoex;

104 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

106 
	`©h_dbg
(
comm⁄
, 
BTCOEX
, "time slice work for btánd wlan\n");

108 i‡(
btc€x
->
bt_°omp_ty≥
 =
ATH_BTCOEX_STOMP_LOW
 ||

109 
	`ã°_bô
(
OP_BT_SCAN
, &
¥iv
->
›_Êags
))

110 
	`©h9k_hw_btc€x_bt_°omp
(
ah
, 
ATH_BTCOEX_STOMP_NONE
);

111 i‡(
btc€x
->
bt_°omp_ty≥
 =
ATH_BTCOEX_STOMP_ALL
)

112 
	`©h9k_hw_btc€x_bt_°omp
(
ah
, 
ATH_BTCOEX_STOMP_LOW
);

114 
	`©h9k_hw_btc€x_íabÀ
(
¥iv
->
ah
);

115 
	}
}

117 
	$©h_htc_öô_btc€x_w‹k
(
©h9k_htc_¥iv
 *
¥iv
)

119 
©h_btc€x
 *
btc€x
 = &
¥iv
->btcoex;

121 
btc€x
->
btc€x_≥riod
 = 
ATH_BTCOEX_DEF_BT_PERIOD
;

122 
btc€x
->
btc€x_no_°omp
 = (100 - 
ATH_BTCOEX_DEF_DUTY_CYCLE
) *

123 
btc€x
->
btc€x_≥riod
 / 100;

124 
btc€x
->
btsˇn_no_°omp
 = (100 - 
ATH_BTCOEX_BTSCAN_DUTY_CYCLE
) *

125 
btc€x
->
btc€x_≥riod
 / 100;

126 
	`INIT_DELAYED_WORK
(&
¥iv
->
c€x_≥riod_w‹k
, 
©h_btc€x_≥riod_w‹k
);

127 
	`INIT_DELAYED_WORK
(&
¥iv
->
duty_cy˛e_w‹k
, 
©h_btc€x_duty_cy˛e_w‹k
);

128 
	}
}

134 
	$©h_htc_ªsume_btc€x_w‹k
(
©h9k_htc_¥iv
 *
¥iv
)

136 
©h_btc€x
 *
btc€x
 = &
¥iv
->btcoex;

137 
©h_hw
 *
ah
 = 
¥iv
->ah;

139 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BTCOEX
, "Starting btcoex work\n");

141 
btc€x
->
bt_¥i‹ôy_˙t
 = 0;

142 
btc€x
->
bt_¥i‹ôy_time
 = 
jiffõs
;

143 
	`˛ór_bô
(
OP_BT_PRIORITY_DETECTED
, &
¥iv
->
›_Êags
);

144 
	`˛ór_bô
(
OP_BT_SCAN
, &
¥iv
->
›_Êags
);

145 
	`õì80211_queue_dñayed_w‹k
(
¥iv
->
hw
, &¥iv->
c€x_≥riod_w‹k
, 0);

146 
	}
}

152 
	$©h_htc_ˇn˚l_btc€x_w‹k
(
©h9k_htc_¥iv
 *
¥iv
)

154 
	`ˇn˚l_dñayed_w‹k_sync
(&
¥iv
->
c€x_≥riod_w‹k
);

155 
	`ˇn˚l_dñayed_w‹k_sync
(&
¥iv
->
duty_cy˛e_w‹k
);

156 
	}
}

158 
	$©h9k_htc_°¨t_btc€x
(
©h9k_htc_¥iv
 *
¥iv
)

160 
©h_hw
 *
ah
 = 
¥iv
->ah;

162 i‡(
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë=
ATH_BTCOEX_CFG_3WIRE
) {

163 
	`©h9k_hw_btc€x_£t_weight
(
ah
, 
AR_BT_COEX_WGHT
,

164 
AR_STOMP_LOW_WLAN_WGHT
, 0);

165 
	`©h9k_hw_btc€x_íabÀ
(
ah
);

166 
	`©h_htc_ªsume_btc€x_w‹k
(
¥iv
);

168 
	}
}

170 
	$©h9k_htc_°›_btc€x
(
©h9k_htc_¥iv
 *
¥iv
)

172 
©h_hw
 *
ah
 = 
¥iv
->ah;

174 i‡(
ah
->
btc€x_hw
.
íabÀd
 &&

175 
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_NONE
) {

176 i‡(
ah
->
btc€x_hw
.
scheme
 =
ATH_BTCOEX_CFG_3WIRE
)

177 
	`©h_htc_ˇn˚l_btc€x_w‹k
(
¥iv
);

178 
	`©h9k_hw_btc€x_dißbÀ
(
ah
);

180 
	}
}

182 
	$©h9k_htc_öô_btc€x
(
©h9k_htc_¥iv
 *
¥iv
, *
¥odu˘
)

184 
©h_hw
 *
ah
 = 
¥iv
->ah;

185 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

186 
qnum
;

191 i‡(!
comm⁄
->
btc€x_íabÀd
) {

192 
ah
->
btc€x_hw
.
scheme
 = 
ATH_BTCOEX_CFG_NONE
;

196 i‡(
¥odu˘
 && 
	`°∫cmp
’rodu˘, 
ATH_HTC_BTCOEX_PRODUCT_ID
, 5) == 0) {

197 
ah
->
btc€x_hw
.
scheme
 = 
ATH_BTCOEX_CFG_3WIRE
;

200 
	`©h9k_hw_gë_btc€x_scheme
(
¥iv
->
ah
)) {

201 
ATH_BTCOEX_CFG_NONE
:

203 
ATH_BTCOEX_CFG_3WIRE
:

204 
¥iv
->
ah
->
btc€x_hw
.
bè˘ive_gpio
 = 7;

205 
¥iv
->
ah
->
btc€x_hw
.
bçri‹ôy_gpio
 = 6;

206 
¥iv
->
ah
->
btc€x_hw
.
wœ«˘ive_gpio
 = 8;

207 
¥iv
->
btc€x
.
bt_°omp_ty≥
 = 
ATH_BTCOEX_STOMP_LOW
;

208 
	`©h9k_hw_btc€x_öô_3wúe
(
¥iv
->
ah
);

209 
	`©h_htc_öô_btc€x_w‹k
(
¥iv
);

210 
qnum
 = 
¥iv
->
hwq_m≠
[
IEEE80211_AC_BE
];

211 
	`©h9k_hw_öô_btc€x_hw
(
¥iv
->
ah
, 
qnum
);

214 
	`WARN_ON
(1);

217 
	}
}

225 #ifde‡
CONFIG_MAC80211_LEDS


226 
	$©h9k_Àd_w‹k
(
w‹k_°ru˘
 *
w‹k
)

228 
©h9k_htc_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
,

229 
©h9k_htc_¥iv
,

230 
Àd_w‹k
);

232 
	`©h9k_hw_£t_gpio
(
¥iv
->
ah
,Öriv->ah->
Àd_pö
,

233 (
¥iv
->
brighäess
 =
LED_OFF
));

234 
	}
}

236 
	$©h9k_Àd_brighäess
(
Àd_˛assdev
 *
Àd_cdev
,

237 
Àd_brighäess
 
brighäess
)

239 
©h9k_htc_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
Àd_cdev
,

240 
©h9k_htc_¥iv
,

241 
Àd_cdev
);

244 
¥iv
->
brighäess
 = brightness;

245 
	`õì80211_queue_w‹k
(
¥iv
->
hw
, &¥iv->
Àd_w‹k
);

246 
	}
}

248 
	$©h9k_deöô_Àds
(
©h9k_htc_¥iv
 *
¥iv
)

250 i‡(!
¥iv
->
Àd_ªgi°îed
)

253 
	`©h9k_Àd_brighäess
(&
¥iv
->
Àd_cdev
, 
LED_OFF
);

254 
	`Àd_˛assdev_uƒegi°î
(&
¥iv
->
Àd_cdev
);

255 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
Àd_w‹k
);

256 
	}
}

259 
	$©h9k_c⁄figuª_Àds
(
©h9k_htc_¥iv
 *
¥iv
)

262 
	`©h9k_hw_cfg_ouçut
(
¥iv
->
ah
,Öriv->ah->
Àd_pö
,

263 
AR_GPIO_OUTPUT_MUX_AS_OUTPUT
);

265 
	`©h9k_hw_£t_gpio
(
¥iv
->
ah
,Öriv->ah->
Àd_pö
, 1);

267 
	}
}

269 
	$©h9k_öô_Àds
(
©h9k_htc_¥iv
 *
¥iv
)

271 
ªt
;

273 i‡(
	`AR_SREV_9287
(
¥iv
->
ah
))

274 
¥iv
->
ah
->
Àd_pö
 = 
ATH_LED_PIN_9287
;

275 i‡(
	`AR_SREV_9271
(
¥iv
->
ah
))

276 
¥iv
->
ah
->
Àd_pö
 = 
ATH_LED_PIN_9271
;

277 i‡(
	`AR_DEVID_7010
(
¥iv
->
ah
))

278 
¥iv
->
ah
->
Àd_pö
 = 
ATH_LED_PIN_7010
;

280 
¥iv
->
ah
->
Àd_pö
 = 
ATH_LED_PIN_DEF
;

282 i‡(!
©h9k_htc_Àd_blök
)

283 
¥iv
->
Àd_cdev
.
deÁu…_åiggî
 =

284 
	`õì80211_gë_ødio_Àd_«me
(
¥iv
->
hw
);

286 
	`©h9k_c⁄figuª_Àds
(
¥iv
);

288 
	`¢¥ötf
(
¥iv
->
Àd_«me
, (priv->led_name),

289 "©h9k_htc-%s", 
	`wùhy_«me
(
¥iv
->
hw
->
wùhy
));

290 
¥iv
->
Àd_cdev
.
«me
 =Öriv->
Àd_«me
;

291 
¥iv
->
Àd_cdev
.
brighäess_£t
 = 
©h9k_Àd_brighäess
;

293 
ªt
 = 
	`Àd_˛assdev_ªgi°î
(
	`wùhy_dev
(
¥iv
->
hw
->
wùhy
), &¥iv->
Àd_cdev
);

294 i‡(
ªt
 < 0)

297 
	`INIT_WORK
(&
¥iv
->
Àd_w‹k
, 
©h9k_Àd_w‹k
);

298 
¥iv
->
Àd_ªgi°îed
 = 
åue
;

301 
	}
}

308 
boﬁ
 
	$©h_is_rfkûl_£t
(
©h9k_htc_¥iv
 *
¥iv
)

310 
boﬁ
 
is_blocked
;

312 
	`©h9k_htc_ps_wakeup
(
¥iv
);

313 
is_blocked
 = 
	`©h9k_hw_gpio_gë
(
¥iv
->
ah
,Öriv->ah->
rfkûl_gpio
) ==

314 
¥iv
->
ah
->
rfkûl_pﬁ¨ôy
;

315 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

317  
is_blocked
;

318 
	}
}

320 
	$©h9k_htc_rfkûl_pﬁl_°©e
(
õì80211_hw
 *
hw
)

322 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

323 
boﬁ
 
blocked
 = !!
	`©h_is_rfkûl_£t
(
¥iv
);

325 
	`wùhy_rfkûl_£t_hw_°©e
(
hw
->
wùhy
, 
blocked
);

326 
	}
}

328 
	$©h9k_°¨t_rfkûl_pﬁl
(
©h9k_htc_¥iv
 *
¥iv
)

330 i‡(
¥iv
->
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_RFSILENT
)

331 
	`wùhy_rfkûl_°¨t_pﬁlög
(
¥iv
->
hw
->
wùhy
);

332 
	}
}

	@htc_drv_init.c

17 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

19 
	~"htc.h
"

21 
MODULE_AUTHOR
("Atheros Communications");

22 
MODULE_LICENSE
("Dual BSD/GPL");

23 
MODULE_DESCRIPTION
("Atheros driver 802.11n HTC based wireless devices");

25 
	g©h9k_debug
 = 
ATH_DBG_DEFAULT
;

26 
moduÀ_∑øm_«med
(
debug
, 
©h9k_debug
, 
uöt
, 0);

27 
MODULE_PARM_DESC
(
debug
, "Debugging mask");

29 
	ghtc_mod∑øm_nohw¸y±
;

30 
moduÀ_∑øm_«med
(
nohw¸y±
, 
htc_mod∑øm_nohw¸y±
, , 0444);

31 
MODULE_PARM_DESC
(
nohw¸y±
, "Disable hardwareÉncryption");

33 
	g©h9k_htc_btc€x_íabÀ
;

34 
moduÀ_∑øm_«med
(
btc€x_íabÀ
, 
©h9k_htc_btc€x_íabÀ
, , 0444);

35 
MODULE_PARM_DESC
(
btc€x_íabÀ
, "Enable wifi-BT coexistence");

37 
	g©h9k_ps_íabÀ
;

38 
moduÀ_∑øm_«med
(
ps_íabÀ
, 
©h9k_ps_íabÀ
, , 0444);

39 
MODULE_PARM_DESC
(
ps_íabÀ
, "Enable WLAN PowerSave");

41 
	ghtc_u£_dev_fw
 = 0;

42 
moduÀ_∑øm_«med
(
u£_dev_fw
, 
htc_u£_dev_fw
, , 0444);

43 
MODULE_PARM_DESC
(
u£_dev_fw
, "Use development FW version");

45 #ifde‡
CONFIG_MAC80211_LEDS


46 
	g©h9k_htc_Àd_blök
 = 1;

47 
moduÀ_∑øm_«med
(
blök
, 
©h9k_htc_Àd_blök
, , 0444);

48 
MODULE_PARM_DESC
(
blök
, "Enable LED blink onáctivity");

50 c⁄° 
õì80211_çt_blök
 
	g©h9k_htc_çt_blök
[] = {

51 { .
throughput
 = 0 * 1024, .
	gblök_time
 = 334 },

52 { .
	gthroughput
 = 1 * 1024, .
	gblök_time
 = 260 },

53 { .
	gthroughput
 = 5 * 1024, .
	gblök_time
 = 220 },

54 { .
	gthroughput
 = 10 * 1024, .
	gblök_time
 = 190 },

55 { .
	gthroughput
 = 20 * 1024, .
	gblök_time
 = 170 },

56 { .
	gthroughput
 = 50 * 1024, .
	gblök_time
 = 150 },

57 { .
	gthroughput
 = 70 * 1024, .
	gblök_time
 = 130 },

58 { .
	gthroughput
 = 100 * 1024, .
	gblök_time
 = 110 },

59 { .
	gthroughput
 = 200 * 1024, .
	gblök_time
 = 80 },

60 { .
	gthroughput
 = 300 * 1024, .
	gblök_time
 = 50 },

64 
	$©h9k_htc_›_ps_wakeup
(
©h_comm⁄
 *
comm⁄
)

66 
	`©h9k_htc_ps_wakeup
((
©h9k_htc_¥iv
 *Ë
comm⁄
->
¥iv
);

67 
	}
}

69 
	$©h9k_htc_›_ps_ª°‹e
(
©h_comm⁄
 *
comm⁄
)

71 
	`©h9k_htc_ps_ª°‹e
((
©h9k_htc_¥iv
 *Ë
comm⁄
->
¥iv
);

72 
	}
}

74 
©h_ps_›s
 
	g©h9k_htc_ps_›s
 = {

75 .
wakeup
 = 
©h9k_htc_›_ps_wakeup
,

76 .
	gª°‹e
 = 
©h9k_htc_›_ps_ª°‹e
,

79 
	$©h9k_htc_waô_f‹_èrgë
(
©h9k_htc_¥iv
 *
¥iv
)

81 
time_À·
;

83 i‡(
	`©omic_ªad
(&
¥iv
->
htc
->
tgt_ªady
) > 0) {

84 
	`©omic_dec
(&
¥iv
->
htc
->
tgt_ªady
);

89 
time_À·
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
¥iv
->
htc
->
èrgë_waô
, 
HZ
);

90 i‡(!
time_À·
) {

91 
	`dev_îr
(
¥iv
->
dev
, "ath9k_htc: Target is unresponsive\n");

92  -
ETIMEDOUT
;

95 
	`©omic_dec
(&
¥iv
->
htc
->
tgt_ªady
);

98 
	}
}

100 
	$©h9k_deöô_¥iv
(
©h9k_htc_¥iv
 *
¥iv
)

102 
	`©h9k_hw_deöô
(
¥iv
->
ah
);

103 
	`k‰ì
(
¥iv
->
ah
);

104 
¥iv
->
ah
 = 
NULL
;

105 
	}
}

107 
	$©h9k_deöô_devi˚
(
©h9k_htc_¥iv
 *
¥iv
)

109 
õì80211_hw
 *
hw
 = 
¥iv
->hw;

111 
	`wùhy_rfkûl_°›_pﬁlög
(
hw
->
wùhy
);

112 
	`©h9k_deöô_Àds
(
¥iv
);

113 
	`©h9k_htc_deöô_debug
(
¥iv
);

114 
	`õì80211_uƒegi°î_hw
(
hw
);

115 
	`©h9k_rx_˛ónup
(
¥iv
);

116 
	`©h9k_tx_˛ónup
(
¥iv
);

117 
	`©h9k_deöô_¥iv
(
¥iv
);

118 
	}
}

120 
ölöe
 
	$©h9k_htc_c⁄√˘_svc
(
©h9k_htc_¥iv
 *
¥iv
,

121 
u16
 
£rvi˚_id
,

122 (*
tx
) (*,

123 
sk_buff
 *,

124 
htc_ídpoöt_id
,

125 
boﬁ
 
txok
),

126 
htc_ídpoöt_id
 *
ï_id
)

128 
htc_£rvi˚_c⁄ƒeq
 
ªq
;

130 
	`mem£t
(&
ªq
, 0, (
htc_£rvi˚_c⁄ƒeq
));

132 
ªq
.
£rvi˚_id
 = service_id;

133 
ªq
.
ï_ˇŒbacks
.
¥iv
 =Öriv;

134 
ªq
.
ï_ˇŒbacks
.
rx
 = 
©h9k_htc_rxï
;

135 
ªq
.
ï_ˇŒbacks
.
tx
 =Åx;

137  
	`htc_c⁄√˘_£rvi˚
(
¥iv
->
htc
, &
ªq
, 
ï_id
);

138 
	}
}

140 
	$©h9k_öô_htc_£rvi˚s
(
©h9k_htc_¥iv
 *
¥iv
, 
u16
 
devid
,

141 
u32
 
drv_öfo
)

143 
ªt
;

146 
ªt
 = 
	`©h9k_wmi_c⁄√˘
(
¥iv
->
htc
,Öriv->
wmi
, &¥iv->
wmi_cmd_ï
);

147 i‡(
ªt
)

148 
îr
;

151 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_BEACON_SVC
, 
©h9k_htc_bóc⁄ï
,

152 &
¥iv
->
bóc⁄_ï
);

153 i‡(
ªt
)

154 
îr
;

157 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_CAB_SVC
, 
©h9k_htc_txï
,

158 &
¥iv
->
ˇb_ï
);

159 i‡(
ªt
)

160 
îr
;

164 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_UAPSD_SVC
, 
©h9k_htc_txï
,

165 &
¥iv
->
u≠sd_ï
);

166 i‡(
ªt
)

167 
îr
;

170 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_MGMT_SVC
, 
©h9k_htc_txï
,

171 &
¥iv
->
mgmt_ï
);

172 i‡(
ªt
)

173 
îr
;

176 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_DATA_BE_SVC
, 
©h9k_htc_txï
,

177 &
¥iv
->
d©a_be_ï
);

178 i‡(
ªt
)

179 
îr
;

182 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_DATA_BK_SVC
, 
©h9k_htc_txï
,

183 &
¥iv
->
d©a_bk_ï
);

184 i‡(
ªt
)

185 
îr
;

188 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_DATA_VI_SVC
, 
©h9k_htc_txï
,

189 &
¥iv
->
d©a_vi_ï
);

190 i‡(
ªt
)

191 
îr
;

194 
ªt
 = 
	`©h9k_htc_c⁄√˘_svc
(
¥iv
, 
WMI_DATA_VO_SVC
, 
©h9k_htc_txï
,

195 &
¥iv
->
d©a_vo_ï
);

196 i‡(
ªt
)

197 
îr
;

205 i‡(
	`IS_AR7010_DEVICE
(
drv_öfo
))

206 
¥iv
->
htc
->
¸edôs
 = 45;

208 
¥iv
->
htc
->
¸edôs
 = 33;

210 
ªt
 = 
	`htc_öô
(
¥iv
->
htc
);

211 i‡(
ªt
)

212 
îr
;

214 
	`dev_öfo
(
¥iv
->
dev
, "ath9k_htc: HTC initialized with %d credits\n",

215 
¥iv
->
htc
->
¸edôs
);

219 
îr
:

220 
	`dev_îr
(
¥iv
->
dev
, "ath9k_htc: UnableÅo initialize HTC services\n");

221  
ªt
;

222 
	}
}

224 
	$©h9k_ªg_nŸifõr
(
wùhy
 *wiphy,

225 
ªguœt‹y_ªque°
 *
ªque°
)

227 
õì80211_hw
 *
hw
 = 
	`wùhy_to_õì80211_hw
(
wùhy
);

228 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

230 
	`©h_ªg_nŸifõr_≠∂y
(
wùhy
, 
ªque°
,

231 
	`©h9k_hw_ªguœt‹y
(
¥iv
->
ah
));

232 
	}
}

234 
	$©h9k_ªgªad
(*
hw_¥iv
, 
u32
 
ªg_off£t
)

236 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

237 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

238 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

239 
__be32
 
vÆ
, 
ªg
 = 
	`˝u_to_be32
(
ªg_off£t
);

240 
r
;

242 
r
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_READ_CMDID
,

243 (
u8
 *Ë&
ªg
, (reg),

244 (
u8
 *Ë&
vÆ
, (val),

246 i‡(
	`u∆ikñy
(
r
)) {

247 
	`©h_dbg
(
comm⁄
, 
WMI
, "REGISTER READ FAILED: (0x%04x, %d)\n",

248 
ªg_off£t
, 
r
);

249  -
EIO
;

252  
	`be32_to_˝u
(
vÆ
);

253 
	}
}

255 
	$©h9k_mu…i_ªgªad
(*
hw_¥iv
, 
u32
 *
addr
,

256 
u32
 *
vÆ
, 
u16
 
cou¡
)

258 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

259 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

260 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

261 
__be32
 
tm∑ddr
[8];

262 
__be32
 
tmpvÆ
[8];

263 
i
, 
ªt
;

265 
i
 = 0; i < 
cou¡
; i++) {

266 
tm∑ddr
[
i
] = 
	`˝u_to_be32
(
addr
[i]);

269 
ªt
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_READ_CMDID
,

270 (
u8
 *)
tm∑ddr
 , (
u32
Ë* 
cou¡
,

271 (
u8
 *)
tmpvÆ
, (
u32
Ë* 
cou¡
,

273 i‡(
	`u∆ikñy
(
ªt
)) {

274 
	`©h_dbg
(
comm⁄
, 
WMI
,

275 "Mu…ùÀ REGISTER READ FAILED (cou¡: %d)\n", 
cou¡
);

278 
i
 = 0; i < 
cou¡
; i++) {

279 
vÆ
[
i
] = 
	`be32_to_˝u
(
tmpvÆ
[i]);

281 
	}
}

283 
	$©h9k_ªgwrôe_mu…i
(
©h_comm⁄
 *
comm⁄
)

285 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

286 
u32
 
r•_°©us
;

287 
r
;

289 
r
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_WRITE_CMDID
,

290 (
u8
 *Ë&
¥iv
->
wmi
->
mu…i_wrôe
,

291 (
ªgi°î_wrôe
Ë* 
¥iv
->
wmi
->
mu…i_wrôe_idx
,

292 (
u8
 *Ë&
r•_°©us
, (rsp_status),

294 i‡(
	`u∆ikñy
(
r
)) {

295 
	`©h_dbg
(
comm⁄
, 
WMI
,

297 
¥iv
->
wmi
->
mu…i_wrôe_idx
);

299 
¥iv
->
wmi
->
mu…i_wrôe_idx
 = 0;

300 
	}
}

302 
	$©h9k_ªgwrôe_sögÀ
(*
hw_¥iv
, 
u32
 
vÆ
, u32 
ªg_off£t
)

304 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

305 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

306 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

307 c⁄° 
__be32
 
buf
[2] = {

308 
	`˝u_to_be32
(
ªg_off£t
),

309 
	`˝u_to_be32
(
vÆ
),

311 
r
;

313 
r
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_WRITE_CMDID
,

314 (
u8
 *Ë&
buf
, (buf),

315 (
u8
 *Ë&
vÆ
, (val),

317 i‡(
	`u∆ikñy
(
r
)) {

318 
	`©h_dbg
(
comm⁄
, 
WMI
, "REGISTER WRITE FAILED:(0x%04x, %d)\n",

319 
ªg_off£t
, 
r
);

321 
	}
}

323 
	$©h9k_ªgwrôe_buf„r
(*
hw_¥iv
, 
u32
 
vÆ
, u32 
ªg_off£t
)

325 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

326 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

327 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

329 
	`muãx_lock
(&
¥iv
->
wmi
->
mu…i_wrôe_muãx
);

332 
¥iv
->
wmi
->
mu…i_wrôe
[¥iv->wmi->
mu…i_wrôe_idx
].
ªg
 =

333 
	`˝u_to_be32
(
ªg_off£t
);

334 
¥iv
->
wmi
->
mu…i_wrôe
[¥iv->wmi->
mu…i_wrôe_idx
].
vÆ
 =

335 
	`˝u_to_be32
(
vÆ
);

337 
¥iv
->
wmi
->
mu…i_wrôe_idx
++;

340 i‡(
¥iv
->
wmi
->
mu…i_wrôe_idx
 =
MAX_CMD_NUMBER
)

341 
	`©h9k_ªgwrôe_mu…i
(
comm⁄
);

343 
	`muãx_u∆ock
(&
¥iv
->
wmi
->
mu…i_wrôe_muãx
);

344 
	}
}

346 
	$©h9k_ªgwrôe
(*
hw_¥iv
, 
u32
 
vÆ
, u32 
ªg_off£t
)

348 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

349 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

350 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

352 i‡(
	`©omic_ªad
(&
¥iv
->
wmi
->
mwrôe_˙t
))

353 
	`©h9k_ªgwrôe_buf„r
(
hw_¥iv
, 
vÆ
, 
ªg_off£t
);

355 
	`©h9k_ªgwrôe_sögÀ
(
hw_¥iv
, 
vÆ
, 
ªg_off£t
);

356 
	}
}

358 
	$©h9k_íabÀ_ªgwrôe_buf„r
(*
hw_¥iv
)

360 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

361 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

362 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

364 
	`©omic_öc
(&
¥iv
->
wmi
->
mwrôe_˙t
);

365 
	}
}

367 
	$©h9k_ªgwrôe_Êush
(*
hw_¥iv
)

369 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

370 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

371 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

373 
	`©omic_dec
(&
¥iv
->
wmi
->
mwrôe_˙t
);

375 
	`muãx_lock
(&
¥iv
->
wmi
->
mu…i_wrôe_muãx
);

377 i‡(
¥iv
->
wmi
->
mu…i_wrôe_idx
)

378 
	`©h9k_ªgwrôe_mu…i
(
comm⁄
);

380 
	`muãx_u∆ock
(&
¥iv
->
wmi
->
mu…i_wrôe_muãx
);

381 
	}
}

383 
	$©h9k_ªg_rmw_buf„r
(*
hw_¥iv
,

384 
u32
 
ªg_off£t
, u32 
£t
, u32 
˛r
)

386 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

387 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

388 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

389 
u32
 
r•_°©us
;

390 
r
;

392 
	`muãx_lock
(&
¥iv
->
wmi
->
mu…i_rmw_muãx
);

395 
¥iv
->
wmi
->
mu…i_rmw
[¥iv->wmi->
mu…i_rmw_idx
].
ªg
 =

396 
	`˝u_to_be32
(
ªg_off£t
);

397 
¥iv
->
wmi
->
mu…i_rmw
[¥iv->wmi->
mu…i_rmw_idx
].
£t
 =

398 
	`˝u_to_be32
(
£t
);

399 
¥iv
->
wmi
->
mu…i_rmw
[¥iv->wmi->
mu…i_rmw_idx
].
˛r
 =

400 
	`˝u_to_be32
(
˛r
);

402 
¥iv
->
wmi
->
mu…i_rmw_idx
++;

405 i‡(
¥iv
->
wmi
->
mu…i_rmw_idx
 =
MAX_RMW_CMD_NUMBER
) {

406 
r
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_RMW_CMDID
,

407 (
u8
 *Ë&
¥iv
->
wmi
->
mu…i_rmw
,

408 (
ªgi°î_wrôe
Ë* 
¥iv
->
wmi
->
mu…i_rmw_idx
,

409 (
u8
 *Ë&
r•_°©us
, (rsp_status),

411 i‡(
	`u∆ikñy
(
r
)) {

412 
	`©h_dbg
(
comm⁄
, 
WMI
,

414 
¥iv
->
wmi
->
mu…i_rmw_idx
);

416 
¥iv
->
wmi
->
mu…i_rmw_idx
 = 0;

419 
	`muãx_u∆ock
(&
¥iv
->
wmi
->
mu…i_rmw_muãx
);

420 
	}
}

422 
	$©h9k_ªg_rmw_Êush
(*
hw_¥iv
)

424 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

425 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

426 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

427 
u32
 
r•_°©us
;

428 
r
;

430 i‡(
	`ã°_bô
(
HTC_FWFLAG_NO_RMW
, &
¥iv
->
fw_Êags
))

433 
	`©omic_dec
(&
¥iv
->
wmi
->
m_rmw_˙t
);

435 
	`muãx_lock
(&
¥iv
->
wmi
->
mu…i_rmw_muãx
);

437 i‡(
¥iv
->
wmi
->
mu…i_rmw_idx
) {

438 
r
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_RMW_CMDID
,

439 (
u8
 *Ë&
¥iv
->
wmi
->
mu…i_rmw
,

440 (
ªgi°î_rmw
Ë* 
¥iv
->
wmi
->
mu…i_rmw_idx
,

441 (
u8
 *Ë&
r•_°©us
, (rsp_status),

443 i‡(
	`u∆ikñy
(
r
)) {

444 
	`©h_dbg
(
comm⁄
, 
WMI
,

446 
¥iv
->
wmi
->
mu…i_rmw_idx
);

448 
¥iv
->
wmi
->
mu…i_rmw_idx
 = 0;

451 
	`muãx_u∆ock
(&
¥iv
->
wmi
->
mu…i_rmw_muãx
);

452 
	}
}

454 
	$©h9k_íabÀ_rmw_buf„r
(*
hw_¥iv
)

456 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

457 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

458 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

460 i‡(
	`ã°_bô
(
HTC_FWFLAG_NO_RMW
, &
¥iv
->
fw_Êags
))

463 
	`©omic_öc
(&
¥iv
->
wmi
->
m_rmw_˙t
);

464 
	}
}

466 
u32
 
	$©h9k_ªg_rmw_sögÀ
(*
hw_¥iv
,

467 
u32
 
ªg_off£t
, u32 
£t
, u32 
˛r
)

469 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

470 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

471 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

472 
ªgi°î_rmw
 
buf
, 
buf_ªt
;

473 
ªt
;

474 
u32
 
vÆ
 = 0;

476 
buf
.
ªg
 = 
	`˝u_to_be32
(
ªg_off£t
);

477 
buf
.
£t
 = 
	`˝u_to_be32
(set);

478 
buf
.
˛r
 = 
	`˝u_to_be32
(clr);

480 
ªt
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
WMI_REG_RMW_CMDID
,

481 (
u8
 *Ë&
buf
, (buf),

482 (
u8
 *Ë&
buf_ªt
, (buf_ret),

484 i‡(
	`u∆ikñy
(
ªt
)) {

485 
	`©h_dbg
(
comm⁄
, 
WMI
, "REGISTER RMW FAILED:(0x%04x, %d)\n",

486 
ªg_off£t
, 
ªt
);

488  
vÆ
;

489 
	}
}

491 
u32
 
	$©h9k_ªg_rmw
(*
hw_¥iv
, 
u32
 
ªg_off£t
, u32 
£t
, u32 
˛r
)

493 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

494 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

495 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
comm⁄
->priv;

497 i‡(
	`ã°_bô
(
HTC_FWFLAG_NO_RMW
, &
¥iv
->
fw_Êags
)) {

498 
u32
 
vÆ
;

500 
vÆ
 = 
	`REG_READ
(
ah
, 
ªg_off£t
);

501 
vÆ
 &~
˛r
;

502 
vÆ
 |
£t
;

503 
	`REG_WRITE
(
ah
, 
ªg_off£t
, 
vÆ
);

508 i‡(
	`©omic_ªad
(&
¥iv
->
wmi
->
m_rmw_˙t
))

509 
	`©h9k_ªg_rmw_buf„r
(
hw_¥iv
, 
ªg_off£t
, 
£t
, 
˛r
);

511 
	`©h9k_ªg_rmw_sögÀ
(
hw_¥iv
, 
ªg_off£t
, 
£t
, 
˛r
);

514 
	}
}

516 
	$©h_usb_ªad_ˇchesize
(
©h_comm⁄
 *
comm⁄
, *
csz
)

518 *
csz
 = 
L1_CACHE_BYTES
 >> 2;

519 
	}
}

521 
boﬁ
 
	$©h_usb_ì¥om_ªad
(
©h_comm⁄
 *
comm⁄
, 
u32
 
off
, 
u16
 *
d©a
)

523 
©h_hw
 *
ah
 = (©h_hw *Ë
comm⁄
->ah;

525 ()
	`REG_READ
(
ah
, 
AR5416_EEPROM_OFFSET
 + (
off
 << 
AR5416_EEPROM_S
));

527 i‡(!
	`©h9k_hw_waô
(
ah
,

528 
AR_EEPROM_STATUS_DATA
,

529 
AR_EEPROM_STATUS_DATA_BUSY
 |

530 
AR_EEPROM_STATUS_DATA_PROT_ACCESS
, 0,

531 
AH_WAIT_TIMEOUT
))

532  
Ál£
;

534 *
d©a
 = 
	`MS
(
	`REG_READ
(
ah
, 
AR_EEPROM_STATUS_DATA
),

535 
AR_EEPROM_STATUS_DATA_VAL
);

537  
åue
;

538 
	}
}

540 c⁄° 
©h_bus_›s
 
	g©h9k_usb_bus_›s
 = {

541 .
©h_bus_ty≥
 = 
ATH_USB
,

542 .
	gªad_ˇchesize
 = 
©h_usb_ªad_ˇchesize
,

543 .
	gì¥om_ªad
 = 
©h_usb_ì¥om_ªad
,

546 
	$©h9k_öô_queues
(
©h9k_htc_¥iv
 *
¥iv
)

548 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

549 
i
;

551 
i
 = 0; i < 
	`ARRAY_SIZE
(
¥iv
->
hwq_m≠
); i++)

552 
¥iv
->
hwq_m≠
[
i
] = -1;

554 
¥iv
->
bóc⁄
.
bóc⁄q
 = 
	`©h9k_hw_bóc⁄q_£tup
’riv->
ah
);

555 i‡(
¥iv
->
bóc⁄
.
bóc⁄q
 == -1) {

556 
	`©h_îr
(
comm⁄
, "UnableÅo setup BEACON xmit queue\n");

557 
îr
;

560 
¥iv
->
ˇbq
 = 
	`©h9k_htc_ˇbq_£tup
(priv);

561 i‡(
¥iv
->
ˇbq
 == -1) {

562 
	`©h_îr
(
comm⁄
, "UnableÅo setup CAB xmit queue\n");

563 
îr
;

566 i‡(!
	`©h9k_htc_txq_£tup
(
¥iv
, 
IEEE80211_AC_BE
)) {

567 
	`©h_îr
(
comm⁄
, "UnableÅo setup xmit queue for BEÅraffic\n");

568 
îr
;

571 i‡(!
	`©h9k_htc_txq_£tup
(
¥iv
, 
IEEE80211_AC_BK
)) {

572 
	`©h_îr
(
comm⁄
, "UnableÅo setup xmit queue for BKÅraffic\n");

573 
îr
;

575 i‡(!
	`©h9k_htc_txq_£tup
(
¥iv
, 
IEEE80211_AC_VI
)) {

576 
	`©h_îr
(
comm⁄
, "UnableÅo setup xmit queue for VIÅraffic\n");

577 
îr
;

579 i‡(!
	`©h9k_htc_txq_£tup
(
¥iv
, 
IEEE80211_AC_VO
)) {

580 
	`©h_îr
(
comm⁄
, "UnableÅo setup xmit queue for VOÅraffic\n");

581 
îr
;

586 
îr
:

587  -
EINVAL
;

588 
	}
}

590 
	$©h9k_öô_misc
(
©h9k_htc_¥iv
 *
¥iv
)

592 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

594 
	`mem˝y
(
comm⁄
->
bssidmask
, 
©h_bˇ°_mac
, 
ETH_ALEN
);

596 
comm⁄
->
œ°_rssi
 = 
ATH_RSSI_DUMMY_MARKER
;

597 
¥iv
->
ah
->
›mode
 = 
NL80211_IFTYPE_STATION
;

599 
¥iv
->
•ec_¥iv
.
ah
 =Öriv->ah;

600 
¥iv
->
•ec_¥iv
.
•ec_c⁄fig
.
íabÀd
 = 0;

601 
¥iv
->
•ec_¥iv
.
•ec_c⁄fig
.
sh‹t_ª≥©
 = 
åue
;

602 
¥iv
->
•ec_¥iv
.
•ec_c⁄fig
.
cou¡
 = 8;

603 
¥iv
->
•ec_¥iv
.
•ec_c⁄fig
.
ídÀss
 = 
Ál£
;

604 
¥iv
->
•ec_¥iv
.
•ec_c⁄fig
.
≥riod
 = 0x12;

605 
¥iv
->
•ec_¥iv
.
•ec_c⁄fig
.
f·_≥riod
 = 0x02;

606 
	}
}

608 
	$©h9k_öô_¥iv
(
©h9k_htc_¥iv
 *
¥iv
,

609 
u16
 
devid
, *
¥odu˘
,

610 
u32
 
drv_öfo
)

612 
©h_hw
 *
ah
 = 
NULL
;

613 
©h_comm⁄
 *
comm⁄
;

614 
i
, 
ªt
 = 0, 
csz
 = 0;

616 
ah
 = 
	`kzÆloc
((
©h_hw
), 
GFP_KERNEL
);

617 i‡(!
ah
)

618  -
ENOMEM
;

620 
ah
->
dev
 = 
¥iv
->dev;

621 
ah
->
hw
 = 
¥iv
->hw;

622 
ah
->
hw_vîsi⁄
.
devid
 = devid;

623 
ah
->
hw_vîsi⁄
.
usbdev
 = 
drv_öfo
;

624 
ah
->
ah_Êags
 |
AH_USE_EEPROM
;

625 
ah
->
ªg_›s
.
ªad
 = 
©h9k_ªgªad
;

626 
ah
->
ªg_›s
.
mu…i_ªad
 = 
©h9k_mu…i_ªgªad
;

627 
ah
->
ªg_›s
.
wrôe
 = 
©h9k_ªgwrôe
;

628 
ah
->
ªg_›s
.
íabÀ_wrôe_buf„r
 = 
©h9k_íabÀ_ªgwrôe_buf„r
;

629 
ah
->
ªg_›s
.
wrôe_Êush
 = 
©h9k_ªgwrôe_Êush
;

630 
ah
->
ªg_›s
.
íabÀ_rmw_buf„r
 = 
©h9k_íabÀ_rmw_buf„r
;

631 
ah
->
ªg_›s
.
rmw_Êush
 = 
©h9k_ªg_rmw_Êush
;

632 
ah
->
ªg_›s
.
rmw
 = 
©h9k_ªg_rmw
;

633 
¥iv
->
ah
 =áh;

635 
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

636 
comm⁄
->
›s
 = &
ah
->
ªg_›s
;

637 
comm⁄
->
ps_›s
 = &
©h9k_htc_ps_›s
;

638 
comm⁄
->
bus_›s
 = &
©h9k_usb_bus_›s
;

639 
comm⁄
->
ah
 =áh;

640 
comm⁄
->
hw
 = 
¥iv
->hw;

641 
comm⁄
->
¥iv
 =Öriv;

642 
comm⁄
->
debug_mask
 = 
©h9k_debug
;

643 
comm⁄
->
btc€x_íabÀd
 = 
©h9k_htc_btc€x_íabÀ
 == 1;

644 
	`£t_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
);

646 
	`•ö_lock_öô
(&
¥iv
->
bóc⁄_lock
);

647 
	`•ö_lock_öô
(&
¥iv
->
tx
.
tx_lock
);

648 
	`muãx_öô
(&
¥iv
->
muãx
);

649 
	`muãx_öô
(&
¥iv
->
htc_pm_lock
);

650 
	`èskÀt_öô
(&
¥iv
->
rx_èskÀt
, 
©h9k_rx_èskÀt
,

651 ()
¥iv
);

652 
	`èskÀt_öô
(&
¥iv
->
tx_Áûed_èskÀt
, 
©h9k_tx_Áûed_èskÀt
,

653 ()
¥iv
);

654 
	`INIT_DELAYED_WORK
(&
¥iv
->
™i_w‹k
, 
©h9k_htc_™i_w‹k
);

655 
	`INIT_WORK
(&
¥iv
->
ps_w‹k
, 
©h9k_ps_w‹k
);

656 
	`INIT_WORK
(&
¥iv
->
Áèl_w‹k
, 
©h9k_Áèl_w‹k
);

657 
	`£tup_timî
(&
¥iv
->
tx
.
˛ónup_timî
, 
©h9k_htc_tx_˛ónup_timî
,

658 ()
¥iv
);

664 
	`©h_ªad_ˇchesize
(
comm⁄
, &
csz
);

665 
comm⁄
->
ˇchñsz
 = 
csz
 << 2;

667 
ªt
 = 
	`©h9k_hw_öô
(
ah
);

668 i‡(
ªt
) {

669 
	`©h_îr
(
comm⁄
,

671 
ªt
);

672 
îr_hw
;

675 
ªt
 = 
	`©h9k_öô_queues
(
¥iv
);

676 i‡(
ªt
)

677 
îr_queues
;

679 
i
 = 0; i < 
ATH9K_HTC_MAX_BCN_VIF
; i++)

680 
¥iv
->
bóc⁄
.
b¶Ÿ
[
i
] = 
NULL
;

681 
¥iv
->
bóc⁄
.
¶Ÿtime
 = 
ATH9K_SLOT_TIME_9
;

683 
	`©h9k_cmn_öô_ch™√ls_øãs
(
comm⁄
);

684 
	`©h9k_cmn_öô_¸y±o
(
ah
);

685 
	`©h9k_öô_misc
(
¥iv
);

686 
	`©h9k_htc_öô_btc€x
(
¥iv
, 
¥odu˘
);

690 
îr_queues
:

691 
	`©h9k_hw_deöô
(
ah
);

692 
îr_hw
:

694 
	`k‰ì
(
ah
);

695 
¥iv
->
ah
 = 
NULL
;

697  
ªt
;

698 
	}
}

700 c⁄° 
õì80211_iÁ˚_limô
 
	gif_limôs
[] = {

701 { .
max
 = 2, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_STATION
) |

702 
BIT
(
NL80211_IFTYPE_P2P_CLIENT
) },

703 { .
	gmax
 = 2, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_AP
) |

704 #ifde‡
CONFIG_MAC80211_MESH


705 
BIT
(
NL80211_IFTYPE_MESH_POINT
) |

707 
BIT
(
NL80211_IFTYPE_P2P_GO
) },

710 c⁄° 
õì80211_iÁ˚_combö©i⁄
 
	gif_comb
 = {

711 .
limôs
 = 
if_limôs
,

712 .
	gn_limôs
 = 
ARRAY_SIZE
(
if_limôs
),

713 .
	gmax_öãrÁ˚s
 = 2,

714 .
	gnum_dif„ª¡_ch™√ls
 = 1,

717 
	$©h9k_£t_hw_ˇ∑b
(
©h9k_htc_¥iv
 *
¥iv
,

718 
õì80211_hw
 *
hw
)

720 
©h_hw
 *
ah
 = 
¥iv
->ah;

721 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

722 
ba£_ìp_hódî
 *
pBa£
;

724 
	`õì80211_hw_£t
(
hw
, 
HOST_BROADCAST_PS_BUFFERING
);

725 
	`õì80211_hw_£t
(
hw
, 
MFP_CAPABLE
);

726 
	`õì80211_hw_£t
(
hw
, 
REPORTS_TX_ACK_STATUS
);

727 
	`õì80211_hw_£t
(
hw
, 
PS_NULLFUNC_STACK
);

728 
	`õì80211_hw_£t
(
hw
, 
RX_INCLUDES_FCS
);

729 
	`õì80211_hw_£t
(
hw
, 
HAS_RATE_CONTROL
);

730 
	`õì80211_hw_£t
(
hw
, 
SPECTRUM_MGMT
);

731 
	`õì80211_hw_£t
(
hw
, 
SIGNAL_DBM
);

732 
	`õì80211_hw_£t
(
hw
, 
AMPDU_AGGREGATION
);

734 i‡(
©h9k_ps_íabÀ
)

735 
	`õì80211_hw_£t
(
hw
, 
SUPPORTS_PS
);

737 
hw
->
wùhy
->
öãrÁ˚_modes
 =

738 
	`BIT
(
NL80211_IFTYPE_STATION
) |

739 
	`BIT
(
NL80211_IFTYPE_ADHOC
) |

740 
	`BIT
(
NL80211_IFTYPE_AP
) |

741 
	`BIT
(
NL80211_IFTYPE_P2P_GO
) |

742 
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
) |

743 
	`BIT
(
NL80211_IFTYPE_MESH_POINT
) |

744 
	`BIT
(
NL80211_IFTYPE_OCB
);

746 
hw
->
wùhy
->
iÁ˚_combö©i⁄s
 = &
if_comb
;

747 
hw
->
wùhy
->
n_iÁ˚_combö©i⁄s
 = 1;

749 
hw
->
wùhy
->
Êags
 &~
WIPHY_FLAG_PS_ON_BY_DEFAULT
;

751 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_IBSS_RSN
 |

752 
WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL
 |

753 
WIPHY_FLAG_HAS_CHANNEL_SWITCH
;

755 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_SUPPORTS_TDLS
;

757 
hw
->
queues
 = 4;

758 
hw
->
max_li°í_öãrvÆ
 = 1;

760 
hw
->
vif_d©a_size
 = (
©h9k_htc_vif
);

761 
hw
->
°a_d©a_size
 = (
©h9k_htc_°a
);

764 
hw
->
exåa_tx_hódroom
 = (
tx_‰ame_hdr
) +

765 (
htc_‰ame_hdr
) + 4;

767 i‡(
¥iv
->
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_2GHZ
)

768 
hw
->
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
] =

769 &
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
];

770 i‡(
¥iv
->
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_5GHZ
)

771 
hw
->
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
] =

772 &
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
];

774 
	`©h9k_cmn_ªlﬂd_chaömask
(
ah
);

776 
pBa£
 = 
	`©h9k_htc_gë_ì¥om_ba£
(
¥iv
);

777 i‡(
pBa£
) {

778 
hw
->
wùhy
->
avaûabÀ_™ã¬as_rx
 = 
pBa£
->
rxMask
;

779 
hw
->
wùhy
->
avaûabÀ_™ã¬as_tx
 = 
pBa£
->
txMask
;

782 
	`SET_IEEE80211_PERM_ADDR
(
hw
, 
comm⁄
->
maˇddr
);

783 
	}
}

785 
	$©h9k_öô_fúmw¨e_vîsi⁄
(
©h9k_htc_¥iv
 *
¥iv
)

787 
õì80211_hw
 *
hw
 = 
¥iv
->hw;

788 
wmi_fw_vîsi⁄
 
cmd_r•
;

789 
ªt
;

791 
	`mem£t
(&
cmd_r•
, 0, (cmd_rsp));

793 
	`WMI_CMD
(
WMI_GET_FW_VERSION
);

794 i‡(
ªt
)

795  -
EINVAL
;

797 
¥iv
->
fw_vîsi⁄_maj‹
 = 
	`be16_to_˝u
(
cmd_r•
.
maj‹
);

798 
¥iv
->
fw_vîsi⁄_mö‹
 = 
	`be16_to_˝u
(
cmd_r•
.
mö‹
);

800 
	`¢¥ötf
(
hw
->
wùhy
->
fw_vîsi⁄
, (hw->wiphy->fw_version), "%d.%d",

801 
¥iv
->
fw_vîsi⁄_maj‹
,

802 
¥iv
->
fw_vîsi⁄_mö‹
);

804 
	`dev_öfo
(
¥iv
->
dev
, "ath9k_htc: FW Version: %d.%d\n",

805 
¥iv
->
fw_vîsi⁄_maj‹
,

806 
¥iv
->
fw_vîsi⁄_mö‹
);

812 i‡(
¥iv
->
fw_vîsi⁄_maj‹
 !
MAJOR_VERSION_REQ
 ||

813 
¥iv
->
fw_vîsi⁄_mö‹
 < 
MINOR_VERSION_REQ
) {

814 
	`dev_îr
(
¥iv
->
dev
, "ath9k_htc: Please upgradeÅo FW version %d.%d\n",

815 
MAJOR_VERSION_REQ
, 
MINOR_VERSION_REQ
);

816  -
EINVAL
;

819 i‡(
¥iv
->
fw_vîsi⁄_maj‹
 =1 &&Öriv->
fw_vîsi⁄_mö‹
 < 4)

820 
	`£t_bô
(
HTC_FWFLAG_NO_RMW
, &
¥iv
->
fw_Êags
);

822 
	`dev_öfo
(
¥iv
->
dev
, "FW RMW support: %s\n",

823 
	`ã°_bô
(
HTC_FWFLAG_NO_RMW
, &
¥iv
->
fw_Êags
) ? "Off" : "On");

826 
	}
}

828 
	$©h9k_öô_devi˚
(
©h9k_htc_¥iv
 *
¥iv
,

829 
u16
 
devid
, *
¥odu˘
, 
u32
 
drv_öfo
)

831 
õì80211_hw
 *
hw
 = 
¥iv
->hw;

832 
©h_comm⁄
 *
comm⁄
;

833 
©h_hw
 *
ah
;

834 
îr‹
 = 0;

835 
©h_ªguœt‹y
 *
ªg
;

836 
hw_«me
[64];

839 
îr‹
 = 
	`©h9k_öô_¥iv
(
¥iv
, 
devid
, 
¥odu˘
, 
drv_öfo
);

840 i‡(
îr‹
 != 0)

841 
îr_öô
;

843 
ah
 = 
¥iv
->ah;

844 
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

845 
	`©h9k_£t_hw_ˇ∑b
(
¥iv
, 
hw
);

847 
îr‹
 = 
	`©h9k_öô_fúmw¨e_vîsi⁄
(
¥iv
);

848 i‡(
îr‹
 != 0)

849 
îr_fw
;

852 
îr‹
 = 
	`©h_ªgd_öô
(&
comm⁄
->
ªguœt‹y
, 
¥iv
->
hw
->
wùhy
,

853 
©h9k_ªg_nŸifõr
);

854 i‡(
îr‹
)

855 
îr_ªgd
;

857 
ªg
 = &
comm⁄
->
ªguœt‹y
;

860 
îr‹
 = 
	`©h9k_tx_öô
(
¥iv
);

861 i‡(
îr‹
 != 0)

862 
îr_tx
;

865 
îr‹
 = 
	`©h9k_rx_öô
(
¥iv
);

866 i‡(
îr‹
 != 0)

867 
îr_rx
;

869 
	`©h9k_hw_dißbÀ
(
¥iv
->
ah
);

870 #ifde‡
CONFIG_MAC80211_LEDS


872 
¥iv
->
Àd_cdev
.
deÁu…_åiggî
 = 
	`õì80211_¸óã_çt_Àd_åiggî
’riv->
hw
,

873 
IEEE80211_TPT_LEDTRIG_FL_RADIO
, 
©h9k_htc_çt_blök
,

874 
	`ARRAY_SIZE
(
©h9k_htc_çt_blök
));

878 
îr‹
 = 
	`õì80211_ªgi°î_hw
(
hw
);

879 i‡(
îr‹
)

880 
îr_ªgi°î
;

883 i‡(!
	`©h_is_w‹ld_ªgd
(
ªg
)) {

884 
îr‹
 = 
	`ªguœt‹y_höt
(
hw
->
wùhy
, 
ªg
->
Æpha2
);

885 i‡(
îr‹
)

886 
îr_w‹ld
;

889 
îr‹
 = 
	`©h9k_htc_öô_debug
(
¥iv
->
ah
);

890 i‡(
îr‹
) {

891 
	`©h_îr
(
comm⁄
, "UnableÅo create debugfs files\n");

892 
îr_w‹ld
;

895 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

897 
¥iv
->
wmi_cmd_ï
,

898 
¥iv
->
bóc⁄_ï
,

899 
¥iv
->
ˇb_ï
,

900 
¥iv
->
u≠sd_ï
,

901 
¥iv
->
mgmt_ï
,

902 
¥iv
->
d©a_be_ï
,

903 
¥iv
->
d©a_bk_ï
,

904 
¥iv
->
d©a_vi_ï
,

905 
¥iv
->
d©a_vo_ï
);

907 
	`©h9k_hw_«me
(
¥iv
->
ah
, 
hw_«me
, (hw_name));

908 
	`wùhy_öfo
(
hw
->
wùhy
, "%s\n", 
hw_«me
);

910 
	`©h9k_öô_Àds
(
¥iv
);

911 
	`©h9k_°¨t_rfkûl_pﬁl
(
¥iv
);

915 
îr_w‹ld
:

916 
	`õì80211_uƒegi°î_hw
(
hw
);

917 
îr_ªgi°î
:

918 
	`©h9k_rx_˛ónup
(
¥iv
);

919 
îr_rx
:

920 
	`©h9k_tx_˛ónup
(
¥iv
);

921 
îr_tx
:

923 
îr_ªgd
:

925 
îr_fw
:

926 
	`©h9k_deöô_¥iv
(
¥iv
);

927 
îr_öô
:

928  
îr‹
;

929 
	}
}

931 
	$©h9k_htc_¥obe_devi˚
(
htc_èrgë
 *
htc_h™dÀ
, 
devi˚
 *
dev
,

932 
u16
 
devid
, *
¥odu˘
, 
u32
 
drv_öfo
)

934 
õì80211_hw
 *
hw
;

935 
©h9k_htc_¥iv
 *
¥iv
;

936 
ªt
;

938 
hw
 = 
	`õì80211_Æloc_hw
((
©h9k_htc_¥iv
), &
©h9k_htc_›s
);

939 i‡(!
hw
)

940  -
ENOMEM
;

942 
¥iv
 = 
hw
->priv;

943 
¥iv
->
hw
 = hw;

944 
¥iv
->
htc
 = 
htc_h™dÀ
;

945 
¥iv
->
dev
 = dev;

946 
htc_h™dÀ
->
drv_¥iv
 = 
¥iv
;

947 
	`SET_IEEE80211_DEV
(
hw
, 
¥iv
->
dev
);

949 
ªt
 = 
	`©h9k_htc_waô_f‹_èrgë
(
¥iv
);

950 i‡(
ªt
)

951 
îr_‰ì
;

953 
¥iv
->
wmi
 = 
	`©h9k_öô_wmi
(priv);

954 i‡(!
¥iv
->
wmi
) {

955 
ªt
 = -
EINVAL
;

956 
îr_‰ì
;

959 
ªt
 = 
	`©h9k_öô_htc_£rvi˚s
(
¥iv
, 
devid
, 
drv_öfo
);

960 i‡(
ªt
)

961 
îr_öô
;

963 
ªt
 = 
	`©h9k_öô_devi˚
(
¥iv
, 
devid
, 
¥odu˘
, 
drv_öfo
);

964 i‡(
ªt
)

965 
îr_öô
;

969 
îr_öô
:

970 
	`©h9k_deöô_wmi
(
¥iv
);

971 
îr_‰ì
:

972 
	`õì80211_‰ì_hw
(
hw
);

973  
ªt
;

974 
	}
}

976 
	$©h9k_htc_disc⁄√˘_devi˚
(
htc_èrgë
 *
htc_h™dÀ
, 
boﬁ
 
hŸu≈lug
)

978 i‡(
htc_h™dÀ
->
drv_¥iv
) {

981 i‡(
hŸu≈lug
)

982 
htc_h™dÀ
->
drv_¥iv
->
ah
->
ah_Êags
 |
AH_UNPLUGGED
;

984 
	`©h9k_deöô_devi˚
(
htc_h™dÀ
->
drv_¥iv
);

985 
	`©h9k_deöô_wmi
(
htc_h™dÀ
->
drv_¥iv
);

986 
	`õì80211_‰ì_hw
(
htc_h™dÀ
->
drv_¥iv
->
hw
);

988 
	}
}

990 #ifde‡
CONFIG_PM


992 
	$©h9k_htc_su•íd
(
htc_èrgë
 *
htc_h™dÀ
)

994 
	`©h9k_htc_£çowî
(
htc_h™dÀ
->
drv_¥iv
, 
ATH9K_PM_FULL_SLEEP
);

995 
	}
}

997 
	$©h9k_htc_ªsume
(
htc_èrgë
 *
htc_h™dÀ
)

999 
©h9k_htc_¥iv
 *
¥iv
 = 
htc_h™dÀ
->
drv_¥iv
;

1000 
ªt
;

1002 
ªt
 = 
	`©h9k_htc_waô_f‹_èrgë
(
¥iv
);

1003 i‡(
ªt
)

1004  
ªt
;

1006 
ªt
 = 
	`©h9k_öô_htc_£rvi˚s
(
¥iv
,Öriv->
ah
->
hw_vîsi⁄
.
devid
,

1007 
¥iv
->
ah
->
hw_vîsi⁄
.
usbdev
);

1008 
	`©h9k_c⁄figuª_Àds
(
¥iv
);

1010  
ªt
;

1011 
	}
}

1014 
__öô
 
	$©h9k_htc_öô
()

1016 i‡(
	`©h9k_hif_usb_öô
() < 0) {

1017 
	`¥_îr
("No USB devices found, driverÇot installed\n");

1018  -
ENODEV
;

1022 
	}
}

1023 
moduÀ_öô
(
©h9k_htc_öô
);

1025 
__exô
 
	$©h9k_htc_exô
()

1027 
	`©h9k_hif_usb_exô
();

1028 
	`¥_öfo
("Driver unloaded\n");

1029 
	}
}

1030 
moduÀ_exô
(
©h9k_htc_exô
);

	@htc_drv_main.c

17 
	~"htc.h
"

24 
htc_phymode
 
	$©h9k_htc_gë_curmode
(
©h9k_htc_¥iv
 *
¥iv
,

25 
©h9k_ch™√l
 *
ich™
)

27 i‡(
	`IS_CHAN_5GHZ
(
ich™
))

28  
HTC_MODE_11NA
;

30  
HTC_MODE_11NG
;

31 
	}
}

33 
boﬁ
 
	$©h9k_htc_£çowî
(
©h9k_htc_¥iv
 *
¥iv
,

34 
©h9k_powî_mode
 
mode
)

36 
boﬁ
 
ªt
;

38 
	`muãx_lock
(&
¥iv
->
htc_pm_lock
);

39 
ªt
 = 
	`©h9k_hw_£çowî
(
¥iv
->
ah
, 
mode
);

40 
	`muãx_u∆ock
(&
¥iv
->
htc_pm_lock
);

42  
ªt
;

43 
	}
}

45 
	$©h9k_htc_ps_wakeup
(
©h9k_htc_¥iv
 *
¥iv
)

47 
	`muãx_lock
(&
¥iv
->
htc_pm_lock
);

48 i‡(++
¥iv
->
ps_u£cou¡
 != 1)

49 
u∆ock
;

50 
	`©h9k_hw_£çowî
(
¥iv
->
ah
, 
ATH9K_PM_AWAKE
);

52 
u∆ock
:

53 
	`muãx_u∆ock
(&
¥iv
->
htc_pm_lock
);

54 
	}
}

56 
	$©h9k_htc_ps_ª°‹e
(
©h9k_htc_¥iv
 *
¥iv
)

58 
boﬁ
 
ª£t
;

60 
	`muãx_lock
(&
¥iv
->
htc_pm_lock
);

61 i‡(--
¥iv
->
ps_u£cou¡
 != 0)

62 
u∆ock
;

64 i‡(
¥iv
->
ps_idÀ
) {

65 
	`©h9k_hw_£åxab‹t
(
¥iv
->
ah
, 
åue
);

66 
	`©h9k_hw_°›dm¨ecv
(
¥iv
->
ah
, &
ª£t
);

67 
	`©h9k_hw_£çowî
(
¥iv
->
ah
, 
ATH9K_PM_FULL_SLEEP
);

68 } i‡(
¥iv
->
ps_íabÀd
) {

69 
	`©h9k_hw_£çowî
(
¥iv
->
ah
, 
ATH9K_PM_NETWORK_SLEEP
);

72 
u∆ock
:

73 
	`muãx_u∆ock
(&
¥iv
->
htc_pm_lock
);

74 
	}
}

76 
	$©h9k_ps_w‹k
(
w‹k_°ru˘
 *
w‹k
)

78 
©h9k_htc_¥iv
 *
¥iv
 =

79 
	`c⁄èöî_of
(
w‹k
, 
©h9k_htc_¥iv
,

80 
ps_w‹k
);

81 
	`©h9k_htc_£çowî
(
¥iv
, 
ATH9K_PM_AWAKE
);

88 
	`©h9k_htc_£çowî
(
¥iv
, 
ATH9K_PM_NETWORK_SLEEP
);

89 
	}
}

91 
	$©h9k_htc_vif_ôî
(*
d©a
, 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

93 
©h9k_htc_¥iv
 *
¥iv
 = 
d©a
;

94 
õì80211_bss_c⁄f
 *
bss_c⁄f
 = &
vif
->bss_conf;

96 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_AP
 ||

97 
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
) &&

98 
bss_c⁄f
->
íabÀ_bóc⁄
) {

99 
¥iv
->
ªc⁄fig_bóc⁄
 = 
åue
;

100 
¥iv
->
ª¨m_™i
 = 
åue
;

103 i‡(
bss_c⁄f
->
assoc
) {

104 
¥iv
->
ª¨m_™i
 = 
åue
;

105 
¥iv
->
ªc⁄fig_bóc⁄
 = 
åue
;

107 
	}
}

109 
	$©h9k_htc_vif_ªc⁄fig
(
©h9k_htc_¥iv
 *
¥iv
)

111 
¥iv
->
ª¨m_™i
 = 
Ál£
;

112 
¥iv
->
ªc⁄fig_bóc⁄
 = 
Ál£
;

114 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(

115 
¥iv
->
hw
, 
IEEE80211_IFACE_ITER_RESUME_ALL
,

116 
©h9k_htc_vif_ôî
, 
¥iv
);

117 i‡(
¥iv
->
ª¨m_™i
)

118 
	`©h9k_htc_°¨t_™i
(
¥iv
);

120 i‡(
¥iv
->
ªc⁄fig_bóc⁄
) {

121 
	`©h9k_htc_ps_wakeup
(
¥iv
);

122 
	`©h9k_htc_bóc⁄_ªc⁄fig
(
¥iv
);

123 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

125 
	}
}

127 
	$©h9k_htc_bssid_ôî
(*
d©a
, 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

129 
©h9k_vif_ôî_d©a
 *
ôî_d©a
 = 
d©a
;

130 
i
;

132 i‡(
ôî_d©a
->
hw_maˇddr
 !
NULL
) {

133 
i
 = 0; i < 
ETH_ALEN
; i++)

134 
ôî_d©a
->
mask
[
i
] &~(ôî_d©a->
hw_maˇddr
[i] ^ 
mac
[i]);

136 
ôî_d©a
->
hw_maˇddr
 = 
mac
;

138 
	}
}

140 
	$©h9k_htc_£t_mac_bssid_mask
(
©h9k_htc_¥iv
 *
¥iv
,

141 
õì80211_vif
 *
vif
)

143 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

144 
©h9k_vif_ôî_d©a
 
ôî_d©a
;

151 
ôî_d©a
.
hw_maˇddr
 = 
NULL
;

152 
	`ëh_brﬂdˇ°_addr
(
ôî_d©a
.
mask
);

154 i‡(
vif
)

155 
	`©h9k_htc_bssid_ôî
(&
ôî_d©a
, 
vif
->
addr
, vif);

158 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(

159 
¥iv
->
hw
, 
IEEE80211_IFACE_ITER_RESUME_ALL
,

160 
©h9k_htc_bssid_ôî
, &
ôî_d©a
);

162 
	`mem˝y
(
comm⁄
->
bssidmask
, 
ôî_d©a
.
mask
, 
ETH_ALEN
);

164 i‡(
ôî_d©a
.
hw_maˇddr
)

165 
	`mem˝y
(
comm⁄
->
maˇddr
, 
ôî_d©a
.
hw_maˇddr
, 
ETH_ALEN
);

167 
	`©h_hw_£tbssidmask
(
comm⁄
);

168 
	}
}

170 
	$©h9k_htc_£t_›mode
(
©h9k_htc_¥iv
 *
¥iv
)

172 i‡(
¥iv
->
num_ibss_vif
)

173 
¥iv
->
ah
->
›mode
 = 
NL80211_IFTYPE_ADHOC
;

174 i‡(
¥iv
->
num_≠_vif
)

175 
¥iv
->
ah
->
›mode
 = 
NL80211_IFTYPE_AP
;

176 i‡(
¥iv
->
num_mbss_vif
)

177 
¥iv
->
ah
->
›mode
 = 
NL80211_IFTYPE_MESH_POINT
;

179 
¥iv
->
ah
->
›mode
 = 
NL80211_IFTYPE_STATION
;

181 
	`©h9k_hw_£t›mode
(
¥iv
->
ah
);

182 
	}
}

184 
	$©h9k_htc_ª£t
(
©h9k_htc_¥iv
 *
¥iv
)

186 
©h_hw
 *
ah
 = 
¥iv
->ah;

187 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

188 
õì80211_ch™√l
 *
ch™√l
 = 
¥iv
->
hw
->
c⁄f
.
ch™def
.
ch™
;

189 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
NULL
;

190 
htc_phymode
 
mode
;

191 
__be16
 
htc_mode
;

192 
u8
 
cmd_r•
;

193 
ªt
;

195 
	`muãx_lock
(&
¥iv
->
muãx
);

196 
	`©h9k_htc_ps_wakeup
(
¥iv
);

198 
	`©h9k_htc_°›_™i
(
¥iv
);

199 
	`õì80211_°›_queues
(
¥iv
->
hw
);

201 
	`dñ_timî_sync
(&
¥iv
->
tx
.
˛ónup_timî
);

202 
	`©h9k_htc_tx_døö
(
¥iv
);

204 
	`WMI_CMD
(
WMI_DISABLE_INTR_CMDID
);

205 
	`WMI_CMD
(
WMI_DRAIN_TXQ_ALL_CMDID
);

206 
	`WMI_CMD
(
WMI_STOP_RECV_CMDID
);

208 
	`©h9k_wmi_evít_døö
(
¥iv
);

210 
ˇld©a
 = &
¥iv
->caldata;

211 
ªt
 = 
	`©h9k_hw_ª£t
(
ah
,áh->
curch™
, 
ˇld©a
, 
Ál£
);

212 i‡(
ªt
) {

213 
	`©h_îr
(
comm⁄
,

215 
ch™√l
->
˚¡î_‰eq
, 
ªt
);

218 
	`©h9k_cmn_upd©e_txpow
(
ah
, 
¥iv
->
cuπxpow
,Öriv->
txpowlimô
,

219 &
¥iv
->
cuπxpow
);

221 
	`WMI_CMD
(
WMI_START_RECV_CMDID
);

222 
	`©h9k_ho°_rx_öô
(
¥iv
);

224 
mode
 = 
	`©h9k_htc_gë_curmode
(
¥iv
, 
ah
->
curch™
);

225 
htc_mode
 = 
	`˝u_to_be16
(
mode
);

226 
	`WMI_CMD_BUF
(
WMI_SET_MODE_CMDID
, &
htc_mode
);

228 
	`WMI_CMD
(
WMI_ENABLE_INTR_CMDID
);

229 
	`htc_°¨t
(
¥iv
->
htc
);

230 
	`©h9k_htc_vif_ªc⁄fig
(
¥iv
);

231 
	`õì80211_wake_queues
(
¥iv
->
hw
);

233 
	`mod_timî
(&
¥iv
->
tx
.
˛ónup_timî
,

234 
jiffõs
 + 
	`m£cs_to_jiffõs
(
ATH9K_HTC_TX_CLEANUP_INTERVAL
));

236 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

237 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

238 
	}
}

240 
	$©h9k_htc_£t_ch™√l
(
©h9k_htc_¥iv
 *
¥iv
,

241 
õì80211_hw
 *
hw
,

242 
©h9k_ch™√l
 *
hch™
)

244 
©h_hw
 *
ah
 = 
¥iv
->ah;

245 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

246 
õì80211_c⁄f
 *
c⁄f
 = &
comm⁄
->
hw
->conf;

247 
boﬁ
 
Á°cc
;

248 
õì80211_ch™√l
 *
ch™√l
 = 
hw
->
c⁄f
.
ch™def
.
ch™
;

249 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
NULL
;

250 
htc_phymode
 
mode
;

251 
__be16
 
htc_mode
;

252 
u8
 
cmd_r•
;

253 
ªt
;

255 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
))

256  -
EIO
;

258 
Á°cc
 = !!(
hw
->
c⁄f
.
Êags
 & 
IEEE80211_CONF_OFFCHANNEL
);

260 
	`©h9k_htc_ps_wakeup
(
¥iv
);

262 
	`©h9k_htc_°›_™i
(
¥iv
);

263 
	`dñ_timî_sync
(&
¥iv
->
tx
.
˛ónup_timî
);

264 
	`©h9k_htc_tx_døö
(
¥iv
);

266 
	`WMI_CMD
(
WMI_DISABLE_INTR_CMDID
);

267 
	`WMI_CMD
(
WMI_DRAIN_TXQ_ALL_CMDID
);

268 
	`WMI_CMD
(
WMI_STOP_RECV_CMDID
);

270 
	`©h9k_wmi_evít_døö
(
¥iv
);

272 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

274 
¥iv
->
ah
->
curch™
->
ch™√l
,

275 
ch™√l
->
˚¡î_‰eq
, 
	`c⁄f_is_ht
(
c⁄f
), 
	`c⁄f_is_ht40
(conf),

276 
Á°cc
);

278 i‡(!
Á°cc
)

279 
ˇld©a
 = &
¥iv
->caldata;

281 
ªt
 = 
	`©h9k_hw_ª£t
(
ah
, 
hch™
, 
ˇld©a
, 
Á°cc
);

282 i‡(
ªt
) {

283 
	`©h_îr
(
comm⁄
,

285 
ch™√l
->
˚¡î_‰eq
, 
ªt
);

286 
îr
;

289 
	`©h9k_cmn_upd©e_txpow
(
ah
, 
¥iv
->
cuπxpow
,Öriv->
txpowlimô
,

290 &
¥iv
->
cuπxpow
);

292 
	`WMI_CMD
(
WMI_START_RECV_CMDID
);

293 i‡(
ªt
)

294 
îr
;

296 
	`©h9k_ho°_rx_öô
(
¥iv
);

298 
mode
 = 
	`©h9k_htc_gë_curmode
(
¥iv
, 
hch™
);

299 
htc_mode
 = 
	`˝u_to_be16
(
mode
);

300 
	`WMI_CMD_BUF
(
WMI_SET_MODE_CMDID
, &
htc_mode
);

301 i‡(
ªt
)

302 
îr
;

304 
	`WMI_CMD
(
WMI_ENABLE_INTR_CMDID
);

305 i‡(
ªt
)

306 
îr
;

308 
	`htc_°¨t
(
¥iv
->
htc
);

310 i‡(!
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
) &&

311 !(
hw
->
c⁄f
.
Êags
 & 
IEEE80211_CONF_OFFCHANNEL
))

312 
	`©h9k_htc_vif_ªc⁄fig
(
¥iv
);

314 
	`mod_timî
(&
¥iv
->
tx
.
˛ónup_timî
,

315 
jiffõs
 + 
	`m£cs_to_jiffõs
(
ATH9K_HTC_TX_CLEANUP_INTERVAL
));

318 i‡(
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
) &&

319 
¥iv
->
•ec_¥iv
.
•e˘øl_mode
 =
SPECTRAL_CHANSCAN
)

320 
	`©h9k_cmn_•e˘øl_sˇn_åiggî
(
comm⁄
, &
¥iv
->
•ec_¥iv
);

321 
îr
:

322 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

323  
ªt
;

324 
	}
}

333 
	$__©h9k_htc_ªmove_m⁄ô‹_öãrÁ˚
(
©h9k_htc_¥iv
 *
¥iv
)

335 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

336 
©h9k_htc_èrgë_vif
 
hvif
;

337 
ªt
 = 0;

338 
u8
 
cmd_r•
;

340 
	`mem£t
(&
hvif
, 0, (
©h9k_htc_èrgë_vif
));

341 
	`mem˝y
(&
hvif
.
myaddr
, 
comm⁄
->
maˇddr
, 
ETH_ALEN
);

342 
hvif
.
ödex
 = 
¥iv
->
m⁄_vif_idx
;

343 
	`WMI_CMD_BUF
(
WMI_VAP_REMOVE_CMDID
, &
hvif
);

344 i‡(
ªt
) {

345 
	`©h_îr
(
comm⁄
, "UnableÅoÑemove monitor interfaceát idx: %d\n",

346 
¥iv
->
m⁄_vif_idx
);

349 
¥iv
->
nvifs
--;

350 
¥iv
->
vif_¶Ÿ
 &~(1 <<Öriv->
m⁄_vif_idx
);

351 
	}
}

353 
	$©h9k_htc_add_m⁄ô‹_öãrÁ˚
(
©h9k_htc_¥iv
 *
¥iv
)

355 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

356 
©h9k_htc_èrgë_vif
 
hvif
;

357 
©h9k_htc_èrgë_°a
 
t°a
;

358 
ªt
 = 0, 
°a_idx
;

359 
u8
 
cmd_r•
;

361 i‡((
¥iv
->
nvifs
 >
ATH9K_HTC_MAX_VIF
) ||

362 (
¥iv
->
n°©i⁄s
 >
ATH9K_HTC_MAX_STA
)) {

363 
ªt
 = -
ENOBUFS
;

364 
îr_vif
;

367 
°a_idx
 = 
	`ffz
(
¥iv
->
°a_¶Ÿ
);

368 i‡((
°a_idx
 < 0Ë|| (°a_idx > 
ATH9K_HTC_MAX_STA
)) {

369 
ªt
 = -
ENOBUFS
;

370 
îr_vif
;

376 
	`mem£t
(&
hvif
, 0, (
©h9k_htc_èrgë_vif
));

377 
	`mem˝y
(&
hvif
.
myaddr
, 
comm⁄
->
maˇddr
, 
ETH_ALEN
);

379 
hvif
.
›mode
 = 
HTC_M_MONITOR
;

380 
hvif
.
ödex
 = 
	`ffz
(
¥iv
->
vif_¶Ÿ
);

382 
	`WMI_CMD_BUF
(
WMI_VAP_CREATE_CMDID
, &
hvif
);

383 i‡(
ªt
)

384 
îr_vif
;

390 
¥iv
->
m⁄_vif_idx
 = 
hvif
.
ödex
;

391 
¥iv
->
vif_¶Ÿ
 |(1 << 
hvif
.
ödex
);

397 i‡(!
¥iv
->
nvifs
)

398 
¥iv
->
ah
->
›mode
 = 
NL80211_IFTYPE_MONITOR
;

400 
¥iv
->
nvifs
++;

405 
	`mem£t
(&
t°a
, 0, (
©h9k_htc_èrgë_°a
));

407 
	`mem˝y
(&
t°a
.
maˇddr
, 
comm⁄
->maˇddr, 
ETH_ALEN
);

409 
t°a
.
is_vif_°a
 = 1;

410 
t°a
.
°a_ödex
 = 
°a_idx
;

411 
t°a
.
vif_ödex
 = 
hvif
.
ödex
;

412 
t°a
.
maxampdu
 = 
	`˝u_to_be16
(0xffff);

414 
	`WMI_CMD_BUF
(
WMI_NODE_CREATE_CMDID
, &
t°a
);

415 i‡(
ªt
) {

416 
	`©h_îr
(
comm⁄
, "UnableÅoádd stationÉntry for monitor mode\n");

417 
îr_°a
;

420 
¥iv
->
°a_¶Ÿ
 |(1 << 
°a_idx
);

421 
¥iv
->
n°©i⁄s
++;

422 
¥iv
->
vif_°a_pos
[¥iv->
m⁄_vif_idx
] = 
°a_idx
;

423 
¥iv
->
ah
->
is_m⁄ô‹ög
 = 
åue
;

425 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

427 
¥iv
->
m⁄_vif_idx
, 
°a_idx
);

431 
îr_°a
:

435 
	`__©h9k_htc_ªmove_m⁄ô‹_öãrÁ˚
(
¥iv
);

436 
îr_vif
:

437 
	`©h_dbg
(
comm⁄
, 
FATAL
, "UnableÅoáttachá monitor interface\n");

439  
ªt
;

440 
	}
}

442 
	$©h9k_htc_ªmove_m⁄ô‹_öãrÁ˚
(
©h9k_htc_¥iv
 *
¥iv
)

444 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

445 
ªt
 = 0;

446 
u8
 
cmd_r•
, 
°a_idx
;

448 
	`__©h9k_htc_ªmove_m⁄ô‹_öãrÁ˚
(
¥iv
);

450 
°a_idx
 = 
¥iv
->
vif_°a_pos
[¥iv->
m⁄_vif_idx
];

452 
	`WMI_CMD_BUF
(
WMI_NODE_REMOVE_CMDID
, &
°a_idx
);

453 i‡(
ªt
) {

454 
	`©h_îr
(
comm⁄
, "UnableÅoÑemove stationÉntry for monitor mode\n");

455  
ªt
;

458 
¥iv
->
°a_¶Ÿ
 &~(1 << 
°a_idx
);

459 
¥iv
->
n°©i⁄s
--;

460 
¥iv
->
ah
->
is_m⁄ô‹ög
 = 
Ál£
;

462 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

464 
¥iv
->
m⁄_vif_idx
, 
°a_idx
);

467 
	}
}

469 
	$©h9k_htc_add_°©i⁄
(
©h9k_htc_¥iv
 *
¥iv
,

470 
õì80211_vif
 *
vif
,

471 
õì80211_°a
 *
°a
)

473 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

474 
©h9k_htc_èrgë_°a
 
t°a
;

475 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*Ë
vif
->
drv_¥iv
;

476 
©h9k_htc_°a
 *
i°a
;

477 
ªt
, 
°a_idx
;

478 
u8
 
cmd_r•
;

479 
u16
 
maxampdu
;

481 i‡(
¥iv
->
n°©i⁄s
 >
ATH9K_HTC_MAX_STA
)

482  -
ENOBUFS
;

484 
°a_idx
 = 
	`ffz
(
¥iv
->
°a_¶Ÿ
);

485 i‡((
°a_idx
 < 0Ë|| (°a_idx > 
ATH9K_HTC_MAX_STA
))

486  -
ENOBUFS
;

488 
	`mem£t
(&
t°a
, 0, (
©h9k_htc_èrgë_°a
));

490 i‡(
°a
) {

491 
i°a
 = (
©h9k_htc_°a
 *Ë
°a
->
drv_¥iv
;

492 
	`mem˝y
(&
t°a
.
maˇddr
, 
°a
->
addr
, 
ETH_ALEN
);

493 
	`mem˝y
(&
t°a
.
bssid
, 
comm⁄
->
curbssid
, 
ETH_ALEN
);

494 
i°a
->
ödex
 = 
°a_idx
;

495 
t°a
.
is_vif_°a
 = 0;

496 
maxampdu
 = 1 << (
IEEE80211_HT_MAX_AMPDU_FACTOR
 +

497 
°a
->
ht_ˇp
.
ampdu_Á˘‹
);

498 
t°a
.
maxampdu
 = 
	`˝u_to_be16
(maxampdu);

500 
	`mem˝y
(&
t°a
.
maˇddr
, 
vif
->
addr
, 
ETH_ALEN
);

501 
t°a
.
is_vif_°a
 = 1;

502 
t°a
.
maxampdu
 = 
	`˝u_to_be16
(0xffff);

505 
t°a
.
°a_ödex
 = 
°a_idx
;

506 
t°a
.
vif_ödex
 = 
avp
->
ödex
;

508 
	`WMI_CMD_BUF
(
WMI_NODE_CREATE_CMDID
, &
t°a
);

509 i‡(
ªt
) {

510 i‡(
°a
)

511 
	`©h_îr
(
comm⁄
,

513 
°a
->
addr
);

514  
ªt
;

517 i‡(
°a
) {

518 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

520 
°a
->
addr
, 
t°a
.
°a_ödex
);

522 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

524 
avp
->
ödex
, 
t°a
.
°a_ödex
);

527 
¥iv
->
°a_¶Ÿ
 |(1 << 
°a_idx
);

528 
¥iv
->
n°©i⁄s
++;

529 i‡(!
°a
)

530 
¥iv
->
vif_°a_pos
[
avp
->
ödex
] = 
°a_idx
;

533 
	}
}

535 
	$©h9k_htc_ªmove_°©i⁄
(
©h9k_htc_¥iv
 *
¥iv
,

536 
õì80211_vif
 *
vif
,

537 
õì80211_°a
 *
°a
)

539 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

540 
©h9k_htc_vif
 *
avp
 = (©h9k_htc_vi‡*Ë
vif
->
drv_¥iv
;

541 
©h9k_htc_°a
 *
i°a
;

542 
ªt
;

543 
u8
 
cmd_r•
, 
°a_idx
;

545 i‡(
°a
) {

546 
i°a
 = (
©h9k_htc_°a
 *Ë
°a
->
drv_¥iv
;

547 
°a_idx
 = 
i°a
->
ödex
;

549 
°a_idx
 = 
¥iv
->
vif_°a_pos
[
avp
->
ödex
];

552 
	`WMI_CMD_BUF
(
WMI_NODE_REMOVE_CMDID
, &
°a_idx
);

553 i‡(
ªt
) {

554 i‡(
°a
)

555 
	`©h_îr
(
comm⁄
,

557 
°a
->
addr
);

558  
ªt
;

561 i‡(
°a
) {

562 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

564 
°a
->
addr
, 
°a_idx
);

566 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

568 
avp
->
ödex
, 
°a_idx
);

571 
¥iv
->
°a_¶Ÿ
 &~(1 << 
°a_idx
);

572 
¥iv
->
n°©i⁄s
--;

575 
	}
}

577 
	$©h9k_htc_upd©e_ˇp_èrgë
(
©h9k_htc_¥iv
 *
¥iv
,

578 
u8
 
íabÀ_c€x
)

580 
©h9k_htc_ˇp_èrgë
 
tˇp
;

581 
ªt
;

582 
u8
 
cmd_r•
;

584 
	`mem£t
(&
tˇp
, 0, (
©h9k_htc_ˇp_èrgë
));

586 
tˇp
.
ampdu_limô
 = 
	`˝u_to_be32
(0xffff);

587 
tˇp
.
ampdu_sub‰ames
 = 0xff;

588 
tˇp
.
íabÀ_c€x
 =Énable_coex;

589 
tˇp
.
tx_chaömask
 = 
¥iv
->
ah
->
ˇps
.tx_chainmask;

591 
	`WMI_CMD_BUF
(
WMI_TARGET_IC_UPDATE_CMDID
, &
tˇp
);

593  
ªt
;

594 
	}
}

596 
	$©h9k_htc_£tup_øã
(
©h9k_htc_¥iv
 *
¥iv
,

597 
õì80211_°a
 *
°a
,

598 
©h9k_htc_èrgë_øã
 *
å©e
)

600 
©h9k_htc_°a
 *
i°a
 = (©h9k_htc_°®*Ë
°a
->
drv_¥iv
;

601 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

602 
u32
 
ˇps
 = 0;

603 
i
, 
j
;

605 
sb™d
 = 
¥iv
->
hw
->
wùhy
->
b™ds
[¥iv->hw->
c⁄f
.
ch™def
.
ch™
->
b™d
];

607 
i
 = 0, 
j
 = 0; i < 
sb™d
->
n_bôøãs
; i++) {

608 i‡(
°a
->
suµ_øãs
[
sb™d
->
b™d
] & 
	`BIT
(
i
)) {

609 
å©e
->
øãs
.
Àgacy_øãs
.
rs_øãs
[
j
]

610 (
sb™d
->
bôøãs
[
i
].
bôøã
 * 2) / 10;

611 
j
++;

614 
å©e
->
øãs
.
Àgacy_øãs
.
rs_ƒ©es
 = 
j
;

616 i‡(
°a
->
ht_ˇp
.
ht_suµ‹ãd
) {

617 
i
 = 0, 
j
 = 0; i < 77; i++) {

618 i‡(
°a
->
ht_ˇp
.
mcs
.
rx_mask
[
i
/8] & (1<<(i%8)))

619 
å©e
->
øãs
.
ht_øãs
.
rs_øãs
[
j
++] = 
i
;

620 i‡(
j
 =
ATH_HTC_RATE_MAX
)

623 
å©e
->
øãs
.
ht_øãs
.
rs_ƒ©es
 = 
j
;

625 
ˇps
 = 
WLAN_RC_HT_FLAG
;

626 i‡(
°a
->
ht_ˇp
.
ˇp
 & 
IEEE80211_HT_CAP_RX_STBC
)

627 
ˇps
 |
ATH_RC_TX_STBC_FLAG
;

628 i‡(
°a
->
ht_ˇp
.
mcs
.
rx_mask
[1])

629 
ˇps
 |
WLAN_RC_DS_FLAG
;

630 i‡((
°a
->
ht_ˇp
.
ˇp
 & 
IEEE80211_HT_CAP_SUP_WIDTH_20_40
) &&

631 (
	`c⁄f_is_ht40
(&
¥iv
->
hw
->
c⁄f
)))

632 
ˇps
 |
WLAN_RC_40_FLAG
;

633 i‡(
	`c⁄f_is_ht40
(&
¥iv
->
hw
->
c⁄f
) &&

634 (
°a
->
ht_ˇp
.
ˇp
 & 
IEEE80211_HT_CAP_SGI_40
))

635 
ˇps
 |
WLAN_RC_SGI_FLAG
;

636 i‡(
	`c⁄f_is_ht20
(&
¥iv
->
hw
->
c⁄f
) &&

637 (
°a
->
ht_ˇp
.
ˇp
 & 
IEEE80211_HT_CAP_SGI_20
))

638 
ˇps
 |
WLAN_RC_SGI_FLAG
;

641 
å©e
->
°a_ödex
 = 
i°a
->
ödex
;

642 
å©e
->
i¢ew
 = 1;

643 
å©e
->
ˇpÊags
 = 
	`˝u_to_be32
(
ˇps
);

644 
	}
}

646 
	$©h9k_htc_£nd_øã_cmd
(
©h9k_htc_¥iv
 *
¥iv
,

647 
©h9k_htc_èrgë_øã
 *
å©e
)

649 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

650 
ªt
;

651 
u8
 
cmd_r•
;

653 
	`WMI_CMD_BUF
(
WMI_RC_RATE_UPDATE_CMDID
, 
å©e
);

654 i‡(
ªt
) {

655 
	`©h_îr
(
comm⁄
,

659  
ªt
;

660 
	}
}

662 
	$©h9k_htc_öô_øã
(
©h9k_htc_¥iv
 *
¥iv
,

663 
õì80211_°a
 *
°a
)

665 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

666 
©h9k_htc_èrgë_øã
 
å©e
;

667 
ªt
;

669 
	`mem£t
(&
å©e
, 0, (
©h9k_htc_èrgë_øã
));

670 
	`©h9k_htc_£tup_øã
(
¥iv
, 
°a
, &
å©e
);

671 
ªt
 = 
	`©h9k_htc_£nd_øã_cmd
(
¥iv
, &
å©e
);

672 i‡(!
ªt
)

673 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

675 
°a
->
addr
, 
	`be32_to_˝u
(
å©e
.
ˇpÊags
));

676 
	}
}

678 
	$©h9k_htc_upd©e_øã
(
©h9k_htc_¥iv
 *
¥iv
,

679 
õì80211_vif
 *
vif
,

680 
õì80211_bss_c⁄f
 *
bss_c⁄f
)

682 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

683 
©h9k_htc_èrgë_øã
 
å©e
;

684 
õì80211_°a
 *
°a
;

685 
ªt
;

687 
	`mem£t
(&
å©e
, 0, (
©h9k_htc_èrgë_øã
));

689 
	`rcu_ªad_lock
();

690 
°a
 = 
	`õì80211_föd_°a
(
vif
, 
bss_c⁄f
->
bssid
);

691 i‡(!
°a
) {

692 
	`rcu_ªad_u∆ock
();

695 
	`©h9k_htc_£tup_øã
(
¥iv
, 
°a
, &
å©e
);

696 
	`rcu_ªad_u∆ock
();

698 
ªt
 = 
	`©h9k_htc_£nd_øã_cmd
(
¥iv
, &
å©e
);

699 i‡(!
ªt
)

700 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

702 
bss_c⁄f
->
bssid
, 
	`be32_to_˝u
(
å©e
.
ˇpÊags
));

703 
	}
}

705 
	$©h9k_htc_tx_aggr_›î
(
©h9k_htc_¥iv
 *
¥iv
,

706 
õì80211_vif
 *
vif
,

707 
õì80211_°a
 *
°a
,

708 
õì80211_ampdu_mlme_a˘i⁄
 
a˘i⁄
,

709 
u16
 
tid
)

711 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

712 
©h9k_htc_èrgë_aggr
 
aggr
;

713 
©h9k_htc_°a
 *
i°a
;

714 
ªt
 = 0;

715 
u8
 
cmd_r•
;

717 i‡(
tid
 >
ATH9K_HTC_MAX_TID
)

718  -
EINVAL
;

720 
	`mem£t
(&
aggr
, 0, (
©h9k_htc_èrgë_aggr
));

721 
i°a
 = (
©h9k_htc_°a
 *Ë
°a
->
drv_¥iv
;

723 
aggr
.
°a_ödex
 = 
i°a
->
ödex
;

724 
aggr
.
tidno
 = 
tid
 & 0xf;

725 
aggr
.
aggr_íabÀ
 = (
a˘i⁄
 =
IEEE80211_AMPDU_TX_START
Ë? 
åue
 : 
Ál£
;

727 
	`WMI_CMD_BUF
(
WMI_TX_AGGR_ENABLE_CMDID
, &
aggr
);

728 i‡(
ªt
)

729 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

731 (
aggr
.
aggr_íabÀ
Ë? "°¨t" : "°›", 
°a
->
addr
, 
tid
);

733 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

735 (
aggr
.
aggr_íabÀ
) ? "Starting" : "Stopping",

736 
°a
->
addr
, 
tid
);

738 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

739 
i°a
->
tid_°©e
[
tid
] = (
aggr
.
aggr_íabÀ
 && !
ªt
Ë? 
AGGR_START
 : 
AGGR_STOP
;

740 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

742  
ªt
;

743 
	}
}

749 
	$©h9k_htc_°¨t_™i
(
©h9k_htc_¥iv
 *
¥iv
)

751 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

752 
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

754 
comm⁄
->
™i
.
l⁄gˇl_timî
 = 
time°amp
;

755 
comm⁄
->
™i
.
sh‹tˇl_timî
 = 
time°amp
;

756 
comm⁄
->
™i
.
check™i_timî
 = 
time°amp
;

758 
	`£t_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
);

760 
	`õì80211_queue_dñayed_w‹k
(
comm⁄
->
hw
, &
¥iv
->
™i_w‹k
,

761 
	`m£cs_to_jiffõs
(
ATH_ANI_POLLINTERVAL
));

762 
	}
}

764 
	$©h9k_htc_°›_™i
(
©h9k_htc_¥iv
 *
¥iv
)

766 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

767 
	`ˇn˚l_dñayed_w‹k_sync
(&
¥iv
->
™i_w‹k
);

768 
	`˛ór_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
);

769 
	}
}

771 
	$©h9k_htc_™i_w‹k
(
w‹k_°ru˘
 *
w‹k
)

773 
©h9k_htc_¥iv
 *
¥iv
 =

774 
	`c⁄èöî_of
(
w‹k
, 
©h9k_htc_¥iv
, 
™i_w‹k
.work);

775 
©h_hw
 *
ah
 = 
¥iv
->ah;

776 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

777 
boﬁ
 
l⁄gˇl
 = 
Ál£
;

778 
boﬁ
 
sh‹tˇl
 = 
Ál£
;

779 
boﬁ
 
™iÊag
 = 
Ál£
;

780 
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

781 
u32
 
ˇl_öãrvÆ
, 
sh‹t_ˇl_öãrvÆ
;

783 
sh‹t_ˇl_öãrvÆ
 = (
ah
->
›mode
 =
NL80211_IFTYPE_AP
) ?

784 
ATH_AP_SHORT_CALINTERVAL
 : 
ATH_STA_SHORT_CALINTERVAL
;

787 i‡(
ah
->
powî_mode
 !
ATH9K_PM_AWAKE
)

788 
£t_timî
;

791 i‡((
time°amp
 - 
comm⁄
->
™i
.
l⁄gˇl_timî
Ë>
ATH_LONG_CALINTERVAL
) {

792 
l⁄gˇl
 = 
åue
;

793 
	`©h_dbg
(
comm⁄
, 
ANI
, "l⁄gˇ»@%lu\n", 
jiffõs
);

794 
comm⁄
->
™i
.
l⁄gˇl_timî
 = 
time°amp
;

801 i‡(
comm⁄
->
™i
.
ˇld⁄e
 <= 0) {

802 i‡((
time°amp
 - 
comm⁄
->
™i
.
sh‹tˇl_timî
) >=

803 
sh‹t_ˇl_öãrvÆ
) {

804 
sh‹tˇl
 = 
åue
;

805 
	`©h_dbg
(
comm⁄
, 
ANI
, "sh‹tˇ»@%lu\n", 
jiffõs
);

806 
comm⁄
->
™i
.
sh‹tˇl_timî
 = 
time°amp
;

807 
comm⁄
->
™i
.
ª£tˇl_timî
 = 
time°amp
;

810 i‡((
time°amp
 - 
comm⁄
->
™i
.
ª£tˇl_timî
) >=

811 
ATH_RESTART_CALINTERVAL
) {

812 
comm⁄
->
™i
.
ˇld⁄e
 = 
	`©h9k_hw_ª£t_ˇlvÆid
(
ah
);

813 i‡(
comm⁄
->
™i
.
ˇld⁄e
)

814 
comm⁄
->
™i
.
ª£tˇl_timî
 = 
time°amp
;

819 i‡((
time°amp
 - 
comm⁄
->
™i
.
check™i_timî
Ë>
ATH_ANI_POLLINTERVAL
) {

820 
™iÊag
 = 
åue
;

821 
comm⁄
->
™i
.
check™i_timî
 = 
time°amp
;

825 i‡(
l⁄gˇl
 || 
sh‹tˇl
 || 
™iÊag
) {

827 
	`©h9k_htc_ps_wakeup
(
¥iv
);

830 i‡(
™iÊag
)

831 
	`©h9k_hw_™i_m⁄ô‹
(
ah
,áh->
curch™
);

834 i‡(
l⁄gˇl
 || 
sh‹tˇl
)

835 
comm⁄
->
™i
.
ˇld⁄e
 =

836 
	`©h9k_hw_ˇlibøã
(
ah
,áh->
curch™
,

837 
ah
->
rxchaömask
, 
l⁄gˇl
);

839 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

842 
£t_timî
:

848 
ˇl_öãrvÆ
 = 
ATH_LONG_CALINTERVAL
;

849 
ˇl_öãrvÆ
 = 
	`mö
(ˇl_öãrvÆ, (
u32
)
ATH_ANI_POLLINTERVAL
);

854 i‡(
comm⁄
->
™i
.
ˇld⁄e
 <= 0)

855 
ˇl_öãrvÆ
 = 
	`mö
(ˇl_öãrvÆ, (
u32
)
sh‹t_ˇl_öãrvÆ
);

857 
	`õì80211_queue_dñayed_w‹k
(
comm⁄
->
hw
, &
¥iv
->
™i_w‹k
,

858 
	`m£cs_to_jiffõs
(
ˇl_öãrvÆ
));

859 
	}
}

865 
	$©h9k_htc_tx
(
õì80211_hw
 *
hw
,

866 
õì80211_tx_c⁄åﬁ
 *
c⁄åﬁ
,

867 
sk_buff
 *
skb
)

869 
õì80211_hdr
 *
hdr
;

870 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

871 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

872 
∑dpos
, 
∑dsize
, 
ªt
, 
¶Ÿ
;

874 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

877 
∑dpos
 = 
	`õì80211_hdæí
(
hdr
->
‰ame_c⁄åﬁ
);

878 
∑dsize
 = 
∑dpos
 & 3;

879 i‡(
∑dsize
 && 
skb
->
Àn
 > 
∑dpos
) {

880 i‡(
	`skb_hódroom
(
skb
Ë< 
∑dsize
) {

881 
	`©h_dbg
(
comm⁄
, 
XMIT
, "NoÑoom forÖadding\n");

882 
Áû_tx
;

884 
	`skb_push
(
skb
, 
∑dsize
);

885 
	`memmove
(
skb
->
d©a
, skb->d©®+ 
∑dsize
, 
∑dpos
);

888 
¶Ÿ
 = 
	`©h9k_htc_tx_gë_¶Ÿ
(
¥iv
);

889 i‡(
¶Ÿ
 < 0) {

890 
	`©h_dbg
(
comm⁄
, 
XMIT
, "No free TX slot\n");

891 
Áû_tx
;

894 
ªt
 = 
	`©h9k_htc_tx_°¨t
(
¥iv
, 
c⁄åﬁ
->
°a
, 
skb
, 
¶Ÿ
, 
Ál£
);

895 i‡(
ªt
 != 0) {

896 
	`©h_dbg
(
comm⁄
, 
XMIT
, "Tx failed\n");

897 
˛ór_¶Ÿ
;

900 
	`©h9k_htc_check_°›_queues
(
¥iv
);

904 
˛ór_¶Ÿ
:

905 
	`©h9k_htc_tx_˛ór_¶Ÿ
(
¥iv
, 
¶Ÿ
);

906 
Áû_tx
:

907 
	`dev_k‰ì_skb_™y
(
skb
);

908 
	}
}

910 
	$©h9k_htc_°¨t
(
õì80211_hw
 *
hw
)

912 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

913 
©h_hw
 *
ah
 = 
¥iv
->ah;

914 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

915 
õì80211_ch™√l
 *
curch™
 = 
hw
->
c⁄f
.
ch™def
.
ch™
;

916 
©h9k_ch™√l
 *
öô_ch™√l
;

917 
ªt
 = 0;

918 
htc_phymode
 
mode
;

919 
__be16
 
htc_mode
;

920 
u8
 
cmd_r•
;

922 
	`muãx_lock
(&
¥iv
->
muãx
);

924 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

926 
curch™
->
˚¡î_‰eq
);

929 
	`©h9k_htc_£çowî
(
¥iv
, 
ATH9K_PM_AWAKE
);

930 
	`WMI_CMD
(
WMI_FLUSH_RECV_CMDID
);

933 
öô_ch™√l
 = 
	`©h9k_cmn_gë_ch™√l
(
hw
, 
ah
, &hw->
c⁄f
.
ch™def
);

935 
ªt
 = 
	`©h9k_hw_ª£t
(
ah
, 
öô_ch™√l
,áh->
ˇld©a
, 
Ál£
);

936 i‡(
ªt
) {

937 
	`©h_îr
(
comm⁄
,

939 
ªt
, 
curch™
->
˚¡î_‰eq
);

940 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

941  
ªt
;

944 
	`©h9k_cmn_upd©e_txpow
(
ah
, 
¥iv
->
cuπxpow
,Öriv->
txpowlimô
,

945 &
¥iv
->
cuπxpow
);

947 
mode
 = 
	`©h9k_htc_gë_curmode
(
¥iv
, 
öô_ch™√l
);

948 
htc_mode
 = 
	`˝u_to_be16
(
mode
);

949 
	`WMI_CMD_BUF
(
WMI_SET_MODE_CMDID
, &
htc_mode
);

950 
	`WMI_CMD
(
WMI_ATH_INIT_CMDID
);

951 
	`WMI_CMD
(
WMI_START_RECV_CMDID
);

953 
	`©h9k_ho°_rx_öô
(
¥iv
);

955 
ªt
 = 
	`©h9k_htc_upd©e_ˇp_èrgë
(
¥iv
, 0);

956 i‡(
ªt
)

957 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

960 
	`˛ór_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
);

961 
	`htc_°¨t
(
¥iv
->
htc
);

963 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

964 
¥iv
->
tx
.
Êags
 &~
ATH9K_HTC_OP_TX_QUEUES_STOP
;

965 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

967 
	`õì80211_wake_queues
(
hw
);

969 
	`mod_timî
(&
¥iv
->
tx
.
˛ónup_timî
,

970 
jiffõs
 + 
	`m£cs_to_jiffõs
(
ATH9K_HTC_TX_CLEANUP_INTERVAL
));

972 
	`©h9k_htc_°¨t_btc€x
(
¥iv
);

974 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

976  
ªt
;

977 
	}
}

979 
	$©h9k_htc_°›
(
õì80211_hw
 *
hw
)

981 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

982 
©h_hw
 *
ah
 = 
¥iv
->ah;

983 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

984 
ªt
 
	`__©åibuã__
 ((
unu£d
));

985 
u8
 
cmd_r•
;

987 
	`muãx_lock
(&
¥iv
->
muãx
);

989 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
)) {

990 
	`©h_dbg
(
comm⁄
, 
ANY
, "DeviceÇotÖresent\n");

991 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

995 
	`©h9k_htc_ps_wakeup
(
¥iv
);

997 
	`WMI_CMD
(
WMI_DISABLE_INTR_CMDID
);

998 
	`WMI_CMD
(
WMI_DRAIN_TXQ_ALL_CMDID
);

999 
	`WMI_CMD
(
WMI_STOP_RECV_CMDID
);

1001 
	`èskÀt_kûl
(&
¥iv
->
rx_èskÀt
);

1003 
	`dñ_timî_sync
(&
¥iv
->
tx
.
˛ónup_timî
);

1004 
	`©h9k_htc_tx_døö
(
¥iv
);

1005 
	`©h9k_wmi_evít_døö
(
¥iv
);

1007 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1010 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
Áèl_w‹k
);

1011 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
ps_w‹k
);

1013 #ifde‡
CONFIG_MAC80211_LEDS


1014 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
Àd_w‹k
);

1016 
	`©h9k_htc_°›_™i
(
¥iv
);

1018 
	`muãx_lock
(&
¥iv
->
muãx
);

1020 
	`©h9k_htc_°›_btc€x
(
¥iv
);

1023 i‡(
¥iv
->
ah
->
is_m⁄ô‹ög
)

1024 
	`©h9k_htc_ªmove_m⁄ô‹_öãrÁ˚
(
¥iv
);

1026 
	`©h9k_hw_phy_dißbÀ
(
ah
);

1027 
	`©h9k_hw_dißbÀ
(
ah
);

1028 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1029 
	`©h9k_htc_£çowî
(
¥iv
, 
ATH9K_PM_FULL_SLEEP
);

1031 
	`£t_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
);

1033 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Driver halt\n");

1034 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1035 
	}
}

1037 
	$©h9k_htc_add_öãrÁ˚
(
õì80211_hw
 *
hw
,

1038 
õì80211_vif
 *
vif
)

1040 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1041 
©h9k_htc_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1042 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1043 
©h9k_htc_èrgë_vif
 
hvif
;

1044 
ªt
 = 0;

1045 
u8
 
cmd_r•
;

1047 
	`muãx_lock
(&
¥iv
->
muãx
);

1049 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1050 
	`mem£t
(&
hvif
, 0, (
©h9k_htc_èrgë_vif
));

1051 
	`mem˝y
(&
hvif
.
myaddr
, 
vif
->
addr
, 
ETH_ALEN
);

1053 
vif
->
ty≥
) {

1054 
NL80211_IFTYPE_STATION
:

1055 
hvif
.
›mode
 = 
HTC_M_STA
;

1057 
NL80211_IFTYPE_ADHOC
:

1058 
hvif
.
›mode
 = 
HTC_M_IBSS
;

1060 
NL80211_IFTYPE_AP
:

1061 
hvif
.
›mode
 = 
HTC_M_HOSTAP
;

1063 
NL80211_IFTYPE_MESH_POINT
:

1064 
hvif
.
›mode
 = 
HTC_M_WDS
;

1067 
	`©h_îr
(
comm⁄
,

1068 "I¡îÁ˚Åy≥ %dÇŸ yë suµ‹ãd\n", 
vif
->
ty≥
);

1069 
ªt
 = -
EOPNOTSUPP
;

1070 
out
;

1074 
avp
->
ödex
 = 
hvif
.ödex = 
	`ffz
(
¥iv
->
vif_¶Ÿ
);

1075 
hvif
.
π°hªshﬁd
 = 
	`˝u_to_be16
(2304);

1076 
	`WMI_CMD_BUF
(
WMI_VAP_CREATE_CMDID
, &
hvif
);

1077 i‡(
ªt
)

1078 
out
;

1084 
ªt
 = 
	`©h9k_htc_add_°©i⁄
(
¥iv
, 
vif
, 
NULL
);

1085 i‡(
ªt
) {

1086 
	`WMI_CMD_BUF
(
WMI_VAP_REMOVE_CMDID
, &
hvif
);

1087 
out
;

1090 
	`©h9k_htc_£t_mac_bssid_mask
(
¥iv
, 
vif
);

1092 
¥iv
->
vif_¶Ÿ
 |(1 << 
avp
->
ödex
);

1093 
¥iv
->
nvifs
++;

1095 
	`INC_VIF
(
¥iv
, 
vif
->
ty≥
);

1097 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_AP
) ||

1098 (
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
) ||

1099 (
vif
->
ty≥
 =
NL80211_IFTYPE_ADHOC
))

1100 
	`©h9k_htc_assign_b¶Ÿ
(
¥iv
, 
vif
);

1102 
	`©h9k_htc_£t_›mode
(
¥iv
);

1104 i‡((
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_AP
) &&

1105 !
	`ã°_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
)) {

1106 
	`©h9k_hw_£t_tsÁdju°
(
¥iv
->
ah
, 
åue
);

1107 
	`©h9k_htc_°¨t_™i
(
¥iv
);

1110 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Attachá VIF ofÅype: %dát idx: %d\n",

1111 
vif
->
ty≥
, 
avp
->
ödex
);

1113 
out
:

1114 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1115 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1117  
ªt
;

1118 
	}
}

1120 
	$©h9k_htc_ªmove_öãrÁ˚
(
õì80211_hw
 *
hw
,

1121 
õì80211_vif
 *
vif
)

1123 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1124 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1125 
©h9k_htc_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1126 
©h9k_htc_èrgë_vif
 
hvif
;

1127 
ªt
 = 0;

1128 
u8
 
cmd_r•
;

1130 
	`muãx_lock
(&
¥iv
->
muãx
);

1131 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1133 
	`mem£t
(&
hvif
, 0, (
©h9k_htc_èrgë_vif
));

1134 
	`mem˝y
(&
hvif
.
myaddr
, 
vif
->
addr
, 
ETH_ALEN
);

1135 
hvif
.
ödex
 = 
avp
->index;

1136 
	`WMI_CMD_BUF
(
WMI_VAP_REMOVE_CMDID
, &
hvif
);

1137 i‡(
ªt
) {

1138 
	`©h_îr
(
comm⁄
, "UnableÅoÑemove interfaceát idx: %d\n",

1139 
avp
->
ödex
);

1141 
¥iv
->
nvifs
--;

1142 
¥iv
->
vif_¶Ÿ
 &~(1 << 
avp
->
ödex
);

1144 i‡(
¥iv
->
cß_vif
 =
vif
)

1145 
¥iv
->
cß_vif
 = 
NULL
;

1147 
	`©h9k_htc_ªmove_°©i⁄
(
¥iv
, 
vif
, 
NULL
);

1149 
	`DEC_VIF
(
¥iv
, 
vif
->
ty≥
);

1151 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_AP
) ||

1152 
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
 ||

1153 (
vif
->
ty≥
 =
NL80211_IFTYPE_ADHOC
))

1154 
	`©h9k_htc_ªmove_b¶Ÿ
(
¥iv
, 
vif
);

1156 
	`©h9k_htc_£t_›mode
(
¥iv
);

1158 
	`©h9k_htc_£t_mac_bssid_mask
(
¥iv
, 
vif
);

1163 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_AP
Ë&& (
¥iv
->
num_≠_vif
 == 0)) {

1164 
¥iv
->
ª¨m_™i
 = 
Ál£
;

1165 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(

1166 
¥iv
->
hw
, 
IEEE80211_IFACE_ITER_RESUME_ALL
,

1167 
©h9k_htc_vif_ôî
, 
¥iv
);

1168 i‡(!
¥iv
->
ª¨m_™i
)

1169 
	`©h9k_htc_°›_™i
(
¥iv
);

1172 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Dëach I¡îÁ˚áàidx: %d\n", 
avp
->
ödex
);

1174 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1175 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1176 
	}
}

1178 
	$©h9k_htc_c⁄fig
(
õì80211_hw
 *
hw
, 
u32
 
ch™ged
)

1180 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1181 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1182 
õì80211_c⁄f
 *
c⁄f
 = &
hw
->conf;

1183 
boﬁ
 
chù_ª£t
 = 
Ál£
;

1184 
ªt
 = 0;

1186 
	`muãx_lock
(&
¥iv
->
muãx
);

1187 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1189 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_IDLE
) {

1190 
	`muãx_lock
(&
¥iv
->
htc_pm_lock
);

1192 
¥iv
->
ps_idÀ
 = !!(
c⁄f
->
Êags
 & 
IEEE80211_CONF_IDLE
);

1193 i‡(!
¥iv
->
ps_idÀ
)

1194 
chù_ª£t
 = 
åue
;

1196 
	`muãx_u∆ock
(&
¥iv
->
htc_pm_lock
);

1203 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_MONITOR
) {

1204 i‡((
c⁄f
->
Êags
 & 
IEEE80211_CONF_MONITOR
) &&

1205 !
¥iv
->
ah
->
is_m⁄ô‹ög
)

1206 
	`©h9k_htc_add_m⁄ô‹_öãrÁ˚
(
¥iv
);

1207 i‡(
¥iv
->
ah
->
is_m⁄ô‹ög
)

1208 
	`©h9k_htc_ªmove_m⁄ô‹_öãrÁ˚
(
¥iv
);

1211 i‡((
ch™ged
 & 
IEEE80211_CONF_CHANGE_CHANNEL
Ë|| 
chù_ª£t
) {

1212 
õì80211_ch™√l
 *
curch™
 = 
hw
->
c⁄f
.
ch™def
.
ch™
;

1213 
pos
 = 
curch™
->
hw_vÆue
;

1215 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Set channel: %d MHz\n",

1216 
curch™
->
˚¡î_‰eq
);

1218 
	`©h9k_cmn_gë_ch™√l
(
hw
, 
¥iv
->
ah
, &hw->
c⁄f
.
ch™def
);

1219 i‡(
	`©h9k_htc_£t_ch™√l
(
¥iv
, 
hw
, &¥iv->
ah
->
ch™√ls
[
pos
]) < 0) {

1220 
	`©h_îr
(
comm⁄
, "UnableÅo set channel\n");

1221 
ªt
 = -
EINVAL
;

1222 
out
;

1227 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_PS
) {

1228 i‡(
c⁄f
->
Êags
 & 
IEEE80211_CONF_PS
) {

1229 
	`©h9k_htc_£çowî
(
¥iv
, 
ATH9K_PM_NETWORK_SLEEP
);

1230 
¥iv
->
ps_íabÀd
 = 
åue
;

1232 
¥iv
->
ps_íabÀd
 = 
Ál£
;

1233 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
ps_w‹k
);

1234 
	`©h9k_htc_£çowî
(
¥iv
, 
ATH9K_PM_AWAKE
);

1238 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_POWER
) {

1239 
¥iv
->
txpowlimô
 = 2 * 
c⁄f
->
powî_Àvñ
;

1240 
	`©h9k_cmn_upd©e_txpow
(
¥iv
->
ah
,Öriv->
cuπxpow
,

1241 
¥iv
->
txpowlimô
, &¥iv->
cuπxpow
);

1244 
out
:

1245 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1246 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1247  
ªt
;

1248 
	}
}

1250 
	#SUPPORTED_FILTERS
 \

1251 (
FIF_ALLMULTI
 | \

1252 
FIF_CONTROL
 | \

1253 
FIF_PSPOLL
 | \

1254 
FIF_OTHER_BSS
 | \

1255 
FIF_BCN_PRBRESP_PROMISC
 | \

1256 
FIF_PROBE_REQ
 | \

1257 
FIF_FCSFAIL
)

	)

1259 
	$©h9k_htc_c⁄figuª_fûãr
(
õì80211_hw
 *
hw
,

1260 
ch™ged_Êags
,

1261 *
tŸÆ_Êags
,

1262 
u64
 
mu…iˇ°
)

1264 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1265 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1266 
u32
 
rfût
;

1268 
	`muãx_lock
(&
¥iv
->
muãx
);

1269 
ch™ged_Êags
 &
SUPPORTED_FILTERS
;

1270 *
tŸÆ_Êags
 &
SUPPORTED_FILTERS
;

1272 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
)) {

1273 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
¥iv
->
ah
), 
ANY
,

1275 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1278 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1280 
¥iv
->
rxfûãr
 = *
tŸÆ_Êags
;

1281 
rfût
 = 
	`©h9k_htc_ˇl¸xfûãr
(
¥iv
);

1282 
	`©h9k_hw_£åxfûãr
(
¥iv
->
ah
, 
rfût
);

1284 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
¥iv
->
ah
), 
CONFIG
, "Set HW RX filter: 0x%x\n",

1285 
rfût
);

1287 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1288 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1289 
	}
}

1291 
	$©h9k_htc_°a_rc_upd©e_w‹k
(
w‹k_°ru˘
 *
w‹k
)

1293 
©h9k_htc_°a
 *
i°a
 =

1294 
	`c⁄èöî_of
(
w‹k
, 
©h9k_htc_°a
, 
rc_upd©e_w‹k
);

1295 
õì80211_°a
 *
°a
 =

1296 
	`c⁄èöî_of
((*)
i°a
, 
õì80211_°a
, 
drv_¥iv
);

1297 
©h9k_htc_¥iv
 *
¥iv
 = 
i°a
->
htc_¥iv
;

1298 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1299 
©h9k_htc_èrgë_øã
 
å©e
;

1301 
	`muãx_lock
(&
¥iv
->
muãx
);

1302 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1304 
	`mem£t
(&
å©e
, 0, (
©h9k_htc_èrgë_øã
));

1305 
	`©h9k_htc_£tup_øã
(
¥iv
, 
°a
, &
å©e
);

1306 i‡(!
	`©h9k_htc_£nd_øã_cmd
(
¥iv
, &
å©e
))

1307 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1309 
°a
->
addr
, 
	`be32_to_˝u
(
å©e
.
ˇpÊags
));

1311 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1313 
°a
->
addr
);

1315 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1316 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1317 
	}
}

1319 
	$©h9k_htc_°a_add
(
õì80211_hw
 *
hw
,

1320 
õì80211_vif
 *
vif
,

1321 
õì80211_°a
 *
°a
)

1323 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1324 
©h9k_htc_°a
 *
i°a
 = (©h9k_htc_°®*Ë
°a
->
drv_¥iv
;

1325 
ªt
;

1327 
	`muãx_lock
(&
¥iv
->
muãx
);

1328 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1329 
ªt
 = 
	`©h9k_htc_add_°©i⁄
(
¥iv
, 
vif
, 
°a
);

1330 i‡(!
ªt
) {

1331 
	`INIT_WORK
(&
i°a
->
rc_upd©e_w‹k
, 
©h9k_htc_°a_rc_upd©e_w‹k
);

1332 
i°a
->
htc_¥iv
 = 
¥iv
;

1333 
	`©h9k_htc_öô_øã
(
¥iv
, 
°a
);

1335 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1336 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1338  
ªt
;

1339 
	}
}

1341 
	$©h9k_htc_°a_ªmove
(
õì80211_hw
 *
hw
,

1342 
õì80211_vif
 *
vif
,

1343 
õì80211_°a
 *
°a
)

1345 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1346 
©h9k_htc_°a
 *
i°a
 = (©h9k_htc_°®*Ë
°a
->
drv_¥iv
;

1347 
ªt
;

1349 
	`ˇn˚l_w‹k_sync
(&
i°a
->
rc_upd©e_w‹k
);

1351 
	`muãx_lock
(&
¥iv
->
muãx
);

1352 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1353 
	`htc_°a_døö
(
¥iv
->
htc
, 
i°a
->
ödex
);

1354 
ªt
 = 
	`©h9k_htc_ªmove_°©i⁄
(
¥iv
, 
vif
, 
°a
);

1355 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1356 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1358  
ªt
;

1359 
	}
}

1361 
	$©h9k_htc_°a_rc_upd©e
(
õì80211_hw
 *
hw
,

1362 
õì80211_vif
 *
vif
,

1363 
õì80211_°a
 *
°a
, 
u32
 
ch™ged
)

1365 
©h9k_htc_°a
 *
i°a
 = (©h9k_htc_°®*Ë
°a
->
drv_¥iv
;

1367 i‡(!(
ch™ged
 & 
IEEE80211_RC_SUPP_RATES_CHANGED
))

1370 
	`scheduÀ_w‹k
(&
i°a
->
rc_upd©e_w‹k
);

1371 
	}
}

1373 
	$©h9k_htc_c⁄f_tx
(
õì80211_hw
 *
hw
,

1374 
õì80211_vif
 *
vif
, 
u16
 
queue
,

1375 c⁄° 
õì80211_tx_queue_∑øms
 *
∑øms
)

1377 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1378 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1379 
©h9k_tx_queue_öfo
 
qi
;

1380 
ªt
 = 0, 
qnum
;

1382 i‡(
queue
 >
IEEE80211_NUM_ACS
)

1385 
	`muãx_lock
(&
¥iv
->
muãx
);

1386 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1388 
	`mem£t
(&
qi
, 0, (
©h9k_tx_queue_öfo
));

1390 
qi
.
tqi_aifs
 = 
∑øms
->
aifs
;

1391 
qi
.
tqi_cwmö
 = 
∑øms
->
cw_mö
;

1392 
qi
.
tqi_cwmax
 = 
∑øms
->
cw_max
;

1393 
qi
.
tqi_bur°Time
 = 
∑øms
->
tx›
 * 32;

1395 
qnum
 = 
	`gë_hw_qnum
(
queue
, 
¥iv
->
hwq_m≠
);

1397 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1399 
queue
, 
qnum
, 
∑øms
->
aifs
,Ö¨ams->
cw_mö
,

1400 
∑øms
->
cw_max
,Ö¨ams->
tx›
);

1402 
ªt
 = 
	`©h_htc_txq_upd©e
(
¥iv
, 
qnum
, &
qi
);

1403 i‡(
ªt
) {

1404 
	`©h_îr
(
comm⁄
, "TXQ Update failed\n");

1405 
out
;

1408 i‡((
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_ADHOC
) &&

1409 (
qnum
 =
¥iv
->
hwq_m≠
[
IEEE80211_AC_BE
]))

1410 
	`©h9k_htc_bóc⁄q_c⁄fig
(
¥iv
);

1411 
out
:

1412 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1413 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1415  
ªt
;

1416 
	}
}

1418 
	$©h9k_htc_£t_key
(
õì80211_hw
 *
hw
,

1419 
£t_key_cmd
 
cmd
,

1420 
õì80211_vif
 *
vif
,

1421 
õì80211_°a
 *
°a
,

1422 
õì80211_key_c⁄f
 *
key
)

1424 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1425 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1426 
ªt
 = 0;

1428 i‡(
htc_mod∑øm_nohw¸y±
)

1429  -
ENOSPC
;

1431 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_ADHOC
 ||

1432 
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
) &&

1433 (
key
->
cùhî
 =
WLAN_CIPHER_SUITE_TKIP
 ||

1434 
key
->
cùhî
 =
WLAN_CIPHER_SUITE_CCMP
) &&

1435 !(
key
->
Êags
 & 
IEEE80211_KEY_FLAG_PAIRWISE
)) {

1443  -
EOPNOTSUPP
;

1446 
	`muãx_lock
(&
¥iv
->
muãx
);

1447 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Set HW Key\n");

1448 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1450 
cmd
) {

1451 
SET_KEY
:

1452 
ªt
 = 
	`©h_key_c⁄fig
(
comm⁄
, 
vif
, 
°a
, 
key
);

1453 i‡(
ªt
 >= 0) {

1454 
key
->
hw_key_idx
 = 
ªt
;

1456 
key
->
Êags
 |
IEEE80211_KEY_FLAG_GENERATE_IV
;

1457 i‡(
key
->
cùhî
 =
WLAN_CIPHER_SUITE_TKIP
)

1458 
key
->
Êags
 |
IEEE80211_KEY_FLAG_GENERATE_MMIC
;

1459 i‡(
¥iv
->
ah
->
sw_mgmt_¸y±o_tx
 &&

1460 
key
->
cùhî
 =
WLAN_CIPHER_SUITE_CCMP
)

1461 
key
->
Êags
 |
IEEE80211_KEY_FLAG_SW_MGMT_TX
;

1462 
ªt
 = 0;

1465 
DISABLE_KEY
:

1466 
	`©h_key_dñëe
(
comm⁄
, 
key
);

1469 
ªt
 = -
EINVAL
;

1472 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1473 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1475  
ªt
;

1476 
	}
}

1478 
	$©h9k_htc_£t_bssid
(
©h9k_htc_¥iv
 *
¥iv
)

1480 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1482 
	`©h9k_hw_wrôe_associd
(
¥iv
->
ah
);

1483 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "BSSID: %pMáid: 0x%x\n",

1484 
comm⁄
->
curbssid
, comm⁄->
cuøid
);

1485 
	}
}

1487 
	$©h9k_htc_bss_ôî
(*
d©a
, 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

1489 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *)
d©a
;

1490 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1491 
õì80211_bss_c⁄f
 *
bss_c⁄f
 = &
vif
->bss_conf;

1493 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_STATION
Ë&& 
bss_c⁄f
->
assoc
) {

1494 
comm⁄
->
cuøid
 = 
bss_c⁄f
->
aid
;

1495 
comm⁄
->
œ°_rssi
 = 
ATH_RSSI_DUMMY_MARKER
;

1496 
	`mem˝y
(
comm⁄
->
curbssid
, 
bss_c⁄f
->
bssid
, 
ETH_ALEN
);

1497 
	`£t_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
);

1499 
	}
}

1501 
	$©h9k_htc_choo£_£t_bssid
(
©h9k_htc_¥iv
 *
¥iv
)

1503 i‡(
¥iv
->
num_°a_assoc_vif
 == 1) {

1504 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(

1505 
¥iv
->
hw
, 
IEEE80211_IFACE_ITER_RESUME_ALL
,

1506 
©h9k_htc_bss_ôî
, 
¥iv
);

1507 
	`©h9k_htc_£t_bssid
(
¥iv
);

1509 
	}
}

1511 
	$©h9k_htc_bss_öfo_ch™ged
(
õì80211_hw
 *
hw
,

1512 
õì80211_vif
 *
vif
,

1513 
õì80211_bss_c⁄f
 *
bss_c⁄f
,

1514 
u32
 
ch™ged
)

1516 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1517 
©h_hw
 *
ah
 = 
¥iv
->ah;

1518 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1519 
¶Ÿtime
;

1521 
	`muãx_lock
(&
¥iv
->
muãx
);

1522 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1524 i‡(
ch™ged
 & 
BSS_CHANGED_ASSOC
) {

1525 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "BSS Changed ASSOC %d\n",

1526 
bss_c⁄f
->
assoc
);

1528 
bss_c⁄f
->
assoc
 ?

1529 
¥iv
->
num_°a_assoc_vif
++ :Öriv->num_sta_assoc_vif--;

1531 i‡(!
bss_c⁄f
->
assoc
)

1532 
	`˛ór_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
);

1534 i‡(
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_STATION
) {

1535 
	`©h9k_htc_choo£_£t_bssid
(
¥iv
);

1536 i‡(
bss_c⁄f
->
assoc
 && (
¥iv
->
num_°a_assoc_vif
 == 1))

1537 
	`©h9k_htc_°¨t_™i
(
¥iv
);

1538 i‡(
¥iv
->
num_°a_assoc_vif
 == 0)

1539 
	`©h9k_htc_°›_™i
(
¥iv
);

1543 i‡(
ch™ged
 & 
BSS_CHANGED_IBSS
) {

1544 i‡(
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_ADHOC
) {

1545 
comm⁄
->
cuøid
 = 
bss_c⁄f
->
aid
;

1546 
	`mem˝y
(
comm⁄
->
curbssid
, 
bss_c⁄f
->
bssid
, 
ETH_ALEN
);

1547 
	`©h9k_htc_£t_bssid
(
¥iv
);

1551 i‡((
ch™ged
 & 
BSS_CHANGED_BEACON_ENABLED
Ë&& 
bss_c⁄f
->
íabÀ_bóc⁄
) {

1552 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "BeaconÉnabled for BSS: %pM\n",

1553 
bss_c⁄f
->
bssid
);

1554 
	`©h9k_htc_£t_tsÁdju°
(
¥iv
, 
vif
);

1555 
¥iv
->
cur_bóc⁄_c⁄f
.
íabÀ_bóc⁄
 = 1;

1556 
	`©h9k_htc_bóc⁄_c⁄fig
(
¥iv
, 
vif
);

1559 i‡((
ch™ged
 & 
BSS_CHANGED_BEACON_ENABLED
Ë&& !
bss_c⁄f
->
íabÀ_bóc⁄
) {

1564 i‡((
¥iv
->
num_≠_vif
 +Öriv->
num_mbss_vif
 <= 1) ||

1565 
¥iv
->
num_ibss_vif
) {

1566 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1568 
bss_c⁄f
->
bssid
);

1569 
¥iv
->
cur_bóc⁄_c⁄f
.
íabÀ_bóc⁄
 = 0;

1570 
	`©h9k_htc_bóc⁄_c⁄fig
(
¥iv
, 
vif
);

1574 i‡(
ch™ged
 & 
BSS_CHANGED_BEACON_INT
) {

1578 i‡(
¥iv
->
nvifs
 == 1 &&

1579 ((
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_AP
 &&

1580 
vif
->
ty≥
 =
NL80211_IFTYPE_AP
 &&

1581 
¥iv
->
num_≠_vif
 == 1) ||

1582 (
¥iv
->
ah
->
›mode
 =
NL80211_IFTYPE_MESH_POINT
 &&

1583 
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
 &&

1584 
¥iv
->
num_mbss_vif
 == 1))) {

1585 
	`£t_bô
(
OP_TSF_RESET
, &
¥iv
->
›_Êags
);

1587 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1589 
bss_c⁄f
->
bssid
);

1590 
	`©h9k_htc_bóc⁄_c⁄fig
(
¥iv
, 
vif
);

1593 i‡(
ch™ged
 & 
BSS_CHANGED_ERP_SLOT
) {

1594 i‡(
bss_c⁄f
->
u£_sh‹t_¶Ÿ
)

1595 
¶Ÿtime
 = 9;

1597 
¶Ÿtime
 = 20;

1598 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_AP
) {

1604 
¥iv
->
bóc⁄
.
¶Ÿtime
 = slottime;

1605 
¥iv
->
bóc⁄
.
upd©e¶Ÿ
 = 
UPDATE
;

1607 
ah
->
¶Ÿtime
 = slottime;

1608 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

1612 i‡(
ch™ged
 & 
BSS_CHANGED_HT
)

1613 
	`©h9k_htc_upd©e_øã
(
¥iv
, 
vif
, 
bss_c⁄f
);

1615 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1616 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1617 
	}
}

1619 
u64
 
	$©h9k_htc_gë_tsf
(
õì80211_hw
 *
hw
,

1620 
õì80211_vif
 *
vif
)

1622 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1623 
u64
 
tsf
;

1625 
	`muãx_lock
(&
¥iv
->
muãx
);

1626 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1627 
tsf
 = 
	`©h9k_hw_gëtsf64
(
¥iv
->
ah
);

1628 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1629 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1631  
tsf
;

1632 
	}
}

1634 
	$©h9k_htc_£t_tsf
(
õì80211_hw
 *
hw
,

1635 
õì80211_vif
 *
vif
, 
u64
 
tsf
)

1637 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1639 
	`muãx_lock
(&
¥iv
->
muãx
);

1640 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1641 
	`©h9k_hw_£âsf64
(
¥iv
->
ah
, 
tsf
);

1642 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1643 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1644 
	}
}

1646 
	$©h9k_htc_ª£t_tsf
(
õì80211_hw
 *
hw
,

1647 
õì80211_vif
 *
vif
)

1649 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1651 
	`muãx_lock
(&
¥iv
->
muãx
);

1652 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1653 
	`©h9k_hw_ª£t_tsf
(
¥iv
->
ah
);

1654 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1655 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1656 
	}
}

1658 
	$©h9k_htc_ampdu_a˘i⁄
(
õì80211_hw
 *
hw
,

1659 
õì80211_vif
 *
vif
,

1660 
õì80211_ampdu_mlme_a˘i⁄
 
a˘i⁄
,

1661 
õì80211_°a
 *
°a
,

1662 
u16
 
tid
, u16 *
s¢
, 
u8
 
buf_size
, 
boﬁ
 
amsdu
)

1664 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1665 
©h9k_htc_°a
 *
i°a
;

1666 
ªt
 = 0;

1668 
	`muãx_lock
(&
¥iv
->
muãx
);

1669 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1671 
a˘i⁄
) {

1672 
IEEE80211_AMPDU_RX_START
:

1674 
IEEE80211_AMPDU_RX_STOP
:

1676 
IEEE80211_AMPDU_TX_START
:

1677 
ªt
 = 
	`©h9k_htc_tx_aggr_›î
(
¥iv
, 
vif
, 
°a
, 
a˘i⁄
, 
tid
);

1678 i‡(!
ªt
)

1679 
	`õì80211_°¨t_tx_ba_cb_úqß„
(
vif
, 
°a
->
addr
, 
tid
);

1681 
IEEE80211_AMPDU_TX_STOP_CONT
:

1682 
IEEE80211_AMPDU_TX_STOP_FLUSH
:

1683 
IEEE80211_AMPDU_TX_STOP_FLUSH_CONT
:

1684 
	`©h9k_htc_tx_aggr_›î
(
¥iv
, 
vif
, 
°a
, 
a˘i⁄
, 
tid
);

1685 
	`õì80211_°›_tx_ba_cb_úqß„
(
vif
, 
°a
->
addr
, 
tid
);

1687 
IEEE80211_AMPDU_TX_OPERATIONAL
:

1688 
i°a
 = (
©h9k_htc_°a
 *Ë
°a
->
drv_¥iv
;

1689 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

1690 
i°a
->
tid_°©e
[
tid
] = 
AGGR_OPERATIONAL
;

1691 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

1694 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
¥iv
->
ah
), "Unknown AMPDUáction\n");

1697 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1698 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1700  
ªt
;

1701 
	}
}

1703 
	$©h9k_htc_sw_sˇn_°¨t
(
õì80211_hw
 *
hw
,

1704 
õì80211_vif
 *
vif
,

1705 c⁄° 
u8
 *
mac_addr
)

1707 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1708 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1710 
	`muãx_lock
(&
¥iv
->
muãx
);

1711 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

1712 
	`£t_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
);

1713 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

1714 
	`ˇn˚l_w‹k_sync
(&
¥iv
->
ps_w‹k
);

1715 
	`©h9k_htc_°›_™i
(
¥iv
);

1716 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1717 
	}
}

1719 
	$©h9k_htc_sw_sˇn_com∂ëe
(
õì80211_hw
 *
hw
,

1720 
õì80211_vif
 *
vif
)

1722 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1723 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1725 
	`muãx_lock
(&
¥iv
->
muãx
);

1726 
	`•ö_lock_bh
(&
¥iv
->
bóc⁄_lock
);

1727 
	`˛ór_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
);

1728 
	`•ö_u∆ock_bh
(&
¥iv
->
bóc⁄_lock
);

1729 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1730 
	`©h9k_htc_vif_ªc⁄fig
(
¥iv
);

1731 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1732 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1733 
	}
}

1735 
	$©h9k_htc_£t_πs_thªshﬁd
(
õì80211_hw
 *
hw
, 
u32
 
vÆue
)

1738 
	}
}

1740 
	$©h9k_htc_£t_covîage_˛ass
(
õì80211_hw
 *
hw
,

1741 
s16
 
covîage_˛ass
)

1743 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1745 
	`muãx_lock
(&
¥iv
->
muãx
);

1746 
	`©h9k_htc_ps_wakeup
(
¥iv
);

1747 
¥iv
->
ah
->
covîage_˛ass
 = coverage_class;

1748 
	`©h9k_hw_öô_globÆ_£âögs
(
¥iv
->
ah
);

1749 
	`©h9k_htc_ps_ª°‹e
(
¥iv
);

1750 
	`muãx_u∆ock
(&
¥iv
->
muãx
);

1751 
	}
}

1758 
	$©h9k_htc_£t_bôøã_mask
(
õì80211_hw
 *
hw
,

1759 
õì80211_vif
 *
vif
,

1760 c⁄° 
cfg80211_bôøã_mask
 *
mask
)

1762 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1763 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

1764 
©h9k_htc_èrgë_øã_mask
 
tmask
;

1765 
©h9k_htc_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1766 
ªt
 = 0;

1767 
u8
 
cmd_r•
;

1769 
	`mem£t
(&
tmask
, 0, (
©h9k_htc_èrgë_øã_mask
));

1771 
tmask
.
vif_ödex
 = 
avp
->
ödex
;

1772 
tmask
.
b™d
 = 
IEEE80211_BAND_2GHZ
;

1773 
tmask
.
mask
 = 
	`˝u_to_be32
(mask->
c⁄åﬁ
[
IEEE80211_BAND_2GHZ
].
Àgacy
);

1775 
	`WMI_CMD_BUF
(
WMI_BITRATE_MASK_CMDID
, &
tmask
);

1776 i‡(
ªt
) {

1777 
	`©h_îr
(
comm⁄
,

1779 "öãrÁ˚áàidx: %d\n", 
avp
->
ödex
);

1780 
out
;

1783 
tmask
.
b™d
 = 
IEEE80211_BAND_5GHZ
;

1784 
tmask
.
mask
 = 
	`˝u_to_be32
(mask->
c⁄åﬁ
[
IEEE80211_BAND_5GHZ
].
Àgacy
);

1786 
	`WMI_CMD_BUF
(
WMI_BITRATE_MASK_CMDID
, &
tmask
);

1787 i‡(
ªt
) {

1788 
	`©h_îr
(
comm⁄
,

1790 "öãrÁ˚áàidx: %d\n", 
avp
->
ödex
);

1791 
out
;

1794 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Set bitrate masks: 0x%x, 0x%x\n",

1795 
mask
->
c⁄åﬁ
[
IEEE80211_BAND_2GHZ
].
Àgacy
,

1796 
mask
->
c⁄åﬁ
[
IEEE80211_BAND_5GHZ
].
Àgacy
);

1797 
out
:

1798  
ªt
;

1799 
	}
}

1802 
	$©h9k_htc_gë_°©s
(
õì80211_hw
 *
hw
,

1803 
õì80211_low_Àvñ_°©s
 *
°©s
)

1805 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1806 
©h_hw
 *
ah
 = 
¥iv
->ah;

1807 
©h9k_mib_°©s
 *
mib_°©s
 = &
ah
->
ah_mibSèts
;

1809 
°©s
->
dŸ11ACKFaûuªCou¡
 = 
mib_°©s
->
ackrcv_bad
;

1810 
°©s
->
dŸ11RTSFaûuªCou¡
 = 
mib_°©s
->
πs_bad
;

1811 
°©s
->
dŸ11FCSEº‹Cou¡
 = 
mib_°©s
->
fcs_bad
;

1812 
°©s
->
dŸ11RTSSuc˚ssCou¡
 = 
mib_°©s
->
πs_good
;

1815 
	}
}

1817 
ba£_ìp_hódî
 *
	$©h9k_htc_gë_ì¥om_ba£
(
©h9k_htc_¥iv
 *
¥iv
)

1819 
ba£_ìp_hódî
 *
pBa£
 = 
NULL
;

1826 i‡(
	`AR_SREV_9271
(
¥iv
->
ah
))

1827 
pBa£
 = (
ba£_ìp_hódî
 *)

1828 &
¥iv
->
ah
->
ì¥om
.
m≠4k
.
ba£EïHódî
;

1829 i‡(
¥iv
->
ah
->
hw_vîsi⁄
.
usbdev
 =
AR9280_USB
)

1830 
pBa£
 = (
ba£_ìp_hódî
 *)

1831 &
¥iv
->
ah
->
ì¥om
.
def
.
ba£EïHódî
;

1832 i‡(
¥iv
->
ah
->
hw_vîsi⁄
.
usbdev
 =
AR9287_USB
)

1833 
pBa£
 = (
ba£_ìp_hódî
 *)

1834 &
¥iv
->
ah
->
ì¥om
.
m≠9287
.
ba£EïHódî
;

1835  
pBa£
;

1836 
	}
}

1839 
	$©h9k_htc_gë_™ã¬a
(
õì80211_hw
 *
hw
, 
u32
 *
tx_™t
,

1840 
u32
 *
rx_™t
)

1842 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1843 
ba£_ìp_hódî
 *
pBa£
 = 
	`©h9k_htc_gë_ì¥om_ba£
(
¥iv
);

1844 i‡(
pBa£
) {

1845 *
tx_™t
 = 
pBa£
->
txMask
;

1846 *
rx_™t
 = 
pBa£
->
rxMask
;

1848 *
tx_™t
 = 0;

1849 *
rx_™t
 = 0;

1852 
	}
}

1854 
	$©h9k_htc_ch™√l_swôch_bóc⁄
(
õì80211_hw
 *
hw
,

1855 
õì80211_vif
 *
vif
,

1856 
cfg80211_ch™_def
 *
ch™def
)

1858 
©h9k_htc_¥iv
 *
¥iv
 = 
hw
->priv;

1861 i‡(
	`WARN_ON
(
¥iv
->
cß_vif
))

1864 
¥iv
->
cß_vif
 = 
vif
;

1865 
	}
}

1867 
õì80211_›s
 
	g©h9k_htc_›s
 = {

1868 .
tx
 = 
©h9k_htc_tx
,

1869 .
	g°¨t
 = 
©h9k_htc_°¨t
,

1870 .
	g°›
 = 
©h9k_htc_°›
,

1871 .
	gadd_öãrÁ˚
 = 
©h9k_htc_add_öãrÁ˚
,

1872 .
	gªmove_öãrÁ˚
 = 
©h9k_htc_ªmove_öãrÁ˚
,

1873 .
	gc⁄fig
 = 
©h9k_htc_c⁄fig
,

1874 .
	gc⁄figuª_fûãr
 = 
©h9k_htc_c⁄figuª_fûãr
,

1875 .
	g°a_add
 = 
©h9k_htc_°a_add
,

1876 .
	g°a_ªmove
 = 
©h9k_htc_°a_ªmove
,

1877 .
	gc⁄f_tx
 = 
©h9k_htc_c⁄f_tx
,

1878 .
	g°a_rc_upd©e
 = 
©h9k_htc_°a_rc_upd©e
,

1879 .
	gbss_öfo_ch™ged
 = 
©h9k_htc_bss_öfo_ch™ged
,

1880 .
	g£t_key
 = 
©h9k_htc_£t_key
,

1881 .
	ggë_tsf
 = 
©h9k_htc_gë_tsf
,

1882 .
	g£t_tsf
 = 
©h9k_htc_£t_tsf
,

1883 .
	gª£t_tsf
 = 
©h9k_htc_ª£t_tsf
,

1884 .
	gampdu_a˘i⁄
 = 
©h9k_htc_ampdu_a˘i⁄
,

1885 .
	gsw_sˇn_°¨t
 = 
©h9k_htc_sw_sˇn_°¨t
,

1886 .
	gsw_sˇn_com∂ëe
 = 
©h9k_htc_sw_sˇn_com∂ëe
,

1887 .
	g£t_πs_thªshﬁd
 = 
©h9k_htc_£t_πs_thªshﬁd
,

1888 .
	grfkûl_pﬁl
 = 
©h9k_htc_rfkûl_pﬁl_°©e
,

1889 .
	g£t_covîage_˛ass
 = 
©h9k_htc_£t_covîage_˛ass
,

1890 .
	g£t_bôøã_mask
 = 
©h9k_htc_£t_bôøã_mask
,

1891 .
	ggë_°©s
 = 
©h9k_htc_gë_°©s
,

1892 .
	ggë_™ã¬a
 = 
©h9k_htc_gë_™ã¬a
,

1893 .
	gch™√l_swôch_bóc⁄
 = 
©h9k_htc_ch™√l_swôch_bóc⁄
,

1895 #ifde‡
CONFIG_ATH9K_HTC_DEBUGFS


1896 .
	ggë_ë_s£t_cou¡
 = 
©h9k_htc_gë_ë_s£t_cou¡
,

1897 .
	ggë_ë_°©s
 = 
©h9k_htc_gë_ë_°©s
,

1898 .
	ggë_ë_°rögs
 = 
©h9k_htc_gë_ë_°rögs
,

	@htc_drv_txrx.c

17 
	~"htc.h
"

23 c⁄° 
	gsubty≥_txq_to_hwq
[] = {

24 [
IEEE80211_AC_BE
] = 
ATH_TXQ_AC_BE
,

25 [
IEEE80211_AC_BK
] = 
ATH_TXQ_AC_BK
,

26 [
IEEE80211_AC_VI
] = 
ATH_TXQ_AC_VI
,

27 [
IEEE80211_AC_VO
] = 
ATH_TXQ_AC_VO
,

30 
	#ATH9K_HTC_INIT_TXQ
(
subty≥
) do { \

31 
qi
.
tqi_subty≥
 = 
subty≥_txq_to_hwq
[
subty≥
]; \

32 
qi
.
tqi_aifs
 = 
ATH9K_TXQ_USEDEFAULT
; \

33 
qi
.
tqi_cwmö
 = 
ATH9K_TXQ_USEDEFAULT
; \

34 
qi
.
tqi_cwmax
 = 
ATH9K_TXQ_USEDEFAULT
; \

35 
qi
.
tqi_physCompBuf
 = 0; \

36 
qi
.
tqi_qÊags
 = 
TXQ_FLAG_TXEOLINT_ENABLE
 | \

37 
TXQ_FLAG_TXDESCINT_ENABLE
; \

38 } 0)

	)

40 
	$gë_hw_qnum
(
u16
 
queue
, *
hwq_m≠
)

42 
queue
) {

44  
hwq_m≠
[
IEEE80211_AC_VO
];

46  
hwq_m≠
[
IEEE80211_AC_VI
];

48  
hwq_m≠
[
IEEE80211_AC_BE
];

50  
hwq_m≠
[
IEEE80211_AC_BK
];

52  
hwq_m≠
[
IEEE80211_AC_BE
];

54 
	}
}

56 
	$©h9k_htc_check_°›_queues
(
©h9k_htc_¥iv
 *
¥iv
)

58 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

59 
¥iv
->
tx
.
queued_˙t
++;

60 i‡((
¥iv
->
tx
.
queued_˙t
 >
ATH9K_HTC_TX_THRESHOLD
) &&

61 !(
¥iv
->
tx
.
Êags
 & 
ATH9K_HTC_OP_TX_QUEUES_STOP
)) {

62 
¥iv
->
tx
.
Êags
 |
ATH9K_HTC_OP_TX_QUEUES_STOP
;

63 
	`õì80211_°›_queues
(
¥iv
->
hw
);

65 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

66 
	}
}

68 
	$©h9k_htc_check_wake_queues
(
©h9k_htc_¥iv
 *
¥iv
)

70 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

71 i‡((
¥iv
->
tx
.
queued_˙t
 < 
ATH9K_HTC_TX_THRESHOLD
) &&

72 (
¥iv
->
tx
.
Êags
 & 
ATH9K_HTC_OP_TX_QUEUES_STOP
)) {

73 
¥iv
->
tx
.
Êags
 &~
ATH9K_HTC_OP_TX_QUEUES_STOP
;

74 
	`õì80211_wake_queues
(
¥iv
->
hw
);

76 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

77 
	}
}

79 
	$©h9k_htc_tx_gë_¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
)

81 
¶Ÿ
;

83 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

84 
¶Ÿ
 = 
	`föd_fú°_zîo_bô
(
¥iv
->
tx
.
tx_¶Ÿ
, 
MAX_TX_BUF_NUM
);

85 i‡(
¶Ÿ
 >
MAX_TX_BUF_NUM
) {

86 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

87  -
ENOBUFS
;

89 
	`__£t_bô
(
¶Ÿ
, 
¥iv
->
tx
.
tx_¶Ÿ
);

90 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

92  
¶Ÿ
;

93 
	}
}

95 
	$©h9k_htc_tx_˛ór_¶Ÿ
(
©h9k_htc_¥iv
 *
¥iv
, 
¶Ÿ
)

97 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

98 
	`__˛ór_bô
(
¶Ÿ
, 
¥iv
->
tx
.
tx_¶Ÿ
);

99 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

100 
	}
}

102 
ölöe
 
htc_ídpoöt_id
 
	$gë_htc_ïid
(
©h9k_htc_¥iv
 *
¥iv
,

103 
u16
 
qnum
)

105 
htc_ídpoöt_id
 
ïid
;

107 
qnum
) {

109 
	`TX_QSTAT_INC
(
IEEE80211_AC_VO
);

110 
ïid
 = 
¥iv
->
d©a_vo_ï
;

113 
	`TX_QSTAT_INC
(
IEEE80211_AC_VI
);

114 
ïid
 = 
¥iv
->
d©a_vi_ï
;

117 
	`TX_QSTAT_INC
(
IEEE80211_AC_BE
);

118 
ïid
 = 
¥iv
->
d©a_be_ï
;

122 
	`TX_QSTAT_INC
(
IEEE80211_AC_BK
);

123 
ïid
 = 
¥iv
->
d©a_bk_ï
;

127  
ïid
;

128 
	}
}

130 
ölöe
 
sk_buff_hód
*

131 
	$gë_htc_ïid_queue
(
©h9k_htc_¥iv
 *
¥iv
, 
u8
 
ïid
)

133 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

134 
sk_buff_hód
 *
ïid_queue
 = 
NULL
;

136 i‡(
ïid
 =
¥iv
->
mgmt_ï
)

137 
ïid_queue
 = &
¥iv
->
tx
.
mgmt_ï_queue
;

138 i‡(
ïid
 =
¥iv
->
ˇb_ï
)

139 
ïid_queue
 = &
¥iv
->
tx
.
ˇb_ï_queue
;

140 i‡(
ïid
 =
¥iv
->
d©a_be_ï
)

141 
ïid_queue
 = &
¥iv
->
tx
.
d©a_be_queue
;

142 i‡(
ïid
 =
¥iv
->
d©a_bk_ï
)

143 
ïid_queue
 = &
¥iv
->
tx
.
d©a_bk_queue
;

144 i‡(
ïid
 =
¥iv
->
d©a_vi_ï
)

145 
ïid_queue
 = &
¥iv
->
tx
.
d©a_vi_queue
;

146 i‡(
ïid
 =
¥iv
->
d©a_vo_ï
)

147 
ïid_queue
 = &
¥iv
->
tx
.
d©a_vo_queue
;

149 
	`©h_îr
(
comm⁄
, "InvÆid EPID: %d\n", 
ïid
);

151  
ïid_queue
;

152 
	}
}

157 
ölöe
 
	$°rù_drv_hódî
(
©h9k_htc_¥iv
 *
¥iv
,

158 
sk_buff
 *
skb
)

160 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

161 
©h9k_htc_tx_˘l
 *
tx_˘l
;

162 
¶Ÿ
;

164 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

166 i‡(
tx_˘l
->
ïid
 =
¥iv
->
mgmt_ï
) {

167 
tx_mgmt_hdr
 *
tx_mhdr
 =

168 (
tx_mgmt_hdr
 *)
skb
->
d©a
;

169 
¶Ÿ
 = 
tx_mhdr
->
cookõ
;

170 
	`skb_puŒ
(
skb
, (
tx_mgmt_hdr
));

171 } i‡((
tx_˘l
->
ïid
 =
¥iv
->
d©a_bk_ï
) ||

172 (
tx_˘l
->
ïid
 =
¥iv
->
d©a_be_ï
) ||

173 (
tx_˘l
->
ïid
 =
¥iv
->
d©a_vi_ï
) ||

174 (
tx_˘l
->
ïid
 =
¥iv
->
d©a_vo_ï
) ||

175 (
tx_˘l
->
ïid
 =
¥iv
->
ˇb_ï
)) {

176 
tx_‰ame_hdr
 *
tx_fhdr
 =

177 (
tx_‰ame_hdr
 *)
skb
->
d©a
;

178 
¶Ÿ
 = 
tx_fhdr
->
cookõ
;

179 
	`skb_puŒ
(
skb
, (
tx_‰ame_hdr
));

181 
	`©h_îr
(
comm⁄
, "Unsuµ‹ãd EPID: %d\n", 
tx_˘l
->
ïid
);

182 
¶Ÿ
 = -
EINVAL
;

185  
¶Ÿ
;

186 
	}
}

188 
	$©h_htc_txq_upd©e
(
©h9k_htc_¥iv
 *
¥iv
, 
qnum
,

189 
©h9k_tx_queue_öfo
 *
qöfo
)

191 
©h_hw
 *
ah
 = 
¥iv
->ah;

192 
îr‹
 = 0;

193 
©h9k_tx_queue_öfo
 
qi
;

195 
	`©h9k_hw_gë_txq_¥›s
(
ah
, 
qnum
, &
qi
);

197 
qi
.
tqi_aifs
 = 
qöfo
->tqi_aifs;

198 
qi
.
tqi_cwmö
 = 
qöfo
->tqi_cwmin / 2;

199 
qi
.
tqi_cwmax
 = 
qöfo
->tqi_cwmax;

200 
qi
.
tqi_bur°Time
 = 
qöfo
->tqi_burstTime;

201 
qi
.
tqi_ªadyTime
 = 
qöfo
->tqi_readyTime;

203 i‡(!
	`©h9k_hw_£t_txq_¥›s
(
ah
, 
qnum
, &
qi
)) {

204 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

205 "U«bÀÅÿupd©êh¨dw¨êqueuê%u!\n", 
qnum
);

206 
îr‹
 = -
EIO
;

208 
	`©h9k_hw_ª£âxqueue
(
ah
, 
qnum
);

211  
îr‹
;

212 
	}
}

214 
	$©h9k_htc_tx_mgmt
(
©h9k_htc_¥iv
 *
¥iv
,

215 
©h9k_htc_vif
 *
avp
,

216 
sk_buff
 *
skb
,

217 
u8
 
°a_idx
, u8 
vif_idx
, u8 
¶Ÿ
)

219 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

220 
õì80211_mgmt
 *
mgmt
;

221 
õì80211_hdr
 *
hdr
;

222 
tx_mgmt_hdr
 
mgmt_hdr
;

223 
©h9k_htc_tx_˘l
 *
tx_˘l
;

224 
u8
 *
tx_fhdr
;

226 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

227 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

229 
	`mem£t
(
tx_˘l
, 0, (*tx_ctl));

230 
	`mem£t
(&
mgmt_hdr
, 0, (
tx_mgmt_hdr
));

236 i‡(
avp
 && 
	`u∆ikñy
(
	`õì80211_is_¥obe_ª•
(
hdr
->
‰ame_c⁄åﬁ
))) {

237 
mgmt
 = (
õì80211_mgmt
 *)
skb
->
d©a
;

238 
mgmt
->
u
.
¥obe_ª•
.
time°amp
 = 
avp
->
tsÁdju°
;

241 
tx_˘l
->
ty≥
 = 
ATH9K_HTC_MGMT
;

243 
mgmt_hdr
.
node_idx
 = 
°a_idx
;

244 
mgmt_hdr
.
vif_idx
 = vif_idx;

245 
mgmt_hdr
.
tidno
 = 0;

246 
mgmt_hdr
.
Êags
 = 0;

247 
mgmt_hdr
.
cookõ
 = 
¶Ÿ
;

249 
mgmt_hdr
.
key_ty≥
 = 
	`©h9k_cmn_gë_hw_¸y±o_keyty≥
(
skb
);

250 i‡(
mgmt_hdr
.
key_ty≥
 =
ATH9K_KEY_TYPE_CLEAR
)

251 
mgmt_hdr
.
keyix
 = (
u8
Ë
ATH9K_TXKEYIX_INVALID
;

253 
mgmt_hdr
.
keyix
 = 
tx_öfo
->
c⁄åﬁ
.
hw_key
->
hw_key_idx
;

255 
tx_fhdr
 = 
	`skb_push
(
skb
, (
mgmt_hdr
));

256 
	`mem˝y
(
tx_fhdr
, (
u8
 *Ë&
mgmt_hdr
, (mgmt_hdr));

257 
tx_˘l
->
ïid
 = 
¥iv
->
mgmt_ï
;

258 
	}
}

260 
	$©h9k_htc_tx_d©a
(
©h9k_htc_¥iv
 *
¥iv
,

261 
õì80211_vif
 *
vif
,

262 
sk_buff
 *
skb
,

263 
u8
 
°a_idx
, u8 
vif_idx
, u8 
¶Ÿ
,

264 
boﬁ
 
is_ˇb
)

266 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

267 
õì80211_hdr
 *
hdr
;

268 
©h9k_htc_tx_˘l
 *
tx_˘l
;

269 
tx_‰ame_hdr
 
tx_hdr
;

270 
u32
 
Êags
 = 0;

271 
u8
 *
qc
, *
tx_fhdr
;

272 
u16
 
qnum
;

274 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

275 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

277 
	`mem£t
(
tx_˘l
, 0, (*tx_ctl));

278 
	`mem£t
(&
tx_hdr
, 0, (
tx_‰ame_hdr
));

280 
tx_hdr
.
node_idx
 = 
°a_idx
;

281 
tx_hdr
.
vif_idx
 = vif_idx;

282 
tx_hdr
.
cookõ
 = 
¶Ÿ
;

290 
tx_˘l
->
°a_idx
 = sta_idx;

292 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
) {

293 
tx_˘l
->
ty≥
 = 
ATH9K_HTC_AMPDU
;

294 
tx_hdr
.
d©a_ty≥
 = 
ATH9K_HTC_AMPDU
;

296 
tx_˘l
->
ty≥
 = 
ATH9K_HTC_NORMAL
;

297 
tx_hdr
.
d©a_ty≥
 = 
ATH9K_HTC_NORMAL
;

300 i‡(
	`õì80211_is_d©a_qos
(
hdr
->
‰ame_c⁄åﬁ
)) {

301 
qc
 = 
	`õì80211_gë_qos_˘l
(
hdr
);

302 
tx_hdr
.
tidno
 = 
qc
[0] & 
IEEE80211_QOS_CTL_TID_MASK
;

306 i‡(
¥iv
->
hw
->
wùhy
->
πs_thªshﬁd
 !(
u32
) -1)

307 i‡(
skb
->
Àn
 > 
¥iv
->
hw
->
wùhy
->
πs_thªshﬁd
)

308 
Êags
 |
ATH9K_HTC_TX_RTSCTS
;

311 i‡(!(
Êags
 & 
ATH9K_HTC_TX_RTSCTS
) &&

312 (
vif
 && vif->
bss_c⁄f
.
u£_˘s_¥Ÿ
))

313 
Êags
 |
ATH9K_HTC_TX_CTSONLY
;

315 
tx_hdr
.
Êags
 = 
	`˝u_to_be32
(flags);

316 
tx_hdr
.
key_ty≥
 = 
	`©h9k_cmn_gë_hw_¸y±o_keyty≥
(
skb
);

317 i‡(
tx_hdr
.
key_ty≥
 =
ATH9K_KEY_TYPE_CLEAR
)

318 
tx_hdr
.
keyix
 = (
u8
Ë
ATH9K_TXKEYIX_INVALID
;

320 
tx_hdr
.
keyix
 = 
tx_öfo
->
c⁄åﬁ
.
hw_key
->
hw_key_idx
;

322 
tx_fhdr
 = 
	`skb_push
(
skb
, (
tx_hdr
));

323 
	`mem˝y
(
tx_fhdr
, (
u8
 *Ë&
tx_hdr
, (tx_hdr));

325 i‡(
is_ˇb
) {

326 
CAB_STAT_INC
;

327 
tx_˘l
->
ïid
 = 
¥iv
->
ˇb_ï
;

331 
qnum
 = 
	`skb_gë_queue_m≠pög
(
skb
);

332 
tx_˘l
->
ïid
 = 
	`gë_htc_ïid
(
¥iv
, 
qnum
);

333 
	}
}

335 
	$©h9k_htc_tx_°¨t
(
©h9k_htc_¥iv
 *
¥iv
,

336 
õì80211_°a
 *
°a
,

337 
sk_buff
 *
skb
,

338 
u8
 
¶Ÿ
, 
boﬁ
 
is_ˇb
)

340 
õì80211_hdr
 *
hdr
;

341 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

342 
õì80211_vif
 *
vif
 = 
tx_öfo
->
c⁄åﬁ
.vif;

343 
©h9k_htc_°a
 *
i°a
;

344 
©h9k_htc_vif
 *
avp
 = 
NULL
;

345 
u8
 
°a_idx
, 
vif_idx
;

347 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

353 i‡(
vif
) {

354 
avp
 = (
©h9k_htc_vif
 *Ë
vif
->
drv_¥iv
;

355 
vif_idx
 = 
avp
->
ödex
;

357 i‡(!
¥iv
->
ah
->
is_m⁄ô‹ög
) {

358 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
¥iv
->
ah
), 
XMIT
,

360  -
EINVAL
;

363 
vif_idx
 = 
¥iv
->
m⁄_vif_idx
;

369 i‡(
°a
) {

370 
i°a
 = (
©h9k_htc_°a
 *Ë
°a
->
drv_¥iv
;

371 
°a_idx
 = 
i°a
->
ödex
;

373 
°a_idx
 = 
¥iv
->
vif_°a_pos
[
vif_idx
];

376 i‡(
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
))

377 
	`©h9k_htc_tx_d©a
(
¥iv
, 
vif
, 
skb
,

378 
°a_idx
, 
vif_idx
, 
¶Ÿ
, 
is_ˇb
);

380 
	`©h9k_htc_tx_mgmt
(
¥iv
, 
avp
, 
skb
,

381 
°a_idx
, 
vif_idx
, 
¶Ÿ
);

384  
	`htc_£nd
(
¥iv
->
htc
, 
skb
);

385 
	}
}

387 
ölöe
 
boﬁ
 
	$__©h9k_htc_check_tx_aggr
(
©h9k_htc_¥iv
 *
¥iv
,

388 
©h9k_htc_°a
 *
i°a
, 
u8
 
tid
)

390 
boﬁ
 
ªt
 = 
Ál£
;

392 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

393 i‡((
tid
 < 
ATH9K_HTC_MAX_TID
Ë&& (
i°a
->
tid_°©e
[tid] =
AGGR_STOP
))

394 
ªt
 = 
åue
;

395 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

397  
ªt
;

398 
	}
}

400 
	$©h9k_htc_check_tx_aggr
(
©h9k_htc_¥iv
 *
¥iv
,

401 
õì80211_vif
 *
vif
,

402 
sk_buff
 *
skb
)

404 
õì80211_°a
 *
°a
;

405 
õì80211_hdr
 *
hdr
;

406 
__À16
 
fc
;

408 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

409 
fc
 = 
hdr
->
‰ame_c⁄åﬁ
;

411 
	`rcu_ªad_lock
();

413 
°a
 = 
	`õì80211_föd_°a
(
vif
, 
hdr
->
addr1
);

414 i‡(!
°a
) {

415 
	`rcu_ªad_u∆ock
();

419 i‡(
°a
 && 
	`c⁄f_is_ht
(&
¥iv
->
hw
->
c⁄f
) &&

420 !(
skb
->
¥Ÿocﬁ
 =
	`˝u_to_be16
(
ETH_P_PAE
))) {

421 i‡(
	`õì80211_is_d©a_qos
(
fc
)) {

422 
u8
 *
qc
, 
tid
;

423 
©h9k_htc_°a
 *
i°a
;

425 
qc
 = 
	`õì80211_gë_qos_˘l
(
hdr
);

426 
tid
 = 
qc
[0] & 0xf;

427 
i°a
 = (
©h9k_htc_°a
 *)
°a
->
drv_¥iv
;

428 i‡(
	`__©h9k_htc_check_tx_aggr
(
¥iv
, 
i°a
, 
tid
)) {

429 
	`õì80211_°¨t_tx_ba_£ssi⁄
(
°a
, 
tid
, 0);

430 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

431 
i°a
->
tid_°©e
[
tid
] = 
AGGR_PROGRESS
;

432 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

437 
	`rcu_ªad_u∆ock
();

438 
	}
}

440 
	$©h9k_htc_tx_¥o˚ss
(
©h9k_htc_¥iv
 *
¥iv
,

441 
sk_buff
 *
skb
,

442 
__wmi_evít_tx°©us
 *
txs
)

444 
õì80211_vif
 *
vif
;

445 
©h9k_htc_tx_˘l
 *
tx_˘l
;

446 
õì80211_tx_öfo
 *
tx_öfo
;

447 
õì80211_tx_øã
 *
øã
;

448 
õì80211_c⁄f
 *
cur_c⁄f
 = &
¥iv
->
hw
->
c⁄f
;

449 
boﬁ
 
txok
;

450 
¶Ÿ
;

451 
hdæí
, 
∑dsize
;

453 
¶Ÿ
 = 
	`°rù_drv_hódî
(
¥iv
, 
skb
);

454 i‡(
¶Ÿ
 < 0) {

455 
	`dev_k‰ì_skb_™y
(
skb
);

459 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

460 
txok
 = 
tx_˘l
->txok;

461 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

462 
vif
 = 
tx_öfo
->
c⁄åﬁ
.vif;

463 
øã
 = &
tx_öfo
->
°©us
.
øãs
[0];

465 
	`mem£t
(&
tx_öfo
->
°©us
, 0, (tx_info->status));

471 i‡(!
txok
 || !
vif
 || !
txs
)

472 
£nd_mac80211
;

474 i‡(
txs
->
ts_Êags
 & 
ATH9K_HTC_TXSTAT_ACK
) {

475 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_ACK
;

476 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
)

477 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_AMPDU
;

480 i‡(
txs
->
ts_Êags
 & 
ATH9K_HTC_TXSTAT_FILT
)

481 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_TX_FILTERED
;

483 i‡(
txs
->
ts_Êags
 & 
ATH9K_HTC_TXSTAT_RTC_CTS
)

484 
øã
->
Êags
 |
IEEE80211_TX_RC_USE_RTS_CTS
;

486 
øã
->
cou¡
 = 1;

487 
øã
->
idx
 = 
	`MS
(
txs
->
ts_øã
, 
ATH9K_HTC_TXSTAT_RATE
);

489 i‡(
txs
->
ts_Êags
 & 
ATH9K_HTC_TXSTAT_MCS
) {

490 
øã
->
Êags
 |
IEEE80211_TX_RC_MCS
;

492 i‡(
txs
->
ts_Êags
 & 
ATH9K_HTC_TXSTAT_CW40
)

493 
øã
->
Êags
 |
IEEE80211_TX_RC_40_MHZ_WIDTH
;

494 i‡(
txs
->
ts_Êags
 & 
ATH9K_HTC_TXSTAT_SGI
)

495 
øã
->
Êags
 |
IEEE80211_TX_RC_SHORT_GI
;

497 i‡(
cur_c⁄f
->
ch™def
.
ch™
->
b™d
 =
IEEE80211_BAND_5GHZ
)

498 
øã
->
idx
 += 4;

501 
	`©h9k_htc_check_tx_aggr
(
¥iv
, 
vif
, 
skb
);

503 
£nd_mac80211
:

504 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

505 i‡(
	`WARN_ON
(--
¥iv
->
tx
.
queued_˙t
 < 0))

506 
¥iv
->
tx
.
queued_˙t
 = 0;

507 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

509 
	`©h9k_htc_tx_˛ór_¶Ÿ
(
¥iv
, 
¶Ÿ
);

512 
hdæí
 = 
	`õì80211_gë_hdæí_‰om_skb
(
skb
);

514 
∑dsize
 = 
hdæí
 & 3;

515 i‡(
∑dsize
 && 
skb
->
Àn
 > 
hdæí
 +Öadsize) {

516 
	`memmove
(
skb
->
d©a
 + 
∑dsize
, skb->d©a, 
hdæí
);

517 
	`skb_puŒ
(
skb
, 
∑dsize
);

521 
	`õì80211_tx_°©us
(
¥iv
->
hw
, 
skb
);

522 
	}
}

524 
ölöe
 
	$©h9k_htc_tx_døöq
(
©h9k_htc_¥iv
 *
¥iv
,

525 
sk_buff_hód
 *
queue
)

527 
sk_buff
 *
skb
;

529 (
skb
 = 
	`skb_dequeue
(
queue
)Ë!
NULL
) {

530 
	`©h9k_htc_tx_¥o˚ss
(
¥iv
, 
skb
, 
NULL
);

532 
	}
}

534 
	$©h9k_htc_tx_døö
(
©h9k_htc_¥iv
 *
¥iv
)

536 
©h9k_htc_tx_evít
 *
evít
, *
tmp
;

538 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

539 
¥iv
->
tx
.
Êags
 |
ATH9K_HTC_OP_TX_DRAIN
;

540 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

546 
	`htc_°›
(
¥iv
->
htc
);

547 
	`èskÀt_kûl
(&
¥iv
->
wmi
->
wmi_evít_èskÀt
);

548 
	`èskÀt_kûl
(&
¥iv
->
tx_Áûed_èskÀt
);

550 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
mgmt_ï_queue
);

551 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
ˇb_ï_queue
);

552 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
d©a_be_queue
);

553 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
d©a_bk_queue
);

554 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
d©a_vi_queue
);

555 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
d©a_vo_queue
);

556 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
tx_Áûed
);

561 
	`•ö_lock_bh
(&
¥iv
->
wmi
->
evít_lock
);

562 
	`li°_f‹_óch_íåy_ß„
(
evít
, 
tmp
, &
¥iv
->
wmi
->
≥ndög_tx_evíts
, 
li°
) {

563 
	`li°_dñ
(&
evít
->
li°
);

564 
	`k‰ì
(
evít
);

566 
	`•ö_u∆ock_bh
(&
¥iv
->
wmi
->
evít_lock
);

568 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

569 
¥iv
->
tx
.
Êags
 &~
ATH9K_HTC_OP_TX_DRAIN
;

570 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

571 
	}
}

573 
	$©h9k_tx_Áûed_èskÀt
(
d©a
)

575 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *)
d©a
;

577 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

578 i‡(
¥iv
->
tx
.
Êags
 & 
ATH9K_HTC_OP_TX_DRAIN
) {

579 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

582 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

584 
	`©h9k_htc_tx_døöq
(
¥iv
, &¥iv->
tx
.
tx_Áûed
);

585 
	}
}

587 
ölöe
 
boﬁ
 
	$check_cookõ
(
©h9k_htc_¥iv
 *
¥iv
,

588 
sk_buff
 *
skb
,

589 
u8
 
cookõ
, u8 
ïid
)

591 
u8
 
fcookõ
 = 0;

593 i‡(
ïid
 =
¥iv
->
mgmt_ï
) {

594 
tx_mgmt_hdr
 *
hdr
;

595 
hdr
 = (
tx_mgmt_hdr
 *Ë
skb
->
d©a
;

596 
fcookõ
 = 
hdr
->
cookõ
;

597 } i‡((
ïid
 =
¥iv
->
d©a_bk_ï
) ||

598 (
ïid
 =
¥iv
->
d©a_be_ï
) ||

599 (
ïid
 =
¥iv
->
d©a_vi_ï
) ||

600 (
ïid
 =
¥iv
->
d©a_vo_ï
) ||

601 (
ïid
 =
¥iv
->
ˇb_ï
)) {

602 
tx_‰ame_hdr
 *
hdr
;

603 
hdr
 = (
tx_‰ame_hdr
 *Ë
skb
->
d©a
;

604 
fcookõ
 = 
hdr
->
cookõ
;

607 i‡(
fcookõ
 =
cookõ
)

608  
åue
;

610  
Ál£
;

611 
	}
}

613 
sk_buff
* 
	$©h9k_htc_tx_gë_∑ckë
(
©h9k_htc_¥iv
 *
¥iv
,

614 
__wmi_evít_tx°©us
 *
txs
)

616 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

617 
sk_buff_hód
 *
ïid_queue
;

618 
sk_buff
 *
skb
, *
tmp
;

619 
Êags
;

620 
u8
 
ïid
 = 
	`MS
(
txs
->
ts_øã
, 
ATH9K_HTC_TXSTAT_EPID
);

622 
ïid_queue
 = 
	`gë_htc_ïid_queue
(
¥iv
, 
ïid
);

623 i‡(!
ïid_queue
)

624  
NULL
;

626 
	`•ö_lock_úqßve
(&
ïid_queue
->
lock
, 
Êags
);

627 
	`skb_queue_wÆk_ß„
(
ïid_queue
, 
skb
, 
tmp
) {

628 i‡(
	`check_cookõ
(
¥iv
, 
skb
, 
txs
->
cookõ
, 
ïid
)) {

629 
	`__skb_u∆ök
(
skb
, 
ïid_queue
);

630 
	`•ö_u∆ock_úqª°‹e
(&
ïid_queue
->
lock
, 
Êags
);

631  
skb
;

634 
	`•ö_u∆ock_úqª°‹e
(&
ïid_queue
->
lock
, 
Êags
);

636 
	`©h_dbg
(
comm⁄
, 
XMIT
, "No matchingÖacket for cookie: %d,Épid: %d\n",

637 
txs
->
cookõ
, 
ïid
);

639  
NULL
;

640 
	}
}

642 
	$©h9k_htc_tx°©us
(
©h9k_htc_¥iv
 *
¥iv
, *
wmi_evít
)

644 
wmi_evít_tx°©us
 *
txs
 = (wmi_evít_tx°©u†*)
wmi_evít
;

645 
__wmi_evít_tx°©us
 *
__txs
;

646 
sk_buff
 *
skb
;

647 
©h9k_htc_tx_evít
 *
tx_≥nd
;

648 
i
;

650 
i
 = 0; i < 
txs
->
˙t
; i++) {

651 
	`WARN_ON
(
txs
->
˙t
 > 
HTC_MAX_TX_STATUS
);

653 
__txs
 = &
txs
->
tx°©us
[
i
];

655 
skb
 = 
	`©h9k_htc_tx_gë_∑ckë
(
¥iv
, 
__txs
);

656 i‡(!
skb
) {

661 
tx_≥nd
 = 
	`kzÆloc
((
©h9k_htc_tx_evít
),

662 
GFP_ATOMIC
);

663 i‡(!
tx_≥nd
)

666 
	`mem˝y
(&
tx_≥nd
->
txs
, 
__txs
,

667 (
__wmi_evít_tx°©us
));

669 
	`•ö_lock
(&
¥iv
->
wmi
->
evít_lock
);

670 
	`li°_add_èû
(&
tx_≥nd
->
li°
,

671 &
¥iv
->
wmi
->
≥ndög_tx_evíts
);

672 
	`•ö_u∆ock
(&
¥iv
->
wmi
->
evít_lock
);

677 
	`©h9k_htc_tx_¥o˚ss
(
¥iv
, 
skb
, 
__txs
);

681 
	`©h9k_htc_check_wake_queues
(
¥iv
);

682 
	}
}

684 
	$©h9k_htc_txï
(*
drv_¥iv
, 
sk_buff
 *
skb
,

685 
htc_ídpoöt_id
 
ï_id
, 
boﬁ
 
txok
)

687 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
drv_¥iv
;

688 
©h9k_htc_tx_˘l
 *
tx_˘l
;

689 
sk_buff_hód
 *
ïid_queue
;

691 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

692 
tx_˘l
->
txok
 =Åxok;

693 
tx_˘l
->
time°amp
 = 
jiffõs
;

695 i‡(!
txok
) {

696 
	`skb_queue_èû
(&
¥iv
->
tx
.
tx_Áûed
, 
skb
);

697 
	`èskÀt_scheduÀ
(&
¥iv
->
tx_Áûed_èskÀt
);

701 
ïid_queue
 = 
	`gë_htc_ïid_queue
(
¥iv
, 
ï_id
);

702 i‡(!
ïid_queue
) {

703 
	`dev_k‰ì_skb_™y
(
skb
);

707 
	`skb_queue_èû
(
ïid_queue
, 
skb
);

708 
	}
}

710 
ölöe
 
boﬁ
 
	$check_∑ckë
(
©h9k_htc_¥iv
 *
¥iv
, 
sk_buff
 *
skb
)

712 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

713 
©h9k_htc_tx_˘l
 *
tx_˘l
;

715 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

717 i‡(
	`time_a·î
(
jiffõs
,

718 
tx_˘l
->
time°amp
 +

719 
	`m£cs_to_jiffõs
(
ATH9K_HTC_TX_TIMEOUT_INTERVAL
))) {

720 
	`©h_dbg
(
comm⁄
, 
XMIT
, "DroppingáÖacket dueÅo TXÅimeout\n");

721  
åue
;

724  
Ál£
;

725 
	}
}

727 
	$©h9k_htc_tx_˛ónup_queue
(
©h9k_htc_¥iv
 *
¥iv
,

728 
sk_buff_hód
 *
ïid_queue
)

730 
boﬁ
 
¥o˚ss
 = 
Ál£
;

731 
Êags
;

732 
sk_buff
 *
skb
, *
tmp
;

733 
sk_buff_hód
 
queue
;

735 
	`skb_queue_hód_öô
(&
queue
);

737 
	`•ö_lock_úqßve
(&
ïid_queue
->
lock
, 
Êags
);

738 
	`skb_queue_wÆk_ß„
(
ïid_queue
, 
skb
, 
tmp
) {

739 i‡(
	`check_∑ckë
(
¥iv
, 
skb
)) {

740 
	`__skb_u∆ök
(
skb
, 
ïid_queue
);

741 
	`__skb_queue_èû
(&
queue
, 
skb
);

742 
¥o˚ss
 = 
åue
;

745 
	`•ö_u∆ock_úqª°‹e
(&
ïid_queue
->
lock
, 
Êags
);

747 i‡(
¥o˚ss
) {

748 
	`skb_queue_wÆk_ß„
(&
queue
, 
skb
, 
tmp
) {

749 
	`__skb_u∆ök
(
skb
, &
queue
);

750 
	`©h9k_htc_tx_¥o˚ss
(
¥iv
, 
skb
, 
NULL
);

753 
	}
}

755 
	$©h9k_htc_tx_˛ónup_timî
(
d©a
)

757 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *Ë
d©a
;

758 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

759 
©h9k_htc_tx_evít
 *
evít
, *
tmp
;

760 
sk_buff
 *
skb
;

762 
	`•ö_lock
(&
¥iv
->
wmi
->
evít_lock
);

763 
	`li°_f‹_óch_íåy_ß„
(
evít
, 
tmp
, &
¥iv
->
wmi
->
≥ndög_tx_evíts
, 
li°
) {

765 
skb
 = 
	`©h9k_htc_tx_gë_∑ckë
(
¥iv
, &
evít
->
txs
);

766 i‡(
skb
) {

767 
	`©h_dbg
(
comm⁄
, 
XMIT
,

769 
evít
->
txs
.
cookõ
,

770 
	`MS
(
evít
->
txs
.
ts_øã
, 
ATH9K_HTC_TXSTAT_EPID
));

772 
	`©h9k_htc_tx_¥o˚ss
(
¥iv
, 
skb
, &
evít
->
txs
);

773 
	`li°_dñ
(&
evít
->
li°
);

774 
	`k‰ì
(
evít
);

778 i‡(++
evít
->
cou¡
 >
ATH9K_HTC_TX_TIMEOUT_COUNT
) {

779 
	`li°_dñ
(&
evít
->
li°
);

780 
	`k‰ì
(
evít
);

783 
	`•ö_u∆ock
(&
¥iv
->
wmi
->
evít_lock
);

788 
	`©h9k_htc_tx_˛ónup_queue
(
¥iv
, &¥iv->
tx
.
mgmt_ï_queue
);

789 
	`©h9k_htc_tx_˛ónup_queue
(
¥iv
, &¥iv->
tx
.
ˇb_ï_queue
);

790 
	`©h9k_htc_tx_˛ónup_queue
(
¥iv
, &¥iv->
tx
.
d©a_be_queue
);

791 
	`©h9k_htc_tx_˛ónup_queue
(
¥iv
, &¥iv->
tx
.
d©a_bk_queue
);

792 
	`©h9k_htc_tx_˛ónup_queue
(
¥iv
, &¥iv->
tx
.
d©a_vi_queue
);

793 
	`©h9k_htc_tx_˛ónup_queue
(
¥iv
, &¥iv->
tx
.
d©a_vo_queue
);

796 
	`©h9k_htc_check_wake_queues
(
¥iv
);

798 
	`mod_timî
(&
¥iv
->
tx
.
˛ónup_timî
,

799 
jiffõs
 + 
	`m£cs_to_jiffõs
(
ATH9K_HTC_TX_CLEANUP_INTERVAL
));

800 
	}
}

802 
	$©h9k_tx_öô
(
©h9k_htc_¥iv
 *
¥iv
)

804 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
mgmt_ï_queue
);

805 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
ˇb_ï_queue
);

806 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
d©a_be_queue
);

807 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
d©a_bk_queue
);

808 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
d©a_vi_queue
);

809 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
d©a_vo_queue
);

810 
	`skb_queue_hód_öô
(&
¥iv
->
tx
.
tx_Áûed
);

812 
	}
}

814 
	$©h9k_tx_˛ónup
(
©h9k_htc_¥iv
 *
¥iv
)

817 
	}
}

819 
boﬁ
 
	$©h9k_htc_txq_£tup
(
©h9k_htc_¥iv
 *
¥iv
, 
subty≥
)

821 
©h_hw
 *
ah
 = 
¥iv
->ah;

822 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

823 
©h9k_tx_queue_öfo
 
qi
;

824 
qnum
;

826 
	`mem£t
(&
qi
, 0, (qi));

827 
	`ATH9K_HTC_INIT_TXQ
(
subty≥
);

829 
qnum
 = 
	`©h9k_hw_£tu±xqueue
(
¥iv
->
ah
, 
ATH9K_TX_QUEUE_DATA
, &
qi
);

830 i‡(
qnum
 == -1)

831  
Ál£
;

833 i‡(
qnum
 >
	`ARRAY_SIZE
(
¥iv
->
hwq_m≠
)) {

834 
	`©h_îr
(
comm⁄
, "qnum %u out ofÑange, max %zu!\n",

835 
qnum
, 
	`ARRAY_SIZE
(
¥iv
->
hwq_m≠
));

836 
	`©h9k_hw_ªÀa£txqueue
(
ah
, 
qnum
);

837  
Ál£
;

840 
¥iv
->
hwq_m≠
[
subty≥
] = 
qnum
;

841  
åue
;

842 
	}
}

844 
	$©h9k_htc_ˇbq_£tup
(
©h9k_htc_¥iv
 *
¥iv
)

846 
©h9k_tx_queue_öfo
 
qi
;

848 
	`mem£t
(&
qi
, 0, (qi));

849 
	`ATH9K_HTC_INIT_TXQ
(0);

851  
	`©h9k_hw_£tu±xqueue
(
¥iv
->
ah
, 
ATH9K_TX_QUEUE_CAB
, &
qi
);

852 
	}
}

861 
u32
 
	$©h9k_htc_ˇl¸xfûãr
(
©h9k_htc_¥iv
 *
¥iv
)

863 
	#RX_FILTER_PRESERVE
 (
ATH9K_RX_FILTER_PHYERR
 | 
ATH9K_RX_FILTER_PHYRADAR
)

	)

865 
©h_hw
 *
ah
 = 
¥iv
->ah;

866 
u32
 
rfût
;

868 
rfût
 = (
	`©h9k_hw_gërxfûãr
(
ah
Ë& 
RX_FILTER_PRESERVE
)

869 | 
ATH9K_RX_FILTER_UCAST
 | 
ATH9K_RX_FILTER_BCAST


870 | 
ATH9K_RX_FILTER_MCAST
;

872 i‡(
¥iv
->
rxfûãr
 & 
FIF_PROBE_REQ
)

873 
rfût
 |
ATH9K_RX_FILTER_PROBEREQ
;

875 i‡(
ah
->
is_m⁄ô‹ög
)

876 
rfût
 |
ATH9K_RX_FILTER_PROM
;

878 i‡(
¥iv
->
rxfûãr
 & 
FIF_CONTROL
)

879 
rfût
 |
ATH9K_RX_FILTER_CONTROL
;

881 i‡((
ah
->
›mode
 =
NL80211_IFTYPE_STATION
) &&

882 (
¥iv
->
nvifs
 <= 1) &&

883 !(
¥iv
->
rxfûãr
 & 
FIF_BCN_PRBRESP_PROMISC
))

884 
rfût
 |
ATH9K_RX_FILTER_MYBEACON
;

886 
rfût
 |
ATH9K_RX_FILTER_BEACON
;

888 i‡(
	`c⁄f_is_ht
(&
¥iv
->
hw
->
c⁄f
)) {

889 
rfût
 |
ATH9K_RX_FILTER_COMP_BAR
;

890 
rfût
 |
ATH9K_RX_FILTER_UNCOMP_BA_BAR
;

893 i‡(
¥iv
->
rxfûãr
 & 
FIF_PSPOLL
)

894 
rfût
 |
ATH9K_RX_FILTER_PSPOLL
;

896 i‡(
¥iv
->
nvifs
 > 1 ||Öriv->
rxfûãr
 & 
FIF_OTHER_BSS
)

897 
rfût
 |
ATH9K_RX_FILTER_MCAST_BCAST_ALL
;

899  
rfût
;

901 #unde‡
RX_FILTER_PRESERVE


902 
	}
}

907 
	$©h9k_htc_›mode_öô
(
©h9k_htc_¥iv
 *
¥iv
)

909 
©h_hw
 *
ah
 = 
¥iv
->ah;

910 
u32
 
rfût
, 
mfût
[2];

913 
rfût
 = 
	`©h9k_htc_ˇl¸xfûãr
(
¥iv
);

914 
	`©h9k_hw_£åxfûãr
(
ah
, 
rfût
);

917 
mfût
[0] = mfilt[1] = ~0;

918 
	`©h9k_hw_£tmˇ°fûãr
(
ah
, 
mfût
[0], mfilt[1]);

919 
	}
}

921 
	$©h9k_ho°_rx_öô
(
©h9k_htc_¥iv
 *
¥iv
)

923 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

924 
	`©h9k_hw_rxía
(
¥iv
->
ah
);

925 
	`©h9k_htc_›mode_öô
(
¥iv
);

926 
	`©h9k_hw_°¨çcuª˚ive
(
¥iv
->
ah
, 
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
));

927 
	}
}

929 
ölöe
 
	$c⁄vît_htc_Êag
(
©h_rx_°©us
 *
rx_°©s
,

930 
©h_htc_rx_°©us
 *
rx°©us
)

932 
rx_°©s
->
Êag
 = 0;

933 i‡(
rx°©us
->
rs_Êags
 & 
ATH9K_RX_2040
)

934 
rx_°©s
->
Êag
 |
RX_FLAG_40MHZ
;

935 i‡(
rx°©us
->
rs_Êags
 & 
ATH9K_RX_GI
)

936 
rx_°©s
->
Êag
 |
RX_FLAG_SHORT_GI
;

937 
	}
}

939 
	$rx_°©us_htc_to_©h
(
©h_rx_°©us
 *
rx_°©s
,

940 
©h_htc_rx_°©us
 *
rx°©us
)

942 
rx_°©s
->
rs_d©Æí
 = 
	`be16_to_˝u
(
rx°©us
->rs_datalen);

943 
rx_°©s
->
rs_°©us
 = 
rx°©us
->rs_status;

944 
rx_°©s
->
rs_phyîr
 = 
rx°©us
->rs_phyerr;

945 
rx_°©s
->
rs_rssi
 = 
rx°©us
->rs_rssi;

946 
rx_°©s
->
rs_keyix
 = 
rx°©us
->rs_keyix;

947 
rx_°©s
->
rs_øã
 = 
rx°©us
->rs_rate;

948 
rx_°©s
->
rs_™ã¬a
 = 
rx°©us
->rs_antenna;

949 
rx_°©s
->
rs_m‹e
 = 
rx°©us
->rs_more;

951 
	`mem˝y
(
rx_°©s
->
rs_rssi_˘l
, 
rx°©us
->rs_rssi_ctl,

952 (
rx_°©s
->
rs_rssi_˘l
));

953 
	`mem˝y
(
rx_°©s
->
rs_rssi_ext
, 
rx°©us
->rs_rssi_ext,

954 (
rx_°©s
->
rs_rssi_ext
));

956 
rx_°©s
->
rs_ißggr
 = 
rx°©us
->rs_isaggr;

957 
rx_°©s
->
rs_m‹óggr
 = 
rx°©us
->rs_moreaggr;

958 
rx_°©s
->
rs_num_dñims
 = 
rx°©us
->rs_num_delims;

959 
	`c⁄vît_htc_Êag
(
rx_°©s
, 
rx°©us
);

960 
	}
}

962 
boﬁ
 
	$©h9k_rx_¥ï¨e
(
©h9k_htc_¥iv
 *
¥iv
,

963 
©h9k_htc_rxbuf
 *
rxbuf
,

964 
õì80211_rx_°©us
 *
rx_°©us
)

967 
õì80211_hdr
 *
hdr
;

968 
õì80211_hw
 *
hw
 = 
¥iv
->hw;

969 
sk_buff
 *
skb
 = 
rxbuf
->skb;

970 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

971 
©h_hw
 *
ah
 = 
comm⁄
->ah;

972 
©h_htc_rx_°©us
 *
rx°©us
;

973 
©h_rx_°©us
 
rx_°©s
;

974 
boﬁ
 
de¸y±_îr‹
 = 
Ál£
;

976 i‡(
skb
->
Àn
 < 
HTC_RX_FRAME_HEADER_SIZE
) {

977 
	`©h_îr
(
comm⁄
, "Corrupted RX frame, dropping (len: %d)\n",

978 
skb
->
Àn
);

979 
rx_√xt
;

982 
rx°©us
 = (
©h_htc_rx_°©us
 *)
skb
->
d©a
;

984 i‡(
	`be16_to_˝u
(
rx°©us
->
rs_d©Æí
) -

985 (
skb
->
Àn
 - 
HTC_RX_FRAME_HEADER_SIZE
) != 0) {

986 
	`©h_îr
(
comm⁄
,

988 
rx°©us
->
rs_d©Æí
, 
skb
->
Àn
);

989 
rx_√xt
;

994 
	`mem£t
(
rx_°©us
, 0, (
õì80211_rx_°©us
));

998 
	`rx_°©us_htc_to_©h
(&
rx_°©s
, 
rx°©us
);

999 
	`©h9k_htc_îr_°©_rx
(
¥iv
, &
rx_°©s
);

1000 
rx_°©us
->
ma˘ime
 = 
	`be64_to_˝u
(
rx°©us
->
rs_t°amp
);

1001 
	`skb_puŒ
(
skb
, 
HTC_RX_FRAME_HEADER_SIZE
);

1007 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

1013 i‡(
rx_°©s
.
rs_°©us
 & 
ATH9K_RXERR_PHY
) {

1015 i‡(
	`©h_cmn_¥o˚ss_f·
(&
¥iv
->
•ec_¥iv
, 
hdr
,

1016 &
rx_°©s
, 
rx_°©us
->
ma˘ime
)) {

1019 
rx_√xt
;

1022 i‡(!
	`©h9k_cmn_rx_ac˚±
(
comm⁄
, 
hdr
, 
rx_°©us
, &
rx_°©s
,

1023 &
de¸y±_îr‹
, 
¥iv
->
rxfûãr
))

1024 
rx_√xt
;

1026 
	`©h9k_cmn_rx_skb_po°¥o˚ss
(
comm⁄
, 
skb
, &
rx_°©s
,

1027 
rx_°©us
, 
de¸y±_îr‹
);

1029 i‡(
	`©h9k_cmn_¥o˚ss_øã
(
comm⁄
, 
hw
, &
rx_°©s
, 
rx_°©us
))

1030 
rx_√xt
;

1032 
rx_°©s
.
is_mybóc⁄
 = 
	`©h_is_mybóc⁄
(
comm⁄
, 
hdr
);

1033 
	`©h9k_cmn_¥o˚ss_rssi
(
comm⁄
, 
hw
, &
rx_°©s
, 
rx_°©us
);

1035 
rx_°©us
->
b™d
 = 
ah
->
curch™
->
ch™
->band;

1036 
rx_°©us
->
‰eq
 = 
ah
->
curch™
->
ch™
->
˚¡î_‰eq
;

1037 
rx_°©us
->
™ã¬a
 = 
rx_°©s
.
rs_™ã¬a
;

1038 
rx_°©us
->
Êag
 |
RX_FLAG_MACTIME_END
;

1040  
åue
;

1041 
rx_√xt
:

1042  
Ál£
;

1043 
	}
}

1048 
	$©h9k_rx_èskÀt
(
d©a
)

1050 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *)
d©a
;

1051 
©h9k_htc_rxbuf
 *
rxbuf
 = 
NULL
, *
tmp_buf
 = NULL;

1052 
õì80211_rx_°©us
 
rx_°©us
;

1053 
sk_buff
 *
skb
;

1054 
Êags
;

1055 
õì80211_hdr
 *
hdr
;

1058 
	`•ö_lock_úqßve
(&
¥iv
->
rx
.
rxbuÊock
, 
Êags
);

1059 
	`li°_f‹_óch_íåy
(
tmp_buf
, &
¥iv
->
rx
.
rxbuf
, 
li°
) {

1060 i‡(
tmp_buf
->
ö_¥o˚ss
) {

1061 
rxbuf
 = 
tmp_buf
;

1066 i‡(
rxbuf
 =
NULL
) {

1067 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
rx
.
rxbuÊock
, 
Êags
);

1071 i‡(!
rxbuf
->
skb
)

1072 
ªqueue
;

1074 i‡(!
	`©h9k_rx_¥ï¨e
(
¥iv
, 
rxbuf
, &
rx_°©us
)) {

1075 
	`dev_k‰ì_skb_™y
(
rxbuf
->
skb
);

1076 
ªqueue
;

1079 
	`mem˝y
(
	`IEEE80211_SKB_RXCB
(
rxbuf
->
skb
), &
rx_°©us
,

1080 (
õì80211_rx_°©us
));

1081 
skb
 = 
rxbuf
->skb;

1082 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

1084 i‡(
	`õì80211_is_bóc⁄
(
hdr
->
‰ame_c⁄åﬁ
Ë&& 
¥iv
->
ps_íabÀd
)

1085 
	`õì80211_queue_w‹k
(
¥iv
->
hw
, &¥iv->
ps_w‹k
);

1087 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
rx
.
rxbuÊock
, 
Êags
);

1089 
	`õì80211_rx
(
¥iv
->
hw
, 
skb
);

1091 
	`•ö_lock_úqßve
(&
¥iv
->
rx
.
rxbuÊock
, 
Êags
);

1092 
ªqueue
:

1093 
rxbuf
->
ö_¥o˚ss
 = 
Ál£
;

1094 
rxbuf
->
skb
 = 
NULL
;

1095 
	`li°_move_èû
(&
rxbuf
->
li°
, &
¥iv
->
rx
.rxbuf);

1096 
rxbuf
 = 
NULL
;

1097 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
rx
.
rxbuÊock
, 
Êags
);

1100 
	}
}

1102 
	$©h9k_htc_rxï
(*
drv_¥iv
, 
sk_buff
 *
skb
,

1103 
htc_ídpoöt_id
 
ï_id
)

1105 
©h9k_htc_¥iv
 *
¥iv
 = (©h9k_htc_¥iv *)
drv_¥iv
;

1106 
©h_hw
 *
ah
 = 
¥iv
->ah;

1107 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1108 
©h9k_htc_rxbuf
 *
rxbuf
 = 
NULL
, *
tmp_buf
 = NULL;

1110 
	`•ö_lock
(&
¥iv
->
rx
.
rxbuÊock
);

1111 
	`li°_f‹_óch_íåy
(
tmp_buf
, &
¥iv
->
rx
.
rxbuf
, 
li°
) {

1112 i‡(!
tmp_buf
->
ö_¥o˚ss
) {

1113 
rxbuf
 = 
tmp_buf
;

1117 
	`•ö_u∆ock
(&
¥iv
->
rx
.
rxbuÊock
);

1119 i‡(
rxbuf
 =
NULL
) {

1120 
	`©h_dbg
(
comm⁄
, 
ANY
, "No free RX buffer\n");

1121 
îr
;

1124 
	`•ö_lock
(&
¥iv
->
rx
.
rxbuÊock
);

1125 
rxbuf
->
skb
 = skb;

1126 
rxbuf
->
ö_¥o˚ss
 = 
åue
;

1127 
	`•ö_u∆ock
(&
¥iv
->
rx
.
rxbuÊock
);

1129 
	`èskÀt_scheduÀ
(&
¥iv
->
rx_èskÀt
);

1131 
îr
:

1132 
	`dev_k‰ì_skb_™y
(
skb
);

1133 
	}
}

1137 
	$©h9k_rx_˛ónup
(
©h9k_htc_¥iv
 *
¥iv
)

1139 
©h9k_htc_rxbuf
 *
rxbuf
, *
tbuf
;

1141 
	`li°_f‹_óch_íåy_ß„
(
rxbuf
, 
tbuf
, &
¥iv
->
rx
.rxbuf, 
li°
) {

1142 
	`li°_dñ
(&
rxbuf
->
li°
);

1143 i‡(
rxbuf
->
skb
)

1144 
	`dev_k‰ì_skb_™y
(
rxbuf
->
skb
);

1145 
	`k‰ì
(
rxbuf
);

1147 
	}
}

1149 
	$©h9k_rx_öô
(
©h9k_htc_¥iv
 *
¥iv
)

1151 
i
 = 0;

1153 
	`INIT_LIST_HEAD
(&
¥iv
->
rx
.
rxbuf
);

1154 
	`•ö_lock_öô
(&
¥iv
->
rx
.
rxbuÊock
);

1156 
i
 = 0; i < 
ATH9K_HTC_RXBUF
; i++) {

1157 
©h9k_htc_rxbuf
 *
rxbuf
 =

1158 
	`kzÆloc
((
©h9k_htc_rxbuf
), 
GFP_KERNEL
);

1159 i‡(
rxbuf
 =
NULL
)

1160 
îr
;

1162 
	`li°_add_èû
(&
rxbuf
->
li°
, &
¥iv
->
rx
.rxbuf);

1167 
îr
:

1168 
	`©h9k_rx_˛ónup
(
¥iv
);

1169  -
ENOMEM
;

1170 
	}
}

	@htc_hst.c

17 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

19 
	~"htc.h
"

21 
	$htc_issue_£nd
(
htc_èrgë
 *
èrgë
, 
sk_buff
* 
skb
,

22 
u16
 
Àn
, 
u8
 
Êags
, u8 
ïid
)

25 
htc_‰ame_hdr
 *
hdr
;

26 
htc_ídpoöt
 *
ídpoöt
 = &
èrgë
->ídpoöt[
ïid
];

27 
°©us
;

29 
hdr
 = (
htc_‰ame_hdr
 *)

30 
	`skb_push
(
skb
, (
htc_‰ame_hdr
));

31 
hdr
->
ídpoöt_id
 = 
ïid
;

32 
hdr
->
Êags
 = flags;

33 
hdr
->
∑ylﬂd_Àn
 = 
	`˝u_to_be16
(
Àn
);

35 
°©us
 = 
èrgë
->
hif
->
	`£nd
—¨gë->
hif_dev
, 
ídpoöt
->
ul_pùeid
, 
skb
);

37  
°©us
;

38 
	}
}

40 
htc_ídpoöt
 *
	$gë_√xt_avaû_ï
(
htc_ídpoöt
 *
ídpoöt
)

42 
htc_ídpoöt_id
 
avaû_ïid
;

44 
avaû_ïid
 = (
ENDPOINT_MAX
 - 1);ávaû_ïid > 
ENDPOINT0
;ávail_epid--)

45 i‡(
ídpoöt
[
avaû_ïid
].
£rvi˚_id
 == 0)

46  &
ídpoöt
[
avaû_ïid
];

47  
NULL
;

48 
	}
}

50 
u8
 
	$£rvi˚_to_uÕùe
(
u16
 
£rvi˚_id
)

52 
£rvi˚_id
) {

53 
WMI_CONTROL_SVC
:

55 
WMI_BEACON_SVC
:

56 
WMI_CAB_SVC
:

57 
WMI_UAPSD_SVC
:

58 
WMI_MGMT_SVC
:

59 
WMI_DATA_VO_SVC
:

60 
WMI_DATA_VI_SVC
:

61 
WMI_DATA_BE_SVC
:

62 
WMI_DATA_BK_SVC
:

67 
	}
}

69 
u8
 
	$£rvi˚_to_dÕùe
(
u16
 
£rvi˚_id
)

71 
£rvi˚_id
) {

72 
WMI_CONTROL_SVC
:

74 
WMI_BEACON_SVC
:

75 
WMI_CAB_SVC
:

76 
WMI_UAPSD_SVC
:

77 
WMI_MGMT_SVC
:

78 
WMI_DATA_VO_SVC
:

79 
WMI_DATA_VI_SVC
:

80 
WMI_DATA_BE_SVC
:

81 
WMI_DATA_BK_SVC
:

86 
	}
}

88 
	$htc_¥o˚ss_èrgë_rdy
(
htc_èrgë
 *
èrgë
,

89 *
buf
)

91 
htc_ídpoöt
 *
ídpoöt
;

92 
htc_ªady_msg
 *htc_ªady_msg = (htc_ªady_msg *Ë
buf
;

94 
èrgë
->
¸edô_size
 = 
	`be16_to_˝u
(
htc_ªady_msg
->credit_size);

96 
ídpoöt
 = &
èrgë
->ídpoöt[
ENDPOINT0
];

97 
ídpoöt
->
£rvi˚_id
 = 
HTC_CTRL_RSVD_SVC
;

98 
ídpoöt
->
max_msgÀn
 = 
HTC_MAX_CONTROL_MESSAGE_LENGTH
;

99 
	`©omic_öc
(&
èrgë
->
tgt_ªady
);

100 
	`com∂ëe
(&
èrgë
->
èrgë_waô
);

101 
	}
}

103 
	$htc_¥o˚ss_c⁄n_r•
(
htc_èrgë
 *
èrgë
,

104 
htc_‰ame_hdr
 *
htc_hdr
)

106 
htc_c⁄n_svc_r•msg
 *
svc_r•msg
;

107 
htc_ídpoöt
 *
ídpoöt
, *
tmp_ídpoöt
 = 
NULL
;

108 
u16
 
£rvi˚_id
;

109 
u16
 
max_msgÀn
;

110 
htc_ídpoöt_id
 
ïid
, 
ãpid
;

112 
svc_r•msg
 = (
htc_c⁄n_svc_r•msg
 *)

113 ((*Ë
htc_hdr
 + (
htc_‰ame_hdr
));

115 i‡(
svc_r•msg
->
°©us
 =
HTC_SERVICE_SUCCESS
) {

116 
ïid
 = 
svc_r•msg
->
ídpoöt_id
;

117 
£rvi˚_id
 = 
	`be16_to_˝u
(
svc_r•msg
->service_id);

118 
max_msgÀn
 = 
	`be16_to_˝u
(
svc_r•msg
->
max_msg_Àn
);

119 
ídpoöt
 = &
èrgë
->ídpoöt[
ïid
];

121 
ãpid
 = (
ENDPOINT_MAX
 - 1);Åïid > 
ENDPOINT0
;Åepid--) {

122 
tmp_ídpoöt
 = &
èrgë
->
ídpoöt
[
ãpid
];

123 i‡(
tmp_ídpoöt
->
£rvi˚_id
 == service_id) {

124 
tmp_ídpoöt
->
£rvi˚_id
 = 0;

129 i‡(
ãpid
 =
ENDPOINT0
)

132 
ídpoöt
->
£rvi˚_id
 = service_id;

133 
ídpoöt
->
max_txqdïth
 = 
tmp_ídpoöt
->max_txqdepth;

134 
ídpoöt
->
ï_ˇŒbacks
 = 
tmp_ídpoöt
->ep_callbacks;

135 
ídpoöt
->
ul_pùeid
 = 
tmp_ídpoöt
->ul_pipeid;

136 
ídpoöt
->
dl_pùeid
 = 
tmp_ídpoöt
->dl_pipeid;

137 
ídpoöt
->
max_msgÀn
 = max_msglen;

138 
èrgë
->
c⁄n_r•_ïid
 = 
ïid
;

139 
	`com∂ëe
(&
èrgë
->
cmd_waô
);

141 
èrgë
->
c⁄n_r•_ïid
 = 
ENDPOINT_UNUSED
;

143 
	}
}

145 
	$htc_c⁄fig_pùe_¸edôs
(
htc_èrgë
 *
èrgë
)

147 
sk_buff
 *
skb
;

148 
htc_c⁄fig_pùe_msg
 *
˝_msg
;

149 
ªt
;

150 
time_À·
;

152 
skb
 = 
	`Æloc_skb
(50 + (
htc_‰ame_hdr
), 
GFP_ATOMIC
);

153 i‡(!
skb
) {

154 
	`dev_îr
(
èrgë
->
dev
, "failedÅoállocate send buffer\n");

155  -
ENOMEM
;

157 
	`skb_ª£rve
(
skb
, (
htc_‰ame_hdr
));

159 
˝_msg
 = (
htc_c⁄fig_pùe_msg
 *)

160 
	`skb_put
(
skb
, (
htc_c⁄fig_pùe_msg
));

162 
˝_msg
->
mesßge_id
 = 
	`˝u_to_be16
(
HTC_MSG_CONFIG_PIPE_ID
);

163 
˝_msg
->
pùe_id
 = 
USB_WLAN_TX_PIPE
;

164 
˝_msg
->
¸edôs
 = 
èrgë
->credits;

166 
èrgë
->
htc_Êags
 |
HTC_OP_CONFIG_PIPE_CREDITS
;

168 
ªt
 = 
	`htc_issue_£nd
(
èrgë
, 
skb
, skb->
Àn
, 0, 
ENDPOINT0
);

169 i‡(
ªt
)

170 
îr
;

172 
time_À·
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
èrgë
->
cmd_waô
, 
HZ
);

173 i‡(!
time_À·
) {

174 
	`dev_îr
(
èrgë
->
dev
, "HTC credit configÅimeout\n");

175  -
ETIMEDOUT
;

179 
îr
:

180 
	`k‰ì_skb
(
skb
);

181  -
EINVAL
;

182 
	}
}

184 
	$htc_£tup_com∂ëe
(
htc_èrgë
 *
èrgë
)

186 
sk_buff
 *
skb
;

187 
htc_comp_msg
 *
comp_msg
;

188 
ªt
 = 0;

189 
time_À·
;

191 
skb
 = 
	`Æloc_skb
(50 + (
htc_‰ame_hdr
), 
GFP_ATOMIC
);

192 i‡(!
skb
) {

193 
	`dev_îr
(
èrgë
->
dev
, "failedÅoállocate send buffer\n");

194  -
ENOMEM
;

196 
	`skb_ª£rve
(
skb
, (
htc_‰ame_hdr
));

198 
comp_msg
 = (
htc_comp_msg
 *)

199 
	`skb_put
(
skb
, (
htc_comp_msg
));

200 
comp_msg
->
msg_id
 = 
	`˝u_to_be16
(
HTC_MSG_SETUP_COMPLETE_ID
);

202 
èrgë
->
htc_Êags
 |
HTC_OP_START_WAIT
;

204 
ªt
 = 
	`htc_issue_£nd
(
èrgë
, 
skb
, skb->
Àn
, 0, 
ENDPOINT0
);

205 i‡(
ªt
)

206 
îr
;

208 
time_À·
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
èrgë
->
cmd_waô
, 
HZ
);

209 i‡(!
time_À·
) {

210 
	`dev_îr
(
èrgë
->
dev
, "HTC startÅimeout\n");

211  -
ETIMEDOUT
;

216 
îr
:

217 
	`k‰ì_skb
(
skb
);

218  -
EINVAL
;

219 
	}
}

223 
	$htc_öô
(
htc_èrgë
 *
èrgë
)

225 
ªt
;

227 
ªt
 = 
	`htc_c⁄fig_pùe_¸edôs
(
èrgë
);

228 i‡(
ªt
)

229  
ªt
;

231  
	`htc_£tup_com∂ëe
(
èrgë
);

232 
	}
}

234 
	$htc_c⁄√˘_£rvi˚
(
htc_èrgë
 *
èrgë
,

235 
htc_£rvi˚_c⁄ƒeq
 *
£rvi˚_c⁄ƒeq
,

236 
htc_ídpoöt_id
 *
c⁄n_r•_ïid
)

238 
sk_buff
 *
skb
;

239 
htc_ídpoöt
 *
ídpoöt
;

240 
htc_c⁄n_svc_msg
 *
c⁄n_msg
;

241 
ªt
;

242 
time_À·
;

245 
ídpoöt
 = 
	`gë_√xt_avaû_ï
(
èrgë
->endpoint);

246 i‡(!
ídpoöt
) {

247 
	`dev_îr
(
èrgë
->
dev
, "Endpoint isÇotávailable for"

248 "£rvi˚ %d\n", 
£rvi˚_c⁄ƒeq
->
£rvi˚_id
);

249  -
EINVAL
;

252 
ídpoöt
->
£rvi˚_id
 = 
£rvi˚_c⁄ƒeq
->service_id;

253 
ídpoöt
->
max_txqdïth
 = 
£rvi˚_c⁄ƒeq
->
max_£nd_qdïth
;

254 
ídpoöt
->
ul_pùeid
 = 
	`£rvi˚_to_uÕùe
(
£rvi˚_c⁄ƒeq
->
£rvi˚_id
);

255 
ídpoöt
->
dl_pùeid
 = 
	`£rvi˚_to_dÕùe
(
£rvi˚_c⁄ƒeq
->
£rvi˚_id
);

256 
ídpoöt
->
ï_ˇŒbacks
 = 
£rvi˚_c⁄ƒeq
->ep_callbacks;

258 
skb
 = 
	`Æloc_skb
((
htc_c⁄n_svc_msg
) +

259 (
htc_‰ame_hdr
), 
GFP_ATOMIC
);

260 i‡(!
skb
) {

261 
	`dev_îr
(
èrgë
->
dev
, "FailedÅoállocate bufÅo send"

263  -
ENOMEM
;

266 
	`skb_ª£rve
(
skb
, (
htc_‰ame_hdr
));

268 
c⁄n_msg
 = (
htc_c⁄n_svc_msg
 *)

269 
	`skb_put
(
skb
, (
htc_c⁄n_svc_msg
));

270 
c⁄n_msg
->
£rvi˚_id
 = 
	`˝u_to_be16
(
£rvi˚_c⁄ƒeq
->service_id);

271 
c⁄n_msg
->
msg_id
 = 
	`˝u_to_be16
(
HTC_MSG_CONNECT_SERVICE_ID
);

272 
c⁄n_msg
->
c⁄_Êags
 = 
	`˝u_to_be16
(
£rvi˚_c⁄ƒeq
->con_flags);

273 
c⁄n_msg
->
dl_pùeid
 = 
ídpoöt
->dl_pipeid;

274 
c⁄n_msg
->
ul_pùeid
 = 
ídpoöt
->ul_pipeid;

276 
ªt
 = 
	`htc_issue_£nd
(
èrgë
, 
skb
, skb->
Àn
, 0, 
ENDPOINT0
);

277 i‡(
ªt
)

278 
îr
;

280 
time_À·
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
èrgë
->
cmd_waô
, 
HZ
);

281 i‡(!
time_À·
) {

282 
	`dev_îr
(
èrgë
->
dev
, "Service connectionÅimeout for: %d\n",

283 
£rvi˚_c⁄ƒeq
->
£rvi˚_id
);

284  -
ETIMEDOUT
;

287 *
c⁄n_r•_ïid
 = 
èrgë
->conn_rsp_epid;

289 
îr
:

290 
	`k‰ì_skb
(
skb
);

291  
ªt
;

292 
	}
}

294 
	$htc_£nd
(
htc_èrgë
 *
èrgë
, 
sk_buff
 *
skb
)

296 
©h9k_htc_tx_˘l
 *
tx_˘l
;

298 
tx_˘l
 = 
	`HTC_SKB_CB
(
skb
);

299  
	`htc_issue_£nd
(
èrgë
, 
skb
, skb->
Àn
, 0, 
tx_˘l
->
ïid
);

300 
	}
}

302 
	$htc_£nd_ïid
(
htc_èrgë
 *
èrgë
, 
sk_buff
 *
skb
,

303 
htc_ídpoöt_id
 
ïid
)

305  
	`htc_issue_£nd
(
èrgë
, 
skb
, skb->
Àn
, 0, 
ïid
);

306 
	}
}

308 
	$htc_°›
(
htc_èrgë
 *
èrgë
)

310 
èrgë
->
hif
->
	`°›
—¨gë->
hif_dev
);

311 
	}
}

313 
	$htc_°¨t
(
htc_èrgë
 *
èrgë
)

315 
èrgë
->
hif
->
	`°¨t
—¨gë->
hif_dev
);

316 
	}
}

318 
	$htc_°a_døö
(
htc_èrgë
 *
èrgë
, 
u8
 
idx
)

320 
èrgë
->
hif
->
	`°a_døö
—¨gë->
hif_dev
, 
idx
);

321 
	}
}

323 
	$©h9k_htc_txcom∂ëi⁄_cb
(
htc_èrgë
 *
htc_h™dÀ
,

324 
sk_buff
 *
skb
, 
boﬁ
 
txok
)

326 
htc_ídpoöt
 *
ídpoöt
;

327 
htc_‰ame_hdr
 *
htc_hdr
 = 
NULL
;

329 i‡(
htc_h™dÀ
->
htc_Êags
 & 
HTC_OP_CONFIG_PIPE_CREDITS
) {

330 
	`com∂ëe
(&
htc_h™dÀ
->
cmd_waô
);

331 
htc_h™dÀ
->
htc_Êags
 &~
HTC_OP_CONFIG_PIPE_CREDITS
;

332 
ªt
;

335 i‡(
htc_h™dÀ
->
htc_Êags
 & 
HTC_OP_START_WAIT
) {

336 
	`com∂ëe
(&
htc_h™dÀ
->
cmd_waô
);

337 
htc_h™dÀ
->
htc_Êags
 &~
HTC_OP_START_WAIT
;

338 
ªt
;

341 i‡(
skb
) {

342 
htc_hdr
 = (
htc_‰ame_hdr
 *Ë
skb
->
d©a
;

343 
ídpoöt
 = &
htc_h™dÀ
->ídpoöt[
htc_hdr
->
ídpoöt_id
];

344 
	`skb_puŒ
(
skb
, (
htc_‰ame_hdr
));

346 i‡(
ídpoöt
->
ï_ˇŒbacks
.
tx
) {

347 
ídpoöt
->
ï_ˇŒbacks
.
	`tx
”ndpoöt->ï_ˇŒbacks.
¥iv
,

348 
skb
, 
htc_hdr
->
ídpoöt_id
,

349 
txok
);

351 
	`k‰ì_skb
(
skb
);

356 
ªt
:

357 
	`k‰ì_skb
(
skb
);

358 
	}
}

360 
	$©h9k_htc_fw_∑nic_ªp‹t
(
htc_èrgë
 *
htc_h™dÀ
,

361 
sk_buff
 *
skb
)

363 
uöt32_t
 *
∑âîn
 = (uöt32_à*)
skb
->
d©a
;

365 *
∑âîn
) {

368 
htc_∑nic_bad_vaddr
 *
htc_∑nic
;

369 
htc_∑nic
 = (
htc_∑nic_bad_vaddr
 *Ë
skb
->
d©a
;

370 
	`dev_îr
(
htc_h™dÀ
->
dev
, "ath: firmwareÖanic! "

372 
htc_∑nic
->
excˇu£
, htc_∑nic->
pc
,

373 
htc_∑nic
->
badvaddr
);

378 
htc_∑nic_bad_ïid
 *
htc_∑nic
;

379 
htc_∑nic
 = (
htc_∑nic_bad_ïid
 *Ë
skb
->
d©a
;

380 
	`dev_îr
(
htc_h™dÀ
->
dev
, "ath: firmwareÖanic! "

381 "badÉpid: 0x%08x\n", 
htc_∑nic
->
ïid
);

385 
	`dev_îr
(
htc_h™dÀ
->
dev
, "ath: uknownÖanicÖattern!\n");

388 
	}
}

397 
	$©h9k_htc_rx_msg
(
htc_èrgë
 *
htc_h™dÀ
,

398 
sk_buff
 *
skb
, 
u32
 
Àn
, 
u8
 
pùe_id
)

400 
htc_‰ame_hdr
 *
htc_hdr
;

401 
htc_ídpoöt_id
 
ïid
;

402 
htc_ídpoöt
 *
ídpoöt
;

403 
__be16
 *
msg_id
;

405 i‡(!
htc_h™dÀ
 || !
skb
)

408 
htc_hdr
 = (
htc_‰ame_hdr
 *Ë
skb
->
d©a
;

409 
ïid
 = 
htc_hdr
->
ídpoöt_id
;

411 i‡(
ïid
 == 0x99) {

412 
	`©h9k_htc_fw_∑nic_ªp‹t
(
htc_h™dÀ
, 
skb
);

413 
	`k‰ì_skb
(
skb
);

417 i‡(
ïid
 >
ENDPOINT_MAX
) {

418 i‡(
pùe_id
 !
USB_REG_IN_PIPE
)

419 
	`dev_k‰ì_skb_™y
(
skb
);

421 
	`k‰ì_skb
(
skb
);

425 i‡(
ïid
 =
ENDPOINT0
) {

428 i‡(
htc_hdr
->
Êags
 & 
HTC_FLAGS_RECV_TRAILER
) {

429 i‡(
	`be32_to_˝u
(*(
__be32
 *Ë
skb
->
d©a
) == 0x00C60000)

431 
htc_hdr
 = (
htc_‰ame_hdr
 *)(
skb
->
d©a
 + 4);

435 
msg_id
 = (
__be16
 *Ë((*Ë
htc_hdr
 +

436 (
htc_‰ame_hdr
));

439 
	`be16_to_˝u
(*
msg_id
)) {

440 
HTC_MSG_READY_ID
:

441 
	`htc_¥o˚ss_èrgë_rdy
(
htc_h™dÀ
, 
htc_hdr
);

443 
HTC_MSG_CONNECT_SERVICE_RESPONSE_ID
:

444 
	`htc_¥o˚ss_c⁄n_r•
(
htc_h™dÀ
, 
htc_hdr
);

450 
	`k‰ì_skb
(
skb
);

453 i‡(
htc_hdr
->
Êags
 & 
HTC_FLAGS_RECV_TRAILER
)

454 
	`skb_åim
(
skb
, 
Àn
 - 
htc_hdr
->
c⁄åﬁ
[0]);

456 
	`skb_puŒ
(
skb
, (
htc_‰ame_hdr
));

458 
ídpoöt
 = &
htc_h™dÀ
->ídpoöt[
ïid
];

459 i‡(
ídpoöt
->
ï_ˇŒbacks
.
rx
)

460 
ídpoöt
->
ï_ˇŒbacks
.
	`rx
”ndpoöt->ï_ˇŒbacks.
¥iv
,

461 
skb
, 
ïid
);

463 
	}
}

465 
htc_èrgë
 *
	$©h9k_htc_hw_Æloc
(*
hif_h™dÀ
,

466 
©h9k_htc_hif
 *
hif
,

467 
devi˚
 *
dev
)

469 
htc_ídpoöt
 *
ídpoöt
;

470 
htc_èrgë
 *
èrgë
;

472 
èrgë
 = 
	`kzÆloc
((
htc_èrgë
), 
GFP_KERNEL
);

473 i‡(!
èrgë
)

474  
NULL
;

476 
	`öô_com∂ëi⁄
(&
èrgë
->
èrgë_waô
);

477 
	`öô_com∂ëi⁄
(&
èrgë
->
cmd_waô
);

479 
èrgë
->
hif
 = hif;

480 
èrgë
->
hif_dev
 = 
hif_h™dÀ
;

481 
èrgë
->
dev
 = dev;

484 
ídpoöt
 = &
èrgë
->ídpoöt[
ENDPOINT0
];

485 
ídpoöt
->
ul_pùeid
 = 
hif
->
c⁄åﬁ_ul_pùe
;

486 
ídpoöt
->
dl_pùeid
 = 
hif
->
c⁄åﬁ_dl_pùe
;

488 
	`©omic_£t
(&
èrgë
->
tgt_ªady
, 0);

490  
èrgë
;

491 
	}
}

493 
	$©h9k_htc_hw_‰ì
(
htc_èrgë
 *
htc
)

495 
	`k‰ì
(
htc
);

496 
	}
}

498 
	$©h9k_htc_hw_öô
(
htc_èrgë
 *
èrgë
,

499 
devi˚
 *
dev
, 
u16
 
devid
,

500 *
¥odu˘
, 
u32
 
drv_öfo
)

502 i‡(
	`©h9k_htc_¥obe_devi˚
(
èrgë
, 
dev
, 
devid
, 
¥odu˘
, 
drv_öfo
)) {

503 
	`¥_îr
("FailedÅo initializeÅhe device\n");

504  -
ENODEV
;

508 
	}
}

510 
	$©h9k_htc_hw_deöô
(
htc_èrgë
 *
èrgë
, 
boﬁ
 
hŸ_u≈lug
)

512 i‡(
èrgë
)

513 
	`©h9k_htc_disc⁄√˘_devi˚
(
èrgë
, 
hŸ_u≈lug
);

514 
	}
}

	@htc_hst.h

17 #i‚de‡
HTC_HST_H


18 
	#HTC_HST_H


	)

20 
	g©h9k_htc_¥iv
;

21 
	ghtc_èrgë
;

22 
	g©h9k_htc_tx_˘l
;

24 
	e©h9k_hif_å™•‹ts
 {

25 
	mATH9K_HIF_USB
,

28 
	s©h9k_htc_hif
 {

29 
li°_hód
 
	mli°
;

30 c⁄° 
©h9k_hif_å™•‹ts
 
	må™•‹t
;

31 c⁄° *
	m«me
;

33 
u8
 
	mc⁄åﬁ_dl_pùe
;

34 
u8
 
	mc⁄åﬁ_ul_pùe
;

36 (*
	m°¨t
Ë(*
	mhif_h™dÀ
);

37 (*
	m°›
Ë(*
	mhif_h™dÀ
);

38 (*
	m°a_døö
Ë(*
	mhif_h™dÀ
, 
u8
 
	midx
);

39 (*
	m£nd
Ë(*
	mhif_h™dÀ
, 
u8
 
	mpùe
, 
sk_buff
 *
	mbuf
);

42 
	ehtc_ídpoöt_id
 {

43 
	mENDPOINT_UNUSED
 = -1,

44 
	mENDPOINT0
 = 0,

45 
	mENDPOINT1
 = 1,

46 
	mENDPOINT2
 = 2,

47 
	mENDPOINT3
 = 3,

48 
	mENDPOINT4
 = 4,

49 
	mENDPOINT5
 = 5,

50 
	mENDPOINT6
 = 6,

51 
	mENDPOINT7
 = 7,

52 
	mENDPOINT8
 = 8,

53 
	mENDPOINT_MAX
 = 22

57 
	#HTC_FLAGS_RECV_TRAILER
 (1 << 1)

	)

59 
	shtc_‰ame_hdr
 {

60 
u8
 
	mídpoöt_id
;

61 
u8
 
	mÊags
;

62 
__be16
 
	m∑ylﬂd_Àn
;

63 
u8
 
	mc⁄åﬁ
[4];

64 } 
	g__∑cked
;

66 
	shtc_ªady_msg
 {

67 
__be16
 
	mmesßge_id
;

68 
__be16
 
	m¸edôs
;

69 
__be16
 
	m¸edô_size
;

70 
u8
 
	mmax_ídpoöts
;

71 
u8
 
	m∑d
;

72 } 
	g__∑cked
;

74 
	shtc_c⁄fig_pùe_msg
 {

75 
__be16
 
	mmesßge_id
;

76 
u8
 
	mpùe_id
;

77 
u8
 
	m¸edôs
;

78 } 
	g__∑cked
;

80 
	shtc_∑nic_bad_vaddr
 {

81 
__be32
 
	m∑âîn
;

82 
__be32
 
	mexcˇu£
;

83 
__be32
 
	mpc
;

84 
__be32
 
	mbadvaddr
;

85 } 
	g__∑cked
;

87 
	shtc_∑nic_bad_ïid
 {

88 
__be32
 
	m∑âîn
;

89 
__be32
 
	mïid
;

90 } 
	g__∑cked
;

92 
	shtc_ï_ˇŒbacks
 {

93 *
	m¥iv
;

94 (*
	mtx
Ë(*, 
	msk_buff
 *, 
	mhtc_ídpoöt_id
, 
boﬁ
 
	mtxok
);

95 (*
	mrx
Ë(*, 
	msk_buff
 *, 
	mhtc_ídpoöt_id
);

98 
	shtc_ídpoöt
 {

99 
u16
 
	m£rvi˚_id
;

101 
htc_ï_ˇŒbacks
 
	mï_ˇŒbacks
;

102 
u32
 
	mmax_txqdïth
;

103 
	mmax_msgÀn
;

105 
u8
 
	mul_pùeid
;

106 
u8
 
	mdl_pùeid
;

109 
	#HTC_MAX_CONTROL_MESSAGE_LENGTH
 255

	)

110 
	#HTC_CONTROL_BUFFER_SIZE
 \

111 (
HTC_MAX_CONTROL_MESSAGE_LENGTH
 + (
htc_‰ame_hdr
))

	)

113 
	#HTC_OP_START_WAIT
 
	`BIT
(0)

	)

114 
	#HTC_OP_CONFIG_PIPE_CREDITS
 
	`BIT
(1)

	)

116 
	shtc_èrgë
 {

117 *
	mhif_dev
;

118 
©h9k_htc_¥iv
 *
	mdrv_¥iv
;

119 
devi˚
 *
	mdev
;

120 
©h9k_htc_hif
 *
	mhif
;

121 
htc_ídpoöt
 
	mídpoöt
[
ENDPOINT_MAX
];

122 
com∂ëi⁄
 
	mèrgë_waô
;

123 
com∂ëi⁄
 
	mcmd_waô
;

124 
li°_hód
 
	mli°
;

125 
htc_ídpoöt_id
 
	mc⁄n_r•_ïid
;

126 
u16
 
	m¸edôs
;

127 
u16
 
	m¸edô_size
;

128 
u8
 
	mhtc_Êags
;

129 
©omic_t
 
	mtgt_ªady
;

132 
	ehtc_msg_id
 {

133 
	mHTC_MSG_READY_ID
 = 1,

134 
	mHTC_MSG_CONNECT_SERVICE_ID
,

135 
	mHTC_MSG_CONNECT_SERVICE_RESPONSE_ID
,

136 
	mHTC_MSG_SETUP_COMPLETE_ID
,

137 
	mHTC_MSG_CONFIG_PIPE_ID
,

138 
	mHTC_MSG_CONFIG_PIPE_RESPONSE_ID
,

141 
	shtc_£rvi˚_c⁄ƒeq
 {

142 
u16
 
	m£rvi˚_id
;

143 
u16
 
	mc⁄_Êags
;

144 
u32
 
	mmax_£nd_qdïth
;

145 
htc_ï_ˇŒbacks
 
	mï_ˇŒbacks
;

150 
	ehtc_£rvi˚_group_ids
{

151 
	mRSVD_SERVICE_GROUP
 = 0,

152 
	mWMI_SERVICE_GROUP
 = 1,

154 
	mHTC_SERVICE_GROUP_LAST
 = 255

157 
	#MAKE_SERVICE_ID
(
group
, 
ödex
) \

158 ()((()
group
 << 8Ë| ()(
ödex
))

	)

161 
	#HTC_CTRL_RSVD_SVC
 
	`MAKE_SERVICE_ID
(
RSVD_SERVICE_GROUP
, 1)

	)

162 
	#HTC_LOOPBACK_RSVD_SVC
 
	`MAKE_SERVICE_ID
(
RSVD_SERVICE_GROUP
, 2)

	)

164 
	#WMI_CONTROL_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 0)

	)

165 
	#WMI_BEACON_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 1)

	)

166 
	#WMI_CAB_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 2)

	)

167 
	#WMI_UAPSD_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 3)

	)

168 
	#WMI_MGMT_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 4)

	)

169 
	#WMI_DATA_VO_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 5)

	)

170 
	#WMI_DATA_VI_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 6)

	)

171 
	#WMI_DATA_BE_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 7)

	)

172 
	#WMI_DATA_BK_SVC
 
	`MAKE_SERVICE_ID
(
WMI_SERVICE_GROUP
, 8)

	)

174 
	shtc_c⁄n_svc_msg
 {

175 
__be16
 
	mmsg_id
;

176 
__be16
 
	m£rvi˚_id
;

177 
__be16
 
	mc⁄_Êags
;

178 
u8
 
	mdl_pùeid
;

179 
u8
 
	mul_pùeid
;

180 
u8
 
	msvc_mëa_Àn
;

181 
u8
 
	m∑d
;

182 } 
	g__∑cked
;

185 
	#HTC_SERVICE_SUCCESS
 0

	)

186 
	#HTC_SERVICE_NOT_FOUND
 1

	)

187 
	#HTC_SERVICE_FAILED
 2

	)

188 
	#HTC_SERVICE_NO_RESOURCES
 3

	)

189 
	#HTC_SERVICE_NO_MORE_EP
 4

	)

191 
	shtc_c⁄n_svc_r•msg
 {

192 
__be16
 
	mmsg_id
;

193 
__be16
 
	m£rvi˚_id
;

194 
u8
 
	m°©us
;

195 
u8
 
	mídpoöt_id
;

196 
__be16
 
	mmax_msg_Àn
;

197 
u8
 
	msvc_mëa_Àn
;

198 
u8
 
	m∑d
;

199 } 
	g__∑cked
;

201 
	shtc_comp_msg
 {

202 
__be16
 
	mmsg_id
;

203 } 
	g__∑cked
;

205 
htc_öô
(
htc_èrgë
 *
èrgë
);

206 
htc_c⁄√˘_£rvi˚
(
htc_èrgë
 *
èrgë
,

207 
htc_£rvi˚_c⁄ƒeq
 *
£rvi˚_c⁄ƒeq
,

208 
htc_ídpoöt_id
 *
c⁄n_r•_eid
);

209 
htc_£nd
(
htc_èrgë
 *
èrgë
, 
sk_buff
 *
skb
);

210 
htc_£nd_ïid
(
htc_èrgë
 *
èrgë
, 
sk_buff
 *
skb
,

211 
htc_ídpoöt_id
 
ïid
);

212 
htc_°›
(
htc_èrgë
 *
èrgë
);

213 
htc_°¨t
(
htc_èrgë
 *
èrgë
);

214 
htc_°a_døö
(
htc_èrgë
 *
èrgë
, 
u8
 
idx
);

216 
©h9k_htc_rx_msg
(
htc_èrgë
 *
htc_h™dÀ
,

217 
sk_buff
 *
skb
, 
u32
 
Àn
, 
u8
 
pùe_id
);

218 
©h9k_htc_txcom∂ëi⁄_cb
(
htc_èrgë
 *
htc_h™dÀ
,

219 
sk_buff
 *
skb
, 
boﬁ
 
txok
);

221 
htc_èrgë
 *
©h9k_htc_hw_Æloc
(*
hif_h™dÀ
,

222 
©h9k_htc_hif
 *
hif
,

223 
devi˚
 *
dev
);

224 
©h9k_htc_hw_‰ì
(
htc_èrgë
 *
htc
);

225 
©h9k_htc_hw_öô
(
htc_èrgë
 *
èrgë
,

226 
devi˚
 *
dev
, 
u16
 
devid
, *
¥odu˘
,

227 
u32
 
drv_öfo
);

228 
©h9k_htc_hw_deöô
(
htc_èrgë
 *
èrgë
, 
boﬁ
 
hŸ_u≈lug
);

	@hw-ops.h

17 #i‚de‡
ATH9K_HW_OPS_H


18 
	#ATH9K_HW_OPS_H


	)

20 
	~"hw.h
"

24 
ölöe
 
	$©h9k_hw_c⁄figpcùowîßve
(
©h_hw
 *
ah
,

25 
boﬁ
 
powî_off
)

27 i‡(!
ah
->
a•m_íabÀd
)

30 
	`©h9k_hw_›s
(
ah
)->
	`c⁄fig_pci_powîßve
◊h, 
powî_off
);

31 
	}
}

33 
ölöe
 
	$©h9k_hw_rxía
(
©h_hw
 *
ah
)

35 
	`©h9k_hw_›s
(
ah
)->
	`rx_íabÀ
(ah);

36 
	}
}

38 
ölöe
 
	$©h9k_hw_£t_desc_lök
(
©h_hw
 *
ah
, *
ds
,

39 
u32
 
lök
)

41 
	`©h9k_hw_›s
(
ah
)->
	`£t_desc_lök
(
ds
, 
lök
);

42 
	}
}

44 
ölöe
 
	$©h9k_hw_ˇlibøã
(
©h_hw
 *
ah
,

45 
©h9k_ch™√l
 *
ch™
,

46 
u8
 
rxchaömask
, 
boﬁ
 
l⁄gˇl
)

48  
	`©h9k_hw_›s
(
ah
)->
	`ˇlibøã
◊h, 
ch™
, 
rxchaömask
, 
l⁄gˇl
);

49 
	}
}

51 
ölöe
 
boﬁ
 
	$©h9k_hw_gëi§
(
©h_hw
 *
ah
, 
©h9k_öt
 *
masked
,

52 
u32
 *
sync_ˇu£_p
)

54  
	`©h9k_hw_›s
(
ah
)->
	`gë_i§
◊h, 
masked
, 
sync_ˇu£_p
);

55 
	}
}

57 
ölöe
 
	$©h9k_hw_£t_txdesc
(
©h_hw
 *
ah
, *
ds
,

58 
©h_tx_öfo
 *
i
)

60  
	`©h9k_hw_›s
(
ah
)->
	`£t_txdesc
◊h, 
ds
, 
i
);

61 
	}
}

63 
ölöe
 
	$©h9k_hw_tx¥ocdesc
(
©h_hw
 *
ah
, *
ds
,

64 
©h_tx_°©us
 *
ts
)

66  
	`©h9k_hw_›s
(
ah
)->
	`¥oc_txdesc
◊h, 
ds
, 
ts
);

67 
	}
}

69 
ölöe
 
	$©h9k_hw_gë_duøti⁄
(
©h_hw
 *
ah
, c⁄° *
ds
,

70 
ödex
)

72  
	`©h9k_hw_›s
(
ah
)->
	`gë_duøti⁄
◊h, 
ds
, 
ödex
);

73 
	}
}

75 
ölöe
 
	$©h9k_hw_™tdiv_comb_c⁄f_gë
(
©h_hw
 *
ah
,

76 
©h_hw_™tcomb_c⁄f
 *
™tc⁄f
)

78 
	`©h9k_hw_›s
(
ah
)->
	`™tdiv_comb_c⁄f_gë
◊h, 
™tc⁄f
);

79 
	}
}

81 
ölöe
 
	$©h9k_hw_™tdiv_comb_c⁄f_£t
(
©h_hw
 *
ah
,

82 
©h_hw_™tcomb_c⁄f
 *
™tc⁄f
)

84 
	`©h9k_hw_›s
(
ah
)->
	`™tdiv_comb_c⁄f_£t
◊h, 
™tc⁄f
);

85 
	}
}

87 
ölöe
 
	$©h9k_hw_tx99_°¨t
(
©h_hw
 *
ah
, 
u32
 
qnum
)

89 
	`©h9k_hw_›s
(
ah
)->
	`tx99_°¨t
◊h, 
qnum
);

90 
	}
}

92 
ölöe
 
	$©h9k_hw_tx99_°›
(
©h_hw
 *
ah
)

94 
	`©h9k_hw_›s
(
ah
)->
	`tx99_°›
(ah);

95 
	}
}

97 
ölöe
 
	$©h9k_hw_tx99_£t_txpowî
(
©h_hw
 *
ah
, 
u8
 
powî
)

99 i‡(
	`©h9k_hw_›s
(
ah
)->
tx99_£t_txpowî
)

100 
	`©h9k_hw_›s
(
ah
)->
	`tx99_£t_txpowî
◊h, 
powî
);

101 
	}
}

103 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


105 
ölöe
 
	$©h9k_hw_£t_bt_™t_divîsôy
(
©h_hw
 *
ah
, 
boﬁ
 
íabÀ
)

107 i‡(
	`©h9k_hw_›s
(
ah
)->
£t_bt_™t_divîsôy
)

108 
	`©h9k_hw_›s
(
ah
)->
	`£t_bt_™t_divîsôy
◊h, 
íabÀ
);

109 
	}
}

111 
ölöe
 
boﬁ
 
	$©h9k_hw_is_aic_íabÀd
(
©h_hw
 *
ah
)

113 i‡(
	`©h9k_hw_¥iv©e_›s
(
ah
)->
is_aic_íabÀd
)

114  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`is_aic_íabÀd
(ah);

116  
Ál£
;

117 
	}
}

123 
ölöe
 
	$©h9k_hw_öô_h™g_checks
(
©h_hw
 *
ah
)

125 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`öô_h™g_checks
(ah);

126 
	}
}

128 
ölöe
 
boﬁ
 
	$©h9k_hw_dëe˘_mac_h™g
(
©h_hw
 *
ah
)

130  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`dëe˘_mac_h™g
(ah);

131 
	}
}

133 
ölöe
 
boﬁ
 
	$©h9k_hw_dëe˘_bb_h™g
(
©h_hw
 *
ah
)

135  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`dëe˘_bb_h™g
(ah);

136 
	}
}

140 
ölöe
 
	$©h9k_hw_rf_£t_‰eq
(
©h_hw
 *
ah
,

141 
©h9k_ch™√l
 *
ch™
)

143  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`rf_£t_‰eq
◊h, 
ch™
);

144 
	}
}

146 
ölöe
 
	$©h9k_hw_•ur_môig©e_‰eq
(
©h_hw
 *
ah
,

147 
©h9k_ch™√l
 *
ch™
)

149 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`•ur_môig©e_‰eq
◊h, 
ch™
);

150 
	}
}

152 
ölöe
 
boﬁ
 
	$©h9k_hw_£t_rf_ªgs
(
©h_hw
 *
ah
,

153 
©h9k_ch™√l
 *
ch™
,

154 
u16
 
modesIndex
)

156 i‡(!
	`©h9k_hw_¥iv©e_›s
(
ah
)->
£t_rf_ªgs
)

157  
åue
;

159  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`£t_rf_ªgs
◊h, 
ch™
, 
modesIndex
);

160 
	}
}

162 
ölöe
 
	$©h9k_hw_öô_bb
(
©h_hw
 *
ah
,

163 
©h9k_ch™√l
 *
ch™
)

165  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`öô_bb
◊h, 
ch™
);

166 
	}
}

168 
ölöe
 
	$©h9k_hw_£t_ch™√l_ªgs
(
©h_hw
 *
ah
,

169 
©h9k_ch™√l
 *
ch™
)

171  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`£t_ch™√l_ªgs
◊h, 
ch™
);

172 
	}
}

174 
ölöe
 
	$©h9k_hw_¥o˚ss_öi
(
©h_hw
 *
ah
,

175 
©h9k_ch™√l
 *
ch™
)

177  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`¥o˚ss_öi
◊h, 
ch™
);

178 
	}
}

180 
ölöe
 
	$©h9k_ﬁc_öô
(
©h_hw
 *
ah
)

182 i‡(!
	`©h9k_hw_¥iv©e_›s
(
ah
)->
ﬁc_öô
)

185  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`ﬁc_öô
(ah);

186 
	}
}

188 
ölöe
 
	$©h9k_hw_£t_rfmode
(
©h_hw
 *
ah
,

189 
©h9k_ch™√l
 *
ch™
)

191  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`£t_rfmode
◊h, 
ch™
);

192 
	}
}

194 
ölöe
 
	$©h9k_hw_m¨k_phy_öa˘ive
(
©h_hw
 *
ah
)

196  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`m¨k_phy_öa˘ive
(ah);

197 
	}
}

199 
ölöe
 
	$©h9k_hw_£t_dñè_¶›e
(
©h_hw
 *
ah
,

200 
©h9k_ch™√l
 *
ch™
)

202  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`£t_dñè_¶›e
◊h, 
ch™
);

203 
	}
}

205 
ölöe
 
boﬁ
 
	$©h9k_hw_rfbus_ªq
(
©h_hw
 *
ah
)

207  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`rfbus_ªq
(ah);

208 
	}
}

210 
ölöe
 
	$©h9k_hw_rfbus_d⁄e
(
©h_hw
 *
ah
)

212  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`rfbus_d⁄e
(ah);

213 
	}
}

215 
ölöe
 
	$©h9k_hw_ª°‹e_chaömask
(
©h_hw
 *
ah
)

217 i‡(!
	`©h9k_hw_¥iv©e_›s
(
ah
)->
ª°‹e_chaömask
)

220  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`ª°‹e_chaömask
(ah);

221 
	}
}

223 
ölöe
 
boﬁ
 
	$©h9k_hw_™i_c⁄åﬁ
(
©h_hw
 *
ah
,

224 
©h9k_™i_cmd
 
cmd
, 
∑øm
)

226  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`™i_c⁄åﬁ
◊h, 
cmd
, 
∑øm
);

227 
	}
}

229 
ölöe
 
	$©h9k_hw_do_gënf
(
©h_hw
 *
ah
,

230 
öt16_t
 
nÁºay
[
NUM_NF_READINGS
])

232 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`do_gënf
◊h, 
nÁºay
);

233 
	}
}

235 
ölöe
 
boﬁ
 
	$©h9k_hw_öô_ˇl
(
©h_hw
 *
ah
,

236 
©h9k_ch™√l
 *
ch™
)

238  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`öô_ˇl
◊h, 
ch™
);

239 
	}
}

241 
ölöe
 
	$©h9k_hw_£tup_ˇlibøti⁄
(
©h_hw
 *
ah
,

242 
©h9k_ˇl_li°
 *
cuºCÆ
)

244 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`£tup_ˇlibøti⁄
◊h, 
cuºCÆ
);

245 
	}
}

247 
ölöe
 
	$©h9k_hw_Á°_ch™_ch™ge
(
©h_hw
 *
ah
,

248 
©h9k_ch™√l
 *
ch™
,

249 
u8
 *
öi_ªlﬂded
)

251  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`Á°_ch™_ch™ge
◊h, 
ch™
,

252 
öi_ªlﬂded
);

253 
	}
}

255 
ölöe
 
	$©h9k_hw_£t_ød¨_∑øms
(
©h_hw
 *
ah
)

257 i‡(!
	`©h9k_hw_¥iv©e_›s
(
ah
)->
£t_ød¨_∑øms
)

260 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`£t_ød¨_∑øms
◊h, &ah->
ød¨_c⁄f
);

261 
	}
}

263 
ölöe
 
	$©h9k_hw_öô_ˇl_£âögs
(
©h_hw
 *
ah
)

265 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`öô_ˇl_£âögs
(ah);

266 
	}
}

268 
ölöe
 
u32
 
	$©h9k_hw_compuã_∂l_c⁄åﬁ
(
©h_hw
 *
ah
,

269 
©h9k_ch™√l
 *
ch™
)

271  
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`compuã_∂l_c⁄åﬁ
◊h, 
ch™
);

272 
	}
}

274 
ölöe
 
	$©h9k_hw_öô_mode_gaö_ªgs
(
©h_hw
 *
ah
)

276 i‡(!
	`©h9k_hw_¥iv©e_›s
(
ah
)->
öô_mode_gaö_ªgs
)

279 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`öô_mode_gaö_ªgs
(ah);

280 
	}
}

282 
ölöe
 
	$©h9k_hw_™i_ˇche_öi_ªgs
(
©h_hw
 *
ah
)

284 i‡(!
	`©h9k_hw_¥iv©e_›s
(
ah
)->
™i_ˇche_öi_ªgs
)

287 
	`©h9k_hw_¥iv©e_›s
(
ah
)->
	`™i_ˇche_öi_ªgs
(ah);

288 
	}
}

	@hw.c

17 
	~<löux/io.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/time.h
>

21 
	~<löux/bô›s.h
>

22 
	~<löux/ëhîdevi˚.h
>

23 
	~<löux/gpio.h
>

24 
	~<asm/u«lig√d.h
>

26 
	~"hw.h
"

27 
	~"hw-›s.h
"

28 
	~"¨9003_mac.h
"

29 
	~"¨9003_mci.h
"

30 
	~"¨9003_phy.h
"

31 
	~"©h9k.h
"

33 
boﬁ
 
©h9k_hw_£t_ª£t_ªg
(
©h_hw
 *
ah
, 
u32
 
ty≥
);

35 
MODULE_AUTHOR
("Atheros Communications");

36 
MODULE_DESCRIPTION
("Support for Atheros 802.11n wireless LAN cards.");

37 
MODULE_SUPPORTED_DEVICE
("Atheros 802.11n WLAN cards");

38 
MODULE_LICENSE
("Dual BSD/GPL");

40 
	$©h9k_hw_£t_˛ockøã
(
©h_hw
 *
ah
)

42 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

43 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

44 
˛ockøã
;

47 i‡(
	`AR_SREV_9287
(
ah
Ë&& 
	`AR_SREV_9287_13_OR_LATER
(ah))

48 
˛ockøã
 = 117;

49 i‡(!
ch™
)

50 
˛ockøã
 = 
ATH9K_CLOCK_RATE_CCK
;

51 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

52 
˛ockøã
 = 
ATH9K_CLOCK_RATE_2GHZ_OFDM
;

53 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_FASTCLOCK
)

54 
˛ockøã
 = 
ATH9K_CLOCK_FAST_RATE_5GHZ_OFDM
;

56 
˛ockøã
 = 
ATH9K_CLOCK_RATE_5GHZ_OFDM
;

58 i‡(
ch™
) {

59 i‡(
	`IS_CHAN_HT40
(
ch™
))

60 
˛ockøã
 *= 2;

61 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
))

62 
˛ockøã
 /= 2;

63 i‡(
	`IS_CHAN_QUARTER_RATE
(
ch™
))

64 
˛ockøã
 /= 4;

67 
comm⁄
->
˛ockøã
 = clockrate;

68 
	}
}

70 
u32
 
	$©h9k_hw_mac_to_˛ks
(
©h_hw
 *
ah
, 
u32
 
u£cs
)

72 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

74  
u£cs
 * 
comm⁄
->
˛ockøã
;

75 
	}
}

77 
boﬁ
 
	$©h9k_hw_waô
(
©h_hw
 *
ah
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
, u32 
timeout
)

79 
i
;

81 
	`BUG_ON
(
timeout
 < 
AH_TIME_QUANTUM
);

83 
i
 = 0; i < (
timeout
 / 
AH_TIME_QUANTUM
); i++) {

84 i‡((
	`REG_READ
(
ah
, 
ªg
Ë& 
mask
Ë=
vÆ
)

85  
åue
;

87 
	`udñay
(
AH_TIME_QUANTUM
);

90 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
ANY
,

92 
timeout
, 
ªg
, 
	`REG_READ
(
ah
,Ñeg), 
mask
, 
vÆ
);

94  
Ál£
;

95 
	}
}

96 
EXPORT_SYMBOL
(
©h9k_hw_waô
);

98 
	$©h9k_hw_sy¡h_dñay
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

99 
hw_dñay
)

101 
hw_dñay
 /= 10;

103 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
))

104 
hw_dñay
 *= 2;

105 i‡(
	`IS_CHAN_QUARTER_RATE
(
ch™
))

106 
hw_dñay
 *= 4;

108 
	`udñay
(
hw_dñay
 + 
BASE_ACTIVATE_DELAY
);

109 
	}
}

111 
	$©h9k_hw_wrôe_¨øy
(
©h_hw
 *
ah
, c⁄° 
¨5416IniAºay
 *
¨øy
,

112 
cﬁumn
, *
wrôe˙t
)

114 
r
;

116 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

117 
r
 = 0;Ñ < 
¨øy
->
ü_rows
;Ñ++) {

118 
	`REG_WRITE
(
ah
, 
	`INI_RA
(
¨øy
, 
r
, 0),

119 
	`INI_RA
(
¨øy
, 
r
, 
cﬁumn
));

120 
	`DO_DELAY
(*
wrôe˙t
);

122 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

123 
	}
}

125 
	$©h9k_hw_ªad_¨øy
(
©h_hw
 *
ah
, 
u32
 
¨øy
[][2], 
size
)

127 
u32
 *
tmp_ªg_li°
, *
tmp_d©a
;

128 
i
;

130 
tmp_ªg_li°
 = 
	`kmÆloc
(
size
 * (
u32
), 
GFP_KERNEL
);

131 i‡(!
tmp_ªg_li°
) {

132 
	`dev_îr
(
ah
->
dev
, "%s:Åmp_ªg_li°:áŒo¯fûed\n", 
__func__
);

136 
tmp_d©a
 = 
	`kmÆloc
(
size
 * (
u32
), 
GFP_KERNEL
);

137 i‡(!
tmp_d©a
) {

138 
	`dev_îr
(
ah
->
dev
, "%†tmp_d©a:áŒo¯fûed\n", 
__func__
);

139 
îr‹_tmp_d©a
;

142 
i
 = 0; i < 
size
; i++)

143 
tmp_ªg_li°
[
i
] = 
¨øy
[i][0];

145 
	`REG_READ_MULTI
(
ah
, 
tmp_ªg_li°
, 
tmp_d©a
, 
size
);

147 
i
 = 0; i < 
size
; i++)

148 
¨øy
[
i
][1] = 
tmp_d©a
[i];

150 
	`k‰ì
(
tmp_d©a
);

151 
îr‹_tmp_d©a
:

152 
	`k‰ì
(
tmp_ªg_li°
);

153 
	}
}

155 
u32
 
	$©h9k_hw_ªvî£_bôs
(
u32
 
vÆ
, u32 
n
)

157 
u32
 
ªtvÆ
;

158 
i
;

160 
i
 = 0, 
ªtvÆ
 = 0; i < 
n
; i++) {

161 
ªtvÆ
 = (ªtvÆ << 1Ë| (
vÆ
 & 1);

162 
vÆ
 >>= 1;

164  
ªtvÆ
;

165 
	}
}

167 
u16
 
	$©h9k_hw_compuãtxtime
(
©h_hw
 *
ah
,

168 
u8
 
phy
, 
kbps
,

169 
u32
 
‰ameLí
, 
u16
 
øãix
,

170 
boﬁ
 
sh‹tPªambÀ
)

172 
u32
 
bôsPîSymbﬁ
, 
numBôs
, 
numSymbﬁs
, 
phyTime
, 
txTime
;

174 i‡(
kbps
 == 0)

177 
phy
) {

178 
WLAN_RC_PHY_CCK
:

179 
phyTime
 = 
CCK_PREAMBLE_BITS
 + 
CCK_PLCP_BITS
;

180 i‡(
sh‹tPªambÀ
)

181 
phyTime
 >>= 1;

182 
numBôs
 = 
‰ameLí
 << 3;

183 
txTime
 = 
CCK_SIFS_TIME
 + 
phyTime
 + ((
numBôs
 * 1000Ë/ 
kbps
);

185 
WLAN_RC_PHY_OFDM
:

186 i‡(
ah
->
curch™
 && 
	`IS_CHAN_QUARTER_RATE
(ah->curchan)) {

187 
bôsPîSymbﬁ
 = (
kbps
 * 
OFDM_SYMBOL_TIME_QUARTER
) / 1000;

188 
numBôs
 = 
OFDM_PLCP_BITS
 + (
‰ameLí
 << 3);

189 
numSymbﬁs
 = 
	`DIV_ROUND_UP
(
numBôs
, 
bôsPîSymbﬁ
);

190 
txTime
 = 
OFDM_SIFS_TIME_QUARTER


191 + 
OFDM_PREAMBLE_TIME_QUARTER


192 + (
numSymbﬁs
 * 
OFDM_SYMBOL_TIME_QUARTER
);

193 } i‡(
ah
->
curch™
 &&

194 
	`IS_CHAN_HALF_RATE
(
ah
->
curch™
)) {

195 
bôsPîSymbﬁ
 = (
kbps
 * 
OFDM_SYMBOL_TIME_HALF
) / 1000;

196 
numBôs
 = 
OFDM_PLCP_BITS
 + (
‰ameLí
 << 3);

197 
numSymbﬁs
 = 
	`DIV_ROUND_UP
(
numBôs
, 
bôsPîSymbﬁ
);

198 
txTime
 = 
OFDM_SIFS_TIME_HALF
 +

199 
OFDM_PREAMBLE_TIME_HALF


200 + (
numSymbﬁs
 * 
OFDM_SYMBOL_TIME_HALF
);

202 
bôsPîSymbﬁ
 = (
kbps
 * 
OFDM_SYMBOL_TIME
) / 1000;

203 
numBôs
 = 
OFDM_PLCP_BITS
 + (
‰ameLí
 << 3);

204 
numSymbﬁs
 = 
	`DIV_ROUND_UP
(
numBôs
, 
bôsPîSymbﬁ
);

205 
txTime
 = 
OFDM_SIFS_TIME
 + 
OFDM_PREAMBLE_TIME


206 + (
numSymbﬁs
 * 
OFDM_SYMBOL_TIME
);

210 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

211 "Unknow¿phy %u (øã ix %u)\n", 
phy
, 
øãix
);

212 
txTime
 = 0;

216  
txTime
;

217 
	}
}

218 
EXPORT_SYMBOL
(
©h9k_hw_compuãtxtime
);

220 
	$©h9k_hw_gë_ch™√l_˚¡îs
(
©h_hw
 *
ah
,

221 
©h9k_ch™√l
 *
ch™
,

222 
ch™_˚¡îs
 *
˚¡îs
)

224 
öt8_t
 
extoff
;

226 i‡(!
	`IS_CHAN_HT40
(
ch™
)) {

227 
˚¡îs
->
˘l_˚¡î
 = cíãrs->
ext_˚¡î
 =

228 
˚¡îs
->
sy¡h_˚¡î
 = 
ch™
->
ch™√l
;

232 i‡(
	`IS_CHAN_HT40PLUS
(
ch™
)) {

233 
˚¡îs
->
sy¡h_˚¡î
 =

234 
ch™
->
ch™√l
 + 
HT40_CHANNEL_CENTER_SHIFT
;

235 
extoff
 = 1;

237 
˚¡îs
->
sy¡h_˚¡î
 =

238 
ch™
->
ch™√l
 - 
HT40_CHANNEL_CENTER_SHIFT
;

239 
extoff
 = -1;

242 
˚¡îs
->
˘l_˚¡î
 =

243 
˚¡îs
->
sy¡h_˚¡î
 - (
extoff
 * 
HT40_CHANNEL_CENTER_SHIFT
);

245 
˚¡îs
->
ext_˚¡î
 =

246 
˚¡îs
->
sy¡h_˚¡î
 + (
extoff
 * 
HT40_CHANNEL_CENTER_SHIFT
);

247 
	}
}

253 
	$©h9k_hw_ªad_ªvisi⁄s
(
©h_hw
 *
ah
)

255 
u32
 
vÆ
;

257 i‡(
ah
->
gë_mac_ªvisi⁄
)

258 
ah
->
hw_vîsi⁄
.
macRev
 =áh->
	`gë_mac_ªvisi⁄
();

260 
ah
->
hw_vîsi⁄
.
devid
) {

261 
AR5416_AR9100_DEVID
:

262 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
AR_SREV_VERSION_9100
;

264 
AR9300_DEVID_AR9330
:

265 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
AR_SREV_VERSION_9330
;

266 i‡(!
ah
->
gë_mac_ªvisi⁄
) {

267 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_SREV
);

268 
ah
->
hw_vîsi⁄
.
macRev
 = 
	`MS
(
vÆ
, 
AR_SREV_REVISION2
);

271 
AR9300_DEVID_AR9340
:

272 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
AR_SREV_VERSION_9340
;

274 
AR9300_DEVID_QCA955X
:

275 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
AR_SREV_VERSION_9550
;

277 
AR9300_DEVID_AR953X
:

278 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
AR_SREV_VERSION_9531
;

280 
AR9300_DEVID_QCA956X
:

281 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
AR_SREV_VERSION_9561
;

285 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_SREV
Ë& 
AR_SREV_ID
;

287 i‡(
vÆ
 == 0xFF) {

288 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_SREV
);

289 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 =

290 (
vÆ
 & 
AR_SREV_VERSION2
Ë>> 
AR_SREV_TYPE2_S
;

291 
ah
->
hw_vîsi⁄
.
macRev
 = 
	`MS
(
vÆ
, 
AR_SREV_REVISION2
);

293 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

294 
ah
->
is_pcõx¥ess
 = 
åue
;

296 
ah
->
is_pcõx¥ess
 = (
vÆ
 &

297 
AR_SREV_TYPE2_HOST_MODE
) ? 0 : 1;

299 i‡(!
	`AR_SREV_9100
(
ah
))

300 
ah
->
hw_vîsi⁄
.
macVîsi⁄
 = 
	`MS
(
vÆ
, 
AR_SREV_VERSION
);

302 
ah
->
hw_vîsi⁄
.
macRev
 = 
vÆ
 & 
AR_SREV_REVISION
;

304 i‡(
ah
->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_5416_PCIE
)

305 
ah
->
is_pcõx¥ess
 = 
åue
;

307 
	}
}

313 
	$©h9k_hw_dißbÀpcõ
(
©h_hw
 *
ah
)

315 i‡(!
	`AR_SREV_5416
(
ah
))

318 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x9248fc00);

319 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x24924924);

320 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x28000029);

321 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x57160824);

322 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x25980579);

323 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x00000000);

324 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x1aaabe40);

325 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0xbe105554);

326 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES
, 0x000e1007);

328 
	`REG_WRITE
(
ah
, 
AR_PCIE_SERDES2
, 0x00000000);

329 
	}
}

332 
boﬁ
 
	$©h9k_hw_chù_ã°
(
©h_hw
 *
ah
)

334 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

335 
u32
 
ªgAddr
[2] = { 
AR_STA_ID0
 };

336 
u32
 
ªgHﬁd
[2];

337 c⁄° 
u32
 
∑âînD©a
[4] = {

340 
i
, 
j
, 
lo›_max
;

342 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

343 
lo›_max
 = 2;

344 
ªgAddr
[1] = 
AR_PHY_BASE
 + (8 << 2);

346 
lo›_max
 = 1;

348 
i
 = 0; i < 
lo›_max
; i++) {

349 
u32
 
addr
 = 
ªgAddr
[
i
];

350 
u32
 
wrD©a
, 
rdD©a
;

352 
ªgHﬁd
[
i
] = 
	`REG_READ
(
ah
, 
addr
);

353 
j
 = 0; j < 0x100; j++) {

354 
wrD©a
 = (
j
 << 16) | j;

355 
	`REG_WRITE
(
ah
, 
addr
, 
wrD©a
);

356 
rdD©a
 = 
	`REG_READ
(
ah
, 
addr
);

357 i‡(
rdD©a
 !
wrD©a
) {

358 
	`©h_îr
(
comm⁄
,

360 
addr
, 
wrD©a
, 
rdD©a
);

361  
Ál£
;

364 
j
 = 0; j < 4; j++) {

365 
wrD©a
 = 
∑âînD©a
[
j
];

366 
	`REG_WRITE
(
ah
, 
addr
, 
wrD©a
);

367 
rdD©a
 = 
	`REG_READ
(
ah
, 
addr
);

368 i‡(
wrD©a
 !
rdD©a
) {

369 
	`©h_îr
(
comm⁄
,

371 
addr
, 
wrD©a
, 
rdD©a
);

372  
Ál£
;

375 
	`REG_WRITE
(
ah
, 
ªgAddr
[
i
], 
ªgHﬁd
[i]);

377 
	`udñay
(100);

379  
åue
;

380 
	}
}

382 
	$©h9k_hw_öô_c⁄fig
(
©h_hw
 *
ah
)

384 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

386 
ah
->
c⁄fig
.
dma_bóc⁄_ª•⁄£_time
 = 1;

387 
ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
 = 6;

388 
ah
->
c⁄fig
.
cwm_ign‹e_extcˇ
 = 
Ál£
;

389 
ah
->
c⁄fig
.
™Æog_shi·ªg
 = 1;

391 
ah
->
c⁄fig
.
rx_öå_môig©i⁄
 = 
åue
;

393 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

394 
ah
->
c⁄fig
.
rimt_œ°
 = 500;

395 
ah
->
c⁄fig
.
rimt_fú°
 = 2000;

397 
ah
->
c⁄fig
.
rimt_œ°
 = 250;

398 
ah
->
c⁄fig
.
rimt_fú°
 = 700;

401 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

402 
ah
->
c⁄fig
.
∂l_pwrßve
 = 7;

420 i‡(
	`num_possibÀ_˝us
() > 1)

421 
ah
->
c⁄fig
.
£rülize_ªgmode
 = 
SER_REG_MODE_AUTO
;

423 i‡(
NR_CPUS
 > 1 && 
ah
->
c⁄fig
.
£rülize_ªgmode
 =
SER_REG_MODE_AUTO
) {

424 i‡(
ah
->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_5416_PCI
 ||

425 ((
	`AR_SREV_9160
(
ah
Ë|| 
	`AR_SREV_9280
◊hË|| 
	`AR_SREV_9287
(ah)) &&

426 !
ah
->
is_pcõx¥ess
)) {

427 
ah
->
c⁄fig
.
£rülize_ªgmode
 = 
SER_REG_MODE_ON
;

429 
ah
->
c⁄fig
.
£rülize_ªgmode
 = 
SER_REG_MODE_OFF
;

433 
	`©h_dbg
(
comm⁄
, 
RESET
, "serialize_regmode is %d\n",

434 
ah
->
c⁄fig
.
£rülize_ªgmode
);

436 i‡(
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9271
(ah))

437 
ah
->
c⁄fig
.
max_txåig_Àvñ
 = 
MAX_TX_FIFO_THRESHOLD
 >> 1;

439 
ah
->
c⁄fig
.
max_txåig_Àvñ
 = 
MAX_TX_FIFO_THRESHOLD
;

440 
	}
}

442 
	$©h9k_hw_öô_deÁu…s
(
©h_hw
 *
ah
)

444 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

446 
ªguœt‹y
->
cou¡ry_code
 = 
CTRY_DEFAULT
;

447 
ªguœt‹y
->
powî_limô
 = 
MAX_RATE_POWER
;

449 
ah
->
hw_vîsi⁄
.
magic
 = 
AR5416_MAGIC
;

450 
ah
->
hw_vîsi⁄
.
subvíd‹id
 = 0;

452 
ah
->
°a_id1_deÁu…s
 = 
AR_STA_ID1_CRPT_MIC_ENABLE
 |

453 
AR_STA_ID1_MCAST_KSRCH
;

454 i‡(
	`AR_SREV_9100
(
ah
))

455 
ah
->
°a_id1_deÁu…s
 |
AR_STA_ID1_AR9100_BA_FIX
;

457 
ah
->
¶Ÿtime
 = 
ATH9K_SLOT_TIME_9
;

458 
ah
->
globÆtxtimeout
 = (
u32
) -1;

459 
ah
->
powî_mode
 = 
ATH9K_PM_UNDEFINED
;

460 
ah
->
htc_ª£t_öô
 = 
åue
;

462 
ah
->
çc_íabÀd
 = 
Ál£
;

464 
ah
->
™i_fun˘i⁄
 = 
ATH9K_ANI_ALL
;

465 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

466 
ah
->
™i_fun˘i⁄
 &~
ATH9K_ANI_MRC_CCK
;

468 i‡(
	`AR_SREV_9285
(
ah
Ë|| 
	`AR_SREV_9271
(ah))

469 
ah
->
tx_åig_Àvñ
 = (
AR_FTRIG_256B
 >> 
AR_FTRIG_S
);

471 
ah
->
tx_åig_Àvñ
 = (
AR_FTRIG_512B
 >> 
AR_FTRIG_S
);

472 
	}
}

474 
	$©h9k_hw_öô_maˇddr
(
©h_hw
 *
ah
)

476 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

477 
u32
 
sum
;

478 
i
;

479 
u16
 
ìvÆ
;

480 c⁄° 
u32
 
EEP_MAC
[] = { 
EEP_MAC_LSW
, 
EEP_MAC_MID
, 
EEP_MAC_MSW
 };

482 
sum
 = 0;

483 
i
 = 0; i < 3; i++) {

484 
ìvÆ
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_MAC
[
i
]);

485 
sum
 +
ìvÆ
;

486 
comm⁄
->
maˇddr
[2 * 
i
] = 
ìvÆ
 >> 8;

487 
comm⁄
->
maˇddr
[2 * 
i
 + 1] = 
ìvÆ
 & 0xff;

489 i‡(!
	`is_vÆid_ëhî_addr
(
comm⁄
->
maˇddr
)) {

490 
	`©h_îr
(
comm⁄
,

492 
comm⁄
->
maˇddr
);

494 
	`øndom_ëhî_addr
(
comm⁄
->
maˇddr
);

495 
	`©h_îr
(
comm⁄
,

497 
comm⁄
->
maˇddr
);

501 
	}
}

503 
	$©h9k_hw_po°_öô
(
©h_hw
 *
ah
)

505 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

506 
ecode
;

508 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 !
ATH_USB
) {

509 i‡(!
	`©h9k_hw_chù_ã°
(
ah
))

510  -
ENODEV
;

513 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

514 
ecode
 = 
	`¨9002_hw_rf_˛aim
(
ah
);

515 i‡(
ecode
 != 0)

516  
ecode
;

519 
ecode
 = 
	`©h9k_hw_ì¥om_öô
(
ah
);

520 i‡(
ecode
 != 0)

521  
ecode
;

523 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
CONFIG
, "Eeprom VER: %d, REV: %d\n",

524 
ah
->
ìp_›s
->
	`gë_ì¥om_vî
(ah),

525 
ah
->
ìp_›s
->
	`gë_ì¥om_ªv
(ah));

527 
	`©h9k_hw_™i_öô
(
ah
);

533 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

534 
u16
 
ªgdmn
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_REG_0
);

535 i‡((
ªgdmn
 & 0xF0Ë=
CTL_FCC
) {

536 
ah
->
nf_2g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_2GHZ
;

537 
ah
->
nf_5g
.
max
 = 
AR_PHY_CCA_MAX_GOOD_VAL_9300_FCC_5GHZ
;

542 
	}
}

544 
	$©h9k_hw_©èch_›s
(
©h_hw
 *
ah
)

546 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

547  
	`¨9002_hw_©èch_›s
(
ah
);

549 
	`¨9003_hw_©èch_›s
(
ah
);

551 
	}
}

554 
	$__©h9k_hw_öô
(
©h_hw
 *
ah
)

556 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

557 
r
 = 0;

559 
	`©h9k_hw_ªad_ªvisi⁄s
(
ah
);

561 
ah
->
hw_vîsi⁄
.
macVîsi⁄
) {

562 
AR_SREV_VERSION_5416_PCI
:

563 
AR_SREV_VERSION_5416_PCIE
:

564 
AR_SREV_VERSION_9160
:

565 
AR_SREV_VERSION_9100
:

566 
AR_SREV_VERSION_9280
:

567 
AR_SREV_VERSION_9285
:

568 
AR_SREV_VERSION_9287
:

569 
AR_SREV_VERSION_9271
:

570 
AR_SREV_VERSION_9300
:

571 
AR_SREV_VERSION_9330
:

572 
AR_SREV_VERSION_9485
:

573 
AR_SREV_VERSION_9340
:

574 
AR_SREV_VERSION_9462
:

575 
AR_SREV_VERSION_9550
:

576 
AR_SREV_VERSION_9565
:

577 
AR_SREV_VERSION_9531
:

578 
AR_SREV_VERSION_9561
:

581 
	`©h_îr
(
comm⁄
,

583 
ah
->
hw_vîsi⁄
.
macVîsi⁄
,áh->hw_vîsi⁄.
macRev
);

584  -
EOPNOTSUPP
;

592 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

593 
ah
->
WARegVÆ
 = 
	`REG_READ
◊h, 
AR_WA
);

594 
ah
->
WARegVÆ
 |(
AR_WA_D3_L1_DISABLE
 |

595 
AR_WA_ASPM_TIMER_BASED_DISABLE
);

598 i‡(!
	`©h9k_hw_£t_ª£t_ªg
(
ah
, 
ATH9K_RESET_POWER_ON
)) {

599 
	`©h_îr
(
comm⁄
, "Couldn'tÑeset chip\n");

600  -
EIO
;

603 i‡(
	`AR_SREV_9565
(
ah
)) {

604 
ah
->
WARegVÆ
 |
AR_WA_BIT22
;

605 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
);

608 
	`©h9k_hw_öô_deÁu…s
(
ah
);

609 
	`©h9k_hw_öô_c⁄fig
(
ah
);

611 
r
 = 
	`©h9k_hw_©èch_›s
(
ah
);

612 i‡(
r
)

613  
r
;

615 i‡(!
	`©h9k_hw_£çowî
(
ah
, 
ATH9K_PM_AWAKE
)) {

616 
	`©h_îr
(
comm⁄
, "Couldn't wakeup chip\n");

617  -
EIO
;

620 i‡(
	`AR_SREV_9271
(
ah
Ë|| 
	`AR_SREV_9100
◊hË|| 
	`AR_SREV_9340
(ah) ||

621 
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9550
(ah))

622 
ah
->
is_pcõx¥ess
 = 
Ál£
;

624 
ah
->
hw_vîsi⁄
.
phyRev
 = 
	`REG_READ
◊h, 
AR_PHY_CHIP_ID
);

625 
	`©h9k_hw_öô_ˇl_£âögs
(
ah
);

627 i‡(!
ah
->
is_pcõx¥ess
)

628 
	`©h9k_hw_dißbÀpcõ
(
ah
);

630 
r
 = 
	`©h9k_hw_po°_öô
(
ah
);

631 i‡(
r
)

632  
r
;

634 
	`©h9k_hw_öô_mode_gaö_ªgs
(
ah
);

635 
r
 = 
	`©h9k_hw_fûl_ˇp_öfo
(
ah
);

636 i‡(
r
)

637  
r
;

639 
r
 = 
	`©h9k_hw_öô_maˇddr
(
ah
);

640 i‡(
r
) {

641 
	`©h_îr
(
comm⁄
, "FailedÅo initialize MACáddress\n");

642  
r
;

645 
	`©h9k_hw_öô_h™g_checks
(
ah
);

647 
comm⁄
->
°©e
 = 
ATH_HW_INITIALIZED
;

650 
	}
}

652 
	$©h9k_hw_öô
(
©h_hw
 *
ah
)

654 
ªt
;

655 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

658 
ah
->
hw_vîsi⁄
.
devid
) {

659 
AR5416_DEVID_PCI
:

660 
AR5416_DEVID_PCIE
:

661 
AR5416_AR9100_DEVID
:

662 
AR9160_DEVID_PCI
:

663 
AR9280_DEVID_PCI
:

664 
AR9280_DEVID_PCIE
:

665 
AR9285_DEVID_PCIE
:

666 
AR9287_DEVID_PCI
:

667 
AR9287_DEVID_PCIE
:

668 
AR2427_DEVID_PCIE
:

669 
AR9300_DEVID_PCIE
:

670 
AR9300_DEVID_AR9485_PCIE
:

671 
AR9300_DEVID_AR9330
:

672 
AR9300_DEVID_AR9340
:

673 
AR9300_DEVID_QCA955X
:

674 
AR9300_DEVID_AR9580
:

675 
AR9300_DEVID_AR9462
:

676 
AR9485_DEVID_AR1111
:

677 
AR9300_DEVID_AR9565
:

678 
AR9300_DEVID_AR953X
:

679 
AR9300_DEVID_QCA956X
:

682 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_USB
)

684 
	`©h_îr
(
comm⁄
, "Hardware device ID 0x%04xÇot supported\n",

685 
ah
->
hw_vîsi⁄
.
devid
);

686  -
EOPNOTSUPP
;

689 
ªt
 = 
	`__©h9k_hw_öô
(
ah
);

690 i‡(
ªt
) {

691 
	`©h_îr
(
comm⁄
,

693 
ªt
);

694  
ªt
;

697 
	`©h_dy«ck_öô
(
ah
);

700 
	}
}

701 
EXPORT_SYMBOL
(
©h9k_hw_öô
);

703 
	$©h9k_hw_öô_qos
(
©h_hw
 *
ah
)

705 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

707 
	`REG_WRITE
(
ah
, 
AR_MIC_QOS_CONTROL
, 0x100aa);

708 
	`REG_WRITE
(
ah
, 
AR_MIC_QOS_SELECT
, 0x3210);

710 
	`REG_WRITE
(
ah
, 
AR_QOS_NO_ACK
,

711 
	`SM
(2, 
AR_QOS_NO_ACK_TWO_BIT
) |

712 
	`SM
(5, 
AR_QOS_NO_ACK_BIT_OFF
) |

713 
	`SM
(0, 
AR_QOS_NO_ACK_BYTE_OFF
));

715 
	`REG_WRITE
(
ah
, 
AR_TXOP_X
, 
AR_TXOP_X_VAL
);

716 
	`REG_WRITE
(
ah
, 
AR_TXOP_0_3
, 0xFFFFFFFF);

717 
	`REG_WRITE
(
ah
, 
AR_TXOP_4_7
, 0xFFFFFFFF);

718 
	`REG_WRITE
(
ah
, 
AR_TXOP_8_11
, 0xFFFFFFFF);

719 
	`REG_WRITE
(
ah
, 
AR_TXOP_12_15
, 0xFFFFFFFF);

721 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

722 
	}
}

724 
u32
 
	$¨9003_gë_∂l_sqsum_dvc
(
©h_hw
 *
ah
)

726 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

727 
i
 = 0;

729 
	`REG_CLR_BIT
(
ah
, 
PLL3
, 
PLL3_DO_MEAS_MASK
);

730 
	`udñay
(100);

731 
	`REG_SET_BIT
(
ah
, 
PLL3
, 
PLL3_DO_MEAS_MASK
);

733 (
	`REG_READ
(
ah
, 
PLL4
Ë& 
PLL4_MEAS_DONE
) == 0) {

735 
	`udñay
(100);

737 i‡(
	`WARN_ON_ONCE
(
i
 >= 100)) {

738 
	`©h_îr
(
comm⁄
, "PLL4 meaurementÇot done\n");

742 
i
++;

745  (
	`REG_READ
(
ah
, 
PLL3
Ë& 
SQSUM_DVC_MASK
) >> 3;

746 
	}
}

747 
EXPORT_SYMBOL
(
¨9003_gë_∂l_sqsum_dvc
);

749 
	$©h9k_hw_öô_∂l
(
©h_hw
 *
ah
,

750 
©h9k_ch™√l
 *
ch™
)

752 
u32
 
∂l
;

754 
∂l
 = 
	`©h9k_hw_compuã_∂l_c⁄åﬁ
(
ah
, 
ch™
);

756 i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

758 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

759 
AR_CH0_BB_DPLL2_PLL_PWD
, 0x1);

760 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

761 
AR_CH0_DPLL2_KD
, 0x40);

762 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

763 
AR_CH0_DPLL2_KI
, 0x4);

765 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL1
,

766 
AR_CH0_BB_DPLL1_REFDIV
, 0x5);

767 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL1
,

768 
AR_CH0_BB_DPLL1_NINI
, 0x58);

769 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL1
,

770 
AR_CH0_BB_DPLL1_NFRAC
, 0x0);

772 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

773 
AR_CH0_BB_DPLL2_OUTDIV
, 0x1);

774 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

775 
AR_CH0_BB_DPLL2_LOCAL_PLL
, 0x1);

776 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

777 
AR_CH0_BB_DPLL2_EN_NEGTRIG
, 0x1);

780 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL3
,

781 
AR_CH0_BB_DPLL3_PHASE_SHIFT
, 0x6);

783 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
,

784 
AR_CH0_BB_DPLL2_PLL_PWD
, 0x0);

785 
	`udñay
(1000);

786 } i‡(
	`AR_SREV_9330
(
ah
)) {

787 
u32
 
ddr_d∂l2
, 
∂l_c⁄åﬁ2
, 
kd
;

789 i‡(
ah
->
is_˛k_25mhz
) {

790 
ddr_d∂l2
 = 0x18e82f01;

791 
∂l_c⁄åﬁ2
 = 0xe04a3d;

792 
kd
 = 0x1d;

794 
ddr_d∂l2
 = 0x19e82f01;

795 
∂l_c⁄åﬁ2
 = 0x886666;

796 
kd
 = 0x3d;

800 
	`REG_WRITE
(
ah
, 
AR_CH0_DDR_DPLL2
, 
ddr_d∂l2
);

803 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_DDR_DPLL3
,

804 
AR_CH0_DPLL3_PHASE_SHIFT
, 0x1);

806 
	`REG_WRITE
(
ah
, 
AR_RTC_PLL_CONTROL
,

807 
∂l
 | 
AR_RTC_9300_PLL_BYPASS
);

808 
	`udñay
(1000);

811 
	`REG_WRITE
(
ah
, 
AR_RTC_PLL_CONTROL2
, 
∂l_c⁄åﬁ2
);

814 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
, 
AR_CH0_DPLL2_KD
, 
kd
);

815 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL2
, 
AR_CH0_DPLL2_KI
, 0x06);

818 
	`REG_RMW_FIELD
(
ah
, 
AR_CH0_BB_DPLL3
,

819 
AR_CH0_BB_DPLL3_PHASE_SHIFT
, 0x1);

820 } i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊hË|| 
	`AR_SREV_9531
(ah) ||

821 
	`AR_SREV_9561
(
ah
)) {

822 
u32
 
ªgvÆ
, 
∂l2_divöt
, 
∂l2_div‰ac
, 
ªfdiv
;

824 
	`REG_WRITE
(
ah
, 
AR_RTC_PLL_CONTROL
,

825 
∂l
 | 
AR_RTC_9300_SOC_PLL_BYPASS
);

826 
	`udñay
(1000);

828 
	`REG_SET_BIT
(
ah
, 
AR_PHY_PLL_MODE
, 0x1 << 16);

829 
	`udñay
(100);

831 i‡(
ah
->
is_˛k_25mhz
) {

832 i‡(
	`AR_SREV_9531
(
ah
Ë|| 
	`AR_SREV_9561
(ah)) {

833 
∂l2_divöt
 = 0x1c;

834 
∂l2_div‰ac
 = 0xa3d2;

835 
ªfdiv
 = 1;

837 
∂l2_divöt
 = 0x54;

838 
∂l2_div‰ac
 = 0x1eb85;

839 
ªfdiv
 = 3;

842 i‡(
	`AR_SREV_9340
(
ah
)) {

843 
∂l2_divöt
 = 88;

844 
∂l2_div‰ac
 = 0;

845 
ªfdiv
 = 5;

847 
∂l2_divöt
 = 0x11;

848 
∂l2_div‰ac
 = (
	`AR_SREV_9531
(
ah
) ||

849 
	`AR_SREV_9561
(
ah
)) ?

851 
ªfdiv
 = 1;

855 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_PLL_MODE
);

856 i‡(
	`AR_SREV_9531
(
ah
Ë|| 
	`AR_SREV_9561
(ah))

857 
ªgvÆ
 |= (0x1 << 22);

859 
ªgvÆ
 |= (0x1 << 16);

860 
	`REG_WRITE
(
ah
, 
AR_PHY_PLL_MODE
, 
ªgvÆ
);

861 
	`udñay
(100);

863 
	`REG_WRITE
(
ah
, 
AR_PHY_PLL_CONTROL
, (
ªfdiv
 << 27) |

864 (
∂l2_divöt
 << 18Ë| 
∂l2_div‰ac
);

865 
	`udñay
(100);

867 
ªgvÆ
 = 
	`REG_READ
(
ah
, 
AR_PHY_PLL_MODE
);

868 i‡(
	`AR_SREV_9340
(
ah
))

869 
ªgvÆ
 = (regval & 0x80071fff) |

874 i‡(
	`AR_SREV_9531
(
ah
Ë|| 
	`AR_SREV_9561
(ah)) {

875 
ªgvÆ
 = (regval & 0x01c00fff) |

881 i‡(
	`AR_SREV_9531
(
ah
))

882 
ªgvÆ
 |= (0x6 << 12);

884 
ªgvÆ
 = (regval & 0x80071fff) |

889 
	`REG_WRITE
(
ah
, 
AR_PHY_PLL_MODE
, 
ªgvÆ
);

891 i‡(
	`AR_SREV_9531
(
ah
Ë|| 
	`AR_SREV_9561
(ah))

892 
	`REG_WRITE
(
ah
, 
AR_PHY_PLL_MODE
,

893 
	`REG_READ
(
ah
, 
AR_PHY_PLL_MODE
) & 0xffbfffff);

895 
	`REG_WRITE
(
ah
, 
AR_PHY_PLL_MODE
,

896 
	`REG_READ
(
ah
, 
AR_PHY_PLL_MODE
) & 0xfffeffff);

898 
	`udñay
(1000);

901 i‡(
	`AR_SREV_9565
(
ah
))

902 
∂l
 |= 0x40000;

903 
	`REG_WRITE
(
ah
, 
AR_RTC_PLL_CONTROL
, 
∂l
);

905 i‡(
	`AR_SREV_9485
(
ah
Ë|| 
	`AR_SREV_9340
◊hË|| 
	`AR_SREV_9330
(ah) ||

906 
	`AR_SREV_9550
(
ah
))

907 
	`udñay
(1000);

910 i‡(
	`AR_SREV_9271
(
ah
)) {

911 
	`udñay
(500);

912 
	`REG_WRITE
(
ah
, 0x50040, 0x304);

915 
	`udñay
(
RTC_PLL_SETTLE_DELAY
);

917 
	`REG_WRITE
(
ah
, 
AR_RTC_SLEEP_CLK
, 
AR_RTC_FORCE_DERIVED_CLK
);

918 
	}
}

920 
	$©h9k_hw_öô_öãºu±_masks
(
©h_hw
 *
ah
,

921 
∆80211_i·y≥
 
›mode
)

923 
u32
 
sync_deÁu…
 = 
AR_INTR_SYNC_DEFAULT
;

924 
u32
 
imr_ªg
 = 
AR_IMR_TXERR
 |

925 
AR_IMR_TXURN
 |

926 
AR_IMR_RXERR
 |

927 
AR_IMR_RXORN
 |

928 
AR_IMR_BCNMISC
;

930 i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊hË|| 
	`AR_SREV_9531
(ah) ||

931 
	`AR_SREV_9561
(
ah
))

932 
sync_deÁu…
 &~
AR_INTR_SYNC_HOST1_FATAL
;

934 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

935 
imr_ªg
 |
AR_IMR_RXOK_HP
;

936 i‡(
ah
->
c⁄fig
.
rx_öå_môig©i⁄
)

937 
imr_ªg
 |
AR_IMR_RXINTM
 | 
AR_IMR_RXMINTR
;

939 
imr_ªg
 |
AR_IMR_RXOK_LP
;

942 i‡(
ah
->
c⁄fig
.
rx_öå_môig©i⁄
)

943 
imr_ªg
 |
AR_IMR_RXINTM
 | 
AR_IMR_RXMINTR
;

945 
imr_ªg
 |
AR_IMR_RXOK
;

948 i‡(
ah
->
c⁄fig
.
tx_öå_môig©i⁄
)

949 
imr_ªg
 |
AR_IMR_TXINTM
 | 
AR_IMR_TXMINTR
;

951 
imr_ªg
 |
AR_IMR_TXOK
;

953 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

955 
	`REG_WRITE
(
ah
, 
AR_IMR
, 
imr_ªg
);

956 
ah
->
imrs2_ªg
 |
AR_IMR_S2_GTT
;

957 
	`REG_WRITE
(
ah
, 
AR_IMR_S2
,áh->
imrs2_ªg
);

959 i‡(!
	`AR_SREV_9100
(
ah
)) {

960 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_CAUSE
, 0xFFFFFFFF);

961 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_ENABLE
, 
sync_deÁu…
);

962 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_MASK
, 0);

965 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

967 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

968 
	`REG_WRITE
(
ah
, 
AR_INTR_PRIO_ASYNC_ENABLE
, 0);

969 
	`REG_WRITE
(
ah
, 
AR_INTR_PRIO_ASYNC_MASK
, 0);

970 
	`REG_WRITE
(
ah
, 
AR_INTR_PRIO_SYNC_ENABLE
, 0);

971 
	`REG_WRITE
(
ah
, 
AR_INTR_PRIO_SYNC_MASK
, 0);

973 
	}
}

975 
	$©h9k_hw_£t_sifs_time
(
©h_hw
 *
ah
, 
u32
 
us
)

977 
u32
 
vÆ
 = 
	`©h9k_hw_mac_to_˛ks
(
ah
, 
us
 - 2);

978 
vÆ
 = 
	`mö
(vÆ, (
u32
) 0xFFFF);

979 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_SIFS
, 
vÆ
);

980 
	}
}

982 
	$©h9k_hw_£t¶Ÿtime
(
©h_hw
 *
ah
, 
u32
 
us
)

984 
u32
 
vÆ
 = 
	`©h9k_hw_mac_to_˛ks
(
ah
, 
us
);

985 
vÆ
 = 
	`mö
(vÆ, (
u32
) 0xFFFF);

986 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_SLOT
, 
vÆ
);

987 
	}
}

989 
	$©h9k_hw_£t_ack_timeout
(
©h_hw
 *
ah
, 
u32
 
us
)

991 
u32
 
vÆ
 = 
	`©h9k_hw_mac_to_˛ks
(
ah
, 
us
);

992 
vÆ
 = 
	`mö
(vÆ, (
u32
Ë
	`MS
(0xFFFFFFFF, 
AR_TIME_OUT_ACK
));

993 
	`REG_RMW_FIELD
(
ah
, 
AR_TIME_OUT
, 
AR_TIME_OUT_ACK
, 
vÆ
);

994 
	}
}

996 
	$©h9k_hw_£t_˘s_timeout
(
©h_hw
 *
ah
, 
u32
 
us
)

998 
u32
 
vÆ
 = 
	`©h9k_hw_mac_to_˛ks
(
ah
, 
us
);

999 
vÆ
 = 
	`mö
(vÆ, (
u32
Ë
	`MS
(0xFFFFFFFF, 
AR_TIME_OUT_CTS
));

1000 
	`REG_RMW_FIELD
(
ah
, 
AR_TIME_OUT
, 
AR_TIME_OUT_CTS
, 
vÆ
);

1001 
	}
}

1003 
boﬁ
 
	$©h9k_hw_£t_globÆ_txtimeout
(
©h_hw
 *
ah
, 
u32
 
tu
)

1005 i‡(
tu
 > 0xFFFF) {

1006 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
XMIT
, "bad globalÅxÅimeout %u\n",

1007 
tu
);

1008 
ah
->
globÆtxtimeout
 = (
u32
) -1;

1009  
Ál£
;

1011 
	`REG_RMW_FIELD
(
ah
, 
AR_GTXTO
, 
AR_GTXTO_TIMEOUT_LIMIT
, 
tu
);

1012 
ah
->
globÆtxtimeout
 = 
tu
;

1013  
åue
;

1015 
	}
}

1017 
	$©h9k_hw_öô_globÆ_£âögs
(
©h_hw
 *
ah
)

1019 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1020 c⁄° 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

1021 
acktimeout
, 
˘°imeout
, 
ack_off£t
 = 0;

1022 
¶Ÿtime
;

1023 
sif°ime
;

1024 
rx_œt
 = 0, 
tx_œt
 = 0, 
eifs
 = 0;

1025 
u32
 
ªg
;

1027 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
RESET
, "ah->misc_mode 0x%x\n",

1028 
ah
->
misc_mode
);

1030 i‡(!
ch™
)

1033 i‡(
ah
->
misc_mode
 != 0)

1034 
	`REG_SET_BIT
(
ah
, 
AR_PCU_MISC
,áh->
misc_mode
);

1036 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

1037 
rx_œt
 = 41;

1039 
rx_œt
 = 37;

1040 
tx_œt
 = 54;

1042 i‡(
	`IS_CHAN_5GHZ
(
ch™
))

1043 
sif°ime
 = 16;

1045 
sif°ime
 = 10;

1047 i‡(
	`IS_CHAN_HALF_RATE
(
ch™
)) {

1048 
eifs
 = 175;

1049 
rx_œt
 *= 2;

1050 
tx_œt
 *= 2;

1051 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

1052 
tx_œt
 += 11;

1054 
sif°ime
 = 32;

1055 
ack_off£t
 = 16;

1056 
¶Ÿtime
 = 13;

1057 } i‡(
	`IS_CHAN_QUARTER_RATE
(
ch™
)) {

1058 
eifs
 = 340;

1059 
rx_œt
 = (rx_lat * 4) - 1;

1060 
tx_œt
 *= 4;

1061 i‡(
	`IS_CHAN_A_FAST_CLOCK
(
ah
, 
ch™
))

1062 
tx_œt
 += 22;

1064 
sif°ime
 = 64;

1065 
ack_off£t
 = 32;

1066 
¶Ÿtime
 = 21;

1068 i‡(
	`AR_SREV_9287
(
ah
Ë&& 
	`AR_SREV_9287_13_OR_LATER
(ah)) {

1069 
eifs
 = 
AR_D_GBL_IFS_EIFS_ASYNC_FIFO
;

1070 
ªg
 = 
AR_USEC_ASYNC_FIFO
;

1072 
eifs
 = 
	`REG_READ
(
ah
, 
AR_D_GBL_IFS_EIFS
)/

1073 
comm⁄
->
˛ockøã
;

1074 
ªg
 = 
	`REG_READ
(
ah
, 
AR_USEC
);

1076 
rx_œt
 = 
	`MS
(
ªg
, 
AR_USEC_RX_LAT
);

1077 
tx_œt
 = 
	`MS
(
ªg
, 
AR_USEC_TX_LAT
);

1079 
¶Ÿtime
 = 
ah
->slottime;

1083 
¶Ÿtime
 +3 * 
ah
->
covîage_˛ass
;

1084 
acktimeout
 = 
¶Ÿtime
 + 
sif°ime
 + 
ack_off£t
;

1085 
˘°imeout
 = 
acktimeout
;

1094 i‡(
	`IS_CHAN_2GHZ
(
ch™
) &&

1095 !
	`IS_CHAN_HALF_RATE
(
ch™
Ë&& !
	`IS_CHAN_QUARTER_RATE
(chan)) {

1096 
acktimeout
 +64 - 
sif°ime
 - 
ah
->
¶Ÿtime
;

1097 
˘°imeout
 +48 - 
sif°ime
 - 
ah
->
¶Ÿtime
;

1100 i‡(
ah
->
dy«ck
.
íabÀd
) {

1101 
acktimeout
 = 
ah
->
dy«ck
.
ackto
;

1102 
˘°imeout
 = 
acktimeout
;

1103 
¶Ÿtime
 = (
acktimeout
 - 3) / 2;

1105 
ah
->
dy«ck
.
ackto
 = 
acktimeout
;

1108 
	`©h9k_hw_£t_sifs_time
(
ah
, 
sif°ime
);

1109 
	`©h9k_hw_£t¶Ÿtime
(
ah
, 
¶Ÿtime
);

1110 
	`©h9k_hw_£t_ack_timeout
(
ah
, 
acktimeout
);

1111 
	`©h9k_hw_£t_˘s_timeout
(
ah
, 
˘°imeout
);

1112 i‡(
ah
->
globÆtxtimeout
 !(
u32
) -1)

1113 
	`©h9k_hw_£t_globÆ_txtimeout
(
ah
,áh->
globÆtxtimeout
);

1115 
	`REG_WRITE
(
ah
, 
AR_D_GBL_IFS_EIFS
, 
	`©h9k_hw_mac_to_˛ks
◊h, 
eifs
));

1116 
	`REG_RMW
(
ah
, 
AR_USEC
,

1117 (
comm⁄
->
˛ockøã
 - 1) |

1118 
	`SM
(
rx_œt
, 
AR_USEC_RX_LAT
) |

1119 
	`SM
(
tx_œt
, 
AR_USEC_TX_LAT
),

1120 
AR_USEC_TX_LAT
 | 
AR_USEC_RX_LAT
 | 
AR_USEC_USEC
);

1122 
	}
}

1123 
EXPORT_SYMBOL
(
©h9k_hw_öô_globÆ_£âögs
);

1125 
	$©h9k_hw_deöô
(
©h_hw
 *
ah
)

1127 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1129 i‡(
comm⁄
->
°©e
 < 
ATH_HW_INITIALIZED
)

1132 
	`©h9k_hw_£çowî
(
ah
, 
ATH9K_PM_FULL_SLEEP
);

1133 
	}
}

1134 
EXPORT_SYMBOL
(
©h9k_hw_deöô
);

1140 
u32
 
	$©h9k_ªgd_gë_˘l
(
©h_ªguœt‹y
 *
ªg
, 
©h9k_ch™√l
 *
ch™
)

1142 
u32
 
˘l
 = 
	`©h_ªgd_gë_b™d_˘l
(
ªg
, 
ch™
->ch™->
b™d
);

1144 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

1145 
˘l
 |
CTL_11G
;

1147 
˘l
 |
CTL_11A
;

1149  
˘l
;

1150 
	}
}

1156 
ölöe
 
	$©h9k_hw_£t_dma
(
©h_hw
 *
ah
)

1158 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1159 
txbuf_size
;

1161 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1166 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1167 
	`REG_SET_BIT
(
ah
, 
AR_AHB_MODE
, 
AR_AHB_PREFETCH_RD_EN
);

1172 
	`REG_RMW
(
ah
, 
AR_TXCFG
, 
AR_TXCFG_DMASZ_128B
, 
AR_TXCFG_DMASZ_MASK
);

1174 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1181 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1182 
	`REG_RMW_FIELD
(
ah
, 
AR_TXCFG
, 
AR_FTRIG
,áh->
tx_åig_Àvñ
);

1184 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1189 
	`REG_RMW
(
ah
, 
AR_RXCFG
, 
AR_RXCFG_DMASZ_128B
, 
AR_RXCFG_DMASZ_MASK
);

1194 
	`REG_WRITE
(
ah
, 
AR_RXFIFO_CFG
, 0x200);

1196 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

1197 
	`REG_RMW_FIELD
(
ah
, 
AR_RXBP_THRESH
, 
AR_RXBP_THRESH_HP
, 0x1);

1198 
	`REG_RMW_FIELD
(
ah
, 
AR_RXBP_THRESH
, 
AR_RXBP_THRESH_LP
, 0x1);

1200 
	`©h9k_hw_£t_rx_bufsize
(
ah
, 
comm⁄
->
rx_bufsize
 -

1201 
ah
->
ˇps
.
rx_°©us_Àn
);

1208 i‡(
	`AR_SREV_9285
(
ah
)) {

1213 
txbuf_size
 = 
AR_9285_PCU_TXBUF_CTRL_USABLE_SIZE
;

1214 } i‡(
	`AR_SREV_9340_13_OR_LATER
(
ah
)) {

1216 
txbuf_size
 = 
AR_9340_PCU_TXBUF_CTRL_USABLE_SIZE
;

1218 
txbuf_size
 = 
AR_PCU_TXBUF_CTRL_USABLE_SIZE
;

1221 i‡(!
	`AR_SREV_9271
(
ah
))

1222 
	`REG_WRITE
(
ah
, 
AR_PCU_TXBUF_CTRL
, 
txbuf_size
);

1224 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1226 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1227 
	`©h9k_hw_ª£t_tx°©us_rög
(
ah
);

1228 
	}
}

1230 
	$©h9k_hw_£t_›î©ög_mode
(
©h_hw
 *
ah
, 
›mode
)

1232 
u32
 
mask
 = 
AR_STA_ID1_STA_AP
 | 
AR_STA_ID1_ADHOC
;

1233 
u32
 
£t
 = 
AR_STA_ID1_KSRCH_MODE
;

1235 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

1236 
›mode
) {

1237 
NL80211_IFTYPE_ADHOC
:

1238 i‡(!
	`AR_SREV_9340_13
(
ah
)) {

1239 
£t
 |
AR_STA_ID1_ADHOC
;

1240 
	`REG_SET_BIT
(
ah
, 
AR_CFG
, 
AR_CFG_AP_ADHOC_INDICATION
);

1244 
NL80211_IFTYPE_OCB
:

1245 
NL80211_IFTYPE_MESH_POINT
:

1246 
NL80211_IFTYPE_AP
:

1247 
£t
 |
AR_STA_ID1_STA_AP
;

1249 
NL80211_IFTYPE_STATION
:

1250 
	`REG_CLR_BIT
(
ah
, 
AR_CFG
, 
AR_CFG_AP_ADHOC_INDICATION
);

1253 i‡(!
ah
->
is_m⁄ô‹ög
)

1254 
£t
 = 0;

1257 
	`REG_RMW
(
ah
, 
AR_STA_ID1
, 
£t
, 
mask
);

1258 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

1259 
	}
}

1261 
	$©h9k_hw_gë_dñè_¶›e_vÆs
(
©h_hw
 *
ah
, 
u32
 
c€f_sˇÀd
,

1262 
u32
 *
c€f_m™tisß
, u32 *
c€f_exp⁄ít
)

1264 
u32
 
c€f_exp
, 
c€f_m™
;

1266 
c€f_exp
 = 31; coef_exp > 0; coef_exp--)

1267 i‡((
c€f_sˇÀd
 >> 
c€f_exp
) & 0x1)

1270 
c€f_exp
 = 14 - (c€f_ex∞- 
COEF_SCALE_S
);

1272 
c€f_m™
 = 
c€f_sˇÀd
 + (1 << (
COEF_SCALE_S
 - 
c€f_exp
 - 1));

1274 *
c€f_m™tisß
 = 
c€f_m™
 >> (
COEF_SCALE_S
 - 
c€f_exp
);

1275 *
c€f_exp⁄ít
 = 
c€f_exp
 - 16;

1276 
	}
}

1283 
boﬁ
 
	$©h9k_hw_¨9330_ª£t_w¨
(
©h_hw
 *
ah
, 
ty≥
)

1285 
i
, 
≈íd
 = 0;

1287 
i
 = 0; i < 
AR_NUM_QCU
; i++) {

1288 
≈íd
 = 
	`©h9k_hw_numtx≥ndög
(
ah
, 
i
);

1289 i‡(
≈íd
)

1293 i‡(
ah
->
exã∫Æ_ª£t
 &&

1294 (
≈íd
 || 
ty≥
 =
ATH9K_RESET_COLD
)) {

1295 
ª£t_îr
 = 0;

1297 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
RESET
,

1300 
ª£t_îr
 = 
ah
->
	`exã∫Æ_ª£t
();

1301 i‡(
ª£t_îr
) {

1302 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

1304 
ª£t_îr
);

1305  
Ál£
;

1308 
	`REG_WRITE
(
ah
, 
AR_RTC_RESET
, 1);

1311  
åue
;

1312 
	}
}

1314 
boﬁ
 
	$©h9k_hw_£t_ª£t
(
©h_hw
 *
ah
, 
ty≥
)

1316 
u32
 
r°_Êags
;

1317 
u32
 
tmpReg
;

1319 i‡(
	`AR_SREV_9100
(
ah
)) {

1320 
	`REG_RMW_FIELD
(
ah
, 
AR_RTC_DERIVED_CLK
,

1321 
AR_RTC_DERIVED_CLK_PERIOD
, 1);

1322 ()
	`REG_READ
(
ah
, 
AR_RTC_DERIVED_CLK
);

1325 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1327 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

1328 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
);

1329 
	`udñay
(10);

1332 
	`REG_WRITE
(
ah
, 
AR_RTC_FORCE_WAKE
, 
AR_RTC_FORCE_WAKE_EN
 |

1333 
AR_RTC_FORCE_WAKE_ON_INT
);

1335 i‡(
	`AR_SREV_9100
(
ah
)) {

1336 
r°_Êags
 = 
AR_RTC_RC_MAC_WARM
 | 
AR_RTC_RC_MAC_COLD
 |

1337 
AR_RTC_RC_COLD_RESET
 | 
AR_RTC_RC_WARM_RESET
;

1339 
tmpReg
 = 
	`REG_READ
(
ah
, 
AR_INTR_SYNC_CAUSE
);

1340 i‡(
	`AR_SREV_9340
(
ah
))

1341 
tmpReg
 &
AR9340_INTR_SYNC_LOCAL_TIMEOUT
;

1343 
tmpReg
 &
AR_INTR_SYNC_LOCAL_TIMEOUT
 |

1344 
AR_INTR_SYNC_RADM_CPL_TIMEOUT
;

1346 i‡(
tmpReg
) {

1347 
u32
 
vÆ
;

1348 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_ENABLE
, 0);

1350 
vÆ
 = 
AR_RC_HOSTIF
;

1351 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1352 
vÆ
 |
AR_RC_AHB
;

1353 
	`REG_WRITE
(
ah
, 
AR_RC
, 
vÆ
);

1355 } i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1356 
	`REG_WRITE
(
ah
, 
AR_RC
, 
AR_RC_AHB
);

1358 
r°_Êags
 = 
AR_RTC_RC_MAC_WARM
;

1359 i‡(
ty≥
 =
ATH9K_RESET_COLD
)

1360 
r°_Êags
 |
AR_RTC_RC_MAC_COLD
;

1363 i‡(
	`AR_SREV_9330
(
ah
)) {

1364 i‡(!
	`©h9k_hw_¨9330_ª£t_w¨
(
ah
, 
ty≥
))

1365  
Ál£
;

1368 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

1369 
	`¨9003_mci_check_gpm_off£t
(
ah
);

1371 
	`REG_WRITE
(
ah
, 
AR_RTC_RC
, 
r°_Êags
);

1373 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1375 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1376 
	`udñay
(50);

1377 i‡(
	`AR_SREV_9100
(
ah
))

1378 
	`mdñay
(10);

1380 
	`udñay
(100);

1382 
	`REG_WRITE
(
ah
, 
AR_RTC_RC
, 0);

1383 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_RTC_RC
, 
AR_RTC_RC_M
, 0, 
AH_WAIT_TIMEOUT
)) {

1384 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
RESET
, "RTC stuck in MACÑeset\n");

1385  
Ál£
;

1388 i‡(!
	`AR_SREV_9100
(
ah
))

1389 
	`REG_WRITE
(
ah
, 
AR_RC
, 0);

1391 i‡(
	`AR_SREV_9100
(
ah
))

1392 
	`udñay
(50);

1394  
åue
;

1395 
	}
}

1397 
boﬁ
 
	$©h9k_hw_£t_ª£t_powî_⁄
(
©h_hw
 *
ah
)

1399 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1401 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

1402 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
);

1403 
	`udñay
(10);

1406 
	`REG_WRITE
(
ah
, 
AR_RTC_FORCE_WAKE
, 
AR_RTC_FORCE_WAKE_EN
 |

1407 
AR_RTC_FORCE_WAKE_ON_INT
);

1409 i‡(!
	`AR_SREV_9100
(
ah
Ë&& !
	`AR_SREV_9300_20_OR_LATER
(ah))

1410 
	`REG_WRITE
(
ah
, 
AR_RC
, 
AR_RC_AHB
);

1412 
	`REG_WRITE
(
ah
, 
AR_RTC_RESET
, 0);

1414 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1416 
	`udñay
(2);

1418 i‡(!
	`AR_SREV_9100
(
ah
Ë&& !
	`AR_SREV_9300_20_OR_LATER
(ah))

1419 
	`REG_WRITE
(
ah
, 
AR_RC
, 0);

1421 
	`REG_WRITE
(
ah
, 
AR_RTC_RESET
, 1);

1423 i‡(!
	`©h9k_hw_waô
(
ah
,

1424 
AR_RTC_STATUS
,

1425 
AR_RTC_STATUS_M
,

1426 
AR_RTC_STATUS_ON
,

1427 
AH_WAIT_TIMEOUT
)) {

1428 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
RESET
, "RTCÇot waking up\n");

1429  
Ál£
;

1432  
	`©h9k_hw_£t_ª£t
(
ah
, 
ATH9K_RESET_WARM
);

1433 
	}
}

1435 
boﬁ
 
	$©h9k_hw_£t_ª£t_ªg
(
©h_hw
 *
ah
, 
u32
 
ty≥
)

1437 
boﬁ
 
ªt
 = 
Ál£
;

1439 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

1440 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
);

1441 
	`udñay
(10);

1444 
	`REG_WRITE
(
ah
, 
AR_RTC_FORCE_WAKE
,

1445 
AR_RTC_FORCE_WAKE_EN
 | 
AR_RTC_FORCE_WAKE_ON_INT
);

1447 i‡(!
ah
->
ª£t_powî_⁄
)

1448 
ty≥
 = 
ATH9K_RESET_POWER_ON
;

1450 
ty≥
) {

1451 
ATH9K_RESET_POWER_ON
:

1452 
ªt
 = 
	`©h9k_hw_£t_ª£t_powî_⁄
(
ah
);

1453 i‡(
ªt
)

1454 
ah
->
ª£t_powî_⁄
 = 
åue
;

1456 
ATH9K_RESET_WARM
:

1457 
ATH9K_RESET_COLD
:

1458 
ªt
 = 
	`©h9k_hw_£t_ª£t
(
ah
, 
ty≥
);

1464  
ªt
;

1465 
	}
}

1467 
boﬁ
 
	$©h9k_hw_chù_ª£t
(
©h_hw
 *
ah
,

1468 
©h9k_ch™√l
 *
ch™
)

1470 
ª£t_ty≥
 = 
ATH9K_RESET_WARM
;

1472 i‡(
	`AR_SREV_9280
(
ah
)) {

1473 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_OL_PWRCTRL
))

1474 
ª£t_ty≥
 = 
ATH9K_RESET_POWER_ON
;

1476 
ª£t_ty≥
 = 
ATH9K_RESET_COLD
;

1477 } i‡(
ah
->
chù_fuŒ¶ìp
 || 
	`REG_READ
◊h, 
AR_Q_TXE
) ||

1478 (
	`REG_READ
(
ah
, 
AR_CR
Ë& 
AR_CR_RXE
))

1479 
ª£t_ty≥
 = 
ATH9K_RESET_COLD
;

1481 i‡(!
	`©h9k_hw_£t_ª£t_ªg
(
ah
, 
ª£t_ty≥
))

1482  
Ál£
;

1484 i‡(!
	`©h9k_hw_£çowî
(
ah
, 
ATH9K_PM_AWAKE
))

1485  
Ál£
;

1487 
ah
->
chù_fuŒ¶ìp
 = 
Ál£
;

1489 i‡(
	`AR_SREV_9330
(
ah
))

1490 
	`¨9003_hw_öã∫Æ_ªguœt‹_≠∂y
(
ah
);

1491 
	`©h9k_hw_öô_∂l
(
ah
, 
ch™
);

1493  
åue
;

1494 
	}
}

1496 
boﬁ
 
	$©h9k_hw_ch™√l_ch™ge
(
©h_hw
 *
ah
,

1497 
©h9k_ch™√l
 *
ch™
)

1499 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1500 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

1501 
boﬁ
 
b™d_swôch
 = 
Ál£
, 
mode_diff
 = false;

1502 
u8
 
öi_ªlﬂded
 = 0;

1503 
u32
 
qnum
;

1504 
r
;

1506 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_FCC_BAND_SWITCH
) {

1507 
u32
 
Êags_diff
 = 
ch™
->
ch™√lFœgs
 ^ 
ah
->
curch™
->channelFlags;

1508 
b™d_swôch
 = !!(
Êags_diff
 & 
CHANNEL_5GHZ
);

1509 
mode_diff
 = !!(
Êags_diff
 & ~
CHANNEL_HT
);

1512 
qnum
 = 0; qnum < 
AR_NUM_QCU
; qnum++) {

1513 i‡(
	`©h9k_hw_numtx≥ndög
(
ah
, 
qnum
)) {

1514 
	`©h_dbg
(
comm⁄
, 
QUEUE
,

1515 "Tønsmô føme†≥ndög o¿queuê%d\n", 
qnum
);

1516  
Ál£
;

1520 i‡(!
	`©h9k_hw_rfbus_ªq
(
ah
)) {

1521 
	`©h_îr
(
comm⁄
, "CouldÇot kill baseband RX\n");

1522  
Ál£
;

1525 i‡(
b™d_swôch
 || 
mode_diff
) {

1526 
	`©h9k_hw_m¨k_phy_öa˘ive
(
ah
);

1527 
	`udñay
(5);

1529 i‡(
b™d_swôch
)

1530 
	`©h9k_hw_öô_∂l
(
ah
, 
ch™
);

1532 i‡(
	`©h9k_hw_Á°_ch™_ch™ge
(
ah
, 
ch™
, &
öi_ªlﬂded
)) {

1533 
	`©h_îr
(
comm⁄
, "FailedÅo do fast channel change\n");

1534  
Ál£
;

1538 
	`©h9k_hw_£t_ch™√l_ªgs
(
ah
, 
ch™
);

1540 
r
 = 
	`©h9k_hw_rf_£t_‰eq
(
ah
, 
ch™
);

1541 i‡(
r
) {

1542 
	`©h_îr
(
comm⁄
, "FailedÅo set channel\n");

1543  
Ál£
;

1545 
	`©h9k_hw_£t_˛ockøã
(
ah
);

1546 
	`©h9k_hw_≠∂y_txpowî
(
ah
, 
ch™
, 
Ál£
);

1548 
	`©h9k_hw_£t_dñè_¶›e
(
ah
, 
ch™
);

1549 
	`©h9k_hw_•ur_môig©e_‰eq
(
ah
, 
ch™
);

1551 i‡(
b™d_swôch
 || 
öi_ªlﬂded
)

1552 
ah
->
ìp_›s
->
	`£t_bﬂrd_vÆues
◊h, 
ch™
);

1554 
	`©h9k_hw_öô_bb
(
ah
, 
ch™
);

1555 
	`©h9k_hw_rfbus_d⁄e
(
ah
);

1557 i‡(
b™d_swôch
 || 
öi_ªlﬂded
) {

1558 
ah
->
ah_Êags
 |
AH_FASTCC
;

1559 
	`©h9k_hw_öô_ˇl
(
ah
, 
ch™
);

1560 
ah
->
ah_Êags
 &~
AH_FASTCC
;

1563  
åue
;

1564 
	}
}

1566 
	$©h9k_hw_≠∂y_gpio_ovîride
(
©h_hw
 *
ah
)

1568 
u32
 
gpio_mask
 = 
ah
->gpio_mask;

1569 
i
;

1571 
i
 = 0; 
gpio_mask
; i++, gpio_mask >>= 1) {

1572 i‡(!(
gpio_mask
 & 1))

1575 
	`©h9k_hw_cfg_ouçut
(
ah
, 
i
, 
AR_GPIO_OUTPUT_MUX_AS_OUTPUT
);

1576 
	`©h9k_hw_£t_gpio
(
ah
, 
i
, !!◊h->
gpio_vÆ
 & 
	`BIT
(i)));

1578 
	}
}

1580 
	$©h9k_hw_check_«v
(
©h_hw
 *
ah
)

1582 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1583 
u32
 
vÆ
;

1585 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_NAV
);

1586 i‡(
vÆ
 != 0xdeadbeef && val > 0x7fff) {

1587 
	`©h_dbg
(
comm⁄
, 
BSTUCK
, "Abn‹mÆ NAV: 0x%x\n", 
vÆ
);

1588 
	`REG_WRITE
(
ah
, 
AR_NAV
, 0);

1590 
	}
}

1591 
EXPORT_SYMBOL
(
©h9k_hw_check_«v
);

1593 
boﬁ
 
	$©h9k_hw_check_Æive
(
©h_hw
 *
ah
)

1595 
cou¡
 = 50;

1596 
u32
 
ªg
, 
œ°_vÆ
;

1598 i‡(
	`AR_SREV_9300
(
ah
))

1599  !
	`©h9k_hw_dëe˘_mac_h™g
(
ah
);

1601 i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
))

1602  
åue
;

1604 
œ°_vÆ
 = 
	`REG_READ
(
ah
, 
AR_OBS_BUS_1
);

1606 
ªg
 = 
	`REG_READ
(
ah
, 
AR_OBS_BUS_1
);

1607 i‡(
ªg
 !
œ°_vÆ
)

1608  
åue
;

1610 
	`udñay
(1);

1611 
œ°_vÆ
 = 
ªg
;

1612 i‡((
ªg
 & 0x7E7FFFEF) == 0x00702400)

1615 
ªg
 & 0x7E000B00) {

1621  
åue
;

1623 } 
cou¡
-- > 0);

1625  
Ál£
;

1626 
	}
}

1627 
EXPORT_SYMBOL
(
©h9k_hw_check_Æive
);

1629 
	$©h9k_hw_öô_mÂ
(
©h_hw
 *
ah
)

1632 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

1635 
	`REG_RMW_FIELD
(
ah
, 
AR_AES_MUTE_MASK1
, 
AR_AES_MUTE_MASK1_FC_MGMT
,

1637 i‡(
	`AR_SREV_9271
(
ah
Ë|| 
	`AR_DEVID_7010
(ah))

1638 
ah
->
sw_mgmt_¸y±o_tx
 = 
åue
;

1640 
ah
->
sw_mgmt_¸y±o_tx
 = 
Ál£
;

1641 
ah
->
sw_mgmt_¸y±o_rx
 = 
Ál£
;

1642 } i‡(
	`AR_SREV_9160_10_OR_LATER
(
ah
)) {

1644 
	`REG_CLR_BIT
(
ah
, 
AR_PCU_MISC_MODE2
,

1645 
AR_PCU_MISC_MODE2_MGMT_CRYPTO_ENABLE
);

1646 
	`REG_SET_BIT
(
ah
, 
AR_PCU_MISC_MODE2
,

1647 
AR_PCU_MISC_MODE2_NO_CRYPTO_FOR_NON_DATA_PKT
);

1648 
ah
->
sw_mgmt_¸y±o_tx
 = 
åue
;

1649 
ah
->
sw_mgmt_¸y±o_rx
 = 
åue
;

1651 
ah
->
sw_mgmt_¸y±o_tx
 = 
åue
;

1652 
ah
->
sw_mgmt_¸y±o_rx
 = 
åue
;

1654 
	}
}

1656 
	$©h9k_hw_ª£t_›mode
(
©h_hw
 *
ah
,

1657 
u32
 
macSèId1
, u32 
ßveDefA¡í«
)

1659 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1661 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1663 
	`REG_RMW
(
ah
, 
AR_STA_ID1
, 
macSèId1


1664 | 
AR_STA_ID1_RTS_USE_DEF


1665 | 
ah
->
°a_id1_deÁu…s
,

1666 ~
AR_STA_ID1_SADH_MASK
);

1667 
	`©h_hw_£tbssidmask
(
comm⁄
);

1668 
	`REG_WRITE
(
ah
, 
AR_DEF_ANTENNA
, 
ßveDefA¡í«
);

1669 
	`©h9k_hw_wrôe_associd
(
ah
);

1670 
	`REG_WRITE
(
ah
, 
AR_ISR
, ~0);

1671 
	`REG_WRITE
(
ah
, 
AR_RSSI_THR
, 
INIT_RSSI_THR
);

1673 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1675 
	`©h9k_hw_£t_›î©ög_mode
(
ah
,áh->
›mode
);

1676 
	}
}

1678 
	$©h9k_hw_öô_queues
(
©h_hw
 *
ah
)

1680 
i
;

1682 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1684 
i
 = 0; i < 
AR_NUM_DCU
; i++)

1685 
	`REG_WRITE
(
ah
, 
	`AR_DQCUMASK
(
i
), 1 << i);

1687 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

1689 
ah
->
öå_txqs
 = 0;

1690 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++)

1691 
	`©h9k_hw_ª£âxqueue
(
ah
, 
i
);

1692 
	}
}

1697 
	$©h9k_hw_öô_desc
(
©h_hw
 *
ah
)

1699 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1701 i‡(
	`AR_SREV_9100
(
ah
)) {

1702 
u32
 
mask
;

1703 
mask
 = 
	`REG_READ
(
ah
, 
AR_CFG
);

1704 i‡(
mask
 & (
AR_CFG_SWRB
 | 
AR_CFG_SWTB
 | 
AR_CFG_SWRG
)) {

1705 
	`©h_dbg
(
comm⁄
, 
RESET
, "CFG Byte Swap Set 0x%x\n",

1706 
mask
);

1708 
mask
 = 
INIT_CONFIG_STATUS
 | 
AR_CFG_SWRB
 | 
AR_CFG_SWTB
;

1709 
	`REG_WRITE
(
ah
, 
AR_CFG
, 
mask
);

1710 
	`©h_dbg
(
comm⁄
, 
RESET
, "Setting CFG 0x%x\n",

1711 
	`REG_READ
(
ah
, 
AR_CFG
));

1714 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_USB
) {

1716 i‡(
	`AR_SREV_9271
(
ah
))

1717 
	`REG_WRITE
(
ah
, 
AR_CFG
, 
AR_CFG_SWRB
 | 
AR_CFG_SWTB
);

1719 
	`REG_WRITE
(
ah
, 
AR_CFG
, 
AR_CFG_SWTD
 | 
AR_CFG_SWRD
);

1721 #ifde‡
__BIG_ENDIAN


1722 i‡(
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9340
(ah) ||

1723 
	`AR_SREV_9550
(
ah
Ë|| 
	`AR_SREV_9531
(ah) ||

1724 
	`AR_SREV_9561
(
ah
))

1725 
	`REG_RMW
(
ah
, 
AR_CFG
, 
AR_CFG_SWRB
 | 
AR_CFG_SWTB
, 0);

1727 
	`REG_WRITE
(
ah
, 
AR_CFG
, 
AR_CFG_SWTD
 | 
AR_CFG_SWRD
);

1730 
	}
}

1736 
	$©h9k_hw_do_Á°cc
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

1738 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1739 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

1740 
ªt
;

1742 i‡(
	`AR_SREV_9280
(
ah
Ë&& 
comm⁄
->
bus_›s
->
©h_bus_ty≥
 =
ATH_PCI
)

1743 
Áû
;

1745 i‡(
ah
->
chù_fuŒ¶ìp
)

1746 
Áû
;

1748 i‡(!
ah
->
curch™
)

1749 
Áû
;

1751 i‡(
ch™
->
ch™√l
 =
ah
->
curch™
->channel)

1752 
Áû
;

1754 i‡((
ah
->
curch™
->
ch™√lFœgs
 | 
ch™
->channelFlags) &

1755 (
CHANNEL_HALF
 | 
CHANNEL_QUARTER
))

1756 
Áû
;

1761 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_FCC_BAND_SWITCH
) &&

1762 ((
ch™
->
ch™√lFœgs
 ^ 
ah
->
curch™
->ch™√lFœgsË& ~
CHANNEL_HT
))

1763 
Áû
;

1765 i‡(!
	`©h9k_hw_check_Æive
(
ah
))

1766 
Áû
;

1772 i‡(
	`AR_SREV_9462
(
ah
Ë&& (ah->
ˇld©a
 &&

1773 (!
	`ã°_bô
(
TXIQCAL_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
) ||

1774 !
	`ã°_bô
(
TXCLCAL_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
) ||

1775 !
	`ã°_bô
(
RTT_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
))))

1776 
Áû
;

1778 
	`©h_dbg
(
comm⁄
, 
RESET
, "FastChannelChange for %d -> %d\n",

1779 
ah
->
curch™
->
ch™√l
, 
ch™
->channel);

1781 
ªt
 = 
	`©h9k_hw_ch™√l_ch™ge
(
ah
, 
ch™
);

1782 i‡(!
ªt
)

1783 
Áû
;

1785 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

1786 
	`¨9003_mci_2g5g_swôch
(
ah
, 
Ál£
);

1788 
	`©h9k_hw_lﬂdnf
(
ah
,áh->
curch™
);

1789 
	`©h9k_hw_°¨t_nfˇl
(
ah
, 
åue
);

1791 i‡(
	`AR_SREV_9271
(
ah
))

1792 
	`¨9002_hw_lﬂd_™i_ªg
(
ah
, 
ch™
);

1795 
Áû
:

1796  -
EINVAL
;

1797 
	}
}

1799 
u32
 
	$©h9k_hw_gë_tsf_off£t
(
time•ec
 *
œ°
, time•e¯*
cur
)

1801 
time•ec
 
ts
;

1802 
s64
 
u£c
;

1804 i‡(!
cur
) {

1805 
	`gëøwm⁄Ÿ⁄ic
(&
ts
);

1806 
cur
 = &
ts
;

1809 
u£c
 = 
cur
->
tv_£c
 * 1000000ULL + cur->
tv_n£c
 / 1000;

1810 
u£c
 -
œ°
->
tv_£c
 * 1000000ULL +Üa°->
tv_n£c
 / 1000;

1812  (
u32
Ë
u£c
;

1813 
	}
}

1814 
EXPORT_SYMBOL
(
©h9k_hw_gë_tsf_off£t
);

1816 
	$©h9k_hw_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

1817 
©h9k_hw_ˇl_d©a
 *
ˇld©a
, 
boﬁ
 
Á°cc
)

1819 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1820 
u32
 
ßveLedSèã
;

1821 
u32
 
ßveDefA¡í«
;

1822 
u32
 
macSèId1
;

1823 
u64
 
tsf
 = 0;

1824 
s64
 
u£c
 = 0;

1825 
r
;

1826 
boﬁ
 
°¨t_mci_ª£t
 = 
Ál£
;

1827 
boﬁ
 
ßve_fuŒ¶ìp
 = 
ah
->
chù_fuŒ¶ìp
;

1829 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
)) {

1830 
°¨t_mci_ª£t
 = 
	`¨9003_mci_°¨t_ª£t
(
ah
, 
ch™
);

1831 i‡(
°¨t_mci_ª£t
)

1835 i‡(!
	`©h9k_hw_£çowî
(
ah
, 
ATH9K_PM_AWAKE
))

1836  -
EIO
;

1838 i‡(
ah
->
curch™
 && !ah->
chù_fuŒ¶ìp
)

1839 
	`©h9k_hw_gënf
(
ah
,áh->
curch™
);

1841 
ah
->
ˇld©a
 = caldata;

1842 i‡(
ˇld©a
 && (
ch™
->
ch™√l
 != caldata->channel ||

1843 
ch™
->
ch™√lFœgs
 !
ˇld©a
->channelFlags)) {

1845 
	`mem£t
(
ˇld©a
, 0, (*caldata));

1846 
	`©h9k_öô_nfˇl_hi°_buf„r
(
ah
, 
ch™
);

1847 } i‡(
ˇld©a
) {

1848 
	`˛ór_bô
(
PAPRD_PACKET_SENT
, &
ˇld©a
->
ˇl_Êags
);

1850 
ah
->
noi£
 = 
	`©h9k_hw_gëch™_noi£
◊h, 
ch™
, ch™->
noi£Êo‹
);

1852 i‡(
Á°cc
) {

1853 
r
 = 
	`©h9k_hw_do_Á°cc
(
ah
, 
ch™
);

1854 i‡(!
r
)

1855  
r
;

1858 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

1859 
	`¨9003_mci_°›_bt
(
ah
, 
ßve_fuŒ¶ìp
);

1861 
ßveDefA¡í«
 = 
	`REG_READ
(
ah
, 
AR_DEF_ANTENNA
);

1862 i‡(
ßveDefA¡í«
 == 0)

1863 
ßveDefA¡í«
 = 1;

1865 
macSèId1
 = 
	`REG_READ
(
ah
, 
AR_STA_ID1
Ë& 
AR_STA_ID1_BASE_RATE_11B
;

1868 
tsf
 = 
	`©h9k_hw_gëtsf64
(
ah
);

1869 
u£c
 = 
	`ktime_to_us
(
	`ktime_gë_øw
());

1871 
ßveLedSèã
 = 
	`REG_READ
(
ah
, 
AR_CFG_LED
) &

1872 (
AR_CFG_LED_ASSOC_CTL
 | 
AR_CFG_LED_MODE_SEL
 |

1873 
AR_CFG_LED_BLINK_THRESH_SEL
 | 
AR_CFG_LED_BLINK_SLOW
);

1875 
	`©h9k_hw_m¨k_phy_öa˘ive
(
ah
);

1877 
ah
->
∑¥d_èbÀ_wrôe_d⁄e
 = 
Ál£
;

1880 i‡(
	`AR_SREV_9271
(
ah
Ë&&áh->
htc_ª£t_öô
) {

1881 
	`REG_WRITE
(
ah
,

1882 
AR9271_RESET_POWER_DOWN_CONTROL
,

1883 
AR9271_RADIO_RF_RST
);

1884 
	`udñay
(50);

1887 i‡(!
	`©h9k_hw_chù_ª£t
(
ah
, 
ch™
)) {

1888 
	`©h_îr
(
comm⁄
, "ChipÑeset failed\n");

1889  -
EINVAL
;

1893 i‡(
	`AR_SREV_9271
(
ah
Ë&&áh->
htc_ª£t_öô
) {

1894 
ah
->
htc_ª£t_öô
 = 
Ál£
;

1895 
	`REG_WRITE
(
ah
,

1896 
AR9271_RESET_POWER_DOWN_CONTROL
,

1897 
AR9271_GATE_MAC_CTL
);

1898 
	`udñay
(50);

1902 
u£c
 = 
	`ktime_to_us
(
	`ktime_gë_øw
()) - usec;

1903 
	`©h9k_hw_£âsf64
(
ah
, 
tsf
 + 
u£c
);

1905 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

1906 
	`REG_SET_BIT
(
ah
, 
AR_GPIO_INPUT_EN_VAL
, 
AR_GPIO_JTAG_DISABLE
);

1908 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

1909 
	`¨9002_hw_íabÀ_async_fifo
(
ah
);

1911 
r
 = 
	`©h9k_hw_¥o˚ss_öi
(
ah
, 
ch™
);

1912 i‡(
r
)

1913  
r
;

1915 
	`©h9k_hw_£t_rfmode
(
ah
, 
ch™
);

1917 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

1918 
	`¨9003_mci_ª£t
(
ah
, 
Ál£
, 
	`IS_CHAN_2GHZ
(
ch™
), 
ßve_fuŒ¶ìp
);

1926 i‡(
	`AR_SREV_9100
(
ah
Ë&& (
	`©h9k_hw_gëtsf64
◊hË< 
tsf
)) {

1927 
tsf
 += 1500;

1928 
	`©h9k_hw_£âsf64
(
ah
, 
tsf
);

1931 
	`©h9k_hw_öô_mÂ
(
ah
);

1933 
	`©h9k_hw_£t_dñè_¶›e
(
ah
, 
ch™
);

1934 
	`©h9k_hw_•ur_môig©e_‰eq
(
ah
, 
ch™
);

1935 
ah
->
ìp_›s
->
	`£t_bﬂrd_vÆues
◊h, 
ch™
);

1937 
	`©h9k_hw_ª£t_›mode
(
ah
, 
macSèId1
, 
ßveDefA¡í«
);

1939 
r
 = 
	`©h9k_hw_rf_£t_‰eq
(
ah
, 
ch™
);

1940 i‡(
r
)

1941  
r
;

1943 
	`©h9k_hw_£t_˛ockøã
(
ah
);

1945 
	`©h9k_hw_öô_queues
(
ah
);

1946 
	`©h9k_hw_öô_öãºu±_masks
(
ah
,áh->
›mode
);

1947 
	`©h9k_hw_™i_ˇche_öi_ªgs
(
ah
);

1948 
	`©h9k_hw_öô_qos
(
ah
);

1950 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_RFSILENT
)

1951 
	`©h9k_hw_cfg_gpio_öput
(
ah
,áh->
rfkûl_gpio
);

1953 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

1955 i‡(
	`AR_SREV_9287
(
ah
Ë&& 
	`AR_SREV_9287_13_OR_LATER
(ah)) {

1956 
	`REG_SET_BIT
(
ah
, 
AR_MAC_PCU_LOGIC_ANALYZER
,

1957 
AR_MAC_PCU_LOGIC_ANALYZER_DISBUG20768
);

1958 
	`REG_RMW_FIELD
(
ah
, 
AR_AHB_MODE
, 
AR_AHB_CUSTOM_BURST_EN
,

1959 
AR_AHB_CUSTOM_BURST_ASYNC_FIFO_VAL
);

1960 
	`REG_SET_BIT
(
ah
, 
AR_PCU_MISC_MODE2
,

1961 
AR_PCU_MISC_MODE2_ENABLE_AGGWEP
);

1964 
	`REG_SET_BIT
(
ah
, 
AR_STA_ID1
, 
AR_STA_ID1_PRESERVE_SEQNUM
);

1966 
	`©h9k_hw_£t_dma
(
ah
);

1968 i‡(!
	`©h9k_hw_mci_is_íabÀd
(
ah
))

1969 
	`REG_WRITE
(
ah
, 
AR_OBS
, 8);

1971 
	`ENABLE_REG_RMW_BUFFER
(
ah
);

1972 i‡(
ah
->
c⁄fig
.
rx_öå_môig©i⁄
) {

1973 
	`REG_RMW_FIELD
(
ah
, 
AR_RIMT
, 
AR_RIMT_LAST
,áh->
c⁄fig
.
rimt_œ°
);

1974 
	`REG_RMW_FIELD
(
ah
, 
AR_RIMT
, 
AR_RIMT_FIRST
,áh->
c⁄fig
.
rimt_fú°
);

1977 i‡(
ah
->
c⁄fig
.
tx_öå_môig©i⁄
) {

1978 
	`REG_RMW_FIELD
(
ah
, 
AR_TIMT
, 
AR_TIMT_LAST
, 300);

1979 
	`REG_RMW_FIELD
(
ah
, 
AR_TIMT
, 
AR_TIMT_FIRST
, 750);

1981 
	`REG_RMW_BUFFER_FLUSH
(
ah
);

1983 
	`©h9k_hw_öô_bb
(
ah
, 
ch™
);

1985 i‡(
ˇld©a
) {

1986 
	`˛ór_bô
(
TXIQCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

1987 
	`˛ór_bô
(
TXCLCAL_DONE
, &
ˇld©a
->
ˇl_Êags
);

1989 i‡(!
	`©h9k_hw_öô_ˇl
(
ah
, 
ch™
))

1990  -
EIO
;

1992 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
Ë&& 
	`¨9003_mci_íd_ª£t
◊h, 
ch™
, 
ˇld©a
))

1993  -
EIO
;

1995 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

1997 
	`©h9k_hw_ª°‹e_chaömask
(
ah
);

1998 
	`REG_WRITE
(
ah
, 
AR_CFG_LED
, 
ßveLedSèã
 | 
AR_CFG_SCLK_32KHZ
);

2000 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

2002 
	`©h9k_hw_gí_timî_°¨t_tsf2
(
ah
);

2004 
	`©h9k_hw_öô_desc
(
ah
);

2006 i‡(
	`©h9k_hw_btc€x_is_íabÀd
(
ah
))

2007 
	`©h9k_hw_btc€x_íabÀ
(
ah
);

2009 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2010 
	`¨9003_mci_check_bt
(
ah
);

2012 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

2013 
	`©h9k_hw_lﬂdnf
(
ah
, 
ch™
);

2014 
	`©h9k_hw_°¨t_nfˇl
(
ah
, 
åue
);

2017 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2018 
	`¨9003_hw_bb_w©chdog_c⁄fig
(
ah
);

2020 i‡(
ah
->
c⁄fig
.
hw_h™g_checks
 & 
HW_PHYRESTART_CLC_WAR
)

2021 
	`¨9003_hw_dißbÀ_phy_ª°¨t
(
ah
);

2023 
	`©h9k_hw_≠∂y_gpio_ovîride
(
ah
);

2025 i‡(
	`AR_SREV_9565
(
ah
Ë&& 
comm⁄
->
bt_™t_divîsôy
)

2026 
	`REG_SET_BIT
(
ah
, 
AR_BTCOEX_WL_LNADIV
, 
AR_BTCOEX_WL_LNADIV_FORCE_ON
);

2028 i‡(
ah
->
hw
->
c⁄f
.
ød¨_íabÀd
) {

2030 
ah
->
ød¨_c⁄f
.
ext_ch™√l
 = 
	`IS_CHAN_HT40
(
ch™
);

2031 
	`©h9k_hw_£t_ød¨_∑øms
(
ah
);

2035 
	}
}

2036 
EXPORT_SYMBOL
(
©h9k_hw_ª£t
);

2046 
	$©h9k_£t_powî_¶ìp
(
©h_hw
 *
ah
)

2048 
	`REG_SET_BIT
(
ah
, 
AR_STA_ID1
, 
AR_STA_ID1_PWR_SAV
);

2050 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

2051 
	`REG_CLR_BIT
(
ah
, 
AR_TIMER_MODE
, 0xff);

2052 
	`REG_CLR_BIT
(
ah
, 
AR_NDP2_TIMER_MODE
, 0xff);

2053 
	`REG_CLR_BIT
(
ah
, 
AR_SLP32_INC
, 0xfffff);

2055 
	`REG_WRITE
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_EN
, 0);

2056 
	`udñay
(100);

2063 
	`REG_CLR_BIT
(
ah
, 
AR_RTC_FORCE_WAKE
, 
AR_RTC_FORCE_WAKE_EN
);

2065 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2066 
	`udñay
(100);

2068 i‡(!
	`AR_SREV_9100
(
ah
Ë&& !
	`AR_SREV_9300_20_OR_LATER
(ah))

2069 
	`REG_WRITE
(
ah
, 
AR_RC
, 
AR_RC_AHB
 | 
AR_RC_HOSTIF
);

2072 i‡(!
	`AR_SREV_5416
(
ah
Ë&& !
	`AR_SREV_9271
(ah)) {

2073 
	`REG_CLR_BIT
(
ah
, 
AR_RTC_RESET
, 
AR_RTC_RESET_EN
);

2074 
	`udñay
(2);

2078 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2079 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
 & ~
AR_WA_D3_L1_DISABLE
);

2080 
	}
}

2087 
	$©h9k_£t_powî_√tw‹k_¶ìp
(
©h_hw
 *
ah
)

2089 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

2091 
	`REG_SET_BIT
(
ah
, 
AR_STA_ID1
, 
AR_STA_ID1_PWR_SAV
);

2093 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
)) {

2095 
	`REG_WRITE
(
ah
, 
AR_RTC_FORCE_WAKE
,

2096 
AR_RTC_FORCE_WAKE_ON_INT
);

2108 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2109 
	`REG_CLR_BIT
(
ah
, 
AR_MCI_INTERRUPT_RX_MSG_EN
,

2110 
AR_MCI_INTERRUPT_RX_HW_MSG_MASK
);

2115 
	`REG_CLR_BIT
(
ah
, 
AR_RTC_FORCE_WAKE
, 
AR_RTC_FORCE_WAKE_EN
);

2117 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2118 
	`udñay
(30);

2122 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2123 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
 & ~
AR_WA_D3_L1_DISABLE
);

2124 
	}
}

2126 
boﬁ
 
	$©h9k_hw_£t_powî_awake
(
©h_hw
 *
ah
)

2128 
u32
 
vÆ
;

2129 
i
;

2132 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

2133 
	`REG_WRITE
(
ah
, 
AR_WA
,áh->
WARegVÆ
);

2134 
	`udñay
(10);

2137 i‡((
	`REG_READ
(
ah
, 
AR_RTC_STATUS
) &

2138 
AR_RTC_STATUS_M
Ë=
AR_RTC_STATUS_SHUTDOWN
) {

2139 i‡(!
	`©h9k_hw_£t_ª£t_ªg
(
ah
, 
ATH9K_RESET_POWER_ON
)) {

2140  
Ál£
;

2142 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2143 
	`©h9k_hw_öô_∂l
(
ah
, 
NULL
);

2145 i‡(
	`AR_SREV_9100
(
ah
))

2146 
	`REG_SET_BIT
(
ah
, 
AR_RTC_RESET
,

2147 
AR_RTC_RESET_EN
);

2149 
	`REG_SET_BIT
(
ah
, 
AR_RTC_FORCE_WAKE
,

2150 
AR_RTC_FORCE_WAKE_EN
);

2151 i‡(
	`AR_SREV_9100
(
ah
))

2152 
	`mdñay
(10);

2154 
	`udñay
(50);

2156 
i
 = 
POWER_UP_TIME
 / 50; i > 0; i--) {

2157 
vÆ
 = 
	`REG_READ
(
ah
, 
AR_RTC_STATUS
Ë& 
AR_RTC_STATUS_M
;

2158 i‡(
vÆ
 =
AR_RTC_STATUS_ON
)

2160 
	`udñay
(50);

2161 
	`REG_SET_BIT
(
ah
, 
AR_RTC_FORCE_WAKE
,

2162 
AR_RTC_FORCE_WAKE_EN
);

2164 i‡(
i
 == 0) {

2165 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

2167 
POWER_UP_TIME
 / 20);

2168  
Ál£
;

2171 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2172 
	`¨9003_mci_£t_powî_awake
(
ah
);

2174 
	`REG_CLR_BIT
(
ah
, 
AR_STA_ID1
, 
AR_STA_ID1_PWR_SAV
);

2176  
åue
;

2177 
	}
}

2179 
boﬁ
 
	$©h9k_hw_£çowî
(
©h_hw
 *
ah
, 
©h9k_powî_mode
 
mode
)

2181 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2182 
°©us
 = 
åue
;

2183 c⁄° *
modes
[] = {

2190 i‡(
ah
->
powî_mode
 =
mode
)

2191  
°©us
;

2193 
	`©h_dbg
(
comm⁄
, 
RESET
, "%s -> %s\n",

2194 
modes
[
ah
->
powî_mode
], modes[
mode
]);

2196 
mode
) {

2197 
ATH9K_PM_AWAKE
:

2198 
°©us
 = 
	`©h9k_hw_£t_powî_awake
(
ah
);

2200 
ATH9K_PM_FULL_SLEEP
:

2201 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2202 
	`¨9003_mci_£t_fuŒ_¶ìp
(
ah
);

2204 
	`©h9k_£t_powî_¶ìp
(
ah
);

2205 
ah
->
chù_fuŒ¶ìp
 = 
åue
;

2207 
ATH9K_PM_NETWORK_SLEEP
:

2208 
	`©h9k_£t_powî_√tw‹k_¶ìp
(
ah
);

2211 
	`©h_îr
(
comm⁄
, "Unknow¿powî modê%u\n", 
mode
);

2212  
Ál£
;

2214 
ah
->
powî_mode
 = 
mode
;

2222 i‡(!(
ah
->
ah_Êags
 & 
AH_UNPLUGGED
))

2223 
	`ATH_DBG_WARN_ON_ONCE
(!
°©us
);

2225  
°©us
;

2226 
	}
}

2227 
EXPORT_SYMBOL
(
©h9k_hw_£çowî
);

2233 
	$©h9k_hw_bóc⁄öô
(
©h_hw
 *
ah
, 
u32
 
√xt_bóc⁄
, u32 
bóc⁄_≥riod
)

2235 
Êags
 = 0;

2237 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

2239 
ah
->
›mode
) {

2240 
NL80211_IFTYPE_ADHOC
:

2241 
	`REG_SET_BIT
(
ah
, 
AR_TXCFG
,

2242 
AR_TXCFG_ADHOC_BEACON_ATIM_TX_POLICY
);

2243 
NL80211_IFTYPE_MESH_POINT
:

2244 
NL80211_IFTYPE_AP
:

2245 
	`REG_WRITE
(
ah
, 
AR_NEXT_TBTT_TIMER
, 
√xt_bóc⁄
);

2246 
	`REG_WRITE
(
ah
, 
AR_NEXT_DMA_BEACON_ALERT
, 
√xt_bóc⁄
 -

2247 
	`TU_TO_USEC
(
ah
->
c⁄fig
.
dma_bóc⁄_ª•⁄£_time
));

2248 
	`REG_WRITE
(
ah
, 
AR_NEXT_SWBA
, 
√xt_bóc⁄
 -

2249 
	`TU_TO_USEC
(
ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
));

2250 
Êags
 |=

2251 
AR_TBTT_TIMER_EN
 | 
AR_DBA_TIMER_EN
 | 
AR_SWBA_TIMER_EN
;

2254 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
BEACON
,

2255 "%s: unsuµ‹ãd opmode: %d\n", 
__func__
, 
ah
->
›mode
);

2260 
	`REG_WRITE
(
ah
, 
AR_BEACON_PERIOD
, 
bóc⁄_≥riod
);

2261 
	`REG_WRITE
(
ah
, 
AR_DMA_BEACON_PERIOD
, 
bóc⁄_≥riod
);

2262 
	`REG_WRITE
(
ah
, 
AR_SWBA_PERIOD
, 
bóc⁄_≥riod
);

2264 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

2266 
	`REG_SET_BIT
(
ah
, 
AR_TIMER_MODE
, 
Êags
);

2267 
	}
}

2268 
EXPORT_SYMBOL
(
©h9k_hw_bóc⁄öô
);

2270 
	$©h9k_hw_£t_°a_bóc⁄_timîs
(
©h_hw
 *
ah
,

2271 c⁄° 
©h9k_bóc⁄_°©e
 *
bs
)

2273 
u32
 
√xtTbâ
, 
bóc⁄ötvÆ
, 
dtim≥riod
, 
bóc⁄timeout
;

2274 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

2275 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2277 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

2279 
	`REG_WRITE
(
ah
, 
AR_NEXT_TBTT_TIMER
, 
bs
->
bs_√xâbâ
);

2280 
	`REG_WRITE
(
ah
, 
AR_BEACON_PERIOD
, 
bs
->
bs_ötvÆ
);

2281 
	`REG_WRITE
(
ah
, 
AR_DMA_BEACON_PERIOD
, 
bs
->
bs_ötvÆ
);

2283 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

2285 
	`REG_RMW_FIELD
(
ah
, 
AR_RSSI_THR
,

2286 
AR_RSSI_THR_BM_THR
, 
bs
->
bs_bmis°hªshﬁd
);

2288 
bóc⁄ötvÆ
 = 
bs
->
bs_ötvÆ
;

2290 i‡(
bs
->
bs_¶ìpduøti⁄
 > 
bóc⁄ötvÆ
)

2291 
bóc⁄ötvÆ
 = 
bs
->
bs_¶ìpduøti⁄
;

2293 
dtim≥riod
 = 
bs
->
bs_dtim≥riod
;

2294 i‡(
bs
->
bs_¶ìpduøti⁄
 > 
dtim≥riod
)

2295 
dtim≥riod
 = 
bs
->
bs_¶ìpduøti⁄
;

2297 i‡(
bóc⁄ötvÆ
 =
dtim≥riod
)

2298 
√xtTbâ
 = 
bs
->
bs_√xtdtim
;

2300 
√xtTbâ
 = 
bs
->
bs_√xâbâ
;

2302 
	`©h_dbg
(
comm⁄
, 
BEACON
, "√xàDTIM %d\n", 
bs
->
bs_√xtdtim
);

2303 
	`©h_dbg
(
comm⁄
, 
BEACON
, "√xàbóc⁄ %d\n", 
√xtTbâ
);

2304 
	`©h_dbg
(
comm⁄
, 
BEACON
, "bóc⁄Öîiod %d\n", 
bóc⁄ötvÆ
);

2305 
	`©h_dbg
(
comm⁄
, 
BEACON
, "DTIMÖîiod %d\n", 
dtim≥riod
);

2307 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

2309 
	`REG_WRITE
(
ah
, 
AR_NEXT_DTIM
, 
bs
->
bs_√xtdtim
 - 
SLEEP_SLOP
);

2310 
	`REG_WRITE
(
ah
, 
AR_NEXT_TIM
, 
√xtTbâ
 - 
SLEEP_SLOP
);

2312 
	`REG_WRITE
(
ah
, 
AR_SLEEP1
,

2313 
	`SM
((
CAB_TIMEOUT_VAL
 << 3), 
AR_SLEEP1_CAB_TIMEOUT
)

2314 | 
AR_SLEEP1_ASSUME_DTIM
);

2316 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
)

2317 
bóc⁄timeout
 = (
BEACON_TIMEOUT_VAL
 << 3);

2319 
bóc⁄timeout
 = 
MIN_BEACON_TIMEOUT_VAL
;

2321 
	`REG_WRITE
(
ah
, 
AR_SLEEP2
,

2322 
	`SM
(
bóc⁄timeout
, 
AR_SLEEP2_BEACON_TIMEOUT
));

2324 
	`REG_WRITE
(
ah
, 
AR_TIM_PERIOD
, 
bóc⁄ötvÆ
);

2325 
	`REG_WRITE
(
ah
, 
AR_DTIM_PERIOD
, 
dtim≥riod
);

2327 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

2329 
	`REG_SET_BIT
(
ah
, 
AR_TIMER_MODE
,

2330 
AR_TBTT_TIMER_EN
 | 
AR_TIM_TIMER_EN
 |

2331 
AR_DTIM_TIMER_EN
);

2334 
	`REG_WRITE
(
ah
, 
AR_TSFOOR_THRESHOLD
, 
bs
->
bs_tsfo‹_thªshﬁd
);

2335 
	}
}

2336 
EXPORT_SYMBOL
(
©h9k_hw_£t_°a_bóc⁄_timîs
);

2342 
u8
 
	$fixup_chaömask
(
u8
 
chù_chaömask
, u8 
ì¥om_chaömask
)

2344 
ì¥om_chaömask
 &
chù_chaömask
;

2345 i‡(
ì¥om_chaömask
)

2346  
ì¥om_chaömask
;

2348  
chù_chaömask
;

2349 
	}
}

2364 
boﬁ
 
	$©h9k_hw_dfs_ã°ed
(
©h_hw
 *
ah
)

2367 
ah
->
hw_vîsi⁄
.
macVîsi⁄
) {

2369 
AR_SREV_VERSION_9280
:

2371 
AR_SREV_VERSION_9580
:

2372  
åue
;

2374  
Ál£
;

2376 
	}
}

2378 
	$©h9k_hw_fûl_ˇp_öfo
(
©h_hw
 *
ah
)

2380 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

2381 
©h_ªguœt‹y
 *
ªguœt‹y
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

2382 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2384 
u16
 
ìvÆ
;

2385 
u8
 
™t_div_˘l1
, 
tx_chaömask
, 
rx_chaömask
;

2387 
ìvÆ
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_REG_0
);

2388 
ªguœt‹y
->
cuºít_rd
 = 
ìvÆ
;

2390 i‡(
ah
->
›mode
 !
NL80211_IFTYPE_AP
 &&

2391 
ah
->
hw_vîsi⁄
.
subvíd‹id
 =
AR_SUBVENDOR_ID_NEW_A
) {

2392 i‡(
ªguœt‹y
->
cuºít_rd
 == 0x64 ||

2393 
ªguœt‹y
->
cuºít_rd
 == 0x65)

2394 
ªguœt‹y
->
cuºít_rd
 += 5;

2395 i‡(
ªguœt‹y
->
cuºít_rd
 == 0x41)

2396 
ªguœt‹y
->
cuºít_rd
 = 0x43;

2397 
	`©h_dbg
(
comm⁄
, 
REGULATORY
, "regdomain mappedÅo 0x%x\n",

2398 
ªguœt‹y
->
cuºít_rd
);

2401 
ìvÆ
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_OP_MODE
);

2403 i‡(
ìvÆ
 & 
AR5416_OPFLAGS_11A
) {

2404 i‡(
ah
->
dißbÀ_5ghz
)

2405 
	`©h_w¨n
(
comm⁄
, "disabling 5GHz band\n");

2407 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_5GHZ
;

2410 i‡(
ìvÆ
 & 
AR5416_OPFLAGS_11G
) {

2411 i‡(
ah
->
dißbÀ_2ghz
)

2412 
	`©h_w¨n
(
comm⁄
, "disabling 2GHz band\n");

2414 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_2GHZ
;

2417 i‡((
pC≠
->
hw_ˇps
 & (
ATH9K_HW_CAP_2GHZ
 | 
ATH9K_HW_CAP_5GHZ
)) == 0) {

2418 
	`©h_îr
(
comm⁄
, "both bandsáre disabled\n");

2419  -
EINVAL
;

2422 i‡(
	`AR_SREV_9485
(
ah
) ||

2423 
	`AR_SREV_9285
(
ah
) ||

2424 
	`AR_SREV_9330
(
ah
) ||

2425 
	`AR_SREV_9565
(
ah
))

2426 
pC≠
->
chù_chaömask
 = 1;

2427 i‡(!
	`AR_SREV_9280_20_OR_LATER
(
ah
))

2428 
pC≠
->
chù_chaömask
 = 7;

2429 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
) ||

2430 
	`AR_SREV_9340
(
ah
) ||

2431 
	`AR_SREV_9462
(
ah
) ||

2432 
	`AR_SREV_9531
(
ah
))

2433 
pC≠
->
chù_chaömask
 = 3;

2435 
pC≠
->
chù_chaömask
 = 7;

2437 
pC≠
->
tx_chaömask
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_TX_MASK
);

2442 i‡((
ah
->
hw_vîsi⁄
.
devid
 =
AR5416_DEVID_PCI
) &&

2443 !(
ìvÆ
 & 
AR5416_OPFLAGS_11A
) &&

2444 !(
	`AR_SREV_9271
(
ah
)))

2446 
pC≠
->
rx_chaömask
 = 
	`©h9k_hw_gpio_gë
(
ah
, 0) ? 0x5 : 0x7;

2447 i‡(
	`AR_SREV_9100
(
ah
))

2448 
pC≠
->
rx_chaömask
 = 0x7;

2451 
pC≠
->
rx_chaömask
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_RX_MASK
);

2453 
pC≠
->
tx_chaömask
 = 
	`fixup_chaömask
’C≠->
chù_chaömask
,ÖCap->tx_chainmask);

2454 
pC≠
->
rx_chaömask
 = 
	`fixup_chaömask
’C≠->
chù_chaömask
,ÖCap->rx_chainmask);

2455 
ah
->
txchaömask
 = 
pC≠
->
tx_chaömask
;

2456 
ah
->
rxchaömask
 = 
pC≠
->
rx_chaömask
;

2458 
ah
->
misc_mode
 |
AR_PCU_MIC_NEW_LOC_ENA
;

2461 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2462 
ah
->
misc_mode
 |
AR_PCU_ALWAYS_PERFORM_KEYSEARCH
;

2464 
comm⁄
->
¸y±_ˇps
 |
ATH_CRYPT_CAP_CIPHER_AESCCM
;

2466 i‡(
ah
->
hw_vîsi⁄
.
devid
 !
AR2427_DEVID_PCIE
)

2467 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_HT
;

2469 
pC≠
->
hw_ˇps
 &~
ATH9K_HW_CAP_HT
;

2471 i‡(
	`AR_SREV_9271
(
ah
))

2472 
pC≠
->
num_gpio_pös
 = 
AR9271_NUM_GPIO
;

2473 i‡(
	`AR_DEVID_7010
(
ah
))

2474 
pC≠
->
num_gpio_pös
 = 
AR7010_NUM_GPIO
;

2475 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2476 
pC≠
->
num_gpio_pös
 = 
AR9300_NUM_GPIO
;

2477 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
))

2478 
pC≠
->
num_gpio_pös
 = 
AR9287_NUM_GPIO
;

2479 i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
))

2480 
pC≠
->
num_gpio_pös
 = 
AR9285_NUM_GPIO
;

2481 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

2482 
pC≠
->
num_gpio_pös
 = 
AR928X_NUM_GPIO
;

2484 
pC≠
->
num_gpio_pös
 = 
AR_NUM_GPIO
;

2486 i‡(
	`AR_SREV_9160_10_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9100
(ah))

2487 
pC≠
->
πs_aggr_limô
 = 
ATH_AMPDU_LIMIT_MAX
;

2489 
pC≠
->
πs_aggr_limô
 = (8 * 1024);

2491 #ifde‡
CONFIG_ATH9K_RFKILL


2492 
ah
->
rfsûít
 =áh->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_RF_SILENT
);

2493 i‡(
ah
->
rfsûít
 & 
EEP_RFSILENT_ENABLED
) {

2494 
ah
->
rfkûl_gpio
 =

2495 
	`MS
(
ah
->
rfsûít
, 
EEP_RFSILENT_GPIO_SEL
);

2496 
ah
->
rfkûl_pﬁ¨ôy
 =

2497 
	`MS
(
ah
->
rfsûít
, 
EEP_RFSILENT_POLARITY
);

2499 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_RFSILENT
;

2502 i‡(
	`AR_SREV_9271
(
ah
Ë|| 
	`AR_SREV_9300_20_OR_LATER
(ah))

2503 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_AUTOSLEEP
;

2505 
pC≠
->
hw_ˇps
 &~
ATH9K_HW_CAP_AUTOSLEEP
;

2507 i‡(
	`AR_SREV_9280
(
ah
Ë|| 
	`AR_SREV_9285
(ah))

2508 
pC≠
->
hw_ˇps
 &~
ATH9K_HW_CAP_4KB_SPLITTRANS
;

2510 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_4KB_SPLITTRANS
;

2512 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

2513 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_EDMA
 | 
ATH9K_HW_CAP_FASTCLOCK
;

2514 i‡(!
	`AR_SREV_9330
(
ah
Ë&& !
	`AR_SREV_9485
(ah) &&

2515 !
	`AR_SREV_9561
(
ah
Ë&& !
	`AR_SREV_9565
(ah))

2516 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_LDPC
;

2518 
pC≠
->
rx_hp_qdïth
 = 
ATH9K_HW_RX_HP_QDEPTH
;

2519 
pC≠
->
rx_Õ_qdïth
 = 
ATH9K_HW_RX_LP_QDEPTH
;

2520 
pC≠
->
rx_°©us_Àn
 = (
¨9003_rxs
);

2521 
pC≠
->
tx_desc_Àn
 = (
¨9003_txc
);

2522 
pC≠
->
txs_Àn
 = (
¨9003_txs
);

2524 
pC≠
->
tx_desc_Àn
 = (
©h_desc
);

2525 i‡(
	`AR_SREV_9280_20
(
ah
))

2526 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_FASTCLOCK
;

2529 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2530 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_RAC_SUPPORTED
;

2532 i‡(
	`AR_SREV_9561
(
ah
))

2533 
ah
->
ít_mode
 = 0x3BDA000;

2534 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2535 
ah
->
ít_mode
 = 
	`REG_READ
◊h, 
AR_ENT_OTP
);

2537 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9271
(ah))

2538 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_SGI_20
;

2540 i‡(
	`AR_SREV_9285
(
ah
)) {

2541 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_MODAL_VER
) >= 3) {

2542 
™t_div_˘l1
 =

2543 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_ANT_DIV_CTL1
);

2544 i‡((
™t_div_˘l1
 & 0x1) && ((ant_div_ctl1 >> 3) & 0x1)) {

2545 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_ANT_DIV_COMB
;

2546 
	`©h_öfo
(
comm⁄
, "Enable LNA combining\n");

2551 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

2552 i‡(
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_CHAIN_MASK_REDUCE
))

2553 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_APM
;

2556 i‡(
	`AR_SREV_9330
(
ah
Ë|| 
	`AR_SREV_9485
◊hË|| 
	`AR_SREV_9565
(ah)) {

2557 
™t_div_˘l1
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_ANT_DIV_CTL1
);

2558 i‡((
™t_div_˘l1
 >> 0x6) == 0x3) {

2559 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_ANT_DIV_COMB
;

2560 
	`©h_öfo
(
comm⁄
, "Enable LNA combining\n");

2564 i‡(
	`©h9k_hw_dfs_ã°ed
(
ah
))

2565 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_DFS
;

2567 
tx_chaömask
 = 
pC≠
->tx_chainmask;

2568 
rx_chaömask
 = 
pC≠
->rx_chainmask;

2569 
tx_chaömask
 || 
rx_chaömask
) {

2570 i‡(
tx_chaömask
 & 
	`BIT
(0))

2571 
pC≠
->
max_txchaös
++;

2572 i‡(
rx_chaömask
 & 
	`BIT
(0))

2573 
pC≠
->
max_rxchaös
++;

2575 
tx_chaömask
 >>= 1;

2576 
rx_chaömask
 >>= 1;

2579 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

2580 i‡(!(
ah
->
ít_mode
 & 
AR_ENT_OTP_49GHZ_DISABLE
))

2581 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_MCI
;

2583 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
))

2584 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_RTT
;

2587 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
) &&

2588 
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
EEP_PAPRD
))

2589 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_PAPRD
;

2591 #ifde‡
CONFIG_ATH9K_WOW


2592 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9565_11_OR_LATER
(ah))

2593 
ah
->
wow
.
max_∑âîns
 = 
MAX_NUM_PATTERN
;

2595 
ah
->
wow
.
max_∑âîns
 = 
MAX_NUM_PATTERN_LEGACY
;

2599 
	}
}

2605 
	$©h9k_hw_gpio_cfg_ouçut_mux
(
©h_hw
 *
ah
,

2606 
u32
 
gpio
, u32 
ty≥
)

2608 
addr
;

2609 
u32
 
gpio_shi·
, 
tmp
;

2611 i‡(
gpio
 > 11)

2612 
addr
 = 
AR_GPIO_OUTPUT_MUX3
;

2613 i‡(
gpio
 > 5)

2614 
addr
 = 
AR_GPIO_OUTPUT_MUX2
;

2616 
addr
 = 
AR_GPIO_OUTPUT_MUX1
;

2618 
gpio_shi·
 = (
gpio
 % 6) * 5;

2620 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)

2621 || (
addr
 !
AR_GPIO_OUTPUT_MUX1
)) {

2622 
	`REG_RMW
(
ah
, 
addr
, (
ty≥
 << 
gpio_shi·
),

2623 (0x1‡<< 
gpio_shi·
));

2625 
tmp
 = 
	`REG_READ
(
ah
, 
addr
);

2626 
tmp
 = ((tmp & 0x1F0) << 1) | (tmp & ~0x1F0);

2627 
tmp
 &~(0x1‡<< 
gpio_shi·
);

2628 
tmp
 |(
ty≥
 << 
gpio_shi·
);

2629 
	`REG_WRITE
(
ah
, 
addr
, 
tmp
);

2631 
	}
}

2633 
	$©h9k_hw_cfg_gpio_öput
(
©h_hw
 *
ah
, 
u32
 
gpio
)

2635 
u32
 
gpio_shi·
;

2637 
	`BUG_ON
(
gpio
 >
ah
->
ˇps
.
num_gpio_pös
);

2639 i‡(
	`AR_DEVID_7010
(
ah
)) {

2640 
gpio_shi·
 = 
gpio
;

2641 
	`REG_RMW
(
ah
, 
AR7010_GPIO_OE
,

2642 (
AR7010_GPIO_OE_AS_INPUT
 << 
gpio_shi·
),

2643 (
AR7010_GPIO_OE_MASK
 << 
gpio_shi·
));

2647 
gpio_shi·
 = 
gpio
 << 1;

2648 
	`REG_RMW
(
ah
,

2649 
AR_GPIO_OE_OUT
,

2650 (
AR_GPIO_OE_OUT_DRV_NO
 << 
gpio_shi·
),

2651 (
AR_GPIO_OE_OUT_DRV
 << 
gpio_shi·
));

2652 
	}
}

2653 
EXPORT_SYMBOL
(
©h9k_hw_cfg_gpio_öput
);

2655 
u32
 
	$©h9k_hw_gpio_gë
(
©h_hw
 *
ah
, 
u32
 
gpio
)

2657 
	#MS_REG_READ
(
x
, 
y
) \

2658 (
	`MS
(
	`REG_READ
(
ah
, 
AR_GPIO_IN_OUT
), 
x
##
_GPIO_IN_VAL
Ë& (
	`AR_GPIO_BIT
(
y
)))

	)

2660 i‡(
gpio
 >
ah
->
ˇps
.
num_gpio_pös
)

2663 i‡(
	`AR_DEVID_7010
(
ah
)) {

2664 
u32
 
vÆ
;

2665 
vÆ
 = 
	`REG_READ
(
ah
, 
AR7010_GPIO_IN
);

2666  (
	`MS
(
vÆ
, 
AR7010_GPIO_IN_VAL
Ë& 
	`AR_GPIO_BIT
(
gpio
)) == 0;

2667 } i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2668  (
	`MS
(
	`REG_READ
(
ah
, 
AR_GPIO_IN
), 
AR9300_GPIO_IN_VAL
) &

2669 
	`AR_GPIO_BIT
(
gpio
)) != 0;

2670 i‡(
	`AR_SREV_9271
(
ah
))

2671  
	`MS_REG_READ
(
AR9271
, 
gpio
) != 0;

2672 i‡(
	`AR_SREV_9287_11_OR_LATER
(
ah
))

2673  
	`MS_REG_READ
(
AR9287
, 
gpio
) != 0;

2674 i‡(
	`AR_SREV_9285_12_OR_LATER
(
ah
))

2675  
	`MS_REG_READ
(
AR9285
, 
gpio
) != 0;

2676 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

2677  
	`MS_REG_READ
(
AR928X
, 
gpio
) != 0;

2679  
	`MS_REG_READ
(
AR
, 
gpio
) != 0;

2680 
	}
}

2681 
EXPORT_SYMBOL
(
©h9k_hw_gpio_gë
);

2683 
	$©h9k_hw_cfg_ouçut
(
©h_hw
 *
ah
, 
u32
 
gpio
,

2684 
u32
 
ah_sig«l_ty≥
)

2686 
u32
 
gpio_shi·
;

2688 i‡(
	`AR_DEVID_7010
(
ah
)) {

2689 
gpio_shi·
 = 
gpio
;

2690 
	`REG_RMW
(
ah
, 
AR7010_GPIO_OE
,

2691 (
AR7010_GPIO_OE_AS_OUTPUT
 << 
gpio_shi·
),

2692 (
AR7010_GPIO_OE_MASK
 << 
gpio_shi·
));

2696 
	`©h9k_hw_gpio_cfg_ouçut_mux
(
ah
, 
gpio
, 
ah_sig«l_ty≥
);

2697 
gpio_shi·
 = 2 * 
gpio
;

2698 
	`REG_RMW
(
ah
,

2699 
AR_GPIO_OE_OUT
,

2700 (
AR_GPIO_OE_OUT_DRV_ALL
 << 
gpio_shi·
),

2701 (
AR_GPIO_OE_OUT_DRV
 << 
gpio_shi·
));

2702 
	}
}

2703 
EXPORT_SYMBOL
(
©h9k_hw_cfg_ouçut
);

2705 
	$©h9k_hw_£t_gpio
(
©h_hw
 *
ah
, 
u32
 
gpio
, u32 
vÆ
)

2707 i‡(
	`AR_DEVID_7010
(
ah
)) {

2708 
vÆ
 = val ? 0 : 1;

2709 
	`REG_RMW
(
ah
, 
AR7010_GPIO_OUT
, ((
vÆ
&1Ë<< 
gpio
),

2710 
	`AR_GPIO_BIT
(
gpio
));

2714 i‡(
	`AR_SREV_9271
(
ah
))

2715 
vÆ
 = ~val;

2717 i‡((1 << 
gpio
Ë& 
AR_GPIO_OE_OUT_MASK
)

2718 
	`REG_RMW
(
ah
, 
AR_GPIO_IN_OUT
, ((
vÆ
 & 1Ë<< 
gpio
),

2719 
	`AR_GPIO_BIT
(
gpio
));

2721 
	`gpio_£t_vÆue
(
gpio
, 
vÆ
 & 1);

2722 
	}
}

2723 
EXPORT_SYMBOL
(
©h9k_hw_£t_gpio
);

2725 
	$©h9k_hw_ªque°_gpio
(
©h_hw
 *
ah
, 
u32
 
gpio
, c⁄° *
œbñ
)

2727 i‡(
gpio
 >
ah
->
ˇps
.
num_gpio_pös
)

2730 
	`gpio_ªque°_⁄e
(
gpio
, 
GPIOF_DIR_OUT
 | 
GPIOF_INIT_LOW
, 
œbñ
);

2731 
	}
}

2732 
EXPORT_SYMBOL
(
©h9k_hw_ªque°_gpio
);

2734 
	$©h9k_hw_£è¡í«
(
©h_hw
 *
ah
, 
u32
 
™ã¬a
)

2736 
	`REG_WRITE
(
ah
, 
AR_DEF_ANTENNA
, (
™ã¬a
 & 0x7));

2737 
	}
}

2738 
EXPORT_SYMBOL
(
©h9k_hw_£è¡í«
);

2744 
u32
 
	$©h9k_hw_gërxfûãr
(
©h_hw
 *
ah
)

2746 
u32
 
bôs
 = 
	`REG_READ
(
ah
, 
AR_RX_FILTER
);

2747 
u32
 
phybôs
 = 
	`REG_READ
(
ah
, 
AR_PHY_ERR
);

2749 i‡(
phybôs
 & 
AR_PHY_ERR_RADAR
)

2750 
bôs
 |
ATH9K_RX_FILTER_PHYRADAR
;

2751 i‡(
phybôs
 & (
AR_PHY_ERR_OFDM_TIMING
 | 
AR_PHY_ERR_CCK_TIMING
))

2752 
bôs
 |
ATH9K_RX_FILTER_PHYERR
;

2754  
bôs
;

2755 
	}
}

2756 
EXPORT_SYMBOL
(
©h9k_hw_gërxfûãr
);

2758 
	$©h9k_hw_£åxfûãr
(
©h_hw
 *
ah
, 
u32
 
bôs
)

2760 
u32
 
phybôs
;

2762 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

2764 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah))

2765 
bôs
 |
ATH9K_RX_FILTER_CONTROL_WRAPPER
;

2767 
	`REG_WRITE
(
ah
, 
AR_RX_FILTER
, 
bôs
);

2769 
phybôs
 = 0;

2770 i‡(
bôs
 & 
ATH9K_RX_FILTER_PHYRADAR
)

2771 
phybôs
 |
AR_PHY_ERR_RADAR
;

2772 i‡(
bôs
 & 
ATH9K_RX_FILTER_PHYERR
)

2773 
phybôs
 |
AR_PHY_ERR_OFDM_TIMING
 | 
AR_PHY_ERR_CCK_TIMING
;

2774 
	`REG_WRITE
(
ah
, 
AR_PHY_ERR
, 
phybôs
);

2776 i‡(
phybôs
)

2777 
	`REG_SET_BIT
(
ah
, 
AR_RXCFG
, 
AR_RXCFG_ZLFDMA
);

2779 
	`REG_CLR_BIT
(
ah
, 
AR_RXCFG
, 
AR_RXCFG_ZLFDMA
);

2781 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

2782 
	}
}

2783 
EXPORT_SYMBOL
(
©h9k_hw_£åxfûãr
);

2785 
boﬁ
 
	$©h9k_hw_phy_dißbÀ
(
©h_hw
 *
ah
)

2787 i‡(
	`©h9k_hw_mci_is_íabÀd
(
ah
))

2788 
	`¨9003_mci_bt_gaö_˘æ
(
ah
);

2790 i‡(!
	`©h9k_hw_£t_ª£t_ªg
(
ah
, 
ATH9K_RESET_WARM
))

2791  
Ál£
;

2793 
	`©h9k_hw_öô_∂l
(
ah
, 
NULL
);

2794 
ah
->
htc_ª£t_öô
 = 
åue
;

2795  
åue
;

2796 
	}
}

2797 
EXPORT_SYMBOL
(
©h9k_hw_phy_dißbÀ
);

2799 
boﬁ
 
	$©h9k_hw_dißbÀ
(
©h_hw
 *
ah
)

2801 i‡(!
	`©h9k_hw_£çowî
(
ah
, 
ATH9K_PM_AWAKE
))

2802  
Ál£
;

2804 i‡(!
	`©h9k_hw_£t_ª£t_ªg
(
ah
, 
ATH9K_RESET_COLD
))

2805  
Ál£
;

2807 
	`©h9k_hw_öô_∂l
(
ah
, 
NULL
);

2808  
åue
;

2809 
	}
}

2810 
EXPORT_SYMBOL
(
©h9k_hw_dißbÀ
);

2812 
	$gë_™ã¬a_gaö
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

2814 
ì¥om_∑øm
 
gaö_∑øm
;

2816 i‡(
	`IS_CHAN_2GHZ
(
ch™
))

2817 
gaö_∑øm
 = 
EEP_ANTENNA_GAIN_2G
;

2819 
gaö_∑øm
 = 
EEP_ANTENNA_GAIN_5G
;

2821  
ah
->
ìp_›s
->
	`gë_ì¥om
◊h, 
gaö_∑øm
);

2822 
	}
}

2824 
	$©h9k_hw_≠∂y_txpowî
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

2825 
boﬁ
 
ã°
)

2827 
©h_ªguœt‹y
 *
ªg
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

2828 
õì80211_ch™√l
 *
ch™√l
;

2829 
ch™_pwr
, 
√w_pwr
, 
max_gaö
;

2830 
™t_gaö
, 
™t_ªdu˘i⁄
 = 0;

2832 i‡(!
ch™
)

2835 
ch™√l
 = 
ch™
->chan;

2836 
ch™_pwr
 = 
	`mö_t
(, 
ch™√l
->
max_powî
 * 2, 
MAX_RATE_POWER
);

2837 
√w_pwr
 = 
	`mö_t
(, 
ch™_pwr
, 
ªg
->
powî_limô
);

2838 
max_gaö
 = 
ch™_pwr
 - 
√w_pwr
 + 
ch™√l
->
max_™ã¬a_gaö
 * 2;

2840 
™t_gaö
 = 
	`gë_™ã¬a_gaö
(
ah
, 
ch™
);

2841 i‡(
™t_gaö
 > 
max_gaö
)

2842 
™t_ªdu˘i⁄
 = 
™t_gaö
 - 
max_gaö
;

2844 
ah
->
ìp_›s
->
	`£t_txpowî
◊h, 
ch™
,

2845 
	`©h9k_ªgd_gë_˘l
(
ªg
, 
ch™
),

2846 
™t_ªdu˘i⁄
, 
√w_pwr
, 
ã°
);

2847 
	}
}

2849 
	$©h9k_hw_£t_txpowîlimô
(
©h_hw
 *
ah
, 
u32
 
limô
, 
boﬁ
 
ã°
)

2851 
©h_ªguœt‹y
 *
ªg
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

2852 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

2853 
õì80211_ch™√l
 *
ch™√l
 = 
ch™
->chan;

2855 
ªg
->
powî_limô
 = 
	`mö_t
(
u32
, 
limô
, 
MAX_RATE_POWER
);

2856 i‡(
ã°
)

2857 
ch™√l
->
max_powî
 = 
MAX_RATE_POWER
 / 2;

2859 
	`©h9k_hw_≠∂y_txpowî
(
ah
, 
ch™
, 
ã°
);

2861 i‡(
ã°
)

2862 
ch™√l
->
max_powî
 = 
	`DIV_ROUND_UP
(
ªg
->
max_powî_Àvñ
, 2);

2863 
	}
}

2864 
EXPORT_SYMBOL
(
©h9k_hw_£t_txpowîlimô
);

2866 
	$©h9k_hw_£t›mode
(
©h_hw
 *
ah
)

2868 
	`©h9k_hw_£t_›î©ög_mode
(
ah
,áh->
›mode
);

2869 
	}
}

2870 
EXPORT_SYMBOL
(
©h9k_hw_£t›mode
);

2872 
	$©h9k_hw_£tmˇ°fûãr
(
©h_hw
 *
ah
, 
u32
 
fûãr0
, u32 
fûãr1
)

2874 
	`REG_WRITE
(
ah
, 
AR_MCAST_FIL0
, 
fûãr0
);

2875 
	`REG_WRITE
(
ah
, 
AR_MCAST_FIL1
, 
fûãr1
);

2876 
	}
}

2877 
EXPORT_SYMBOL
(
©h9k_hw_£tmˇ°fûãr
);

2879 
	$©h9k_hw_wrôe_associd
(
©h_hw
 *
ah
)

2881 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2883 
	`REG_WRITE
(
ah
, 
AR_BSS_ID0
, 
	`gë_u«lig√d_À32
(
comm⁄
->
curbssid
));

2884 
	`REG_WRITE
(
ah
, 
AR_BSS_ID1
, 
	`gë_u«lig√d_À16
(
comm⁄
->
curbssid
 + 4) |

2885 ((
comm⁄
->
cuøid
 & 0x3fffË<< 
AR_BSS_ID1_AID_S
));

2886 
	}
}

2887 
EXPORT_SYMBOL
(
©h9k_hw_wrôe_associd
);

2889 
	#ATH9K_MAX_TSF_READ
 10

	)

2891 
u64
 
	$©h9k_hw_gëtsf64
(
©h_hw
 *
ah
)

2893 
u32
 
tsf_lowî
, 
tsf_uµî1
, 
tsf_uµî2
;

2894 
i
;

2896 
tsf_uµî1
 = 
	`REG_READ
(
ah
, 
AR_TSF_U32
);

2897 
i
 = 0; i < 
ATH9K_MAX_TSF_READ
; i++) {

2898 
tsf_lowî
 = 
	`REG_READ
(
ah
, 
AR_TSF_L32
);

2899 
tsf_uµî2
 = 
	`REG_READ
(
ah
, 
AR_TSF_U32
);

2900 i‡(
tsf_uµî2
 =
tsf_uµî1
)

2902 
tsf_uµî1
 = 
tsf_uµî2
;

2905 
	`WARN_ON
–
i
 =
ATH9K_MAX_TSF_READ
 );

2907  (((
u64
)
tsf_uµî1
 << 32Ë| 
tsf_lowî
);

2908 
	}
}

2909 
EXPORT_SYMBOL
(
©h9k_hw_gëtsf64
);

2911 
	$©h9k_hw_£âsf64
(
©h_hw
 *
ah
, 
u64
 
tsf64
)

2913 
	`REG_WRITE
(
ah
, 
AR_TSF_L32
, 
tsf64
 & 0xffffffff);

2914 
	`REG_WRITE
(
ah
, 
AR_TSF_U32
, (
tsf64
 >> 32) & 0xffffffff);

2915 
	}
}

2916 
EXPORT_SYMBOL
(
©h9k_hw_£âsf64
);

2918 
	$©h9k_hw_ª£t_tsf
(
©h_hw
 *
ah
)

2920 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_SLP32_MODE
, 
AR_SLP32_TSF_WRITE_STATUS
, 0,

2921 
AH_TSF_WRITE_TIMEOUT
))

2922 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
RESET
,

2925 
	`REG_WRITE
(
ah
, 
AR_RESET_TSF
, 
AR_RESET_TSF_ONCE
);

2926 
	}
}

2927 
EXPORT_SYMBOL
(
©h9k_hw_ª£t_tsf
);

2929 
	$©h9k_hw_£t_tsÁdju°
(
©h_hw
 *
ah
, 
boﬁ
 
£t
)

2931 i‡(
£t
)

2932 
ah
->
misc_mode
 |
AR_PCU_TX_ADD_TSF
;

2934 
ah
->
misc_mode
 &~
AR_PCU_TX_ADD_TSF
;

2935 
	}
}

2936 
EXPORT_SYMBOL
(
©h9k_hw_£t_tsÁdju°
);

2938 
	$©h9k_hw_£t11nmac2040
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
)

2940 
u32
 
macmode
;

2942 i‡(
	`IS_CHAN_HT40
(
ch™
Ë&& !
ah
->
c⁄fig
.
cwm_ign‹e_extcˇ
)

2943 
macmode
 = 
AR_2040_JOINED_RX_CLEAR
;

2945 
macmode
 = 0;

2947 
	`REG_WRITE
(
ah
, 
AR_2040_MODE
, 
macmode
);

2948 
	}
}

2952 c⁄° 
©h_gí_timî_c⁄figuøti⁄
 
	ggí_tmr_c⁄figuøti⁄
[] =

2954 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2955 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2956 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2957 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2958 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2959 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2960 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2961 {
AR_NEXT_NDP_TIMER
, 
AR_NDP_PERIOD
, 
AR_TIMER_MODE
, 0x0080},

2962 {
AR_NEXT_NDP2_TIMER
, 
AR_NDP2_PERIOD
, 
AR_NDP2_TIMER_MODE
, 0x0001},

2963 {
AR_NEXT_NDP2_TIMER
 + 1*4, 
AR_NDP2_PERIOD
 + 1*4,

2964 
AR_NDP2_TIMER_MODE
, 0x0002},

2965 {
AR_NEXT_NDP2_TIMER
 + 2*4, 
AR_NDP2_PERIOD
 + 2*4,

2966 
AR_NDP2_TIMER_MODE
, 0x0004},

2967 {
AR_NEXT_NDP2_TIMER
 + 3*4, 
AR_NDP2_PERIOD
 + 3*4,

2968 
AR_NDP2_TIMER_MODE
, 0x0008},

2969 {
AR_NEXT_NDP2_TIMER
 + 4*4, 
AR_NDP2_PERIOD
 + 4*4,

2970 
AR_NDP2_TIMER_MODE
, 0x0010},

2971 {
AR_NEXT_NDP2_TIMER
 + 5*4, 
AR_NDP2_PERIOD
 + 5*4,

2972 
AR_NDP2_TIMER_MODE
, 0x0020},

2973 {
AR_NEXT_NDP2_TIMER
 + 6*4, 
AR_NDP2_PERIOD
 + 6*4,

2974 
AR_NDP2_TIMER_MODE
, 0x0040},

2975 {
AR_NEXT_NDP2_TIMER
 + 7*4, 
AR_NDP2_PERIOD
 + 7*4,

2976 
AR_NDP2_TIMER_MODE
, 0x0080}

2981 
u32
 
	$©h9k_hw_gëtsf32
(
©h_hw
 *
ah
)

2983  
	`REG_READ
(
ah
, 
AR_TSF_L32
);

2984 
	}
}

2985 
EXPORT_SYMBOL
(
©h9k_hw_gëtsf32
);

2987 
	$©h9k_hw_gí_timî_°¨t_tsf2
(
©h_hw
 *
ah
)

2989 
©h_gí_timî_èbÀ
 *
timî_èbÀ
 = &
ah
->
hw_gí_timîs
;

2991 i‡(
timî_èbÀ
->
tsf2_íabÀd
) {

2992 
	`REG_SET_BIT
(
ah
, 
AR_DIRECT_CONNECT
, 
AR_DC_AP_STA_EN
);

2993 
	`REG_SET_BIT
(
ah
, 
AR_RESET_TSF
, 
AR_RESET_TSF2_ONCE
);

2995 
	}
}

2997 
©h_gí_timî
 *
	$©h_gí_timî_Æloc
(
©h_hw
 *
ah
,

2998 (*
åiggî
)(*),

2999 (*
ovîÊow
)(*),

3000 *
¨g
,

3001 
u8
 
timî_ödex
)

3003 
©h_gí_timî_èbÀ
 *
timî_èbÀ
 = &
ah
->
hw_gí_timîs
;

3004 
©h_gí_timî
 *
timî
;

3006 i‡((
timî_ödex
 < 
AR_FIRST_NDP_TIMER
) ||

3007 (
timî_ödex
 >
ATH_MAX_GEN_TIMER
))

3008  
NULL
;

3010 i‡((
timî_ödex
 > 
AR_FIRST_NDP_TIMER
) &&

3011 !
	`AR_SREV_9300_20_OR_LATER
(
ah
))

3012  
NULL
;

3014 
timî
 = 
	`kzÆloc
((
©h_gí_timî
), 
GFP_KERNEL
);

3015 i‡(
timî
 =
NULL
)

3016  
NULL
;

3019 
timî_èbÀ
->
timîs
[
timî_ödex
] = 
timî
;

3020 
timî
->
ödex
 = 
timî_ödex
;

3021 
timî
->
åiggî
 =Årigger;

3022 
timî
->
ovîÊow
 = overflow;

3023 
timî
->
¨g
 =árg;

3025 i‡((
timî_ödex
 > 
AR_FIRST_NDP_TIMER
Ë&& !
timî_èbÀ
->
tsf2_íabÀd
) {

3026 
timî_èbÀ
->
tsf2_íabÀd
 = 
åue
;

3027 
	`©h9k_hw_gí_timî_°¨t_tsf2
(
ah
);

3030  
timî
;

3031 
	}
}

3032 
EXPORT_SYMBOL
(
©h_gí_timî_Æloc
);

3034 
	$©h9k_hw_gí_timî_°¨t
(
©h_hw
 *
ah
,

3035 
©h_gí_timî
 *
timî
,

3036 
u32
 
timî_√xt
,

3037 
u32
 
timî_≥riod
)

3039 
©h_gí_timî_èbÀ
 *
timî_èbÀ
 = &
ah
->
hw_gí_timîs
;

3040 
u32
 
mask
 = 0;

3042 
timî_èbÀ
->
timî_mask
 |
	`BIT
(
timî
->
ödex
);

3047 
	`REG_WRITE
(
ah
, 
gí_tmr_c⁄figuøti⁄
[
timî
->
ödex
].
√xt_addr
,

3048 
timî_√xt
);

3049 
	`REG_WRITE
(
ah
, 
gí_tmr_c⁄figuøti⁄
[
timî
->
ödex
].
≥riod_addr
,

3050 
timî_≥riod
);

3051 
	`REG_SET_BIT
(
ah
, 
gí_tmr_c⁄figuøti⁄
[
timî
->
ödex
].
mode_addr
,

3052 
gí_tmr_c⁄figuøti⁄
[
timî
->
ödex
].
mode_mask
);

3054 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

3060 i‡((
timî
->
ödex
 < 
AR_GEN_TIMER_BANK_1_LEN
))

3061 
	`REG_CLR_BIT
(
ah
, 
AR_MAC_PCU_GEN_TIMER_TSF_SEL
,

3062 (1 << 
timî
->
ödex
));

3064 
	`REG_SET_BIT
(
ah
, 
AR_MAC_PCU_GEN_TIMER_TSF_SEL
,

3065 (1 << 
timî
->
ödex
));

3068 i‡(
timî
->
åiggî
)

3069 
mask
 |
	`SM
(
	`AR_GENTMR_BIT
(
timî
->
ödex
),

3070 
AR_IMR_S5_GENTIMER_TRIG
);

3071 i‡(
timî
->
ovîÊow
)

3072 
mask
 |
	`SM
(
	`AR_GENTMR_BIT
(
timî
->
ödex
),

3073 
AR_IMR_S5_GENTIMER_THRESH
);

3075 
	`REG_SET_BIT
(
ah
, 
AR_IMR_S5
, 
mask
);

3077 i‡((
ah
->
imask
 & 
ATH9K_INT_GENTIMER
) == 0) {

3078 
ah
->
imask
 |
ATH9K_INT_GENTIMER
;

3079 
	`©h9k_hw_£t_öãºu±s
(
ah
);

3081 
	}
}

3082 
EXPORT_SYMBOL
(
©h9k_hw_gí_timî_°¨t
);

3084 
	$©h9k_hw_gí_timî_°›
(
©h_hw
 *
ah
, 
©h_gí_timî
 *
timî
)

3086 
©h_gí_timî_èbÀ
 *
timî_èbÀ
 = &
ah
->
hw_gí_timîs
;

3089 
	`REG_CLR_BIT
(
ah
, 
gí_tmr_c⁄figuøti⁄
[
timî
->
ödex
].
mode_addr
,

3090 
gí_tmr_c⁄figuøti⁄
[
timî
->
ödex
].
mode_mask
);

3092 i‡(
	`AR_SREV_9462
(
ah
Ë|| 
	`AR_SREV_9565
(ah)) {

3096 i‡((
timî
->
ödex
 >
AR_GEN_TIMER_BANK_1_LEN
)) {

3097 
	`REG_CLR_BIT
(
ah
, 
AR_MAC_PCU_GEN_TIMER_TSF_SEL
,

3098 (1 << 
timî
->
ödex
));

3103 
	`REG_CLR_BIT
(
ah
, 
AR_IMR_S5
,

3104 (
	`SM
(
	`AR_GENTMR_BIT
(
timî
->
ödex
), 
AR_IMR_S5_GENTIMER_THRESH
) |

3105 
	`SM
(
	`AR_GENTMR_BIT
(
timî
->
ödex
), 
AR_IMR_S5_GENTIMER_TRIG
)));

3107 
timî_èbÀ
->
timî_mask
 &~
	`BIT
(
timî
->
ödex
);

3109 i‡(
timî_èbÀ
->
timî_mask
 == 0) {

3110 
ah
->
imask
 &~
ATH9K_INT_GENTIMER
;

3111 
	`©h9k_hw_£t_öãºu±s
(
ah
);

3113 
	}
}

3114 
EXPORT_SYMBOL
(
©h9k_hw_gí_timî_°›
);

3116 
	$©h_gí_timî_‰ì
(
©h_hw
 *
ah
, 
©h_gí_timî
 *
timî
)

3118 
©h_gí_timî_èbÀ
 *
timî_èbÀ
 = &
ah
->
hw_gí_timîs
;

3121 
timî_èbÀ
->
timîs
[
timî
->
ödex
] = 
NULL
;

3122 
	`k‰ì
(
timî
);

3123 
	}
}

3124 
EXPORT_SYMBOL
(
©h_gí_timî_‰ì
);

3129 
	$©h_gí_timî_i§
(
©h_hw
 *
ah
)

3131 
©h_gí_timî_èbÀ
 *
timî_èbÀ
 = &
ah
->
hw_gí_timîs
;

3132 
©h_gí_timî
 *
timî
;

3133 
åiggî_mask
, 
thªsh_mask
;

3134 
ödex
;

3137 
åiggî_mask
 = 
ah
->
öå_gí_timî_åiggî
;

3138 
thªsh_mask
 = 
ah
->
öå_gí_timî_thªsh
;

3139 
åiggî_mask
 &
timî_èbÀ
->
timî_mask
;

3140 
thªsh_mask
 &
timî_èbÀ
->
timî_mask
;

3142 
	`f‹_óch_£t_bô
(
ödex
, &
thªsh_mask
, 
	`ARRAY_SIZE
(
timî_èbÀ
->
timîs
)) {

3143 
timî
 = 
timî_èbÀ
->
timîs
[
ödex
];

3144 i‡(!
timî
)

3146 i‡(!
timî
->
ovîÊow
)

3149 
åiggî_mask
 &~
	`BIT
(
ödex
);

3150 
timî
->
	`ovîÊow
—imî->
¨g
);

3153 
	`f‹_óch_£t_bô
(
ödex
, &
åiggî_mask
, 
	`ARRAY_SIZE
(
timî_èbÀ
->
timîs
)) {

3154 
timî
 = 
timî_èbÀ
->
timîs
[
ödex
];

3155 i‡(!
timî
)

3157 i‡(!
timî
->
åiggî
)

3159 
timî
->
	`åiggî
—imî->
¨g
);

3161 
	}
}

3162 
EXPORT_SYMBOL
(
©h_gí_timî_i§
);

3169 
u32
 
	mvîsi⁄
;

3170 c⁄° * 
	m«me
;

3171 } 
	g©h_mac_bb_«mes
[] = {

3173 { 
AR_SREV_VERSION_5416_PCI
, "5416" },

3174 { 
AR_SREV_VERSION_5416_PCIE
, "5418" },

3175 { 
AR_SREV_VERSION_9100
, "9100" },

3176 { 
AR_SREV_VERSION_9160
, "9160" },

3178 { 
AR_SREV_VERSION_9280
, "9280" },

3179 { 
AR_SREV_VERSION_9285
, "9285" },

3180 { 
AR_SREV_VERSION_9287
, "9287" },

3181 { 
AR_SREV_VERSION_9271
, "9271" },

3182 { 
AR_SREV_VERSION_9300
, "9300" },

3183 { 
AR_SREV_VERSION_9330
, "9330" },

3184 { 
AR_SREV_VERSION_9340
, "9340" },

3185 { 
AR_SREV_VERSION_9485
, "9485" },

3186 { 
AR_SREV_VERSION_9462
, "9462" },

3187 { 
AR_SREV_VERSION_9550
, "9550" },

3188 { 
AR_SREV_VERSION_9565
, "9565" },

3189 { 
AR_SREV_VERSION_9531
, "9531" },

3190 { 
AR_SREV_VERSION_9561
, "9561" },

3195 
u16
 
	mvîsi⁄
;

3196 c⁄° * 
	m«me
;

3197 } 
	g©h_rf_«mes
[] = {

3199 { 
AR_RAD5133_SREV_MAJOR
, "5133" },

3200 { 
AR_RAD5122_SREV_MAJOR
, "5122" },

3201 { 
AR_RAD2133_SREV_MAJOR
, "2133" },

3202 { 
AR_RAD2122_SREV_MAJOR
, "2122" }

3208 c⁄° *
	$©h9k_hw_mac_bb_«me
(
u32
 
mac_bb_vîsi⁄
)

3210 
i
;

3212 
i
=0; i<
	`ARRAY_SIZE
(
©h_mac_bb_«mes
); i++) {

3213 i‡(
©h_mac_bb_«mes
[
i
].
vîsi⁄
 =
mac_bb_vîsi⁄
) {

3214  
©h_mac_bb_«mes
[
i
].
«me
;

3219 
	}
}

3225 c⁄° *
	$©h9k_hw_rf_«me
(
u16
 
rf_vîsi⁄
)

3227 
i
;

3229 
i
=0; i<
	`ARRAY_SIZE
(
©h_rf_«mes
); i++) {

3230 i‡(
©h_rf_«mes
[
i
].
vîsi⁄
 =
rf_vîsi⁄
) {

3231  
©h_rf_«mes
[
i
].
«me
;

3236 
	}
}

3238 
	$©h9k_hw_«me
(
©h_hw
 *
ah
, *
hw_«me
, 
size_t
 
Àn
)

3240 
u£d
;

3243 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

3244 
u£d
 = 
	`s˙¥ötf
(
hw_«me
, 
Àn
,

3246 
	`©h9k_hw_mac_bb_«me
(
ah
->
hw_vîsi⁄
.
macVîsi⁄
),

3247 
ah
->
hw_vîsi⁄
.
macRev
);

3250 
u£d
 = 
	`s˙¥ötf
(
hw_«me
, 
Àn
,

3252 
	`©h9k_hw_mac_bb_«me
(
ah
->
hw_vîsi⁄
.
macVîsi⁄
),

3253 
ah
->
hw_vîsi⁄
.
macRev
,

3254 
	`©h9k_hw_rf_«me
((
ah
->
hw_vîsi⁄
.
™Æog5GhzRev


3255 & 
AR_RADIO_SREV_MAJOR
)),

3256 
ah
->
hw_vîsi⁄
.
phyRev
);

3259 
hw_«me
[
u£d
] = '\0';

3260 
	}
}

3261 
EXPORT_SYMBOL
(
©h9k_hw_«me
);

	@hw.h

17 #i‚de‡
HW_H


18 
	#HW_H


	)

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/dñay.h
>

22 
	~<löux/io.h
>

23 
	~<löux/fúmw¨e.h
>

25 
	~"mac.h
"

26 
	~"™i.h
"

27 
	~"ì¥om.h
"

28 
	~"ˇlib.h
"

29 
	~"ªg.h
"

30 
	~"ªg_mci.h
"

31 
	~"phy.h
"

32 
	~"btc€x.h
"

33 
	~"dy«ck.h
"

35 
	~"../ªgd.h
"

37 
	#ATHEROS_VENDOR_ID
 0x168c

	)

39 
	#AR5416_DEVID_PCI
 0x0023

	)

40 
	#AR5416_DEVID_PCIE
 0x0024

	)

41 
	#AR9160_DEVID_PCI
 0x0027

	)

42 
	#AR9280_DEVID_PCI
 0x0029

	)

43 
	#AR9280_DEVID_PCIE
 0x002a

	)

44 
	#AR9285_DEVID_PCIE
 0x002b

	)

45 
	#AR2427_DEVID_PCIE
 0x002c

	)

46 
	#AR9287_DEVID_PCI
 0x002d

	)

47 
	#AR9287_DEVID_PCIE
 0x002e

	)

48 
	#AR9300_DEVID_PCIE
 0x0030

	)

49 
	#AR9300_DEVID_AR9340
 0x0031

	)

50 
	#AR9300_DEVID_AR9485_PCIE
 0x0032

	)

51 
	#AR9300_DEVID_AR9580
 0x0033

	)

52 
	#AR9300_DEVID_AR9462
 0x0034

	)

53 
	#AR9300_DEVID_AR9330
 0x0035

	)

54 
	#AR9300_DEVID_QCA955X
 0x0038

	)

55 
	#AR9485_DEVID_AR1111
 0x0037

	)

56 
	#AR9300_DEVID_AR9565
 0x0036

	)

57 
	#AR9300_DEVID_AR953X
 0x003d

	)

58 
	#AR9300_DEVID_QCA956X
 0x003f

	)

60 
	#AR5416_AR9100_DEVID
 0x000b

	)

62 
	#AR_SUBVENDOR_ID_NOG
 0x0e11

	)

63 
	#AR_SUBVENDOR_ID_NEW_A
 0x7065

	)

64 
	#AR5416_MAGIC
 0x19641014

	)

66 
	#AR9280_COEX2WIRE_SUBSYSID
 0x309b

	)

67 
	#AT9285_COEX3WIRE_SA_SUBSYSID
 0x30Ø

	)

68 
	#AT9285_COEX3WIRE_DA_SUBSYSID
 0x30ab

	)

70 
	#ATH_AMPDU_LIMIT_MAX
 (64 * 1024 - 1)

	)

72 
	#ATH_DEFAULT_NOISE_FLOOR
 -95

	)

74 
	#ATH9K_RSSI_BAD
 -128

	)

76 
	#ATH9K_NUM_CHANNELS
 38

	)

79 
	#REG_WRITE
(
_ah
, 
_ªg
, 
_vÆ
) \

80 (
_ah
)->
ªg_›s
.
	`wrôe
((_ah), (
_vÆ
), (
_ªg
))

	)

82 
	#REG_READ
(
_ah
, 
_ªg
) \

83 (
_ah
)->
ªg_›s
.
	`ªad
((_ah), (
_ªg
))

	)

85 
	#REG_READ_MULTI
(
_ah
, 
_addr
, 
_vÆ
, 
_˙t
) \

86 (
_ah
)->
ªg_›s
.
	`mu…i_ªad
((_ah), (
_addr
), (
_vÆ
), (
_˙t
))

	)

88 
	#REG_RMW
(
_ah
, 
_ªg
, 
_£t
, 
_˛r
) \

89 (
_ah
)->
ªg_›s
.
	`rmw
((_ah), (
_ªg
), (
_£t
), (
_˛r
))

	)

91 
	#ENABLE_REGWRITE_BUFFER
(
_ah
) \

93 i‡((
_ah
)->
ªg_›s
.
íabÀ_wrôe_buf„r
) \

94 (
_ah
)->
ªg_›s
.
	`íabÀ_wrôe_buf„r
((_ah)); \

95 } 0)

	)

97 
	#REGWRITE_BUFFER_FLUSH
(
_ah
) \

99 i‡((
_ah
)->
ªg_›s
.
wrôe_Êush
) \

100 (
_ah
)->
ªg_›s
.
	`wrôe_Êush
((_ah)); \

101 } 0)

	)

103 
	#ENABLE_REG_RMW_BUFFER
(
_ah
) \

105 i‡((
_ah
)->
ªg_›s
.
íabÀ_rmw_buf„r
) \

106 (
_ah
)->
ªg_›s
.
	`íabÀ_rmw_buf„r
((_ah)); \

107 } 0)

	)

109 
	#REG_RMW_BUFFER_FLUSH
(
_ah
) \

111 i‡((
_ah
)->
ªg_›s
.
rmw_Êush
) \

112 (
_ah
)->
ªg_›s
.
	`rmw_Êush
((_ah)); \

113 } 0)

	)

115 
	#PR_EEP
(
_s
, 
_vÆ
) \

117 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "%20s : %10d\n",\

118 
_s
, (
_vÆ
)); \

119 } 0)

	)

121 
	#SM
(
_v
, 
_f
Ë(((_vË<< _f##
_S
Ë& _f)

	)

122 
	#MS
(
_v
, 
_f
Ë(((_vË& _fË>> _f##
_S
)

	)

123 
	#REG_RMW_FIELD
(
_a
, 
_r
, 
_f
, 
_v
) \

124 
	`REG_RMW
(
_a
, 
_r
, (((
_v
Ë<< 
_f
##
_S
Ë& _f), (_f))

	)

125 
	#REG_READ_FIELD
(
_a
, 
_r
, 
_f
) \

126 (((
	`REG_READ
(
_a
, 
_r
Ë& 
_f
Ë>> _f##
_S
))

	)

127 
	#REG_SET_BIT
(
_a
, 
_r
, 
_f
) \

128 
	`REG_RMW
(
_a
, 
_r
, (
_f
), 0)

	)

129 
	#REG_CLR_BIT
(
_a
, 
_r
, 
_f
) \

130 
	`REG_RMW
(
_a
, 
_r
, 0, (
_f
))

	)

132 
	#DO_DELAY
(
x
) do { \

133 i‡(((++(
x
) % 64) == 0) && \

134 (
	`©h9k_hw_comm⁄
(
ah
)->
bus_›s
->
©h_bus_ty≥
 \

135 !
ATH_USB
)) \

136 
	`udñay
(1); \

137 } 0)

	)

139 
	#REG_WRITE_ARRAY
(
öüºay
, 
cﬁumn
, 
ªgWr
) \

140 
	`©h9k_hw_wrôe_¨øy
(
ah
, 
öüºay
, 
cﬁumn
, &(
ªgWr
))

	)

141 
	#REG_READ_ARRAY
(
ah
, 
¨øy
, 
size
) \

142 
	`©h9k_hw_ªad_¨øy
(
ah
, 
¨øy
, 
size
)

	)

144 
	#AR_GPIO_OUTPUT_MUX_AS_OUTPUT
 0

	)

145 
	#AR_GPIO_OUTPUT_MUX_AS_PCIE_ATTENTION_LED
 1

	)

146 
	#AR_GPIO_OUTPUT_MUX_AS_PCIE_POWER_LED
 2

	)

147 
	#AR_GPIO_OUTPUT_MUX_AS_TX_FRAME
 3

	)

148 
	#AR_GPIO_OUTPUT_MUX_AS_RX_CLEAR_EXTERNAL
 4

	)

149 
	#AR_GPIO_OUTPUT_MUX_AS_MAC_NETWORK_LED
 5

	)

150 
	#AR_GPIO_OUTPUT_MUX_AS_MAC_POWER_LED
 6

	)

151 
	#AR_GPIO_OUTPUT_MUX_AS_MCI_WLAN_DATA
 0x16

	)

152 
	#AR_GPIO_OUTPUT_MUX_AS_MCI_WLAN_CLK
 0x17

	)

153 
	#AR_GPIO_OUTPUT_MUX_AS_MCI_BT_DATA
 0x18

	)

154 
	#AR_GPIO_OUTPUT_MUX_AS_MCI_BT_CLK
 0x19

	)

155 
	#AR_GPIO_OUTPUT_MUX_AS_WL_IN_TX
 0x14

	)

156 
	#AR_GPIO_OUTPUT_MUX_AS_WL_IN_RX
 0x13

	)

157 
	#AR_GPIO_OUTPUT_MUX_AS_BT_IN_TX
 9

	)

158 
	#AR_GPIO_OUTPUT_MUX_AS_BT_IN_RX
 8

	)

159 
	#AR_GPIO_OUTPUT_MUX_AS_RUCKUS_STROBE
 0x1d

	)

160 
	#AR_GPIO_OUTPUT_MUX_AS_RUCKUS_DATA
 0x1e

	)

162 
	#AR_GPIOD_MASK
 0x00001FFF

	)

163 
	#AR_GPIO_BIT
(
_gpio
Ë(1 << (_gpio))

	)

165 
	#BASE_ACTIVATE_DELAY
 100

	)

166 
	#RTC_PLL_SETTLE_DELAY
 (
	`AR_SREV_9340
(
ah
Ë? 1000 : 100)

	)

167 
	#COEF_SCALE_S
 24

	)

168 
	#HT40_CHANNEL_CENTER_SHIFT
 10

	)

170 
	#ATH9K_ANTENNA0_CHAINMASK
 0x1

	)

171 
	#ATH9K_ANTENNA1_CHAINMASK
 0x2

	)

173 
	#ATH9K_NUM_DMA_DEBUG_REGS
 8

	)

174 
	#ATH9K_NUM_QUEUES
 10

	)

176 
	#MAX_RATE_POWER
 63

	)

177 
	#AH_WAIT_TIMEOUT
 100000

	)

178 
	#AH_TSF_WRITE_TIMEOUT
 100

	)

179 
	#AH_TIME_QUANTUM
 10

	)

180 
	#AR_KEYTABLE_SIZE
 128

	)

181 
	#POWER_UP_TIME
 10000

	)

182 
	#SPUR_RSSI_THRESH
 40

	)

183 
	#UPPER_5G_SUB_BAND_START
 5700

	)

184 
	#MID_5G_SUB_BAND_START
 5400

	)

186 
	#CAB_TIMEOUT_VAL
 10

	)

187 
	#BEACON_TIMEOUT_VAL
 10

	)

188 
	#MIN_BEACON_TIMEOUT_VAL
 1

	)

189 
	#SLEEP_SLOP
 
	`TU_TO_USEC
(3)

	)

191 
	#INIT_CONFIG_STATUS
 0x00000000

	)

192 
	#INIT_RSSI_THR
 0x00000700

	)

193 
	#INIT_BCON_CNTRL_REG
 0x00000000

	)

195 
	#TU_TO_USEC
(
_tu
Ë((_tuË<< 10)

	)

197 
	#ATH9K_HW_RX_HP_QDEPTH
 16

	)

198 
	#ATH9K_HW_RX_LP_QDEPTH
 128

	)

200 
	#PAPRD_GAIN_TABLE_ENTRIES
 32

	)

201 
	#PAPRD_TABLE_SZ
 24

	)

202 
	#PAPRD_IDEAL_AGC2_PWR_RANGE
 0xe0

	)

209 
	#KAL_FRAME_LEN
 28

	)

210 
	#KAL_FRAME_TYPE
 0x2

	)

211 
	#KAL_FRAME_SUB_TYPE
 0x4

	)

212 
	#KAL_DURATION_ID
 0x3d

	)

213 
	#KAL_NUM_DATA_WORDS
 6

	)

214 
	#KAL_NUM_DESC_WORDS
 12

	)

215 
	#KAL_ANTENNA_MODE
 1

	)

216 
	#KAL_TO_DS
 1

	)

217 
	#KAL_DELAY
 4

	)

218 
	#KAL_TIMEOUT
 900

	)

220 
	#MAX_PATTERN_SIZE
 256

	)

221 
	#MAX_PATTERN_MASK_SIZE
 32

	)

222 
	#MAX_NUM_PATTERN
 16

	)

223 
	#MAX_NUM_PATTERN_LEGACY
 8

	)

224 
	#MAX_NUM_USER_PATTERN
 6

	)

231 
	#AH_WOW_USER_PATTERN_EN
 
	`BIT
(0)

	)

232 
	#AH_WOW_MAGIC_PATTERN_EN
 
	`BIT
(1)

	)

233 
	#AH_WOW_LINK_CHANGE
 
	`BIT
(2)

	)

234 
	#AH_WOW_BEACON_MISS
 
	`BIT
(3)

	)

236 
	e©h_hw_txq_subty≥
 {

237 
	mATH_TXQ_AC_BK
 = 0,

238 
	mATH_TXQ_AC_BE
 = 1,

239 
	mATH_TXQ_AC_VI
 = 2,

240 
	mATH_TXQ_AC_VO
 = 3,

243 
	e©h_öi_subsys
 {

244 
	mATH_INI_PRE
 = 0,

245 
	mATH_INI_CORE
,

246 
	mATH_INI_POST
,

247 
	mATH_INI_NUM_SPLIT
,

250 
	e©h9k_hw_ˇps
 {

251 
	mATH9K_HW_CAP_HT
 = 
BIT
(0),

252 
	mATH9K_HW_CAP_RFSILENT
 = 
BIT
(1),

253 
	mATH9K_HW_CAP_AUTOSLEEP
 = 
BIT
(2),

254 
	mATH9K_HW_CAP_4KB_SPLITTRANS
 = 
BIT
(3),

255 
	mATH9K_HW_CAP_EDMA
 = 
BIT
(4),

256 
	mATH9K_HW_CAP_RAC_SUPPORTED
 = 
BIT
(5),

257 
	mATH9K_HW_CAP_LDPC
 = 
BIT
(6),

258 
	mATH9K_HW_CAP_FASTCLOCK
 = 
BIT
(7),

259 
	mATH9K_HW_CAP_SGI_20
 = 
BIT
(8),

260 
	mATH9K_HW_CAP_ANT_DIV_COMB
 = 
BIT
(10),

261 
	mATH9K_HW_CAP_2GHZ
 = 
BIT
(11),

262 
	mATH9K_HW_CAP_5GHZ
 = 
BIT
(12),

263 
	mATH9K_HW_CAP_APM
 = 
BIT
(13),

264 #ifde‡
CONFIG_ATH9K_PCOEM


265 
	mATH9K_HW_CAP_RTT
 = 
BIT
(14),

266 
	mATH9K_HW_CAP_MCI
 = 
BIT
(15),

267 
	mATH9K_HW_CAP_BT_ANT_DIV
 = 
BIT
(17),

269 
	mATH9K_HW_CAP_RTT
 = 0,

270 
	mATH9K_HW_CAP_MCI
 = 0,

271 
	mATH9K_HW_CAP_BT_ANT_DIV
 = 0,

273 
	mATH9K_HW_CAP_DFS
 = 
BIT
(18),

274 
	mATH9K_HW_CAP_PAPRD
 = 
BIT
(19),

275 
	mATH9K_HW_CAP_FCC_BAND_SWITCH
 = 
BIT
(20),

289 
	s©h9k_hw_wow
 {

290 
u32
 
	mwow_evít_mask
;

291 
u32
 
	mwow_evít_mask2
;

292 
u8
 
	mmax_∑âîns
;

295 
	s©h9k_hw_ˇ∑bûôõs
 {

296 
u32
 
	mhw_ˇps
;

297 
u16
 
	mπs_aggr_limô
;

298 
u8
 
	mtx_chaömask
;

299 
u8
 
	mrx_chaömask
;

300 
u8
 
	mchù_chaömask
;

301 
u8
 
	mmax_txchaös
;

302 
u8
 
	mmax_rxchaös
;

303 
u8
 
	mnum_gpio_pös
;

304 
u8
 
	mrx_hp_qdïth
;

305 
u8
 
	mrx_Õ_qdïth
;

306 
u8
 
	mrx_°©us_Àn
;

307 
u8
 
	mtx_desc_Àn
;

308 
u8
 
	mtxs_Àn
;

311 
	#AR_NO_SPUR
 0x8000

	)

312 
	#AR_BASE_FREQ_2GHZ
 2300

	)

313 
	#AR_BASE_FREQ_5GHZ
 4900

	)

314 
	#AR_SPUR_FEEQ_BOUND_HT40
 19

	)

315 
	#AR_SPUR_FEEQ_BOUND_HT20
 10

	)

317 
	e©h9k_hw_h™g_checks
 {

318 
	mHW_BB_WATCHDOG
 = 
BIT
(0),

319 
	mHW_PHYRESTART_CLC_WAR
 = 
BIT
(1),

320 
	mHW_BB_RIFS_HANG
 = 
BIT
(2),

321 
	mHW_BB_DFS_HANG
 = 
BIT
(3),

322 
	mHW_BB_RX_CLEAR_STUCK_HANG
 = 
BIT
(4),

323 
	mHW_MAC_HANG
 = 
BIT
(5),

326 
	#AR_PCIE_PLL_PWRSAVE_CONTROL
 
	`BIT
(0)

	)

327 
	#AR_PCIE_PLL_PWRSAVE_ON_D3
 
	`BIT
(1)

	)

328 
	#AR_PCIE_PLL_PWRSAVE_ON_D0
 
	`BIT
(2)

	)

329 
	#AR_PCIE_CDR_PWRSAVE_ON_D3
 
	`BIT
(3)

	)

330 
	#AR_PCIE_CDR_PWRSAVE_ON_D0
 
	`BIT
(4)

	)

332 
	s©h9k_›s_c⁄fig
 {

333 
	mdma_bóc⁄_ª•⁄£_time
;

334 
	msw_bóc⁄_ª•⁄£_time
;

335 
boﬁ
 
	mcwm_ign‹e_extcˇ
;

336 
u32
 
	mpcõ_w´n
;

337 
u8
 
	m™Æog_shi·ªg
;

338 
u32
 
	mofdm_åig_low
;

339 
u32
 
	mofdm_åig_high
;

340 
u32
 
	mcck_åig_high
;

341 
u32
 
	mcck_åig_low
;

342 
boﬁ
 
	míabÀ_∑¥d
;

343 
	m£rülize_ªgmode
;

344 
boﬁ
 
	mrx_öå_môig©i⁄
;

345 
boﬁ
 
	mtx_öå_môig©i⁄
;

346 
u8
 
	mmax_txåig_Àvñ
;

347 
u16
 
	m™i_pﬁl_öãrvÆ
;

348 
u16
 
	mhw_h™g_checks
;

349 
u16
 
	mrimt_fú°
;

350 
u16
 
	mrimt_œ°
;

353 
u32
 
	ma•m_l1_fix
;

354 
u32
 
	mx a_gpio
;

355 
u32
 
	m™t_˘æ_comm2g_swôch_íabÀ
;

356 
boﬁ
 
	mx©ãn_m¨gö_cfg
;

357 
boﬁ
 
	mÆt_mögaöidx
;

358 
u8
 
	m∂l_pwrßve
;

359 
boﬁ
 
	mtx_gaö_bufÁlo
;

360 
boﬁ
 
	mÀd_a˘ive_high
;

363 
	e©h9k_öt
 {

364 
	mATH9K_INT_RX
 = 0x00000001,

365 
	mATH9K_INT_RXDESC
 = 0x00000002,

366 
	mATH9K_INT_RXHP
 = 0x00000001,

367 
	mATH9K_INT_RXLP
 = 0x00000002,

368 
	mATH9K_INT_RXNOFRM
 = 0x00000008,

369 
	mATH9K_INT_RXEOL
 = 0x00000010,

370 
	mATH9K_INT_RXORN
 = 0x00000020,

371 
	mATH9K_INT_TX
 = 0x00000040,

372 
	mATH9K_INT_TXDESC
 = 0x00000080,

373 
	mATH9K_INT_TIM_TIMER
 = 0x00000100,

374 
	mATH9K_INT_MCI
 = 0x00000200,

375 
	mATH9K_INT_BB_WATCHDOG
 = 0x00000400,

376 
	mATH9K_INT_TXURN
 = 0x00000800,

377 
	mATH9K_INT_MIB
 = 0x00001000,

378 
	mATH9K_INT_RXPHY
 = 0x00004000,

379 
	mATH9K_INT_RXKCM
 = 0x00008000,

380 
	mATH9K_INT_SWBA
 = 0x00010000,

381 
	mATH9K_INT_BMISS
 = 0x00040000,

382 
	mATH9K_INT_BNR
 = 0x00100000,

383 
	mATH9K_INT_TIM
 = 0x00200000,

384 
	mATH9K_INT_DTIM
 = 0x00400000,

385 
	mATH9K_INT_DTIMSYNC
 = 0x00800000,

386 
	mATH9K_INT_GPIO
 = 0x01000000,

387 
	mATH9K_INT_CABEND
 = 0x02000000,

388 
	mATH9K_INT_TSFOOR
 = 0x04000000,

389 
	mATH9K_INT_GENTIMER
 = 0x08000000,

390 
	mATH9K_INT_CST
 = 0x10000000,

391 
	mATH9K_INT_GTT
 = 0x20000000,

392 
	mATH9K_INT_FATAL
 = 0x40000000,

393 
	mATH9K_INT_GLOBAL
 = 0x80000000,

394 
	mATH9K_INT_BMISC
 = 
ATH9K_INT_TIM
 |

395 
ATH9K_INT_DTIM
 |

396 
ATH9K_INT_DTIMSYNC
 |

397 
ATH9K_INT_TSFOOR
 |

398 
ATH9K_INT_CABEND
,

399 
	mATH9K_INT_COMMON
 = 
ATH9K_INT_RXNOFRM
 |

400 
ATH9K_INT_RXDESC
 |

401 
ATH9K_INT_RXEOL
 |

402 
ATH9K_INT_RXORN
 |

403 
ATH9K_INT_TXURN
 |

404 
ATH9K_INT_TXDESC
 |

405 
ATH9K_INT_MIB
 |

406 
ATH9K_INT_RXPHY
 |

407 
ATH9K_INT_RXKCM
 |

408 
ATH9K_INT_SWBA
 |

409 
ATH9K_INT_BMISS
 |

410 
ATH9K_INT_GPIO
,

411 
	mATH9K_INT_NOCARD
 = 0xffffffff

414 
	#MAX_RTT_TABLE_ENTRY
 6

	)

415 
	#MAX_IQCAL_MEASUREMENT
 8

	)

416 
	#MAX_CL_TAB_ENTRY
 16

	)

417 
	#CL_TAB_ENTRY
(
ªg_ba£
Ë‘eg_ba£ + (4 * 
j
))

	)

419 
	e©h9k_ˇl_Êags
 {

420 
	mRTT_DONE
,

421 
	mPAPRD_PACKET_SENT
,

422 
	mPAPRD_DONE
,

423 
	mNFCAL_PENDING
,

424 
	mNFCAL_INTF
,

425 
	mTXIQCAL_DONE
,

426 
	mTXCLCAL_DONE
,

427 
	mSW_PKDET_DONE
,

430 
	s©h9k_hw_ˇl_d©a
 {

431 
u16
 
	mch™√l
;

432 
u16
 
	mch™√lFœgs
;

433 
	mˇl_Êags
;

434 
öt32_t
 
	mCÆVÆid
;

435 
öt8_t
 
	miCoff
;

436 
öt8_t
 
	mqCoff
;

437 
u8
 
	mˇldac
[2];

438 
u16
 
	msmÆl_sig«l_gaö
[
AR9300_MAX_CHAINS
];

439 
u32
 
	m∑_èbÀ
[
AR9300_MAX_CHAINS
][
PAPRD_TABLE_SZ
];

440 
u32
 
	mnum_mósuªs
[
AR9300_MAX_CHAINS
];

441 
	mtx_c‹r_c€ff
[
MAX_IQCAL_MEASUREMENT
][
AR9300_MAX_CHAINS
];

442 
u32
 
	mtx_˛ˇl
[
AR9300_MAX_CHAINS
][
MAX_CL_TAB_ENTRY
];

443 
u32
 
	mπt_èbÀ
[
AR9300_MAX_CHAINS
][
MAX_RTT_TABLE_ENTRY
];

444 
©h9k_nfˇl_hi°
 
	mnfCÆHi°
[
NUM_NF_READINGS
];

447 
	s©h9k_ch™√l
 {

448 
õì80211_ch™√l
 *
	mch™
;

449 
u16
 
	mch™√l
;

450 
u16
 
	mch™√lFœgs
;

451 
s16
 
	mnoi£Êo‹
;

454 
	#CHANNEL_5GHZ
 
	`BIT
(0)

	)

455 
	#CHANNEL_HALF
 
	`BIT
(1)

	)

456 
	#CHANNEL_QUARTER
 
	`BIT
(2)

	)

457 
	#CHANNEL_HT
 
	`BIT
(3)

	)

458 
	#CHANNEL_HT40PLUS
 
	`BIT
(4)

	)

459 
	#CHANNEL_HT40MINUS
 
	`BIT
(5)

	)

461 
	#IS_CHAN_5GHZ
(
_c
Ë(!!((_c)->
ch™√lFœgs
 & 
CHANNEL_5GHZ
))

	)

462 
	#IS_CHAN_2GHZ
(
_c
Ë(!
	`IS_CHAN_5GHZ
(_c))

	)

464 
	#IS_CHAN_HALF_RATE
(
_c
Ë(!!((_c)->
ch™√lFœgs
 & 
CHANNEL_HALF
))

	)

465 
	#IS_CHAN_QUARTER_RATE
(
_c
Ë(!!((_c)->
ch™√lFœgs
 & 
CHANNEL_QUARTER
))

	)

466 
	#IS_CHAN_A_FAST_CLOCK
(
_ah
, 
_c
) \

467 (
	`IS_CHAN_5GHZ
(
_c
Ë&& ((
_ah
)->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_FASTCLOCK
))

	)

469 
	#IS_CHAN_HT
(
_c
Ë((_c)->
ch™√lFœgs
 & 
CHANNEL_HT
)

	)

471 
	#IS_CHAN_HT20
(
_c
Ë(
	`IS_CHAN_HT
(_cË&& !
	`IS_CHAN_HT40
(_c))

	)

473 
	#IS_CHAN_HT40
(
_c
) \

474 (!!((
_c
)->
ch™√lFœgs
 & (
CHANNEL_HT40PLUS
 | 
CHANNEL_HT40MINUS
)))

	)

476 
	#IS_CHAN_HT40PLUS
(
_c
Ë((_c)->
ch™√lFœgs
 & 
CHANNEL_HT40PLUS
)

	)

477 
	#IS_CHAN_HT40MINUS
(
_c
Ë((_c)->
ch™√lFœgs
 & 
CHANNEL_HT40MINUS
)

	)

479 
	e©h9k_powî_mode
 {

480 
	mATH9K_PM_AWAKE
 = 0,

481 
	mATH9K_PM_FULL_SLEEP
,

482 
	mATH9K_PM_NETWORK_SLEEP
,

483 
	mATH9K_PM_UNDEFINED


486 
	e£r_ªg_mode
 {

487 
	mSER_REG_MODE_OFF
 = 0,

488 
	mSER_REG_MODE_ON
 = 1,

489 
	mSER_REG_MODE_AUTO
 = 2,

492 
	e©h9k_rx_qty≥
 {

493 
	mATH9K_RX_QUEUE_HP
,

494 
	mATH9K_RX_QUEUE_LP
,

495 
	mATH9K_RX_QUEUE_MAX
,

498 
	s©h9k_bóc⁄_°©e
 {

499 
u32
 
	mbs_√xâbâ
;

500 
u32
 
	mbs_√xtdtim
;

501 
u32
 
	mbs_ötvÆ
;

502 
	#ATH9K_TSFOOR_THRESHOLD
 0x00004240

	)

503 
u32
 
	mbs_dtim≥riod
;

504 
u16
 
	mbs_bmis°hªshﬁd
;

505 
u32
 
	mbs_¶ìpduøti⁄
;

506 
u32
 
	mbs_tsfo‹_thªshﬁd
;

509 
	sch™_˚¡îs
 {

510 
u16
 
	msy¡h_˚¡î
;

511 
u16
 
	m˘l_˚¡î
;

512 
u16
 
	mext_˚¡î
;

516 
	mATH9K_RESET_POWER_ON
,

517 
	mATH9K_RESET_WARM
,

518 
	mATH9K_RESET_COLD
,

521 
	s©h9k_hw_vîsi⁄
 {

522 
u32
 
	mmagic
;

523 
u16
 
	mdevid
;

524 
u16
 
	msubvíd‹id
;

525 
u32
 
	mmacVîsi⁄
;

526 
u16
 
	mmacRev
;

527 
u16
 
	mphyRev
;

528 
u16
 
	m™Æog5GhzRev
;

529 
u16
 
	m™Æog2GhzRev
;

530 
©h_usb_dev
 
	musbdev
;

535 
	#ATH_MAX_GEN_TIMER
 16

	)

537 
	#AR_GENTMR_BIT
(
_ödex
Ë(1 << (_ödex))

	)

539 
	s©h_gí_timî_c⁄figuøti⁄
 {

540 
u32
 
	m√xt_addr
;

541 
u32
 
	m≥riod_addr
;

542 
u32
 
	mmode_addr
;

543 
u32
 
	mmode_mask
;

546 
	s©h_gí_timî
 {

547 (*
	måiggî
)(*
	m¨g
);

548 (*
	movîÊow
)(*
	m¨g
);

549 *
	m¨g
;

550 
u8
 
	mödex
;

553 
	s©h_gí_timî_èbÀ
 {

554 
©h_gí_timî
 *
	mtimîs
[
ATH_MAX_GEN_TIMER
];

555 
u16
 
	mtimî_mask
;

556 
boﬁ
 
	mtsf2_íabÀd
;

559 
	s©h_hw_™tcomb_c⁄f
 {

560 
u8
 
	mmaö_ a_c⁄f
;

561 
u8
 
	mÆt_ a_c⁄f
;

562 
u8
 
	mÁ°_div_büs
;

563 
u8
 
	mmaö_gaötb
;

564 
u8
 
	mÆt_gaötb
;

565 
	m a1_ a2_dñè
;

566 
	m a1_ a2_swôch_dñè
;

567 
u8
 
	mdiv_group
;

590 
	s©h_hw_ød¨_c⁄f
 {

591 
	mpul£_öb™d
;

592 
	mpul£_öb™d_°ï
;

593 
	mpul£_height
;

594 
	mpul£_rssi
;

595 
	mpul£_maxÀn
;

597 
	mød¨_rssi
;

598 
	mød¨_öb™d
;

599 
	mfú_powî
;

601 
boﬁ
 
	mext_ch™√l
;

626 
	s©h_hw_¥iv©e_›s
 {

627 (*
	möô_h™g_checks
)(
©h_hw
 *
	mah
);

628 
boﬁ
 (*
dëe˘_mac_h™g
)(
©h_hw
 *
	mah
);

629 
boﬁ
 (*
dëe˘_bb_h™g
)(
©h_hw
 *
	mah
);

632 (*
	möô_ˇl_£âögs
)(
©h_hw
 *
	mah
);

633 
boﬁ
 (*
öô_ˇl
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
);

635 (*
	möô_mode_gaö_ªgs
)(
©h_hw
 *
	mah
);

636 (*
	m£tup_ˇlibøti⁄
)(
©h_hw
 *
	mah
,

637 
©h9k_ˇl_li°
 *
	mcuºCÆ
);

640 (*
	mrf_£t_‰eq
)(
©h_hw
 *
	mah
,

641 
©h9k_ch™√l
 *
	mch™
);

642 (*
	m•ur_môig©e_‰eq
)(
©h_hw
 *
	mah
,

643 
©h9k_ch™√l
 *
	mch™
);

644 
boﬁ
 (*
£t_rf_ªgs
)(
©h_hw
 *
	mah
,

645 
©h9k_ch™√l
 *
	mch™
,

646 
u16
 
	mmodesIndex
);

647 (*
	m£t_ch™√l_ªgs
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
);

648 (*
	möô_bb
)(
©h_hw
 *
	mah
,

649 
©h9k_ch™√l
 *
	mch™
);

650 (*
	m¥o˚ss_öi
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
);

651 (*
	mﬁc_öô
)(
©h_hw
 *
	mah
);

652 (*
	m£t_rfmode
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
);

653 (*
	mm¨k_phy_öa˘ive
)(
©h_hw
 *
	mah
);

654 (*
	m£t_dñè_¶›e
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
);

655 
boﬁ
 (*
rfbus_ªq
)(
©h_hw
 *
	mah
);

656 (*
	mrfbus_d⁄e
)(
©h_hw
 *
	mah
);

657 (*
	mª°‹e_chaömask
)(
©h_hw
 *
	mah
);

658 
u32
 (*
compuã_∂l_c⁄åﬁ
)(
©h_hw
 *
	mah
,

659 
©h9k_ch™√l
 *
	mch™
);

660 
boﬁ
 (*
™i_c⁄åﬁ
)(
©h_hw
 *
	mah
, 
©h9k_™i_cmd
 
	mcmd
,

661 
	m∑øm
);

662 (*
	mdo_gënf
)(
©h_hw
 *
	mah
, 
öt16_t
 
	mnÁºay
[
NUM_NF_READINGS
]);

663 (*
	m£t_ød¨_∑øms
)(
©h_hw
 *
	mah
,

664 
©h_hw_ød¨_c⁄f
 *
	mc⁄f
);

665 (*
	mÁ°_ch™_ch™ge
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
,

666 
u8
 *
	möi_ªlﬂded
);

669 (*
	m™i_ˇche_öi_ªgs
)(
©h_hw
 *
	mah
);

671 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


672 
boﬁ
 (*
is_aic_íabÀd
)(
©h_hw
 *
	mah
);

698 
	s©h_•ec_sˇn
 {

699 
boﬁ
 
	míabÀd
;

700 
boﬁ
 
	msh‹t_ª≥©
;

701 
boﬁ
 
	mídÀss
;

702 
u8
 
	mcou¡
;

703 
u8
 
	m≥riod
;

704 
u8
 
	mf·_≥riod
;

720 
	s©h_hw_›s
 {

721 (*
	mc⁄fig_pci_powîßve
)(
©h_hw
 *
	mah
,

722 
boﬁ
 
	mpowî_off
);

723 (*
	mrx_íabÀ
)(
©h_hw
 *
	mah
);

724 (*
	m£t_desc_lök
)(*
	mds
, 
u32
 
	mlök
);

725 (*
	mˇlibøã
)(
©h_hw
 *
	mah
, 
©h9k_ch™√l
 *
	mch™
,

726 
u8
 
	mrxchaömask
, 
boﬁ
 
	ml⁄gˇl
);

727 
boﬁ
 (*
gë_i§
)(
©h_hw
 *
	mah
, 
©h9k_öt
 *
	mmasked
,

728 
u32
 *
	msync_ˇu£_p
);

729 (*
	m£t_txdesc
)(
©h_hw
 *
	mah
, *
	mds
,

730 
©h_tx_öfo
 *
	mi
);

731 (*
	m¥oc_txdesc
)(
©h_hw
 *
	mah
, *
	mds
,

732 
©h_tx_°©us
 *
	mts
);

733 (*
	mgë_duøti⁄
)(
©h_hw
 *
	mah
, c⁄° *
	mds
, 
	mödex
);

734 (*
	m™tdiv_comb_c⁄f_gë
)(
©h_hw
 *
	mah
,

735 
©h_hw_™tcomb_c⁄f
 *
	m™tc⁄f
);

736 (*
	m™tdiv_comb_c⁄f_£t
)(
©h_hw
 *
	mah
,

737 
©h_hw_™tcomb_c⁄f
 *
	m™tc⁄f
);

738 (*
	m•e˘øl_sˇn_c⁄fig
)(
©h_hw
 *
	mah
,

739 
©h_•ec_sˇn
 *
	m∑øm
);

740 (*
	m•e˘øl_sˇn_åiggî
)(
©h_hw
 *
	mah
);

741 (*
	m•e˘øl_sˇn_waô
)(
©h_hw
 *
	mah
);

743 (*
	mtx99_°¨t
)(
©h_hw
 *
	mah
, 
u32
 
	mqnum
);

744 (*
	mtx99_°›
)(
©h_hw
 *
	mah
);

745 (*
	mtx99_£t_txpowî
)(
©h_hw
 *
	mah
, 
u8
 
	mpowî
);

747 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


748 (*
	m£t_bt_™t_divîsôy
)(
©h_hw
 *
	mhw
, 
boﬁ
 
	míabÀ
);

752 
	s©h_nf_limôs
 {

753 
s16
 
	mmax
;

754 
s16
 
	mmö
;

755 
s16
 
	mnomöÆ
;

758 
	e©h_ˇl_li°
 {

759 
	mTX_IQ_CAL
 = 
BIT
(0),

760 
	mTX_IQ_ON_AGC_CAL
 = 
BIT
(1),

761 
	mTX_CL_CAL
 = 
BIT
(2),

765 
	#AH_USE_EEPROM
 0x1

	)

766 
	#AH_UNPLUGGED
 0x2

	)

767 
	#AH_FASTCC
 0x4

	)

768 
	#AH_NO_EEP_SWAP
 0x8

	)

770 
	s©h_hw
 {

771 
©h_›s
 
	mªg_›s
;

773 
devi˚
 *
	mdev
;

774 
õì80211_hw
 *
	mhw
;

775 
©h_comm⁄
 
	mcomm⁄
;

776 
©h9k_hw_vîsi⁄
 
	mhw_vîsi⁄
;

777 
©h9k_›s_c⁄fig
 
	mc⁄fig
;

778 
©h9k_hw_ˇ∑bûôõs
 
	mˇps
;

779 
©h9k_ch™√l
 
	mch™√ls
[
ATH9K_NUM_CHANNELS
];

780 
©h9k_ch™√l
 *
	mcurch™
;

783 
¨5416_ì¥om_def
 
	mdef
;

784 
¨5416_ì¥om_4k
 
	mm≠4k
;

785 
¨9287_ì¥om
 
	mm≠9287
;

786 
¨9300_ì¥om
 
	m¨9300_ìp
;

787 } 
	mì¥om
;

788 c⁄° 
ì¥om_›s
 *
	mìp_›s
;

790 
boﬁ
 
	msw_mgmt_¸y±o_tx
;

791 
boﬁ
 
	msw_mgmt_¸y±o_rx
;

792 
boﬁ
 
	mis_pcõx¥ess
;

793 
boﬁ
 
	ma•m_íabÀd
;

794 
boﬁ
 
	mis_m⁄ô‹ög
;

795 
boﬁ
 
	m√ed_™_t›2_fixup
;

796 
u16
 
	mtx_åig_Àvñ
;

798 
u32
 
	mnf_ªgs
[6];

799 
©h_nf_limôs
 
	mnf_2g
;

800 
©h_nf_limôs
 
	mnf_5g
;

801 
u16
 
	mrfsûít
;

802 
u32
 
	mrfkûl_gpio
;

803 
u32
 
	mrfkûl_pﬁ¨ôy
;

804 
u32
 
	mah_Êags
;

806 
boﬁ
 
	mª£t_powî_⁄
;

807 
boﬁ
 
	mhtc_ª£t_öô
;

809 
∆80211_i·y≥
 
	m›mode
;

810 
©h9k_powî_mode
 
	mpowî_mode
;

812 
s8
 
	mnoi£
;

813 
©h9k_hw_ˇl_d©a
 *
	mˇld©a
;

814 
©h9k_∑ˇl_öfo
 
	m∑ˇl_öfo
;

815 
¨5416Sèts
 
	m°©s
;

816 
©h9k_tx_queue_öfo
 
	mtxq
[
ATH9K_NUM_TX_QUEUES
];

818 
©h9k_öt
 
	mimask
;

819 
u32
 
	mimrs2_ªg
;

820 
u32
 
	mtxok_öãºu±_mask
;

821 
u32
 
	mtxîr_öãºu±_mask
;

822 
u32
 
	mtxdesc_öãºu±_mask
;

823 
u32
 
	mtxeﬁ_öãºu±_mask
;

824 
u32
 
	mtxu∫_öãºu±_mask
;

825 
©omic_t
 
	möå_ªf_˙t
;

826 
boﬁ
 
	mchù_fuŒ¶ìp
;

827 
u32
 
	mmodes_ödex
;

830 
u32
 
	msuµ_ˇls
;

831 
©h9k_ˇl_li°
 
	miq_ˇld©a
;

832 
©h9k_ˇl_li°
 
	madcgaö_ˇld©a
;

833 
©h9k_ˇl_li°
 
	madcdc_ˇld©a
;

834 
©h9k_ˇl_li°
 *
	mˇl_li°
;

835 
©h9k_ˇl_li°
 *
	mˇl_li°_œ°
;

836 
©h9k_ˇl_li°
 *
	mˇl_li°_cuº
;

837 
	#tŸÆPowîMósI
 
mós0
.
unsign


	)

838 
	#tŸÆPowîMósQ
 
mós1
.
unsign


	)

839 
	#tŸÆIqC‹rMós
 
mós2
.
sign


	)

840 
	#tŸÆAdcIOddPha£
 
mós0
.
unsign


	)

841 
	#tŸÆAdcIEvíPha£
 
mós1
.
unsign


	)

842 
	#tŸÆAdcQOddPha£
 
mós2
.
unsign


	)

843 
	#tŸÆAdcQEvíPha£
 
mós3
.
unsign


	)

844 
	#tŸÆAdcDcOff£tIOddPha£
 
mós0
.
sign


	)

845 
	#tŸÆAdcDcOff£tIEvíPha£
 
mós1
.
sign


	)

846 
	#tŸÆAdcDcOff£tQOddPha£
 
mós2
.
sign


	)

847 
	#tŸÆAdcDcOff£tQEvíPha£
 
mós3
.
sign


	)

849 
u32
 
	munsign
[
AR5416_MAX_CHAINS
];

850 
öt32_t
 
	msign
[
AR5416_MAX_CHAINS
];

851 } 
	mmós0
;

853 
u32
 
	munsign
[
AR5416_MAX_CHAINS
];

854 
öt32_t
 
	msign
[
AR5416_MAX_CHAINS
];

855 } 
	mmós1
;

857 
u32
 
	munsign
[
AR5416_MAX_CHAINS
];

858 
öt32_t
 
	msign
[
AR5416_MAX_CHAINS
];

859 } 
	mmós2
;

861 
u32
 
	munsign
[
AR5416_MAX_CHAINS
];

862 
öt32_t
 
	msign
[
AR5416_MAX_CHAINS
];

863 } 
	mmós3
;

864 
u16
 
	mˇl_ßm∂es
;

865 
u8
 
	míabÀd_ˇls
;

867 
u32
 
	m°a_id1_deÁu…s
;

868 
u32
 
	mmisc_mode
;

871 
©h_hw_¥iv©e_›s
 
	m¥iv©e_›s
;

873 
©h_hw_›s
 
	m›s
;

876 
u32
 *
	m™ÆogB™k6D©a
;

878 
	mcovîage_˛ass
;

879 
u32
 
	m¶Ÿtime
;

880 
u32
 
	mglobÆtxtimeout
;

883 
u32
 
	m™ùîiod
;

884 
©h9k_™i_cmd
 
	m™i_fun˘i⁄
;

885 
u32
 
	m™i_skù_cou¡
;

886 
¨5416AniSèã
 
	m™i
;

888 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


889 
©h_btc€x_hw
 
	mbtc€x_hw
;

892 
u32
 
	möå_txqs
;

893 
u8
 
	mtxchaömask
;

894 
u8
 
	mrxchaömask
;

896 
©h_hw_ød¨_c⁄f
 
	mød¨_c⁄f
;

898 
u32
 
	m‹igöÆGaö
[22];

899 
	möôPDADC
;

900 
	mPDADCdñè
;

901 
	mÀd_pö
;

902 
u32
 
	mgpio_mask
;

903 
u32
 
	mgpio_vÆ
;

905 
¨5416IniAºay
 
	möi_dfs
;

906 
¨5416IniAºay
 
	möiModes
;

907 
¨5416IniAºay
 
	möiComm⁄
;

908 
¨5416IniAºay
 
	möiBB_RfGaö
;

909 
¨5416IniAºay
 
	möiB™k6
;

910 
¨5416IniAºay
 
	möiAddac
;

911 
¨5416IniAºay
 
	möiPcõSîdes
;

912 
¨5416IniAºay
 
	möiPcõSîdesLowPowî
;

913 
¨5416IniAºay
 
	möiModesFa°Clock
;

914 
¨5416IniAºay
 
	möiAddôi⁄Æ
;

915 
¨5416IniAºay
 
	möiModesRxGaö
;

916 
¨5416IniAºay
 
	möi_modes_rx_gaö_bounds
;

917 
¨5416IniAºay
 
	möiModesTxGaö
;

918 
¨5416IniAºay
 
	möiCckfúN‹mÆ
;

919 
¨5416IniAºay
 
	möiCckfúJ≠™2484
;

920 
¨5416IniAºay
 
	möiModes_9271_ANI_ªg
;

921 
¨5416IniAºay
 
	möi_ødio_po°_sys2™t
;

922 
¨5416IniAºay
 
	möi_modes_rxgaö_x a
;

923 
¨5416IniAºay
 
	möi_modes_rxgaö_bb_c‹e
;

924 
¨5416IniAºay
 
	möi_modes_rxgaö_bb_po°ambÀ
;

926 
¨5416IniAºay
 
	möiMac
[
ATH_INI_NUM_SPLIT
];

927 
¨5416IniAºay
 
	möiBB
[
ATH_INI_NUM_SPLIT
];

928 
¨5416IniAºay
 
	möiRadio
[
ATH_INI_NUM_SPLIT
];

929 
¨5416IniAºay
 
	möiSOC
[
ATH_INI_NUM_SPLIT
];

931 
u32
 
	möå_gí_timî_åiggî
;

932 
u32
 
	möå_gí_timî_thªsh
;

933 
©h_gí_timî_èbÀ
 
	mhw_gí_timîs
;

935 
¨9003_txs
 *
	mts_rög
;

936 
u32
 
	mts_∑ddr_°¨t
;

937 
u32
 
	mts_∑ddr_íd
;

938 
u16
 
	mts_èû
;

939 
u16
 
	mts_size
;

941 
u32
 
	mbb_w©chdog_œ°_°©us
;

942 
u32
 
	mbb_w©chdog_timeout_ms
;

943 
u8
 
	mbb_h™g_rx_ofdm
;

945 
	m∑¥d_èrgë_powî
;

946 
	m∑¥d_åaöög_powî
;

947 
	m∑¥d_øãmask
;

948 
	m∑¥d_øãmask_ht40
;

949 
boﬁ
 
	m∑¥d_èbÀ_wrôe_d⁄e
;

950 
u32
 
	m∑¥d_gaö_èbÀ_íåõs
[
PAPRD_GAIN_TABLE_ENTRIES
];

951 
u8
 
	m∑¥d_gaö_èbÀ_ödex
[
PAPRD_GAIN_TABLE_ENTRIES
];

957 
u32
 
	mWARegVÆ
;

960 
u32
 
	mít_mode
;

962 #ifde‡
CONFIG_ATH9K_WOW


963 
©h9k_hw_wow
 
	mwow
;

965 
boﬁ
 
	mis_˛k_25mhz
;

966 (*
	mgë_mac_ªvisi⁄
)();

967 (*
	mexã∫Æ_ª£t
)();

968 
boﬁ
 
	mdißbÀ_2ghz
;

969 
boﬁ
 
	mdißbÀ_5ghz
;

971 c⁄° 
fúmw¨e
 *
	mì¥om_blob
;

973 
©h_dy«ck
 
	mdy«ck
;

975 
boﬁ
 
	mçc_íabÀd
;

976 
u8
 
	mtx_powî
[
Ar5416R©eSize
];

977 
u8
 
	mtx_powî_°bc
[
Ar5416R©eSize
];

980 
	s©h_bus_›s
 {

981 
©h_bus_ty≥
 
	m©h_bus_ty≥
;

982 (*
	mªad_ˇchesize
)(
©h_comm⁄
 *
	mcomm⁄
, *
	mcsz
);

983 
boﬁ
 (*
ì¥om_ªad
)(
©h_comm⁄
 *
	mcomm⁄
, 
u32
 
	moff
, 
u16
 *
	md©a
);

984 (*
	mbt_c€x_¥ï
)(
©h_comm⁄
 *
	mcomm⁄
);

985 (*
	ma•m_öô
)(
©h_comm⁄
 *
	mcomm⁄
);

988 
ölöe
 
©h_comm⁄
 *
	$©h9k_hw_comm⁄
(
©h_hw
 *
ah
)

990  &
ah
->
comm⁄
;

991 
	}
}

993 
ölöe
 
©h_ªguœt‹y
 *
	$©h9k_hw_ªguœt‹y
(
©h_hw
 *
ah
)

995  &(
	`©h9k_hw_comm⁄
(
ah
)->
ªguœt‹y
);

996 
	}
}

998 
ölöe
 
©h_hw_¥iv©e_›s
 *
	$©h9k_hw_¥iv©e_›s
(
©h_hw
 *
ah
)

1000  &
ah
->
¥iv©e_›s
;

1001 
	}
}

1003 
ölöe
 
©h_hw_›s
 *
	$©h9k_hw_›s
(
©h_hw
 *
ah
)

1005  &
ah
->
›s
;

1006 
	}
}

1008 
ölöe
 
u8
 
	$gë_°ªams
(
mask
)

1010  !!(
mask
 & 
	`BIT
(0)) + !!(mask & BIT(1)) + !!(mask & BIT(2));

1011 
	}
}

1014 
©h9k_hw_deöô
(
©h_hw
 *
ah
);

1015 
©h9k_hw_öô
(
©h_hw
 *
ah
);

1016 
©h9k_hw_ª£t
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

1017 
©h9k_hw_ˇl_d©a
 *
ˇld©a
, 
boﬁ
 
Á°cc
);

1018 
©h9k_hw_fûl_ˇp_öfo
(
©h_hw
 *
ah
);

1019 
u32
 
©h9k_ªgd_gë_˘l
(
©h_ªguœt‹y
 *
ªg
, 
©h9k_ch™√l
 *
ch™
);

1022 
©h9k_hw_cfg_gpio_öput
(
©h_hw
 *
ah
, 
u32
 
gpio
);

1023 
u32
 
©h9k_hw_gpio_gë
(
©h_hw
 *
ah
, u32 
gpio
);

1024 
©h9k_hw_cfg_ouçut
(
©h_hw
 *
ah
, 
u32
 
gpio
,

1025 
u32
 
ah_sig«l_ty≥
);

1026 
©h9k_hw_£t_gpio
(
©h_hw
 *
ah
, 
u32
 
gpio
, u32 
vÆ
);

1027 
©h9k_hw_ªque°_gpio
(
©h_hw
 *
ah
, 
u32
 
gpio
, c⁄° *
œbñ
);

1028 
©h9k_hw_£è¡í«
(
©h_hw
 *
ah
, 
u32
 
™ã¬a
);

1031 
©h9k_hw_sy¡h_dñay
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

1032 
hw_dñay
);

1033 
boﬁ
 
©h9k_hw_waô
(
©h_hw
 *
ah
, 
u32
 
ªg
, u32 
mask
, u32 
vÆ
, u32 
timeout
);

1034 
©h9k_hw_wrôe_¨øy
(
©h_hw
 *
ah
, c⁄° 
¨5416IniAºay
 *
¨øy
,

1035 
cﬁumn
, *
wrôe˙t
);

1036 
©h9k_hw_ªad_¨øy
(
©h_hw
 *
ah
, 
u32
 
¨øy
[][2], 
size
);

1037 
u32
 
©h9k_hw_ªvî£_bôs
(u32 
vÆ
, u32 
n
);

1038 
u16
 
©h9k_hw_compuãtxtime
(
©h_hw
 *
ah
,

1039 
u8
 
phy
, 
kbps
,

1040 
u32
 
‰ameLí
, 
u16
 
øãix
, 
boﬁ
 
sh‹tPªambÀ
);

1041 
©h9k_hw_gë_ch™√l_˚¡îs
(
©h_hw
 *
ah
,

1042 
©h9k_ch™√l
 *
ch™
,

1043 
ch™_˚¡îs
 *
˚¡îs
);

1044 
u32
 
©h9k_hw_gërxfûãr
(
©h_hw
 *
ah
);

1045 
©h9k_hw_£åxfûãr
(
©h_hw
 *
ah
, 
u32
 
bôs
);

1046 
boﬁ
 
©h9k_hw_phy_dißbÀ
(
©h_hw
 *
ah
);

1047 
boﬁ
 
©h9k_hw_dißbÀ
(
©h_hw
 *
ah
);

1048 
©h9k_hw_£t_txpowîlimô
(
©h_hw
 *
ah
, 
u32
 
limô
, 
boﬁ
 
ã°
);

1049 
©h9k_hw_£t›mode
(
©h_hw
 *
ah
);

1050 
©h9k_hw_£tmˇ°fûãr
(
©h_hw
 *
ah
, 
u32
 
fûãr0
, u32 
fûãr1
);

1051 
©h9k_hw_wrôe_associd
(
©h_hw
 *
ah
);

1052 
u32
 
©h9k_hw_gëtsf32
(
©h_hw
 *
ah
);

1053 
u64
 
©h9k_hw_gëtsf64
(
©h_hw
 *
ah
);

1054 
©h9k_hw_£âsf64
(
©h_hw
 *
ah
, 
u64
 
tsf64
);

1055 
©h9k_hw_ª£t_tsf
(
©h_hw
 *
ah
);

1056 
u32
 
©h9k_hw_gë_tsf_off£t
(
time•ec
 *
œ°
, time•e¯*
cur
);

1057 
©h9k_hw_£t_tsÁdju°
(
©h_hw
 *
ah
, 
boﬁ
 
£t
);

1058 
©h9k_hw_öô_globÆ_£âögs
(
©h_hw
 *
ah
);

1059 
u32
 
¨9003_gë_∂l_sqsum_dvc
(
©h_hw
 *
ah
);

1060 
©h9k_hw_£t11nmac2040
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

1061 
©h9k_hw_bóc⁄öô
(
©h_hw
 *
ah
, 
u32
 
√xt_bóc⁄
, u32 
bóc⁄_≥riod
);

1062 
©h9k_hw_£t_°a_bóc⁄_timîs
(
©h_hw
 *
ah
,

1063 c⁄° 
©h9k_bóc⁄_°©e
 *
bs
);

1064 
©h9k_hw_check_«v
(
©h_hw
 *
ah
);

1065 
boﬁ
 
©h9k_hw_check_Æive
(
©h_hw
 *
ah
);

1067 
boﬁ
 
©h9k_hw_£çowî
(
©h_hw
 *
ah
, 
©h9k_powî_mode
 
mode
);

1070 
©h_gí_timî
 *
©h_gí_timî_Æloc
(
©h_hw
 *
ah
,

1071 (*
åiggî
)(*),

1072 (*
ovîÊow
)(*),

1073 *
¨g
,

1074 
u8
 
timî_ödex
);

1075 
	`©h9k_hw_gí_timî_°¨t
(
©h_hw
 *
ah
,

1076 
©h_gí_timî
 *
timî
,

1077 
u32
 
timî_√xt
,

1078 
u32
 
timî_≥riod
);

1079 
	`©h9k_hw_gí_timî_°¨t_tsf2
(
©h_hw
 *
ah
);

1080 
	`©h9k_hw_gí_timî_°›
(
©h_hw
 *
ah
, 
©h_gí_timî
 *
timî
);

1082 
	`©h_gí_timî_‰ì
(
©h_hw
 *
ah
, 
©h_gí_timî
 *
timî
);

1083 
	`©h_gí_timî_i§
(
©h_hw
 *
hw
);

1085 
	`©h9k_hw_«me
(
©h_hw
 *
ah
, *
hw_«me
, 
size_t
 
Àn
);

1088 
	`©h9k_hw_gë_dñè_¶›e_vÆs
(
©h_hw
 *
ah
, 
u32
 
c€f_sˇÀd
,

1089 
u32
 *
c€f_m™tisß
, u32 *
c€f_exp⁄ít
);

1090 
	`©h9k_hw_≠∂y_txpowî
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
,

1091 
boﬁ
 
ã°
);

1097 
	`¨9002_hw_rf_˛aim
(
©h_hw
 *
ah
);

1098 
	`¨9002_hw_íabÀ_async_fifo
(
©h_hw
 *
ah
);

1104 
boﬁ
 
	`¨9003_hw_bb_w©chdog_check
(
©h_hw
 *
ah
);

1105 
	`¨9003_hw_bb_w©chdog_c⁄fig
(
©h_hw
 *
ah
);

1106 
	`¨9003_hw_bb_w©chdog_ªad
(
©h_hw
 *
ah
);

1107 
	`¨9003_hw_bb_w©chdog_dbg_öfo
(
©h_hw
 *
ah
);

1108 
	`¨9003_hw_dißbÀ_phy_ª°¨t
(
©h_hw
 *
ah
);

1109 
	`¨9003_∑¥d_íabÀ
(
©h_hw
 *
ah
, 
boﬁ
 
vÆ
);

1110 
	`¨9003_∑¥d_p›uœã_sögÀ_èbÀ
(
©h_hw
 *
ah
,

1111 
©h9k_hw_ˇl_d©a
 *
ˇld©a
,

1112 
chaö
);

1113 
	`¨9003_∑¥d_¸óã_curve
(
©h_hw
 *
ah
,

1114 
©h9k_hw_ˇl_d©a
 *
ˇld©a
, 
chaö
);

1115 
	`¨9003_∑¥d_£tup_gaö_èbÀ
(
©h_hw
 *
ah
, 
chaö
);

1116 
	`¨9003_∑¥d_öô_èbÀ
(
©h_hw
 *
ah
);

1117 
boﬁ
 
	`¨9003_∑¥d_is_d⁄e
(
©h_hw
 *
ah
);

1118 
boﬁ
 
	`¨9003_is_∑¥d_íabÀd
(
©h_hw
 *
ah
);

1119 
	`¨9003_hw_£t_chaö_masks
(
©h_hw
 *
ah
, 
u8
 
rx
, u8 
tx
);

1120 
	`¨9003_hw_öô_øã_txpowî
(
©h_hw
 *
ah
, 
u8
 *
øã_¨øy
,

1121 
©h9k_ch™√l
 *
ch™
);

1122 
	`¨5008_hw_cmn_•ur_môig©e
(
©h_hw
 *
ah
,

1123 
©h9k_ch™√l
 *
ch™
, 
bö
);

1124 
	`¨5008_hw_öô_øã_txpowî
(
©h_hw
 *
ah
, 
öt16_t
 *
øã_¨øy
,

1125 
©h9k_ch™√l
 *
ch™
, 
ht40_dñè
);

1128 
	`¨5008_hw_©èch_phy_›s
(
©h_hw
 *
ah
);

1129 
	`¨9002_hw_©èch_phy_›s
(
©h_hw
 *
ah
);

1130 
	`¨9003_hw_©èch_phy_›s
(
©h_hw
 *
ah
);

1132 
	`¨9002_hw_©èch_ˇlib_›s
(
©h_hw
 *
ah
);

1133 
	`¨9003_hw_©èch_ˇlib_›s
(
©h_hw
 *
ah
);

1135 
	`¨9002_hw_©èch_›s
(
©h_hw
 *
ah
);

1136 
	`¨9003_hw_©èch_›s
(
©h_hw
 *
ah
);

1138 
	`¨9002_hw_lﬂd_™i_ªg
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

1140 
	`©h9k_™i_ª£t
(
©h_hw
 *
ah
, 
boﬁ
 
is_sˇ¬ög
);

1141 
	`©h9k_hw_™i_m⁄ô‹
(
©h_hw
 *
ah
, 
©h9k_ch™√l
 *
ch™
);

1143 
	`©h9k_hw_£t_ack_timeout
(
©h_hw
 *
ah
, 
u32
 
us
);

1144 
	`©h9k_hw_£t_˘s_timeout
(
©h_hw
 *
ah
, 
u32
 
us
);

1145 
	`©h9k_hw_£t¶Ÿtime
(
©h_hw
 *
ah
, 
u32
 
us
);

1147 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


1148 
	`¨9003_hw_©èch_aic_›s
(
©h_hw
 *
ah
);

1149 
ölöe
 
boﬁ
 
	$©h9k_hw_btc€x_is_íabÀd
(
©h_hw
 *
ah
)

1151  
ah
->
btc€x_hw
.
íabÀd
;

1152 
	}
}

1153 
ölöe
 
boﬁ
 
	$©h9k_hw_mci_is_íabÀd
(
©h_hw
 *
ah
)

1155  
ah
->
comm⁄
.
btc€x_íabÀd
 &&

1156 (
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
);

1158 
	}
}

1159 
©h9k_hw_btc€x_íabÀ
(
©h_hw
 *
ah
);

1160 
ölöe
 
©h_btc€x_scheme


1161 
	$©h9k_hw_gë_btc€x_scheme
(
©h_hw
 *
ah
)

1163  
ah
->
btc€x_hw
.
scheme
;

1164 
	}
}

1166 
ölöe
 
	$¨9003_hw_©èch_aic_›s
(
©h_hw
 *
ah
)

1168 
	}
}

1169 
ölöe
 
boﬁ
 
	$©h9k_hw_btc€x_is_íabÀd
(
©h_hw
 *
ah
)

1171  
Ál£
;

1172 
	}
}

1173 
ölöe
 
boﬁ
 
	$©h9k_hw_mci_is_íabÀd
(
©h_hw
 *
ah
)

1175  
Ál£
;

1176 
	}
}

1177 
ölöe
 
	$©h9k_hw_btc€x_íabÀ
(
©h_hw
 *
ah
)

1179 
	}
}

1180 
ölöe
 
©h_btc€x_scheme


1181 
	$©h9k_hw_gë_btc€x_scheme
(
©h_hw
 *
ah
)

1183  
ATH_BTCOEX_CFG_NONE
;

1184 
	}
}

1188 #ifde‡
CONFIG_ATH9K_WOW


1189 
©h9k_hw_wow_≠∂y_∑âîn
(
©h_hw
 *
ah
, 
u8
 *
u£r_∑âîn
,

1190 
u8
 *
u£r_mask
, 
∑âîn_cou¡
,

1191 
∑âîn_Àn
);

1192 
u32
 
©h9k_hw_wow_wakeup
(
©h_hw
 *
ah
);

1193 
©h9k_hw_wow_íabÀ
(
©h_hw
 *
ah
, 
u32
 
∑âîn_íabÀ
);

1195 
ölöe
 
	$©h9k_hw_wow_≠∂y_∑âîn
(
©h_hw
 *
ah
,

1196 
u8
 *
u£r_∑âîn
,

1197 
u8
 *
u£r_mask
,

1198 
∑âîn_cou¡
,

1199 
∑âîn_Àn
)

1202 
	}
}

1203 
ölöe
 
u32
 
	$©h9k_hw_wow_wakeup
(
©h_hw
 *
ah
)

1206 
	}
}

1207 
ölöe
 
	$©h9k_hw_wow_íabÀ
(
©h_hw
 *
ah
, 
u32
 
∑âîn_íabÀ
)

1209 
	}
}

1212 
	#ATH9K_CLOCK_RATE_CCK
 22

	)

1213 
	#ATH9K_CLOCK_RATE_5GHZ_OFDM
 40

	)

1214 
	#ATH9K_CLOCK_RATE_2GHZ_OFDM
 44

	)

1215 
	#ATH9K_CLOCK_FAST_RATE_5GHZ_OFDM
 44

	)

	@init.c

17 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

19 
	~<löux/dma-m≠pög.h
>

20 
	~<löux/¶ab.h
>

21 
	~<löux/©h9k_∂©f‹m.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/ªœy.h
>

24 
	~<√t/õì80211_ødiŸ≠.h
>

26 
	~"©h9k.h
"

28 
	s©h9k_ì¥om_˘x
 {

29 
com∂ëi⁄
 
	mcom∂ëe
;

30 
©h_hw
 *
	mah
;

33 *
	gdev_öfo
 = "ath9k";

35 
MODULE_AUTHOR
("Atheros Communications");

36 
MODULE_DESCRIPTION
("Support for Atheros 802.11n wireless LAN cards.");

37 
MODULE_SUPPORTED_DEVICE
("Atheros 802.11n WLAN cards");

38 
MODULE_LICENSE
("Dual BSD/GPL");

40 
	g©h9k_debug
 = 
ATH_DBG_DEFAULT
;

41 
moduÀ_∑øm_«med
(
debug
, 
©h9k_debug
, 
uöt
, 0);

42 
MODULE_PARM_DESC
(
debug
, "Debugging mask");

44 
	g©h9k_mod∑øm_nohw¸y±
;

45 
moduÀ_∑øm_«med
(
nohw¸y±
, 
©h9k_mod∑øm_nohw¸y±
, , 0444);

46 
MODULE_PARM_DESC
(
nohw¸y±
, "Disable hardwareÉncryption");

48 
	g©h9k_Àd_blök
;

49 
moduÀ_∑øm_«med
(
blök
, 
©h9k_Àd_blök
, , 0444);

50 
MODULE_PARM_DESC
(
blök
, "Enable LED blink onáctivity");

52 
	g©h9k_Àd_a˘ive_high
 = -1;

53 
moduÀ_∑øm_«med
(
Àd_a˘ive_high
, 
©h9k_Àd_a˘ive_high
, , 0444);

54 
MODULE_PARM_DESC
(
Àd_a˘ive_high
, "Invert LEDÖolarity");

56 
	g©h9k_btc€x_íabÀ
;

57 
moduÀ_∑øm_«med
(
btc€x_íabÀ
, 
©h9k_btc€x_íabÀ
, , 0444);

58 
MODULE_PARM_DESC
(
btc€x_íabÀ
, "Enable wifi-BT coexistence");

60 
	g©h9k_bt_™t_divîsôy
;

61 
moduÀ_∑øm_«med
(
bt_™t_divîsôy
, 
©h9k_bt_™t_divîsôy
, , 0444);

62 
MODULE_PARM_DESC
(
bt_™t_divîsôy
, "Enable WLAN/BT RXántenna diversity");

64 
	g©h9k_ps_íabÀ
;

65 
moduÀ_∑øm_«med
(
ps_íabÀ
, 
©h9k_ps_íabÀ
, , 0444);

66 
MODULE_PARM_DESC
(
ps_íabÀ
, "Enable WLAN PowerSave");

68 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


70 
	g©h9k_u£_ch™˘x
;

71 
moduÀ_∑øm_«med
(
u£_ch™˘x
, 
©h9k_u£_ch™˘x
, , 0444);

72 
MODULE_PARM_DESC
(
u£_ch™˘x
, "Enable channel context for concurrency");

76 
boﬁ
 
	gis_©h9k_u∆ﬂded
;

78 #ifde‡
CONFIG_MAC80211_LEDS


79 c⁄° 
õì80211_çt_blök
 
	g©h9k_çt_blök
[] = {

80 { .
throughput
 = 0 * 1024, .
	gblök_time
 = 334 },

81 { .
	gthroughput
 = 1 * 1024, .
	gblök_time
 = 260 },

82 { .
	gthroughput
 = 5 * 1024, .
	gblök_time
 = 220 },

83 { .
	gthroughput
 = 10 * 1024, .
	gblök_time
 = 190 },

84 { .
	gthroughput
 = 20 * 1024, .
	gblök_time
 = 170 },

85 { .
	gthroughput
 = 50 * 1024, .
	gblök_time
 = 150 },

86 { .
	gthroughput
 = 70 * 1024, .
	gblök_time
 = 130 },

87 { .
	gthroughput
 = 100 * 1024, .
	gblök_time
 = 110 },

88 { .
	gthroughput
 = 200 * 1024, .
	gblök_time
 = 80 },

89 { .
	gthroughput
 = 300 * 1024, .
	gblök_time
 = 50 },

93 
©h9k_deöô_so·c
(
©h_so·c
 *
sc
);

95 
	$©h9k_›_ps_wakeup
(
©h_comm⁄
 *
comm⁄
)

97 
	`©h9k_ps_wakeup
((
©h_so·c
 *Ë
comm⁄
->
¥iv
);

98 
	}
}

100 
	$©h9k_›_ps_ª°‹e
(
©h_comm⁄
 *
comm⁄
)

102 
	`©h9k_ps_ª°‹e
((
©h_so·c
 *Ë
comm⁄
->
¥iv
);

103 
	}
}

105 
©h_ps_›s
 
	g©h9k_ps_›s
 = {

106 .
wakeup
 = 
©h9k_›_ps_wakeup
,

107 .
	gª°‹e
 = 
©h9k_›_ps_ª°‹e
,

116 
	$©h9k_iowrôe32
(*
hw_¥iv
, 
u32
 
vÆ
, u32 
ªg_off£t
)

118 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

119 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

120 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

122 i‡(
NR_CPUS
 > 1 && 
ah
->
c⁄fig
.
£rülize_ªgmode
 =
SER_REG_MODE_ON
) {

123 
Êags
;

124 
	`•ö_lock_úqßve
(&
sc
->
sc_£rül_rw
, 
Êags
);

125 
	`iowrôe32
(
vÆ
, 
sc
->
mem
 + 
ªg_off£t
);

126 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_£rül_rw
, 
Êags
);

128 
	`iowrôe32
(
vÆ
, 
sc
->
mem
 + 
ªg_off£t
);

129 
	}
}

131 
	$©h9k_i‹ód32
(*
hw_¥iv
, 
u32
 
ªg_off£t
)

133 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

134 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

135 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

136 
u32
 
vÆ
;

138 i‡(
NR_CPUS
 > 1 && 
ah
->
c⁄fig
.
£rülize_ªgmode
 =
SER_REG_MODE_ON
) {

139 
Êags
;

140 
	`•ö_lock_úqßve
(&
sc
->
sc_£rül_rw
, 
Êags
);

141 
vÆ
 = 
	`i‹ód32
(
sc
->
mem
 + 
ªg_off£t
);

142 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_£rül_rw
, 
Êags
);

144 
vÆ
 = 
	`i‹ód32
(
sc
->
mem
 + 
ªg_off£t
);

145  
vÆ
;

146 
	}
}

148 
	$©h9k_mu…i_i‹ód32
(*
hw_¥iv
, 
u32
 *
addr
,

149 
u32
 *
vÆ
, 
u16
 
cou¡
)

151 
i
;

153 
i
 = 0; i < 
cou¡
; i++)

154 
vÆ
[
i
] = 
	`©h9k_i‹ód32
(
hw_¥iv
, 
addr
[i]);

155 
	}
}

158 
	$__©h9k_ªg_rmw
(
©h_so·c
 *
sc
, 
u32
 
ªg_off£t
,

159 
u32
 
£t
, u32 
˛r
)

161 
u32
 
vÆ
;

163 
vÆ
 = 
	`i‹ód32
(
sc
->
mem
 + 
ªg_off£t
);

164 
vÆ
 &~
˛r
;

165 
vÆ
 |
£t
;

166 
	`iowrôe32
(
vÆ
, 
sc
->
mem
 + 
ªg_off£t
);

168  
vÆ
;

169 
	}
}

171 
	$©h9k_ªg_rmw
(*
hw_¥iv
, 
u32
 
ªg_off£t
, u32 
£t
, u32 
˛r
)

173 
©h_hw
 *
ah
 = (©h_hw *Ë
hw_¥iv
;

174 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

175 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

176 
	`unöôülized_v¨
(
Êags
);

177 
u32
 
vÆ
;

179 i‡(
NR_CPUS
 > 1 && 
ah
->
c⁄fig
.
£rülize_ªgmode
 =
SER_REG_MODE_ON
) {

180 
	`•ö_lock_úqßve
(&
sc
->
sc_£rül_rw
, 
Êags
);

181 
vÆ
 = 
	`__©h9k_ªg_rmw
(
sc
, 
ªg_off£t
, 
£t
, 
˛r
);

182 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_£rül_rw
, 
Êags
);

184 
vÆ
 = 
	`__©h9k_ªg_rmw
(
sc
, 
ªg_off£t
, 
£t
, 
˛r
);

186  
vÆ
;

187 
	}
}

193 
	$©h9k_ªg_nŸifõr
(
wùhy
 *wiphy,

194 
ªguœt‹y_ªque°
 *
ªque°
)

196 
õì80211_hw
 *
hw
 = 
	`wùhy_to_õì80211_hw
(
wùhy
);

197 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

198 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

199 
©h_ªguœt‹y
 *
ªg
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

201 
	`©h_ªg_nŸifõr_≠∂y
(
wùhy
, 
ªque°
, 
ªg
);

204 i‡(!
ah
->
curch™
)

207 
sc
->
cur_ch™
->
txpowî
 = 2 * 
ah
->
curch™
->
ch™
->
max_powî
;

208 
	`©h9k_ps_wakeup
(
sc
);

209 
	`©h9k_hw_£t_txpowîlimô
(
ah
, 
sc
->
cur_ch™
->
txpowî
, 
Ál£
);

210 
	`©h9k_cmn_upd©e_txpow
(
ah
, 
sc
->
cur_ch™
->
cur_txpowî
,

211 
sc
->
cur_ch™
->
txpowî
,

212 &
sc
->
cur_ch™
->
cur_txpowî
);

214 i‡(
sc
->
dfs_dëe˘‹
 !
NULL
)

215 
sc
->
dfs_dëe˘‹
->
	`£t_dfs_domaö
(sc->dfs_detector,

216 
ªque°
->
dfs_ªgi⁄
);

217 
	`©h9k_ps_ª°‹e
(
sc
);

218 
	}
}

225 
	$©h_descdma_£tup
(
©h_so·c
 *
sc
, 
©h_descdma
 *
dd
,

226 
li°_hód
 *
hód
, c⁄° *
«me
,

227 
nbuf
, 
ndesc
, 
boﬁ
 
is_tx
)

229 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

230 
u8
 *
ds
;

231 
i
, 
bsize
, 
desc_Àn
;

233 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "%s DMA: %u buffers %u desc/buf\n",

234 
«me
, 
nbuf
, 
ndesc
);

236 
	`INIT_LIST_HEAD
(
hód
);

238 i‡(
is_tx
)

239 
desc_Àn
 = 
sc
->
sc_ah
->
ˇps
.
tx_desc_Àn
;

241 
desc_Àn
 = (
©h_desc
);

244 i‡((
desc_Àn
 % 4) != 0) {

245 
	`©h_îr
(
comm⁄
, "ath_descÇot DWORDáligned\n");

246 
	`BUG_ON
((
desc_Àn
 % 4) != 0);

247  -
ENOMEM
;

250 
dd
->
dd_desc_Àn
 = 
desc_Àn
 * 
nbuf
 * 
ndesc
;

257 i‡(!(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_4KB_SPLITTRANS
)) {

258 
u32
 
ndesc_skù≥d
 =

259 
	`ATH_DESC_4KB_BOUND_NUM_SKIPPED
(
dd
->
dd_desc_Àn
);

260 
u32
 
dma_Àn
;

262 
ndesc_skù≥d
) {

263 
dma_Àn
 = 
ndesc_skù≥d
 * 
desc_Àn
;

264 
dd
->
dd_desc_Àn
 +
dma_Àn
;

266 
ndesc_skù≥d
 = 
	`ATH_DESC_4KB_BOUND_NUM_SKIPPED
(
dma_Àn
);

271 
dd
->
dd_desc
 = 
	`dmam_Æloc_cohîít
(
sc
->
dev
, dd->
dd_desc_Àn
,

272 &
dd
->
dd_desc_∑ddr
, 
GFP_KERNEL
);

273 i‡(!
dd
->
dd_desc
)

274  -
ENOMEM
;

276 
ds
 = (
u8
 *Ë
dd
->
dd_desc
;

277 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "%s DMA map: %p (%u) -> %llx (%u)\n",

278 
«me
, 
ds
, (
u32
Ë
dd
->
dd_desc_Àn
,

279 
	`ôo64
(
dd
->
dd_desc_∑ddr
), (
u32
Ëdd->
dd_desc_Àn
);

282 i‡(
is_tx
) {

283 
©h_buf
 *
bf
;

285 
bsize
 = (
©h_buf
Ë* 
nbuf
;

286 
bf
 = 
	`devm_kzÆloc
(
sc
->
dev
, 
bsize
, 
GFP_KERNEL
);

287 i‡(!
bf
)

288  -
ENOMEM
;

290 
i
 = 0; i < 
nbuf
; i++, 
bf
++, 
ds
 +(
desc_Àn
 * 
ndesc
)) {

291 
bf
->
bf_desc
 = 
ds
;

292 
bf
->
bf_daddr
 = 
	`DS2PHYS
(
dd
, 
ds
);

294 i‡(!(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 &

295 
ATH9K_HW_CAP_4KB_SPLITTRANS
)) {

301 
	`ATH_DESC_4KB_BOUND_CHECK
(
bf
->
bf_daddr
)) {

302 
	`BUG_ON
((
ˇddr_t
Ë
bf
->
bf_desc
 >=

303 ((
ˇddr_t
Ë
dd
->
dd_desc
 +

304 
dd
->
dd_desc_Àn
));

306 
ds
 +(
desc_Àn
 * 
ndesc
);

307 
bf
->
bf_desc
 = 
ds
;

308 
bf
->
bf_daddr
 = 
	`DS2PHYS
(
dd
, 
ds
);

311 
	`li°_add_èû
(&
bf
->
li°
, 
hód
);

314 
©h_rxbuf
 *
bf
;

316 
bsize
 = (
©h_rxbuf
Ë* 
nbuf
;

317 
bf
 = 
	`devm_kzÆloc
(
sc
->
dev
, 
bsize
, 
GFP_KERNEL
);

318 i‡(!
bf
)

319  -
ENOMEM
;

321 
i
 = 0; i < 
nbuf
; i++, 
bf
++, 
ds
 +(
desc_Àn
 * 
ndesc
)) {

322 
bf
->
bf_desc
 = 
ds
;

323 
bf
->
bf_daddr
 = 
	`DS2PHYS
(
dd
, 
ds
);

325 i‡(!(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 &

326 
ATH9K_HW_CAP_4KB_SPLITTRANS
)) {

332 
	`ATH_DESC_4KB_BOUND_CHECK
(
bf
->
bf_daddr
)) {

333 
	`BUG_ON
((
ˇddr_t
Ë
bf
->
bf_desc
 >=

334 ((
ˇddr_t
Ë
dd
->
dd_desc
 +

335 
dd
->
dd_desc_Àn
));

337 
ds
 +(
desc_Àn
 * 
ndesc
);

338 
bf
->
bf_desc
 = 
ds
;

339 
bf
->
bf_daddr
 = 
	`DS2PHYS
(
dd
, 
ds
);

342 
	`li°_add_èû
(&
bf
->
li°
, 
hód
);

346 
	}
}

348 
	$©h9k_öô_queues
(
©h_so·c
 *
sc
)

350 
i
 = 0;

352 
sc
->
bóc⁄
.
bóc⁄q
 = 
	`©h9k_hw_bóc⁄q_£tup
(sc->
sc_ah
);

353 
sc
->
bóc⁄
.
ˇbq
 = 
	`©h_txq_£tup
(sc, 
ATH9K_TX_QUEUE_CAB
, 0);

354 
	`©h_ˇbq_upd©e
(
sc
);

356 
sc
->
tx
.
u≠sdq
 = 
	`©h_txq_£tup
(sc, 
ATH9K_TX_QUEUE_UAPSD
, 0);

358 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++) {

359 
sc
->
tx
.
txq_m≠
[
i
] = 
	`©h_txq_£tup
(sc, 
ATH9K_TX_QUEUE_DATA
, i);

360 
sc
->
tx
.
txq_m≠
[
i
]->
mac80211_qnum
 = i;

361 
sc
->
tx
.
txq_max_≥ndög
[
i
] = 
ATH_MAX_QDEPTH
;

364 
	}
}

366 
	$©h9k_öô_misc
(
©h_so·c
 *
sc
)

368 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

369 
i
 = 0;

371 
	`£tup_timî
(&
comm⁄
->
™i
.
timî
, 
©h_™i_ˇlibøã
, ()
sc
);

373 
comm⁄
->
œ°_rssi
 = 
ATH_RSSI_DUMMY_MARKER
;

374 
	`mem˝y
(
comm⁄
->
bssidmask
, 
©h_bˇ°_mac
, 
ETH_ALEN
);

375 
sc
->
bóc⁄
.
¶Ÿtime
 = 
ATH9K_SLOT_TIME_9
;

377 
i
 = 0; i < 
	`ARRAY_SIZE
(
sc
->
bóc⁄
.
b¶Ÿ
); i++)

378 
sc
->
bóc⁄
.
b¶Ÿ
[
i
] = 
NULL
;

380 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
)

381 
sc
->
™t_comb
.
cou¡
 = 
ATH_ANT_DIV_COMB_INIT_COUNT
;

383 
sc
->
•ec_¥iv
.
ah
 = sc->
sc_ah
;

384 
sc
->
•ec_¥iv
.
•ec_c⁄fig
.
íabÀd
 = 0;

385 
sc
->
•ec_¥iv
.
•ec_c⁄fig
.
sh‹t_ª≥©
 = 
åue
;

386 
sc
->
•ec_¥iv
.
•ec_c⁄fig
.
cou¡
 = 8;

387 
sc
->
•ec_¥iv
.
•ec_c⁄fig
.
ídÀss
 = 
Ál£
;

388 
sc
->
•ec_¥iv
.
•ec_c⁄fig
.
≥riod
 = 0xFF;

389 
sc
->
•ec_¥iv
.
•ec_c⁄fig
.
f·_≥riod
 = 0xF;

390 
	}
}

392 
	$©h9k_öô_pc€m_∂©f‹m
(
©h_so·c
 *
sc
)

394 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

395 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

396 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

398 i‡(!
	`IS_ENABLED
(
CONFIG_ATH9K_PCOEM
))

401 i‡(
comm⁄
->
bus_›s
->
©h_bus_ty≥
 !
ATH_PCI
)

404 i‡(
sc
->
drivî_d©a
 & (
ATH9K_PCI_CUS198
 |

405 
ATH9K_PCI_CUS230
)) {

406 
ah
->
c⁄fig
.
x a_gpio
 = 9;

407 
ah
->
c⁄fig
.
x©ãn_m¨gö_cfg
 = 
åue
;

408 
ah
->
c⁄fig
.
Æt_mögaöidx
 = 
åue
;

409 
ah
->
c⁄fig
.
™t_˘æ_comm2g_swôch_íabÀ
 = 0x000BBB88;

410 
sc
->
™t_comb
.
low_rssi_thªsh
 = 20;

411 
sc
->
™t_comb
.
Á°_div_büs
 = 3;

413 
	`©h_öfo
(
comm⁄
, "SetÖarameters for %s\n",

414 (
sc
->
drivî_d©a
 & 
ATH9K_PCI_CUS198
) ?

418 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_CUS217
)

419 
	`©h_öfo
(
comm⁄
, "CUS217 card detected\n");

421 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_CUS252
)

422 
	`©h_öfo
(
comm⁄
, "CUS252 card detected\n");

424 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_AR9565_1ANT
)

425 
	`©h_öfo
(
comm⁄
, "WB335 1-ANT card detected\n");

427 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_AR9565_2ANT
)

428 
	`©h_öfo
(
comm⁄
, "WB335 2-ANT card detected\n");

430 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_KILLER
)

431 
	`©h_öfo
(
comm⁄
, "Killer Wireless card detected\n");

439 i‡(
sc
->
drivî_d©a
 & (
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_AR9565_2ANT
)) {

440 i‡(!(
sc
->
drivî_d©a
 & 
ATH9K_PCI_BT_ANT_DIV
))

441 
pC≠
->
hw_ˇps
 &~
ATH9K_HW_CAP_ANT_DIV_COMB
;

444 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_BT_ANT_DIV
) {

445 
pC≠
->
hw_ˇps
 |
ATH9K_HW_CAP_BT_ANT_DIV
;

446 
	`©h_öfo
(
comm⁄
, "Set BT/WLAN RX diversity capability\n");

449 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_D3_L1_WAR
) {

450 
ah
->
c⁄fig
.
pcõ_w´n
 = 0x0040473b;

451 
	`©h_öfo
(
comm⁄
, "Enable WAR for ASPM D3/L1\n");

459 
ah
->
c⁄fig
.
∂l_pwrßve
 = 1;

461 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_NO_PLL_PWRSAVE
) {

462 
ah
->
c⁄fig
.
∂l_pwrßve
 = 0;

463 
	`©h_öfo
(
comm⁄
, "Disable PLL PowerSave\n");

466 i‡(
sc
->
drivî_d©a
 & 
ATH9K_PCI_LED_ACT_HI
)

467 
ah
->
c⁄fig
.
Àd_a˘ive_high
 = 
åue
;

468 
	}
}

470 
	$©h9k_ì¥om_ªque°_cb
(c⁄° 
fúmw¨e
 *
ì¥om_blob
,

471 *
˘x
)

473 
©h9k_ì¥om_˘x
 *
ec
 = 
˘x
;

475 i‡(
ì¥om_blob
)

476 
ec
->
ah
->
ì¥om_blob
 =Éeprom_blob;

478 
	`com∂ëe
(&
ec
->
com∂ëe
);

479 
	}
}

481 
	$©h9k_ì¥om_ªque°
(
©h_so·c
 *
sc
, c⁄° *
«me
)

483 
©h9k_ì¥om_˘x
 
ec
;

484 
©h_hw
 *
ah
 =áh = 
sc
->
sc_ah
;

485 
îr
;

488 
	`öô_com∂ëi⁄
(&
ec
.
com∂ëe
);

489 
ec
.
ah
 = 
sc
->
sc_ah
;

491 
îr
 = 
	`ªque°_fúmw¨e_nowaô
(
THIS_MODULE
, 1, 
«me
, 
sc
->
dev
, 
GFP_KERNEL
,

492 &
ec
, 
©h9k_ì¥om_ªque°_cb
);

493 i‡(
îr
 < 0) {

494 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

496  
îr
;

499 
	`waô_f‹_com∂ëi⁄
(&
ec
.
com∂ëe
);

501 i‡(!
ah
->
ì¥om_blob
) {

502 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

503 "U«bÀÅÿlﬂd EEPROM fûê%s\n", 
«me
);

504  -
EINVAL
;

508 
	}
}

510 
	$©h9k_ì¥om_ªÀa£
(
©h_so·c
 *
sc
)

512 
	`ªÀa£_fúmw¨e
(
sc
->
sc_ah
->
ì¥om_blob
);

513 
	}
}

515 
	$©h9k_öô_soc_∂©f‹m
(
©h_so·c
 *
sc
)

517 
©h9k_∂©f‹m_d©a
 *
pd©a
 = 
sc
->
dev
->
∂©f‹m_d©a
;

518 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

519 
ªt
 = 0;

521 i‡(!
pd©a
)

524 i‡(
pd©a
->
ì¥om_«me
) {

525 
ªt
 = 
	`©h9k_ì¥om_ªque°
(
sc
, 
pd©a
->
ì¥om_«me
);

526 i‡(
ªt
)

527  
ªt
;

530 i‡(
pd©a
->
tx_gaö_bufÁlo
)

531 
ah
->
c⁄fig
.
tx_gaö_bufÁlo
 = 
åue
;

533  
ªt
;

534 
	}
}

536 
	$©h9k_öô_so·c
(
u16
 
devid
, 
©h_so·c
 *
sc
,

537 c⁄° 
©h_bus_›s
 *
bus_›s
)

539 
©h9k_∂©f‹m_d©a
 *
pd©a
 = 
sc
->
dev
->
∂©f‹m_d©a
;

540 
©h_hw
 *
ah
 = 
NULL
;

541 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
;

542 
©h_comm⁄
 *
comm⁄
;

543 
ªt
 = 0, 
i
;

544 
csz
 = 0;

546 
ah
 = 
	`devm_kzÆloc
(
sc
->
dev
, (
©h_hw
), 
GFP_KERNEL
);

547 i‡(!
ah
)

548  -
ENOMEM
;

550 
ah
->
dev
 = 
sc
->dev;

551 
ah
->
hw
 = 
sc
->hw;

552 
ah
->
hw_vîsi⁄
.
devid
 = devid;

553 
ah
->
ªg_›s
.
ªad
 = 
©h9k_i‹ód32
;

554 
ah
->
ªg_›s
.
mu…i_ªad
 = 
©h9k_mu…i_i‹ód32
;

555 
ah
->
ªg_›s
.
wrôe
 = 
©h9k_iowrôe32
;

556 
ah
->
ªg_›s
.
rmw
 = 
©h9k_ªg_rmw
;

557 
pC≠
 = &
ah
->
ˇps
;

559 
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

562 
	`£t_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
);

564 
sc
->
sc_ah
 = 
ah
;

565 
sc
->
dfs_dëe˘‹
 = 
	`dfs_∑âîn_dëe˘‹_öô
(
comm⁄
, 
NL80211_DFS_UNSET
);

566 
sc
->
tx99_powî
 = 
MAX_RATE_POWER
 + 1;

567 
	`öô_waôqueue_hód
(&
sc
->
tx_waô
);

568 
sc
->
cur_ch™
 = &sc->
ch™˘x
[0];

569 i‡(!
	`©h9k_is_ch™˘x_íabÀd
())

570 
sc
->
cur_ch™
->
hw_queue_ba£
 = 0;

572 i‡(!
pd©a
 ||Öd©a->
u£_ì¥om
) {

573 
ah
->
ah_Êags
 |
AH_USE_EEPROM
;

574 
sc
->
sc_ah
->
Àd_pö
 = -1;

576 
sc
->
sc_ah
->
gpio_mask
 = 
pd©a
->gpio_mask;

577 
sc
->
sc_ah
->
gpio_vÆ
 = 
pd©a
->gpio_val;

578 
sc
->
sc_ah
->
Àd_pö
 = 
pd©a
->led_pin;

579 
ah
->
is_˛k_25mhz
 = 
pd©a
->is_clk_25mhz;

580 
ah
->
gë_mac_ªvisi⁄
 = 
pd©a
->get_mac_revision;

581 
ah
->
exã∫Æ_ª£t
 = 
pd©a
->external_reset;

582 
ah
->
dißbÀ_2ghz
 = 
pd©a
->disable_2ghz;

583 
ah
->
dißbÀ_5ghz
 = 
pd©a
->disable_5ghz;

584 i‡(!
pd©a
->
ídün_check
)

585 
ah
->
ah_Êags
 |
AH_NO_EEP_SWAP
;

588 
comm⁄
->
›s
 = &
ah
->
ªg_›s
;

589 
comm⁄
->
bus_›s
 = bus_ops;

590 
comm⁄
->
ps_›s
 = &
©h9k_ps_›s
;

591 
comm⁄
->
ah
 =áh;

592 
comm⁄
->
hw
 = 
sc
->hw;

593 
comm⁄
->
¥iv
 = 
sc
;

594 
comm⁄
->
debug_mask
 = 
©h9k_debug
;

595 
comm⁄
->
btc€x_íabÀd
 = 
©h9k_btc€x_íabÀ
 == 1;

596 
comm⁄
->
dißbÀ_™i
 = 
Ál£
;

601 
	`©h9k_öô_pc€m_∂©f‹m
(
sc
);

603 
ªt
 = 
	`©h9k_öô_soc_∂©f‹m
(
sc
);

604 i‡(
ªt
)

605  
ªt
;

607 i‡(
©h9k_Àd_a˘ive_high
 != -1)

608 
ah
->
c⁄fig
.
Àd_a˘ive_high
 = 
©h9k_Àd_a˘ive_high
 == 1;

617 i‡(!
comm⁄
->
btc€x_íabÀd
 && 
©h9k_bt_™t_divîsôy
 &&

618 (
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_BT_ANT_DIV
))

619 
comm⁄
->
bt_™t_divîsôy
 = 1;

621 
	`•ö_lock_öô
(&
comm⁄
->
cc_lock
);

622 
	`•ö_lock_öô
(&
sc
->
sc_£rül_rw
);

623 
	`•ö_lock_öô
(&
sc
->
sc_pm_lock
);

624 
	`•ö_lock_öô
(&
sc
->
ch™_lock
);

625 
	`muãx_öô
(&
sc
->
muãx
);

626 
	`èskÀt_öô
(&
sc
->
öå_tq
, 
©h9k_èskÀt
, ()sc);

627 
	`èskÀt_öô
(&
sc
->
bc⁄_èskÀt
, 
©h9k_bóc⁄_èskÀt
,

628 ()
sc
);

630 
	`£tup_timî
(&
sc
->
¶ìp_timî
, 
©h_ps_fuŒ_¶ìp
, ()sc);

631 
	`INIT_WORK
(&
sc
->
hw_ª£t_w‹k
, 
©h_ª£t_w‹k
);

632 
	`INIT_WORK
(&
sc
->
∑¥d_w‹k
, 
©h_∑¥d_ˇlibøã
);

633 
	`INIT_DELAYED_WORK
(&
sc
->
hw_∂l_w‹k
, 
©h_hw_∂l_w‹k
);

635 
	`©h9k_öô_ch™√l_c⁄ãxt
(
sc
);

641 
	`©h_ªad_ˇchesize
(
comm⁄
, &
csz
);

642 
comm⁄
->
ˇchñsz
 = 
csz
 << 2;

645 
ªt
 = 
	`©h9k_hw_öô
(
ah
);

646 i‡(
ªt
)

647 
îr_hw
;

649 i‡(
pd©a
 &&Öd©a->
maˇddr
)

650 
	`mem˝y
(
comm⁄
->
maˇddr
, 
pd©a
->maˇddr, 
ETH_ALEN
);

652 
ªt
 = 
	`©h9k_öô_queues
(
sc
);

653 i‡(
ªt
)

654 
îr_queues
;

656 
ªt
 = 
	`©h9k_öô_btc€x
(
sc
);

657 i‡(
ªt
)

658 
îr_btc€x
;

660 
ªt
 = 
	`©h9k_cmn_öô_ch™√ls_øãs
(
comm⁄
);

661 i‡(
ªt
)

662 
îr_btc€x
;

664 
ªt
 = 
	`©h9k_öô_p2p
(
sc
);

665 i‡(
ªt
)

666 
îr_btc€x
;

668 
	`©h9k_cmn_öô_¸y±o
(
sc
->
sc_ah
);

669 
	`©h9k_öô_misc
(
sc
);

670 
	`©h_fûl_Àd_pö
(
sc
);

671 
	`©h_ch™˘x_öô
(
sc
);

672 
	`©h9k_offch™√l_öô
(
sc
);

674 i‡(
comm⁄
->
bus_›s
->
a•m_öô
)

675 
comm⁄
->
bus_›s
->
	`a•m_öô
(common);

679 
îr_btc€x
:

680 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++)

681 i‡(
	`ATH_TXQ_SETUP
(
sc
, 
i
))

682 
	`©h_tx_˛ónupq
(
sc
, &sc->
tx
.
txq
[
i
]);

683 
îr_queues
:

684 
	`©h9k_hw_deöô
(
ah
);

685 
îr_hw
:

686 
	`©h9k_ì¥om_ªÀa£
(
sc
);

687 
	`dev_k‰ì_skb_™y
(
sc
->
tx99_skb
);

688  
ªt
;

689 
	}
}

691 
	$©h9k_öô_b™d_txpowî
(
©h_so·c
 *
sc
, 
b™d
)

693 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

694 
õì80211_ch™√l
 *
ch™
;

695 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

696 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

697 
cfg80211_ch™_def
 
ch™def
;

698 
i
;

700 
sb™d
 = &
comm⁄
->
sb™ds
[
b™d
];

701 
i
 = 0; i < 
sb™d
->
n_ch™√ls
; i++) {

702 
ch™
 = &
sb™d
->
ch™√ls
[
i
];

703 
ah
->
curch™
 = &ah->
ch™√ls
[
ch™
->
hw_vÆue
];

704 
	`cfg80211_ch™def_¸óã
(&
ch™def
, 
ch™
, 
NL80211_CHAN_HT20
);

705 
	`©h9k_cmn_gë_ch™√l
(
sc
->
hw
, 
ah
, &
ch™def
);

706 
	`©h9k_hw_£t_txpowîlimô
(
ah
, 
MAX_RATE_POWER
, 
åue
);

708 
	}
}

710 
	$©h9k_öô_txpowî_limôs
(
©h_so·c
 *
sc
)

712 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

713 
©h9k_ch™√l
 *
curch™
 = 
ah
->curchan;

715 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_2GHZ
)

716 
	`©h9k_öô_b™d_txpowî
(
sc
, 
IEEE80211_BAND_2GHZ
);

717 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_5GHZ
)

718 
	`©h9k_öô_b™d_txpowî
(
sc
, 
IEEE80211_BAND_5GHZ
);

720 
ah
->
curch™
 = curchan;

721 
	}
}

723 c⁄° 
õì80211_iÁ˚_limô
 
	gif_limôs
[] = {

724 { .
max
 = 2048, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_STATION
) },

725 { .
	gmax
 = 8, .
	gty≥s
 =

726 #ifde‡
CONFIG_MAC80211_MESH


727 
BIT
(
NL80211_IFTYPE_MESH_POINT
) |

729 
BIT
(
NL80211_IFTYPE_AP
) },

730 { .
	gmax
 = 1, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_P2P_CLIENT
) |

731 
BIT
(
NL80211_IFTYPE_P2P_GO
) },

734 c⁄° 
õì80211_iÁ˚_limô
 
	gwds_limôs
[] = {

735 { .
max
 = 2048, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_WDS
) },

738 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


740 c⁄° 
õì80211_iÁ˚_limô
 
	gif_limôs_mu…i
[] = {

741 { .
max
 = 2, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_STATION
) |

742 
BIT
(
NL80211_IFTYPE_AP
) |

743 
BIT
(
NL80211_IFTYPE_P2P_CLIENT
) |

744 
BIT
(
NL80211_IFTYPE_P2P_GO
) },

745 { .
	gmax
 = 1, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_ADHOC
) },

746 { .
	gmax
 = 1, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_P2P_DEVICE
) },

749 c⁄° 
õì80211_iÁ˚_combö©i⁄
 
	gif_comb_mu…i
[] = {

751 .
limôs
 = 
if_limôs_mu…i
,

752 .
	gn_limôs
 = 
ARRAY_SIZE
(
if_limôs_mu…i
),

753 .
	gmax_öãrÁ˚s
 = 3,

754 .
	gnum_dif„ª¡_ch™√ls
 = 2,

755 .
	gbóc⁄_öt_ö‰a_m©ch
 = 
åue
,

761 c⁄° 
õì80211_iÁ˚_limô
 
	gif_dfs_limôs
[] = {

762 { .
max
 = 1, .
	gty≥s
 = 
BIT
(
NL80211_IFTYPE_AP
) |

763 #ifde‡
CONFIG_MAC80211_MESH


764 
BIT
(
NL80211_IFTYPE_MESH_POINT
) |

766 
BIT
(
NL80211_IFTYPE_ADHOC
) },

769 c⁄° 
õì80211_iÁ˚_combö©i⁄
 
	gif_comb
[] = {

771 .
limôs
 = 
if_limôs
,

772 .
	gn_limôs
 = 
ARRAY_SIZE
(
if_limôs
),

773 .
	gmax_öãrÁ˚s
 = 2048,

774 .
	gnum_dif„ª¡_ch™√ls
 = 1,

775 .
	gbóc⁄_öt_ö‰a_m©ch
 = 
åue
,

778 .
	glimôs
 = 
wds_limôs
,

779 .
	gn_limôs
 = 
ARRAY_SIZE
(
wds_limôs
),

780 .
	gmax_öãrÁ˚s
 = 2048,

781 .
	gnum_dif„ª¡_ch™√ls
 = 1,

782 .
	gbóc⁄_öt_ö‰a_m©ch
 = 
åue
,

784 #ifde‡
CONFIG_ATH9K_DFS_CERTIFIED


786 .
	glimôs
 = 
if_dfs_limôs
,

787 .
	gn_limôs
 = 
ARRAY_SIZE
(
if_dfs_limôs
),

788 .
	gmax_öãrÁ˚s
 = 1,

789 .
	gnum_dif„ª¡_ch™√ls
 = 1,

790 .
	gbóc⁄_öt_ö‰a_m©ch
 = 
åue
,

791 .
	gød¨_dëe˘_widths
 = 
BIT
(
NL80211_CHAN_WIDTH_20_NOHT
) |

792 
BIT
(
NL80211_CHAN_WIDTH_20
) |

793 
BIT
(
NL80211_CHAN_WIDTH_40
),

798 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


799 
	$©h9k_£t_mcc_ˇ∑b
(
©h_so·c
 *
sc
, 
õì80211_hw
 *
hw
)

801 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

802 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

804 i‡(!
	`©h9k_is_ch™˘x_íabÀd
())

807 
	`õì80211_hw_£t
(
hw
, 
QUEUE_CONTROL
);

808 
hw
->
queues
 = 
ATH9K_NUM_TX_QUEUES
;

809 
hw
->
offch™√l_tx_hw_queue
 = hw->
queues
 - 1;

810 
hw
->
wùhy
->
öãrÁ˚_modes
 &~ 
	`BIT
(
NL80211_IFTYPE_WDS
);

811 
hw
->
wùhy
->
iÁ˚_combö©i⁄s
 = 
if_comb_mu…i
;

812 
hw
->
wùhy
->
n_iÁ˚_combö©i⁄s
 = 
	`ARRAY_SIZE
(
if_comb_mu…i
);

813 
hw
->
wùhy
->
max_sˇn_ssids
 = 255;

814 
hw
->
wùhy
->
max_sˇn_õ_Àn
 = 
IEEE80211_MAX_DATA_LEN
;

815 
hw
->
wùhy
->
max_ªmaö_⁄_ch™√l_duøti⁄
 = 10000;

816 
hw
->
ch™˘x_d©a_size
 = (*);

817 
hw
->
exåa_bóc⁄_èûroom
 =

818 (
õì80211_p2p_nﬂ_©å
) + 9;

820 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "Use channel contexts\n");

821 
	}
}

824 
	$©h9k_£t_hw_ˇ∑b
(
©h_so·c
 *
sc
, 
õì80211_hw
 *
hw
)

826 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

827 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

829 
	`õì80211_hw_£t
(
hw
, 
SUPPORTS_HT_CCK_RATES
);

830 
	`õì80211_hw_£t
(
hw
, 
SUPPORTS_RC_TABLE
);

831 
	`õì80211_hw_£t
(
hw
, 
REPORTS_TX_ACK_STATUS
);

832 
	`õì80211_hw_£t
(
hw
, 
SPECTRUM_MGMT
);

833 
	`õì80211_hw_£t
(
hw
, 
PS_NULLFUNC_STACK
);

834 
	`õì80211_hw_£t
(
hw
, 
SIGNAL_DBM
);

835 
	`õì80211_hw_£t
(
hw
, 
RX_INCLUDES_FCS
);

836 
	`õì80211_hw_£t
(
hw
, 
HOST_BROADCAST_PS_BUFFERING
);

837 
	`õì80211_hw_£t
(
hw
, 
SUPPORT_FAST_XMIT
);

839 i‡(
©h9k_ps_íabÀ
)

840 
	`õì80211_hw_£t
(
hw
, 
SUPPORTS_PS
);

842 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_HT
) {

843 
	`õì80211_hw_£t
(
hw
, 
AMPDU_AGGREGATION
);

845 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

846 
hw
->
ødiŸ≠_mcs_dëaûs
 |=

847 
IEEE80211_RADIOTAP_MCS_HAVE_STBC
;

850 i‡(
	`AR_SREV_9160_10_OR_LATER
(
sc
->
sc_ah
Ë|| 
©h9k_mod∑øm_nohw¸y±
)

851 
	`õì80211_hw_£t
(
hw
, 
MFP_CAPABLE
);

853 
hw
->
wùhy
->
„©uªs
 |
NL80211_FEATURE_ACTIVE_MONITOR
 |

854 
NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE
 |

855 
NL80211_FEATURE_P2P_GO_CTWIN
;

857 i‡(!
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
)) {

858 
hw
->
wùhy
->
öãrÁ˚_modes
 =

859 
	`BIT
(
NL80211_IFTYPE_P2P_GO
) |

860 
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
) |

861 
	`BIT
(
NL80211_IFTYPE_AP
) |

862 
	`BIT
(
NL80211_IFTYPE_STATION
) |

863 
	`BIT
(
NL80211_IFTYPE_ADHOC
) |

864 
	`BIT
(
NL80211_IFTYPE_MESH_POINT
) |

865 
	`BIT
(
NL80211_IFTYPE_WDS
) |

866 
	`BIT
(
NL80211_IFTYPE_OCB
);

868 i‡(
	`©h9k_is_ch™˘x_íabÀd
())

869 
hw
->
wùhy
->
öãrÁ˚_modes
 |=

870 
	`BIT
(
NL80211_IFTYPE_P2P_DEVICE
);

872 
hw
->
wùhy
->
iÁ˚_combö©i⁄s
 = 
if_comb
;

873 
hw
->
wùhy
->
n_iÁ˚_combö©i⁄s
 = 
	`ARRAY_SIZE
(
if_comb
);

876 
hw
->
wùhy
->
Êags
 &~
WIPHY_FLAG_PS_ON_BY_DEFAULT
;

878 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_IBSS_RSN
;

879 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_SUPPORTS_TDLS
;

880 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL
;

881 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_SUPPORTS_5_10_MHZ
;

882 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_HAS_CHANNEL_SWITCH
;

883 
hw
->
wùhy
->
Êags
 |
WIPHY_FLAG_AP_UAPSD
;

885 
hw
->
queues
 = 4;

886 
hw
->
max_øãs
 = 4;

887 
hw
->
max_li°í_öãrvÆ
 = 10;

888 
hw
->
max_øã_åõs
 = 10;

889 
hw
->
°a_d©a_size
 = (
©h_node
);

890 
hw
->
vif_d©a_size
 = (
©h_vif
);

891 
hw
->
exåa_tx_hódroom
 = 4;

893 
hw
->
wùhy
->
avaûabÀ_™ã¬as_rx
 = 
	`BIT
(
ah
->
ˇps
.
max_rxchaös
) - 1;

894 
hw
->
wùhy
->
avaûabÀ_™ã¬as_tx
 = 
	`BIT
(
ah
->
ˇps
.
max_txchaös
) - 1;

897 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
)

898 
hw
->
wùhy
->
avaûabÀ_™ã¬as_rx
 = 
	`BIT
(0) | BIT(1);

900 
sc
->
™t_rx
 = 
hw
->
wùhy
->
avaûabÀ_™ã¬as_rx
;

901 
sc
->
™t_tx
 = 
hw
->
wùhy
->
avaûabÀ_™ã¬as_tx
;

903 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_2GHZ
)

904 
hw
->
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
] =

905 &
comm⁄
->
sb™ds
[
IEEE80211_BAND_2GHZ
];

906 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_5GHZ
)

907 
hw
->
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
] =

908 &
comm⁄
->
sb™ds
[
IEEE80211_BAND_5GHZ
];

910 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


911 
	`©h9k_£t_mcc_ˇ∑b
(
sc
, 
hw
);

913 
	`©h9k_öô_wow
(
hw
);

914 
	`©h9k_cmn_ªlﬂd_chaömask
(
ah
);

916 
	`SET_IEEE80211_PERM_ADDR
(
hw
, 
comm⁄
->
maˇddr
);

917 
	}
}

919 
	$©h9k_öô_devi˚
(
u16
 
devid
, 
©h_so·c
 *
sc
,

920 c⁄° 
©h_bus_›s
 *
bus_›s
)

922 
õì80211_hw
 *
hw
 = 
sc
->hw;

923 
©h_comm⁄
 *
comm⁄
;

924 
©h_hw
 *
ah
;

925 
îr‹
 = 0;

926 
©h_ªguœt‹y
 *
ªg
;

929 
îr‹
 = 
	`©h9k_öô_so·c
(
devid
, 
sc
, 
bus_›s
);

930 i‡(
îr‹
)

931  
îr‹
;

933 
ah
 = 
sc
->
sc_ah
;

934 
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

935 
	`©h9k_£t_hw_ˇ∑b
(
sc
, 
hw
);

938 
îr‹
 = 
	`©h_ªgd_öô
(&
comm⁄
->
ªguœt‹y
, 
sc
->
hw
->
wùhy
,

939 
©h9k_ªg_nŸifõr
);

940 i‡(
îr‹
)

941 
deöô
;

943 
ªg
 = &
comm⁄
->
ªguœt‹y
;

946 
îr‹
 = 
	`©h_tx_öô
(
sc
, 
ATH_TXBUF
);

947 i‡(
îr‹
 != 0)

948 
deöô
;

951 
îr‹
 = 
	`©h_rx_öô
(
sc
, 
ATH_RXBUF
);

952 i‡(
îr‹
 != 0)

953 
deöô
;

955 
	`©h9k_öô_txpowî_limôs
(
sc
);

957 #ifde‡
CONFIG_MAC80211_LEDS


959 
sc
->
Àd_cdev
.
deÁu…_åiggî
 = 
	`õì80211_¸óã_çt_Àd_åiggî
(sc->
hw
,

960 
IEEE80211_TPT_LEDTRIG_FL_RADIO
, 
©h9k_çt_blök
,

961 
	`ARRAY_SIZE
(
©h9k_çt_blök
));

965 
îr‹
 = 
	`õì80211_ªgi°î_hw
(
hw
);

966 i‡(
îr‹
)

967 
rx_˛ónup
;

969 
îr‹
 = 
	`©h9k_öô_debug
(
ah
);

970 i‡(
îr‹
) {

971 
	`©h_îr
(
comm⁄
, "UnableÅo create debugfs files\n");

972 
uƒegi°î
;

976 i‡(!
	`©h_is_w‹ld_ªgd
(
ªg
)) {

977 
îr‹
 = 
	`ªguœt‹y_höt
(
hw
->
wùhy
, 
ªg
->
Æpha2
);

978 i‡(
îr‹
)

979 
debug_˛ónup
;

982 
	`©h_öô_Àds
(
sc
);

983 
	`©h_°¨t_rfkûl_pﬁl
(
sc
);

987 
debug_˛ónup
:

988 
	`©h9k_deöô_debug
(
sc
);

989 
uƒegi°î
:

990 
	`õì80211_uƒegi°î_hw
(
hw
);

991 
rx_˛ónup
:

992 
	`©h_rx_˛ónup
(
sc
);

993 
deöô
:

994 
	`©h9k_deöô_so·c
(
sc
);

995  
îr‹
;

996 
	}
}

1002 
	$©h9k_deöô_so·c
(
©h_so·c
 *
sc
)

1004 
i
 = 0;

1006 
	`©h9k_deöô_p2p
(
sc
);

1007 
	`©h9k_deöô_btc€x
(
sc
);

1009 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++)

1010 i‡(
	`ATH_TXQ_SETUP
(
sc
, 
i
))

1011 
	`©h_tx_˛ónupq
(
sc
, &sc->
tx
.
txq
[
i
]);

1013 
	`dñ_timî_sync
(&
sc
->
¶ìp_timî
);

1014 
	`©h9k_hw_deöô
(
sc
->
sc_ah
);

1015 i‡(
sc
->
dfs_dëe˘‹
 !
NULL
)

1016 
sc
->
dfs_dëe˘‹
->
	`exô
(sc->dfs_detector);

1018 
	`©h9k_ì¥om_ªÀa£
(
sc
);

1019 
	}
}

1021 
	$©h9k_deöô_devi˚
(
©h_so·c
 *
sc
)

1023 
õì80211_hw
 *
hw
 = 
sc
->hw;

1025 
	`©h9k_ps_wakeup
(
sc
);

1027 
	`wùhy_rfkûl_°›_pﬁlög
(
sc
->
hw
->
wùhy
);

1028 
	`©h_deöô_Àds
(
sc
);

1030 
	`©h9k_ps_ª°‹e
(
sc
);

1032 
	`©h9k_deöô_debug
(
sc
);

1033 
	`©h9k_deöô_wow
(
hw
);

1034 
	`õì80211_uƒegi°î_hw
(
hw
);

1035 
	`©h_rx_˛ónup
(
sc
);

1036 
	`©h9k_deöô_so·c
(
sc
);

1037 
	}
}

1043 
__öô
 
	$©h9k_öô
()

1045 
îr‹
;

1047 
îr‹
 = 
	`©h_pci_öô
();

1048 i‡(
îr‹
 < 0) {

1049 
	`¥_îr
("No PCI devices found, driverÇot installed\n");

1050 
îr‹
 = -
ENODEV
;

1051 
îr_out
;

1054 
îr‹
 = 
	`©h_ahb_öô
();

1055 i‡(
îr‹
 < 0) {

1056 
îr‹
 = -
ENODEV
;

1057 
îr_pci_exô
;

1062 
îr_pci_exô
:

1063 
	`©h_pci_exô
();

1064 
îr_out
:

1065  
îr‹
;

1066 
	}
}

1067 
moduÀ_öô
(
©h9k_öô
);

1069 
__exô
 
	$©h9k_exô
()

1071 
is_©h9k_u∆ﬂded
 = 
åue
;

1072 
	`©h_ahb_exô
();

1073 
	`©h_pci_exô
();

1074 
	`¥_öfo
("%s: Drivî u∆ﬂded\n", 
dev_öfo
);

1075 
	}
}

1076 
moduÀ_exô
(
©h9k_exô
);

	@link.c

17 
	~"©h9k.h
"

23 
	$©h_tx_com∂ëe_pﬁl_w‹k
(
w‹k_°ru˘
 *
w‹k
)

25 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
w‹k
, ath_softc,

26 
tx_com∂ëe_w‹k
.
w‹k
);

27 
©h_txq
 *
txq
;

28 
i
;

29 
boﬁ
 
√edª£t
 = 
Ál£
;

32 i‡(
sc
->
tx99_°©e
) {

33 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
RESET
,

38 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++) {

39 
txq
 = 
sc
->
tx
.
txq_m≠
[
i
];

41 
	`©h_txq_lock
(
sc
, 
txq
);

42 i‡(
txq
->
axq_dïth
) {

43 i‡(
txq
->
axq_tx_ö¥ogªss
) {

44 
√edª£t
 = 
åue
;

45 
	`©h_txq_u∆ock
(
sc
, 
txq
);

48 
txq
->
axq_tx_ö¥ogªss
 = 
åue
;

51 
	`©h_txq_u∆ock
(
sc
, 
txq
);

54 i‡(
√edª£t
) {

55 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
RESET
,

57 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_TX_HANG
);

61 
	`õì80211_queue_dñayed_w‹k
(
sc
->
hw
, &sc->
tx_com∂ëe_w‹k
,

62 
	`m£cs_to_jiffõs
(
ATH_TX_COMPLETE_POLL_INT
));

63 
	}
}

68 
boﬁ
 
	$©h_hw_check
(
©h_so·c
 *
sc
)

70 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

71 
©h_ª£t_ty≥
 
ty≥
;

72 
boﬁ
 
is_Æive
;

74 
	`©h9k_ps_wakeup
(
sc
);

76 
is_Æive
 = 
	`©h9k_hw_check_Æive
(
sc
->
sc_ah
);

78 i‡(!
is_Æive
) {

79 
	`©h_dbg
(
comm⁄
, 
RESET
,

81 
ty≥
 = 
RESET_TYPE_MAC_HANG
;

82 
	`©h9k_queue_ª£t
(
sc
, 
ty≥
);

85 
	`©h9k_ps_ª°‹e
(
sc
);

87  
is_Æive
;

88 
	}
}

93 
boﬁ
 
	$©h_hw_∂l_rx_h™g_check
(
©h_so·c
 *
sc
, 
u32
 
∂l_sqsum
)

95 
cou¡
;

96 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

98 i‡(
∂l_sqsum
 >= 0x40000) {

99 
cou¡
++;

100 i‡(
cou¡
 == 3) {

101 
	`©h_dbg
(
comm⁄
, 
RESET
, "PLL WAR,ÑesettingÅhe chip\n");

102 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_PLL_HANG
);

103 
cou¡
 = 0;

104  
åue
;

107 
cou¡
 = 0;

110  
Ál£
;

111 
	}
}

113 
	$©h_hw_∂l_w‹k
(
w‹k_°ru˘
 *
w‹k
)

115 
u32
 
∂l_sqsum
;

116 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
w‹k
, ath_softc,

117 
hw_∂l_w‹k
.
w‹k
);

118 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

125 i‡(!
	`ã°_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
))

128 i‡(
sc
->
tx99_°©e
)

131 
	`©h9k_ps_wakeup
(
sc
);

132 
∂l_sqsum
 = 
	`¨9003_gë_∂l_sqsum_dvc
(
sc
->
sc_ah
);

133 
	`©h9k_ps_ª°‹e
(
sc
);

134 i‡(
	`©h_hw_∂l_rx_h™g_check
(
sc
, 
∂l_sqsum
))

137 
	`õì80211_queue_dñayed_w‹k
(
sc
->
hw
, &sc->
hw_∂l_w‹k
,

138 
	`m£cs_to_jiffõs
(
ATH_PLL_WORK_INTERVAL
));

139 
	}
}

144 
	$©h_∑¥d_a˘iv©e
(
©h_so·c
 *
sc
)

146 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

147 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

148 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

149 
chaö
;

151 i‡(!
ˇld©a
 || !
	`ã°_bô
(
PAPRD_DONE
, &ˇld©a->
ˇl_Êags
)) {

152 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "FailedÅoáctivate PAPRD\n");

156 
	`¨9003_∑¥d_íabÀ
(
ah
, 
Ál£
);

157 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

158 i‡(!(
ah
->
txchaömask
 & 
	`BIT
(
chaö
)))

161 
	`¨9003_∑¥d_p›uœã_sögÀ_èbÀ
(
ah
, 
ˇld©a
, 
chaö
);

164 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Activating PAPRD\n");

165 
	`¨9003_∑¥d_íabÀ
(
ah
, 
åue
);

166 
	}
}

168 
boﬁ
 
	$©h_∑¥d_£nd_‰ame
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
, 
chaö
)

170 
õì80211_hw
 *
hw
 = 
sc
->hw;

171 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

172 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

173 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

174 
©h_tx_c⁄åﬁ
 
tx˘l
;

175 
time_À·
;

177 
	`mem£t
(&
tx˘l
, 0, (txctl));

178 
tx˘l
.
txq
 = 
sc
->
tx
.
txq_m≠
[
IEEE80211_AC_BE
];

180 
	`mem£t
(
tx_öfo
, 0, (*tx_info));

181 
tx_öfo
->
b™d
 = 
sc
->
cur_ch™def
.
ch™
->band;

182 
tx_öfo
->
Êags
 |
IEEE80211_TX_CTL_NO_ACK
;

183 
tx_öfo
->
c⁄åﬁ
.
øãs
[0].
idx
 = 0;

184 
tx_öfo
->
c⁄åﬁ
.
øãs
[0].
cou¡
 = 1;

185 
tx_öfo
->
c⁄åﬁ
.
øãs
[0].
Êags
 = 
IEEE80211_TX_RC_MCS
;

186 
tx_öfo
->
c⁄åﬁ
.
øãs
[1].
idx
 = -1;

188 
	`öô_com∂ëi⁄
(&
sc
->
∑¥d_com∂ëe
);

189 
tx˘l
.
∑¥d
 = 
	`BIT
(
chaö
);

191 i‡(
	`©h_tx_°¨t
(
hw
, 
skb
, &
tx˘l
) != 0) {

192 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "PAPRD TX failed\n");

193 
	`dev_k‰ì_skb_™y
(
skb
);

194  
Ál£
;

197 
time_À·
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
sc
->
∑¥d_com∂ëe
,

198 
	`m£cs_to_jiffõs
(
ATH_PAPRD_TIMEOUT
));

200 i‡(!
time_À·
)

201 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

203 
chaö
);

205  !!
time_À·
;

206 
	}
}

208 
	$©h_∑¥d_ˇlibøã
(
w‹k_°ru˘
 *
w‹k
)

210 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
w‹k
, ©h_so·c, 
∑¥d_w‹k
);

211 
õì80211_hw
 *
hw
 = 
sc
->hw;

212 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

213 
õì80211_hdr
 *
hdr
;

214 
sk_buff
 *
skb
 = 
NULL
;

215 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
ah
->caldata;

216 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

217 
·y≥
;

218 
chaö_ok
 = 0;

219 
chaö
;

220 
Àn
 = 1800;

221 
ªt
;

223 i‡(!
ˇld©a
 ||

224 !
	`ã°_bô
(
PAPRD_PACKET_SENT
, &
ˇld©a
->
ˇl_Êags
) ||

225 
	`ã°_bô
(
PAPRD_DONE
, &
ˇld©a
->
ˇl_Êags
)) {

226 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
, "Skipping PAPRD calibration\n");

230 
	`©h9k_ps_wakeup
(
sc
);

232 i‡(
	`¨9003_∑¥d_öô_èbÀ
(
ah
) < 0)

233 
Áû_∑¥d
;

235 
skb
 = 
	`Æloc_skb
(
Àn
, 
GFP_KERNEL
);

236 i‡(!
skb
)

237 
Áû_∑¥d
;

239 
	`skb_put
(
skb
, 
Àn
);

240 
	`mem£t
(
skb
->
d©a
, 0, 
Àn
);

241 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

242 
·y≥
 = 
IEEE80211_FTYPE_DATA
 | 
IEEE80211_STYPE_NULLFUNC
;

243 
hdr
->
‰ame_c⁄åﬁ
 = 
	`˝u_to_À16
(
·y≥
);

244 
hdr
->
duøti⁄_id
 = 
	`˝u_to_À16
(10);

245 
	`mem˝y
(
hdr
->
addr1
, 
hw
->
wùhy
->
≥rm_addr
, 
ETH_ALEN
);

246 
	`mem˝y
(
hdr
->
addr2
, 
hw
->
wùhy
->
≥rm_addr
, 
ETH_ALEN
);

247 
	`mem˝y
(
hdr
->
addr3
, 
hw
->
wùhy
->
≥rm_addr
, 
ETH_ALEN
);

249 
chaö
 = 0; chaö < 
AR9300_MAX_CHAINS
; chain++) {

250 i‡(!(
ah
->
txchaömask
 & 
	`BIT
(
chaö
)))

253 
chaö_ok
 = 0;

254 
	`¨9003_∑¥d_£tup_gaö_èbÀ
(
ah
, 
chaö
);

256 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

257 "Sídög PAPRDÅøöög fømê⁄ chaö %d\n", 
chaö
);

258 i‡(!
	`©h_∑¥d_£nd_‰ame
(
sc
, 
skb
, 
chaö
))

259 
Áû_∑¥d
;

261 i‡(!
	`¨9003_∑¥d_is_d⁄e
(
ah
)) {

262 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

263 "PAPRDÇŸ yë d⁄ê⁄ chaö %d\n", 
chaö
);

267 
ªt
 = 
	`¨9003_∑¥d_¸óã_curve
(
ah
, 
ˇld©a
, 
chaö
);

268 i‡(
ªt
 =-
EINPROGRESS
) {

269 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

271 
chaö
);

273 } i‡(
ªt
) {

274 
	`©h_dbg
(
comm⁄
, 
CALIBRATE
,

276 
chaö
);

280 
chaö_ok
 = 1;

282 
	`k‰ì_skb
(
skb
);

284 i‡(
chaö_ok
) {

285 
	`£t_bô
(
PAPRD_DONE
, &
ˇld©a
->
ˇl_Êags
);

286 
	`©h_∑¥d_a˘iv©e
(
sc
);

289 
Áû_∑¥d
:

290 
	`©h9k_ps_ª°‹e
(
sc
);

291 
	}
}

300 
	$©h_™i_ˇlibøã
(
d©a
)

302 
©h_so·c
 *
sc
 = (©h_so·¯*)
d©a
;

303 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

304 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

305 
boﬁ
 
l⁄gˇl
 = 
Ál£
;

306 
boﬁ
 
sh‹tˇl
 = 
Ál£
;

307 
boﬁ
 
™iÊag
 = 
Ál£
;

308 
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

309 
u32
 
ˇl_öãrvÆ
, 
sh‹t_ˇl_öãrvÆ
, 
l⁄g_ˇl_öãrvÆ
;

310 
Êags
;

312 i‡(
ah
->
ˇld©a
 && 
	`ã°_bô
(
NFCAL_INTF
, &ah->ˇld©a->
ˇl_Êags
))

313 
l⁄g_ˇl_öãrvÆ
 = 
ATH_LONG_CALINTERVAL_INT
;

315 
l⁄g_ˇl_öãrvÆ
 = 
ATH_LONG_CALINTERVAL
;

317 
sh‹t_ˇl_öãrvÆ
 = (
ah
->
›mode
 =
NL80211_IFTYPE_AP
) ?

318 
ATH_AP_SHORT_CALINTERVAL
 : 
ATH_STA_SHORT_CALINTERVAL
;

321 i‡(
sc
->
sc_ah
->
powî_mode
 !
ATH9K_PM_AWAKE
) {

322 i‡(++
ah
->
™i_skù_cou¡
 >
ATH_ANI_MAX_SKIP_COUNT
) {

323 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

324 
sc
->
ps_Êags
 |
PS_WAIT_FOR_ANI
;

325 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

327 
£t_timî
;

329 
ah
->
™i_skù_cou¡
 = 0;

330 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

331 
sc
->
ps_Êags
 &~
PS_WAIT_FOR_ANI
;

332 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

334 
	`©h9k_ps_wakeup
(
sc
);

337 i‡((
time°amp
 - 
comm⁄
->
™i
.
l⁄gˇl_timî
Ë>
l⁄g_ˇl_öãrvÆ
) {

338 
l⁄gˇl
 = 
åue
;

339 
comm⁄
->
™i
.
l⁄gˇl_timî
 = 
time°amp
;

343 i‡(!
comm⁄
->
™i
.
ˇld⁄e
) {

344 i‡((
time°amp
 - 
comm⁄
->
™i
.
sh‹tˇl_timî
Ë>
sh‹t_ˇl_öãrvÆ
) {

345 
sh‹tˇl
 = 
åue
;

346 
comm⁄
->
™i
.
sh‹tˇl_timî
 = 
time°amp
;

347 
comm⁄
->
™i
.
ª£tˇl_timî
 = 
time°amp
;

350 i‡((
time°amp
 - 
comm⁄
->
™i
.
ª£tˇl_timî
) >=

351 
ATH_RESTART_CALINTERVAL
) {

352 
comm⁄
->
™i
.
ˇld⁄e
 = 
	`©h9k_hw_ª£t_ˇlvÆid
(
ah
);

353 i‡(
comm⁄
->
™i
.
ˇld⁄e
)

354 
comm⁄
->
™i
.
ª£tˇl_timî
 = 
time°amp
;

359 i‡((
time°amp
 - 
comm⁄
->
™i
.
check™i_timî
Ë>
ah
->
c⁄fig
.
™i_pﬁl_öãrvÆ
) {

360 
™iÊag
 = 
åue
;

361 
comm⁄
->
™i
.
check™i_timî
 = 
time°amp
;

365 i‡(
™iÊag
) {

366 
	`•ö_lock
(&
comm⁄
->
cc_lock
);

367 
	`©h9k_hw_™i_m⁄ô‹
(
ah
,áh->
curch™
);

368 
	`©h_upd©e_survey_°©s
(
sc
);

369 
	`•ö_u∆ock
(&
comm⁄
->
cc_lock
);

373 i‡(
l⁄gˇl
 || 
sh‹tˇl
) {

374 
ªt
 = 
	`©h9k_hw_ˇlibøã
(
ah
,áh->
curch™
,áh->
rxchaömask
,

375 
l⁄gˇl
);

376 i‡(
ªt
 < 0) {

377 
comm⁄
->
™i
.
ˇld⁄e
 = 0;

378 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_CALIBRATION
);

382 
comm⁄
->
™i
.
ˇld⁄e
 = 
ªt
;

385 
	`©h_dbg
(
comm⁄
, 
ANI
,

387 
jiffõs
,

388 
l⁄gˇl
 ? "l⁄g" : "", 
sh‹tˇl
 ? "short" : "",

389 
™iÊag
 ? "™i" : "", 
comm⁄
->
™i
.
ˇld⁄e
 ? "true" : "false");

391 
	`©h9k_ps_ª°‹e
(
sc
);

393 
£t_timî
:

399 
ˇl_öãrvÆ
 = 
ATH_LONG_CALINTERVAL
;

400 
ˇl_öãrvÆ
 = 
	`mö
(ˇl_öãrvÆ, (
u32
)
ah
->
c⁄fig
.
™i_pﬁl_öãrvÆ
);

401 i‡(!
comm⁄
->
™i
.
ˇld⁄e
)

402 
ˇl_öãrvÆ
 = 
	`mö
(ˇl_öãrvÆ, (
u32
)
sh‹t_ˇl_öãrvÆ
);

404 
	`mod_timî
(&
comm⁄
->
™i
.
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
ˇl_öãrvÆ
));

406 i‡(
	`¨9003_is_∑¥d_íabÀd
(
ah
Ë&&áh->
ˇld©a
) {

407 i‡(!
	`ã°_bô
(
PAPRD_DONE
, &
ah
->
ˇld©a
->
ˇl_Êags
)) {

408 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
∑¥d_w‹k
);

409 } i‡(!
ah
->
∑¥d_èbÀ_wrôe_d⁄e
) {

410 
	`©h9k_ps_wakeup
(
sc
);

411 
	`©h_∑¥d_a˘iv©e
(
sc
);

412 
	`©h9k_ps_ª°‹e
(
sc
);

415 
	}
}

417 
	$©h_°¨t_™i
(
©h_so·c
 *
sc
)

419 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

420 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

421 
time°amp
 = 
	`jiffõs_to_m£cs
(
jiffõs
);

423 i‡(
comm⁄
->
dißbÀ_™i
 ||

424 !
	`ã°_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
) ||

425 
sc
->
cur_ch™
->
offch™√l
)

428 
comm⁄
->
™i
.
l⁄gˇl_timî
 = 
time°amp
;

429 
comm⁄
->
™i
.
sh‹tˇl_timî
 = 
time°amp
;

430 
comm⁄
->
™i
.
check™i_timî
 = 
time°amp
;

432 
	`©h_dbg
(
comm⁄
, 
ANI
, "Starting ANI\n");

433 
	`mod_timî
(&
comm⁄
->
™i
.
timî
,

434 
jiffõs
 + 
	`m£cs_to_jiffõs
((
u32
)
ah
->
c⁄fig
.
™i_pﬁl_öãrvÆ
));

435 
	}
}

437 
	$©h_°›_™i
(
©h_so·c
 *
sc
)

439 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

441 
	`©h_dbg
(
comm⁄
, 
ANI
, "Stopping ANI\n");

442 
	`dñ_timî_sync
(&
comm⁄
->
™i
.
timî
);

443 
	}
}

445 
	$©h_check_™i
(
©h_so·c
 *
sc
)

447 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

448 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

449 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

455 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_ADHOC
) {

456 i‡(!
cur_c⁄f
->
íabÀ_bóc⁄
)

457 
°›_™i
;

458 } i‡(
ah
->
›mode
 =
NL80211_IFTYPE_AP
) {

459 i‡(!
cur_c⁄f
->
íabÀ_bóc⁄
) {

464 i‡(!
	`ã°_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
))

465 
°›_™i
;

467 } i‡(
ah
->
›mode
 =
NL80211_IFTYPE_STATION
) {

468 i‡(!
	`ã°_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
))

469 
°›_™i
;

472 i‡(!
	`ã°_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
)) {

473 
	`£t_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
);

474 
	`©h_°¨t_™i
(
sc
);

479 
°›_™i
:

480 
	`˛ór_bô
(
ATH_OP_ANI_RUN
, &
comm⁄
->
›_Êags
);

481 
	`©h_°›_™i
(
sc
);

482 
	}
}

484 
	$©h_upd©e_survey_nf
(
©h_so·c
 *
sc
, 
ch™√l
)

486 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

487 
©h9k_ch™√l
 *
ch™
 = &
ah
->
ch™√ls
[
ch™√l
];

488 
survey_öfo
 *
survey
 = &
sc
->survey[
ch™√l
];

490 i‡(
ch™
->
noi£Êo‹
) {

491 
survey
->
fûÀd
 |
SURVEY_INFO_NOISE_DBM
;

492 
survey
->
noi£
 = 
	`©h9k_hw_gëch™_noi£
(
ah
, 
ch™
,

493 
ch™
->
noi£Êo‹
);

495 
	}
}

502 
	$©h_upd©e_survey_°©s
(
©h_so·c
 *
sc
)

504 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

505 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

506 
pos
 = 
ah
->
curch™
 - &ah->
ch™√ls
[0];

507 
survey_öfo
 *
survey
 = &
sc
->survey[
pos
];

508 
©h_cy˛e_cou¡îs
 *
cc
 = &
comm⁄
->
cc_survey
;

509 
div
 = 
comm⁄
->
˛ockøã
 * 1000;

510 
ªt
 = 0;

512 i‡(!
ah
->
curch™
)

515 i‡(
ah
->
powî_mode
 =
ATH9K_PM_AWAKE
)

516 
	`©h_hw_cy˛e_cou¡îs_upd©e
(
comm⁄
);

518 i‡(
cc
->
cy˛es
 > 0) {

519 
survey
->
fûÀd
 |
SURVEY_INFO_TIME
 |

520 
SURVEY_INFO_TIME_BUSY
 |

521 
SURVEY_INFO_TIME_RX
 |

522 
SURVEY_INFO_TIME_TX
;

523 
survey
->
time
 +
cc
->
cy˛es
 / 
div
;

524 
survey
->
time_busy
 +
cc
->
rx_busy
 / 
div
;

525 
survey
->
time_rx
 +
cc
->
rx_‰ame
 / 
div
;

526 
survey
->
time_tx
 +
cc
->
tx_‰ame
 / 
div
;

529 i‡(
cc
->
cy˛es
 < 
div
)

532 i‡(
cc
->
cy˛es
 > 0)

533 
ªt
 = 
cc
->
rx_busy
 * 100 / cc->
cy˛es
;

535 
	`mem£t
(
cc
, 0, (*cc));

537 
	`©h_upd©e_survey_nf
(
sc
, 
pos
);

539  
ªt
;

540 
	}
}

	@mac.c

17 
	~"hw.h
"

18 
	~"hw-›s.h
"

19 
	~<löux/exp‹t.h
>

21 
	$©h9k_hw_£t_txq_öãºu±s
(
©h_hw
 *
ah
,

22 
©h9k_tx_queue_öfo
 *
qi
)

24 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
INTERRUPT
,

26 
ah
->
txok_öãºu±_mask
,áh->
txîr_öãºu±_mask
,

27 
ah
->
txdesc_öãºu±_mask
,áh->
txeﬁ_öãºu±_mask
,

28 
ah
->
txu∫_öãºu±_mask
);

30 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

32 
	`REG_WRITE
(
ah
, 
AR_IMR_S0
,

33 
	`SM
(
ah
->
txok_öãºu±_mask
, 
AR_IMR_S0_QCU_TXOK
)

34 | 
	`SM
(
ah
->
txdesc_öãºu±_mask
, 
AR_IMR_S0_QCU_TXDESC
));

35 
	`REG_WRITE
(
ah
, 
AR_IMR_S1
,

36 
	`SM
(
ah
->
txîr_öãºu±_mask
, 
AR_IMR_S1_QCU_TXERR
)

37 | 
	`SM
(
ah
->
txeﬁ_öãºu±_mask
, 
AR_IMR_S1_QCU_TXEOL
));

39 
ah
->
imrs2_ªg
 &~
AR_IMR_S2_QCU_TXURN
;

40 
ah
->
imrs2_ªg
 |◊h->
txu∫_öãºu±_mask
 & 
AR_IMR_S2_QCU_TXURN
);

41 
	`REG_WRITE
(
ah
, 
AR_IMR_S2
,áh->
imrs2_ªg
);

43 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

44 
	}
}

46 
u32
 
	$©h9k_hw_gëtxbuf
(
©h_hw
 *
ah
, 
u32
 
q
)

48  
	`REG_READ
(
ah
, 
	`AR_QTXDP
(
q
));

49 
	}
}

50 
EXPORT_SYMBOL
(
©h9k_hw_gëtxbuf
);

52 
	$©h9k_hw_puâxbuf
(
©h_hw
 *
ah
, 
u32
 
q
, u32 
txdp
)

54 
	`REG_WRITE
(
ah
, 
	`AR_QTXDP
(
q
), 
txdp
);

55 
	}
}

56 
EXPORT_SYMBOL
(
©h9k_hw_puâxbuf
);

58 
	$©h9k_hw_tx°¨t
(
©h_hw
 *
ah
, 
u32
 
q
)

60 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
QUEUE
, "E«bÀ TXE o¿queue: %u\n", 
q
);

61 
	`REG_WRITE
(
ah
, 
AR_Q_TXE
, 1 << 
q
);

62 
	}
}

63 
EXPORT_SYMBOL
(
©h9k_hw_tx°¨t
);

65 
u32
 
	$©h9k_hw_numtx≥ndög
(
©h_hw
 *
ah
, 
u32
 
q
)

67 
u32
 
≈íd
;

69 
≈íd
 = 
	`REG_READ
(
ah
, 
	`AR_QSTS
(
q
)Ë& 
AR_Q_STS_PEND_FR_CNT
;

70 i‡(
≈íd
 == 0) {

72 i‡(
	`REG_READ
(
ah
, 
AR_Q_TXE
Ë& (1 << 
q
))

73 
≈íd
 = 1;

76  
≈íd
;

77 
	}
}

78 
EXPORT_SYMBOL
(
©h9k_hw_numtx≥ndög
);

105 
boﬁ
 
	$©h9k_hw_upd©ëxåigÀvñ
(
©h_hw
 *
ah
, 
boﬁ
 
bIncTrigLevñ
)

107 
u32
 
txcfg
, 
curLevñ
, 
√wLevñ
;

109 i‡(
ah
->
tx_åig_Àvñ
 >ah->
c⁄fig
.
max_txåig_Àvñ
)

110  
Ál£
;

112 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

114 
txcfg
 = 
	`REG_READ
(
ah
, 
AR_TXCFG
);

115 
curLevñ
 = 
	`MS
(
txcfg
, 
AR_FTRIG
);

116 
√wLevñ
 = 
curLevñ
;

117 i‡(
bIncTrigLevñ
) {

118 i‡(
curLevñ
 < 
ah
->
c⁄fig
.
max_txåig_Àvñ
)

119 
√wLevñ
++;

120 } i‡(
curLevñ
 > 
MIN_TX_FIFO_THRESHOLD
)

121 
√wLevñ
--;

122 i‡(
√wLevñ
 !
curLevñ
)

123 
	`REG_WRITE
(
ah
, 
AR_TXCFG
,

124 (
txcfg
 & ~
AR_FTRIG
Ë| 
	`SM
(
√wLevñ
, AR_FTRIG));

126 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

128 
ah
->
tx_åig_Àvñ
 = 
√wLevñ
;

130  
√wLevñ
 !
curLevñ
;

131 
	}
}

132 
EXPORT_SYMBOL
(
©h9k_hw_upd©ëxåigÀvñ
);

134 
	$©h9k_hw_ab‹t_tx_dma
(
©h_hw
 *
ah
)

136 
maxdñay
 = 1000;

137 
i
, 
q
;

139 i‡(
ah
->
curch™
) {

140 i‡(
	`IS_CHAN_HALF_RATE
(
ah
->
curch™
))

141 
maxdñay
 *= 2;

142 i‡(
	`IS_CHAN_QUARTER_RATE
(
ah
->
curch™
))

143 
maxdñay
 *= 4;

146 
	`REG_WRITE
(
ah
, 
AR_Q_TXD
, 
AR_Q_TXD_M
);

148 
	`REG_SET_BIT
(
ah
, 
AR_PCU_MISC
, 
AR_PCU_FORCE_QUIET_COLL
 | 
AR_PCU_CLEAR_VMF
);

149 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_FORCE_CH_IDLE_HIGH
);

150 
	`REG_SET_BIT
(
ah
, 
AR_D_GBL_IFS_MISC
, 
AR_D_GBL_IFS_MISC_IGNORE_BACKOFF
);

152 
q
 = 0; q < 
AR_NUM_QCU
; q++) {

153 
i
 = 0; i < 
maxdñay
; i++) {

154 i‡(
i
)

155 
	`udñay
(5);

157 i‡(!
	`©h9k_hw_numtx≥ndög
(
ah
, 
q
))

162 
	`REG_CLR_BIT
(
ah
, 
AR_PCU_MISC
, 
AR_PCU_FORCE_QUIET_COLL
 | 
AR_PCU_CLEAR_VMF
);

163 
	`REG_CLR_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_FORCE_CH_IDLE_HIGH
);

164 
	`REG_CLR_BIT
(
ah
, 
AR_D_GBL_IFS_MISC
, 
AR_D_GBL_IFS_MISC_IGNORE_BACKOFF
);

166 
	`REG_WRITE
(
ah
, 
AR_Q_TXD
, 0);

167 
	}
}

168 
EXPORT_SYMBOL
(
©h9k_hw_ab‹t_tx_dma
);

170 
boﬁ
 
	$©h9k_hw_°›_dma_queue
(
©h_hw
 *
ah
, 
u32
 
q
)

172 
	#ATH9K_TX_STOP_DMA_TIMEOUT
 1000

	)

173 
	#ATH9K_TIME_QUANTUM
 100

	)

174 
waô_time
 = 
ATH9K_TX_STOP_DMA_TIMEOUT
 / 
ATH9K_TIME_QUANTUM
;

175 
waô
;

177 
	`REG_WRITE
(
ah
, 
AR_Q_TXD
, 1 << 
q
);

179 
waô
 = 
waô_time
; wait != 0; wait--) {

180 i‡(
waô
 !
waô_time
)

181 
	`udñay
(
ATH9K_TIME_QUANTUM
);

183 i‡(
	`©h9k_hw_numtx≥ndög
(
ah
, 
q
) == 0)

187 
	`REG_WRITE
(
ah
, 
AR_Q_TXD
, 0);

189  
waô
 != 0;

191 #unde‡
ATH9K_TX_STOP_DMA_TIMEOUT


192 #unde‡
ATH9K_TIME_QUANTUM


193 
	}
}

194 
EXPORT_SYMBOL
(
©h9k_hw_°›_dma_queue
);

196 
boﬁ
 
	$©h9k_hw_£t_txq_¥›s
(
©h_hw
 *
ah
, 
q
,

197 c⁄° 
©h9k_tx_queue_öfo
 *
qöfo
)

199 
u32
 
cw
;

200 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

201 
©h9k_tx_queue_öfo
 *
qi
;

203 
qi
 = &
ah
->
txq
[
q
];

204 i‡(
qi
->
tqi_ty≥
 =
ATH9K_TX_QUEUE_INACTIVE
) {

205 
	`©h_dbg
(
comm⁄
, 
QUEUE
,

206 "Së TXQÖr›îtõs, i«˘ivêqueue: %u\n", 
q
);

207  
Ál£
;

210 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "Së queuê¥›îtõ†f‹: %u\n", 
q
);

212 
qi
->
tqi_vî
 = 
qöfo
->tqi_ver;

213 
qi
->
tqi_subty≥
 = 
qöfo
->tqi_subtype;

214 
qi
->
tqi_qÊags
 = 
qöfo
->tqi_qflags;

215 
qi
->
tqi_¥i‹ôy
 = 
qöfo
->tqi_priority;

216 i‡(
qöfo
->
tqi_aifs
 !
ATH9K_TXQ_USEDEFAULT
)

217 
qi
->
tqi_aifs
 = 
	`mö
(
qöfo
->tqi_aifs, 255U);

219 
qi
->
tqi_aifs
 = 
INIT_AIFS
;

220 i‡(
qöfo
->
tqi_cwmö
 !
ATH9K_TXQ_USEDEFAULT
) {

221 
cw
 = 
	`mö
(
qöfo
->
tqi_cwmö
, 1024U);

222 
qi
->
tqi_cwmö
 = 1;

223 
qi
->
tqi_cwmö
 < 
cw
)

224 
qi
->
tqi_cwmö
 = (qi->tqi_cwmin << 1) | 1;

226 
qi
->
tqi_cwmö
 = 
qöfo
->tqi_cwmin;

227 i‡(
qöfo
->
tqi_cwmax
 !
ATH9K_TXQ_USEDEFAULT
) {

228 
cw
 = 
	`mö
(
qöfo
->
tqi_cwmax
, 1024U);

229 
qi
->
tqi_cwmax
 = 1;

230 
qi
->
tqi_cwmax
 < 
cw
)

231 
qi
->
tqi_cwmax
 = (qi->tqi_cwmax << 1) | 1;

233 
qi
->
tqi_cwmax
 = 
INIT_CWMAX
;

235 i‡(
qöfo
->
tqi_shªåy
 != 0)

236 
qi
->
tqi_shªåy
 = 
	`mö
((
u32
Ë
qöfo
->tqi_shretry, 15U);

238 
qi
->
tqi_shªåy
 = 
INIT_SH_RETRY
;

239 i‡(
qöfo
->
tqi_lgªåy
 != 0)

240 
qi
->
tqi_lgªåy
 = 
	`mö
((
u32
Ë
qöfo
->tqi_lgretry, 15U);

242 
qi
->
tqi_lgªåy
 = 
INIT_LG_RETRY
;

243 
qi
->
tqi_cbrPîiod
 = 
qöfo
->tqi_cbrPeriod;

244 
qi
->
tqi_cbrOvîÊowLimô
 = 
qöfo
->tqi_cbrOverflowLimit;

245 
qi
->
tqi_bur°Time
 = 
qöfo
->tqi_burstTime;

246 
qi
->
tqi_ªadyTime
 = 
qöfo
->tqi_readyTime;

248 
qöfo
->
tqi_subty≥
) {

249 
ATH9K_WME_UPSD
:

250 i‡(
qi
->
tqi_ty≥
 =
ATH9K_TX_QUEUE_DATA
)

251 
qi
->
tqi_ötFœgs
 = 
ATH9K_TXQ_USE_LOCKOUT_BKOFF_DIS
;

257  
åue
;

258 
	}
}

259 
EXPORT_SYMBOL
(
©h9k_hw_£t_txq_¥›s
);

261 
boﬁ
 
	$©h9k_hw_gë_txq_¥›s
(
©h_hw
 *
ah
, 
q
,

262 
©h9k_tx_queue_öfo
 *
qöfo
)

264 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

265 
©h9k_tx_queue_öfo
 *
qi
;

267 
qi
 = &
ah
->
txq
[
q
];

268 i‡(
qi
->
tqi_ty≥
 =
ATH9K_TX_QUEUE_INACTIVE
) {

269 
	`©h_dbg
(
comm⁄
, 
QUEUE
,

270 "Gë TXQÖr›îtõs, i«˘ivêqueue: %u\n", 
q
);

271  
Ál£
;

274 
qöfo
->
tqi_qÊags
 = 
qi
->tqi_qflags;

275 
qöfo
->
tqi_vî
 = 
qi
->tqi_ver;

276 
qöfo
->
tqi_subty≥
 = 
qi
->tqi_subtype;

277 
qöfo
->
tqi_qÊags
 = 
qi
->tqi_qflags;

278 
qöfo
->
tqi_¥i‹ôy
 = 
qi
->tqi_priority;

279 
qöfo
->
tqi_aifs
 = 
qi
->tqi_aifs;

280 
qöfo
->
tqi_cwmö
 = 
qi
->tqi_cwmin;

281 
qöfo
->
tqi_cwmax
 = 
qi
->tqi_cwmax;

282 
qöfo
->
tqi_shªåy
 = 
qi
->tqi_shretry;

283 
qöfo
->
tqi_lgªåy
 = 
qi
->tqi_lgretry;

284 
qöfo
->
tqi_cbrPîiod
 = 
qi
->tqi_cbrPeriod;

285 
qöfo
->
tqi_cbrOvîÊowLimô
 = 
qi
->tqi_cbrOverflowLimit;

286 
qöfo
->
tqi_bur°Time
 = 
qi
->tqi_burstTime;

287 
qöfo
->
tqi_ªadyTime
 = 
qi
->tqi_readyTime;

289  
åue
;

290 
	}
}

291 
EXPORT_SYMBOL
(
©h9k_hw_gë_txq_¥›s
);

293 
	$©h9k_hw_£tu±xqueue
(
©h_hw
 *
ah
, 
©h9k_tx_queue
 
ty≥
,

294 c⁄° 
©h9k_tx_queue_öfo
 *
qöfo
)

296 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

297 
©h9k_tx_queue_öfo
 *
qi
;

298 
q
;

300 
ty≥
) {

301 
ATH9K_TX_QUEUE_BEACON
:

302 
q
 = 
ATH9K_NUM_TX_QUEUES
 - 1;

304 
ATH9K_TX_QUEUE_CAB
:

305 
q
 = 
ATH9K_NUM_TX_QUEUES
 - 2;

307 
ATH9K_TX_QUEUE_PSPOLL
:

308 
q
 = 1;

310 
ATH9K_TX_QUEUE_UAPSD
:

311 
q
 = 
ATH9K_NUM_TX_QUEUES
 - 3;

313 
ATH9K_TX_QUEUE_DATA
:

314 
q
 = 
qöfo
->
tqi_subty≥
;

317 
	`©h_îr
(
comm⁄
, "InvÆid TX queuêty≥: %u\n", 
ty≥
);

321 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "Sëu∞TX queue: %u\n", 
q
);

323 
qi
 = &
ah
->
txq
[
q
];

324 i‡(
qi
->
tqi_ty≥
 !
ATH9K_TX_QUEUE_INACTIVE
) {

325 
	`©h_îr
(
comm⁄
, "TX queue: %uáÃódyá˘ive\n", 
q
);

328 
	`mem£t
(
qi
, 0, (
©h9k_tx_queue_öfo
));

329 
qi
->
tqi_ty≥
 = 
ty≥
;

330 
qi
->
tqi_physCompBuf
 = 
qöfo
->tqi_physCompBuf;

331 (Ë
	`©h9k_hw_£t_txq_¥›s
(
ah
, 
q
, 
qöfo
);

333  
q
;

334 
	}
}

335 
EXPORT_SYMBOL
(
©h9k_hw_£tu±xqueue
);

337 
	$©h9k_hw_˛ór_queue_öãºu±s
(
©h_hw
 *
ah
, 
u32
 
q
)

339 
ah
->
txok_öãºu±_mask
 &~(1 << 
q
);

340 
ah
->
txîr_öãºu±_mask
 &~(1 << 
q
);

341 
ah
->
txdesc_öãºu±_mask
 &~(1 << 
q
);

342 
ah
->
txeﬁ_öãºu±_mask
 &~(1 << 
q
);

343 
ah
->
txu∫_öãºu±_mask
 &~(1 << 
q
);

344 
	}
}

346 
boﬁ
 
	$©h9k_hw_ªÀa£txqueue
(
©h_hw
 *
ah
, 
u32
 
q
)

348 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

349 
©h9k_tx_queue_öfo
 *
qi
;

351 
qi
 = &
ah
->
txq
[
q
];

352 i‡(
qi
->
tqi_ty≥
 =
ATH9K_TX_QUEUE_INACTIVE
) {

353 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "Rñó£ TXQ, i«˘ivêqueue: %u\n", 
q
);

354  
Ál£
;

357 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "Rñó£ TX queue: %u\n", 
q
);

359 
qi
->
tqi_ty≥
 = 
ATH9K_TX_QUEUE_INACTIVE
;

360 
	`©h9k_hw_˛ór_queue_öãºu±s
(
ah
, 
q
);

361 
	`©h9k_hw_£t_txq_öãºu±s
(
ah
, 
qi
);

363  
åue
;

364 
	}
}

365 
EXPORT_SYMBOL
(
©h9k_hw_ªÀa£txqueue
);

367 
boﬁ
 
	$©h9k_hw_ª£âxqueue
(
©h_hw
 *
ah
, 
u32
 
q
)

369 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

370 
©h9k_tx_queue_öfo
 *
qi
;

371 
u32
 
cwMö
, 
ch™CwMö
, 
vÆue
;

373 
qi
 = &
ah
->
txq
[
q
];

374 i‡(
qi
->
tqi_ty≥
 =
ATH9K_TX_QUEUE_INACTIVE
) {

375 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "Re£àTXQ, i«˘ivêqueue: %u\n", 
q
);

376  
åue
;

379 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "Re£àTX queue: %u\n", 
q
);

381 i‡(
qi
->
tqi_cwmö
 =
ATH9K_TXQ_USEDEFAULT
) {

382 
ch™CwMö
 = 
INIT_CWMIN
;

384 
cwMö
 = 1; cwMö < 
ch™CwMö
; cwMin = (cwMin << 1) | 1);

386 
cwMö
 = 
qi
->
tqi_cwmö
;

388 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

390 
	`REG_WRITE
(
ah
, 
	`AR_DLCL_IFS
(
q
),

391 
	`SM
(
cwMö
, 
AR_D_LCL_IFS_CWMIN
) |

392 
	`SM
(
qi
->
tqi_cwmax
, 
AR_D_LCL_IFS_CWMAX
) |

393 
	`SM
(
qi
->
tqi_aifs
, 
AR_D_LCL_IFS_AIFS
));

395 
	`REG_WRITE
(
ah
, 
	`AR_DRETRY_LIMIT
(
q
),

396 
	`SM
(
INIT_SSH_RETRY
, 
AR_D_RETRY_LIMIT_STA_SH
) |

397 
	`SM
(
INIT_SLG_RETRY
, 
AR_D_RETRY_LIMIT_STA_LG
) |

398 
	`SM
(
qi
->
tqi_shªåy
, 
AR_D_RETRY_LIMIT_FR_SH
));

400 
	`REG_WRITE
(
ah
, 
	`AR_QMISC
(
q
), 
AR_Q_MISC_DCU_EARLY_TERM_REQ
);

402 i‡(
	`AR_SREV_9340
(
ah
Ë&& !
	`AR_SREV_9340_13_OR_LATER
(ah))

403 
	`REG_WRITE
(
ah
, 
	`AR_DMISC
(
q
),

404 
AR_D_MISC_CW_BKOFF_EN
 | 
AR_D_MISC_FRAG_WAIT_EN
 | 0x1);

406 
	`REG_WRITE
(
ah
, 
	`AR_DMISC
(
q
),

407 
AR_D_MISC_CW_BKOFF_EN
 | 
AR_D_MISC_FRAG_WAIT_EN
 | 0x2);

409 i‡(
qi
->
tqi_cbrPîiod
) {

410 
	`REG_WRITE
(
ah
, 
	`AR_QCBRCFG
(
q
),

411 
	`SM
(
qi
->
tqi_cbrPîiod
, 
AR_Q_CBRCFG_INTERVAL
) |

412 
	`SM
(
qi
->
tqi_cbrOvîÊowLimô
, 
AR_Q_CBRCFG_OVF_THRESH
));

413 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
q
), 
AR_Q_MISC_FSP_CBR
 |

414 (
qi
->
tqi_cbrOvîÊowLimô
 ?

415 
AR_Q_MISC_CBR_EXP_CNTR_LIMIT_EN
 : 0));

417 i‡(
qi
->
tqi_ªadyTime
 && (qi->
tqi_ty≥
 !
ATH9K_TX_QUEUE_CAB
)) {

418 
	`REG_WRITE
(
ah
, 
	`AR_QRDYTIMECFG
(
q
),

419 
	`SM
(
qi
->
tqi_ªadyTime
, 
AR_Q_RDYTIMECFG_DURATION
) |

420 
AR_Q_RDYTIMECFG_EN
);

423 
	`REG_WRITE
(
ah
, 
	`AR_DCHNTIME
(
q
),

424 
	`SM
(
qi
->
tqi_bur°Time
, 
AR_D_CHNTIME_DUR
) |

425 (
qi
->
tqi_bur°Time
 ? 
AR_D_CHNTIME_EN
 : 0));

427 i‡(
qi
->
tqi_bur°Time


428 && (
qi
->
tqi_qÊags
 & 
TXQ_FLAG_RDYTIME_EXP_POLICY_ENABLE
))

429 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
q
), 
AR_Q_MISC_RDYTIME_EXP_POLICY
);

431 i‡(
qi
->
tqi_qÊags
 & 
TXQ_FLAG_BACKOFF_DISABLE
)

432 
	`REG_SET_BIT
(
ah
, 
	`AR_DMISC
(
q
), 
AR_D_MISC_POST_FR_BKOFF_DIS
);

434 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

436 i‡(
qi
->
tqi_qÊags
 & 
TXQ_FLAG_FRAG_BURST_BACKOFF_ENABLE
)

437 
	`REG_SET_BIT
(
ah
, 
	`AR_DMISC
(
q
), 
AR_D_MISC_FRAG_BKOFF_EN
);

439 
qi
->
tqi_ty≥
) {

440 
ATH9K_TX_QUEUE_BEACON
:

441 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

443 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
q
),

444 
AR_Q_MISC_FSP_DBA_GATED


445 | 
AR_Q_MISC_BEACON_USE


446 | 
AR_Q_MISC_CBR_INCR_DIS1
);

448 
	`REG_SET_BIT
(
ah
, 
	`AR_DMISC
(
q
),

449 (
AR_D_MISC_ARB_LOCKOUT_CNTRL_GLOBAL
 <<

450 
AR_D_MISC_ARB_LOCKOUT_CNTRL_S
)

451 | 
AR_D_MISC_BEACON_USE


452 | 
AR_D_MISC_POST_FR_BKOFF_DIS
);

454 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

461 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
) &&

462 
ah
->
›mode
 !
NL80211_IFTYPE_ADHOC
) {

463 
	`REG_WRITE
(
ah
, 
	`AR_DLCL_IFS
(
q
), 
	`SM
(0, 
AR_D_LCL_IFS_CWMIN
)

464 | 
	`SM
(0, 
AR_D_LCL_IFS_CWMAX
)

465 | 
	`SM
(
qi
->
tqi_aifs
, 
AR_D_LCL_IFS_AIFS
));

468 
ATH9K_TX_QUEUE_CAB
:

469 
	`ENABLE_REGWRITE_BUFFER
(
ah
);

471 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
q
),

472 
AR_Q_MISC_FSP_DBA_GATED


473 | 
AR_Q_MISC_CBR_INCR_DIS1


474 | 
AR_Q_MISC_CBR_INCR_DIS0
);

475 
vÆue
 = (
qi
->
tqi_ªadyTime
 -

476 (
ah
->
c⁄fig
.
sw_bóc⁄_ª•⁄£_time
 -

477 
ah
->
c⁄fig
.
dma_bóc⁄_ª•⁄£_time
)) * 1024;

478 
	`REG_WRITE
(
ah
, 
	`AR_QRDYTIMECFG
(
q
),

479 
vÆue
 | 
AR_Q_RDYTIMECFG_EN
);

480 
	`REG_SET_BIT
(
ah
, 
	`AR_DMISC
(
q
),

481 (
AR_D_MISC_ARB_LOCKOUT_CNTRL_GLOBAL
 <<

482 
AR_D_MISC_ARB_LOCKOUT_CNTRL_S
));

484 
	`REGWRITE_BUFFER_FLUSH
(
ah
);

487 
ATH9K_TX_QUEUE_PSPOLL
:

488 
	`REG_SET_BIT
(
ah
, 
	`AR_QMISC
(
q
), 
AR_Q_MISC_CBR_INCR_DIS1
);

490 
ATH9K_TX_QUEUE_UAPSD
:

491 
	`REG_SET_BIT
(
ah
, 
	`AR_DMISC
(
q
), 
AR_D_MISC_POST_FR_BKOFF_DIS
);

497 i‡(
qi
->
tqi_ötFœgs
 & 
ATH9K_TXQ_USE_LOCKOUT_BKOFF_DIS
) {

498 
	`REG_SET_BIT
(
ah
, 
	`AR_DMISC
(
q
),

499 
	`SM
(
AR_D_MISC_ARB_LOCKOUT_CNTRL_GLOBAL
,

500 
AR_D_MISC_ARB_LOCKOUT_CNTRL
) |

501 
AR_D_MISC_POST_FR_BKOFF_DIS
);

504 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

505 
	`REG_WRITE
(
ah
, 
AR_Q_DESC_CRCCHK
, 
AR_Q_DESC_CRCCHK_EN
);

507 
	`©h9k_hw_˛ór_queue_öãºu±s
(
ah
, 
q
);

508 i‡(
qi
->
tqi_qÊags
 & 
TXQ_FLAG_TXINT_ENABLE
) {

509 
ah
->
txok_öãºu±_mask
 |1 << 
q
;

510 
ah
->
txîr_öãºu±_mask
 |1 << 
q
;

512 i‡(
qi
->
tqi_qÊags
 & 
TXQ_FLAG_TXDESCINT_ENABLE
)

513 
ah
->
txdesc_öãºu±_mask
 |1 << 
q
;

514 i‡(
qi
->
tqi_qÊags
 & 
TXQ_FLAG_TXEOLINT_ENABLE
)

515 
ah
->
txeﬁ_öãºu±_mask
 |1 << 
q
;

516 i‡(
qi
->
tqi_qÊags
 & 
TXQ_FLAG_TXURNINT_ENABLE
)

517 
ah
->
txu∫_öãºu±_mask
 |1 << 
q
;

518 
	`©h9k_hw_£t_txq_öãºu±s
(
ah
, 
qi
);

520  
åue
;

521 
	}
}

522 
EXPORT_SYMBOL
(
©h9k_hw_ª£âxqueue
);

524 
	$©h9k_hw_rx¥ocdesc
(
©h_hw
 *
ah
, 
©h_desc
 *
ds
,

525 
©h_rx_°©us
 *
rs
)

527 
¨5416_desc
 
ads
;

528 
¨5416_desc
 *
ad•
 = 
	`AR5416DESC
(
ds
);

529 
u32
 
phyîr
;

531 i‡((
ad•
->
ds_rx°©us8
 & 
AR_RxD⁄e
) == 0)

532  -
EINPROGRESS
;

534 
ads
.
u
.
rx
 = 
ad•
->u.rx;

536 
rs
->
rs_°©us
 = 0;

537 
rs
->
rs_Êags
 = 0;

538 
rs
->
Êag
 = 0;

540 
rs
->
rs_d©Æí
 = 
ads
.
ds_rx°©us1
 & 
AR_D©aLí
;

541 
rs
->
rs_t°amp
 = 
ads
.
AR_RcvTime°amp
;

543 i‡(
ads
.
ds_rx°©us8
 & 
AR_Po°DñimCRCEº
) {

544 
rs
->
rs_rssi
 = 
ATH9K_RSSI_BAD
;

545 
rs
->
rs_rssi_˘l
[0] = 
ATH9K_RSSI_BAD
;

546 
rs
->
rs_rssi_˘l
[1] = 
ATH9K_RSSI_BAD
;

547 
rs
->
rs_rssi_˘l
[2] = 
ATH9K_RSSI_BAD
;

548 
rs
->
rs_rssi_ext
[0] = 
ATH9K_RSSI_BAD
;

549 
rs
->
rs_rssi_ext
[1] = 
ATH9K_RSSI_BAD
;

550 
rs
->
rs_rssi_ext
[2] = 
ATH9K_RSSI_BAD
;

552 
rs
->
rs_rssi
 = 
	`MS
(
ads
.
ds_rx°©us4
, 
AR_RxRSSIComböed
);

553 
rs
->
rs_rssi_˘l
[0] = 
	`MS
(
ads
.
ds_rx°©us0
,

554 
AR_RxRSSIA¡00
);

555 
rs
->
rs_rssi_˘l
[1] = 
	`MS
(
ads
.
ds_rx°©us0
,

556 
AR_RxRSSIA¡01
);

557 
rs
->
rs_rssi_˘l
[2] = 
	`MS
(
ads
.
ds_rx°©us0
,

558 
AR_RxRSSIA¡02
);

559 
rs
->
rs_rssi_ext
[0] = 
	`MS
(
ads
.
ds_rx°©us4
,

560 
AR_RxRSSIA¡10
);

561 
rs
->
rs_rssi_ext
[1] = 
	`MS
(
ads
.
ds_rx°©us4
,

562 
AR_RxRSSIA¡11
);

563 
rs
->
rs_rssi_ext
[2] = 
	`MS
(
ads
.
ds_rx°©us4
,

564 
AR_RxRSSIA¡12
);

566 i‡(
ads
.
ds_rx°©us8
 & 
AR_RxKeyIdxVÆid
)

567 
rs
->
rs_keyix
 = 
	`MS
(
ads
.
ds_rx°©us8
, 
AR_KeyIdx
);

569 
rs
->
rs_keyix
 = 
ATH9K_RXKEYIX_INVALID
;

571 
rs
->
rs_øã
 = 
	`MS
(
ads
.
ds_rx°©us0
, 
AR_RxR©e
);

572 
rs
->
rs_m‹e
 = (
ads
.
ds_rx°©us1
 & 
AR_RxM‹e
) ? 1 : 0;

574 
rs
->
rs_fú°aggr
 = (
ads
.
ds_rx°©us8
 & 
AR_RxFú°Aggr
) ? 1 : 0;

575 
rs
->
rs_ißggr
 = (
ads
.
ds_rx°©us8
 & 
AR_RxAggr
) ? 1 : 0;

576 
rs
->
rs_m‹óggr
 = (
ads
.
ds_rx°©us8
 & 
AR_RxM‹eAggr
) ? 1 : 0;

577 
rs
->
rs_™ã¬a
 = 
	`MS
(
ads
.
ds_rx°©us3
, 
AR_RxA¡í«
);

580 
rs
->
Êag
 |=

581 (
ads
.
ds_rx°©us3
 & 
AR_GI
Ë? 
RX_FLAG_SHORT_GI
 : 0;

582 
rs
->
Êag
 |=

583 (
ads
.
ds_rx°©us3
 & 
AR_2040
Ë? 
RX_FLAG_40MHZ
 : 0;

584 i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
))

585 
rs
->
Êag
 |=

586 (
ads
.
ds_rx°©us3
 & 
AR_STBC
) ?

588 (1 << 
RX_FLAG_STBC_SHIFT
) : 0;

590 i‡(
ads
.
ds_rx°©us8
 & 
AR_PªDñimCRCEº
)

591 
rs
->
rs_Êags
 |
ATH9K_RX_DELIM_CRC_PRE
;

592 i‡(
ads
.
ds_rx°©us8
 & 
AR_Po°DñimCRCEº
)

593 
rs
->
rs_Êags
 |
ATH9K_RX_DELIM_CRC_POST
;

594 i‡(
ads
.
ds_rx°©us8
 & 
AR_De¸y±BusyEº
)

595 
rs
->
rs_Êags
 |
ATH9K_RX_DECRYPT_BUSY
;

597 i‡((
ads
.
ds_rx°©us8
 & 
AR_RxFømeOK
) == 0) {

604 i‡(
ads
.
ds_rx°©us8
 & 
AR_PHYEº
) {

605 
rs
->
rs_°©us
 |
ATH9K_RXERR_PHY
;

606 
phyîr
 = 
	`MS
(
ads
.
ds_rx°©us8
, 
AR_PHYEºCode
);

607 
rs
->
rs_phyîr
 = 
phyîr
;

608 } i‡(
ads
.
ds_rx°©us8
 & 
AR_CRCEº
)

609 
rs
->
rs_°©us
 |
ATH9K_RXERR_CRC
;

610 i‡(
ads
.
ds_rx°©us8
 & 
AR_De¸y±CRCEº
)

611 
rs
->
rs_°©us
 |
ATH9K_RXERR_DECRYPT
;

612 i‡(
ads
.
ds_rx°©us8
 & 
AR_Mich´lEº
)

613 
rs
->
rs_°©us
 |
ATH9K_RXERR_MIC
;

615 i‡(
ads
.
ds_rx°©us8
 &

616 (
AR_CRCEº
 | 
AR_PHYEº
 | 
AR_De¸y±CRCEº
 | 
AR_Mich´lEº
))

617 
rs
->
rs_°©us
 |
ATH9K_RXERR_CORRUPT_DESC
;

620 i‡(
rs
->
rs_øã
 >= 0x90)

621 
rs
->
rs_°©us
 |
ATH9K_RXERR_CORRUPT_DESC
;

624 i‡(
ads
.
ds_rx°©us8
 & 
AR_KeyMiss
)

625 
rs
->
rs_°©us
 |
ATH9K_RXERR_KEYMISS
;

628 
	}
}

629 
EXPORT_SYMBOL
(
©h9k_hw_rx¥ocdesc
);

638 
boﬁ
 
	$©h9k_hw_£åxab‹t
(
©h_hw
 *
ah
, 
boﬁ
 
£t
)

640 
u32
 
ªg
;

642 i‡(
£t
) {

643 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
,

644 (
AR_DIAG_RX_DIS
 | 
AR_DIAG_RX_ABORT
));

646 i‡(!
	`©h9k_hw_waô
(
ah
, 
AR_OBS_BUS_1
, 
AR_OBS_BUS_1_RX_STATE
,

647 0, 
AH_WAIT_TIMEOUT
)) {

648 
	`REG_CLR_BIT
(
ah
, 
AR_DIAG_SW
,

649 (
AR_DIAG_RX_DIS
 |

650 
AR_DIAG_RX_ABORT
));

652 
ªg
 = 
	`REG_READ
(
ah
, 
AR_OBS_BUS_1
);

653 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
ah
),

655 
ªg
);

657  
Ál£
;

660 
	`REG_CLR_BIT
(
ah
, 
AR_DIAG_SW
,

661 (
AR_DIAG_RX_DIS
 | 
AR_DIAG_RX_ABORT
));

664  
åue
;

665 
	}
}

666 
EXPORT_SYMBOL
(
©h9k_hw_£åxab‹t
);

668 
	$©h9k_hw_puåxbuf
(
©h_hw
 *
ah
, 
u32
 
rxdp
)

670 
	`REG_WRITE
(
ah
, 
AR_RXDP
, 
rxdp
);

671 
	}
}

672 
EXPORT_SYMBOL
(
©h9k_hw_puåxbuf
);

674 
	$©h9k_hw_°¨çcuª˚ive
(
©h_hw
 *
ah
, 
boﬁ
 
is_sˇ¬ög
)

676 
	`©h9k_íabÀ_mib_cou¡îs
(
ah
);

678 
	`©h9k_™i_ª£t
(
ah
, 
is_sˇ¬ög
);

680 
	`REG_CLR_BIT
(
ah
, 
AR_DIAG_SW
, (
AR_DIAG_RX_DIS
 | 
AR_DIAG_RX_ABORT
));

681 
	}
}

682 
EXPORT_SYMBOL
(
©h9k_hw_°¨çcuª˚ive
);

684 
	$©h9k_hw_ab‹çcuªcv
(
©h_hw
 *
ah
)

686 
	`REG_SET_BIT
(
ah
, 
AR_DIAG_SW
, 
AR_DIAG_RX_ABORT
 | 
AR_DIAG_RX_DIS
);

688 
	`©h9k_hw_dißbÀ_mib_cou¡îs
(
ah
);

689 
	}
}

690 
EXPORT_SYMBOL
(
©h9k_hw_ab‹çcuªcv
);

692 
boﬁ
 
	$©h9k_hw_°›dm¨ecv
(
©h_hw
 *
ah
, 
boﬁ
 *
ª£t
)

694 
	#AH_RX_STOP_DMA_TIMEOUT
 10000

	)

695 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

696 
u32
 
mac_°©us
, 
œ°_mac_°©us
 = 0;

697 
i
;

700 
	`REG_WRITE
(
ah
, 
AR_MACMISC
,

701 ((
AR_MACMISC_DMA_OBS_LINE_8
 << 
AR_MACMISC_DMA_OBS_S
) |

702 (
AR_MACMISC_MISC_OBS_BUS_1
 <<

703 
AR_MACMISC_MISC_OBS_BUS_MSB_S
)));

705 
	`REG_WRITE
(
ah
, 
AR_CR
, 
AR_CR_RXD
);

708 
i
 = 
AH_RX_STOP_DMA_TIMEOUT
 / 
AH_TIME_QUANTUM
; i != 0; i--) {

709 i‡((
	`REG_READ
(
ah
, 
AR_CR
Ë& 
AR_CR_RXE
) == 0)

712 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

713 
mac_°©us
 = 
	`REG_READ
(
ah
, 
AR_DMADBG_7
) & 0x7f0;

714 i‡(
mac_°©us
 =0x1c0 && mac_°©u†=
œ°_mac_°©us
) {

715 *
ª£t
 = 
åue
;

719 
œ°_mac_°©us
 = 
mac_°©us
;

722 
	`udñay
(
AH_TIME_QUANTUM
);

725 i‡(
i
 == 0) {

726 
	`©h_îr
(
comm⁄
,

728 
AH_RX_STOP_DMA_TIMEOUT
 / 1000,

729 
	`REG_READ
(
ah
, 
AR_CR
),

730 
	`REG_READ
(
ah
, 
AR_DIAG_SW
),

731 
	`REG_READ
(
ah
, 
AR_DMADBG_7
));

732  
Ál£
;

734  
åue
;

737 #unde‡
AH_RX_STOP_DMA_TIMEOUT


738 
	}
}

739 
EXPORT_SYMBOL
(
©h9k_hw_°›dm¨ecv
);

741 
	$©h9k_hw_bóc⁄q_£tup
(
©h_hw
 *
ah
)

743 
©h9k_tx_queue_öfo
 
qi
;

745 
	`mem£t
(&
qi
, 0, (qi));

746 
qi
.
tqi_aifs
 = 1;

747 
qi
.
tqi_cwmö
 = 0;

748 
qi
.
tqi_cwmax
 = 0;

750 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

751 
qi
.
tqi_qÊags
 = 
TXQ_FLAG_TXINT_ENABLE
;

753  
	`©h9k_hw_£tu±xqueue
(
ah
, 
ATH9K_TX_QUEUE_BEACON
, &
qi
);

754 
	}
}

755 
EXPORT_SYMBOL
(
©h9k_hw_bóc⁄q_£tup
);

757 
boﬁ
 
	$©h9k_hw_öå≥nd
(
©h_hw
 *
ah
)

759 
u32
 
ho°_i§
;

761 i‡(
	`AR_SREV_9100
(
ah
))

762  
åue
;

764 
ho°_i§
 = 
	`REG_READ
(
ah
, 
AR_INTR_ASYNC_CAUSE
);

766 i‡(((
ho°_i§
 & 
AR_INTR_MAC_IRQ
) ||

767 (
ho°_i§
 & 
AR_INTR_ASYNC_MASK_MCI
)) &&

768 (
ho°_i§
 !
AR_INTR_SPURIOUS
))

769  
åue
;

771 
ho°_i§
 = 
	`REG_READ
(
ah
, 
AR_INTR_SYNC_CAUSE
);

772 i‡((
ho°_i§
 & 
AR_INTR_SYNC_DEFAULT
)

773 && (
ho°_i§
 !
AR_INTR_SPURIOUS
))

774  
åue
;

776  
Ál£
;

777 
	}
}

778 
EXPORT_SYMBOL
(
©h9k_hw_öå≥nd
);

780 
	$©h9k_hw_kûl_öãºu±s
(
©h_hw
 *
ah
)

782 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

784 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
, "disable IER\n");

785 
	`REG_WRITE
(
ah
, 
AR_IER
, 
AR_IER_DISABLE
);

786 (Ë
	`REG_READ
(
ah
, 
AR_IER
);

787 i‡(!
	`AR_SREV_9100
(
ah
)) {

788 
	`REG_WRITE
(
ah
, 
AR_INTR_ASYNC_ENABLE
, 0);

789 (Ë
	`REG_READ
(
ah
, 
AR_INTR_ASYNC_ENABLE
);

791 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_ENABLE
, 0);

792 (Ë
	`REG_READ
(
ah
, 
AR_INTR_SYNC_ENABLE
);

794 
	}
}

795 
EXPORT_SYMBOL
(
©h9k_hw_kûl_öãºu±s
);

797 
	$©h9k_hw_dißbÀ_öãºu±s
(
©h_hw
 *
ah
)

799 i‡(!(
ah
->
imask
 & 
ATH9K_INT_GLOBAL
))

800 
	`©omic_£t
(&
ah
->
öå_ªf_˙t
, -1);

802 
	`©omic_dec
(&
ah
->
öå_ªf_˙t
);

804 
	`©h9k_hw_kûl_öãºu±s
(
ah
);

805 
	}
}

806 
EXPORT_SYMBOL
(
©h9k_hw_dißbÀ_öãºu±s
);

808 
	$©h9k_hw_íabÀ_öãºu±s
(
©h_hw
 *
ah
)

810 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

811 
u32
 
sync_deÁu…
 = 
AR_INTR_SYNC_DEFAULT
;

812 
u32
 
async_mask
;

814 i‡(!(
ah
->
imask
 & 
ATH9K_INT_GLOBAL
))

817 i‡(!
	`©omic_öc_™d_ã°
(&
ah
->
öå_ªf_˙t
)) {

818 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
, "DoÇotÉnable IERÑef count %d\n",

819 
	`©omic_ªad
(&
ah
->
öå_ªf_˙t
));

823 i‡(
	`AR_SREV_9340
(
ah
Ë|| 
	`AR_SREV_9550
◊hË|| 
	`AR_SREV_9531
(ah) ||

824 
	`AR_SREV_9561
(
ah
))

825 
sync_deÁu…
 &~
AR_INTR_SYNC_HOST1_FATAL
;

827 
async_mask
 = 
AR_INTR_MAC_IRQ
;

829 i‡(
ah
->
imask
 & 
ATH9K_INT_MCI
)

830 
async_mask
 |
AR_INTR_ASYNC_MASK_MCI
;

832 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
, "enable IER\n");

833 
	`REG_WRITE
(
ah
, 
AR_IER
, 
AR_IER_ENABLE
);

834 i‡(!
	`AR_SREV_9100
(
ah
)) {

835 
	`REG_WRITE
(
ah
, 
AR_INTR_ASYNC_ENABLE
, 
async_mask
);

836 
	`REG_WRITE
(
ah
, 
AR_INTR_ASYNC_MASK
, 
async_mask
);

838 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_ENABLE
, 
sync_deÁu…
);

839 
	`REG_WRITE
(
ah
, 
AR_INTR_SYNC_MASK
, 
sync_deÁu…
);

841 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
, "AR_IMR 0x%x IER 0x%x\n",

842 
	`REG_READ
(
ah
, 
AR_IMR
), REG_READ◊h, 
AR_IER
));

843 
	}
}

844 
EXPORT_SYMBOL
(
©h9k_hw_íabÀ_öãºu±s
);

846 
	$©h9k_hw_£t_öãºu±s
(
©h_hw
 *
ah
)

848 
©h9k_öt
 
öts
 = 
ah
->
imask
;

849 
u32
 
mask
, 
mask2
;

850 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

851 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

853 i‡(!(
öts
 & 
ATH9K_INT_GLOBAL
))

854 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

856 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
, "New i¡îru± mask 0x%x\n", 
öts
);

858 
mask
 = 
öts
 & 
ATH9K_INT_COMMON
;

859 
mask2
 = 0;

861 i‡(
öts
 & 
ATH9K_INT_TX
) {

862 i‡(
ah
->
c⁄fig
.
tx_öå_môig©i⁄
)

863 
mask
 |
AR_IMR_TXMINTR
 | 
AR_IMR_TXINTM
;

865 i‡(
ah
->
txok_öãºu±_mask
)

866 
mask
 |
AR_IMR_TXOK
;

867 i‡(
ah
->
txdesc_öãºu±_mask
)

868 
mask
 |
AR_IMR_TXDESC
;

870 i‡(
ah
->
txîr_öãºu±_mask
)

871 
mask
 |
AR_IMR_TXERR
;

872 i‡(
ah
->
txeﬁ_öãºu±_mask
)

873 
mask
 |
AR_IMR_TXEOL
;

875 i‡(
öts
 & 
ATH9K_INT_RX
) {

876 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

877 
mask
 |
AR_IMR_RXERR
 | 
AR_IMR_RXOK_HP
;

878 i‡(
ah
->
c⁄fig
.
rx_öå_môig©i⁄
) {

879 
mask
 &~
AR_IMR_RXOK_LP
;

880 
mask
 |
AR_IMR_RXMINTR
 | 
AR_IMR_RXINTM
;

882 
mask
 |
AR_IMR_RXOK_LP
;

885 i‡(
ah
->
c⁄fig
.
rx_öå_môig©i⁄
)

886 
mask
 |
AR_IMR_RXMINTR
 | 
AR_IMR_RXINTM
;

888 
mask
 |
AR_IMR_RXOK
 | 
AR_IMR_RXDESC
;

890 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
))

891 
mask
 |
AR_IMR_GENTMR
;

894 i‡(
öts
 & 
ATH9K_INT_GENTIMER
)

895 
mask
 |
AR_IMR_GENTMR
;

897 i‡(
öts
 & (
ATH9K_INT_BMISC
)) {

898 
mask
 |
AR_IMR_BCNMISC
;

899 i‡(
öts
 & 
ATH9K_INT_TIM
)

900 
mask2
 |
AR_IMR_S2_TIM
;

901 i‡(
öts
 & 
ATH9K_INT_DTIM
)

902 
mask2
 |
AR_IMR_S2_DTIM
;

903 i‡(
öts
 & 
ATH9K_INT_DTIMSYNC
)

904 
mask2
 |
AR_IMR_S2_DTIMSYNC
;

905 i‡(
öts
 & 
ATH9K_INT_CABEND
)

906 
mask2
 |
AR_IMR_S2_CABEND
;

907 i‡(
öts
 & 
ATH9K_INT_TSFOOR
)

908 
mask2
 |
AR_IMR_S2_TSFOOR
;

911 i‡(
öts
 & (
ATH9K_INT_GTT
 | 
ATH9K_INT_CST
)) {

912 
mask
 |
AR_IMR_BCNMISC
;

913 i‡(
öts
 & 
ATH9K_INT_GTT
)

914 
mask2
 |
AR_IMR_S2_GTT
;

915 i‡(
öts
 & 
ATH9K_INT_CST
)

916 
mask2
 |
AR_IMR_S2_CST
;

919 i‡(
ah
->
c⁄fig
.
hw_h™g_checks
 & 
HW_BB_WATCHDOG
) {

920 i‡(
öts
 & 
ATH9K_INT_BB_WATCHDOG
) {

921 
mask
 |
AR_IMR_BCNMISC
;

922 
mask2
 |
AR_IMR_S2_BB_WATCHDOG
;

926 
	`©h_dbg
(
comm⁄
, 
INTERRUPT
, "√w IMR 0x%x\n", 
mask
);

927 
	`REG_WRITE
(
ah
, 
AR_IMR
, 
mask
);

928 
ah
->
imrs2_ªg
 &~(
AR_IMR_S2_TIM
 |

929 
AR_IMR_S2_DTIM
 |

930 
AR_IMR_S2_DTIMSYNC
 |

931 
AR_IMR_S2_CABEND
 |

932 
AR_IMR_S2_CABTO
 |

933 
AR_IMR_S2_TSFOOR
 |

934 
AR_IMR_S2_GTT
 |

935 
AR_IMR_S2_CST
);

937 i‡(
ah
->
c⁄fig
.
hw_h™g_checks
 & 
HW_BB_WATCHDOG
) {

938 i‡(
öts
 & 
ATH9K_INT_BB_WATCHDOG
)

939 
ah
->
imrs2_ªg
 &~
AR_IMR_S2_BB_WATCHDOG
;

942 
ah
->
imrs2_ªg
 |
mask2
;

943 
	`REG_WRITE
(
ah
, 
AR_IMR_S2
,áh->
imrs2_ªg
);

945 i‡(!(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
)) {

946 i‡(
öts
 & 
ATH9K_INT_TIM_TIMER
)

947 
	`REG_SET_BIT
(
ah
, 
AR_IMR_S5
, 
AR_IMR_S5_TIM_TIMER
);

949 
	`REG_CLR_BIT
(
ah
, 
AR_IMR_S5
, 
AR_IMR_S5_TIM_TIMER
);

953 
	}
}

954 
EXPORT_SYMBOL
(
©h9k_hw_£t_öãºu±s
);

956 
	#ATH9K_HW_MAX_DCU
 10

	)

957 
	#ATH9K_HW_SLICE_PER_DCU
 16

	)

958 
	#ATH9K_HW_BIT_IN_SLICE
 16

	)

959 
	$©h9k_hw_£t_tx_fûãr
(
©h_hw
 *
ah
, 
u8
 
de°idx
, 
boﬁ
 
£t
)

961 
dcu_idx
;

962 
u32
 
fûãr
;

964 
dcu_idx
 = 0; dcu_idx < 10; dcu_idx++) {

965 
fûãr
 = 
	`SM
(
£t
, 
AR_D_TXBLK_WRITE_COMMAND
);

966 
fûãr
 |
	`SM
(
dcu_idx
, 
AR_D_TXBLK_WRITE_DCU
);

967 
fûãr
 |
	`SM
((
de°idx
 / 
ATH9K_HW_SLICE_PER_DCU
),

968 
AR_D_TXBLK_WRITE_SLICE
);

969 
fûãr
 |
	`BIT
(
de°idx
 % 
ATH9K_HW_BIT_IN_SLICE
);

970 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
PS
,

972 
dcu_idx
, 
de°idx
, 
£t
, 
fûãr
);

973 
	`REG_WRITE
(
ah
, 
AR_D_TXBLK_BASE
, 
fûãr
);

975 
	}
}

976 
EXPORT_SYMBOL
(
©h9k_hw_£t_tx_fûãr
);

	@mac.h

17 #i‚de‡
MAC_H


18 
	#MAC_H


	)

20 
	#£t11nTrõs
(
_£rõs
, 
_ödex
) \

21 (
	`SM
((
_£rõs
)[
_ödex
].
Trõs
, 
AR_XmôD©aTrõs
##_ödex))

	)

23 
	#£t11nR©e
(
_£rõs
, 
_ödex
) \

24 (
	`SM
((
_£rõs
)[
_ödex
].
R©e
, 
AR_XmôR©e
##_ödex))

	)

26 
	#£t11nPktDurRTSCTS
(
_£rõs
, 
_ödex
) \

27 (
	`SM
((
_£rõs
)[
_ödex
].
PktDuøti⁄
, 
AR_PackëDur
##_index) | \

28 ((
_£rõs
)[
_ödex
].
R©eFœgs
 & 
ATH9K_RATESERIES_RTS_CTS
 ? \

29 
AR_RTSCTSQuÆ
##
_ödex
 : 0))

	)

31 
	#£t11nR©eFœgs
(
_£rõs
, 
_ödex
) \

32 (((
_£rõs
)[
_ödex
].
R©eFœgs
 & 
ATH9K_RATESERIES_2040
 ? \

33 
AR_2040_
##
_ödex
 : 0) \

34 |((
_£rõs
)[
_ödex
].
R©eFœgs
 & 
ATH9K_RATESERIES_HALFGI
 ? \

35 
AR_GI
##
_ödex
 : 0) \

36 |((
_£rõs
)[
_ödex
].
R©eFœgs
 & 
ATH9K_RATESERIES_STBC
 ? \

37 
AR_STBC
##
_ödex
 : 0) \

38 |
	`SM
((
_£rõs
)[
_ödex
].
ChSñ
, 
AR_ChaöSñ
##_ödex))

	)

40 
	#CCK_SIFS_TIME
 10

	)

41 
	#CCK_PREAMBLE_BITS
 144

	)

42 
	#CCK_PLCP_BITS
 48

	)

44 
	#OFDM_SIFS_TIME
 16

	)

45 
	#OFDM_PREAMBLE_TIME
 20

	)

46 
	#OFDM_PLCP_BITS
 22

	)

47 
	#OFDM_SYMBOL_TIME
 4

	)

49 
	#OFDM_SIFS_TIME_HALF
 32

	)

50 
	#OFDM_PREAMBLE_TIME_HALF
 40

	)

51 
	#OFDM_PLCP_BITS_HALF
 22

	)

52 
	#OFDM_SYMBOL_TIME_HALF
 8

	)

54 
	#OFDM_SIFS_TIME_QUARTER
 64

	)

55 
	#OFDM_PREAMBLE_TIME_QUARTER
 80

	)

56 
	#OFDM_PLCP_BITS_QUARTER
 22

	)

57 
	#OFDM_SYMBOL_TIME_QUARTER
 16

	)

59 
	#INIT_AIFS
 2

	)

60 
	#INIT_CWMIN
 15

	)

61 
	#INIT_CWMIN_11B
 31

	)

62 
	#INIT_CWMAX
 1023

	)

63 
	#INIT_SH_RETRY
 10

	)

64 
	#INIT_LG_RETRY
 10

	)

65 
	#INIT_SSH_RETRY
 32

	)

66 
	#INIT_SLG_RETRY
 32

	)

68 
	#ATH9K_SLOT_TIME_6
 6

	)

69 
	#ATH9K_SLOT_TIME_9
 9

	)

70 
	#ATH9K_SLOT_TIME_20
 20

	)

72 
	#ATH9K_TXERR_XRETRY
 0x01

	)

73 
	#ATH9K_TXERR_FILT
 0x02

	)

74 
	#ATH9K_TXERR_FIFO
 0x04

	)

75 
	#ATH9K_TXERR_XTXOP
 0x08

	)

76 
	#ATH9K_TXERR_TIMER_EXPIRED
 0x10

	)

77 
	#ATH9K_TX_ACKED
 0x20

	)

78 
	#ATH9K_TX_FLUSH
 0x40

	)

79 
	#ATH9K_TXERR_MASK
 \

80 (
ATH9K_TXERR_XRETRY
 | 
ATH9K_TXERR_FILT
 | 
ATH9K_TXERR_FIFO
 | \

81 
ATH9K_TXERR_XTXOP
 | 
ATH9K_TXERR_TIMER_EXPIRED
 | 
ATH9K_TX_FLUSH
)

	)

83 
	#ATH9K_TX_BA
 0x01

	)

84 
	#ATH9K_TX_PWRMGMT
 0x02

	)

85 
	#ATH9K_TX_DESC_CFG_ERR
 0x04

	)

86 
	#ATH9K_TX_DATA_UNDERRUN
 0x08

	)

87 
	#ATH9K_TX_DELIM_UNDERRUN
 0x10

	)

88 
	#ATH9K_TX_SW_FILTERED
 0x80

	)

91 
	#MIN_TX_FIFO_THRESHOLD
 0x1

	)

98 
	#MAX_TX_FIFO_THRESHOLD
 ((4096 / 64Ë- 1)

	)

100 
	s©h_tx_°©us
 {

101 
u32
 
	mts_t°amp
;

102 
u16
 
	mts_£qnum
;

103 
u8
 
	mts_°©us
;

104 
u8
 
	mts_øãödex
;

105 
öt8_t
 
	mts_rssi
;

106 
u8
 
	mts_sh‹åëry
;

107 
u8
 
	mts_l⁄gªåy
;

108 
u8
 
	mts_vútcﬁ
;

109 
u8
 
	mts_Êags
;

110 
öt8_t
 
	mts_rssi_˘l0
;

111 
öt8_t
 
	mts_rssi_˘l1
;

112 
öt8_t
 
	mts_rssi_˘l2
;

113 
öt8_t
 
	mts_rssi_ext0
;

114 
öt8_t
 
	mts_rssi_ext1
;

115 
öt8_t
 
	mts_rssi_ext2
;

116 
u8
 
	mqid
;

117 
u16
 
	mdesc_id
;

118 
u8
 
	mtid
;

119 
u32
 
	mba_low
;

120 
u32
 
	mba_high
;

121 
u32
 
	mevm0
;

122 
u32
 
	mevm1
;

123 
u32
 
	mevm2
;

124 
u32
 
	mduøti⁄
;

127 
	s©h_rx_°©us
 {

128 
u32
 
	mrs_t°amp
;

129 
u16
 
	mrs_d©Æí
;

130 
u8
 
	mrs_°©us
;

131 
u8
 
	mrs_phyîr
;

132 
öt8_t
 
	mrs_rssi
;

133 
u8
 
	mrs_keyix
;

134 
u8
 
	mrs_øã
;

135 
u8
 
	mrs_™ã¬a
;

136 
u8
 
	mrs_m‹e
;

137 
öt8_t
 
	mrs_rssi_˘l
[3];

138 
öt8_t
 
	mrs_rssi_ext
[3];

139 
u8
 
	mrs_ißggr
;

140 
u8
 
	mrs_fú°aggr
;

141 
u8
 
	mrs_m‹óggr
;

142 
u8
 
	mrs_num_dñims
;

143 
u8
 
	mrs_Êags
;

144 
boﬁ
 
	mis_mybóc⁄
;

145 
u32
 
	mevm0
;

146 
u32
 
	mevm1
;

147 
u32
 
	mevm2
;

148 
u32
 
	mevm3
;

149 
u32
 
	mevm4
;

150 
u32
 
	mÊag
;

153 
	s©h_htc_rx_°©us
 {

154 
__be64
 
	mrs_t°amp
;

155 
__be16
 
	mrs_d©Æí
;

156 
u8
 
	mrs_°©us
;

157 
u8
 
	mrs_phyîr
;

158 
öt8_t
 
	mrs_rssi
;

159 
öt8_t
 
	mrs_rssi_˘l
[3];

160 
öt8_t
 
	mrs_rssi_ext
[3];

161 
u8
 
	mrs_keyix
;

162 
u8
 
	mrs_øã
;

163 
u8
 
	mrs_™ã¬a
;

164 
u8
 
	mrs_m‹e
;

165 
u8
 
	mrs_ißggr
;

166 
u8
 
	mrs_m‹óggr
;

167 
u8
 
	mrs_num_dñims
;

168 
u8
 
	mrs_Êags
;

169 
u8
 
	mrs_dummy
;

171 
__be32
 
	mevm0
;

172 
__be32
 
	mevm1
;

173 
__be32
 
	mevm2
;

176 
	#ATH9K_RXERR_CRC
 0x01

	)

177 
	#ATH9K_RXERR_PHY
 0x02

	)

178 
	#ATH9K_RXERR_FIFO
 0x04

	)

179 
	#ATH9K_RXERR_DECRYPT
 0x08

	)

180 
	#ATH9K_RXERR_MIC
 0x10

	)

181 
	#ATH9K_RXERR_KEYMISS
 0x20

	)

182 
	#ATH9K_RXERR_CORRUPT_DESC
 0x40

	)

184 
	#ATH9K_RX_MORE
 0x01

	)

185 
	#ATH9K_RX_MORE_AGGR
 0x02

	)

186 
	#ATH9K_RX_GI
 0x04

	)

187 
	#ATH9K_RX_2040
 0x08

	)

188 
	#ATH9K_RX_DELIM_CRC_PRE
 0x10

	)

189 
	#ATH9K_RX_DELIM_CRC_POST
 0x20

	)

190 
	#ATH9K_RX_DECRYPT_BUSY
 0x40

	)

192 
	#ATH9K_RXKEYIX_INVALID
 ((
u8
)-1)

	)

193 
	#ATH9K_TXKEYIX_INVALID
 ((
u8
)-1)

	)

195 
	e©h9k_phyîr
 {

196 
	mATH9K_PHYERR_UNDERRUN
 = 0,

197 
	mATH9K_PHYERR_TIMING
 = 1,

198 
	mATH9K_PHYERR_PARITY
 = 2,

199 
	mATH9K_PHYERR_RATE
 = 3,

200 
	mATH9K_PHYERR_LENGTH
 = 4,

201 
	mATH9K_PHYERR_RADAR
 = 5,

202 
	mATH9K_PHYERR_SERVICE
 = 6,

203 
	mATH9K_PHYERR_TOR
 = 7,

205 
	mATH9K_PHYERR_OFDM_TIMING
 = 17,

206 
	mATH9K_PHYERR_OFDM_SIGNAL_PARITY
 = 18,

207 
	mATH9K_PHYERR_OFDM_RATE_ILLEGAL
 = 19,

208 
	mATH9K_PHYERR_OFDM_LENGTH_ILLEGAL
 = 20,

209 
	mATH9K_PHYERR_OFDM_POWER_DROP
 = 21,

210 
	mATH9K_PHYERR_OFDM_SERVICE
 = 22,

211 
	mATH9K_PHYERR_OFDM_RESTART
 = 23,

213 
	mATH9K_PHYERR_CCK_BLOCKER
 = 24,

214 
	mATH9K_PHYERR_CCK_TIMING
 = 25,

215 
	mATH9K_PHYERR_CCK_HEADER_CRC
 = 26,

216 
	mATH9K_PHYERR_CCK_RATE_ILLEGAL
 = 27,

217 
	mATH9K_PHYERR_CCK_LENGTH_ILLEGAL
 = 28,

218 
	mATH9K_PHYERR_CCK_POWER_DROP
 = 29,

219 
	mATH9K_PHYERR_CCK_SERVICE
 = 30,

220 
	mATH9K_PHYERR_CCK_RESTART
 = 31,

222 
	mATH9K_PHYERR_HT_CRC_ERROR
 = 32,

223 
	mATH9K_PHYERR_HT_LENGTH_ILLEGAL
 = 33,

224 
	mATH9K_PHYERR_HT_RATE_ILLEGAL
 = 34,

225 
	mATH9K_PHYERR_HT_ZLF
 = 35,

227 
	mATH9K_PHYERR_FALSE_RADAR_EXT
 = 36,

228 
	mATH9K_PHYERR_GREEN_FIELD
 = 37,

229 
	mATH9K_PHYERR_SPECTRAL
 = 38,

231 
	mATH9K_PHYERR_MAX
 = 39,

234 
	s©h_desc
 {

235 
u32
 
	mds_lök
;

236 
u32
 
	mds_d©a
;

237 
u32
 
	mds_˘l0
;

238 
u32
 
	mds_˘l1
;

239 
u32
 
	mds_hw
[20];

240 *
	mds_vd©a
;

241 } 
__∑cked
 
__Æig√d
(4);

243 
	#ATH9K_TXDESC_NOACK
 0x0002

	)

244 
	#ATH9K_TXDESC_RTSENA
 0x0004

	)

245 
	#ATH9K_TXDESC_CTSENA
 0x0008

	)

259 
	#ATH9K_TXDESC_INTREQ
 0x0010

	)

260 
	#ATH9K_TXDESC_VEOL
 0x0020

	)

261 
	#ATH9K_TXDESC_EXT_ONLY
 0x0040

	)

262 
	#ATH9K_TXDESC_EXT_AND_CTL
 0x0080

	)

263 
	#ATH9K_TXDESC_VMF
 0x0100

	)

264 
	#ATH9K_TXDESC_FRAG_IS_ON
 0x0200

	)

265 
	#ATH9K_TXDESC_LOWRXCHAIN
 0x0400

	)

266 
	#ATH9K_TXDESC_LDPC
 0x0800

	)

267 
	#ATH9K_TXDESC_CLRDMASK
 0x1000

	)

269 
	#ATH9K_TXDESC_PAPRD
 0x70000

	)

270 
	#ATH9K_TXDESC_PAPRD_S
 16

	)

272 
	#ATH9K_RXDESC_INTREQ
 0x0020

	)

274 
	s¨5416_desc
 {

275 
u32
 
	mds_lök
;

276 
u32
 
	mds_d©a
;

277 
u32
 
	mds_˘l0
;

278 
u32
 
	mds_˘l1
;

281 
u32
 
	m˘l2
;

282 
u32
 
	m˘l3
;

283 
u32
 
	m˘l4
;

284 
u32
 
	m˘l5
;

285 
u32
 
	m˘l6
;

286 
u32
 
	m˘l7
;

287 
u32
 
	m˘l8
;

288 
u32
 
	m˘l9
;

289 
u32
 
	m˘l10
;

290 
u32
 
	m˘l11
;

291 
u32
 
	m°©us0
;

292 
u32
 
	m°©us1
;

293 
u32
 
	m°©us2
;

294 
u32
 
	m°©us3
;

295 
u32
 
	m°©us4
;

296 
u32
 
	m°©us5
;

297 
u32
 
	m°©us6
;

298 
u32
 
	m°©us7
;

299 
u32
 
	m°©us8
;

300 
u32
 
	m°©us9
;

301 } 
	mtx
;

303 
u32
 
	m°©us0
;

304 
u32
 
	m°©us1
;

305 
u32
 
	m°©us2
;

306 
u32
 
	m°©us3
;

307 
u32
 
	m°©us4
;

308 
u32
 
	m°©us5
;

309 
u32
 
	m°©us6
;

310 
u32
 
	m°©us7
;

311 
u32
 
	m°©us8
;

312 } 
	mrx
;

313 } 
	mu
;

314 } 
__∑cked
 
__Æig√d
(4);

316 
	#AR5416DESC
(
_ds
Ë((
¨5416_desc
 *)(_ds))

	)

317 
	#AR5416DESC_CONST
(
_ds
Ë((c⁄° 
¨5416_desc
 *)(_ds))

	)

319 
	#ds_˘l2
 
u
.
tx
.
˘l2


	)

320 
	#ds_˘l3
 
u
.
tx
.
˘l3


	)

321 
	#ds_˘l4
 
u
.
tx
.
˘l4


	)

322 
	#ds_˘l5
 
u
.
tx
.
˘l5


	)

323 
	#ds_˘l6
 
u
.
tx
.
˘l6


	)

324 
	#ds_˘l7
 
u
.
tx
.
˘l7


	)

325 
	#ds_˘l8
 
u
.
tx
.
˘l8


	)

326 
	#ds_˘l9
 
u
.
tx
.
˘l9


	)

327 
	#ds_˘l10
 
u
.
tx
.
˘l10


	)

328 
	#ds_˘l11
 
u
.
tx
.
˘l11


	)

330 
	#ds_tx°©us0
 
u
.
tx
.
°©us0


	)

331 
	#ds_tx°©us1
 
u
.
tx
.
°©us1


	)

332 
	#ds_tx°©us2
 
u
.
tx
.
°©us2


	)

333 
	#ds_tx°©us3
 
u
.
tx
.
°©us3


	)

334 
	#ds_tx°©us4
 
u
.
tx
.
°©us4


	)

335 
	#ds_tx°©us5
 
u
.
tx
.
°©us5


	)

336 
	#ds_tx°©us6
 
u
.
tx
.
°©us6


	)

337 
	#ds_tx°©us7
 
u
.
tx
.
°©us7


	)

338 
	#ds_tx°©us8
 
u
.
tx
.
°©us8


	)

339 
	#ds_tx°©us9
 
u
.
tx
.
°©us9


	)

341 
	#ds_rx°©us0
 
u
.
rx
.
°©us0


	)

342 
	#ds_rx°©us1
 
u
.
rx
.
°©us1


	)

343 
	#ds_rx°©us2
 
u
.
rx
.
°©us2


	)

344 
	#ds_rx°©us3
 
u
.
rx
.
°©us3


	)

345 
	#ds_rx°©us4
 
u
.
rx
.
°©us4


	)

346 
	#ds_rx°©us5
 
u
.
rx
.
°©us5


	)

347 
	#ds_rx°©us6
 
u
.
rx
.
°©us6


	)

348 
	#ds_rx°©us7
 
u
.
rx
.
°©us7


	)

349 
	#ds_rx°©us8
 
u
.
rx
.
°©us8


	)

351 
	#AR_FømeLí
 0x00000fff

	)

352 
	#AR_VútM‹eFøg
 0x00001000

	)

353 
	#AR_TxCéRsvd00
 0x0000e000

	)

354 
	#AR_XmôPowî0
 0x003f0000

	)

355 
	#AR_XmôPowî0_S
 16

	)

356 
	#AR_XmôPowî1
 0x3f000000

	)

357 
	#AR_XmôPowî1_S
 24

	)

358 
	#AR_XmôPowî2
 0x3f000000

	)

359 
	#AR_XmôPowî2_S
 24

	)

360 
	#AR_XmôPowî3
 0x3f000000

	)

361 
	#AR_XmôPowî3_S
 24

	)

362 
	#AR_RTSE«bÀ
 0x00400000

	)

363 
	#AR_VEOL
 0x00800000

	)

364 
	#AR_CÃDe°Mask
 0x01000000

	)

365 
	#AR_TxCéRsvd01
 0x1e000000

	)

366 
	#AR_TxI¡rReq
 0x20000000

	)

367 
	#AR_De°IdxVÆid
 0x40000000

	)

368 
	#AR_CTSE«bÀ
 0x80000000

	)

370 
	#AR_TxM‹e
 0x00001000

	)

371 
	#AR_De°Idx
 0x000„000

	)

372 
	#AR_De°Idx_S
 13

	)

373 
	#AR_FømeTy≥
 0x00f00000

	)

374 
	#AR_FømeTy≥_S
 20

	)

375 
	#AR_NoAck
 0x01000000

	)

376 
	#AR_In£πTS
 0x02000000

	)

377 
	#AR_C‹ru±FCS
 0x04000000

	)

378 
	#AR_ExtO∆y
 0x08000000

	)

379 
	#AR_ExtAndCé
 0x10000000

	)

380 
	#AR_M‹eAggr
 0x20000000

	)

381 
	#AR_IsAggr
 0x40000000

	)

383 
	#AR_Bur°Dur
 0x00007fff

	)

384 
	#AR_Bur°Dur_S
 0

	)

385 
	#AR_DurUpd©eE«
 0x00008000

	)

386 
	#AR_XmôD©aTrõs0
 0x000f0000

	)

387 
	#AR_XmôD©aTrõs0_S
 16

	)

388 
	#AR_XmôD©aTrõs1
 0x00f00000

	)

389 
	#AR_XmôD©aTrõs1_S
 20

	)

390 
	#AR_XmôD©aTrõs2
 0x0f000000

	)

391 
	#AR_XmôD©aTrõs2_S
 24

	)

392 
	#AR_XmôD©aTrõs3
 0xf0000000

	)

393 
	#AR_XmôD©aTrõs3_S
 28

	)

395 
	#AR_XmôR©e0
 0x000000ff

	)

396 
	#AR_XmôR©e0_S
 0

	)

397 
	#AR_XmôR©e1
 0x0000ff00

	)

398 
	#AR_XmôR©e1_S
 8

	)

399 
	#AR_XmôR©e2
 0x00ff0000

	)

400 
	#AR_XmôR©e2_S
 16

	)

401 
	#AR_XmôR©e3
 0xff000000

	)

402 
	#AR_XmôR©e3_S
 24

	)

404 
	#AR_PackëDur0
 0x00007fff

	)

405 
	#AR_PackëDur0_S
 0

	)

406 
	#AR_RTSCTSQuÆ0
 0x00008000

	)

407 
	#AR_PackëDur1
 0x7fff0000

	)

408 
	#AR_PackëDur1_S
 16

	)

409 
	#AR_RTSCTSQuÆ1
 0x80000000

	)

411 
	#AR_PackëDur2
 0x00007fff

	)

412 
	#AR_PackëDur2_S
 0

	)

413 
	#AR_RTSCTSQuÆ2
 0x00008000

	)

414 
	#AR_PackëDur3
 0x7fff0000

	)

415 
	#AR_PackëDur3_S
 16

	)

416 
	#AR_RTSCTSQuÆ3
 0x80000000

	)

418 
	#AR_AggrLí
 0x0000ffff

	)

419 
	#AR_AggrLí_S
 0

	)

420 
	#AR_TxCéRsvd60
 0x00030000

	)

421 
	#AR_PadDñim
 0x03fc0000

	)

422 
	#AR_PadDñim_S
 18

	)

423 
	#AR_En¸Ty≥
 0x0c000000

	)

424 
	#AR_En¸Ty≥_S
 26

	)

425 
	#AR_TxCéRsvd61
 0xf0000000

	)

426 
	#AR_LDPC
 0x80000000

	)

428 
	#AR_2040_0
 0x00000001

	)

429 
	#AR_GI0
 0x00000002

	)

430 
	#AR_ChaöSñ0
 0x0000001c

	)

431 
	#AR_ChaöSñ0_S
 2

	)

432 
	#AR_2040_1
 0x00000020

	)

433 
	#AR_GI1
 0x00000040

	)

434 
	#AR_ChaöSñ1
 0x00000380

	)

435 
	#AR_ChaöSñ1_S
 7

	)

436 
	#AR_2040_2
 0x00000400

	)

437 
	#AR_GI2
 0x00000800

	)

438 
	#AR_ChaöSñ2
 0x00007000

	)

439 
	#AR_ChaöSñ2_S
 12

	)

440 
	#AR_2040_3
 0x00008000

	)

441 
	#AR_GI3
 0x00010000

	)

442 
	#AR_ChaöSñ3
 0x000e0000

	)

443 
	#AR_ChaöSñ3_S
 17

	)

444 
	#AR_RTSCTSR©e
 0x0ff00000

	)

445 
	#AR_RTSCTSR©e_S
 20

	)

446 
	#AR_STBC0
 0x10000000

	)

447 
	#AR_STBC1
 0x20000000

	)

448 
	#AR_STBC2
 0x40000000

	)

449 
	#AR_STBC3
 0x80000000

	)

451 
	#AR_TxRSSIA¡00
 0x000000ff

	)

452 
	#AR_TxRSSIA¡00_S
 0

	)

453 
	#AR_TxRSSIA¡01
 0x0000ff00

	)

454 
	#AR_TxRSSIA¡01_S
 8

	)

455 
	#AR_TxRSSIA¡02
 0x00ff0000

	)

456 
	#AR_TxRSSIA¡02_S
 16

	)

457 
	#AR_TxSètusRsvd00
 0x3f000000

	)

458 
	#AR_TxBaSètus
 0x40000000

	)

459 
	#AR_TxSètusRsvd01
 0x80000000

	)

466 
	#AR_FrmXmôOK
 0x00000001

	)

467 
	#AR_Ex˚ssiveRërõs
 0x00000002

	)

468 
	#AR_FIFOUndîrun
 0x00000004

	)

469 
	#AR_Fûãªd
 0x00000008

	)

470 
	#AR_RTSFaûC¡
 0x000000f0

	)

471 
	#AR_RTSFaûC¡_S
 4

	)

472 
	#AR_D©aFaûC¡
 0x00000f00

	)

473 
	#AR_D©aFaûC¡_S
 8

	)

474 
	#AR_VútRëryC¡
 0x0000f000

	)

475 
	#AR_VútRëryC¡_S
 12

	)

476 
	#AR_TxDñimUndîrun
 0x00010000

	)

477 
	#AR_TxD©aUndîrun
 0x00020000

	)

478 
	#AR_DescCfgEº
 0x00040000

	)

479 
	#AR_TxTimîExpúed
 0x00080000

	)

480 
	#AR_TxSètusRsvd10
 0xfff00000

	)

482 
	#AR_SídTime°amp
 
ds_tx°©us2


	)

483 
	#AR_BaBôm≠Low
 
ds_tx°©us3


	)

484 
	#AR_BaBôm≠High
 
ds_tx°©us4


	)

486 
	#AR_TxRSSIA¡10
 0x000000ff

	)

487 
	#AR_TxRSSIA¡10_S
 0

	)

488 
	#AR_TxRSSIA¡11
 0x0000ff00

	)

489 
	#AR_TxRSSIA¡11_S
 8

	)

490 
	#AR_TxRSSIA¡12
 0x00ff0000

	)

491 
	#AR_TxRSSIA¡12_S
 16

	)

492 
	#AR_TxRSSIComböed
 0xff000000

	)

493 
	#AR_TxRSSIComböed_S
 24

	)

495 
	#AR_TxTid
 0xf0000000

	)

496 
	#AR_TxTid_S
 28

	)

498 
	#AR_TxEVM0
 
ds_tx°©us5


	)

499 
	#AR_TxEVM1
 
ds_tx°©us6


	)

500 
	#AR_TxEVM2
 
ds_tx°©us7


	)

502 
	#AR_TxD⁄e
 0x00000001

	)

503 
	#AR_SeqNum
 0x00001f„

	)

504 
	#AR_SeqNum_S
 1

	)

505 
	#AR_TxSètusRsvd80
 0x0001e000

	)

506 
	#AR_TxOpEx˚eded
 0x00020000

	)

507 
	#AR_TxSètusRsvd81
 0x001c0000

	)

508 
	#AR_FöÆTxIdx
 0x00600000

	)

509 
	#AR_FöÆTxIdx_S
 21

	)

510 
	#AR_TxSètusRsvd82
 0x01800000

	)

511 
	#AR_PowîMgmt
 0x02000000

	)

512 
	#AR_TxSètusRsvd83
 0xfc000000

	)

514 
	#AR_RxCTLRsvd00
 0xffffffff

	)

516 
	#AR_RxCéRsvd00
 0x00001000

	)

517 
	#AR_RxI¡rReq
 0x00002000

	)

518 
	#AR_RxCéRsvd01
 0xffffc000

	)

520 
	#AR_RxRSSIA¡00
 0x000000ff

	)

521 
	#AR_RxRSSIA¡00_S
 0

	)

522 
	#AR_RxRSSIA¡01
 0x0000ff00

	)

523 
	#AR_RxRSSIA¡01_S
 8

	)

524 
	#AR_RxRSSIA¡02
 0x00ff0000

	)

525 
	#AR_RxRSSIA¡02_S
 16

	)

526 
	#AR_RxR©e
 0xff000000

	)

527 
	#AR_RxR©e_S
 24

	)

528 
	#AR_RxSètusRsvd00
 0xff000000

	)

530 
	#AR_D©aLí
 0x00000fff

	)

531 
	#AR_RxM‹e
 0x00001000

	)

532 
	#AR_NumDñim
 0x003fc000

	)

533 
	#AR_NumDñim_S
 14

	)

534 
	#AR_RxSètusRsvd10
 0xff800000

	)

536 
	#AR_RcvTime°amp
 
ds_rx°©us2


	)

538 
	#AR_GI
 0x00000001

	)

539 
	#AR_2040
 0x00000002

	)

540 
	#AR_P¨ÆÀl40
 0x00000004

	)

541 
	#AR_P¨ÆÀl40_S
 2

	)

542 
	#AR_STBC
 0x00000008

	)

543 
	#AR_RxSètusRsvd30
 0x000000f0

	)

544 
	#AR_RxA¡í«
 0xffffff00

	)

545 
	#AR_RxA¡í«_S
 8

	)

547 
	#AR_RxRSSIA¡10
 0x000000ff

	)

548 
	#AR_RxRSSIA¡10_S
 0

	)

549 
	#AR_RxRSSIA¡11
 0x0000ff00

	)

550 
	#AR_RxRSSIA¡11_S
 8

	)

551 
	#AR_RxRSSIA¡12
 0x00ff0000

	)

552 
	#AR_RxRSSIA¡12_S
 16

	)

553 
	#AR_RxRSSIComböed
 0xff000000

	)

554 
	#AR_RxRSSIComböed_S
 24

	)

556 
	#AR_RxEVM0
 
ds_rx°©us4


	)

557 
	#AR_RxEVM1
 
ds_rx°©us5


	)

558 
	#AR_RxEVM2
 
ds_rx°©us6


	)

560 
	#AR_RxD⁄e
 0x00000001

	)

561 
	#AR_RxFømeOK
 0x00000002

	)

562 
	#AR_CRCEº
 0x00000004

	)

563 
	#AR_De¸y±CRCEº
 0x00000008

	)

564 
	#AR_PHYEº
 0x00000010

	)

565 
	#AR_Mich´lEº
 0x00000020

	)

566 
	#AR_PªDñimCRCEº
 0x00000040

	)

567 
	#AR_RxSètusRsvd70
 0x00000080

	)

568 
	#AR_RxKeyIdxVÆid
 0x00000100

	)

569 
	#AR_KeyIdx
 0x0000„00

	)

570 
	#AR_KeyIdx_S
 9

	)

571 
	#AR_PHYEºCode
 0x0000ff00

	)

572 
	#AR_PHYEºCode_S
 8

	)

573 
	#AR_RxM‹eAggr
 0x00010000

	)

574 
	#AR_RxAggr
 0x00020000

	)

575 
	#AR_Po°DñimCRCEº
 0x00040000

	)

576 
	#AR_RxSètusRsvd71
 0x3ff80000

	)

577 
	#AR_RxFú°Aggr
 0x20000000

	)

578 
	#AR_De¸y±BusyEº
 0x40000000

	)

579 
	#AR_KeyMiss
 0x80000000

	)

581 
	e©h9k_tx_queue
 {

582 
	mATH9K_TX_QUEUE_INACTIVE
 = 0,

583 
	mATH9K_TX_QUEUE_DATA
,

584 
	mATH9K_TX_QUEUE_BEACON
,

585 
	mATH9K_TX_QUEUE_CAB
,

586 
	mATH9K_TX_QUEUE_UAPSD
,

587 
	mATH9K_TX_QUEUE_PSPOLL


590 
	#ATH9K_NUM_TX_QUEUES
 10

	)

593 
	#ATH9K_WME_UPSD
 4

	)

595 
	e©h9k_tx_queue_Êags
 {

596 
	mTXQ_FLAG_TXINT_ENABLE
 = 0x0001,

597 
	mTXQ_FLAG_TXDESCINT_ENABLE
 = 0x0002,

598 
	mTXQ_FLAG_TXEOLINT_ENABLE
 = 0x0004,

599 
	mTXQ_FLAG_TXURNINT_ENABLE
 = 0x0008,

600 
	mTXQ_FLAG_BACKOFF_DISABLE
 = 0x0010,

601 
	mTXQ_FLAG_COMPRESSION_ENABLE
 = 0x0020,

602 
	mTXQ_FLAG_RDYTIME_EXP_POLICY_ENABLE
 = 0x0040,

603 
	mTXQ_FLAG_FRAG_BURST_BACKOFF_ENABLE
 = 0x0080,

606 
	#ATH9K_TXQ_USEDEFAULT
 ((
u32
Ë-1)

	)

607 
	#ATH9K_TXQ_USE_LOCKOUT_BKOFF_DIS
 0x00000001

	)

609 
	#ATH9K_DECOMP_MASK_SIZE
 128

	)

611 
	e©h9k_pkt_ty≥
 {

612 
	mATH9K_PKT_TYPE_NORMAL
 = 0,

613 
	mATH9K_PKT_TYPE_ATIM
,

614 
	mATH9K_PKT_TYPE_PSPOLL
,

615 
	mATH9K_PKT_TYPE_BEACON
,

616 
	mATH9K_PKT_TYPE_PROBE_RESP
,

617 
	mATH9K_PKT_TYPE_CHIRP
,

618 
	mATH9K_PKT_TYPE_GRP_POLL
,

621 
	s©h9k_tx_queue_öfo
 {

622 
u32
 
	mtqi_vî
;

623 
©h9k_tx_queue
 
	mtqi_ty≥
;

624 
	mtqi_subty≥
;

625 
©h9k_tx_queue_Êags
 
	mtqi_qÊags
;

626 
u32
 
	mtqi_¥i‹ôy
;

627 
u32
 
	mtqi_aifs
;

628 
u32
 
	mtqi_cwmö
;

629 
u32
 
	mtqi_cwmax
;

630 
u16
 
	mtqi_shªåy
;

631 
u16
 
	mtqi_lgªåy
;

632 
u32
 
	mtqi_cbrPîiod
;

633 
u32
 
	mtqi_cbrOvîÊowLimô
;

634 
u32
 
	mtqi_bur°Time
;

635 
u32
 
	mtqi_ªadyTime
;

636 
u32
 
	mtqi_physCompBuf
;

637 
u32
 
	mtqi_ötFœgs
;

640 
	e©h9k_rx_fûãr
 {

641 
	mATH9K_RX_FILTER_UCAST
 = 0x00000001,

642 
	mATH9K_RX_FILTER_MCAST
 = 0x00000002,

643 
	mATH9K_RX_FILTER_BCAST
 = 0x00000004,

644 
	mATH9K_RX_FILTER_CONTROL
 = 0x00000008,

645 
	mATH9K_RX_FILTER_BEACON
 = 0x00000010,

646 
	mATH9K_RX_FILTER_PROM
 = 0x00000020,

647 
	mATH9K_RX_FILTER_PROBEREQ
 = 0x00000080,

648 
	mATH9K_RX_FILTER_PHYERR
 = 0x00000100,

649 
	mATH9K_RX_FILTER_MYBEACON
 = 0x00000200,

650 
	mATH9K_RX_FILTER_COMP_BAR
 = 0x00000400,

651 
	mATH9K_RX_FILTER_COMP_BA
 = 0x00000800,

652 
	mATH9K_RX_FILTER_UNCOMP_BA_BAR
 = 0x00001000,

653 
	mATH9K_RX_FILTER_PSPOLL
 = 0x00004000,

654 
	mATH9K_RX_FILTER_PHYRADAR
 = 0x00002000,

655 
	mATH9K_RX_FILTER_MCAST_BCAST_ALL
 = 0x00008000,

656 
	mATH9K_RX_FILTER_CONTROL_WRAPPER
 = 0x00080000,

657 
	mATH9K_RX_FILTER_4ADDRESS
 = 0x00100000,

660 
	#ATH9K_RATESERIES_RTS_CTS
 0x0001

	)

661 
	#ATH9K_RATESERIES_2040
 0x0002

	)

662 
	#ATH9K_RATESERIES_HALFGI
 0x0004

	)

663 
	#ATH9K_RATESERIES_STBC
 0x0008

	)

665 
	s©h9k_11n_øã_£rõs
 {

666 
u32
 
	mTrõs
;

667 
u32
 
	mR©e
;

668 
u32
 
	mPktDuøti⁄
;

669 
u32
 
	mChSñ
;

670 
u32
 
	mR©eFœgs
;

673 
	eaggr_ty≥
 {

674 
	mAGGR_BUF_NONE
,

675 
	mAGGR_BUF_FIRST
,

676 
	mAGGR_BUF_MIDDLE
,

677 
	mAGGR_BUF_LAST
,

680 
	e©h9k_key_ty≥
 {

681 
	mATH9K_KEY_TYPE_CLEAR
,

682 
	mATH9K_KEY_TYPE_WEP
,

683 
	mATH9K_KEY_TYPE_AES
,

684 
	mATH9K_KEY_TYPE_TKIP
,

687 
	s©h_tx_öfo
 {

688 
u8
 
	mqcu
;

690 
boﬁ
 
	mis_fú°
;

691 
boﬁ
 
	mis_œ°
;

693 
aggr_ty≥
 
	maggr
;

694 
u8
 
	mndñim
;

695 
u16
 
	maggr_Àn
;

697 
dma_addr_t
 
	mlök
;

698 
	mpkt_Àn
;

699 
u32
 
	mÊags
;

701 
dma_addr_t
 
	mbuf_addr
[4];

702 
	mbuf_Àn
[4];

704 
©h9k_11n_øã_£rõs
 
	møãs
[4];

705 
u8
 
	mπs˘s_øã
;

706 
boﬁ
 
	mdur_upd©e
;

708 
©h9k_pkt_ty≥
 
	mty≥
;

709 
©h9k_key_ty≥
 
	mkeyty≥
;

710 
u8
 
	mkeyix
;

711 
u8
 
	mtxpowî
[4];

714 
	g©h_hw
;

715 
	g©h9k_ch™√l
;

716 
	g©h9k_öt
;

718 
u32
 
©h9k_hw_gëtxbuf
(
©h_hw
 *
ah
, u32 
q
);

719 
©h9k_hw_puâxbuf
(
©h_hw
 *
ah
, 
u32
 
q
, u32 
txdp
);

720 
©h9k_hw_tx°¨t
(
©h_hw
 *
ah
, 
u32
 
q
);

721 
u32
 
©h9k_hw_numtx≥ndög
(
©h_hw
 *
ah
, u32 
q
);

722 
boﬁ
 
©h9k_hw_upd©ëxåigÀvñ
(
©h_hw
 *
ah
, boﬁ 
bIncTrigLevñ
);

723 
boﬁ
 
©h9k_hw_°›_dma_queue
(
©h_hw
 *
ah
, 
u32
 
q
);

724 
©h9k_hw_ab‹t_tx_dma
(
©h_hw
 *
ah
);

725 
boﬁ
 
©h9k_hw_£t_txq_¥›s
(
©h_hw
 *
ah
, 
q
,

726 c⁄° 
©h9k_tx_queue_öfo
 *
qöfo
);

727 
boﬁ
 
©h9k_hw_gë_txq_¥›s
(
©h_hw
 *
ah
, 
q
,

728 
©h9k_tx_queue_öfo
 *
qöfo
);

729 
©h9k_hw_£tu±xqueue
(
©h_hw
 *
ah
, 
©h9k_tx_queue
 
ty≥
,

730 c⁄° 
©h9k_tx_queue_öfo
 *
qöfo
);

731 
boﬁ
 
©h9k_hw_ªÀa£txqueue
(
©h_hw
 *
ah
, 
u32
 
q
);

732 
boﬁ
 
©h9k_hw_ª£âxqueue
(
©h_hw
 *
ah
, 
u32
 
q
);

733 
©h9k_hw_rx¥ocdesc
(
©h_hw
 *
ah
, 
©h_desc
 *
ds
,

734 
©h_rx_°©us
 *
rs
);

735 
©h9k_hw_£tu¥xdesc
(
©h_hw
 *
ah
, 
©h_desc
 *
ds
,

736 
u32
 
size
, u32 
Êags
);

737 
boﬁ
 
©h9k_hw_£åxab‹t
(
©h_hw
 *
ah
, boﬁ 
£t
);

738 
©h9k_hw_puåxbuf
(
©h_hw
 *
ah
, 
u32
 
rxdp
);

739 
©h9k_hw_°¨çcuª˚ive
(
©h_hw
 *
ah
, 
boﬁ
 
is_sˇ¬ög
);

740 
©h9k_hw_ab‹çcuªcv
(
©h_hw
 *
ah
);

741 
boﬁ
 
©h9k_hw_°›dm¨ecv
(
©h_hw
 *
ah
, boﬁ *
ª£t
);

742 
©h9k_hw_bóc⁄q_£tup
(
©h_hw
 *
ah
);

743 
©h9k_hw_£t_tx_fûãr
(
©h_hw
 *
ah
, 
u8
 
de°idx
, 
boﬁ
 
£t
);

746 
boﬁ
 
©h9k_hw_öå≥nd
(
©h_hw
 *
ah
);

747 
©h9k_hw_£t_öãºu±s
(
©h_hw
 *
ah
);

748 
©h9k_hw_íabÀ_öãºu±s
(
©h_hw
 *
ah
);

749 
©h9k_hw_dißbÀ_öãºu±s
(
©h_hw
 *
ah
);

750 
©h9k_hw_kûl_öãºu±s
(
©h_hw
 *
ah
);

752 
¨9002_hw_©èch_mac_›s
(
©h_hw
 *
ah
);

	@main.c

17 
	~<löux/∆80211.h
>

18 
	~<löux/dñay.h
>

19 
	~"©h9k.h
"

20 
	~"btc€x.h
"

22 
u8
 
	$©h9k_∑r£_mpdudísôy
(
u8
 
mpdudísôy
)

35 
mpdudísôy
) {

55 
	}
}

57 
boﬁ
 
	$©h9k_has_≥ndög_‰ames
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

58 
boﬁ
 
sw_≥ndög
)

60 
boﬁ
 
≥ndög
 = 
Ál£
;

62 
	`•ö_lock_bh
(&
txq
->
axq_lock
);

64 i‡(
txq
->
axq_dïth
) {

65 
≥ndög
 = 
åue
;

66 
out
;

69 i‡(!
sw_≥ndög
)

70 
out
;

72 i‡(
txq
->
mac80211_qnum
 >= 0) {

73 
li°_hód
 *
li°
;

75 
li°
 = &
sc
->
cur_ch™
->
acq
[
txq
->
mac80211_qnum
];

76 i‡(!
	`li°_em±y
(
li°
))

77 
≥ndög
 = 
åue
;

79 
out
:

80 
	`•ö_u∆ock_bh
(&
txq
->
axq_lock
);

81  
≥ndög
;

82 
	}
}

84 
boﬁ
 
	$©h9k_£çowî
(
©h_so·c
 *
sc
, 
©h9k_powî_mode
 
mode
)

86 
Êags
;

87 
boﬁ
 
ªt
;

89 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

90 
ªt
 = 
	`©h9k_hw_£çowî
(
sc
->
sc_ah
, 
mode
);

91 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

93  
ªt
;

94 
	}
}

96 
	$©h_ps_fuŒ_¶ìp
(
d©a
)

98 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
d©a
;

99 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

100 
boﬁ
 
ª£t
;

102 
	`•ö_lock
(&
comm⁄
->
cc_lock
);

103 
	`©h_hw_cy˛e_cou¡îs_upd©e
(
comm⁄
);

104 
	`•ö_u∆ock
(&
comm⁄
->
cc_lock
);

106 
	`©h9k_hw_£åxab‹t
(
sc
->
sc_ah
, 1);

107 
	`©h9k_hw_°›dm¨ecv
(
sc
->
sc_ah
, &
ª£t
);

109 
	`©h9k_hw_£çowî
(
sc
->
sc_ah
, 
ATH9K_PM_FULL_SLEEP
);

110 
	}
}

112 
	$©h9k_ps_wakeup
(
©h_so·c
 *
sc
)

114 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

115 
Êags
;

116 
©h9k_powî_mode
 
powî_mode
;

118 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

119 i‡(++
sc
->
ps_u£cou¡
 != 1)

120 
u∆ock
;

122 
	`dñ_timî_sync
(&
sc
->
¶ìp_timî
);

123 
powî_mode
 = 
sc
->
sc_ah
->power_mode;

124 
	`©h9k_hw_£çowî
(
sc
->
sc_ah
, 
ATH9K_PM_AWAKE
);

131 i‡(
powî_mode
 !
ATH9K_PM_AWAKE
) {

132 
	`•ö_lock
(&
comm⁄
->
cc_lock
);

133 
	`©h_hw_cy˛e_cou¡îs_upd©e
(
comm⁄
);

134 
	`mem£t
(&
comm⁄
->
cc_survey
, 0, (common->cc_survey));

135 
	`mem£t
(&
comm⁄
->
cc_™i
, 0, (common->cc_ani));

136 
	`•ö_u∆ock
(&
comm⁄
->
cc_lock
);

139 
u∆ock
:

140 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

141 
	}
}

143 
	$©h9k_ps_ª°‹e
(
©h_so·c
 *
sc
)

145 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

146 
©h9k_powî_mode
 
mode
;

147 
Êags
;

149 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

150 i‡(--
sc
->
ps_u£cou¡
 != 0)

151 
u∆ock
;

153 i‡(
sc
->
ps_idÀ
) {

154 
	`mod_timî
(&
sc
->
¶ìp_timî
, 
jiffõs
 + 
HZ
 / 10);

155 
u∆ock
;

158 i‡(
sc
->
ps_íabÀd
 &&

159 !(
sc
->
ps_Êags
 & (
PS_WAIT_FOR_BEACON
 |

160 
PS_WAIT_FOR_CAB
 |

161 
PS_WAIT_FOR_PSPOLL_DATA
 |

162 
PS_WAIT_FOR_TX_ACK
 |

163 
PS_WAIT_FOR_ANI
))) {

164 
mode
 = 
ATH9K_PM_NETWORK_SLEEP
;

165 i‡(
	`©h9k_hw_btc€x_is_íabÀd
(
sc
->
sc_ah
))

166 
	`©h9k_btc€x_°›_gí_timî
(
sc
);

168 
u∆ock
;

171 
	`•ö_lock
(&
comm⁄
->
cc_lock
);

172 
	`©h_hw_cy˛e_cou¡îs_upd©e
(
comm⁄
);

173 
	`•ö_u∆ock
(&
comm⁄
->
cc_lock
);

175 
	`©h9k_hw_£çowî
(
sc
->
sc_ah
, 
mode
);

177 
u∆ock
:

178 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

179 
	}
}

181 
	$__©h_ˇn˚l_w‹k
(
©h_so·c
 *
sc
)

183 
	`ˇn˚l_w‹k_sync
(&
sc
->
∑¥d_w‹k
);

184 
	`ˇn˚l_dñayed_w‹k_sync
(&
sc
->
tx_com∂ëe_w‹k
);

185 
	`ˇn˚l_dñayed_w‹k_sync
(&
sc
->
hw_∂l_w‹k
);

187 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


188 i‡(
	`©h9k_hw_mci_is_íabÀd
(
sc
->
sc_ah
))

189 
	`ˇn˚l_w‹k_sync
(&
sc
->
mci_w‹k
);

191 
	}
}

193 
	$©h_ˇn˚l_w‹k
(
©h_so·c
 *
sc
)

195 
	`__©h_ˇn˚l_w‹k
(
sc
);

196 
	`ˇn˚l_w‹k_sync
(&
sc
->
hw_ª£t_w‹k
);

197 
	}
}

199 
	$©h_ª°¨t_w‹k
(
©h_so·c
 *
sc
)

201 
	`õì80211_queue_dñayed_w‹k
(
sc
->
hw
, &sc->
tx_com∂ëe_w‹k
, 0);

203 i‡(
	`AR_SREV_9340
(
sc
->
sc_ah
Ë|| 
	`AR_SREV_9330
(sc->sc_ah))

204 
	`õì80211_queue_dñayed_w‹k
(
sc
->
hw
, &sc->
hw_∂l_w‹k
,

205 
	`m£cs_to_jiffõs
(
ATH_PLL_WORK_INTERVAL
));

207 
	`©h_°¨t_™i
(
sc
);

208 
	}
}

210 
boﬁ
 
	$©h_¥ï¨e_ª£t
(
©h_so·c
 *
sc
)

212 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

213 
boﬁ
 
ªt
 = 
åue
;

215 
	`õì80211_°›_queues
(
sc
->
hw
);

216 
	`©h_°›_™i
(
sc
);

217 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

219 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

220 
ªt
 &
	`©h_°›ªcv
(
sc
);

221 
ªt
 &
	`©h_døö_Æl_txq
(
sc
);

223 
ªt
 &
	`©h_døö_Æl_txq
(
sc
);

224 
ªt
 &
	`©h_°›ªcv
(
sc
);

227  
ªt
;

228 
	}
}

230 
boﬁ
 
	$©h_com∂ëe_ª£t
(
©h_so·c
 *
sc
, 
boﬁ
 
°¨t
)

232 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

233 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

234 
Êags
;

236 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, sc->
cur_ch™
);

237 
	`©h_°¨åecv
(
sc
);

238 
	`©h9k_cmn_upd©e_txpow
(
ah
, 
sc
->
cur_ch™
->
cur_txpowî
,

239 
sc
->
cur_ch™
->
txpowî
,

240 &
sc
->
cur_ch™
->
cur_txpowî
);

241 
	`˛ór_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
);

243 i‡(!
sc
->
cur_ch™
->
offch™√l
 && 
°¨t
) {

245 i‡(
sc
->
cur_ch™
->
tsf_vÆ
) {

246 
u32
 
off£t
;

248 
off£t
 = 
	`©h9k_hw_gë_tsf_off£t
(&
sc
->
cur_ch™
->
tsf_ts
,

249 
NULL
);

250 
	`©h9k_hw_£âsf64
(
ah
, 
sc
->
cur_ch™
->
tsf_vÆ
 + 
off£t
);

254 i‡(!
	`ã°_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
))

255 
w‹k
;

257 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_STATION
 &&

258 
	`ã°_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
)) {

259 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

260 
sc
->
ps_Êags
 |
PS_BEACON_SYNC
 | 
PS_WAIT_FOR_BEACON
;

261 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

263 
	`©h9k_£t_bóc⁄
(
sc
);

265 
w‹k
:

266 
	`©h_ª°¨t_w‹k
(
sc
);

267 
	`©h_txq_scheduÀ_Æl
(
sc
);

270 
sc
->
gâ_˙t
 = 0;

272 
	`©h9k_hw_£t_öãºu±s
(
ah
);

273 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

274 
	`õì80211_wake_queues
(
sc
->
hw
);

275 
	`©h9k_p2p_ps_timî
(
sc
);

277  
åue
;

278 
	}
}

280 
	$©h_ª£t_öã∫Æ
(
©h_so·c
 *
sc
, 
©h9k_ch™√l
 *
hch™
)

282 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

283 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

284 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = 
NULL
;

285 
boﬁ
 
Á°cc
 = 
åue
;

286 
r
;

288 
	`__©h_ˇn˚l_w‹k
(
sc
);

290 
	`dißbÀ_úq
(
sc
->
úq
);

291 
	`èskÀt_dißbÀ
(&
sc
->
öå_tq
);

292 
	`èskÀt_dißbÀ
(&
sc
->
bc⁄_èskÀt
);

293 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

295 i‡(!
sc
->
cur_ch™
->
offch™√l
) {

296 
Á°cc
 = 
Ál£
;

297 
ˇld©a
 = &
sc
->
cur_ch™
->caldata;

300 i‡(!
hch™
) {

301 
Á°cc
 = 
Ál£
;

302 
hch™
 = 
ah
->
curch™
;

305 i‡(!
	`©h_¥ï¨e_ª£t
(
sc
))

306 
Á°cc
 = 
Ál£
;

308 i‡(
	`©h9k_is_ch™˘x_íabÀd
())

309 
Á°cc
 = 
Ál£
;

311 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

312 
sc
->
cur_ch™def
 = sc->
cur_ch™
->
ch™def
;

313 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

315 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "ResetÅo %u MHz, HT40: %d fastcc: %d\n",

316 
hch™
->
ch™√l
, 
	`IS_CHAN_HT40
(hch™), 
Á°cc
);

318 
r
 = 
	`©h9k_hw_ª£t
(
ah
, 
hch™
, 
ˇld©a
, 
Á°cc
);

319 i‡(
r
) {

320 
	`©h_îr
(
comm⁄
,

321 "U«bÀÅÿª£àch™√l,Ñe£à°©u†%d\n", 
r
);

323 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

324 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_BB_HANG
);

326 
out
;

329 i‡(
	`©h9k_hw_mci_is_íabÀd
(
sc
->
sc_ah
) &&

330 
sc
->
cur_ch™
->
offch™√l
)

331 
	`©h9k_mci_£t_txpowî
(
sc
, 
åue
, 
Ál£
);

333 i‡(!
	`©h_com∂ëe_ª£t
(
sc
, 
åue
))

334 
r
 = -
EIO
;

336 
out
:

337 
	`íabÀ_úq
(
sc
->
úq
);

338 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

339 
	`èskÀt_íabÀ
(&
sc
->
bc⁄_èskÀt
);

340 
	`èskÀt_íabÀ
(&
sc
->
öå_tq
);

342  
r
;

343 
	}
}

345 
	$©h_node_©èch
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
,

346 
õì80211_vif
 *
vif
)

348 
©h_node
 *
™
;

349 
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

351 
™
->
sc
 = sc;

352 
™
->
°a
 = sta;

353 
™
->
vif
 = vif;

354 
	`mem£t
(&
™
->
key_idx
, 0, (an->key_idx));

356 
	`©h_tx_node_öô
(
sc
, 
™
);

358 
	`©h_dy«ck_node_öô
(
sc
->
sc_ah
, 
™
);

359 
	}
}

361 
	$©h_node_dëach
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
)

363 
©h_node
 *
™
 = (©h_nodê*)
°a
->
drv_¥iv
;

364 
	`©h_tx_node_˛ónup
(
sc
, 
™
);

366 
	`©h_dy«ck_node_deöô
(
sc
->
sc_ah
, 
™
);

367 
	}
}

369 
	$©h9k_èskÀt
(
d©a
)

371 
©h_so·c
 *
sc
 = (©h_so·¯*)
d©a
;

372 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

373 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

374 
©h_ª£t_ty≥
 
ty≥
;

375 
Êags
;

376 
u32
 
°©us
 = 
sc
->
öå°©us
;

377 
u32
 
rxmask
;

379 
	`©h9k_ps_wakeup
(
sc
);

380 
	`•ö_lock
(&
sc
->
sc_pcu_lock
);

382 i‡(
°©us
 & 
ATH9K_INT_FATAL
) {

383 
ty≥
 = 
RESET_TYPE_FATAL_INT
;

384 
	`©h9k_queue_ª£t
(
sc
, 
ty≥
);

390 
	`©omic_öc
(&
ah
->
öå_ªf_˙t
);

391 
	`©h_dbg
(
comm⁄
, 
RESET
, "FATAL: Skipping interrupts\n");

392 
out
;

395 i‡((
ah
->
c⁄fig
.
hw_h™g_checks
 & 
HW_BB_WATCHDOG
) &&

396 (
°©us
 & 
ATH9K_INT_BB_WATCHDOG
)) {

397 
	`•ö_lock
(&
comm⁄
->
cc_lock
);

398 
	`©h_hw_cy˛e_cou¡îs_upd©e
(
comm⁄
);

399 
	`¨9003_hw_bb_w©chdog_dbg_öfo
(
ah
);

400 
	`•ö_u∆ock
(&
comm⁄
->
cc_lock
);

402 i‡(
	`¨9003_hw_bb_w©chdog_check
(
ah
)) {

403 
ty≥
 = 
RESET_TYPE_BB_WATCHDOG
;

404 
	`©h9k_queue_ª£t
(
sc
, 
ty≥
);

410 
	`©omic_öc
(&
ah
->
öå_ªf_˙t
);

411 
	`©h_dbg
(
comm⁄
, 
RESET
,

413 
out
;

417 i‡(
°©us
 & 
ATH9K_INT_GTT
) {

418 
sc
->
gâ_˙t
++;

420 i‡((
sc
->
gâ_˙t
 >
MAX_GTT_CNT
Ë&& !
	`©h9k_hw_check_Æive
(
ah
)) {

421 
ty≥
 = 
RESET_TYPE_TX_GTT
;

422 
	`©h9k_queue_ª£t
(
sc
, 
ty≥
);

423 
	`©omic_öc
(&
ah
->
öå_ªf_˙t
);

424 
	`©h_dbg
(
comm⁄
, 
RESET
,

426 
out
;

430 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

431 i‡((
°©us
 & 
ATH9K_INT_TSFOOR
Ë&& 
sc
->
ps_íabÀd
) {

436 
	`©h_dbg
(
comm⁄
, 
PS
, "TSFOOR - Sync withÇext Beacon\n");

437 
sc
->
ps_Êags
 |
PS_WAIT_FOR_BEACON
 | 
PS_BEACON_SYNC
;

439 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

441 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

442 
rxmask
 = (
ATH9K_INT_RXHP
 | 
ATH9K_INT_RXLP
 | 
ATH9K_INT_RXEOL
 |

443 
ATH9K_INT_RXORN
);

445 
rxmask
 = (
ATH9K_INT_RX
 | 
ATH9K_INT_RXEOL
 | 
ATH9K_INT_RXORN
);

447 i‡(
°©us
 & 
rxmask
) {

449 i‡((
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) &&

450 (
°©us
 & 
ATH9K_INT_RXHP
))

451 
	`©h_rx_èskÀt
(
sc
, 0, 
åue
);

453 
	`©h_rx_èskÀt
(
sc
, 0, 
Ál£
);

456 i‡(
°©us
 & 
ATH9K_INT_TX
) {

457 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

464 
sc
->
gâ_˙t
 = 0;

466 
	`©h_tx_edma_èskÀt
(
sc
);

468 
	`©h_tx_èskÀt
(
sc
);

471 
	`wake_up
(&
sc
->
tx_waô
);

474 i‡(
°©us
 & 
ATH9K_INT_GENTIMER
)

475 
	`©h_gí_timî_i§
(
sc
->
sc_ah
);

477 
	`©h9k_btc€x_h™dÀ_öãºu±
(
sc
, 
°©us
);

480 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

481 
out
:

482 
	`•ö_u∆ock
(&
sc
->
sc_pcu_lock
);

483 
	`©h9k_ps_ª°‹e
(
sc
);

484 
	}
}

486 
úqªtu∫_t
 
	$©h_i§
(
úq
, *
dev
)

488 
	#SCHED_INTR
 ( \

489 
ATH9K_INT_FATAL
 | \

490 
ATH9K_INT_BB_WATCHDOG
 | \

491 
ATH9K_INT_RXORN
 | \

492 
ATH9K_INT_RXEOL
 | \

493 
ATH9K_INT_RX
 | \

494 
ATH9K_INT_RXLP
 | \

495 
ATH9K_INT_RXHP
 | \

496 
ATH9K_INT_TX
 | \

497 
ATH9K_INT_BMISS
 | \

498 
ATH9K_INT_CST
 | \

499 
ATH9K_INT_GTT
 | \

500 
ATH9K_INT_TSFOOR
 | \

501 
ATH9K_INT_GENTIMER
 | \

502 
ATH9K_INT_MCI
)

	)

504 
©h_so·c
 *
sc
 = 
dev
;

505 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

506 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

507 
©h9k_öt
 
°©us
;

508 
u32
 
sync_ˇu£
 = 0;

509 
boﬁ
 
sched
 = 
Ál£
;

516 i‡(!
ah
 || 
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
))

517  
IRQ_NONE
;

520 i‡(!
	`©h9k_hw_öå≥nd
(
ah
))

521  
IRQ_NONE
;

529 
	`©h9k_hw_gëi§
(
ah
, &
°©us
, &
sync_ˇu£
);

530 
	`©h9k_debug_sync_ˇu£
(
sc
, 
sync_ˇu£
);

531 
°©us
 &
ah
->
imask
;

533 i‡(
	`ã°_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
))

534  
IRQ_HANDLED
;

540 i‡(!
°©us
)

541  
IRQ_NONE
;

544 
sc
->
öå°©us
 = 
°©us
;

546 i‡(
°©us
 & 
SCHED_INTR
)

547 
sched
 = 
åue
;

553 i‡(
°©us
 & 
ATH9K_INT_FATAL
)

554 
chù_ª£t
;

556 i‡((
ah
->
c⁄fig
.
hw_h™g_checks
 & 
HW_BB_WATCHDOG
) &&

557 (
°©us
 & 
ATH9K_INT_BB_WATCHDOG
))

558 
chù_ª£t
;

560 i‡(
°©us
 & 
ATH9K_INT_SWBA
)

561 
	`èskÀt_scheduÀ
(&
sc
->
bc⁄_èskÀt
);

563 i‡(
°©us
 & 
ATH9K_INT_TXURN
)

564 
	`©h9k_hw_upd©ëxåigÀvñ
(
ah
, 
åue
);

566 i‡(
°©us
 & 
ATH9K_INT_RXEOL
) {

567 
ah
->
imask
 &~(
ATH9K_INT_RXEOL
 | 
ATH9K_INT_RXORN
);

568 
	`©h9k_hw_£t_öãºu±s
(
ah
);

571 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
))

572 i‡(
°©us
 & 
ATH9K_INT_TIM_TIMER
) {

573 i‡(
	`ATH_DBG_WARN_ON_ONCE
(
sc
->
ps_idÀ
))

574 
chù_ª£t
;

577 
	`©h9k_£çowî
(
sc
, 
ATH9K_PM_AWAKE
);

578 
	`•ö_lock
(&
sc
->
sc_pm_lock
);

579 
	`©h9k_hw_£åxab‹t
(
sc
->
sc_ah
, 0);

580 
sc
->
ps_Êags
 |
PS_WAIT_FOR_BEACON
;

581 
	`•ö_u∆ock
(&
sc
->
sc_pm_lock
);

584 
chù_ª£t
:

586 
	`©h_debug_°©_öãºu±
(
sc
, 
°©us
);

588 i‡(
sched
) {

590 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

591 
	`èskÀt_scheduÀ
(&
sc
->
öå_tq
);

594  
IRQ_HANDLED
;

596 #unde‡
SCHED_INTR


597 
	}
}

603 
	$©h_ª£t
(
©h_so·c
 *
sc
, 
©h9k_ch™√l
 *
hch™
)

605 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

606 
r
;

608 
	`©h9k_hw_kûl_öãºu±s
(
sc
->
sc_ah
);

609 
	`£t_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
);

611 
	`©h9k_ps_wakeup
(
sc
);

612 
r
 = 
	`©h_ª£t_öã∫Æ
(
sc
, 
hch™
);

613 
	`©h9k_ps_ª°‹e
(
sc
);

615  
r
;

616 
	}
}

623 
	$©h9k_queue_ª£t
(
©h_so·c
 *
sc
, 
©h_ª£t_ty≥
 
ty≥
)

625 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

626 #ifde‡
CONFIG_ATH9K_DEBUGFS


627 
	`RESET_STAT_INC
(
sc
, 
ty≥
);

629 
	`©h9k_hw_kûl_öãºu±s
(
sc
->
sc_ah
);

630 
	`£t_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
);

631 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
hw_ª£t_w‹k
);

632 
	}
}

634 
	$©h_ª£t_w‹k
(
w‹k_°ru˘
 *
w‹k
)

636 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
w‹k
, ©h_so·c, 
hw_ª£t_w‹k
);

638 
	`©h9k_ps_wakeup
(
sc
);

639 
	`©h_ª£t_öã∫Æ
(
sc
, 
NULL
);

640 
	`©h9k_ps_ª°‹e
(
sc
);

641 
	}
}

647 
	$©h9k_°¨t
(
õì80211_hw
 *
hw
)

649 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

650 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

651 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

652 
õì80211_ch™√l
 *
curch™
 = 
sc
->
cur_ch™
->
ch™def
.
ch™
;

653 
©h_ch™˘x
 *
˘x
 = 
sc
->
cur_ch™
;

654 
©h9k_ch™√l
 *
öô_ch™√l
;

655 
r
;

657 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

659 
curch™
->
˚¡î_‰eq
);

661 
	`©h9k_ps_wakeup
(
sc
);

662 
	`muãx_lock
(&
sc
->
muãx
);

664 
öô_ch™√l
 = 
	`©h9k_cmn_gë_ch™√l
(
hw
, 
ah
, &
˘x
->
ch™def
);

665 
sc
->
cur_ch™def
 = 
hw
->
c⁄f
.
ch™def
;

668 
	`©h9k_hw_c⁄figpcùowîßve
(
ah
, 
Ál£
);

677 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

679 
	`©omic_£t
(&
ah
->
öå_ªf_˙t
, -1);

681 
r
 = 
	`©h9k_hw_ª£t
(
ah
, 
öô_ch™√l
,áh->
ˇld©a
, 
Ál£
);

682 i‡(
r
) {

683 
	`©h_îr
(
comm⁄
,

685 
r
, 
curch™
->
˚¡î_‰eq
);

686 
ah
->
ª£t_powî_⁄
 = 
Ál£
;

690 
ah
->
imask
 = 
ATH9K_INT_TX
 | 
ATH9K_INT_RXEOL
 |

691 
ATH9K_INT_RXORN
 | 
ATH9K_INT_FATAL
 |

692 
ATH9K_INT_GLOBAL
;

694 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

695 
ah
->
imask
 |
ATH9K_INT_RXHP
 |

696 
ATH9K_INT_RXLP
;

698 
ah
->
imask
 |
ATH9K_INT_RX
;

700 i‡(
ah
->
c⁄fig
.
hw_h™g_checks
 & 
HW_BB_WATCHDOG
)

701 
ah
->
imask
 |
ATH9K_INT_BB_WATCHDOG
;

707 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

708 
ah
->
imask
 |
ATH9K_INT_GTT
;

710 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_HT
)

711 
ah
->
imask
 |
ATH9K_INT_CST
;

713 
	`©h_mci_íabÀ
(
sc
);

715 
	`˛ór_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
);

716 
sc
->
sc_ah
->
is_m⁄ô‹ög
 = 
Ál£
;

718 i‡(!
	`©h_com∂ëe_ª£t
(
sc
, 
Ál£
))

719 
ah
->
ª£t_powî_⁄
 = 
Ál£
;

721 i‡(
ah
->
Àd_pö
 >= 0) {

722 
	`©h9k_hw_cfg_ouçut
(
ah
,áh->
Àd_pö
,

723 
AR_GPIO_OUTPUT_MUX_AS_OUTPUT
);

724 
	`©h9k_hw_£t_gpio
(
ah
,áh->
Àd_pö
,

725 (
ah
->
c⁄fig
.
Àd_a˘ive_high
) ? 1 : 0);

732 
	`©h9k_cmn_öô_¸y±o
(
sc
->
sc_ah
);

734 
	`©h9k_hw_ª£t_tsf
(
ah
);

736 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

738 
	`muãx_u∆ock
(&
sc
->
muãx
);

740 
	`©h9k_ps_ª°‹e
(
sc
);

743 
	}
}

745 
	$©h9k_tx
(
õì80211_hw
 *
hw
,

746 
õì80211_tx_c⁄åﬁ
 *
c⁄åﬁ
,

747 
sk_buff
 *
skb
)

749 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

750 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

751 
©h_tx_c⁄åﬁ
 
tx˘l
;

752 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*Ë
skb
->
d©a
;

753 
Êags
;

755 i‡(
sc
->
ps_íabÀd
) {

760 i‡(
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
) &&

761 !
	`õì80211_is_nuŒfunc
(
hdr
->
‰ame_c⁄åﬁ
) &&

762 !
	`õì80211_has_pm
(
hdr
->
‰ame_c⁄åﬁ
)) {

763 
	`©h_dbg
(
comm⁄
, 
PS
,

765 
hdr
->
‰ame_c⁄åﬁ
 |
	`˝u_to_À16
(
IEEE80211_FCTL_PM
);

769 i‡(
	`u∆ikñy
(
sc
->
sc_ah
->
powî_mode
 =
ATH9K_PM_NETWORK_SLEEP
)) {

775 
	`©h9k_ps_wakeup
(
sc
);

776 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

777 i‡(!(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
))

778 
	`©h9k_hw_£åxab‹t
(
sc
->
sc_ah
, 0);

779 i‡(
	`õì80211_is_p•ﬁl
(
hdr
->
‰ame_c⁄åﬁ
)) {

780 
	`©h_dbg
(
comm⁄
, 
PS
,

782 
sc
->
ps_Êags
 |
PS_WAIT_FOR_PSPOLL_DATA
;

784 
	`©h_dbg
(
comm⁄
, 
PS
, "Wake upÅo complete TX\n");

785 
sc
->
ps_Êags
 |
PS_WAIT_FOR_TX_ACK
;

792 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

793 
	`©h9k_ps_ª°‹e
(
sc
);

800 i‡(
	`u∆ikñy
(
sc
->
sc_ah
->
powî_mode
 =
ATH9K_PM_FULL_SLEEP
)) {

801 
	`©h_îr
(
comm⁄
, "TX while HW is in FULL_SLEEP mode\n");

802 
exô
;

805 
	`mem£t
(&
tx˘l
, 0, (
©h_tx_c⁄åﬁ
));

806 
tx˘l
.
txq
 = 
sc
->
tx
.
txq_m≠
[
	`skb_gë_queue_m≠pög
(
skb
)];

807 
tx˘l
.
°a
 = 
c⁄åﬁ
->sta;

809 
	`©h_dbg
(
comm⁄
, 
XMIT
, "å™smôtögÖackë, skb: %p\n", 
skb
);

811 i‡(
	`©h_tx_°¨t
(
hw
, 
skb
, &
tx˘l
) != 0) {

812 
	`©h_dbg
(
comm⁄
, 
XMIT
, "TX failed\n");

813 
	`TX_STAT_INC
(
tx˘l
.
txq
->
axq_qnum
, 
txÁûed
);

814 
exô
;

818 
exô
:

819 
	`õì80211_‰ì_txskb
(
hw
, 
skb
);

820 
	}
}

822 
	$©h9k_°›
(
õì80211_hw
 *
hw
)

824 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

825 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

826 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

827 
boﬁ
 
¥ev_idÀ
;

829 
	`©h9k_deöô_ch™√l_c⁄ãxt
(
sc
);

831 
	`muãx_lock
(&
sc
->
muãx
);

833 
	`©h_ˇn˚l_w‹k
(
sc
);

835 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
)) {

836 
	`©h_dbg
(
comm⁄
, 
ANY
, "DeviceÇotÖresent\n");

837 
	`muãx_u∆ock
(&
sc
->
muãx
);

842 
	`©h9k_ps_wakeup
(
sc
);

844 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

847 
ah
->
imask
 &~
ATH9K_INT_GLOBAL
;

851 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

853 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

857 
	`synchr⁄ize_úq
(
sc
->
úq
);

858 
	`èskÀt_kûl
(&
sc
->
öå_tq
);

859 
	`èskÀt_kûl
(&
sc
->
bc⁄_èskÀt
);

861 
¥ev_idÀ
 = 
sc
->
ps_idÀ
;

862 
sc
->
ps_idÀ
 = 
åue
;

864 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

866 i‡(
ah
->
Àd_pö
 >= 0) {

867 
	`©h9k_hw_£t_gpio
(
ah
,áh->
Àd_pö
,

868 (
ah
->
c⁄fig
.
Àd_a˘ive_high
) ? 0 : 1);

869 
	`©h9k_hw_cfg_gpio_öput
(
ah
,áh->
Àd_pö
);

872 
	`©h_¥ï¨e_ª£t
(
sc
);

874 i‡(
sc
->
rx
.
‰ag
) {

875 
	`dev_k‰ì_skb_™y
(
sc
->
rx
.
‰ag
);

876 
sc
->
rx
.
‰ag
 = 
NULL
;

879 i‡(!
ah
->
curch™
)

880 
ah
->
curch™
 = 
	`©h9k_cmn_gë_ch™√l
(
hw
,áh,

881 &
sc
->
cur_ch™
->
ch™def
);

883 
	`©h9k_hw_ª£t
(
ah
,áh->
curch™
,áh->
ˇld©a
, 
Ál£
);

885 
	`£t_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
);

887 
	`©h9k_hw_phy_dißbÀ
(
ah
);

889 
	`©h9k_hw_c⁄figpcùowîßve
(
ah
, 
åue
);

891 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

893 
	`©h9k_ps_ª°‹e
(
sc
);

895 
sc
->
ps_idÀ
 = 
¥ev_idÀ
;

897 
	`muãx_u∆ock
(&
sc
->
muãx
);

899 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Driver halt\n");

900 
	}
}

902 
boﬁ
 
	$©h9k_u£s_bóc⁄s
(
ty≥
)

904 
ty≥
) {

905 
NL80211_IFTYPE_AP
:

906 
NL80211_IFTYPE_ADHOC
:

907 
NL80211_IFTYPE_MESH_POINT
:

908  
åue
;

910  
Ál£
;

912 
	}
}

914 
	$©h9k_vif_ôî
(
©h9k_vif_ôî_d©a
 *
ôî_d©a
,

915 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

917 
©h_vif
 *
avp
 = (©h_vi‡*)
vif
->
drv_¥iv
;

918 
i
;

920 i‡(
ôî_d©a
->
has_hw_maˇddr
) {

921 
i
 = 0; i < 
ETH_ALEN
; i++)

922 
ôî_d©a
->
mask
[
i
] &=

923 ~(
ôî_d©a
->
hw_maˇddr
[
i
] ^ 
mac
[i]);

925 
	`mem˝y
(
ôî_d©a
->
hw_maˇddr
, 
mac
, 
ETH_ALEN
);

926 
ôî_d©a
->
has_hw_maˇddr
 = 
åue
;

929 i‡(!
vif
->
bss_c⁄f
.
u£_sh‹t_¶Ÿ
)

930 
ôî_d©a
->
¶Ÿtime
 = 
ATH9K_SLOT_TIME_20
;

932 
vif
->
ty≥
) {

933 
NL80211_IFTYPE_AP
:

934 
ôî_d©a
->
«ps
++;

936 
NL80211_IFTYPE_STATION
:

937 
ôî_d©a
->
n°©i⁄s
++;

938 i‡(
avp
->
assoc
 && !
ôî_d©a
->
¥im¨y_°a
)

939 
ôî_d©a
->
¥im¨y_°a
 = 
vif
;

941 
NL80211_IFTYPE_OCB
:

942 
ôî_d©a
->
nocbs
++;

944 
NL80211_IFTYPE_ADHOC
:

945 
ôî_d©a
->
«dhocs
++;

946 i‡(
vif
->
bss_c⁄f
.
íabÀ_bóc⁄
)

947 
ôî_d©a
->
bóc⁄s
 = 
åue
;

949 
NL80211_IFTYPE_MESH_POINT
:

950 
ôî_d©a
->
nmeshes
++;

951 i‡(
vif
->
bss_c⁄f
.
íabÀ_bóc⁄
)

952 
ôî_d©a
->
bóc⁄s
 = 
åue
;

954 
NL80211_IFTYPE_WDS
:

955 
ôî_d©a
->
nwds
++;

960 
	}
}

962 
	$©h9k_upd©e_bssid_mask
(
©h_so·c
 *
sc
,

963 
©h_ch™˘x
 *
˘x
,

964 
©h9k_vif_ôî_d©a
 *
ôî_d©a
)

966 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

967 
©h_vif
 *
avp
;

968 
i
;

970 i‡(!
	`©h9k_is_ch™˘x_íabÀd
())

973 
	`li°_f‹_óch_íåy
(
avp
, &
˘x
->
vifs
, 
li°
) {

974 i‡(
˘x
->
nvifs_assig√d
 != 1)

977 i‡(!
avp
->
vif
->
p2p
 || !
ôî_d©a
->
has_hw_maˇddr
)

980 
	`ëhî_addr_c›y
(
comm⁄
->
curbssid
, 
avp
->
bssid
);

983 
i
 = 0; i < 
ETH_ALEN
; i++)

984 
ôî_d©a
->
mask
[
i
] &=

985 ~(
ôî_d©a
->
hw_maˇddr
[
i
] ^

986 
sc
->
hw
->
wùhy
->
≥rm_addr
[
i
]);

988 
	}
}

991 
	$©h9k_ˇlcuœã_ôî_d©a
(
©h_so·c
 *
sc
,

992 
©h_ch™˘x
 *
˘x
,

993 
©h9k_vif_ôî_d©a
 *
ôî_d©a
)

995 
©h_vif
 *
avp
;

1001 
	`mem£t
(
ôî_d©a
, 0, (*iter_data));

1002 
	`ëh_brﬂdˇ°_addr
(
ôî_d©a
->
mask
);

1003 
ôî_d©a
->
¶Ÿtime
 = 
ATH9K_SLOT_TIME_9
;

1005 
	`li°_f‹_óch_íåy
(
avp
, &
˘x
->
vifs
, 
li°
)

1006 
	`©h9k_vif_ôî
(
ôî_d©a
, 
avp
->
vif
->
addr
,ávp->vif);

1008 
	`©h9k_upd©e_bssid_mask
(
sc
, 
˘x
, 
ôî_d©a
);

1009 
	}
}

1011 
	$©h9k_£t_assoc_°©e
(
©h_so·c
 *
sc
,

1012 
õì80211_vif
 *
vif
, 
boﬁ
 
ch™ged
)

1014 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1015 
©h_vif
 *
avp
 = (©h_vi‡*)
vif
->
drv_¥iv
;

1016 
Êags
;

1018 
	`£t_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
);

1020 
	`ëhî_addr_c›y
(
comm⁄
->
curbssid
, 
avp
->
bssid
);

1021 
comm⁄
->
cuøid
 = 
avp
->
aid
;

1022 
	`©h9k_hw_wrôe_associd
(
sc
->
sc_ah
);

1024 i‡(
ch™ged
) {

1025 
comm⁄
->
œ°_rssi
 = 
ATH_RSSI_DUMMY_MARKER
;

1026 
sc
->
sc_ah
->
°©s
.
avgbrssi
 = 
ATH_RSSI_DUMMY_MARKER
;

1028 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

1029 
sc
->
ps_Êags
 |
PS_BEACON_SYNC
 | 
PS_WAIT_FOR_BEACON
;

1030 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

1033 i‡(
	`©h9k_hw_mci_is_íabÀd
(
sc
->
sc_ah
))

1034 
	`©h9k_mci_upd©e_wœn_ch™√ls
(
sc
, 
Ál£
);

1036 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1038 
vif
->
addr
, 
comm⁄
->
curbssid
);

1039 
	}
}

1041 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


1042 
	$©h9k_£t_offch™√l_°©e
(
©h_so·c
 *
sc
)

1044 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1045 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1046 
õì80211_vif
 *
vif
 = 
NULL
;

1048 
	`©h9k_ps_wakeup
(
sc
);

1050 i‡(
sc
->
offch™√l
.
°©e
 < 
ATH_OFFCHANNEL_ROC_START
)

1051 
vif
 = 
sc
->
offch™√l
.
sˇn_vif
;

1053 
vif
 = 
sc
->
offch™√l
.
roc_vif
;

1055 i‡(
	`WARN_ON
(!
vif
))

1056 
exô
;

1058 
	`ëh_zîo_addr
(
comm⁄
->
curbssid
);

1059 
	`ëh_brﬂdˇ°_addr
(
comm⁄
->
bssidmask
);

1060 
	`mem˝y
(
comm⁄
->
maˇddr
, 
vif
->
addr
, 
ETH_ALEN
);

1061 
comm⁄
->
cuøid
 = 0;

1062 
ah
->
›mode
 = 
vif
->
ty≥
;

1063 
ah
->
imask
 &~
ATH9K_INT_SWBA
;

1064 
ah
->
imask
 &~
ATH9K_INT_TSFOOR
;

1065 
ah
->
¶Ÿtime
 = 
ATH9K_SLOT_TIME_9
;

1067 
	`©h_hw_£tbssidmask
(
comm⁄
);

1068 
	`©h9k_hw_£t›mode
(
ah
);

1069 
	`©h9k_hw_wrôe_associd
(
sc
->
sc_ah
);

1070 
	`©h9k_hw_£t_öãºu±s
(
ah
);

1071 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

1073 
exô
:

1074 
	`©h9k_ps_ª°‹e
(
sc
);

1075 
	}
}

1079 
	$©h9k_ˇlcuœã_summ¨y_°©e
(
©h_so·c
 *
sc
,

1080 
©h_ch™˘x
 *
˘x
)

1082 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1083 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1084 
©h9k_vif_ôî_d©a
 
ôî_d©a
;

1085 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
;

1087 
	`©h_ch™˘x_check_a˘ive
(
sc
, 
˘x
);

1089 i‡(
˘x
 !
sc
->
cur_ch™
)

1092 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


1093 i‡(
˘x
 =&
sc
->
offch™√l
.
ch™
)

1094  
	`©h9k_£t_offch™√l_°©e
(
sc
);

1097 
	`©h9k_ps_wakeup
(
sc
);

1098 
	`©h9k_ˇlcuœã_ôî_d©a
(
sc
, 
˘x
, &
ôî_d©a
);

1100 i‡(
ôî_d©a
.
has_hw_maˇddr
)

1101 
	`mem˝y
(
comm⁄
->
maˇddr
, 
ôî_d©a
.
hw_maˇddr
, 
ETH_ALEN
);

1103 
	`mem˝y
(
comm⁄
->
bssidmask
, 
ôî_d©a
.
mask
, 
ETH_ALEN
);

1104 
	`©h_hw_£tbssidmask
(
comm⁄
);

1106 i‡(
ôî_d©a
.
«ps
 > 0) {

1107 
cur_c⁄f
 = &
˘x
->
bóc⁄
;

1108 
	`©h9k_hw_£t_tsÁdju°
(
ah
, 
åue
);

1109 
ah
->
›mode
 = 
NL80211_IFTYPE_AP
;

1110 i‡(
cur_c⁄f
->
íabÀ_bóc⁄
)

1111 
ôî_d©a
.
bóc⁄s
 = 
åue
;

1113 
	`©h9k_hw_£t_tsÁdju°
(
ah
, 
Ál£
);

1115 i‡(
ôî_d©a
.
nmeshes
)

1116 
ah
->
›mode
 = 
NL80211_IFTYPE_MESH_POINT
;

1117 i‡(
ôî_d©a
.
nocbs
)

1118 
ah
->
›mode
 = 
NL80211_IFTYPE_OCB
;

1119 i‡(
ôî_d©a
.
nwds
)

1120 
ah
->
›mode
 = 
NL80211_IFTYPE_AP
;

1121 i‡(
ôî_d©a
.
«dhocs
)

1122 
ah
->
›mode
 = 
NL80211_IFTYPE_ADHOC
;

1124 
ah
->
›mode
 = 
NL80211_IFTYPE_STATION
;

1127 
	`©h9k_hw_£t›mode
(
ah
);

1129 
˘x
->
swôch_a·î_bóc⁄
 = 
Ál£
;

1130 i‡((
ôî_d©a
.
n°©i⁄s
 + iãr_d©a.
«dhocs
 + iãr_d©a.
nmeshes
) > 0)

1131 
ah
->
imask
 |
ATH9K_INT_TSFOOR
;

1133 
ah
->
imask
 &~
ATH9K_INT_TSFOOR
;

1134 i‡(
ôî_d©a
.
«ps
 =1 && iãr_d©a.
bóc⁄s
)

1135 
˘x
->
swôch_a·î_bóc⁄
 = 
åue
;

1138 
ah
->
imask
 &~
ATH9K_INT_SWBA
;

1139 i‡(
ah
->
›mode
 =
NL80211_IFTYPE_STATION
) {

1140 
boﬁ
 
ch™ged
 = (
ôî_d©a
.
¥im¨y_°a
 !
˘x
->primary_sta);

1142 i‡(
ôî_d©a
.
¥im¨y_°a
) {

1143 
ôî_d©a
.
bóc⁄s
 = 
åue
;

1144 
	`©h9k_£t_assoc_°©e
(
sc
, 
ôî_d©a
.
¥im¨y_°a
,

1145 
ch™ged
);

1146 
˘x
->
¥im¨y_°a
 = 
ôî_d©a
.primary_sta;

1148 
˘x
->
¥im¨y_°a
 = 
NULL
;

1149 
	`ëh_zîo_addr
(
comm⁄
->
curbssid
);

1150 
comm⁄
->
cuøid
 = 0;

1151 
	`©h9k_hw_wrôe_associd
(
sc
->
sc_ah
);

1152 i‡(
	`©h9k_hw_mci_is_íabÀd
(
sc
->
sc_ah
))

1153 
	`©h9k_mci_upd©e_wœn_ch™√ls
(
sc
, 
åue
);

1155 } i‡(
ôî_d©a
.
bóc⁄s
) {

1156 
ah
->
imask
 |
ATH9K_INT_SWBA
;

1158 
	`©h9k_hw_£t_öãºu±s
(
ah
);

1160 i‡(
ôî_d©a
.
bóc⁄s
)

1161 
	`£t_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
);

1163 
	`˛ór_bô
(
ATH_OP_BEACONS
, &
comm⁄
->
›_Êags
);

1165 i‡(
ah
->
¶Ÿtime
 !
ôî_d©a
.slottime) {

1166 
ah
->
¶Ÿtime
 = 
ôî_d©a
.slottime;

1167 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

1170 i‡(
ôî_d©a
.
¥im¨y_°a
)

1171 
	`£t_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
);

1173 
	`˛ór_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
);

1175 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1177 
comm⁄
->
maˇddr
, comm⁄->
curbssid
, comm⁄->
bssidmask
);

1179 
	`©h9k_ps_ª°‹e
(
sc
);

1180 
	}
}

1182 
	$©h9k_çc_vif_ôî
(*
d©a
, 
u8
 *
mac
, 
õì80211_vif
 *
vif
)

1184 *
powî
 = (*)
d©a
;

1186 i‡(*
powî
 < 
vif
->
bss_c⁄f
.
txpowî
)

1187 *
powî
 = 
vif
->
bss_c⁄f
.
txpowî
;

1188 
	}
}

1191 
	$©h9k_£t_txpowî
(
©h_so·c
 *
sc
, 
õì80211_vif
 *
vif
)

1193 
powî
;

1194 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1195 
©h_ªguœt‹y
 *
ªg
 = 
	`©h9k_hw_ªguœt‹y
(
ah
);

1197 
	`©h9k_ps_wakeup
(
sc
);

1198 i‡(
ah
->
çc_íabÀd
) {

1199 
powî
 = (
vif
Ë? vif->
bss_c⁄f
.
txpowî
 : -1;

1200 
	`õì80211_ôî©e_a˘ive_öãrÁ˚s_©omic
(

1201 
sc
->
hw
, 
IEEE80211_IFACE_ITER_RESUME_ALL
,

1202 
©h9k_çc_vif_ôî
, &
powî
);

1203 i‡(
powî
 == -1)

1204 
powî
 = 
sc
->
hw
->
c⁄f
.
powî_Àvñ
;

1206 
powî
 = 
sc
->
hw
->
c⁄f
.
powî_Àvñ
;

1208 
sc
->
cur_ch™
->
txpowî
 = 2 * 
powî
;

1209 
	`©h9k_hw_£t_txpowîlimô
(
ah
, 
sc
->
cur_ch™
->
txpowî
, 
Ál£
);

1210 
sc
->
cur_ch™
->
cur_txpowî
 = 
ªg
->
max_powî_Àvñ
;

1211 
	`©h9k_ps_ª°‹e
(
sc
);

1212 
	}
}

1214 
	$©h9k_assign_hw_queues
(
õì80211_hw
 *
hw
,

1215 
õì80211_vif
 *
vif
)

1217 
i
;

1219 i‡(!
	`©h9k_is_ch™˘x_íabÀd
())

1222 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++)

1223 
vif
->
hw_queue
[
i
] = i;

1225 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_AP
 ||

1226 
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
)

1227 
vif
->
ˇb_queue
 = 
hw
->
queues
 - 2;

1229 
vif
->
ˇb_queue
 = 
IEEE80211_INVAL_HW_QUEUE
;

1230 
	}
}

1232 
	$©h9k_add_öãrÁ˚
(
õì80211_hw
 *
hw
,

1233 
õì80211_vif
 *
vif
)

1235 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1236 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1237 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1238 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1239 
©h_node
 *
™
 = &
avp
->
mˇ°_node
;

1241 
	`muãx_lock
(&
sc
->
muãx
);

1243 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
)) {

1244 i‡(
sc
->
cur_ch™
->
nvifs
 >= 1) {

1245 
	`muãx_u∆ock
(&
sc
->
muãx
);

1246  -
EOPNOTSUPP
;

1248 
sc
->
tx99_vif
 = 
vif
;

1251 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Aâachá VIF o‡ty≥: %d\n", 
vif
->
ty≥
);

1252 
sc
->
cur_ch™
->
nvifs
++;

1254 i‡(
	`©h9k_u£s_bóc⁄s
(
vif
->
ty≥
))

1255 
	`©h9k_bóc⁄_assign_¶Ÿ
(
sc
, 
vif
);

1257 
avp
->
vif
 = vif;

1258 i‡(!
	`©h9k_is_ch™˘x_íabÀd
()) {

1259 
avp
->
ch™˘x
 = 
sc
->
cur_ch™
;

1260 
	`li°_add_èû
(&
avp
->
li°
, &avp->
ch™˘x
->
vifs
);

1263 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
avp
->
ch™˘x
);

1265 
	`©h9k_assign_hw_queues
(
hw
, 
vif
);

1267 
	`©h9k_£t_txpowî
(
sc
, 
vif
);

1269 
™
->
sc
 = sc;

1270 
™
->
°a
 = 
NULL
;

1271 
™
->
vif
 = vif;

1272 
™
->
no_ps_fûãr
 = 
åue
;

1273 
	`©h_tx_node_öô
(
sc
, 
™
);

1275 
	`muãx_u∆ock
(&
sc
->
muãx
);

1277 
	}
}

1279 
	$©h9k_ch™ge_öãrÁ˚
(
õì80211_hw
 *
hw
,

1280 
õì80211_vif
 *
vif
,

1281 
∆80211_i·y≥
 
√w_ty≥
,

1282 
boﬁ
 
p2p
)

1284 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1285 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1286 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1288 
	`muãx_lock
(&
sc
->
muãx
);

1290 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
)) {

1291 
	`muãx_u∆ock
(&
sc
->
muãx
);

1292  -
EOPNOTSUPP
;

1295 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Change Interface\n");

1297 i‡(
	`©h9k_u£s_bóc⁄s
(
vif
->
ty≥
))

1298 
	`©h9k_bóc⁄_ªmove_¶Ÿ
(
sc
, 
vif
);

1300 
vif
->
ty≥
 = 
√w_ty≥
;

1301 
vif
->
p2p
 =Ö2p;

1303 i‡(
	`©h9k_u£s_bóc⁄s
(
vif
->
ty≥
))

1304 
	`©h9k_bóc⁄_assign_¶Ÿ
(
sc
, 
vif
);

1306 
	`©h9k_assign_hw_queues
(
hw
, 
vif
);

1307 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
avp
->
ch™˘x
);

1309 
	`©h9k_£t_txpowî
(
sc
, 
vif
);

1311 
	`muãx_u∆ock
(&
sc
->
muãx
);

1313 
	}
}

1315 
	$©h9k_ªmove_öãrÁ˚
(
õì80211_hw
 *
hw
,

1316 
õì80211_vif
 *
vif
)

1318 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1319 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1320 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1322 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Detach Interface\n");

1324 
	`muãx_lock
(&
sc
->
muãx
);

1326 
	`©h9k_p2p_ªmove_vif
(
sc
, 
vif
);

1328 
sc
->
cur_ch™
->
nvifs
--;

1329 
sc
->
tx99_vif
 = 
NULL
;

1330 i‡(!
	`©h9k_is_ch™˘x_íabÀd
())

1331 
	`li°_dñ
(&
avp
->
li°
);

1333 i‡(
	`©h9k_u£s_bóc⁄s
(
vif
->
ty≥
))

1334 
	`©h9k_bóc⁄_ªmove_¶Ÿ
(
sc
, 
vif
);

1336 
	`©h_tx_node_˛ónup
(
sc
, &
avp
->
mˇ°_node
);

1338 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
avp
->
ch™˘x
);

1340 
	`©h9k_£t_txpowî
(
sc
, 
NULL
);

1342 
	`muãx_u∆ock
(&
sc
->
muãx
);

1343 
	}
}

1345 
	$©h9k_íabÀ_ps
(
©h_so·c
 *
sc
)

1347 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1348 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1350 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

1353 
sc
->
ps_íabÀd
 = 
åue
;

1354 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
)) {

1355 i‡((
ah
->
imask
 & 
ATH9K_INT_TIM_TIMER
) == 0) {

1356 
ah
->
imask
 |
ATH9K_INT_TIM_TIMER
;

1357 
	`©h9k_hw_£t_öãºu±s
(
ah
);

1359 
	`©h9k_hw_£åxab‹t
(
ah
, 1);

1361 
	`©h_dbg
(
comm⁄
, 
PS
, "PowerSaveÉnabled\n");

1362 
	}
}

1364 
	$©h9k_dißbÀ_ps
(
©h_so·c
 *
sc
)

1366 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1367 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1369 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

1372 
sc
->
ps_íabÀd
 = 
Ál£
;

1373 
	`©h9k_hw_£çowî
(
ah
, 
ATH9K_PM_AWAKE
);

1374 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
)) {

1375 
	`©h9k_hw_£åxab‹t
(
ah
, 0);

1376 
sc
->
ps_Êags
 &~(
PS_WAIT_FOR_BEACON
 |

1377 
PS_WAIT_FOR_CAB
 |

1378 
PS_WAIT_FOR_PSPOLL_DATA
 |

1379 
PS_WAIT_FOR_TX_ACK
);

1380 i‡(
ah
->
imask
 & 
ATH9K_INT_TIM_TIMER
) {

1381 
ah
->
imask
 &~
ATH9K_INT_TIM_TIMER
;

1382 
	`©h9k_hw_£t_öãºu±s
(
ah
);

1385 
	`©h_dbg
(
comm⁄
, 
PS
, "PowerSave disabled\n");

1386 
	}
}

1388 
	$©h9k_c⁄fig
(
õì80211_hw
 *
hw
, 
u32
 
ch™ged
)

1390 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1391 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1392 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1393 
õì80211_c⁄f
 *
c⁄f
 = &
hw
->conf;

1394 
©h_ch™˘x
 *
˘x
 = 
sc
->
cur_ch™
;

1396 
	`©h9k_ps_wakeup
(
sc
);

1397 
	`muãx_lock
(&
sc
->
muãx
);

1399 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_IDLE
) {

1400 
sc
->
ps_idÀ
 = !!(
c⁄f
->
Êags
 & 
IEEE80211_CONF_IDLE
);

1401 i‡(
sc
->
ps_idÀ
) {

1402 
	`©h_ˇn˚l_w‹k
(
sc
);

1403 
	`©h9k_°›_btc€x
(
sc
);

1405 
	`©h9k_°¨t_btc€x
(
sc
);

1410 
	`©h_ch™˘x_£t_ch™√l
(
sc
, 
˘x
, &˘x->
ch™def
);

1420 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_PS
) {

1421 
Êags
;

1422 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

1423 i‡(
c⁄f
->
Êags
 & 
IEEE80211_CONF_PS
)

1424 
	`©h9k_íabÀ_ps
(
sc
);

1426 
	`©h9k_dißbÀ_ps
(
sc
);

1427 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

1430 i‡(
ch™ged
 & 
IEEE80211_CONF_CHANGE_MONITOR
) {

1431 i‡(
c⁄f
->
Êags
 & 
IEEE80211_CONF_MONITOR
) {

1432 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Monitor mode isÉnabled\n");

1433 
sc
->
sc_ah
->
is_m⁄ô‹ög
 = 
åue
;

1435 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Monitor mode is disabled\n");

1436 
sc
->
sc_ah
->
is_m⁄ô‹ög
 = 
Ál£
;

1440 i‡(!
	`©h9k_is_ch™˘x_íabÀd
(Ë&& (
ch™ged
 & 
IEEE80211_CONF_CHANGE_CHANNEL
)) {

1441 
˘x
->
offch™√l
 = !!(
c⁄f
->
Êags
 & 
IEEE80211_CONF_OFFCHANNEL
);

1442 
	`©h_ch™˘x_£t_ch™√l
(
sc
, 
˘x
, &
hw
->
c⁄f
.
ch™def
);

1445 
	`muãx_u∆ock
(&
sc
->
muãx
);

1446 
	`©h9k_ps_ª°‹e
(
sc
);

1449 
	}
}

1451 
	#SUPPORTED_FILTERS
 \

1452 (
FIF_ALLMULTI
 | \

1453 
FIF_CONTROL
 | \

1454 
FIF_PSPOLL
 | \

1455 
FIF_OTHER_BSS
 | \

1456 
FIF_BCN_PRBRESP_PROMISC
 | \

1457 
FIF_PROBE_REQ
 | \

1458 
FIF_FCSFAIL
)

	)

1461 
	$©h9k_c⁄figuª_fûãr
(
õì80211_hw
 *
hw
,

1462 
ch™ged_Êags
,

1463 *
tŸÆ_Êags
,

1464 
u64
 
mu…iˇ°
)

1466 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1467 
©h_ch™˘x
 *
˘x
;

1468 
u32
 
rfût
;

1470 
ch™ged_Êags
 &
SUPPORTED_FILTERS
;

1471 *
tŸÆ_Êags
 &
SUPPORTED_FILTERS
;

1473 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

1474 
	`©h_f‹_óch_ch™˘x
(
sc
, 
˘x
)

1475 
˘x
->
rxfûãr
 = *
tŸÆ_Êags
;

1476 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


1477 
sc
->
offch™√l
.
ch™
.
rxfûãr
 = *
tŸÆ_Êags
;

1479 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1481 
	`©h9k_ps_wakeup
(
sc
);

1482 
rfût
 = 
	`©h_ˇl¸xfûãr
(
sc
);

1483 
	`©h9k_hw_£åxfûãr
(
sc
->
sc_ah
, 
rfût
);

1484 
	`©h9k_ps_ª°‹e
(
sc
);

1486 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
CONFIG
, "Set HW RX filter: 0x%x\n",

1487 
rfût
);

1488 
	}
}

1490 
	$©h9k_°a_add
(
õì80211_hw
 *
hw
,

1491 
õì80211_vif
 *
vif
,

1492 
õì80211_°a
 *
°a
)

1494 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1495 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1496 
©h_node
 *
™
 = (©h_nodê*Ë
°a
->
drv_¥iv
;

1497 
õì80211_key_c⁄f
 
ps_key
 = { };

1498 
key
;

1500 
	`©h_node_©èch
(
sc
, 
°a
, 
vif
);

1502 i‡(
vif
->
ty≥
 !
NL80211_IFTYPE_AP
 &&

1503 
vif
->
ty≥
 !
NL80211_IFTYPE_AP_VLAN
)

1506 
key
 = 
	`©h_key_c⁄fig
(
comm⁄
, 
vif
, 
°a
, &
ps_key
);

1507 i‡(
key
 > 0) {

1508 
™
->
ps_key
 = 
key
;

1509 
™
->
key_idx
[0] = 
key
;

1513 
	}
}

1515 
	$©h9k_dñ_ps_key
(
©h_so·c
 *
sc
,

1516 
õì80211_vif
 *
vif
,

1517 
õì80211_°a
 *
°a
)

1519 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1520 
©h_node
 *
™
 = (©h_nodê*Ë
°a
->
drv_¥iv
;

1521 
õì80211_key_c⁄f
 
ps_key
 = { .
hw_key_idx
 = 
™
->ps_key };

1523 i‡(!
™
->
ps_key
)

1526 
	`©h_key_dñëe
(
comm⁄
, &
ps_key
);

1527 
™
->
ps_key
 = 0;

1528 
™
->
key_idx
[0] = 0;

1529 
	}
}

1531 
	$©h9k_°a_ªmove
(
õì80211_hw
 *
hw
,

1532 
õì80211_vif
 *
vif
,

1533 
õì80211_°a
 *
°a
)

1535 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1537 
	`©h9k_dñ_ps_key
(
sc
, 
vif
, 
°a
);

1538 
	`©h_node_dëach
(
sc
, 
°a
);

1541 
	}
}

1543 
	$©h9k_°a_°©e
(
õì80211_hw
 *
hw
,

1544 
õì80211_vif
 *
vif
,

1545 
õì80211_°a
 *
°a
,

1546 
õì80211_°a_°©e
 
ﬁd_°©e
,

1547 
õì80211_°a_°©e
 
√w_°©e
)

1549 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1550 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1551 
ªt
 = 0;

1553 i‡(
ﬁd_°©e
 =
IEEE80211_STA_NOTEXIST
 &&

1554 
√w_°©e
 =
IEEE80211_STA_NONE
) {

1555 
ªt
 = 
	`©h9k_°a_add
(
hw
, 
vif
, 
°a
);

1556 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1557 "Add sèti⁄: %pM\n", 
°a
->
addr
);

1558 } i‡(
ﬁd_°©e
 =
IEEE80211_STA_NONE
 &&

1559 
√w_°©e
 =
IEEE80211_STA_NOTEXIST
) {

1560 
ªt
 = 
	`©h9k_°a_ªmove
(
hw
, 
vif
, 
°a
);

1561 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1562 "Removê°©i⁄: %pM\n", 
°a
->
addr
);

1565 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

1566 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_STATION
) {

1567 i‡(
ﬁd_°©e
 =
IEEE80211_STA_ASSOC
 &&

1568 
√w_°©e
 =
IEEE80211_STA_AUTHORIZED
)

1569 
	`©h_ch™˘x_evít
(
sc
, 
vif
,

1570 
ATH_CHANCTX_EVENT_AUTHORIZED
);

1574  
ªt
;

1575 
	}
}

1577 
	$©h9k_°a_£t_tx_fûãr
(
©h_hw
 *
ah
,

1578 
©h_node
 *
™
,

1579 
boﬁ
 
£t
)

1581 
i
;

1583 
i
 = 0; i < 
	`ARRAY_SIZE
(
™
->
key_idx
); i++) {

1584 i‡(!
™
->
key_idx
[
i
])

1586 
	`©h9k_hw_£t_tx_fûãr
(
ah
, 
™
->
key_idx
[
i
], 
£t
);

1588 
	}
}

1590 
	$©h9k_°a_nŸify
(
õì80211_hw
 *
hw
,

1591 
õì80211_vif
 *
vif
,

1592 
°a_nŸify_cmd
 
cmd
,

1593 
õì80211_°a
 *
°a
)

1595 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1596 
©h_node
 *
™
 = (©h_nodê*Ë
°a
->
drv_¥iv
;

1598 
cmd
) {

1599 
STA_NOTIFY_SLEEP
:

1600 
™
->
¶ìpög
 = 
åue
;

1601 
	`©h_tx_aggr_¶ìp
(
°a
, 
sc
, 
™
);

1602 
	`©h9k_°a_£t_tx_fûãr
(
sc
->
sc_ah
, 
™
, 
åue
);

1604 
STA_NOTIFY_AWAKE
:

1605 
	`©h9k_°a_£t_tx_fûãr
(
sc
->
sc_ah
, 
™
, 
Ál£
);

1606 
™
->
¶ìpög
 = 
Ál£
;

1607 
	`©h_tx_aggr_wakeup
(
sc
, 
™
);

1610 
	}
}

1612 
	$©h9k_c⁄f_tx
(
õì80211_hw
 *
hw
,

1613 
õì80211_vif
 *
vif
, 
u16
 
queue
,

1614 c⁄° 
õì80211_tx_queue_∑øms
 *
∑øms
)

1616 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1617 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1618 
©h_txq
 *
txq
;

1619 
©h9k_tx_queue_öfo
 
qi
;

1620 
ªt
 = 0;

1622 i‡(
queue
 >
IEEE80211_NUM_ACS
)

1625 
txq
 = 
sc
->
tx
.
txq_m≠
[
queue
];

1627 
	`©h9k_ps_wakeup
(
sc
);

1628 
	`muãx_lock
(&
sc
->
muãx
);

1630 
	`mem£t
(&
qi
, 0, (
©h9k_tx_queue_öfo
));

1632 
qi
.
tqi_aifs
 = 
∑øms
->
aifs
;

1633 
qi
.
tqi_cwmö
 = 
∑øms
->
cw_mö
;

1634 
qi
.
tqi_cwmax
 = 
∑øms
->
cw_max
;

1635 
qi
.
tqi_bur°Time
 = 
∑øms
->
tx›
 * 32;

1637 
	`©h_dbg
(
comm⁄
, 
CONFIG
,

1639 
queue
, 
txq
->
axq_qnum
, 
∑øms
->
aifs
,Ö¨ams->
cw_mö
,

1640 
∑øms
->
cw_max
,Ö¨ams->
tx›
);

1642 
	`©h_upd©e_max_aggr_‰amñí
(
sc
, 
queue
, 
qi
.
tqi_bur°Time
);

1643 
ªt
 = 
	`©h_txq_upd©e
(
sc
, 
txq
->
axq_qnum
, &
qi
);

1644 i‡(
ªt
)

1645 
	`©h_îr
(
comm⁄
, "TXQ Update failed\n");

1647 
	`muãx_u∆ock
(&
sc
->
muãx
);

1648 
	`©h9k_ps_ª°‹e
(
sc
);

1650  
ªt
;

1651 
	}
}

1653 
	$©h9k_£t_key
(
õì80211_hw
 *
hw
,

1654 
£t_key_cmd
 
cmd
,

1655 
õì80211_vif
 *
vif
,

1656 
õì80211_°a
 *
°a
,

1657 
õì80211_key_c⁄f
 *
key
)

1659 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1660 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1661 
©h_node
 *
™
 = 
NULL
;

1662 
ªt
 = 0, 
i
;

1664 i‡(
©h9k_mod∑øm_nohw¸y±
)

1665  -
ENOSPC
;

1667 i‡((
vif
->
ty≥
 =
NL80211_IFTYPE_ADHOC
 ||

1668 
vif
->
ty≥
 =
NL80211_IFTYPE_MESH_POINT
) &&

1669 (
key
->
cùhî
 =
WLAN_CIPHER_SUITE_TKIP
 ||

1670 
key
->
cùhî
 =
WLAN_CIPHER_SUITE_CCMP
) &&

1671 !(
key
->
Êags
 & 
IEEE80211_KEY_FLAG_PAIRWISE
)) {

1679  -
EOPNOTSUPP
;

1682 
	`muãx_lock
(&
sc
->
muãx
);

1683 
	`©h9k_ps_wakeup
(
sc
);

1684 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "Së HW Key %d\n", 
cmd
);

1685 i‡(
°a
)

1686 
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

1688 
cmd
) {

1689 
SET_KEY
:

1690 i‡(
°a
)

1691 
	`©h9k_dñ_ps_key
(
sc
, 
vif
, 
°a
);

1693 
key
->
hw_key_idx
 = 0;

1694 
ªt
 = 
	`©h_key_c⁄fig
(
comm⁄
, 
vif
, 
°a
, 
key
);

1695 i‡(
ªt
 >= 0) {

1696 
key
->
hw_key_idx
 = 
ªt
;

1698 
key
->
Êags
 |
IEEE80211_KEY_FLAG_GENERATE_IV
;

1699 i‡(
key
->
cùhî
 =
WLAN_CIPHER_SUITE_TKIP
)

1700 
key
->
Êags
 |
IEEE80211_KEY_FLAG_GENERATE_MMIC
;

1701 i‡(
sc
->
sc_ah
->
sw_mgmt_¸y±o_tx
 &&

1702 
key
->
cùhî
 =
WLAN_CIPHER_SUITE_CCMP
)

1703 
key
->
Êags
 |
IEEE80211_KEY_FLAG_SW_MGMT_TX
;

1704 
ªt
 = 0;

1706 i‡(
™
 && 
key
->
hw_key_idx
) {

1707 
i
 = 0; i < 
	`ARRAY_SIZE
(
™
->
key_idx
); i++) {

1708 i‡(
™
->
key_idx
[
i
])

1710 
™
->
key_idx
[
i
] = 
key
->
hw_key_idx
;

1713 
	`WARN_ON
(
i
 =
	`ARRAY_SIZE
(
™
->
key_idx
));

1716 
DISABLE_KEY
:

1717 
	`©h_key_dñëe
(
comm⁄
, 
key
);

1718 i‡(
™
) {

1719 
i
 = 0; i < 
	`ARRAY_SIZE
(
™
->
key_idx
); i++) {

1720 i‡(
™
->
key_idx
[
i
] !
key
->
hw_key_idx
)

1722 
™
->
key_idx
[
i
] = 0;

1726 
key
->
hw_key_idx
 = 0;

1729 
ªt
 = -
EINVAL
;

1732 
	`©h9k_ps_ª°‹e
(
sc
);

1733 
	`muãx_u∆ock
(&
sc
->
muãx
);

1735  
ªt
;

1736 
	}
}

1738 
	$©h9k_bss_öfo_ch™ged
(
õì80211_hw
 *
hw
,

1739 
õì80211_vif
 *
vif
,

1740 
õì80211_bss_c⁄f
 *
bss_c⁄f
,

1741 
u32
 
ch™ged
)

1743 
	#CHECK_ANI
 \

1744 (
BSS_CHANGED_ASSOC
 | \

1745 
BSS_CHANGED_IBSS
 | \

1746 
BSS_CHANGED_BEACON_ENABLED
)

	)

1748 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1749 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1750 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1751 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

1752 
¶Ÿtime
;

1754 
	`©h9k_ps_wakeup
(
sc
);

1755 
	`muãx_lock
(&
sc
->
muãx
);

1757 i‡(
ch™ged
 & 
BSS_CHANGED_ASSOC
) {

1758 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "BSSID %pM Changed ASSOC %d\n",

1759 
bss_c⁄f
->
bssid
, bss_c⁄f->
assoc
);

1761 
	`mem˝y
(
avp
->
bssid
, 
bss_c⁄f
->bssid, 
ETH_ALEN
);

1762 
avp
->
aid
 = 
bss_c⁄f
->aid;

1763 
avp
->
assoc
 = 
bss_c⁄f
->assoc;

1765 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
avp
->
ch™˘x
);

1768 i‡((
ch™ged
 & 
BSS_CHANGED_IBSS
) ||

1769 (
ch™ged
 & 
BSS_CHANGED_OCB
)) {

1770 
	`mem˝y
(
comm⁄
->
curbssid
, 
bss_c⁄f
->
bssid
, 
ETH_ALEN
);

1771 
comm⁄
->
cuøid
 = 
bss_c⁄f
->
aid
;

1772 
	`©h9k_hw_wrôe_associd
(
sc
->
sc_ah
);

1775 i‡((
ch™ged
 & 
BSS_CHANGED_BEACON_ENABLED
) ||

1776 (
ch™ged
 & 
BSS_CHANGED_BEACON_INT
) ||

1777 (
ch™ged
 & 
BSS_CHANGED_BEACON_INFO
)) {

1778 
	`©h9k_bóc⁄_c⁄fig
(
sc
, 
vif
, 
ch™ged
);

1779 i‡(
ch™ged
 & 
BSS_CHANGED_BEACON_ENABLED
)

1780 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
avp
->
ch™˘x
);

1783 i‡((
avp
->
ch™˘x
 =
sc
->
cur_ch™
) &&

1784 (
ch™ged
 & 
BSS_CHANGED_ERP_SLOT
)) {

1785 i‡(
bss_c⁄f
->
u£_sh‹t_¶Ÿ
)

1786 
¶Ÿtime
 = 9;

1788 
¶Ÿtime
 = 20;

1789 i‡(
vif
->
ty≥
 =
NL80211_IFTYPE_AP
) {

1795 
sc
->
bóc⁄
.
¶Ÿtime
 = slottime;

1796 
sc
->
bóc⁄
.
upd©e¶Ÿ
 = 
UPDATE
;

1798 
ah
->
¶Ÿtime
 = slottime;

1799 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

1803 i‡(
ch™ged
 & 
BSS_CHANGED_P2P_PS
)

1804 
	`©h9k_p2p_bss_öfo_ch™ged
(
sc
, 
vif
);

1806 i‡(
ch™ged
 & 
CHECK_ANI
)

1807 
	`©h_check_™i
(
sc
);

1809 i‡(
ch™ged
 & 
BSS_CHANGED_TXPOWER
) {

1810 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "vif %pMÖower %d dbmÖower_type %d\n",

1811 
vif
->
addr
, 
bss_c⁄f
->
txpowî
, bss_c⁄f->
txpowî_ty≥
);

1812 
	`©h9k_£t_txpowî
(
sc
, 
vif
);

1815 
	`muãx_u∆ock
(&
sc
->
muãx
);

1816 
	`©h9k_ps_ª°‹e
(
sc
);

1818 #unde‡
CHECK_ANI


1819 
	}
}

1821 
u64
 
	$©h9k_gë_tsf
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
)

1823 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1824 
u64
 
tsf
;

1826 
	`muãx_lock
(&
sc
->
muãx
);

1827 
	`©h9k_ps_wakeup
(
sc
);

1828 
tsf
 = 
	`©h9k_hw_gëtsf64
(
sc
->
sc_ah
);

1829 
	`©h9k_ps_ª°‹e
(
sc
);

1830 
	`muãx_u∆ock
(&
sc
->
muãx
);

1832  
tsf
;

1833 
	}
}

1835 
	$©h9k_£t_tsf
(
õì80211_hw
 *
hw
,

1836 
õì80211_vif
 *
vif
,

1837 
u64
 
tsf
)

1839 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1841 
	`muãx_lock
(&
sc
->
muãx
);

1842 
	`©h9k_ps_wakeup
(
sc
);

1843 
	`©h9k_hw_£âsf64
(
sc
->
sc_ah
, 
tsf
);

1844 
	`©h9k_ps_ª°‹e
(
sc
);

1845 
	`muãx_u∆ock
(&
sc
->
muãx
);

1846 
	}
}

1848 
	$©h9k_ª£t_tsf
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
)

1850 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1852 
	`muãx_lock
(&
sc
->
muãx
);

1854 
	`©h9k_ps_wakeup
(
sc
);

1855 
	`©h9k_hw_ª£t_tsf
(
sc
->
sc_ah
);

1856 
	`©h9k_ps_ª°‹e
(
sc
);

1858 
	`muãx_u∆ock
(&
sc
->
muãx
);

1859 
	}
}

1861 
	$©h9k_ampdu_a˘i⁄
(
õì80211_hw
 *
hw
,

1862 
õì80211_vif
 *
vif
,

1863 
õì80211_ampdu_mlme_a˘i⁄
 
a˘i⁄
,

1864 
õì80211_°a
 *
°a
,

1865 
u16
 
tid
, u16 *
s¢
, 
u8
 
buf_size
, 
boﬁ
 
amsdu
)

1867 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1868 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1869 
boﬁ
 
Êush
 = 
Ál£
;

1870 
ªt
 = 0;

1872 
	`muãx_lock
(&
sc
->
muãx
);

1874 
a˘i⁄
) {

1875 
IEEE80211_AMPDU_RX_START
:

1877 
IEEE80211_AMPDU_RX_STOP
:

1879 
IEEE80211_AMPDU_TX_START
:

1880 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

1881 i‡(
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
)) {

1882 
ªt
 = -
EBUSY
;

1886 
	`©h9k_ps_wakeup
(
sc
);

1887 
ªt
 = 
	`©h_tx_aggr_°¨t
(
sc
, 
°a
, 
tid
, 
s¢
);

1888 i‡(!
ªt
)

1889 
	`õì80211_°¨t_tx_ba_cb_úqß„
(
vif
, 
°a
->
addr
, 
tid
);

1890 
	`©h9k_ps_ª°‹e
(
sc
);

1892 
IEEE80211_AMPDU_TX_STOP_FLUSH
:

1893 
IEEE80211_AMPDU_TX_STOP_FLUSH_CONT
:

1894 
Êush
 = 
åue
;

1895 
IEEE80211_AMPDU_TX_STOP_CONT
:

1896 
	`©h9k_ps_wakeup
(
sc
);

1897 
	`©h_tx_aggr_°›
(
sc
, 
°a
, 
tid
);

1898 i‡(!
Êush
)

1899 
	`õì80211_°›_tx_ba_cb_úqß„
(
vif
, 
°a
->
addr
, 
tid
);

1900 
	`©h9k_ps_ª°‹e
(
sc
);

1902 
IEEE80211_AMPDU_TX_OPERATIONAL
:

1903 
	`©h9k_ps_wakeup
(
sc
);

1904 
	`©h_tx_aggr_ªsume
(
sc
, 
°a
, 
tid
);

1905 
	`©h9k_ps_ª°‹e
(
sc
);

1908 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), "Unknown AMPDUáction\n");

1911 
	`muãx_u∆ock
(&
sc
->
muãx
);

1913  
ªt
;

1914 
	}
}

1916 
	$©h9k_gë_survey
(
õì80211_hw
 *
hw
, 
idx
,

1917 
survey_öfo
 *
survey
)

1919 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1920 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1921 
õì80211_suµ‹ãd_b™d
 *
sb™d
;

1922 
õì80211_ch™√l
 *
ch™
;

1923 
pos
;

1925 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

1926  -
EOPNOTSUPP
;

1928 
	`•ö_lock_bh
(&
comm⁄
->
cc_lock
);

1929 i‡(
idx
 == 0)

1930 
	`©h_upd©e_survey_°©s
(
sc
);

1932 
sb™d
 = 
hw
->
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

1933 i‡(
sb™d
 && 
idx
 >sb™d->
n_ch™√ls
) {

1934 
idx
 -
sb™d
->
n_ch™√ls
;

1935 
sb™d
 = 
NULL
;

1938 i‡(!
sb™d
)

1939 
sb™d
 = 
hw
->
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

1941 i‡(!
sb™d
 || 
idx
 >sb™d->
n_ch™√ls
) {

1942 
	`•ö_u∆ock_bh
(&
comm⁄
->
cc_lock
);

1943  -
ENOENT
;

1946 
ch™
 = &
sb™d
->
ch™√ls
[
idx
];

1947 
pos
 = 
ch™
->
hw_vÆue
;

1948 
	`mem˝y
(
survey
, &
sc
->survey[
pos
], (*survey));

1949 
survey
->
ch™√l
 = 
ch™
;

1950 
	`•ö_u∆ock_bh
(&
comm⁄
->
cc_lock
);

1953 
	}
}

1955 
	$©h9k_íabÀ_dy«ck
(
©h_so·c
 *
sc
)

1957 #ifde‡
CONFIG_ATH9K_DYNACK


1958 
u32
 
rfût
;

1959 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1961 
	`©h_dy«ck_ª£t
(
ah
);

1963 
ah
->
dy«ck
.
íabÀd
 = 
åue
;

1964 
rfût
 = 
	`©h_ˇl¸xfûãr
(
sc
);

1965 
	`©h9k_hw_£åxfûãr
(
ah
, 
rfût
);

1967 
	}
}

1969 
	$©h9k_£t_covîage_˛ass
(
õì80211_hw
 *
hw
,

1970 
s16
 
covîage_˛ass
)

1972 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1973 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1975 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

1978 
	`muãx_lock
(&
sc
->
muãx
);

1980 i‡(
covîage_˛ass
 >= 0) {

1981 
ah
->
covîage_˛ass
 = coverage_class;

1982 i‡(
ah
->
dy«ck
.
íabÀd
) {

1983 
u32
 
rfût
;

1985 
ah
->
dy«ck
.
íabÀd
 = 
Ál£
;

1986 
rfût
 = 
	`©h_ˇl¸xfûãr
(
sc
);

1987 
	`©h9k_hw_£åxfûãr
(
ah
, 
rfût
);

1989 
	`©h9k_ps_wakeup
(
sc
);

1990 
	`©h9k_hw_öô_globÆ_£âögs
(
ah
);

1991 
	`©h9k_ps_ª°‹e
(
sc
);

1992 } i‡(!
ah
->
dy«ck
.
íabÀd
) {

1993 
	`©h9k_íabÀ_dy«ck
(
sc
);

1996 
	`muãx_u∆ock
(&
sc
->
muãx
);

1997 
	}
}

1999 
boﬁ
 
	$©h9k_has_tx_≥ndög
(
©h_so·c
 *
sc
,

2000 
boﬁ
 
sw_≥ndög
)

2002 
i
, 
≈íd
 = 0;

2004 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++) {

2005 i‡(!
	`ATH_TXQ_SETUP
(
sc
, 
i
))

2008 
≈íd
 = 
	`©h9k_has_≥ndög_‰ames
(
sc
, &sc->
tx
.
txq
[
i
],

2009 
sw_≥ndög
);

2010 i‡(
≈íd
)

2014  !!
≈íd
;

2015 
	}
}

2017 
	$©h9k_Êush
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
,

2018 
u32
 
queues
, 
boﬁ
 
dr›
)

2020 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2021 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2023 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

2024 i‡(!
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
))

2025 
Êush
;

2037 
	`__©h9k_Êush
(
hw
, 
queues
, 
dr›
, 
åue
,Årue);

2040 
Êush
:

2041 
	`muãx_lock
(&
sc
->
muãx
);

2042 
	`__©h9k_Êush
(
hw
, 
queues
, 
dr›
, 
åue
, 
Ál£
);

2043 
	`muãx_u∆ock
(&
sc
->
muãx
);

2044 
	}
}

2046 
	$__©h9k_Êush
(
õì80211_hw
 *
hw
, 
u32
 
queues
, 
boﬁ
 
dr›
,

2047 
boﬁ
 
sw_≥ndög
, boﬁ 
timeout_ovîride
)

2049 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2050 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2051 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2052 
timeout
;

2053 
boﬁ
 
døö_txq
;

2055 
	`ˇn˚l_dñayed_w‹k_sync
(&
sc
->
tx_com∂ëe_w‹k
);

2057 i‡(
ah
->
ah_Êags
 & 
AH_UNPLUGGED
) {

2058 
	`©h_dbg
(
comm⁄
, 
ANY
, "Device has been unplugged!\n");

2062 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
)) {

2063 
	`©h_dbg
(
comm⁄
, 
ANY
, "DeviceÇotÖresent\n");

2067 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

2068 i‡(
timeout_ovîride
)

2069 
timeout
 = 
HZ
 / 5;

2071 
timeout
 = 
sc
->
cur_ch™
->
Êush_timeout
;

2072 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

2074 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2075 "FlushÅimeout: %d\n", 
	`jiffõs_to_m£cs
(
timeout
));

2077 i‡(
	`waô_evít_timeout
(
sc
->
tx_waô
, !
	`©h9k_has_tx_≥ndög
(sc, 
sw_≥ndög
),

2078 
timeout
) > 0)

2079 
dr›
 = 
Ál£
;

2081 i‡(
dr›
) {

2082 
	`©h9k_ps_wakeup
(
sc
);

2083 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

2084 
døö_txq
 = 
	`©h_døö_Æl_txq
(
sc
);

2085 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

2087 i‡(!
døö_txq
)

2088 
	`©h_ª£t
(
sc
, 
NULL
);

2090 
	`©h9k_ps_ª°‹e
(
sc
);

2093 
	`õì80211_queue_dñayed_w‹k
(
hw
, &
sc
->
tx_com∂ëe_w‹k
, 0);

2094 
	}
}

2096 
boﬁ
 
	$©h9k_tx_‰ames_≥ndög
(
õì80211_hw
 *
hw
)

2098 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2100  
	`©h9k_has_tx_≥ndög
(
sc
, 
åue
);

2101 
	}
}

2103 
	$©h9k_tx_œ°_bóc⁄
(
õì80211_hw
 *
hw
)

2105 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2106 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2107 
õì80211_vif
 *
vif
;

2108 
©h_vif
 *
avp
;

2109 
©h_buf
 *
bf
;

2110 
©h_tx_°©us
 
ts
;

2111 
boﬁ
 
edma
 = !!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
);

2112 
°©us
;

2114 
vif
 = 
sc
->
bóc⁄
.
b¶Ÿ
[0];

2115 i‡(!
vif
)

2118 i‡(!
vif
->
bss_c⁄f
.
íabÀ_bóc⁄
)

2121 
avp
 = (*)
vif
->
drv_¥iv
;

2123 i‡(!
sc
->
bóc⁄
.
tx_¥o˚s£d
 && !
edma
) {

2124 
	`èskÀt_dißbÀ
(&
sc
->
bc⁄_èskÀt
);

2126 
bf
 = 
avp
->
av_bcbuf
;

2127 i‡(!
bf
 || !bf->
bf_mpdu
)

2128 
skù
;

2130 
°©us
 = 
	`©h9k_hw_tx¥ocdesc
(
ah
, 
bf
->
bf_desc
, &
ts
);

2131 i‡(
°©us
 =-
EINPROGRESS
)

2132 
skù
;

2134 
sc
->
bóc⁄
.
tx_¥o˚s£d
 = 
åue
;

2135 
sc
->
bóc⁄
.
tx_œ°
 = !(
ts
.
ts_°©us
 & 
ATH9K_TXERR_MASK
);

2137 
skù
:

2138 
	`èskÀt_íabÀ
(&
sc
->
bc⁄_èskÀt
);

2141  
sc
->
bóc⁄
.
tx_œ°
;

2142 
	}
}

2144 
	$©h9k_gë_°©s
(
õì80211_hw
 *
hw
,

2145 
õì80211_low_Àvñ_°©s
 *
°©s
)

2147 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2148 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2149 
©h9k_mib_°©s
 *
mib_°©s
 = &
ah
->
ah_mibSèts
;

2151 
°©s
->
dŸ11ACKFaûuªCou¡
 = 
mib_°©s
->
ackrcv_bad
;

2152 
°©s
->
dŸ11RTSFaûuªCou¡
 = 
mib_°©s
->
πs_bad
;

2153 
°©s
->
dŸ11FCSEº‹Cou¡
 = 
mib_°©s
->
fcs_bad
;

2154 
°©s
->
dŸ11RTSSuc˚ssCou¡
 = 
mib_°©s
->
πs_good
;

2156 
	}
}

2158 
u32
 
	$fûl_chaömask
(
u32
 
ˇp
, u32 
√w
)

2160 
u32
 
fûÀd
 = 0;

2161 
i
;

2163 
i
 = 0; 
ˇp
 && 
√w
; i++, cap >>= 1) {

2164 i‡(!(
ˇp
 & 
	`BIT
(0)))

2167 i‡(
√w
 & 
	`BIT
(0))

2168 
fûÀd
 |
	`BIT
(
i
);

2170 
√w
 >>= 1;

2173  
fûÀd
;

2174 
	}
}

2176 
boﬁ
 
	$vÆid©e_™ã¬a_mask
(
©h_hw
 *
ah
, 
u32
 
vÆ
)

2178 i‡(
	`AR_SREV_9300_20_OR_LATER
(
ah
))

2179  
åue
;

2181 
vÆ
 & 0x7) {

2185  
åue
;

2187  (
ah
->
ˇps
.
rx_chaömask
 == 1);

2189  
Ál£
;

2191 
	}
}

2193 
	$©h9k_£t_™ã¬a
(
õì80211_hw
 *
hw
, 
u32
 
tx_™t
, u32 
rx_™t
)

2195 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2196 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2198 i‡(
ah
->
ˇps
.
rx_chaömask
 != 1)

2199 
rx_™t
 |
tx_™t
;

2201 i‡(!
	`vÆid©e_™ã¬a_mask
(
ah
, 
rx_™t
Ë|| !
tx_™t
)

2202  -
EINVAL
;

2204 
sc
->
™t_rx
 = 
rx_™t
;

2205 
sc
->
™t_tx
 = 
tx_™t
;

2207 i‡(
ah
->
ˇps
.
rx_chaömask
 == 1)

2211 i‡(
	`AR_SREV_9100
(
ah
))

2212 
ah
->
rxchaömask
 = 0x7;

2214 
ah
->
rxchaömask
 = 
	`fûl_chaömask
◊h->
ˇps
.
rx_chaömask
, 
rx_™t
);

2216 
ah
->
txchaömask
 = 
	`fûl_chaömask
◊h->
ˇps
.
tx_chaömask
, 
tx_™t
);

2217 
	`©h9k_cmn_ªlﬂd_chaömask
(
ah
);

2220 
	}
}

2222 
	$©h9k_gë_™ã¬a
(
õì80211_hw
 *
hw
, 
u32
 *
tx_™t
, u32 *
rx_™t
)

2224 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2226 *
tx_™t
 = 
sc
->
™t_tx
;

2227 *
rx_™t
 = 
sc
->
™t_rx
;

2229 
	}
}

2231 
	$©h9k_sw_sˇn_°¨t
(
õì80211_hw
 *
hw
,

2232 
õì80211_vif
 *
vif
,

2233 c⁄° 
u8
 *
mac_addr
)

2235 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2236 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2237 
	`£t_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
);

2238 
	}
}

2240 
	$©h9k_sw_sˇn_com∂ëe
(
õì80211_hw
 *
hw
,

2241 
õì80211_vif
 *
vif
)

2243 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2244 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2245 
	`˛ór_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
);

2246 
	}
}

2248 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


2250 
	$©h9k_ˇn˚l_≥ndög_offch™√l
(
©h_so·c
 *
sc
)

2252 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2254 i‡(
sc
->
offch™√l
.
roc_vif
) {

2255 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2256 "%s: Ab‹tög RoC\n", 
__func__
);

2258 
	`dñ_timî_sync
(&
sc
->
offch™√l
.
timî
);

2259 i‡(
sc
->
offch™√l
.
°©e
 >
ATH_OFFCHANNEL_ROC_START
)

2260 
	`©h_roc_com∂ëe
(
sc
, 
ATH_ROC_COMPLETE_ABORT
);

2263 i‡(
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
)) {

2264 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2265 "%s: Ab‹tög HW sˇn\n", 
__func__
);

2267 
	`dñ_timî_sync
(&
sc
->
offch™√l
.
timî
);

2268 
	`©h_sˇn_com∂ëe
(
sc
, 
åue
);

2270 
	}
}

2272 
	$©h9k_hw_sˇn
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
,

2273 
õì80211_sˇn_ªque°
 *
hw_ªq
)

2275 
cfg80211_sˇn_ªque°
 *
ªq
 = &
hw_ªq
->req;

2276 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2277 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2278 
ªt
 = 0;

2280 
	`muãx_lock
(&
sc
->
muãx
);

2282 i‡(
	`WARN_ON
(
sc
->
offch™√l
.
sˇn_ªq
)) {

2283 
ªt
 = -
EBUSY
;

2284 
out
;

2287 
	`©h9k_ps_wakeup
(
sc
);

2288 
	`£t_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
);

2289 
sc
->
offch™√l
.
sˇn_vif
 = 
vif
;

2290 
sc
->
offch™√l
.
sˇn_ªq
 = 
ªq
;

2291 
sc
->
offch™√l
.
sˇn_idx
 = 0;

2293 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "HW scanÑequestÑeceived on vif: %pM\n",

2294 
vif
->
addr
);

2296 i‡(
sc
->
offch™√l
.
°©e
 =
ATH_OFFCHANNEL_IDLE
) {

2297 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "Starting HW scan\n");

2298 
	`©h_offch™√l_√xt
(
sc
);

2301 
out
:

2302 
	`muãx_u∆ock
(&
sc
->
muãx
);

2304  
ªt
;

2305 
	}
}

2307 
	$©h9k_ˇn˚l_hw_sˇn
(
õì80211_hw
 *
hw
,

2308 
õì80211_vif
 *
vif
)

2310 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2311 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2313 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "C™˚»HW sˇ¿⁄ vif: %pM\n", 
vif
->
addr
);

2315 
	`muãx_lock
(&
sc
->
muãx
);

2316 
	`dñ_timî_sync
(&
sc
->
offch™√l
.
timî
);

2317 
	`©h_sˇn_com∂ëe
(
sc
, 
åue
);

2318 
	`muãx_u∆ock
(&
sc
->
muãx
);

2319 
	}
}

2321 
	$©h9k_ªmaö_⁄_ch™√l
(
õì80211_hw
 *
hw
,

2322 
õì80211_vif
 *
vif
,

2323 
õì80211_ch™√l
 *
ch™
, 
duøti⁄
,

2324 
õì80211_roc_ty≥
 
ty≥
)

2326 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2327 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2328 
ªt
 = 0;

2330 
	`muãx_lock
(&
sc
->
muãx
);

2332 i‡(
	`WARN_ON
(
sc
->
offch™√l
.
roc_vif
)) {

2333 
ªt
 = -
EBUSY
;

2334 
out
;

2337 
	`©h9k_ps_wakeup
(
sc
);

2338 
sc
->
offch™√l
.
roc_vif
 = 
vif
;

2339 
sc
->
offch™√l
.
roc_ch™
 = 
ch™
;

2340 
sc
->
offch™√l
.
roc_duøti⁄
 = 
duøti⁄
;

2342 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2344 
vif
->
addr
, 
ty≥
, 
duøti⁄
);

2346 i‡(
sc
->
offch™√l
.
°©e
 =
ATH_OFFCHANNEL_IDLE
) {

2347 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "Starting RoCÖeriod\n");

2348 
	`©h_offch™√l_√xt
(
sc
);

2351 
out
:

2352 
	`muãx_u∆ock
(&
sc
->
muãx
);

2354  
ªt
;

2355 
	}
}

2357 
	$©h9k_ˇn˚l_ªmaö_⁄_ch™√l
(
õì80211_hw
 *
hw
)

2359 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2360 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2362 
	`muãx_lock
(&
sc
->
muãx
);

2364 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
, "Cancel RoC\n");

2365 
	`dñ_timî_sync
(&
sc
->
offch™√l
.
timî
);

2367 i‡(
sc
->
offch™√l
.
roc_vif
) {

2368 i‡(
sc
->
offch™√l
.
°©e
 >
ATH_OFFCHANNEL_ROC_START
)

2369 
	`©h_roc_com∂ëe
(
sc
, 
ATH_ROC_COMPLETE_CANCEL
);

2372 
	`muãx_u∆ock
(&
sc
->
muãx
);

2375 
	}
}

2377 
	$©h9k_add_ch™˘x
(
õì80211_hw
 *
hw
,

2378 
õì80211_ch™˘x_c⁄f
 *
c⁄f
)

2380 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2381 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2382 
©h_ch™˘x
 *
˘x
, **
±r
;

2383 
pos
;

2385 
	`muãx_lock
(&
sc
->
muãx
);

2387 
	`©h_f‹_óch_ch™˘x
(
sc
, 
˘x
) {

2388 i‡(
˘x
->
assig√d
)

2391 
±r
 = (*Ë
c⁄f
->
drv_¥iv
;

2392 *
±r
 = 
˘x
;

2393 
˘x
->
assig√d
 = 
åue
;

2394 
pos
 = 
˘x
 - &
sc
->
ch™˘x
[0];

2395 
˘x
->
hw_queue_ba£
 = 
pos
 * 
IEEE80211_NUM_ACS
;

2397 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2399 
c⁄f
->
def
.
ch™
->
˚¡î_‰eq
);

2401 
	`©h_ch™˘x_£t_ch™√l
(
sc
, 
˘x
, &
c⁄f
->
def
);

2403 
	`muãx_u∆ock
(&
sc
->
muãx
);

2407 
	`muãx_u∆ock
(&
sc
->
muãx
);

2408  -
ENOSPC
;

2409 
	}
}

2412 
	$©h9k_ªmove_ch™˘x
(
õì80211_hw
 *
hw
,

2413 
õì80211_ch™˘x_c⁄f
 *
c⁄f
)

2415 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2416 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2417 
©h_ch™˘x
 *
˘x
 = 
	`©h_ch™˘x_gë
(
c⁄f
);

2419 
	`muãx_lock
(&
sc
->
muãx
);

2421 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2423 
c⁄f
->
def
.
ch™
->
˚¡î_‰eq
);

2425 
˘x
->
assig√d
 = 
Ál£
;

2426 
˘x
->
hw_queue_ba£
 = 0;

2427 
	`©h_ch™˘x_evít
(
sc
, 
NULL
, 
ATH_CHANCTX_EVENT_UNASSIGN
);

2429 
	`muãx_u∆ock
(&
sc
->
muãx
);

2430 
	}
}

2432 
	$©h9k_ch™ge_ch™˘x
(
õì80211_hw
 *
hw
,

2433 
õì80211_ch™˘x_c⁄f
 *
c⁄f
,

2434 
u32
 
ch™ged
)

2436 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2437 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2438 
©h_ch™˘x
 *
˘x
 = 
	`©h_ch™˘x_gë
(
c⁄f
);

2440 
	`muãx_lock
(&
sc
->
muãx
);

2441 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2443 
c⁄f
->
def
.
ch™
->
˚¡î_‰eq
);

2444 
	`©h_ch™˘x_£t_ch™√l
(
sc
, 
˘x
, &
c⁄f
->
def
);

2445 
	`muãx_u∆ock
(&
sc
->
muãx
);

2446 
	}
}

2448 
	$©h9k_assign_vif_ch™˘x
(
õì80211_hw
 *
hw
,

2449 
õì80211_vif
 *
vif
,

2450 
õì80211_ch™˘x_c⁄f
 *
c⁄f
)

2452 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2453 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2454 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

2455 
©h_ch™˘x
 *
˘x
 = 
	`©h_ch™˘x_gë
(
c⁄f
);

2456 
i
;

2458 
	`©h9k_ˇn˚l_≥ndög_offch™√l
(
sc
);

2460 
	`muãx_lock
(&
sc
->
muãx
);

2462 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2464 
vif
->
addr
, vif->
ty≥
, vif->
p2p
,

2465 
c⁄f
->
def
.
ch™
->
˚¡î_‰eq
);

2467 
avp
->
ch™˘x
 = 
˘x
;

2468 
˘x
->
nvifs_assig√d
++;

2469 
	`li°_add_èû
(&
avp
->
li°
, &
˘x
->
vifs
);

2470 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
˘x
);

2471 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++)

2472 
vif
->
hw_queue
[
i
] = 
˘x
->
hw_queue_ba£
 + i;

2474 
	`muãx_u∆ock
(&
sc
->
muãx
);

2477 
	}
}

2479 
	$©h9k_u«ssign_vif_ch™˘x
(
õì80211_hw
 *
hw
,

2480 
õì80211_vif
 *
vif
,

2481 
õì80211_ch™˘x_c⁄f
 *
c⁄f
)

2483 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2484 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2485 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

2486 
©h_ch™˘x
 *
˘x
 = 
	`©h_ch™˘x_gë
(
c⁄f
);

2487 
ac
;

2489 
	`©h9k_ˇn˚l_≥ndög_offch™√l
(
sc
);

2491 
	`muãx_lock
(&
sc
->
muãx
);

2493 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2495 
vif
->
addr
, vif->
ty≥
, vif->
p2p
,

2496 
c⁄f
->
def
.
ch™
->
˚¡î_‰eq
);

2498 
avp
->
ch™˘x
 = 
NULL
;

2499 
˘x
->
nvifs_assig√d
--;

2500 
	`li°_dñ
(&
avp
->
li°
);

2501 
	`©h9k_ˇlcuœã_summ¨y_°©e
(
sc
, 
˘x
);

2502 
ac
 = 0;á¯< 
IEEE80211_NUM_ACS
;ác++)

2503 
vif
->
hw_queue
[
ac
] = 
IEEE80211_INVAL_HW_QUEUE
;

2505 
	`muãx_u∆ock
(&
sc
->
muãx
);

2506 
	}
}

2508 
	$©h9k_mgd_¥ï¨e_tx
(
õì80211_hw
 *
hw
,

2509 
õì80211_vif
 *
vif
)

2511 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2512 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2513 
©h_vif
 *
avp
 = (©h_vi‡*Ë
vif
->
drv_¥iv
;

2514 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
;

2515 
©h_ch™˘x
 *
go_˘x
;

2516 
timeout
;

2517 
boﬁ
 
ch™ged
 = 
Ál£
;

2518 
u32
 
bóc⁄_öt
;

2520 i‡(!
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
))

2523 i‡(!
avp
->
ch™˘x
)

2526 
	`muãx_lock
(&
sc
->
muãx
);

2528 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

2529 i‡(
sc
->
√xt_ch™
 || (sc->
cur_ch™
 !
avp
->
ch™˘x
))

2530 
ch™ged
 = 
åue
;

2531 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

2533 i‡(!
ch™ged
)

2534 
out
;

2536 
	`©h9k_ˇn˚l_≥ndög_offch™√l
(
sc
);

2538 
go_˘x
 = 
	`©h_is_go_ch™˘x_¥e£¡
(
sc
);

2540 i‡(
go_˘x
) {

2545 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

2546 
sc
->
sched
.
mgd_¥ï¨e_tx
 = 
åue
;

2547 
cur_c⁄f
 = &
go_˘x
->
bóc⁄
;

2548 
bóc⁄_öt
 = 
	`TU_TO_USEC
(
cur_c⁄f
->
bóc⁄_öãrvÆ
);

2549 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

2551 
timeout
 = 
	`u£cs_to_jiffõs
(
bóc⁄_öt
 * 2);

2552 
	`öô_com∂ëi⁄
(&
sc
->
go_bóc⁄
);

2554 
	`muãx_u∆ock
(&
sc
->
muãx
);

2556 i‡(
	`waô_f‹_com∂ëi⁄_timeout
(&
sc
->
go_bóc⁄
,

2557 
timeout
) == 0) {

2558 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2561 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

2562 
sc
->
sched
.
mgd_¥ï¨e_tx
 = 
Ál£
;

2563 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

2566 
	`muãx_lock
(&
sc
->
muãx
);

2569 
	`©h_dbg
(
comm⁄
, 
CHAN_CTX
,

2571 
__func__
, 
vif
->
addr
);

2573 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

2574 
sc
->
√xt_ch™
 = 
avp
->
ch™˘x
;

2575 
sc
->
sched
.
°©e
 = 
ATH_CHANCTX_STATE_FORCE_ACTIVE
;

2576 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

2578 
	`©h_ch™˘x_£t_√xt
(
sc
, 
åue
);

2579 
out
:

2580 
	`muãx_u∆ock
(&
sc
->
muãx
);

2581 
	}
}

2583 
	$©h9k_fûl_ch™˘x_›s
()

2585 i‡(!
	`©h9k_is_ch™˘x_íabÀd
())

2588 
©h9k_›s
.
hw_sˇn
 = 
©h9k_hw_sˇn
;

2589 
©h9k_›s
.
ˇn˚l_hw_sˇn
 = 
©h9k_ˇn˚l_hw_sˇn
;

2590 
©h9k_›s
.
ªmaö_⁄_ch™√l
 = 
©h9k_ªmaö_⁄_ch™√l
;

2591 
©h9k_›s
.
ˇn˚l_ªmaö_⁄_ch™√l
 = 
©h9k_ˇn˚l_ªmaö_⁄_ch™√l
;

2592 
©h9k_›s
.
add_ch™˘x
 = 
©h9k_add_ch™˘x
;

2593 
©h9k_›s
.
ªmove_ch™˘x
 = 
©h9k_ªmove_ch™˘x
;

2594 
©h9k_›s
.
ch™ge_ch™˘x
 = 
©h9k_ch™ge_ch™˘x
;

2595 
©h9k_›s
.
assign_vif_ch™˘x
 = 
©h9k_assign_vif_ch™˘x
;

2596 
©h9k_›s
.
u«ssign_vif_ch™˘x
 = 
©h9k_u«ssign_vif_ch™˘x
;

2597 
©h9k_›s
.
mgd_¥ï¨e_tx
 = 
©h9k_mgd_¥ï¨e_tx
;

2598 
	}
}

2602 
	$©h9k_gë_txpowî
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
,

2603 *
dbm
)

2605 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2606 
©h_vif
 *
avp
 = (*)
vif
->
drv_¥iv
;

2608 
	`muãx_lock
(&
sc
->
muãx
);

2609 i‡(
avp
->
ch™˘x
)

2610 *
dbm
 = 
avp
->
ch™˘x
->
cur_txpowî
;

2612 *
dbm
 = 
sc
->
cur_ch™
->
cur_txpowî
;

2613 
	`muãx_u∆ock
(&
sc
->
muãx
);

2615 *
dbm
 /= 2;

2618 
	}
}

2620 
õì80211_›s
 
	g©h9k_›s
 = {

2621 .
tx
 = 
©h9k_tx
,

2622 .
	g°¨t
 = 
©h9k_°¨t
,

2623 .
	g°›
 = 
©h9k_°›
,

2624 .
	gadd_öãrÁ˚
 = 
©h9k_add_öãrÁ˚
,

2625 .
	gch™ge_öãrÁ˚
 = 
©h9k_ch™ge_öãrÁ˚
,

2626 .
	gªmove_öãrÁ˚
 = 
©h9k_ªmove_öãrÁ˚
,

2627 .
	gc⁄fig
 = 
©h9k_c⁄fig
,

2628 .
	gc⁄figuª_fûãr
 = 
©h9k_c⁄figuª_fûãr
,

2629 .
	g°a_°©e
 = 
©h9k_°a_°©e
,

2630 .
	g°a_nŸify
 = 
©h9k_°a_nŸify
,

2631 .
	gc⁄f_tx
 = 
©h9k_c⁄f_tx
,

2632 .
	gbss_öfo_ch™ged
 = 
©h9k_bss_öfo_ch™ged
,

2633 .
	g£t_key
 = 
©h9k_£t_key
,

2634 .
	ggë_tsf
 = 
©h9k_gë_tsf
,

2635 .
	g£t_tsf
 = 
©h9k_£t_tsf
,

2636 .
	gª£t_tsf
 = 
©h9k_ª£t_tsf
,

2637 .
	gampdu_a˘i⁄
 = 
©h9k_ampdu_a˘i⁄
,

2638 .
	ggë_survey
 = 
©h9k_gë_survey
,

2639 .
	grfkûl_pﬁl
 = 
©h9k_rfkûl_pﬁl_°©e
,

2640 .
	g£t_covîage_˛ass
 = 
©h9k_£t_covîage_˛ass
,

2641 .
	gÊush
 = 
©h9k_Êush
,

2642 .
	gtx_‰ames_≥ndög
 = 
©h9k_tx_‰ames_≥ndög
,

2643 .
	gtx_œ°_bóc⁄
 = 
©h9k_tx_œ°_bóc⁄
,

2644 .
	gªÀa£_buf„ªd_‰ames
 = 
©h9k_ªÀa£_buf„ªd_‰ames
,

2645 .
	ggë_°©s
 = 
©h9k_gë_°©s
,

2646 .
	g£t_™ã¬a
 = 
©h9k_£t_™ã¬a
,

2647 .
	ggë_™ã¬a
 = 
©h9k_gë_™ã¬a
,

2649 #ifde‡
CONFIG_ATH9K_WOW


2650 .
	gsu•íd
 = 
©h9k_su•íd
,

2651 .
	gªsume
 = 
©h9k_ªsume
,

2652 .
	g£t_wakeup
 = 
©h9k_£t_wakeup
,

2655 #ifde‡
CONFIG_ATH9K_DEBUGFS


2656 .
	ggë_ë_s£t_cou¡
 = 
©h9k_gë_ë_s£t_cou¡
,

2657 .
	ggë_ë_°©s
 = 
©h9k_gë_ë_°©s
,

2658 .
	ggë_ë_°rögs
 = 
©h9k_gë_ë_°rögs
,

2661 #i‡
deföed
(
CONFIG_MAC80211_DEBUGFS
Ë&& deföed(
CONFIG_ATH9K_STATION_STATISTICS
)

2662 .
	g°a_add_debugfs
 = 
©h9k_°a_add_debugfs
,

2664 .
	gsw_sˇn_°¨t
 = 
©h9k_sw_sˇn_°¨t
,

2665 .
	gsw_sˇn_com∂ëe
 = 
©h9k_sw_sˇn_com∂ëe
,

2666 .
	ggë_txpowî
 = 
©h9k_gë_txpowî
,

	@mci.c

17 
	~<löux/dma-m≠pög.h
>

18 
	~<löux/¶ab.h
>

20 
	~"©h9k.h
"

21 
	~"mci.h
"

23 c⁄° 
u8
 
	g©h_mci_duty_cy˛e
[] = { 55, 50, 60, 70, 80, 85, 90, 95, 98 };

25 
©h_mci_¥ofûe_öfo
*

26 
	$©h_mci_föd_¥ofûe
(
©h_mci_¥ofûe
 *
mci
,

27 
©h_mci_¥ofûe_öfo
 *
öfo
)

29 
©h_mci_¥ofûe_öfo
 *
íåy
;

31 i‡(
	`li°_em±y
(&
mci
->
öfo
))

32  
NULL
;

34 
	`li°_f‹_óch_íåy
(
íåy
, &
mci
->
öfo
, 
li°
) {

35 i‡(
íåy
->
c⁄n_h™dÀ
 =
öfo
->conn_handle)

36  
íåy
;

38  
NULL
;

39 
	}
}

41 
boﬁ
 
	$©h_mci_add_¥ofûe
(
©h_comm⁄
 *
comm⁄
,

42 
©h_mci_¥ofûe
 *
mci
,

43 
©h_mci_¥ofûe_öfo
 *
öfo
)

45 
©h_mci_¥ofûe_öfo
 *
íåy
;

46 
u8
 
voi˚_¥i‹ôy
[] = { 110, 110, 110, 112, 110, 110, 114, 116, 118 };

48 i‡((
mci
->
num_sco
 =
ATH_MCI_MAX_SCO_PROFILE
) &&

49 (
öfo
->
ty≥
 =
MCI_GPM_COEX_PROFILE_VOICE
))

50  
Ál£
;

52 i‡(((
	`NUM_PROF
(
mci
Ë- mci->
num_sco
Ë=
ATH_MCI_MAX_ACL_PROFILE
) &&

53 (
öfo
->
ty≥
 !
MCI_GPM_COEX_PROFILE_VOICE
))

54  
Ál£
;

56 
íåy
 = 
	`kzÆloc
((*íåy), 
GFP_ATOMIC
);

57 i‡(!
íåy
)

58  
Ál£
;

60 
	`mem˝y
(
íåy
, 
öfo
, 10);

61 
	`INC_PROF
(
mci
, 
öfo
);

62 
	`li°_add_èû
(&
íåy
->
li°
, &
mci
->
öfo
);

63 i‡(
öfo
->
ty≥
 =
MCI_GPM_COEX_PROFILE_VOICE
) {

64 i‡(
öfo
->
voi˚_ty≥
 < (
voi˚_¥i‹ôy
))

65 
mci
->
voi˚_¥i‹ôy
 = voi˚_¥i‹ôy[
öfo
->
voi˚_ty≥
];

67 
mci
->
voi˚_¥i‹ôy
 = 110;

70  
åue
;

71 
	}
}

73 
	$©h_mci_dñ_¥ofûe
(
©h_comm⁄
 *
comm⁄
,

74 
©h_mci_¥ofûe
 *
mci
,

75 
©h_mci_¥ofûe_öfo
 *
íåy
)

77 i‡(!
íåy
)

80 
	`DEC_PROF
(
mci
, 
íåy
);

81 
	`li°_dñ
(&
íåy
->
li°
);

82 
	`k‰ì
(
íåy
);

83 
	}
}

85 
	$©h_mci_Êush_¥ofûe
(
©h_mci_¥ofûe
 *
mci
)

87 
©h_mci_¥ofûe_öfo
 *
öfo
, *
töfo
;

89 
mci
->
aggr_limô
 = 0;

90 
mci
->
num_mgmt
 = 0;

92 i‡(
	`li°_em±y
(&
mci
->
öfo
))

95 
	`li°_f‹_óch_íåy_ß„
(
öfo
, 
töfo
, &
mci
->öfo, 
li°
) {

96 
	`li°_dñ
(&
öfo
->
li°
);

97 
	`DEC_PROF
(
mci
, 
öfo
);

98 
	`k‰ì
(
öfo
);

100 
	}
}

102 
	$©h_mci_adju°_aggr_limô
(
©h_btc€x
 *
btc€x
)

104 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

105 
u32
 
wœn_aútime
 = 
btc€x
->
btc€x_≥riod
 *

106 (100 - 
btc€x
->
duty_cy˛e
) / 100;

114 i‡((
wœn_aútime
 <= 4) &&

115 (!
mci
->
aggr_limô
 || (mci->aggr_limô > (2 * 
wœn_aútime
))))

116 
mci
->
aggr_limô
 = 2 * 
wœn_aútime
;

117 
	}
}

119 
	$©h_mci_upd©e_scheme
(
©h_so·c
 *
sc
)

121 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

122 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

123 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

124 
©h9k_hw_mci
 *
mci_hw
 = &
sc
->
sc_ah
->
btc€x_hw
.
mci
;

125 
©h_mci_¥ofûe_öfo
 *
öfo
;

126 
u32
 
num_¥ofûe
 = 
	`NUM_PROF
(
mci
);

128 i‡(
mci_hw
->
c⁄fig
 & 
ATH_MCI_CONFIG_DISABLE_TUNING
)

129 
skù_tunög
;

131 
mci
->
aggr_limô
 = 0;

132 
btc€x
->
duty_cy˛e
 = 
©h_mci_duty_cy˛e
[
num_¥ofûe
];

133 
btc€x
->
btc€x_≥riod
 = 
ATH_MCI_DEF_BT_PERIOD
;

134 i‡(
	`NUM_PROF
(
mci
))

135 
btc€x
->
bt_°omp_ty≥
 = 
ATH_BTCOEX_STOMP_LOW
;

137 
btc€x
->
bt_°omp_ty≥
 = 
mci
->
num_mgmt
 ? 
ATH_BTCOEX_STOMP_ALL
 :

138 
ATH_BTCOEX_STOMP_LOW
;

140 i‡(
num_¥ofûe
 == 1) {

141 
öfo
 = 
	`li°_fú°_íåy
(&
mci
->info,

142 
©h_mci_¥ofûe_öfo
,

143 
li°
);

144 i‡(
mci
->
num_sco
) {

145 i‡(
öfo
->
T
 == 12)

146 
mci
->
aggr_limô
 = 8;

147 i‡(
öfo
->
T
 == 6) {

148 
mci
->
aggr_limô
 = 6;

149 
btc€x
->
duty_cy˛e
 = 30;

151 
mci
->
aggr_limô
 = 6;

152 
	`©h_dbg
(
comm⁄
, 
MCI
,

154 
mci
->
aggr_limô
);

155 } i‡(
mci
->
num_∑n
 || mci->
num_Ÿhî_a˛
) {

160 
btc€x
->
duty_cy˛e
 = 
	`AR_SREV_9565
(
sc
->
sc_ah
) ? 40 : 35;

161 
btc€x
->
btc€x_≥riod
 = 53;

162 
	`©h_dbg
(
comm⁄
, 
MCI
,

164 
btc€x
->
duty_cy˛e
, btc€x->
btc€x_≥riod
);

165 } i‡(
mci
->
num_hid
) {

166 
btc€x
->
duty_cy˛e
 = 30;

167 
mci
->
aggr_limô
 = 6;

168 
	`©h_dbg
(
comm⁄
, 
MCI
,

172 } i‡(
num_¥ofûe
 == 2) {

173 i‡(
mci
->
num_hid
 == 2)

174 
btc€x
->
duty_cy˛e
 = 30;

175 
mci
->
aggr_limô
 = 6;

176 
	`©h_dbg
(
comm⁄
, 
MCI
,

178 
btc€x
->
duty_cy˛e
);

179 } i‡(
num_¥ofûe
 >= 3) {

180 
mci
->
aggr_limô
 = 4;

181 
	`©h_dbg
(
comm⁄
, 
MCI
,

185 
skù_tunög
:

186 i‡(
	`IS_CHAN_2GHZ
(
sc
->
sc_ah
->
curch™
)) {

187 i‡(
	`IS_CHAN_HT
(
sc
->
sc_ah
->
curch™
))

188 
	`©h_mci_adju°_aggr_limô
(
btc€x
);

190 
btc€x
->
btc€x_≥riod
 >>= 1;

193 
	`©h9k_btc€x_timî_∑u£
(
sc
);

194 
	`©h9k_hw_btc€x_dißbÀ
(
sc
->
sc_ah
);

196 i‡(
	`IS_CHAN_5GHZ
(
sc
->
sc_ah
->
curch™
))

199 
btc€x
->
duty_cy˛e
 +(
mci
->
num_bdr
 ? 
ATH_MCI_BDR_DUTY_CYCLE
 : 0);

200 i‡(
btc€x
->
duty_cy˛e
 > 
ATH_MCI_MAX_DUTY_CYCLE
)

201 
btc€x
->
duty_cy˛e
 = 
ATH_MCI_MAX_DUTY_CYCLE
;

203 
btc€x
->
btc€x_no_°omp
 = btc€x->
btc€x_≥riod
 *

204 (100 - 
btc€x
->
duty_cy˛e
) / 100;

206 
	`©h9k_hw_btc€x_íabÀ
(
sc
->
sc_ah
);

207 
	`©h9k_btc€x_timî_ªsume
(
sc
);

208 
	}
}

210 
	$©h_mci_ˇl_msg
(
©h_so·c
 *
sc
, 
u8
 
›code
, u8 *
rx_∑ylﬂd
)

212 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

213 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

214 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

215 
u32
 
∑ylﬂd
[4] = {0, 0, 0, 0};

217 
›code
) {

218 
MCI_GPM_BT_CAL_REQ
:

219 i‡(
mci_hw
->
bt_°©e
 =
MCI_BT_AWAKE
) {

220 
mci_hw
->
bt_°©e
 = 
MCI_BT_CAL_START
;

221 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_MCI
);

223 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI Sèã : %d\n", 
mci_hw
->
bt_°©e
);

225 
MCI_GPM_BT_CAL_GRANT
:

226 
	`MCI_GPM_SET_CAL_TYPE
(
∑ylﬂd
, 
MCI_GPM_WLAN_CAL_DONE
);

227 
	`¨9003_mci_£nd_mesßge
(
sc
->
sc_ah
, 
MCI_GPM
, 0, 
∑ylﬂd
,

228 16, 
Ál£
, 
åue
);

231 
	`©h_dbg
(
comm⁄
, 
MCI
, "Unknown GPM CAL message\n");

234 
	}
}

236 
	$©h9k_mci_w‹k
(
w‹k_°ru˘
 *
w‹k
)

238 
©h_so·c
 *
sc
 = 
	`c⁄èöî_of
(
w‹k
, ©h_so·c, 
mci_w‹k
);

240 
	`©h_mci_upd©e_scheme
(
sc
);

241 
	}
}

243 
	$©h_mci_upd©e_°omp_tx¥io
(
u8
 
cur_tx¥io
, u8 *
°omp_¥io
)

245 i‡(
cur_tx¥io
 < 
°omp_¥io
[
ATH_BTCOEX_STOMP_NONE
])

246 
°omp_¥io
[
ATH_BTCOEX_STOMP_NONE
] = 
cur_tx¥io
;

248 i‡(
cur_tx¥io
 > 
°omp_¥io
[
ATH_BTCOEX_STOMP_ALL
])

249 
°omp_¥io
[
ATH_BTCOEX_STOMP_ALL
] = 
cur_tx¥io
;

251 i‡((
cur_tx¥io
 > 
ATH_MCI_HI_PRIO
) &&

252 (
cur_tx¥io
 < 
°omp_¥io
[
ATH_BTCOEX_STOMP_LOW
]))

253 
°omp_¥io
[
ATH_BTCOEX_STOMP_LOW
] = 
cur_tx¥io
;

254 
	}
}

256 
	$©h_mci_£t_c⁄cur_tx¥io
(
©h_so·c
 *
sc
)

258 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

259 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

260 
u8
 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_MAX
];

262 
	`mem£t
(
°omp_tx¥io
, 0, (stomp_txprio));

263 i‡(
mci
->
num_mgmt
) {

264 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_ALL
] = 
ATH_MCI_INQUIRY_PRIO
;

265 i‡(!
mci
->
num_∑n
 && !mci->
num_Ÿhî_a˛
)

266 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_NONE
] =

267 
ATH_MCI_INQUIRY_PRIO
;

269 
u8
 
¥of_¥io
[] = { 50, 90, 94, 52 };

271 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_LOW
] =

272 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_NONE
] = 0xff;

274 i‡(
mci
->
num_sco
)

275 
	`©h_mci_upd©e_°omp_tx¥io
(
mci
->
voi˚_¥i‹ôy
,

276 
°omp_tx¥io
);

277 i‡(
mci
->
num_Ÿhî_a˛
)

278 
	`©h_mci_upd©e_°omp_tx¥io
(
¥of_¥io
[0], 
°omp_tx¥io
);

279 i‡(
mci
->
num_a2dp
)

280 
	`©h_mci_upd©e_°omp_tx¥io
(
¥of_¥io
[1], 
°omp_tx¥io
);

281 i‡(
mci
->
num_hid
)

282 
	`©h_mci_upd©e_°omp_tx¥io
(
¥of_¥io
[2], 
°omp_tx¥io
);

283 i‡(
mci
->
num_∑n
)

284 
	`©h_mci_upd©e_°omp_tx¥io
(
¥of_¥io
[3], 
°omp_tx¥io
);

286 i‡(
°omp_tx¥io
[
ATH_BTCOEX_STOMP_NONE
] == 0xff)

287 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_NONE
] = 0;

289 i‡(
°omp_tx¥io
[
ATH_BTCOEX_STOMP_LOW
] == 0xff)

290 
°omp_tx¥io
[
ATH_BTCOEX_STOMP_LOW
] = 0;

292 
	`©h9k_hw_btc€x_£t_c⁄cur_tx¥io
(
sc
->
sc_ah
, 
°omp_tx¥io
);

293 
	}
}

295 
u8
 
	$©h_mci_¥o˚ss_¥ofûe
(
©h_so·c
 *
sc
,

296 
©h_mci_¥ofûe_öfo
 *
öfo
)

298 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

299 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

300 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

301 
©h_mci_¥ofûe_öfo
 *
íåy
 = 
NULL
;

303 
íåy
 = 
	`©h_mci_föd_¥ofûe
(
mci
, 
öfo
);

304 i‡(
íåy
) {

313 i‡(
íåy
->
ty≥
 !
öfo
->type) {

314 
	`DEC_PROF
(
mci
, 
íåy
);

315 
	`INC_PROF
(
mci
, 
öfo
);

317 
	`mem˝y
(
íåy
, 
öfo
, 10);

320 i‡(
öfo
->
°¨t
) {

321 i‡(!
íåy
 && !
	`©h_mci_add_¥ofûe
(
comm⁄
, 
mci
, 
öfo
))

324 
	`©h_mci_dñ_¥ofûe
(
comm⁄
, 
mci
, 
íåy
);

326 
	`©h_mci_£t_c⁄cur_tx¥io
(
sc
);

328 
	}
}

330 
u8
 
	$©h_mci_¥o˚ss_°©us
(
©h_so·c
 *
sc
,

331 
©h_mci_¥ofûe_°©us
 *
°©us
)

333 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

334 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

335 
©h_mci_¥ofûe_öfo
 
öfo
;

336 
i
 = 0, 
ﬁd_num_mgmt
 = 
mci
->
num_mgmt
;

339 i‡(
°©us
->
is_lök
)

342 
öfo
.
c⁄n_h™dÀ
 = 
°©us
->conn_handle;

343 i‡(
	`©h_mci_föd_¥ofûe
(
mci
, &
öfo
))

346 i‡(
°©us
->
c⁄n_h™dÀ
 >
ATH_MCI_MAX_PROFILE
)

349 i‡(
°©us
->
is_¸ôiˇl
)

350 
	`__£t_bô
(
°©us
->
c⁄n_h™dÀ
, 
mci
->status);

352 
	`__˛ór_bô
(
°©us
->
c⁄n_h™dÀ
, 
mci
->status);

354 
mci
->
num_mgmt
 = 0;

356 i‡(
	`ã°_bô
(
i
, 
mci
->
°©us
))

357 
mci
->
num_mgmt
++;

358 } ++
i
 < 
ATH_MCI_MAX_PROFILE
);

360 
	`©h_mci_£t_c⁄cur_tx¥io
(
sc
);

361 i‡(
ﬁd_num_mgmt
 !
mci
->
num_mgmt
)

365 
	}
}

367 
	$©h_mci_msg
(
©h_so·c
 *
sc
, 
u8
 
›code
, u8 *
rx_∑ylﬂd
)

369 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

370 
©h_mci_¥ofûe_öfo
 
¥ofûe_öfo
;

371 
©h_mci_¥ofûe_°©us
 
¥ofûe_°©us
;

372 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

373 
u8
 
maj‹
, 
mö‹
, 
upd©e_scheme
 = 0;

374 
u32
 
£q_num
;

376 i‡(
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_NEED_FLUSH_BT_INFO
) &&

377 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_ENABLE
)) {

378 
	`©h_dbg
(
comm⁄
, 
MCI
, "(MCI) NeedÅo flush BTÖrofiles\n");

379 
	`©h_mci_Êush_¥ofûe
(&
sc
->
btc€x
.
mci
);

380 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_SEND_STATUS_QUERY
);

383 
›code
) {

384 
MCI_GPM_COEX_VERSION_QUERY
:

385 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_SEND_WLAN_COEX_VERSION
);

387 
MCI_GPM_COEX_VERSION_RESPONSE
:

388 
maj‹
 = *(
rx_∑ylﬂd
 + 
MCI_GPM_COEX_B_MAJOR_VERSION
);

389 
mö‹
 = *(
rx_∑ylﬂd
 + 
MCI_GPM_COEX_B_MINOR_VERSION
);

390 
	`¨9003_mci_£t_bt_vîsi⁄
(
ah
, 
maj‹
, 
mö‹
);

392 
MCI_GPM_COEX_STATUS_QUERY
:

393 
	`¨9003_mci_£nd_wœn_ch™√ls
(
ah
);

395 
MCI_GPM_COEX_BT_PROFILE_INFO
:

396 
	`mem˝y
(&
¥ofûe_öfo
,

397 (
rx_∑ylﬂd
 + 
MCI_GPM_COEX_B_PROFILE_TYPE
), 10);

399 i‡((
¥ofûe_öfo
.
ty≥
 =
MCI_GPM_COEX_PROFILE_UNKNOWN
) ||

400 (
¥ofûe_öfo
.
ty≥
 >
MCI_GPM_COEX_PROFILE_MAX
)) {

401 
	`©h_dbg
(
comm⁄
, 
MCI
,

403 
¥ofûe_öfo
.
ty≥
,

404 
¥ofûe_öfo
.
°¨t
);

408 
upd©e_scheme
 +
	`©h_mci_¥o˚ss_¥ofûe
(
sc
, &
¥ofûe_öfo
);

410 
MCI_GPM_COEX_BT_STATUS_UPDATE
:

411 
¥ofûe_°©us
.
is_lök
 = *(
rx_∑ylﬂd
 +

412 
MCI_GPM_COEX_B_STATUS_TYPE
);

413 
¥ofûe_°©us
.
c⁄n_h™dÀ
 = *(
rx_∑ylﬂd
 +

414 
MCI_GPM_COEX_B_STATUS_LINKID
);

415 
¥ofûe_°©us
.
is_¸ôiˇl
 = *(
rx_∑ylﬂd
 +

416 
MCI_GPM_COEX_B_STATUS_STATE
);

418 
£q_num
 = *((
u32
 *)(
rx_∑ylﬂd
 + 12));

419 
	`©h_dbg
(
comm⁄
, 
MCI
,

421 
¥ofûe_°©us
.
is_lök
,Örofûe_°©us.
c⁄n_h™dÀ
,

422 
¥ofûe_°©us
.
is_¸ôiˇl
, 
£q_num
);

424 
upd©e_scheme
 +
	`©h_mci_¥o˚ss_°©us
(
sc
, &
¥ofûe_°©us
);

427 
	`©h_dbg
(
comm⁄
, 
MCI
, "Unknow¿GPM COEX mesßgê0x%02x\n", 
›code
);

430 i‡(
upd©e_scheme
)

431 
	`õì80211_queue_w‹k
(
sc
->
hw
, &sc->
mci_w‹k
);

432 
	}
}

434 
	$©h_mci_£tup
(
©h_so·c
 *
sc
)

436 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

437 
©h_mci_c€x
 *
mci
 = &
sc
->
mci_c€x
;

438 
©h_mci_buf
 *
buf
 = &
mci
->
sched_buf
;

439 
ªt
;

441 
buf
->
bf_addr
 = 
	`dmam_Æloc_cohîít
(
sc
->
dev
,

442 
ATH_MCI_SCHED_BUF_SIZE
 + 
ATH_MCI_GPM_BUF_SIZE
,

443 &
buf
->
bf_∑ddr
, 
GFP_KERNEL
);

445 i‡(
buf
->
bf_addr
 =
NULL
) {

446 
	`©h_dbg
(
comm⁄
, 
FATAL
, "MCI bufferálloc failed\n");

447  -
ENOMEM
;

450 
	`mem£t
(
buf
->
bf_addr
, 
MCI_GPM_RSVD_PATTERN
,

451 
ATH_MCI_SCHED_BUF_SIZE
 + 
ATH_MCI_GPM_BUF_SIZE
);

453 
mci
->
sched_buf
.
bf_Àn
 = 
ATH_MCI_SCHED_BUF_SIZE
;

455 
mci
->
gpm_buf
.
bf_Àn
 = 
ATH_MCI_GPM_BUF_SIZE
;

456 
mci
->
gpm_buf
.
bf_addr
 = (
u8
 *)mci->
sched_buf
.bf_add∏+ mci->sched_buf.
bf_Àn
;

457 
mci
->
gpm_buf
.
bf_∑ddr
 = mci->
sched_buf
.bf_∑dd∏+ mci->sched_buf.
bf_Àn
;

459 
ªt
 = 
	`¨9003_mci_£tup
(
sc
->
sc_ah
, 
mci
->
gpm_buf
.
bf_∑ddr
,

460 
mci
->
gpm_buf
.
bf_addr
, (mci->gpm_buf.
bf_Àn
 >> 4),

461 
mci
->
sched_buf
.
bf_∑ddr
);

462 i‡(
ªt
) {

463 
	`©h_îr
(
comm⁄
, "FailedÅo initialize MCI\n");

464  
ªt
;

467 
	`INIT_WORK
(&
sc
->
mci_w‹k
, 
©h9k_mci_w‹k
);

468 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI Initialized\n");

471 
	}
}

473 
	$©h_mci_˛ónup
(
©h_so·c
 *
sc
)

475 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

476 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

478 
	`¨9003_mci_˛ónup
(
ah
);

480 
	`©h_dbg
(
comm⁄
, 
MCI
, "MCI De-Initialized\n");

481 
	}
}

483 
	$©h_mci_öå
(
©h_so·c
 *
sc
)

485 
©h_mci_c€x
 *
mci
 = &
sc
->
mci_c€x
;

486 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

487 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

488 
©h9k_hw_mci
 *
mci_hw
 = &
ah
->
btc€x_hw
.
mci
;

489 
u32
 
mci_öt
, 
mci_öt_rxmsg
;

490 
u32
 
off£t
, 
subty≥
, 
›code
;

491 
u32
 *
pgpm
;

492 
u32
 
m‹e_d©a
 = 
MCI_GPM_MORE
;

493 
boﬁ
 
skù_gpm
 = 
Ál£
;

495 
	`¨9003_mci_gë_öãºu±
(
sc
->
sc_ah
, &
mci_öt
, &
mci_öt_rxmsg
);

497 i‡(
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_ENABLE
) == 0) {

498 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_INIT_GPM_OFFSET
);

502 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
) {

503 
u32
 
∑ylﬂd
[4] = { 0xffffffff, 0xffffffff,

511 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_REMOTE_RESET
, 0,

512 
∑ylﬂd
, 16, 
åue
, 
Ál£
);

513 
	`¨9003_mci_£nd_mesßge
(
ah
, 
MCI_SYS_WAKING
, 0,

514 
NULL
, 0, 
åue
, 
Ál£
);

516 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
;

517 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_RESET_REQ_WAKE
);

522 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_SET_BT_AWAKE
);

525 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
) {

526 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
;

528 i‡((
mci_hw
->
bt_°©e
 =
MCI_BT_SLEEP
) &&

529 (
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_REMOTE_SLEEP
) !=

530 
MCI_BT_SLEEP
))

531 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_SET_BT_AWAKE
);

534 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING
) {

535 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING
;

537 i‡((
mci_hw
->
bt_°©e
 =
MCI_BT_AWAKE
) &&

538 (
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_REMOTE_SLEEP
) !=

539 
MCI_BT_AWAKE
))

540 
mci_hw
->
bt_°©e
 = 
MCI_BT_SLEEP
;

543 i‡((
mci_öt
 & 
AR_MCI_INTERRUPT_RX_INVALID_HDR
) ||

544 (
mci_öt
 & 
AR_MCI_INTERRUPT_CONT_INFO_TIMEOUT
)) {

545 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_RECOVER_RX
);

546 
skù_gpm
 = 
åue
;

549 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_SCHD_INFO
) {

550 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_SCHD_INFO
;

551 
off£t
 = 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_LAST_SCHD_MSG_OFFSET
);

554 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_GPM
) {

555 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_GPM
;

557 
m‹e_d©a
 =
MCI_GPM_MORE
) {

558 i‡(
	`ã°_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
))

561 
pgpm
 = 
mci
->
gpm_buf
.
bf_addr
;

562 
off£t
 = 
	`¨9003_mci_gë_√xt_gpm_off£t
(
ah
, &
m‹e_d©a
);

564 i‡(
off£t
 =
MCI_GPM_INVALID
)

567 
pgpm
 +(
off£t
 >> 2);

573 
subty≥
 = 
	`MCI_GPM_TYPE
(
pgpm
);

574 
›code
 = 
	`MCI_GPM_OPCODE
(
pgpm
);

576 i‡(
skù_gpm
)

577 
ªcy˛e
;

579 i‡(
	`MCI_GPM_IS_CAL_TYPE
(
subty≥
)) {

580 
	`©h_mci_ˇl_msg
(
sc
, 
subty≥
, (
u8
 *)
pgpm
);

582 
subty≥
) {

583 
MCI_GPM_COEX_AGENT
:

584 
	`©h_mci_msg
(
sc
, 
›code
, (
u8
 *)
pgpm
);

590 
ªcy˛e
:

591 
	`MCI_GPM_RECYCLE
(
pgpm
);

595 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_HW_MSG_MASK
) {

596 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_LNA_CONTROL
)

597 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_LNA_CONTROL
;

599 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_LNA_INFO
)

600 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_LNA_INFO
;

602 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_CONT_INFO
) {

603 
vÆue_dbm
 = 
	`MS
(
mci_hw
->
c⁄t_°©us
,

604 
AR_MCI_CONT_RSSI_POWER
);

606 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_CONT_INFO
;

608 
	`©h_dbg
(
comm⁄
, 
MCI
,

610 
	`MS
(
mci_hw
->
c⁄t_°©us
, 
AR_MCI_CONT_TXRX
) ?

612 
	`MS
(
mci_hw
->
c⁄t_°©us
, 
AR_MCI_CONT_PRIORITY
),

613 
vÆue_dbm
);

616 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_CONT_NACK
)

617 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_CONT_NACK
;

619 i‡(
mci_öt_rxmsg
 & 
AR_MCI_INTERRUPT_RX_MSG_CONT_RST
)

620 
mci_öt_rxmsg
 &~
AR_MCI_INTERRUPT_RX_MSG_CONT_RST
;

623 i‡((
mci_öt
 & 
AR_MCI_INTERRUPT_RX_INVALID_HDR
) ||

624 (
mci_öt
 & 
AR_MCI_INTERRUPT_CONT_INFO_TIMEOUT
)) {

625 
mci_öt
 &~(
AR_MCI_INTERRUPT_RX_INVALID_HDR
 |

626 
AR_MCI_INTERRUPT_CONT_INFO_TIMEOUT
);

627 
	`©h_mci_msg
(
sc
, 
MCI_GPM_COEX_NOOP
, 
NULL
);

629 
	}
}

631 
	$©h_mci_íabÀ
(
©h_so·c
 *
sc
)

633 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

635 i‡(!
comm⁄
->
btc€x_íabÀd
)

638 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_MCI
)

639 
sc
->
sc_ah
->
imask
 |
ATH9K_INT_MCI
;

640 
	}
}

642 
	$©h9k_mci_upd©e_wœn_ch™√ls
(
©h_so·c
 *
sc
, 
boﬁ
 
Ælow_Æl
)

644 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

645 
©h9k_hw_mci
 *
mci
 = &
ah
->
btc€x_hw
.mci;

646 
©h9k_ch™√l
 *
ch™
 = 
ah
->
curch™
;

647 
u32
 
ch™√lm≠
[] = {0x00000000, 0xffff0000, 0xffffffff, 0x7fffffff};

648 
i
;

649 
s16
 
ch™_°¨t
, 
ch™_íd
;

650 
u16
 
wœn_ch™
;

652 i‡(!
ch™
 || !
	`IS_CHAN_2GHZ
(chan))

655 i‡(
Ælow_Æl
)

656 
£nd_wœn_ch™
;

658 
wœn_ch™
 = 
ch™
->
ch™√l
 - 2402;

660 
ch™_°¨t
 = 
wœn_ch™
 - 10;

661 
ch™_íd
 = 
wœn_ch™
 + 10;

663 i‡(
	`IS_CHAN_HT40PLUS
(
ch™
))

664 
ch™_íd
 += 20;

665 i‡(
	`IS_CHAN_HT40MINUS
(
ch™
))

666 
ch™_°¨t
 -= 20;

669 
ch™_°¨t
 -= 7;

670 
ch™_íd
 += 7;

672 i‡(
ch™_°¨t
 <= 0)

673 
ch™_°¨t
 = 0;

674 i‡(
ch™_íd
 >
ATH_MCI_NUM_BT_CHANNELS
)

675 
ch™_íd
 = 
ATH_MCI_NUM_BT_CHANNELS
 - 1;

677 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
ah
), 
MCI
,

679 
wœn_ch™
, 
ch™_°¨t
, 
ch™_íd
);

681 
i
 = 
ch™_°¨t
; i < 
ch™_íd
; i++)

682 
	`MCI_GPM_CLR_CHANNEL_BIT
(&
ch™√lm≠
, 
i
);

684 
£nd_wœn_ch™
:

686 
i
 = 0; i < 4; i++)

687 
mci
->
wœn_ch™√ls
[
i
] = 
ch™√lm≠
[i];

688 
	`¨9003_mci_£nd_wœn_ch™√ls
(
ah
);

689 
	`¨9003_mci_°©e
(
ah
, 
MCI_STATE_SEND_VERSION_QUERY
);

690 
	}
}

692 
	$©h9k_mci_£t_txpowî
(
©h_so·c
 *
sc
, 
boﬁ
 
£tch™√l
,

693 
boﬁ
 
c⁄cur_tx
)

695 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

696 
©h9k_hw_mci
 *
mci_hw
 = &
sc
->
sc_ah
->
btc€x_hw
.
mci
;

697 
boﬁ
 
ﬁd_c⁄cur_tx
 = 
mci_hw
->
c⁄cur_tx
;

699 i‡(!(
mci_hw
->
c⁄fig
 & 
ATH_MCI_CONFIG_CONCUR_TX
)) {

700 
mci_hw
->
c⁄cur_tx
 = 
Ál£
;

704 i‡(!
	`IS_CHAN_2GHZ
(
ah
->
curch™
))

707 i‡(
£tch™√l
) {

708 
©h9k_hw_ˇl_d©a
 *
ˇld©a
 = &
sc
->
cur_ch™
->caldata;

709 i‡(
	`IS_CHAN_HT40PLUS
(
ah
->
curch™
) &&

710 (
ah
->
curch™
->
ch™√l
 > 
ˇld©a
->channel) &&

711 (
ah
->
curch™
->
ch™√l
 <
ˇld©a
->channel + 20))

713 i‡(
	`IS_CHAN_HT40MINUS
(
ah
->
curch™
) &&

714 (
ah
->
curch™
->
ch™√l
 < 
ˇld©a
->channel) &&

715 (
ah
->
curch™
->
ch™√l
 >
ˇld©a
->channel - 20))

717 
mci_hw
->
c⁄cur_tx
 = 
Ál£
;

719 
mci_hw
->
c⁄cur_tx
 = concur_tx;

721 i‡(
ﬁd_c⁄cur_tx
 !
mci_hw
->
c⁄cur_tx
)

722 
	`©h9k_hw_£t_txpowîlimô
(
ah
, 
sc
->
cur_ch™
->
txpowî
, 
Ál£
);

723 
	}
}

725 
	$©h9k_mci_°omp_audio
(
©h_so·c
 *
sc
)

727 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

728 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

729 
©h_mci_¥ofûe
 *
mci
 = &
btc€x
->mci;

731 i‡(!
mci
->
num_sco
 && !mci->
num_a2dp
)

734 i‡(
ah
->
°©s
.
avgbrssi
 > 25) {

735 
btc€x
->
°omp_audio
 = 0;

739 
btc€x
->
°omp_audio
++;

740 
	}
}

741 
	$©h9k_mci_upd©e_rssi
(
©h_so·c
 *
sc
)

743 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

744 
©h_btc€x
 *
btc€x
 = &
sc
->btcoex;

745 
©h9k_hw_mci
 *
mci_hw
 = &
sc
->
sc_ah
->
btc€x_hw
.
mci
;

747 
	`©h9k_mci_°omp_audio
(
sc
);

749 i‡(!(
mci_hw
->
c⁄fig
 & 
ATH_MCI_CONFIG_CONCUR_TX
))

752 i‡(
ah
->
°©s
.
avgbrssi
 >= 40) {

753 i‡(
btc€x
->
rssi_cou¡
 < 0)

754 
btc€x
->
rssi_cou¡
 = 0;

755 i‡(++
btc€x
->
rssi_cou¡
 >
ATH_MCI_CONCUR_TX_SWITCH
) {

756 
btc€x
->
rssi_cou¡
 = 0;

757 
	`©h9k_mci_£t_txpowî
(
sc
, 
Ál£
, 
åue
);

760 i‡(
btc€x
->
rssi_cou¡
 > 0)

761 
btc€x
->
rssi_cou¡
 = 0;

762 i‡(--
btc€x
->
rssi_cou¡
 <-
ATH_MCI_CONCUR_TX_SWITCH
) {

763 
btc€x
->
rssi_cou¡
 = 0;

764 
	`©h9k_mci_£t_txpowî
(
sc
, 
Ál£
, false);

767 
	}
}

	@mci.h

17 #i‚de‡
MCI_H


18 
	#MCI_H


	)

20 
	~"¨9003_mci.h
"

22 
	#ATH_MCI_SCHED_BUF_SIZE
 (16 * 16Ë

	)

23 
	#ATH_MCI_GPM_MAX_ENTRY
 16

	)

24 
	#ATH_MCI_GPM_BUF_SIZE
 (
ATH_MCI_GPM_MAX_ENTRY
 * 16)

	)

25 
	#ATH_MCI_DEF_BT_PERIOD
 40

	)

26 
	#ATH_MCI_BDR_DUTY_CYCLE
 20

	)

27 
	#ATH_MCI_MAX_DUTY_CYCLE
 90

	)

29 
	#ATH_MCI_DEF_AGGR_LIMIT
 6

	)

30 
	#ATH_MCI_MAX_ACL_PROFILE
 7

	)

31 
	#ATH_MCI_MAX_SCO_PROFILE
 1

	)

32 
	#ATH_MCI_MAX_PROFILE
 (
ATH_MCI_MAX_ACL_PROFILE
 +\

33 
ATH_MCI_MAX_SCO_PROFILE
)

	)

35 
	#ATH_MCI_INQUIRY_PRIO
 62

	)

36 
	#ATH_MCI_HI_PRIO
 60

	)

37 
	#ATH_MCI_NUM_BT_CHANNELS
 79

	)

38 
	#ATH_MCI_CONCUR_TX_SWITCH
 5

	)

40 
	#MCI_GPM_SET_CHANNEL_BIT
(
_p_gpm
, 
_bt_ch™
) \

42 i‡(
_bt_ch™
 < 
ATH_MCI_NUM_BT_CHANNELS
) { \

43 *(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_CHANNEL_MAP
 + \

44 (
_bt_ch™
 / 8)) |= (1 << (_bt_chan & 7)); \

46 } 0)

	)

48 
	#MCI_GPM_CLR_CHANNEL_BIT
(
_p_gpm
, 
_bt_ch™
) \

50 i‡(
_bt_ch™
 < 
ATH_MCI_NUM_BT_CHANNELS
) { \

51 *(((
u8
 *)(
_p_gpm
)Ë+ 
MCI_GPM_COEX_B_CHANNEL_MAP
 + \

52 (
_bt_ch™
 / 8)) &= ~(1 << (_bt_chan & 7));\

54 } 0)

	)

56 
	#INC_PROF
(
_mci
, 
_öfo
) do { \

57 
_öfo
->
ty≥
) { \

58 
MCI_GPM_COEX_PROFILE_RFCOMM
:\

59 
_mci
->
num_Ÿhî_a˛
++; \

61 
MCI_GPM_COEX_PROFILE_A2DP
: \

62 
_mci
->
num_a2dp
++; \

63 i‡(!
_öfo
->
edr
) \

64 
_mci
->
num_bdr
++; \

66 
MCI_GPM_COEX_PROFILE_HID
: \

67 
_mci
->
num_hid
++; \

69 
MCI_GPM_COEX_PROFILE_BNEP
: \

70 
_mci
->
num_∑n
++; \

72 
MCI_GPM_COEX_PROFILE_VOICE
: \

73 
MCI_GPM_COEX_PROFILE_A2DPVO
:\

74 
_mci
->
num_sco
++; \

79 } 0)

	)

81 
	#DEC_PROF
(
_mci
, 
_öfo
) do { \

82 
_öfo
->
ty≥
) { \

83 
MCI_GPM_COEX_PROFILE_RFCOMM
:\

84 
_mci
->
num_Ÿhî_a˛
--; \

86 
MCI_GPM_COEX_PROFILE_A2DP
: \

87 
_mci
->
num_a2dp
--; \

88 i‡(!
_öfo
->
edr
) \

89 
_mci
->
num_bdr
--; \

91 
MCI_GPM_COEX_PROFILE_HID
: \

92 
_mci
->
num_hid
--; \

94 
MCI_GPM_COEX_PROFILE_BNEP
: \

95 
_mci
->
num_∑n
--; \

97 
MCI_GPM_COEX_PROFILE_VOICE
: \

98 
MCI_GPM_COEX_PROFILE_A2DPVO
:\

99 
_mci
->
num_sco
--; \

104 } 0)

	)

106 
	#NUM_PROF
(
_mci
Ë(_mci->
num_Ÿhî_a˛
 + _mci->
num_a2dp
 + \

107 
_mci
->
num_hid
 + _mci->
num_∑n
 + _mci->
num_sco
)

	)

109 
	s©h_mci_¥ofûe_öfo
 {

110 
u8
 
	mty≥
;

111 
u8
 
	mc⁄n_h™dÀ
;

112 
boﬁ
 
	m°¨t
;

113 
boﬁ
 
	mma°î
;

114 
boﬁ
 
	medr
;

115 
u8
 
	mvoi˚_ty≥
;

116 
u16
 
	mT
;

117 
u8
 
	mW
;

118 
u8
 
	mA
;

119 
li°_hód
 
	mli°
;

122 
	s©h_mci_¥ofûe_°©us
 {

123 
boﬁ
 
	mis_¸ôiˇl
;

124 
boﬁ
 
	mis_lök
;

125 
u8
 
	mc⁄n_h™dÀ
;

128 
	s©h_mci_¥ofûe
 {

129 
li°_hód
 
	möfo
;

130 
DECLARE_BITMAP
(
°©us
, 
ATH_MCI_MAX_PROFILE
);

131 
u16
 
	maggr_limô
;

132 
u8
 
	mnum_mgmt
;

133 
u8
 
	mnum_sco
;

134 
u8
 
	mnum_a2dp
;

135 
u8
 
	mnum_hid
;

136 
u8
 
	mnum_∑n
;

137 
u8
 
	mnum_Ÿhî_a˛
;

138 
u8
 
	mnum_bdr
;

139 
u8
 
	mvoi˚_¥i‹ôy
;

142 
	s©h_mci_buf
 {

143 *
	mbf_addr
;

144 
dma_addr_t
 
	mbf_∑ddr
;

145 
u32
 
	mbf_Àn
;

148 
	s©h_mci_c€x
 {

149 
©h_mci_buf
 
	msched_buf
;

150 
©h_mci_buf
 
	mgpm_buf
;

153 
©h_mci_Êush_¥ofûe
(
©h_mci_¥ofûe
 *
mci
);

154 
©h_mci_£tup
(
©h_so·c
 *
sc
);

155 
©h_mci_˛ónup
(
©h_so·c
 *
sc
);

156 
©h_mci_öå
(
©h_so·c
 *
sc
);

157 
©h9k_mci_upd©e_rssi
(
©h_so·c
 *
sc
);

159 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


160 
©h_mci_íabÀ
(
©h_so·c
 *
sc
);

161 
©h9k_mci_upd©e_wœn_ch™√ls
(
©h_so·c
 *
sc
, 
boﬁ
 
Ælow_Æl
);

162 
©h9k_mci_£t_txpowî
(
©h_so·c
 *
sc
, 
boﬁ
 
£tch™√l
,

163 
boﬁ
 
c⁄cur_tx
);

165 
ölöe
 
	$©h_mci_íabÀ
(
©h_so·c
 *
sc
)

167 
	}
}

168 
ölöe
 
	$©h9k_mci_upd©e_wœn_ch™√ls
(
©h_so·c
 *
sc
,

169 
boﬁ
 
Ælow_Æl
)

171 
	}
}

172 
ölöe
 
	$©h9k_mci_£t_txpowî
(
©h_so·c
 *
sc
, 
boﬁ
 
£tch™√l
,

173 
boﬁ
 
c⁄cur_tx
)

175 
	}
}

	@pci.c

17 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

19 
	~<löux/∆80211.h
>

20 
	~<löux/pci.h
>

21 
	~<löux/pci-a•m.h
>

22 
	~<löux/©h9k_∂©f‹m.h
>

23 
	~<löux/moduÀ.h
>

24 
	~"©h9k.h
"

26 c⁄° 
pci_devi˚_id
 
	g©h_pci_id_èbÀ
[] = {

27 { 
PCI_VDEVICE
(
ATHEROS
, 0x0023) },

28 { 
PCI_VDEVICE
(
ATHEROS
, 0x0024) },

29 { 
PCI_VDEVICE
(
ATHEROS
, 0x0027) },

31 #ifde‡
CONFIG_ATH9K_PCOEM


33 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

35 
PCI_VENDOR_ID_ATHEROS
,

37 .
drivî_d©a
 = 
ATH9K_PCI_LED_ACT_HI
 },

40 { 
PCI_VDEVICE
(
ATHEROS
, 0x0029) },

42 #ifde‡
CONFIG_ATH9K_PCOEM


43 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

45 
PCI_VENDOR_ID_AZWAVE
,

47 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

48 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

50 
PCI_VENDOR_ID_FOXCONN
,

52 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

53 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

57 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

58 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

62 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

63 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

65 
PCI_VENDOR_ID_QMI
,

67 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

68 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

72 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

73 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

77 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

78 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

82 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

83 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

87 .
	gdrivî_d©a
 = 
ATH9K_PCI_D3_L1_WAR
 },

90 { 
PCI_VDEVICE
(
ATHEROS
, 0x002A) },

92 #ifde‡
CONFIG_ATH9K_PCOEM


94 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

96 
PCI_VENDOR_ID_AZWAVE
,

98 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

101 { 
PCI_VDEVICE
(
ATHEROS
, 0x002B) },

102 { 
PCI_VDEVICE
(
ATHEROS
, 0x002C) },

103 { 
PCI_VDEVICE
(
ATHEROS
, 0x002D) },

104 { 
PCI_VDEVICE
(
ATHEROS
, 0x002E) },

107 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

111 .
	gdrivî_d©a
 = 
ATH9K_PCI_KILLER
 },

112 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

116 .
	gdrivî_d©a
 = 
ATH9K_PCI_KILLER
 },

118 { 
PCI_VDEVICE
(
ATHEROS
, 0x0030) },

120 #ifde‡
CONFIG_ATH9K_PCOEM


122 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

124 
PCI_VENDOR_ID_AZWAVE
,

126 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS198
 | 
ATH9K_PCI_BT_ANT_DIV
 },

127 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

129 
PCI_VENDOR_ID_AZWAVE
,

131 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS198
 | 
ATH9K_PCI_BT_ANT_DIV
 },

132 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

134 
PCI_VENDOR_ID_AZWAVE
,

136 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS198
 | 
ATH9K_PCI_BT_ANT_DIV
 },

137 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

139 
PCI_VENDOR_ID_AZWAVE
,

141 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS198
 | 
ATH9K_PCI_BT_ANT_DIV
 },

144 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

146 
PCI_VENDOR_ID_AZWAVE
,

148 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS230
 | 
ATH9K_PCI_BT_ANT_DIV
 },

149 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

151 
PCI_VENDOR_ID_FOXCONN
,

153 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS230
 | 
ATH9K_PCI_BT_ANT_DIV
 },

156 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

158 
PCI_VENDOR_ID_ATHEROS
,

160 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

161 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

163 
PCI_VENDOR_ID_ATHEROS
,

165 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

166 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

170 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

171 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

175 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

176 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

178 
PCI_VENDOR_ID_SAMSUNG
,

180 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

181 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

183 
PCI_VENDOR_ID_SAMSUNG
,

185 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

186 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

188 
PCI_VENDOR_ID_SAMSUNG
,

190 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

191 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

193 
PCI_VENDOR_ID_SAMSUNG
,

195 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

196 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

198 
PCI_VENDOR_ID_SAMSUNG
,

200 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

201 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

203 
PCI_VENDOR_ID_SAMSUNG
,

205 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

206 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

208 
PCI_VENDOR_ID_SAMSUNG
,

210 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

211 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

213 
PCI_VENDOR_ID_SAMSUNG
,

215 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

216 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

218 
PCI_VENDOR_ID_LENOVO
,

220 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

221 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

223 
PCI_VENDOR_ID_LENOVO
,

225 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

228 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

230 
PCI_VENDOR_ID_AZWAVE
,

232 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

233 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

235 
PCI_VENDOR_ID_AZWAVE
,

237 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

238 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

242 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

243 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

247 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

248 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

252 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

253 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

255 
PCI_VENDOR_ID_FOXCONN
,

257 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

258 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

260 
PCI_VENDOR_ID_FOXCONN
,

262 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

263 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

267 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

268 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

272 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

273 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

277 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

278 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

280 
PCI_VENDOR_ID_AZWAVE
,

282 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

283 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

285 
PCI_VENDOR_ID_AZWAVE
,

287 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

288 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

290 
PCI_VENDOR_ID_AZWAVE
,

292 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

293 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

295 
PCI_VENDOR_ID_AZWAVE
,

297 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

298 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

302 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

303 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

307 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

308 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

310 
PCI_VENDOR_ID_ASUSTEK
,

312 .
	gdrivî_d©a
 = 
ATH9K_PCI_NO_PLL_PWRSAVE
 },

315 { 
PCI_VDEVICE
(
ATHEROS
, 0x0032) },

316 { 
PCI_VDEVICE
(
ATHEROS
, 0x0033) },

318 #ifde‡
CONFIG_ATH9K_PCOEM


320 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

322 
PCI_VENDOR_ID_AZWAVE
,

324 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS217
 },

325 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

329 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS217
 },

332 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

334 
PCI_VENDOR_ID_ATHEROS
,

336 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

337 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

339 
PCI_VENDOR_ID_LENOVO
,

341 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

342 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

344 
PCI_VENDOR_ID_ATTANSIC
,

346 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

347 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

349 
PCI_VENDOR_ID_AZWAVE
,

351 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

352 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

354 
PCI_VENDOR_ID_ASUSTEK
,

356 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

357 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

361 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

362 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

366 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

367 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

369 
PCI_VENDOR_ID_HP
,

371 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

372 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

376 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

377 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

381 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

382 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

386 .
	gdrivî_d©a
 = 
ATH9K_PCI_WOW
 },

389 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

393 .
	gdrivî_d©a
 = 
ATH9K_PCI_KILLER
 },

395 { 
PCI_VDEVICE
(
ATHEROS
, 0x0034) },

396 { 
PCI_VDEVICE
(
ATHEROS
, 0x0037) },

399 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

401 
PCI_VENDOR_ID_ATHEROS
,

403 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS252
 |

404 
ATH9K_PCI_AR9565_2ANT
 |

405 
ATH9K_PCI_BT_ANT_DIV
 },

406 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

408 
PCI_VENDOR_ID_AZWAVE
,

410 .
	gdrivî_d©a
 = 
ATH9K_PCI_CUS252
 |

411 
ATH9K_PCI_AR9565_2ANT
 |

412 
ATH9K_PCI_BT_ANT_DIV
 },

415 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

417 
PCI_VENDOR_ID_FOXCONN
,

419 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

420 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

424 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

425 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

429 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

430 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

434 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

435 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

439 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

440 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

444 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

445 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

449 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

450 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

454 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

455 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

459 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

460 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

464 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

465 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

469 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

470 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

472 
PCI_VENDOR_ID_AZWAVE
,

474 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

475 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

477 
PCI_VENDOR_ID_AZWAVE
,

479 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 },

482 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

484 
PCI_VENDOR_ID_ATHEROS
,

486 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

487 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

489 
PCI_VENDOR_ID_ATHEROS
,

491 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

492 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

494 
PCI_VENDOR_ID_ATHEROS
,

496 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

497 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

499 
PCI_VENDOR_ID_FOXCONN
,

501 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

502 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

506 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

507 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

511 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

512 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

516 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

517 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

521 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

522 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

526 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

527 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

531 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

532 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

534 
PCI_VENDOR_ID_AZWAVE
,

536 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

537 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

539 
PCI_VENDOR_ID_AZWAVE
,

541 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

542 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

544 
PCI_VENDOR_ID_HP
,

546 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

547 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

549 
PCI_VENDOR_ID_HP
,

551 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

552 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

554 
PCI_VENDOR_ID_HP
,

556 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

557 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

559 
PCI_VENDOR_ID_DELL
,

561 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_1ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

564 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

566 
PCI_VENDOR_ID_SAMSUNG
,

568 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

569 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

571 
PCI_VENDOR_ID_SAMSUNG
,

573 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

574 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

576 
PCI_VENDOR_ID_SAMSUNG
,

578 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

579 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

581 
PCI_VENDOR_ID_SAMSUNG
,

583 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

584 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

586 
PCI_VENDOR_ID_SAMSUNG
,

588 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

589 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

591 
PCI_VENDOR_ID_SAMSUNG
,

593 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

594 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

596 
PCI_VENDOR_ID_SAMSUNG
,

598 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

599 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

601 
PCI_VENDOR_ID_ATHEROS
,

603 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

604 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

606 
PCI_VENDOR_ID_ATHEROS
,

608 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

609 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

613 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

614 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

618 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

619 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

623 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

624 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

628 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

629 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

633 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

634 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

638 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

639 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

643 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

644 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

648 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

649 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

651 
PCI_VENDOR_ID_AZWAVE
,

653 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

654 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

656 
PCI_VENDOR_ID_AZWAVE
,

658 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

659 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

661 
PCI_VENDOR_ID_AZWAVE
,

663 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

664 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

666 
PCI_VENDOR_ID_AZWAVE
,

668 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

669 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

671 
PCI_VENDOR_ID_AZWAVE
,

673 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

674 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

676 
PCI_VENDOR_ID_AZWAVE
,

678 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

679 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

683 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

684 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

688 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

689 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

693 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

694 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

698 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

699 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

703 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

704 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

708 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

709 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

713 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

714 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

716 
PCI_VENDOR_ID_FOXCONN
,

718 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

719 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

721 
PCI_VENDOR_ID_FOXCONN
,

723 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

724 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

726 
PCI_VENDOR_ID_FOXCONN
,

728 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

729 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

731 
PCI_VENDOR_ID_FOXCONN
,

733 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

734 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

736 
PCI_VENDOR_ID_FOXCONN
,

738 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

739 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

741 
PCI_VENDOR_ID_LENOVO
,

743 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

744 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

746 
PCI_VENDOR_ID_LENOVO
,

748 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

749 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

751 
PCI_VENDOR_ID_ASUSTEK
,

753 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 | 
ATH9K_PCI_BT_ANT_DIV
 },

754 { 
PCI_DEVICE_SUB
(
PCI_VENDOR_ID_ATHEROS
,

756 
PCI_VENDOR_ID_DELL
,

758 .
	gdrivî_d©a
 = 
ATH9K_PCI_AR9565_2ANT
 |

759 
ATH9K_PCI_BT_ANT_DIV
 |

760 
ATH9K_PCI_LED_ACT_HI
},

763 { 
PCI_VDEVICE
(
ATHEROS
, 0x0036),

764 .
	gdrivî_d©a
 = 
ATH9K_PCI_BT_ANT_DIV
 },

772 
	$©h_pci_ªad_ˇchesize
(
©h_comm⁄
 *
comm⁄
, *
csz
)

774 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

775 
u8
 
u8tmp
;

777 
	`pci_ªad_c⁄fig_byã
(
	`to_pci_dev
(
sc
->
dev
), 
PCI_CACHE_LINE_SIZE
, &
u8tmp
);

778 *
csz
 = ()
u8tmp
;

786 i‡(*
csz
 == 0)

787 *
csz
 = 
DEFAULT_CACHELINE
 >> 2;

788 
	}
}

790 
boﬁ
 
	$©h_pci_ì¥om_ªad
(
©h_comm⁄
 *
comm⁄
, 
u32
 
off
, 
u16
 *
d©a
)

792 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

793 
©h9k_∂©f‹m_d©a
 *
pd©a
 = 
sc
->
dev
->
∂©f‹m_d©a
;

795 i‡(
pd©a
 && !pd©a->
u£_ì¥om
) {

796 i‡(
off
 >(
	`ARRAY_SIZE
(
pd©a
->
ì¥om_d©a
))) {

797 
	`©h_îr
(
comm⁄
,

799 
__func__
, 
off
);

802 *
d©a
 = 
pd©a
->
ì¥om_d©a
[
off
];

804 
©h_hw
 *
ah
 = (©h_hw *Ë
comm⁄
->ah;

806 
comm⁄
->
›s
->
	`ªad
(
ah
, 
AR5416_EEPROM_OFFSET
 +

807 (
off
 << 
AR5416_EEPROM_S
));

809 i‡(!
	`©h9k_hw_waô
(
ah
,

810 
AR_EEPROM_STATUS_DATA
,

811 
AR_EEPROM_STATUS_DATA_BUSY
 |

812 
AR_EEPROM_STATUS_DATA_PROT_ACCESS
, 0,

813 
AH_WAIT_TIMEOUT
)) {

814  
Ál£
;

817 *
d©a
 = 
	`MS
(
comm⁄
->
›s
->
	`ªad
(
ah
, 
AR_EEPROM_STATUS_DATA
),

818 
AR_EEPROM_STATUS_DATA_VAL
);

821  
åue
;

822 
	}
}

825 
	$©h_pci_a•m_öô
(
©h_comm⁄
 *
comm⁄
)

827 
©h_so·c
 *
sc
 = (©h_so·¯*Ë
comm⁄
->
¥iv
;

828 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

829 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
sc
->
dev
);

830 
pci_dev
 *
∑ª¡
;

831 
u16
 
a•m
;

833 i‡(!
ah
->
is_pcõx¥ess
)

836 
∑ª¡
 = 
pdev
->
bus
->
£lf
;

837 i‡(!
∑ª¡
)

840 i‡((
	`©h9k_hw_gë_btc€x_scheme
(
ah
Ë!
ATH_BTCOEX_CFG_NONE
) &&

841 (
	`AR_SREV_9285
(
ah
))) {

843 
	`pcõ_ˇ∑bûôy_˛ór_w‹d
(
pdev
, 
PCI_EXP_LNKCTL
,

844 
PCI_EXP_LNKCTL_ASPM_L0S
 | 
PCI_EXP_LNKCTL_ASPM_L1
);

850 
	`pcõ_ˇ∑bûôy_˛ór_w‹d
(
∑ª¡
, 
PCI_EXP_LNKCTL
,

851 
PCI_EXP_LNKCTL_ASPM_L0S
 | 
PCI_EXP_LNKCTL_ASPM_L1
);

853 
	`©h_öfo
(
comm⁄
, "Disabling ASPM since BTCOEX isÉnabled\n");

870 i‡(
	`AR_SREV_9462
(
ah
))

871 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 0x70c, &
ah
->
c⁄fig
.
a•m_l1_fix
);

873 
	`pcõ_ˇ∑bûôy_ªad_w‹d
(
∑ª¡
, 
PCI_EXP_LNKCTL
, &
a•m
);

874 i‡(
a•m
 & (
PCI_EXP_LNKCTL_ASPM_L0S
 | 
PCI_EXP_LNKCTL_ASPM_L1
)) {

875 
ah
->
a•m_íabÀd
 = 
åue
;

877 
	`©h9k_hw_c⁄figpcùowîßve
(
ah
, 
Ál£
);

878 
	`©h_öfo
(
comm⁄
, "ASPMÉ«bÀd: 0x%x\n", 
a•m
);

880 
	}
}

882 c⁄° 
©h_bus_›s
 
	g©h_pci_bus_›s
 = {

883 .
©h_bus_ty≥
 = 
ATH_PCI
,

884 .
	gªad_ˇchesize
 = 
©h_pci_ªad_ˇchesize
,

885 .
	gì¥om_ªad
 = 
©h_pci_ì¥om_ªad
,

886 .
	ga•m_öô
 = 
©h_pci_a•m_öô
,

889 
	$©h_pci_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
id
)

891 
©h_so·c
 *
sc
;

892 
õì80211_hw
 *
hw
;

893 
u8
 
csz
;

894 
u32
 
vÆ
;

895 
ªt
 = 0;

896 
hw_«me
[64];

898 i‡(
	`pcim_íabÀ_devi˚
(
pdev
))

899  -
EIO
;

901 
ªt
 = 
	`pci_£t_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(32));

902 i‡(
ªt
) {

903 
	`¥_îr
("32-bit DMAÇotávailable\n");

904  
ªt
;

907 
ªt
 = 
	`pci_£t_c⁄si°ít_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(32));

908 i‡(
ªt
) {

909 
	`¥_îr
("32-bit DMA consistent DMAÉnable failed\n");

910  
ªt
;

917 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_CACHE_LINE_SIZE
, &
csz
);

918 i‡(
csz
 == 0) {

926 
csz
 = 
L1_CACHE_BYTES
 / (
u32
);

927 
	`pci_wrôe_c⁄fig_byã
(
pdev
, 
PCI_CACHE_LINE_SIZE
, 
csz
);

934 
	`pci_wrôe_c⁄fig_byã
(
pdev
, 
PCI_LATENCY_TIMER
, 0xa8);

936 
	`pci_£t_ma°î
(
pdev
);

942 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 0x40, &
vÆ
);

943 i‡((
vÆ
 & 0x0000ff00) != 0)

944 
	`pci_wrôe_c⁄fig_dw‹d
(
pdev
, 0x40, 
vÆ
 & 0xffff00ff);

946 
ªt
 = 
	`pcim_iom≠_ªgi⁄s
(
pdev
, 
	`BIT
(0), "ath9k");

947 i‡(
ªt
) {

948 
	`dev_îr
(&
pdev
->
dev
, "PCI memoryÑegionÑeserveÉrror\n");

949  -
ENODEV
;

952 
	`©h9k_fûl_ch™˘x_›s
();

953 
hw
 = 
	`õì80211_Æloc_hw
((
©h_so·c
), &
©h9k_›s
);

954 i‡(!
hw
) {

955 
	`dev_îr
(&
pdev
->
dev
, "No memory for ieee80211_hw\n");

956  -
ENOMEM
;

959 
	`SET_IEEE80211_DEV
(
hw
, &
pdev
->
dev
);

960 
	`pci_£t_drvd©a
(
pdev
, 
hw
);

962 
sc
 = 
hw
->
¥iv
;

963 
sc
->
hw
 = hw;

964 
sc
->
dev
 = &
pdev
->dev;

965 
sc
->
mem
 = 
	`pcim_iom≠_èbÀ
(
pdev
)[0];

966 
sc
->
drivî_d©a
 = 
id
->driver_data;

968 
ªt
 = 
	`ªque°_úq
(
pdev
->
úq
, 
©h_i§
, 
IRQF_SHARED
, "©h9k", 
sc
);

969 i‡(
ªt
) {

970 
	`dev_îr
(&
pdev
->
dev
, "request_irq failed\n");

971 
îr_úq
;

974 
sc
->
úq
 = 
pdev
->irq;

976 
ªt
 = 
	`©h9k_öô_devi˚
(
id
->
devi˚
, 
sc
, &
©h_pci_bus_›s
);

977 i‡(
ªt
) {

978 
	`dev_îr
(&
pdev
->
dev
, "FailedÅo initialize device\n");

979 
îr_öô
;

982 
	`©h9k_hw_«me
(
sc
->
sc_ah
, 
hw_«me
, (hw_name));

983 
	`wùhy_öfo
(
hw
->
wùhy
, "%s mem=0x%lx, irq=%d\n",

984 
hw_«me
, ()
sc
->
mem
, 
pdev
->
úq
);

988 
îr_öô
:

989 
	`‰ì_úq
(
sc
->
úq
, sc);

990 
îr_úq
:

991 
	`õì80211_‰ì_hw
(
hw
);

992  
ªt
;

993 
	}
}

995 
	$©h_pci_ªmove
(
pci_dev
 *
pdev
)

997 
õì80211_hw
 *
hw
 = 
	`pci_gë_drvd©a
(
pdev
);

998 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1000 i‡(!
is_©h9k_u∆ﬂded
)

1001 
sc
->
sc_ah
->
ah_Êags
 |
AH_UNPLUGGED
;

1002 
	`©h9k_deöô_devi˚
(
sc
);

1003 
	`‰ì_úq
(
sc
->
úq
, sc);

1004 
	`õì80211_‰ì_hw
(
sc
->
hw
);

1005 
	}
}

1007 #ifde‡
CONFIG_PM_SLEEP


1009 
	$©h_pci_su•íd
(
devi˚
 *device)

1011 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
devi˚
);

1012 
õì80211_hw
 *
hw
 = 
	`pci_gë_drvd©a
(
pdev
);

1013 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1014 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1016 i‡(
	`ã°_bô
(
ATH_OP_WOW_ENABLED
, &
comm⁄
->
›_Êags
)) {

1017 
	`dev_öfo
(&
pdev
->
dev
, "WOW isÉnabled, bypassing PCI suspend\n");

1025 
	`©h9k_°›_btc€x
(
sc
);

1026 
	`©h9k_hw_dißbÀ
(
sc
->
sc_ah
);

1027 
	`dñ_timî_sync
(&
sc
->
¶ìp_timî
);

1028 
	`©h9k_hw_£çowî
(
sc
->
sc_ah
, 
ATH9K_PM_FULL_SLEEP
);

1031 
	}
}

1033 
	$©h_pci_ªsume
(
devi˚
 *device)

1035 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
devi˚
);

1036 
õì80211_hw
 *
hw
 = 
	`pci_gë_drvd©a
(
pdev
);

1037 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1038 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1039 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1040 
u32
 
vÆ
;

1047 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 0x40, &
vÆ
);

1048 i‡((
vÆ
 & 0x0000ff00) != 0)

1049 
	`pci_wrôe_c⁄fig_dw‹d
(
pdev
, 0x40, 
vÆ
 & 0xffff00ff);

1051 
	`©h_pci_a•m_öô
(
comm⁄
);

1052 
ah
->
ª£t_powî_⁄
 = 
Ál£
;

1055 
	}
}

1057 
SIMPLE_DEV_PM_OPS
(
©h9k_pm_›s
, 
©h_pci_su•íd
, 
©h_pci_ªsume
);

1059 
	#ATH9K_PM_OPS
 (&
©h9k_pm_›s
)

	)

1063 
	#ATH9K_PM_OPS
 
NULL


	)

1068 
MODULE_DEVICE_TABLE
(
pci
, 
©h_pci_id_èbÀ
);

1070 
pci_drivî
 
	g©h_pci_drivî
 = {

1071 .
«me
 = "ath9k",

1072 .
	gid_èbÀ
 = 
©h_pci_id_èbÀ
,

1073 .
	g¥obe
 = 
©h_pci_¥obe
,

1074 .
	gªmove
 = 
©h_pci_ªmove
,

1075 .
	gdrivî
.
	gpm
 = 
ATH9K_PM_OPS
,

1078 
	$©h_pci_öô
()

1080  
	`pci_ªgi°î_drivî
(&
©h_pci_drivî
);

1081 
	}
}

1083 
	$©h_pci_exô
()

1085 
	`pci_uƒegi°î_drivî
(&
©h_pci_drivî
);

1086 
	}
}

	@phy.h

17 #i‚de‡
PHY_H


18 
	#PHY_H


	)

20 
	#CHANSEL_DIV
 15

	)

21 
	#CHANSEL_2G
(
_‰eq
Ë(((_‰eqË* 0x10000Ë/ 
CHANSEL_DIV
)

	)

22 
	#CHANSEL_5G
(
_‰eq
Ë(((_‰eqË* 0x8000Ë/ 
CHANSEL_DIV
)

	)

24 
	#AR_PHY_BASE
 0x9800

	)

25 
	#AR_PHY
(
_n
Ë(
AR_PHY_BASE
 + ((_n)<<2))

	)

27 
	#AR_PHY_TX_PWRCTRL_TX_GAIN_TAB_MAX
 0x0007E000

	)

28 
	#AR_PHY_TX_PWRCTRL_TX_GAIN_TAB_MAX_S
 13

	)

29 
	#AR_PHY_TX_GAIN_CLC
 0x0000001E

	)

30 
	#AR_PHY_TX_GAIN_CLC_S
 1

	)

31 
	#AR_PHY_TX_GAIN
 0x0007F000

	)

32 
	#AR_PHY_TX_GAIN_S
 12

	)

34 
	#AR_PHY_CLC_TBL1
 0xa35c

	)

35 
	#AR_PHY_CLC_I0
 0x07ff0000

	)

36 
	#AR_PHY_CLC_I0_S
 16

	)

37 
	#AR_PHY_CLC_Q0
 0x0000ffd0

	)

38 
	#AR_PHY_CLC_Q0_S
 5

	)

40 
	#ANTSWAP_AB
 0x0001

	)

41 
	#REDUCE_CHAIN_0
 0x00000050

	)

42 
	#REDUCE_CHAIN_1
 0x00000051

	)

43 
	#AR_PHY_CHIP_ID
 0x9818

	)

45 
	#AR_PHY_TIMING11_SPUR_FREQ_SD
 0x3FF00000

	)

46 
	#AR_PHY_TIMING11_SPUR_FREQ_SD_S
 20

	)

48 
	#AR_PHY_PLL_CONTROL
 0x16180

	)

49 
	#AR_PHY_PLL_MODE
 0x16184

	)

51 
	e©h9k_™t_div_comb_ a_c⁄f
 {

52 
	mATH_ANT_DIV_COMB_LNA1_MINUS_LNA2
,

53 
	mATH_ANT_DIV_COMB_LNA2
,

54 
	mATH_ANT_DIV_COMB_LNA1
,

55 
	mATH_ANT_DIV_COMB_LNA1_PLUS_LNA2
,

	@recv.c

17 
	~<löux/dma-m≠pög.h
>

18 
	~"©h9k.h
"

19 
	~"¨9003_mac.h
"

21 
	#SKB_CB_ATHBUF
(
__skb
Ë(*((
©h_rxbuf
 **)__skb->
cb
))

	)

23 
ölöe
 
boﬁ
 
	$©h9k_check_auto_¶ìp
(
©h_so·c
 *
sc
)

25  
sc
->
ps_íabÀd
 &&

26 (
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_AUTOSLEEP
);

27 
	}
}

37 
	$©h_rx_buf_lök
(
©h_so·c
 *
sc
, 
©h_rxbuf
 *
bf
,

38 
boﬁ
 
Êush
)

40 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

41 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

42 
©h_desc
 *
ds
;

43 
sk_buff
 *
skb
;

45 
ds
 = 
bf
->
bf_desc
;

46 
ds
->
ds_lök
 = 0;

47 
ds
->
ds_d©a
 = 
bf
->
bf_buf_addr
;

50 
skb
 = 
bf
->
bf_mpdu
;

51 
	`BUG_ON
(
skb
 =
NULL
);

52 
ds
->
ds_vd©a
 = 
skb
->
d©a
;

59 
	`©h9k_hw_£tu¥xdesc
(
ah
, 
ds
,

60 
comm⁄
->
rx_bufsize
,

63 i‡(
sc
->
rx
.
rxlök
)

64 *
sc
->
rx
.
rxlök
 = 
bf
->
bf_daddr
;

65 i‡(!
Êush
)

66 
	`©h9k_hw_puåxbuf
(
ah
, 
bf
->
bf_daddr
);

68 
sc
->
rx
.
rxlök
 = &
ds
->
ds_lök
;

69 
	}
}

71 
	$©h_rx_buf_ªlök
(
©h_so·c
 *
sc
, 
©h_rxbuf
 *
bf
,

72 
boﬁ
 
Êush
)

74 i‡(
sc
->
rx
.
buf_hﬁd
)

75 
	`©h_rx_buf_lök
(
sc
, sc->
rx
.
buf_hﬁd
, 
Êush
);

77 
sc
->
rx
.
buf_hﬁd
 = 
bf
;

78 
	}
}

80 
	$©h_£tdeÁ¡í«
(
©h_so·c
 *
sc
, 
u32
 
™ã¬a
)

83 
	`©h9k_hw_£è¡í«
(
sc
->
sc_ah
, 
™ã¬a
);

84 
sc
->
rx
.
deÁ¡
 = 
™ã¬a
;

85 
sc
->
rx
.
rxŸhî™t
 = 0;

86 
	}
}

88 
	$©h_›mode_öô
(
©h_so·c
 *
sc
)

90 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

91 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

93 
u32
 
rfût
, 
mfût
[2];

96 
rfût
 = 
	`©h_ˇl¸xfûãr
(
sc
);

97 
	`©h9k_hw_£åxfûãr
(
ah
, 
rfût
);

100 
	`©h_hw_£tbssidmask
(
comm⁄
);

103 
	`©h9k_hw_£t›mode
(
ah
);

106 
mfût
[0] = mfilt[1] = ~0;

107 
	`©h9k_hw_£tmˇ°fûãr
(
ah
, 
mfût
[0], mfilt[1]);

108 
	}
}

110 
boﬁ
 
	$©h_rx_edma_buf_lök
(
©h_so·c
 *
sc
,

111 
©h9k_rx_qty≥
 
qty≥
)

113 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

114 
©h_rx_edma
 *
rx_edma
;

115 
sk_buff
 *
skb
;

116 
©h_rxbuf
 *
bf
;

118 
rx_edma
 = &
sc
->
rx
.rx_edma[
qty≥
];

119 i‡(
	`skb_queue_Àn
(&
rx_edma
->
rx_fifo
Ë>rx_edma->
rx_fifo_hwsize
)

120  
Ál£
;

122 
bf
 = 
	`li°_fú°_íåy
(&
sc
->
rx
.
rxbuf
, 
©h_rxbuf
, 
li°
);

123 
	`li°_dñ_öô
(&
bf
->
li°
);

125 
skb
 = 
bf
->
bf_mpdu
;

127 
	`mem£t
(
skb
->
d©a
, 0, 
ah
->
ˇps
.
rx_°©us_Àn
);

128 
	`dma_sync_sögÀ_f‹_devi˚
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

129 
ah
->
ˇps
.
rx_°©us_Àn
, 
DMA_TO_DEVICE
);

131 
	`SKB_CB_ATHBUF
(
skb
Ë
bf
;

132 
	`©h9k_hw_addrxbuf_edma
(
ah
, 
bf
->
bf_buf_addr
, 
qty≥
);

133 
	`__skb_queue_èû
(&
rx_edma
->
rx_fifo
, 
skb
);

135  
åue
;

136 
	}
}

138 
	$©h_rx_addbuf„r_edma
(
©h_so·c
 *
sc
,

139 
©h9k_rx_qty≥
 
qty≥
)

141 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

142 
©h_rxbuf
 *
bf
, *
tbf
;

144 i‡(
	`li°_em±y
(&
sc
->
rx
.
rxbuf
)) {

145 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "No freeÑx bufávailable\n");

149 
	`li°_f‹_óch_íåy_ß„
(
bf
, 
tbf
, &
sc
->
rx
.
rxbuf
, 
li°
)

150 i‡(!
	`©h_rx_edma_buf_lök
(
sc
, 
qty≥
))

153 
	}
}

155 
	$©h_rx_ªmove_buf„r
(
©h_so·c
 *
sc
,

156 
©h9k_rx_qty≥
 
qty≥
)

158 
©h_rxbuf
 *
bf
;

159 
©h_rx_edma
 *
rx_edma
;

160 
sk_buff
 *
skb
;

162 
rx_edma
 = &
sc
->
rx
.rx_edma[
qty≥
];

164 (
skb
 = 
	`__skb_dequeue
(&
rx_edma
->
rx_fifo
)Ë!
NULL
) {

165 
bf
 = 
	`SKB_CB_ATHBUF
(
skb
);

166 
	`BUG_ON
(!
bf
);

167 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
rx
.
rxbuf
);

169 
	}
}

171 
	$©h_rx_edma_˛ónup
(
©h_so·c
 *
sc
)

173 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

174 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

175 
©h_rxbuf
 *
bf
;

177 
	`©h_rx_ªmove_buf„r
(
sc
, 
ATH9K_RX_QUEUE_LP
);

178 
	`©h_rx_ªmove_buf„r
(
sc
, 
ATH9K_RX_QUEUE_HP
);

180 
	`li°_f‹_óch_íåy
(
bf
, &
sc
->
rx
.
rxbuf
, 
li°
) {

181 i‡(
bf
->
bf_mpdu
) {

182 
	`dma_unm≠_sögÀ
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

183 
comm⁄
->
rx_bufsize
,

184 
DMA_BIDIRECTIONAL
);

185 
	`dev_k‰ì_skb_™y
(
bf
->
bf_mpdu
);

186 
bf
->
bf_buf_addr
 = 0;

187 
bf
->
bf_mpdu
 = 
NULL
;

190 
	}
}

192 
	$©h_rx_edma_öô_queue
(
©h_rx_edma
 *
rx_edma
, 
size
)

194 
	`__skb_queue_hód_öô
(&
rx_edma
->
rx_fifo
);

195 
rx_edma
->
rx_fifo_hwsize
 = 
size
;

196 
	}
}

198 
	$©h_rx_edma_öô
(
©h_so·c
 *
sc
, 
nbufs
)

200 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

201 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

202 
sk_buff
 *
skb
;

203 
©h_rxbuf
 *
bf
;

204 
îr‹
 = 0, 
i
;

205 
u32
 
size
;

207 
	`©h9k_hw_£t_rx_bufsize
(
ah
, 
comm⁄
->
rx_bufsize
 -

208 
ah
->
ˇps
.
rx_°©us_Àn
);

210 
	`©h_rx_edma_öô_queue
(&
sc
->
rx
.
rx_edma
[
ATH9K_RX_QUEUE_LP
],

211 
ah
->
ˇps
.
rx_Õ_qdïth
);

212 
	`©h_rx_edma_öô_queue
(&
sc
->
rx
.
rx_edma
[
ATH9K_RX_QUEUE_HP
],

213 
ah
->
ˇps
.
rx_hp_qdïth
);

215 
size
 = (
©h_rxbuf
Ë* 
nbufs
;

216 
bf
 = 
	`devm_kzÆloc
(
sc
->
dev
, 
size
, 
GFP_KERNEL
);

217 i‡(!
bf
)

218  -
ENOMEM
;

220 
	`INIT_LIST_HEAD
(&
sc
->
rx
.
rxbuf
);

222 
i
 = 0; i < 
nbufs
; i++, 
bf
++) {

223 
skb
 = 
	`©h_rxbuf_Æloc
(
comm⁄
, comm⁄->
rx_bufsize
, 
GFP_KERNEL
);

224 i‡(!
skb
) {

225 
îr‹
 = -
ENOMEM
;

226 
rx_öô_Áû
;

229 
	`mem£t
(
skb
->
d©a
, 0, 
comm⁄
->
rx_bufsize
);

230 
bf
->
bf_mpdu
 = 
skb
;

232 
bf
->
bf_buf_addr
 = 
	`dma_m≠_sögÀ
(
sc
->
dev
, 
skb
->
d©a
,

233 
comm⁄
->
rx_bufsize
,

234 
DMA_BIDIRECTIONAL
);

235 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(
sc
->
dev
,

236 
bf
->
bf_buf_addr
))) {

237 
	`dev_k‰ì_skb_™y
(
skb
);

238 
bf
->
bf_mpdu
 = 
NULL
;

239 
bf
->
bf_buf_addr
 = 0;

240 
	`©h_îr
(
comm⁄
,

242 
îr‹
 = -
ENOMEM
;

243 
rx_öô_Áû
;

246 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
rx
.
rxbuf
);

251 
rx_öô_Áû
:

252 
	`©h_rx_edma_˛ónup
(
sc
);

253  
îr‹
;

254 
	}
}

256 
	$©h_edma_°¨t_ªcv
(
©h_so·c
 *
sc
)

258 
	`©h9k_hw_rxía
(
sc
->
sc_ah
);

259 
	`©h_rx_addbuf„r_edma
(
sc
, 
ATH9K_RX_QUEUE_HP
);

260 
	`©h_rx_addbuf„r_edma
(
sc
, 
ATH9K_RX_QUEUE_LP
);

261 
	`©h_›mode_öô
(
sc
);

262 
	`©h9k_hw_°¨çcuª˚ive
(
sc
->
sc_ah
, sc->
cur_ch™
->
offch™√l
);

263 
	}
}

265 
	$©h_edma_°›_ªcv
(
©h_so·c
 *
sc
)

267 
	`©h_rx_ªmove_buf„r
(
sc
, 
ATH9K_RX_QUEUE_HP
);

268 
	`©h_rx_ªmove_buf„r
(
sc
, 
ATH9K_RX_QUEUE_LP
);

269 
	}
}

271 
	$©h_rx_öô
(
©h_so·c
 *
sc
, 
nbufs
)

273 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

274 
sk_buff
 *
skb
;

275 
©h_rxbuf
 *
bf
;

276 
îr‹
 = 0;

278 
	`•ö_lock_öô
(&
sc
->
sc_pcu_lock
);

280 
comm⁄
->
rx_bufsize
 = 
IEEE80211_MAX_MPDU_LEN
 / 2 +

281 
sc
->
sc_ah
->
ˇps
.
rx_°©us_Àn
;

283 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

284  
	`©h_rx_edma_öô
(
sc
, 
nbufs
);

286 
	`©h_dbg
(
comm⁄
, 
CONFIG
, "cachelsz %uÑxbufsize %u\n",

287 
comm⁄
->
ˇchñsz
, comm⁄->
rx_bufsize
);

291 
îr‹
 = 
	`©h_descdma_£tup
(
sc
, &sc->
rx
.
rxdma
, &sc->rx.
rxbuf
,

292 "rx", 
nbufs
, 1, 0);

293 i‡(
îr‹
 != 0) {

294 
	`©h_îr
(
comm⁄
,

296 
îr‹
);

297 
îr
;

300 
	`li°_f‹_óch_íåy
(
bf
, &
sc
->
rx
.
rxbuf
, 
li°
) {

301 
skb
 = 
	`©h_rxbuf_Æloc
(
comm⁄
, comm⁄->
rx_bufsize
,

302 
GFP_KERNEL
);

303 i‡(
skb
 =
NULL
) {

304 
îr‹
 = -
ENOMEM
;

305 
îr
;

308 
bf
->
bf_mpdu
 = 
skb
;

309 
bf
->
bf_buf_addr
 = 
	`dma_m≠_sögÀ
(
sc
->
dev
, 
skb
->
d©a
,

310 
comm⁄
->
rx_bufsize
,

311 
DMA_FROM_DEVICE
);

312 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(
sc
->
dev
,

313 
bf
->
bf_buf_addr
))) {

314 
	`dev_k‰ì_skb_™y
(
skb
);

315 
bf
->
bf_mpdu
 = 
NULL
;

316 
bf
->
bf_buf_addr
 = 0;

317 
	`©h_îr
(
comm⁄
,

319 
îr‹
 = -
ENOMEM
;

320 
îr
;

323 
sc
->
rx
.
rxlök
 = 
NULL
;

324 
îr
:

325 i‡(
îr‹
)

326 
	`©h_rx_˛ónup
(
sc
);

328  
îr‹
;

329 
	}
}

331 
	$©h_rx_˛ónup
(
©h_so·c
 *
sc
)

333 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

334 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

335 
sk_buff
 *
skb
;

336 
©h_rxbuf
 *
bf
;

338 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

339 
	`©h_rx_edma_˛ónup
(
sc
);

343 
	`li°_f‹_óch_íåy
(
bf
, &
sc
->
rx
.
rxbuf
, 
li°
) {

344 
skb
 = 
bf
->
bf_mpdu
;

345 i‡(
skb
) {

346 
	`dma_unm≠_sögÀ
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

347 
comm⁄
->
rx_bufsize
,

348 
DMA_FROM_DEVICE
);

349 
	`dev_k‰ì_skb
(
skb
);

350 
bf
->
bf_buf_addr
 = 0;

351 
bf
->
bf_mpdu
 = 
NULL
;

354 
	}
}

375 
u32
 
	$©h_ˇl¸xfûãr
(
©h_so·c
 *
sc
)

377 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

378 
u32
 
rfût
;

380 i‡(
	`c⁄fig_íabÀd
(
CONFIG_ATH9K_TX99
))

383 
rfût
 = 
ATH9K_RX_FILTER_UCAST
 | 
ATH9K_RX_FILTER_BCAST


384 | 
ATH9K_RX_FILTER_MCAST
;

387 i‡(
sc
->
hw
->
c⁄f
.
ød¨_íabÀd
)

388 
rfût
 |
ATH9K_RX_FILTER_PHYRADAR
 | 
ATH9K_RX_FILTER_PHYERR
;

390 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

392 i‡(
sc
->
cur_ch™
->
rxfûãr
 & 
FIF_PROBE_REQ
)

393 
rfût
 |
ATH9K_RX_FILTER_PROBEREQ
;

395 i‡(
sc
->
sc_ah
->
is_m⁄ô‹ög
)

396 
rfût
 |
ATH9K_RX_FILTER_PROM
;

398 i‡((
sc
->
cur_ch™
->
rxfûãr
 & 
FIF_CONTROL
) ||

399 
sc
->
sc_ah
->
dy«ck
.
íabÀd
)

400 
rfût
 |
ATH9K_RX_FILTER_CONTROL
;

402 i‡((
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_STATION
) &&

403 (
sc
->
cur_ch™
->
nvifs
 <= 1) &&

404 !(
sc
->
cur_ch™
->
rxfûãr
 & 
FIF_BCN_PRBRESP_PROMISC
))

405 
rfût
 |
ATH9K_RX_FILTER_MYBEACON
;

406 i‡(
sc
->
sc_ah
->
›mode
 !
NL80211_IFTYPE_OCB
)

407 
rfût
 |
ATH9K_RX_FILTER_BEACON
;

409 i‡((
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_AP
) ||

410 (
sc
->
cur_ch™
->
rxfûãr
 & 
FIF_PSPOLL
))

411 
rfût
 |
ATH9K_RX_FILTER_PSPOLL
;

413 i‡(
sc
->
cur_ch™def
.
width
 !
NL80211_CHAN_WIDTH_20_NOHT
)

414 
rfût
 |
ATH9K_RX_FILTER_COMP_BAR
;

416 i‡(
sc
->
cur_ch™
->
nvifs
 > 1 || (sc->cur_ch™->
rxfûãr
 & 
FIF_OTHER_BSS
)) {

418 i‡(
sc
->
sc_ah
->
hw_vîsi⁄
.
macVîsi⁄
 <
AR_SREV_VERSION_9160
)

419 
rfût
 |
ATH9K_RX_FILTER_PROM
;

420 
rfût
 |
ATH9K_RX_FILTER_MCAST_BCAST_ALL
;

423 i‡(
	`AR_SREV_9550
(
sc
->
sc_ah
Ë|| 
	`AR_SREV_9531
(sc->sc_ah) ||

424 
	`AR_SREV_9561
(
sc
->
sc_ah
))

425 
rfût
 |
ATH9K_RX_FILTER_4ADDRESS
;

427 i‡(
	`©h9k_is_ch™˘x_íabÀd
() &&

428 
	`ã°_bô
(
ATH_OP_SCANNING
, &
comm⁄
->
›_Êags
))

429 
rfût
 |
ATH9K_RX_FILTER_BEACON
;

431 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

433  
rfût
;

435 
	}
}

437 
	$©h_°¨åecv
(
©h_so·c
 *
sc
)

439 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

440 
©h_rxbuf
 *
bf
, *
tbf
;

442 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

443 
	`©h_edma_°¨t_ªcv
(
sc
);

447 i‡(
	`li°_em±y
(&
sc
->
rx
.
rxbuf
))

448 
°¨t_ªcv
;

450 
sc
->
rx
.
buf_hﬁd
 = 
NULL
;

451 
sc
->
rx
.
rxlök
 = 
NULL
;

452 
	`li°_f‹_óch_íåy_ß„
(
bf
, 
tbf
, &
sc
->
rx
.
rxbuf
, 
li°
) {

453 
	`©h_rx_buf_lök
(
sc
, 
bf
, 
Ál£
);

457 i‡(
	`li°_em±y
(&
sc
->
rx
.
rxbuf
))

458 
°¨t_ªcv
;

460 
bf
 = 
	`li°_fú°_íåy
(&
sc
->
rx
.
rxbuf
, 
©h_rxbuf
, 
li°
);

461 
	`©h9k_hw_puåxbuf
(
ah
, 
bf
->
bf_daddr
);

462 
	`©h9k_hw_rxía
(
ah
);

464 
°¨t_ªcv
:

465 
	`©h_›mode_öô
(
sc
);

466 
	`©h9k_hw_°¨çcuª˚ive
(
ah
, 
sc
->
cur_ch™
->
offch™√l
);

467 
	}
}

469 
	$©h_Êushªcv
(
©h_so·c
 *
sc
)

471 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

472 
	`©h_rx_èskÀt
(
sc
, 1, 
åue
);

473 
	`©h_rx_èskÀt
(
sc
, 1, 
Ál£
);

474 
	}
}

476 
boﬁ
 
	$©h_°›ªcv
(
©h_so·c
 *
sc
)

478 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

479 
boﬁ
 
°›≥d
, 
ª£t
 = 
Ál£
;

481 
	`©h9k_hw_ab‹çcuªcv
(
ah
);

482 
	`©h9k_hw_£åxfûãr
(
ah
, 0);

483 
°›≥d
 = 
	`©h9k_hw_°›dm¨ecv
(
ah
, &
ª£t
);

485 
	`©h_Êushªcv
(
sc
);

487 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

488 
	`©h_edma_°›_ªcv
(
sc
);

490 
sc
->
rx
.
rxlök
 = 
NULL
;

492 i‡(!(
ah
->
ah_Êags
 & 
AH_UNPLUGGED
) &&

493 
	`u∆ikñy
(!
°›≥d
)) {

494 
	`©h_dbg
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
RESET
,

496 
	`RESET_STAT_INC
(
sc
, 
RESET_RX_DMA_ERROR
);

498  
°›≥d
 && !
ª£t
;

499 
	}
}

501 
boﬁ
 
	$©h_bóc⁄_dtim_≥ndög_ˇb
(
sk_buff
 *
skb
)

504 
õì80211_mgmt
 *
mgmt
;

505 
u8
 *
pos
, *
íd
, 
id
, 
ñí
;

506 
õì80211_tim_õ
 *
tim
;

508 
mgmt
 = (
õì80211_mgmt
 *)
skb
->
d©a
;

509 
pos
 = 
mgmt
->
u
.
bóc⁄
.
v¨übÀ
;

510 
íd
 = 
skb
->
d©a
 + skb->
Àn
;

512 
pos
 + 2 < 
íd
) {

513 
id
 = *
pos
++;

514 
ñí
 = *
pos
++;

515 i‡(
pos
 + 
ñí
 > 
íd
)

518 i‡(
id
 =
WLAN_EID_TIM
) {

519 i‡(
ñí
 < (*
tim
))

521 
tim
 = (
õì80211_tim_õ
 *Ë
pos
;

522 i‡(
tim
->
dtim_cou¡
 != 0)

524  
tim
->
bôm≠_˘æ
 & 0x01;

527 
pos
 +
ñí
;

530  
Ál£
;

531 
	}
}

533 
	$©h_rx_ps_bóc⁄
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
)

535 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

536 
boﬁ
 
skù_bóc⁄
 = 
Ál£
;

538 i‡(
skb
->
Àn
 < 24 + 8 + 2 + 2)

541 
sc
->
ps_Êags
 &~
PS_WAIT_FOR_BEACON
;

543 i‡(
sc
->
ps_Êags
 & 
PS_BEACON_SYNC
) {

544 
sc
->
ps_Êags
 &~
PS_BEACON_SYNC
;

545 
	`©h_dbg
(
comm⁄
, 
PS
,

548 #ifde‡
CONFIG_ATH9K_CHANNEL_CONTEXT


549 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

550 i‡(
sc
->
cur_ch™
 =&sc->
offch™√l
.
ch™
)

551 
skù_bóc⁄
 = 
åue
;

555 i‡(!
skù_bóc⁄
 &&

556 !(
	`WARN_ON_ONCE
(
sc
->
cur_ch™
->
bóc⁄
.
bóc⁄_öãrvÆ
 == 0)))

557 
	`©h9k_£t_bóc⁄
(
sc
);

559 
	`©h9k_p2p_bóc⁄_sync
(
sc
);

562 i‡(
	`©h_bóc⁄_dtim_≥ndög_ˇb
(
skb
)) {

570 
	`©h_dbg
(
comm⁄
, 
PS
,

572 
sc
->
ps_Êags
 |
PS_WAIT_FOR_CAB
 | 
PS_WAIT_FOR_BEACON
;

576 i‡(
sc
->
ps_Êags
 & 
PS_WAIT_FOR_CAB
) {

582 
sc
->
ps_Êags
 &~
PS_WAIT_FOR_CAB
;

583 
	`©h_dbg
(
comm⁄
, 
PS
, "PS wait for CAB framesÅimed out\n");

585 
	}
}

587 
	$©h_rx_ps
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
, 
boﬁ
 
mybóc⁄
)

589 
õì80211_hdr
 *
hdr
;

590 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

592 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

595 i‡(((
sc
->
ps_Êags
 & 
PS_WAIT_FOR_BEACON
Ë|| 
	`©h9k_check_auto_¶ìp
(sc))

596 && 
mybóc⁄
) {

597 
	`©h_rx_ps_bóc⁄
(
sc
, 
skb
);

598 } i‡((
sc
->
ps_Êags
 & 
PS_WAIT_FOR_CAB
) &&

599 (
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
) ||

600 
	`õì80211_is_a˘i⁄
(
hdr
->
‰ame_c⁄åﬁ
)) &&

601 
	`is_mu…iˇ°_ëhî_addr
(
hdr
->
addr1
) &&

602 !
	`õì80211_has_m‹ed©a
(
hdr
->
‰ame_c⁄åﬁ
)) {

607 
sc
->
ps_Êags
 &~(
PS_WAIT_FOR_CAB
 | 
PS_WAIT_FOR_BEACON
);

608 
	`©h_dbg
(
comm⁄
, 
PS
,

610 } i‡((
sc
->
ps_Êags
 & 
PS_WAIT_FOR_PSPOLL_DATA
) &&

611 !
	`is_mu…iˇ°_ëhî_addr
(
hdr
->
addr1
) &&

612 !
	`õì80211_has_m‹e‰ags
(
hdr
->
‰ame_c⁄åﬁ
)) {

613 
sc
->
ps_Êags
 &~
PS_WAIT_FOR_PSPOLL_DATA
;

614 
	`©h_dbg
(
comm⁄
, 
PS
,

616 
sc
->
ps_Êags
 & (
PS_WAIT_FOR_BEACON
 |

617 
PS_WAIT_FOR_CAB
 |

618 
PS_WAIT_FOR_PSPOLL_DATA
 |

619 
PS_WAIT_FOR_TX_ACK
));

621 
	}
}

623 
boﬁ
 
	$©h_edma_gë_buf„rs
(
©h_so·c
 *
sc
,

624 
©h9k_rx_qty≥
 
qty≥
,

625 
©h_rx_°©us
 *
rs
,

626 
©h_rxbuf
 **
de°
)

628 
©h_rx_edma
 *
rx_edma
 = &
sc
->
rx
.rx_edma[
qty≥
];

629 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

630 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

631 
sk_buff
 *
skb
;

632 
©h_rxbuf
 *
bf
;

633 
ªt
;

635 
skb
 = 
	`skb_≥ek
(&
rx_edma
->
rx_fifo
);

636 i‡(!
skb
)

637  
Ál£
;

639 
bf
 = 
	`SKB_CB_ATHBUF
(
skb
);

640 
	`BUG_ON
(!
bf
);

642 
	`dma_sync_sögÀ_f‹_˝u
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

643 
comm⁄
->
rx_bufsize
, 
DMA_FROM_DEVICE
);

645 
ªt
 = 
	`©h9k_hw_¥o˚ss_rxdesc_edma
(
ah
, 
rs
, 
skb
->
d©a
);

646 i‡(
ªt
 =-
EINPROGRESS
) {

648 
	`dma_sync_sögÀ_f‹_devi˚
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

649 
comm⁄
->
rx_bufsize
, 
DMA_FROM_DEVICE
);

650  
Ál£
;

653 
	`__skb_u∆ök
(
skb
, &
rx_edma
->
rx_fifo
);

654 i‡(
ªt
 =-
EINVAL
) {

656 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
rx
.
rxbuf
);

657 
	`©h_rx_edma_buf_lök
(
sc
, 
qty≥
);

659 
skb
 = 
	`skb_≥ek
(&
rx_edma
->
rx_fifo
);

660 i‡(
skb
) {

661 
bf
 = 
	`SKB_CB_ATHBUF
(
skb
);

662 
	`BUG_ON
(!
bf
);

664 
	`__skb_u∆ök
(
skb
, &
rx_edma
->
rx_fifo
);

665 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
rx
.
rxbuf
);

666 
	`©h_rx_edma_buf_lök
(
sc
, 
qty≥
);

669 
bf
 = 
NULL
;

672 *
de°
 = 
bf
;

673  
åue
;

674 
	}
}

676 
©h_rxbuf
 *
	$©h_edma_gë_√xt_rx_buf
(
©h_so·c
 *
sc
,

677 
©h_rx_°©us
 *
rs
,

678 
©h9k_rx_qty≥
 
qty≥
)

680 
©h_rxbuf
 *
bf
 = 
NULL
;

682 
	`©h_edma_gë_buf„rs
(
sc
, 
qty≥
, 
rs
, &
bf
)) {

683 i‡(!
bf
)

686  
bf
;

688  
NULL
;

689 
	}
}

691 
©h_rxbuf
 *
	$©h_gë_√xt_rx_buf
(
©h_so·c
 *
sc
,

692 
©h_rx_°©us
 *
rs
)

694 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

695 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

696 
©h_desc
 *
ds
;

697 
©h_rxbuf
 *
bf
;

698 
ªt
;

700 i‡(
	`li°_em±y
(&
sc
->
rx
.
rxbuf
)) {

701 
sc
->
rx
.
rxlök
 = 
NULL
;

702  
NULL
;

705 
bf
 = 
	`li°_fú°_íåy
(&
sc
->
rx
.
rxbuf
, 
©h_rxbuf
, 
li°
);

706 i‡(
bf
 =
sc
->
rx
.
buf_hﬁd
)

707  
NULL
;

709 
ds
 = 
bf
->
bf_desc
;

722 
ªt
 = 
	`©h9k_hw_rx¥ocdesc
(
ah
, 
ds
, 
rs
);

723 i‡(
ªt
 =-
EINPROGRESS
) {

724 
©h_rx_°©us
 
ås
;

725 
©h_rxbuf
 *
tbf
;

726 
©h_desc
 *
tds
;

728 
	`mem£t
(&
ås
, 0, (trs));

729 i‡(
	`li°_is_œ°
(&
bf
->
li°
, &
sc
->
rx
.
rxbuf
)) {

730 
sc
->
rx
.
rxlök
 = 
NULL
;

731  
NULL
;

734 
tbf
 = 
	`li°_íåy
(
bf
->
li°
.
√xt
, 
©h_rxbuf
,Üist);

747 
tds
 = 
tbf
->
bf_desc
;

748 
ªt
 = 
	`©h9k_hw_rx¥ocdesc
(
ah
, 
tds
, &
ås
);

749 i‡(
ªt
 =-
EINPROGRESS
)

750  
NULL
;

756 
ªt
 = 
	`©h9k_hw_rx¥ocdesc
(
ah
, 
ds
, 
rs
);

757 i‡(
ªt
 =-
EINPROGRESS
) {

762 
rs
->
rs_d©Æí
 = 0;

763 
rs
->
rs_m‹e
 = 
åue
;

767 
	`li°_dñ
(&
bf
->
li°
);

768 i‡(!
bf
->
bf_mpdu
)

769  
bf
;

776 
	`dma_sync_sögÀ_f‹_˝u
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

777 
comm⁄
->
rx_bufsize
,

778 
DMA_FROM_DEVICE
);

780  
bf
;

781 
	}
}

783 
	$©h9k_¥o˚ss_tsf
(
©h_rx_°©us
 *
rs
,

784 
õì80211_rx_°©us
 *
rxs
,

785 
u64
 
tsf
)

787 
u32
 
tsf_lowî
 = 
tsf
 & 0xffffffff;

789 
rxs
->
ma˘ime
 = (
tsf
 & ~0xffffffffULLË| 
rs
->
rs_t°amp
;

790 i‡(
rs
->
rs_t°amp
 > 
tsf_lowî
 &&

791 
	`u∆ikñy
(
rs
->
rs_t°amp
 - 
tsf_lowî
 > 0x10000000))

792 
rxs
->
ma˘ime
 -= 0x100000000ULL;

794 i‡(
rs
->
rs_t°amp
 < 
tsf_lowî
 &&

795 
	`u∆ikñy
(
tsf_lowî
 - 
rs
->
rs_t°amp
 > 0x10000000))

796 
rxs
->
ma˘ime
 += 0x100000000ULL;

797 
	}
}

804 
	$©h9k_rx_skb_¥ïro˚ss
(
©h_so·c
 *
sc
,

805 
sk_buff
 *
skb
,

806 
©h_rx_°©us
 *
rx_°©s
,

807 
õì80211_rx_°©us
 *
rx_°©us
,

808 
boﬁ
 *
de¸y±_îr‹
, 
u64
 
tsf
)

810 
õì80211_hw
 *
hw
 = 
sc
->hw;

811 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

812 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

813 
õì80211_hdr
 *
hdr
;

814 
boﬁ
 
disˇrd_cuºít
 = 
sc
->
rx
.
disˇrd_√xt
;

820 i‡(
disˇrd_cuºít
)

821 
c‹ru±
;

823 
sc
->
rx
.
disˇrd_√xt
 = 
Ál£
;

828 i‡(!
rx_°©s
->
rs_d©Æí
) {

829 
	`RX_STAT_INC
(
rx_Àn_îr
);

830 
c‹ru±
;

838 i‡(
rx_°©s
->
rs_d©Æí
 > (
comm⁄
->
rx_bufsize
 - 
ah
->
ˇps
.
rx_°©us_Àn
)) {

839 
	`RX_STAT_INC
(
rx_Àn_îr
);

840 
c‹ru±
;

844 i‡(
rx_°©s
->
rs_m‹e
)

854 i‡(
rx_°©s
->
rs_°©us
 & 
ATH9K_RXERR_CORRUPT_DESC
)

855 
c‹ru±
;

857 
hdr
 = (
õì80211_hdr
 *Ë(
skb
->
d©a
 + 
ah
->
ˇps
.
rx_°©us_Àn
);

859 
	`©h9k_¥o˚ss_tsf
(
rx_°©s
, 
rx_°©us
, 
tsf
);

860 
	`©h_debug_°©_rx
(
sc
, 
rx_°©s
);

866 i‡(
rx_°©s
->
rs_°©us
 & 
ATH9K_RXERR_PHY
) {

867 
	`©h9k_dfs_¥o˚ss_phyîr
(
sc
, 
hdr
, 
rx_°©s
, 
rx_°©us
->
ma˘ime
);

868 i‡(
	`©h_cmn_¥o˚ss_f·
(&
sc
->
•ec_¥iv
, 
hdr
, 
rx_°©s
, 
rx_°©us
->
ma˘ime
))

869 
	`RX_STAT_INC
(
rx_•e˘øl
);

871  -
EINVAL
;

878 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

879 i‡(!
	`©h9k_cmn_rx_ac˚±
(
comm⁄
, 
hdr
, 
rx_°©us
, 
rx_°©s
, 
de¸y±_îr‹
,

880 
sc
->
cur_ch™
->
rxfûãr
)) {

881 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

882  -
EINVAL
;

884 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

886 i‡(
	`©h_is_mybóc⁄
(
comm⁄
, 
hdr
)) {

887 
	`RX_STAT_INC
(
rx_bóc⁄s
);

888 
rx_°©s
->
is_mybóc⁄
 = 
åue
;

894 i‡(
	`WARN_ON
(!
ah
->
curch™
))

895  -
EINVAL
;

897 i‡(
	`©h9k_cmn_¥o˚ss_øã
(
comm⁄
, 
hw
, 
rx_°©s
, 
rx_°©us
)) {

902 
	`©h_dbg
(
comm⁄
, 
ANY
, "unsupported hw bitrate detected 0x%02x using 1 Mbit\n",

903 
rx_°©s
->
rs_øã
);

904 
	`RX_STAT_INC
(
rx_øã_îr
);

905  -
EINVAL
;

908 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

909 i‡(
rx_°©s
->
is_mybóc⁄
)

910 
	`©h_ch™˘x_bóc⁄_ªcv_ev
(
sc
,

911 
ATH_CHANCTX_EVENT_BEACON_RECEIVED
);

914 
	`©h9k_cmn_¥o˚ss_rssi
(
comm⁄
, 
hw
, 
rx_°©s
, 
rx_°©us
);

916 
rx_°©us
->
b™d
 = 
ah
->
curch™
->
ch™
->band;

917 
rx_°©us
->
‰eq
 = 
ah
->
curch™
->
ch™
->
˚¡î_‰eq
;

918 
rx_°©us
->
™ã¬a
 = 
rx_°©s
->
rs_™ã¬a
;

919 
rx_°©us
->
Êag
 |
RX_FLAG_MACTIME_END
;

921 #ifde‡
CONFIG_ATH9K_BTCOEX_SUPPORT


922 i‡(
	`õì80211_is_d©a_¥e£¡
(
hdr
->
‰ame_c⁄åﬁ
) &&

923 !
	`õì80211_is_qos_nuŒfunc
(
hdr
->
‰ame_c⁄åﬁ
))

924 
sc
->
rx
.
num_pkts
++;

929 
c‹ru±
:

930 
sc
->
rx
.
disˇrd_√xt
 = 
rx_°©s
->
rs_m‹e
;

931  -
EINVAL
;

932 
	}
}

944 
	$©h9k_™ã¬a_check
(
©h_so·c
 *
sc
,

945 
©h_rx_°©us
 *
rs
)

947 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

948 
©h9k_hw_ˇ∑bûôõs
 *
pC≠
 = &
ah
->
ˇps
;

949 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

951 i‡(!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_ANT_DIV_COMB
))

958 i‡(
sc
->
rx
.
deÁ¡
 !
rs
->
rs_™ã¬a
) {

959 i‡(++
sc
->
rx
.
rxŸhî™t
 >= 3)

960 
	`©h_£tdeÁ¡í«
(
sc
, 
rs
->
rs_™ã¬a
);

962 
sc
->
rx
.
rxŸhî™t
 = 0;

965 i‡(
pC≠
->
hw_ˇps
 & 
ATH9K_HW_CAP_BT_ANT_DIV
) {

966 i‡(
comm⁄
->
bt_™t_divîsôy
)

967 
	`©h_™t_comb_sˇn
(
sc
, 
rs
);

969 
	`©h_™t_comb_sˇn
(
sc
, 
rs
);

971 
	}
}

973 
	$©h9k_≠∂y_ampdu_dëaûs
(
©h_so·c
 *
sc
,

974 
©h_rx_°©us
 *
rs
, 
õì80211_rx_°©us
 *
rxs
)

976 i‡(
rs
->
rs_ißggr
) {

977 
rxs
->
Êag
 |
RX_FLAG_AMPDU_DETAILS
 | 
RX_FLAG_AMPDU_LAST_KNOWN
;

979 
rxs
->
ampdu_ª„ªn˚
 = 
sc
->
rx
.
ampdu_ªf
;

981 i‡(!
rs
->
rs_m‹óggr
) {

982 
rxs
->
Êag
 |
RX_FLAG_AMPDU_IS_LAST
;

983 
sc
->
rx
.
ampdu_ªf
++;

986 i‡(
rs
->
rs_Êags
 & 
ATH9K_RX_DELIM_CRC_PRE
)

987 
rxs
->
Êag
 |
RX_FLAG_AMPDU_DELIM_CRC_ERROR
;

989 
	}
}

991 
	$©h_rx_èskÀt
(
©h_so·c
 *
sc
, 
Êush
, 
boﬁ
 
hp
)

993 
©h_rxbuf
 *
bf
;

994 
sk_buff
 *
skb
 = 
NULL
, *
ªqueue_skb
, *
hdr_skb
;

995 
õì80211_rx_°©us
 *
rxs
;

996 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

997 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

998 
õì80211_hw
 *
hw
 = 
sc
->hw;

999 
ªtvÆ
;

1000 
©h_rx_°©us
 
rs
;

1001 
©h9k_rx_qty≥
 
qty≥
;

1002 
boﬁ
 
edma
 = !!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
);

1003 
dma_ty≥
;

1004 
u64
 
tsf
 = 0;

1005 
Êags
;

1006 
dma_addr_t
 
√w_buf_addr
;

1007 
budgë
 = 512;

1008 
õì80211_hdr
 *
hdr
;

1010 i‡(
edma
)

1011 
dma_ty≥
 = 
DMA_BIDIRECTIONAL
;

1013 
dma_ty≥
 = 
DMA_FROM_DEVICE
;

1015 
qty≥
 = 
hp
 ? 
ATH9K_RX_QUEUE_HP
 : 
ATH9K_RX_QUEUE_LP
;

1017 
tsf
 = 
	`©h9k_hw_gëtsf64
(
ah
);

1020 
boﬁ
 
de¸y±_îr‹
 = 
Ál£
;

1022 
	`mem£t
(&
rs
, 0, (rs));

1023 i‡(
edma
)

1024 
bf
 = 
	`©h_edma_gë_√xt_rx_buf
(
sc
, &
rs
, 
qty≥
);

1026 
bf
 = 
	`©h_gë_√xt_rx_buf
(
sc
, &
rs
);

1028 i‡(!
bf
)

1031 
skb
 = 
bf
->
bf_mpdu
;

1032 i‡(!
skb
)

1039 i‡(
sc
->
rx
.
‰ag
)

1040 
hdr_skb
 = 
sc
->
rx
.
‰ag
;

1042 
hdr_skb
 = 
skb
;

1044 
rxs
 = 
	`IEEE80211_SKB_RXCB
(
hdr_skb
);

1045 
	`mem£t
(
rxs
, 0, (
õì80211_rx_°©us
));

1047 
ªtvÆ
 = 
	`©h9k_rx_skb_¥ïro˚ss
(
sc
, 
hdr_skb
, &
rs
, 
rxs
,

1048 &
de¸y±_îr‹
, 
tsf
);

1049 i‡(
ªtvÆ
)

1050 
ªqueue_dr›_‰ag
;

1054 
ªqueue_skb
 = 
	`©h_rxbuf_Æloc
(
comm⁄
, comm⁄->
rx_bufsize
, 
GFP_ATOMIC
);

1060 i‡(!
ªqueue_skb
) {

1061 
	`RX_STAT_INC
(
rx_oom_îr
);

1062 
ªqueue_dr›_‰ag
;

1066 
√w_buf_addr
 = 
	`dma_m≠_sögÀ
(
sc
->
dev
, 
ªqueue_skb
->
d©a
,

1067 
comm⁄
->
rx_bufsize
, 
dma_ty≥
);

1068 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(
sc
->
dev
, 
√w_buf_addr
))) {

1069 
	`dev_k‰ì_skb_™y
(
ªqueue_skb
);

1070 
ªqueue_dr›_‰ag
;

1074 
	`dma_unm≠_sögÀ
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

1075 
comm⁄
->
rx_bufsize
, 
dma_ty≥
);

1077 
bf
->
bf_mpdu
 = 
ªqueue_skb
;

1078 
bf
->
bf_buf_addr
 = 
√w_buf_addr
;

1080 
	`skb_put
(
skb
, 
rs
.
rs_d©Æí
 + 
ah
->
ˇps
.
rx_°©us_Àn
);

1081 i‡(
ah
->
ˇps
.
rx_°©us_Àn
)

1082 
	`skb_puŒ
(
skb
, 
ah
->
ˇps
.
rx_°©us_Àn
);

1084 i‡(!
rs
.
rs_m‹e
)

1085 
	`©h9k_cmn_rx_skb_po°¥o˚ss
(
comm⁄
, 
hdr_skb
, &
rs
,

1086 
rxs
, 
de¸y±_îr‹
);

1088 i‡(
rs
.
rs_m‹e
) {

1089 
	`RX_STAT_INC
(
rx_‰ags
);

1095 i‡(
sc
->
rx
.
‰ag
) {

1097 
	`dev_k‰ì_skb_™y
(
sc
->
rx
.
‰ag
);

1098 
	`dev_k‰ì_skb_™y
(
skb
);

1099 
	`RX_STAT_INC
(
rx_too_m™y_‰ags_îr
);

1100 
skb
 = 
NULL
;

1102 
sc
->
rx
.
‰ag
 = 
skb
;

1103 
ªqueue
;

1106 i‡(
sc
->
rx
.
‰ag
) {

1107 
•a˚
 = 
skb
->
Àn
 - 
	`skb_èûroom
(
hdr_skb
);

1109 i‡(
	`pskb_ex∑nd_hód
(
hdr_skb
, 0, 
•a˚
, 
GFP_ATOMIC
) < 0) {

1110 
	`dev_k‰ì_skb
(
skb
);

1111 
	`RX_STAT_INC
(
rx_oom_îr
);

1112 
ªqueue_dr›_‰ag
;

1115 
sc
->
rx
.
‰ag
 = 
NULL
;

1117 
	`skb_c›y_‰om_löór_d©a
(
skb
, 
	`skb_put
(
hdr_skb
, skb->
Àn
),

1118 
skb
->
Àn
);

1119 
	`dev_k‰ì_skb_™y
(
skb
);

1120 
skb
 = 
hdr_skb
;

1123 i‡(
rxs
->
Êag
 & 
RX_FLAG_MMIC_STRIPPED
)

1124 
	`skb_åim
(
skb
, skb->
Àn
 - 8);

1126 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

1127 i‡((
sc
->
ps_Êags
 & (
PS_WAIT_FOR_BEACON
 |

1128 
PS_WAIT_FOR_CAB
 |

1129 
PS_WAIT_FOR_PSPOLL_DATA
)) ||

1130 
	`©h9k_check_auto_¶ìp
(
sc
))

1131 
	`©h_rx_ps
(
sc
, 
skb
, 
rs
.
is_mybóc⁄
);

1132 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

1134 
	`©h9k_™ã¬a_check
(
sc
, &
rs
);

1135 
	`©h9k_≠∂y_ampdu_dëaûs
(
sc
, &
rs
, 
rxs
);

1136 
	`©h_debug_øã_°©s
(
sc
, &
rs
, 
skb
);

1138 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

1139 i‡(
	`õì80211_is_ack
(
hdr
->
‰ame_c⁄åﬁ
))

1140 
	`©h_dy«ck_ßm∂e_ack_ts
(
sc
->
sc_ah
, 
skb
, 
rs
.
rs_t°amp
);

1142 
	`õì80211_rx
(
hw
, 
skb
);

1144 
ªqueue_dr›_‰ag
:

1145 i‡(
sc
->
rx
.
‰ag
) {

1146 
	`dev_k‰ì_skb_™y
(
sc
->
rx
.
‰ag
);

1147 
sc
->
rx
.
‰ag
 = 
NULL
;

1149 
ªqueue
:

1150 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
rx
.
rxbuf
);

1152 i‡(!
edma
) {

1153 
	`©h_rx_buf_ªlök
(
sc
, 
bf
, 
Êush
);

1154 i‡(!
Êush
)

1155 
	`©h9k_hw_rxía
(
ah
);

1156 } i‡(!
Êush
) {

1157 
	`©h_rx_edma_buf_lök
(
sc
, 
qty≥
);

1160 i‡(!
budgë
--)

1164 i‡(!(
ah
->
imask
 & 
ATH9K_INT_RXEOL
)) {

1165 
ah
->
imask
 |(
ATH9K_INT_RXEOL
 | 
ATH9K_INT_RXORN
);

1166 
	`©h9k_hw_£t_öãºu±s
(
ah
);

1170 
	}
}

	@reg.h

17 #i‚de‡
REG_H


18 
	#REG_H


	)

20 
	~"../ªg.h
"

22 
	#AR_CR
 0x0008

	)

23 
	#AR_CR_RXE
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x0000000¯: 0x00000004)

	)

24 
	#AR_CR_RXD
 0x00000020

	)

25 
	#AR_CR_SWI
 0x00000040

	)

27 
	#AR_RXDP
 0x000C

	)

29 
	#AR_CFG
 0x0014

	)

30 
	#AR_CFG_SWTD
 0x00000001

	)

31 
	#AR_CFG_SWTB
 0x00000002

	)

32 
	#AR_CFG_SWRD
 0x00000004

	)

33 
	#AR_CFG_SWRB
 0x00000008

	)

34 
	#AR_CFG_SWRG
 0x00000010

	)

35 
	#AR_CFG_AP_ADHOC_INDICATION
 0x00000020

	)

36 
	#AR_CFG_PHOK
 0x00000100

	)

37 
	#AR_CFG_CLK_GATE_DIS
 0x00000400

	)

38 
	#AR_CFG_EEBS
 0x00000200

	)

39 
	#AR_CFG_PCI_MASTER_REQ_Q_THRESH
 0x00060000

	)

40 
	#AR_CFG_PCI_MASTER_REQ_Q_THRESH_S
 17

	)

42 
	#AR_RXBP_THRESH
 0x0018

	)

43 
	#AR_RXBP_THRESH_HP
 0x0000000f

	)

44 
	#AR_RXBP_THRESH_HP_S
 0

	)

45 
	#AR_RXBP_THRESH_LP
 0x00003f00

	)

46 
	#AR_RXBP_THRESH_LP_S
 8

	)

48 
	#AR_MIRT
 0x0020

	)

49 
	#AR_MIRT_VAL
 0x0000ffff

	)

50 
	#AR_MIRT_VAL_S
 16

	)

52 
	#AR_IER
 0x0024

	)

53 
	#AR_IER_ENABLE
 0x00000001

	)

54 
	#AR_IER_DISABLE
 0x00000000

	)

56 
	#AR_TIMT
 0x0028

	)

57 
	#AR_TIMT_LAST
 0x0000ffff

	)

58 
	#AR_TIMT_LAST_S
 0

	)

59 
	#AR_TIMT_FIRST
 0xffff0000

	)

60 
	#AR_TIMT_FIRST_S
 16

	)

62 
	#AR_RIMT
 0x002C

	)

63 
	#AR_RIMT_LAST
 0x0000ffff

	)

64 
	#AR_RIMT_LAST_S
 0

	)

65 
	#AR_RIMT_FIRST
 0xffff0000

	)

66 
	#AR_RIMT_FIRST_S
 16

	)

68 
	#AR_DMASIZE_4B
 0x00000000

	)

69 
	#AR_DMASIZE_8B
 0x00000001

	)

70 
	#AR_DMASIZE_16B
 0x00000002

	)

71 
	#AR_DMASIZE_32B
 0x00000003

	)

72 
	#AR_DMASIZE_64B
 0x00000004

	)

73 
	#AR_DMASIZE_128B
 0x00000005

	)

74 
	#AR_DMASIZE_256B
 0x00000006

	)

75 
	#AR_DMASIZE_512B
 0x00000007

	)

77 
	#AR_TXCFG
 0x0030

	)

78 
	#AR_TXCFG_DMASZ_MASK
 0x00000007

	)

79 
	#AR_TXCFG_DMASZ_4B
 0

	)

80 
	#AR_TXCFG_DMASZ_8B
 1

	)

81 
	#AR_TXCFG_DMASZ_16B
 2

	)

82 
	#AR_TXCFG_DMASZ_32B
 3

	)

83 
	#AR_TXCFG_DMASZ_64B
 4

	)

84 
	#AR_TXCFG_DMASZ_128B
 5

	)

85 
	#AR_TXCFG_DMASZ_256B
 6

	)

86 
	#AR_TXCFG_DMASZ_512B
 7

	)

87 
	#AR_FTRIG
 0x000003F0

	)

88 
	#AR_FTRIG_S
 4

	)

89 
	#AR_FTRIG_IMMED
 0x00000000

	)

90 
	#AR_FTRIG_64B
 0x00000010

	)

91 
	#AR_FTRIG_128B
 0x00000020

	)

92 
	#AR_FTRIG_192B
 0x00000030

	)

93 
	#AR_FTRIG_256B
 0x00000040

	)

94 
	#AR_FTRIG_512B
 0x00000080

	)

95 
	#AR_TXCFG_ADHOC_BEACON_ATIM_TX_POLICY
 0x00000800

	)

97 
	#AR_RXCFG
 0x0034

	)

98 
	#AR_RXCFG_CHIRP
 0x00000008

	)

99 
	#AR_RXCFG_ZLFDMA
 0x00000010

	)

100 
	#AR_RXCFG_DMASZ_MASK
 0x00000007

	)

101 
	#AR_RXCFG_DMASZ_4B
 0

	)

102 
	#AR_RXCFG_DMASZ_8B
 1

	)

103 
	#AR_RXCFG_DMASZ_16B
 2

	)

104 
	#AR_RXCFG_DMASZ_32B
 3

	)

105 
	#AR_RXCFG_DMASZ_64B
 4

	)

106 
	#AR_RXCFG_DMASZ_128B
 5

	)

107 
	#AR_RXCFG_DMASZ_256B
 6

	)

108 
	#AR_RXCFG_DMASZ_512B
 7

	)

110 
	#AR_TOPS
 0x0044

	)

111 
	#AR_TOPS_MASK
 0x0000FFFF

	)

113 
	#AR_RXNPTO
 0x0048

	)

114 
	#AR_RXNPTO_MASK
 0x000003FF

	)

116 
	#AR_TXNPTO
 0x004C

	)

117 
	#AR_TXNPTO_MASK
 0x000003FF

	)

118 
	#AR_TXNPTO_QCU_MASK
 0x000FFC00

	)

120 
	#AR_RPGTO
 0x0050

	)

121 
	#AR_RPGTO_MASK
 0x000003FF

	)

123 
	#AR_RPCNT
 0x0054

	)

124 
	#AR_RPCNT_MASK
 0x0000001F

	)

126 
	#AR_MACMISC
 0x0058

	)

127 
	#AR_MACMISC_PCI_EXT_FORCE
 0x00000010

	)

128 
	#AR_MACMISC_DMA_OBS
 0x000001E0

	)

129 
	#AR_MACMISC_DMA_OBS_S
 5

	)

130 
	#AR_MACMISC_DMA_OBS_LINE_0
 0

	)

131 
	#AR_MACMISC_DMA_OBS_LINE_1
 1

	)

132 
	#AR_MACMISC_DMA_OBS_LINE_2
 2

	)

133 
	#AR_MACMISC_DMA_OBS_LINE_3
 3

	)

134 
	#AR_MACMISC_DMA_OBS_LINE_4
 4

	)

135 
	#AR_MACMISC_DMA_OBS_LINE_5
 5

	)

136 
	#AR_MACMISC_DMA_OBS_LINE_6
 6

	)

137 
	#AR_MACMISC_DMA_OBS_LINE_7
 7

	)

138 
	#AR_MACMISC_DMA_OBS_LINE_8
 8

	)

139 
	#AR_MACMISC_MISC_OBS
 0x00000E00

	)

140 
	#AR_MACMISC_MISC_OBS_S
 9

	)

141 
	#AR_MACMISC_MISC_OBS_BUS_LSB
 0x00007000

	)

142 
	#AR_MACMISC_MISC_OBS_BUS_LSB_S
 12

	)

143 
	#AR_MACMISC_MISC_OBS_BUS_MSB
 0x00038000

	)

144 
	#AR_MACMISC_MISC_OBS_BUS_MSB_S
 15

	)

145 
	#AR_MACMISC_MISC_OBS_BUS_1
 1

	)

147 
	#AR_DATABUF_SIZE
 0x0060

	)

148 
	#AR_DATABUF_SIZE_MASK
 0x00000FFF

	)

150 
	#AR_GTXTO
 0x0064

	)

151 
	#AR_GTXTO_TIMEOUT_COUNTER
 0x0000FFFF

	)

152 
	#AR_GTXTO_TIMEOUT_LIMIT
 0xFFFF0000

	)

153 
	#AR_GTXTO_TIMEOUT_LIMIT_S
 16

	)

155 
	#AR_GTTM
 0x0068

	)

156 
	#AR_GTTM_USEC
 0x00000001

	)

157 
	#AR_GTTM_IGNORE_IDLE
 0x00000002

	)

158 
	#AR_GTTM_RESET_IDLE
 0x00000004

	)

159 
	#AR_GTTM_CST_USEC
 0x00000008

	)

161 
	#AR_CST
 0x006C

	)

162 
	#AR_CST_TIMEOUT_COUNTER
 0x0000FFFF

	)

163 
	#AR_CST_TIMEOUT_LIMIT
 0xFFFF0000

	)

164 
	#AR_CST_TIMEOUT_LIMIT_S
 16

	)

166 
	#AR_HP_RXDP
 0x0074

	)

167 
	#AR_LP_RXDP
 0x0078

	)

169 
	#AR_ISR
 0x0080

	)

170 
	#AR_ISR_RXOK
 0x00000001

	)

171 
	#AR_ISR_RXDESC
 0x00000002

	)

172 
	#AR_ISR_HP_RXOK
 0x00000001

	)

173 
	#AR_ISR_LP_RXOK
 0x00000002

	)

174 
	#AR_ISR_RXERR
 0x00000004

	)

175 
	#AR_ISR_RXNOPKT
 0x00000008

	)

176 
	#AR_ISR_RXEOL
 0x00000010

	)

177 
	#AR_ISR_RXORN
 0x00000020

	)

178 
	#AR_ISR_TXOK
 0x00000040

	)

179 
	#AR_ISR_TXDESC
 0x00000080

	)

180 
	#AR_ISR_TXERR
 0x00000100

	)

181 
	#AR_ISR_TXNOPKT
 0x00000200

	)

182 
	#AR_ISR_TXEOL
 0x00000400

	)

183 
	#AR_ISR_TXURN
 0x00000800

	)

184 
	#AR_ISR_MIB
 0x00001000

	)

185 
	#AR_ISR_SWI
 0x00002000

	)

186 
	#AR_ISR_RXPHY
 0x00004000

	)

187 
	#AR_ISR_RXKCM
 0x00008000

	)

188 
	#AR_ISR_SWBA
 0x00010000

	)

189 
	#AR_ISR_BRSSI
 0x00020000

	)

190 
	#AR_ISR_BMISS
 0x00040000

	)

191 
	#AR_ISR_BNR
 0x00100000

	)

192 
	#AR_ISR_RXCHIRP
 0x00200000

	)

193 
	#AR_ISR_BCNMISC
 0x00800000

	)

194 
	#AR_ISR_TIM
 0x00800000

	)

195 
	#AR_ISR_QCBROVF
 0x02000000

	)

196 
	#AR_ISR_QCBRURN
 0x04000000

	)

197 
	#AR_ISR_QTRIG
 0x08000000

	)

198 
	#AR_ISR_GENTMR
 0x10000000

	)

200 
	#AR_ISR_TXMINTR
 0x00080000

	)

201 
	#AR_ISR_RXMINTR
 0x01000000

	)

202 
	#AR_ISR_TXINTM
 0x40000000

	)

203 
	#AR_ISR_RXINTM
 0x80000000

	)

205 
	#AR_ISR_S0
 0x0084

	)

206 
	#AR_ISR_S0_QCU_TXOK
 0x000003FF

	)

207 
	#AR_ISR_S0_QCU_TXOK_S
 0

	)

208 
	#AR_ISR_S0_QCU_TXDESC
 0x03FF0000

	)

209 
	#AR_ISR_S0_QCU_TXDESC_S
 16

	)

211 
	#AR_ISR_S1
 0x0088

	)

212 
	#AR_ISR_S1_QCU_TXERR
 0x000003FF

	)

213 
	#AR_ISR_S1_QCU_TXERR_S
 0

	)

214 
	#AR_ISR_S1_QCU_TXEOL
 0x03FF0000

	)

215 
	#AR_ISR_S1_QCU_TXEOL_S
 16

	)

217 
	#AR_ISR_S2
 0x008c

	)

218 
	#AR_ISR_S2_QCU_TXURN
 0x000003FF

	)

219 
	#AR_ISR_S2_BB_WATCHDOG
 0x00010000

	)

220 
	#AR_ISR_S2_CST
 0x00400000

	)

221 
	#AR_ISR_S2_GTT
 0x00800000

	)

222 
	#AR_ISR_S2_TIM
 0x01000000

	)

223 
	#AR_ISR_S2_CABEND
 0x02000000

	)

224 
	#AR_ISR_S2_DTIMSYNC
 0x04000000

	)

225 
	#AR_ISR_S2_BCNTO
 0x08000000

	)

226 
	#AR_ISR_S2_CABTO
 0x10000000

	)

227 
	#AR_ISR_S2_DTIM
 0x20000000

	)

228 
	#AR_ISR_S2_TSFOOR
 0x40000000

	)

229 
	#AR_ISR_S2_TBTT_TIME
 0x80000000

	)

231 
	#AR_ISR_S3
 0x0090

	)

232 
	#AR_ISR_S3_QCU_QCBROVF
 0x000003FF

	)

233 
	#AR_ISR_S3_QCU_QCBRURN
 0x03FF0000

	)

235 
	#AR_ISR_S4
 0x0094

	)

236 
	#AR_ISR_S4_QCU_QTRIG
 0x000003FF

	)

237 
	#AR_ISR_S4_RESV0
 0xFFFFFC00

	)

239 
	#AR_ISR_S5
 0x0098

	)

240 
	#AR_ISR_S5_TIMER_TRIG
 0x000000FF

	)

241 
	#AR_ISR_S5_TIMER_THRESH
 0x0007FE00

	)

242 
	#AR_ISR_S5_TIM_TIMER
 0x00000010

	)

243 
	#AR_ISR_S5_DTIM_TIMER
 0x00000020

	)

244 
	#AR_IMR_S5
 0x00b8

	)

245 
	#AR_IMR_S5_TIM_TIMER
 0x00000010

	)

246 
	#AR_IMR_S5_DTIM_TIMER
 0x00000020

	)

247 
	#AR_ISR_S5_GENTIMER_TRIG
 0x0000FF80

	)

248 
	#AR_ISR_S5_GENTIMER_TRIG_S
 0

	)

249 
	#AR_ISR_S5_GENTIMER_THRESH
 0xFF800000

	)

250 
	#AR_ISR_S5_GENTIMER_THRESH_S
 16

	)

251 
	#AR_IMR_S5_GENTIMER_TRIG
 0x0000FF80

	)

252 
	#AR_IMR_S5_GENTIMER_TRIG_S
 0

	)

253 
	#AR_IMR_S5_GENTIMER_THRESH
 0xFF800000

	)

254 
	#AR_IMR_S5_GENTIMER_THRESH_S
 16

	)

256 
	#AR_IMR
 0x00a0

	)

257 
	#AR_IMR_RXOK
 0x00000001

	)

258 
	#AR_IMR_RXDESC
 0x00000002

	)

259 
	#AR_IMR_RXOK_HP
 0x00000001

	)

260 
	#AR_IMR_RXOK_LP
 0x00000002

	)

261 
	#AR_IMR_RXERR
 0x00000004

	)

262 
	#AR_IMR_RXNOPKT
 0x00000008

	)

263 
	#AR_IMR_RXEOL
 0x00000010

	)

264 
	#AR_IMR_RXORN
 0x00000020

	)

265 
	#AR_IMR_TXOK
 0x00000040

	)

266 
	#AR_IMR_TXDESC
 0x00000080

	)

267 
	#AR_IMR_TXERR
 0x00000100

	)

268 
	#AR_IMR_TXNOPKT
 0x00000200

	)

269 
	#AR_IMR_TXEOL
 0x00000400

	)

270 
	#AR_IMR_TXURN
 0x00000800

	)

271 
	#AR_IMR_MIB
 0x00001000

	)

272 
	#AR_IMR_SWI
 0x00002000

	)

273 
	#AR_IMR_RXPHY
 0x00004000

	)

274 
	#AR_IMR_RXKCM
 0x00008000

	)

275 
	#AR_IMR_SWBA
 0x00010000

	)

276 
	#AR_IMR_BRSSI
 0x00020000

	)

277 
	#AR_IMR_BMISS
 0x00040000

	)

278 
	#AR_IMR_BNR
 0x00100000

	)

279 
	#AR_IMR_RXCHIRP
 0x00200000

	)

280 
	#AR_IMR_BCNMISC
 0x00800000

	)

281 
	#AR_IMR_TIM
 0x00800000

	)

282 
	#AR_IMR_QCBROVF
 0x02000000

	)

283 
	#AR_IMR_QCBRURN
 0x04000000

	)

284 
	#AR_IMR_QTRIG
 0x08000000

	)

285 
	#AR_IMR_GENTMR
 0x10000000

	)

287 
	#AR_IMR_TXMINTR
 0x00080000

	)

288 
	#AR_IMR_RXMINTR
 0x01000000

	)

289 
	#AR_IMR_TXINTM
 0x40000000

	)

290 
	#AR_IMR_RXINTM
 0x80000000

	)

292 
	#AR_IMR_S0
 0x00a4

	)

293 
	#AR_IMR_S0_QCU_TXOK
 0x000003FF

	)

294 
	#AR_IMR_S0_QCU_TXOK_S
 0

	)

295 
	#AR_IMR_S0_QCU_TXDESC
 0x03FF0000

	)

296 
	#AR_IMR_S0_QCU_TXDESC_S
 16

	)

298 
	#AR_IMR_S1
 0x00a8

	)

299 
	#AR_IMR_S1_QCU_TXERR
 0x000003FF

	)

300 
	#AR_IMR_S1_QCU_TXERR_S
 0

	)

301 
	#AR_IMR_S1_QCU_TXEOL
 0x03FF0000

	)

302 
	#AR_IMR_S1_QCU_TXEOL_S
 16

	)

304 
	#AR_IMR_S2
 0x00ac

	)

305 
	#AR_IMR_S2_QCU_TXURN
 0x000003FF

	)

306 
	#AR_IMR_S2_QCU_TXURN_S
 0

	)

307 
	#AR_IMR_S2_BB_WATCHDOG
 0x00010000

	)

308 
	#AR_IMR_S2_CST
 0x00400000

	)

309 
	#AR_IMR_S2_GTT
 0x00800000

	)

310 
	#AR_IMR_S2_TIM
 0x01000000

	)

311 
	#AR_IMR_S2_CABEND
 0x02000000

	)

312 
	#AR_IMR_S2_DTIMSYNC
 0x04000000

	)

313 
	#AR_IMR_S2_BCNTO
 0x08000000

	)

314 
	#AR_IMR_S2_CABTO
 0x10000000

	)

315 
	#AR_IMR_S2_DTIM
 0x20000000

	)

316 
	#AR_IMR_S2_TSFOOR
 0x40000000

	)

318 
	#AR_IMR_S3
 0x00b0

	)

319 
	#AR_IMR_S3_QCU_QCBROVF
 0x000003FF

	)

320 
	#AR_IMR_S3_QCU_QCBRURN
 0x03FF0000

	)

321 
	#AR_IMR_S3_QCU_QCBRURN_S
 16

	)

323 
	#AR_IMR_S4
 0x00b4

	)

324 
	#AR_IMR_S4_QCU_QTRIG
 0x000003FF

	)

325 
	#AR_IMR_S4_RESV0
 0xFFFFFC00

	)

327 
	#AR_IMR_S5
 0x00b8

	)

328 
	#AR_IMR_S5_TIMER_TRIG
 0x000000FF

	)

329 
	#AR_IMR_S5_TIMER_THRESH
 0x0000FF00

	)

332 
	#AR_ISR_RAC
 0x00c0

	)

333 
	#AR_ISR_S0_S
 0x00c4

	)

334 
	#AR_ISR_S0_QCU_TXOK
 0x000003FF

	)

335 
	#AR_ISR_S0_QCU_TXOK_S
 0

	)

336 
	#AR_ISR_S0_QCU_TXDESC
 0x03FF0000

	)

337 
	#AR_ISR_S0_QCU_TXDESC_S
 16

	)

339 
	#AR_ISR_S1_S
 0x00c8

	)

340 
	#AR_ISR_S1_QCU_TXERR
 0x000003FF

	)

341 
	#AR_ISR_S1_QCU_TXERR_S
 0

	)

342 
	#AR_ISR_S1_QCU_TXEOL
 0x03FF0000

	)

343 
	#AR_ISR_S1_QCU_TXEOL_S
 16

	)

345 
	#AR_ISR_S2_S
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x00d0 : 0x00cc)

	)

346 
	#AR_ISR_S3_S
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x00d4 : 0x00d0)

	)

347 
	#AR_ISR_S4_S
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x00d8 : 0x00d4)

	)

348 
	#AR_ISR_S5_S
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x00d¯: 0x00d8)

	)

349 
	#AR_DMADBG_0
 0x00e0

	)

350 
	#AR_DMADBG_1
 0x00e4

	)

351 
	#AR_DMADBG_2
 0x00e8

	)

352 
	#AR_DMADBG_3
 0x00ec

	)

353 
	#AR_DMADBG_4
 0x00f0

	)

354 
	#AR_DMADBG_5
 0x00f4

	)

355 
	#AR_DMADBG_6
 0x00f8

	)

356 
	#AR_DMADBG_7
 0x00fc

	)

358 
	#AR_NUM_QCU
 10

	)

359 
	#AR_QCU_0
 0x0001

	)

360 
	#AR_QCU_1
 0x0002

	)

361 
	#AR_QCU_2
 0x0004

	)

362 
	#AR_QCU_3
 0x0008

	)

363 
	#AR_QCU_4
 0x0010

	)

364 
	#AR_QCU_5
 0x0020

	)

365 
	#AR_QCU_6
 0x0040

	)

366 
	#AR_QCU_7
 0x0080

	)

367 
	#AR_QCU_8
 0x0100

	)

368 
	#AR_QCU_9
 0x0200

	)

370 
	#AR_Q0_TXDP
 0x0800

	)

371 
	#AR_Q1_TXDP
 0x0804

	)

372 
	#AR_Q2_TXDP
 0x0808

	)

373 
	#AR_Q3_TXDP
 0x080c

	)

374 
	#AR_Q4_TXDP
 0x0810

	)

375 
	#AR_Q5_TXDP
 0x0814

	)

376 
	#AR_Q6_TXDP
 0x0818

	)

377 
	#AR_Q7_TXDP
 0x081c

	)

378 
	#AR_Q8_TXDP
 0x0820

	)

379 
	#AR_Q9_TXDP
 0x0824

	)

380 
	#AR_QTXDP
(
_i
Ë(
AR_Q0_TXDP
 + ((_i)<<2))

	)

382 
	#AR_Q_STATUS_RING_START
 0x830

	)

383 
	#AR_Q_STATUS_RING_END
 0x834

	)

385 
	#AR_Q_TXE
 0x0840

	)

386 
	#AR_Q_TXE_M
 0x000003FF

	)

388 
	#AR_Q_TXD
 0x0880

	)

389 
	#AR_Q_TXD_M
 0x000003FF

	)

391 
	#AR_Q0_CBRCFG
 0x08c0

	)

392 
	#AR_Q1_CBRCFG
 0x08c4

	)

393 
	#AR_Q2_CBRCFG
 0x08c8

	)

394 
	#AR_Q3_CBRCFG
 0x08cc

	)

395 
	#AR_Q4_CBRCFG
 0x08d0

	)

396 
	#AR_Q5_CBRCFG
 0x08d4

	)

397 
	#AR_Q6_CBRCFG
 0x08d8

	)

398 
	#AR_Q7_CBRCFG
 0x08dc

	)

399 
	#AR_Q8_CBRCFG
 0x08e0

	)

400 
	#AR_Q9_CBRCFG
 0x08e4

	)

401 
	#AR_QCBRCFG
(
_i
Ë(
AR_Q0_CBRCFG
 + ((_i)<<2))

	)

402 
	#AR_Q_CBRCFG_INTERVAL
 0x00FFFFFF

	)

403 
	#AR_Q_CBRCFG_INTERVAL_S
 0

	)

404 
	#AR_Q_CBRCFG_OVF_THRESH
 0xFF000000

	)

405 
	#AR_Q_CBRCFG_OVF_THRESH_S
 24

	)

407 
	#AR_Q0_RDYTIMECFG
 0x0900

	)

408 
	#AR_Q1_RDYTIMECFG
 0x0904

	)

409 
	#AR_Q2_RDYTIMECFG
 0x0908

	)

410 
	#AR_Q3_RDYTIMECFG
 0x090c

	)

411 
	#AR_Q4_RDYTIMECFG
 0x0910

	)

412 
	#AR_Q5_RDYTIMECFG
 0x0914

	)

413 
	#AR_Q6_RDYTIMECFG
 0x0918

	)

414 
	#AR_Q7_RDYTIMECFG
 0x091c

	)

415 
	#AR_Q8_RDYTIMECFG
 0x0920

	)

416 
	#AR_Q9_RDYTIMECFG
 0x0924

	)

417 
	#AR_QRDYTIMECFG
(
_i
Ë(
AR_Q0_RDYTIMECFG
 + ((_i)<<2))

	)

418 
	#AR_Q_RDYTIMECFG_DURATION
 0x00FFFFFF

	)

419 
	#AR_Q_RDYTIMECFG_DURATION_S
 0

	)

420 
	#AR_Q_RDYTIMECFG_EN
 0x01000000

	)

422 
	#AR_Q_ONESHOTARM_SC
 0x0940

	)

423 
	#AR_Q_ONESHOTARM_SC_M
 0x000003FF

	)

424 
	#AR_Q_ONESHOTARM_SC_RESV0
 0xFFFFFC00

	)

426 
	#AR_Q_ONESHOTARM_CC
 0x0980

	)

427 
	#AR_Q_ONESHOTARM_CC_M
 0x000003FF

	)

428 
	#AR_Q_ONESHOTARM_CC_RESV0
 0xFFFFFC00

	)

430 
	#AR_Q0_MISC
 0x09c0

	)

431 
	#AR_Q1_MISC
 0x09c4

	)

432 
	#AR_Q2_MISC
 0x09c8

	)

433 
	#AR_Q3_MISC
 0x09cc

	)

434 
	#AR_Q4_MISC
 0x09d0

	)

435 
	#AR_Q5_MISC
 0x09d4

	)

436 
	#AR_Q6_MISC
 0x09d8

	)

437 
	#AR_Q7_MISC
 0x09dc

	)

438 
	#AR_Q8_MISC
 0x09e0

	)

439 
	#AR_Q9_MISC
 0x09e4

	)

440 
	#AR_QMISC
(
_i
Ë(
AR_Q0_MISC
 + ((_i)<<2))

	)

441 
	#AR_Q_MISC_FSP
 0x0000000F

	)

442 
	#AR_Q_MISC_FSP_ASAP
 0

	)

443 
	#AR_Q_MISC_FSP_CBR
 1

	)

444 
	#AR_Q_MISC_FSP_DBA_GATED
 2

	)

445 
	#AR_Q_MISC_FSP_TIM_GATED
 3

	)

446 
	#AR_Q_MISC_FSP_BEACON_SENT_GATED
 4

	)

447 
	#AR_Q_MISC_FSP_BEACON_RCVD_GATED
 5

	)

448 
	#AR_Q_MISC_ONE_SHOT_EN
 0x00000010

	)

449 
	#AR_Q_MISC_CBR_INCR_DIS1
 0x00000020

	)

450 
	#AR_Q_MISC_CBR_INCR_DIS0
 0x00000040

	)

451 
	#AR_Q_MISC_BEACON_USE
 0x00000080

	)

452 
	#AR_Q_MISC_CBR_EXP_CNTR_LIMIT_EN
 0x00000100

	)

453 
	#AR_Q_MISC_RDYTIME_EXP_POLICY
 0x00000200

	)

454 
	#AR_Q_MISC_RESET_CBR_EXP_CTR
 0x00000400

	)

455 
	#AR_Q_MISC_DCU_EARLY_TERM_REQ
 0x00000800

	)

456 
	#AR_Q_MISC_RESV0
 0xFFFFF000

	)

458 
	#AR_Q0_STS
 0x0a00

	)

459 
	#AR_Q1_STS
 0x0a04

	)

460 
	#AR_Q2_STS
 0x0a08

	)

461 
	#AR_Q3_STS
 0x0a0c

	)

462 
	#AR_Q4_STS
 0x0a10

	)

463 
	#AR_Q5_STS
 0x0a14

	)

464 
	#AR_Q6_STS
 0x0a18

	)

465 
	#AR_Q7_STS
 0x0a1c

	)

466 
	#AR_Q8_STS
 0x0a20

	)

467 
	#AR_Q9_STS
 0x0a24

	)

468 
	#AR_QSTS
(
_i
Ë(
AR_Q0_STS
 + ((_i)<<2))

	)

469 
	#AR_Q_STS_PEND_FR_CNT
 0x00000003

	)

470 
	#AR_Q_STS_RESV0
 0x000000FC

	)

471 
	#AR_Q_STS_CBR_EXP_CNT
 0x0000FF00

	)

472 
	#AR_Q_STS_RESV1
 0xFFFF0000

	)

474 
	#AR_Q_RDYTIMESHDN
 0x0a40

	)

475 
	#AR_Q_RDYTIMESHDN_M
 0x000003FF

	)

478 
	#AR_Q_DESC_CRCCHK
 0xa44

	)

480 
	#AR_Q_DESC_CRCCHK_EN
 1

	)

482 
	#AR_NUM_DCU
 10

	)

483 
	#AR_DCU_0
 0x0001

	)

484 
	#AR_DCU_1
 0x0002

	)

485 
	#AR_DCU_2
 0x0004

	)

486 
	#AR_DCU_3
 0x0008

	)

487 
	#AR_DCU_4
 0x0010

	)

488 
	#AR_DCU_5
 0x0020

	)

489 
	#AR_DCU_6
 0x0040

	)

490 
	#AR_DCU_7
 0x0080

	)

491 
	#AR_DCU_8
 0x0100

	)

492 
	#AR_DCU_9
 0x0200

	)

494 
	#AR_D0_QCUMASK
 0x1000

	)

495 
	#AR_D1_QCUMASK
 0x1004

	)

496 
	#AR_D2_QCUMASK
 0x1008

	)

497 
	#AR_D3_QCUMASK
 0x100c

	)

498 
	#AR_D4_QCUMASK
 0x1010

	)

499 
	#AR_D5_QCUMASK
 0x1014

	)

500 
	#AR_D6_QCUMASK
 0x1018

	)

501 
	#AR_D7_QCUMASK
 0x101c

	)

502 
	#AR_D8_QCUMASK
 0x1020

	)

503 
	#AR_D9_QCUMASK
 0x1024

	)

504 
	#AR_DQCUMASK
(
_i
Ë(
AR_D0_QCUMASK
 + ((_i)<<2))

	)

505 
	#AR_D_QCUMASK
 0x000003FF

	)

506 
	#AR_D_QCUMASK_RESV0
 0xFFFFFC00

	)

508 
	#AR_D0_LCL_IFS
 0x1040

	)

509 
	#AR_D1_LCL_IFS
 0x1044

	)

510 
	#AR_D2_LCL_IFS
 0x1048

	)

511 
	#AR_D3_LCL_IFS
 0x104c

	)

512 
	#AR_D4_LCL_IFS
 0x1050

	)

513 
	#AR_D5_LCL_IFS
 0x1054

	)

514 
	#AR_D6_LCL_IFS
 0x1058

	)

515 
	#AR_D7_LCL_IFS
 0x105c

	)

516 
	#AR_D8_LCL_IFS
 0x1060

	)

517 
	#AR_D9_LCL_IFS
 0x1064

	)

518 
	#AR_DLCL_IFS
(
_i
Ë(
AR_D0_LCL_IFS
 + ((_i)<<2))

	)

519 
	#AR_D_LCL_IFS_CWMIN
 0x000003FF

	)

520 
	#AR_D_LCL_IFS_CWMIN_S
 0

	)

521 
	#AR_D_LCL_IFS_CWMAX
 0x000FFC00

	)

522 
	#AR_D_LCL_IFS_CWMAX_S
 10

	)

523 
	#AR_D_LCL_IFS_AIFS
 0x0FF00000

	)

524 
	#AR_D_LCL_IFS_AIFS_S
 20

	)

526 
	#AR_D_LCL_IFS_RESV0
 0xF0000000

	)

528 
	#AR_D0_RETRY_LIMIT
 0x1080

	)

529 
	#AR_D1_RETRY_LIMIT
 0x1084

	)

530 
	#AR_D2_RETRY_LIMIT
 0x1088

	)

531 
	#AR_D3_RETRY_LIMIT
 0x108c

	)

532 
	#AR_D4_RETRY_LIMIT
 0x1090

	)

533 
	#AR_D5_RETRY_LIMIT
 0x1094

	)

534 
	#AR_D6_RETRY_LIMIT
 0x1098

	)

535 
	#AR_D7_RETRY_LIMIT
 0x109c

	)

536 
	#AR_D8_RETRY_LIMIT
 0x10a0

	)

537 
	#AR_D9_RETRY_LIMIT
 0x10a4

	)

538 
	#AR_DRETRY_LIMIT
(
_i
Ë(
AR_D0_RETRY_LIMIT
 + ((_i)<<2))

	)

539 
	#AR_D_RETRY_LIMIT_FR_SH
 0x0000000F

	)

540 
	#AR_D_RETRY_LIMIT_FR_SH_S
 0

	)

541 
	#AR_D_RETRY_LIMIT_STA_SH
 0x00003F00

	)

542 
	#AR_D_RETRY_LIMIT_STA_SH_S
 8

	)

543 
	#AR_D_RETRY_LIMIT_STA_LG
 0x000FC000

	)

544 
	#AR_D_RETRY_LIMIT_STA_LG_S
 14

	)

545 
	#AR_D_RETRY_LIMIT_RESV0
 0xFFF00000

	)

547 
	#AR_D0_CHNTIME
 0x10c0

	)

548 
	#AR_D1_CHNTIME
 0x10c4

	)

549 
	#AR_D2_CHNTIME
 0x10c8

	)

550 
	#AR_D3_CHNTIME
 0x10cc

	)

551 
	#AR_D4_CHNTIME
 0x10d0

	)

552 
	#AR_D5_CHNTIME
 0x10d4

	)

553 
	#AR_D6_CHNTIME
 0x10d8

	)

554 
	#AR_D7_CHNTIME
 0x10dc

	)

555 
	#AR_D8_CHNTIME
 0x10e0

	)

556 
	#AR_D9_CHNTIME
 0x10e4

	)

557 
	#AR_DCHNTIME
(
_i
Ë(
AR_D0_CHNTIME
 + ((_i)<<2))

	)

558 
	#AR_D_CHNTIME_DUR
 0x000FFFFF

	)

559 
	#AR_D_CHNTIME_DUR_S
 0

	)

560 
	#AR_D_CHNTIME_EN
 0x00100000

	)

561 
	#AR_D_CHNTIME_RESV0
 0xFFE00000

	)

563 
	#AR_D0_MISC
 0x1100

	)

564 
	#AR_D1_MISC
 0x1104

	)

565 
	#AR_D2_MISC
 0x1108

	)

566 
	#AR_D3_MISC
 0x110c

	)

567 
	#AR_D4_MISC
 0x1110

	)

568 
	#AR_D5_MISC
 0x1114

	)

569 
	#AR_D6_MISC
 0x1118

	)

570 
	#AR_D7_MISC
 0x111c

	)

571 
	#AR_D8_MISC
 0x1120

	)

572 
	#AR_D9_MISC
 0x1124

	)

573 
	#AR_DMISC
(
_i
Ë(
AR_D0_MISC
 + ((_i)<<2))

	)

574 
	#AR_D_MISC_BKOFF_THRESH
 0x0000003F

	)

575 
	#AR_D_MISC_RETRY_CNT_RESET_EN
 0x00000040

	)

576 
	#AR_D_MISC_CW_RESET_EN
 0x00000080

	)

577 
	#AR_D_MISC_FRAG_WAIT_EN
 0x00000100

	)

578 
	#AR_D_MISC_FRAG_BKOFF_EN
 0x00000200

	)

579 
	#AR_D_MISC_CW_BKOFF_EN
 0x00001000

	)

580 
	#AR_D_MISC_VIR_COL_HANDLING
 0x0000C000

	)

581 
	#AR_D_MISC_VIR_COL_HANDLING_S
 14

	)

582 
	#AR_D_MISC_VIR_COL_HANDLING_DEFAULT
 0

	)

583 
	#AR_D_MISC_VIR_COL_HANDLING_IGNORE
 1

	)

584 
	#AR_D_MISC_BEACON_USE
 0x00010000

	)

585 
	#AR_D_MISC_ARB_LOCKOUT_CNTRL
 0x00060000

	)

586 
	#AR_D_MISC_ARB_LOCKOUT_CNTRL_S
 17

	)

587 
	#AR_D_MISC_ARB_LOCKOUT_CNTRL_NONE
 0

	)

588 
	#AR_D_MISC_ARB_LOCKOUT_CNTRL_INTRA_FR
 1

	)

589 
	#AR_D_MISC_ARB_LOCKOUT_CNTRL_GLOBAL
 2

	)

590 
	#AR_D_MISC_ARB_LOCKOUT_IGNORE
 0x00080000

	)

591 
	#AR_D_MISC_SEQ_NUM_INCR_DIS
 0x00100000

	)

592 
	#AR_D_MISC_POST_FR_BKOFF_DIS
 0x00200000

	)

593 
	#AR_D_MISC_VIT_COL_CW_BKOFF_EN
 0x00400000

	)

594 
	#AR_D_MISC_BLOWN_IFS_RETRY_EN
 0x00800000

	)

595 
	#AR_D_MISC_RESV0
 0xFF000000

	)

597 
	#AR_D_SEQNUM
 0x1140

	)

599 
	#AR_D_GBL_IFS_SIFS
 0x1030

	)

600 
	#AR_D_GBL_IFS_SIFS_M
 0x0000FFFF

	)

601 
	#AR_D_GBL_IFS_SIFS_RESV0
 0xFFFFFFFF

	)

603 
	#AR_D_TXBLK_BASE
 0x1038

	)

604 
	#AR_D_TXBLK_WRITE_BITMASK
 0x0000FFFF

	)

605 
	#AR_D_TXBLK_WRITE_BITMASK_S
 0

	)

606 
	#AR_D_TXBLK_WRITE_SLICE
 0x000F0000

	)

607 
	#AR_D_TXBLK_WRITE_SLICE_S
 16

	)

608 
	#AR_D_TXBLK_WRITE_DCU
 0x00F00000

	)

609 
	#AR_D_TXBLK_WRITE_DCU_S
 20

	)

610 
	#AR_D_TXBLK_WRITE_COMMAND
 0x0F000000

	)

611 
	#AR_D_TXBLK_WRITE_COMMAND_S
 24

	)

613 
	#AR_D_GBL_IFS_SLOT
 0x1070

	)

614 
	#AR_D_GBL_IFS_SLOT_M
 0x0000FFFF

	)

615 
	#AR_D_GBL_IFS_SLOT_RESV0
 0xFFFF0000

	)

617 
	#AR_D_GBL_IFS_EIFS
 0x10b0

	)

618 
	#AR_D_GBL_IFS_EIFS_M
 0x0000FFFF

	)

619 
	#AR_D_GBL_IFS_EIFS_RESV0
 0xFFFF0000

	)

620 
	#AR_D_GBL_IFS_EIFS_ASYNC_FIFO
 363

	)

622 
	#AR_D_GBL_IFS_MISC
 0x10f0

	)

623 
	#AR_D_GBL_IFS_MISC_LFSR_SLICE_SEL
 0x00000007

	)

624 
	#AR_D_GBL_IFS_MISC_TURBO_MODE
 0x00000008

	)

625 
	#AR_D_GBL_IFS_MISC_USEC_DURATION
 0x000FFC00

	)

626 
	#AR_D_GBL_IFS_MISC_DCU_ARBITER_DLY
 0x00300000

	)

627 
	#AR_D_GBL_IFS_MISC_RANDOM_LFSR_SLICE_DIS
 0x01000000

	)

628 
	#AR_D_GBL_IFS_MISC_SLOT_XMIT_WIND_LEN
 0x06000000

	)

629 
	#AR_D_GBL_IFS_MISC_FORCE_XMIT_SLOT_BOUND
 0x08000000

	)

630 
	#AR_D_GBL_IFS_MISC_IGNORE_BACKOFF
 0x10000000

	)

632 
	#AR_D_FPCTL
 0x1230

	)

633 
	#AR_D_FPCTL_DCU
 0x0000000F

	)

634 
	#AR_D_FPCTL_DCU_S
 0

	)

635 
	#AR_D_FPCTL_PREFETCH_EN
 0x00000010

	)

636 
	#AR_D_FPCTL_BURST_PREFETCH
 0x00007FE0

	)

637 
	#AR_D_FPCTL_BURST_PREFETCH_S
 5

	)

639 
	#AR_D_TXPSE
 0x1270

	)

640 
	#AR_D_TXPSE_CTRL
 0x000003FF

	)

641 
	#AR_D_TXPSE_RESV0
 0x0000FC00

	)

642 
	#AR_D_TXPSE_STATUS
 0x00010000

	)

643 
	#AR_D_TXPSE_RESV1
 0xFFFE0000

	)

645 
	#AR_D_TXSLOTMASK
 0x12f0

	)

646 
	#AR_D_TXSLOTMASK_NUM
 0x0000000F

	)

648 
	#AR_CFG_LED
 0x1f04

	)

649 
	#AR_CFG_SCLK_RATE_IND
 0x00000003

	)

650 
	#AR_CFG_SCLK_RATE_IND_S
 0

	)

651 
	#AR_CFG_SCLK_32MHZ
 0x00000000

	)

652 
	#AR_CFG_SCLK_4MHZ
 0x00000001

	)

653 
	#AR_CFG_SCLK_1MHZ
 0x00000002

	)

654 
	#AR_CFG_SCLK_32KHZ
 0x00000003

	)

655 
	#AR_CFG_LED_BLINK_SLOW
 0x00000008

	)

656 
	#AR_CFG_LED_BLINK_THRESH_SEL
 0x00000070

	)

657 
	#AR_CFG_LED_MODE_SEL
 0x00000380

	)

658 
	#AR_CFG_LED_MODE_SEL_S
 7

	)

659 
	#AR_CFG_LED_POWER
 0x00000280

	)

660 
	#AR_CFG_LED_POWER_S
 7

	)

661 
	#AR_CFG_LED_NETWORK
 0x00000300

	)

662 
	#AR_CFG_LED_NETWORK_S
 7

	)

663 
	#AR_CFG_LED_MODE_PROP
 0x0

	)

664 
	#AR_CFG_LED_MODE_RPROP
 0x1

	)

665 
	#AR_CFG_LED_MODE_SPLIT
 0x2

	)

666 
	#AR_CFG_LED_MODE_RAND
 0x3

	)

667 
	#AR_CFG_LED_MODE_POWER_OFF
 0x4

	)

668 
	#AR_CFG_LED_MODE_POWER_ON
 0x5

	)

669 
	#AR_CFG_LED_MODE_NETWORK_OFF
 0x4

	)

670 
	#AR_CFG_LED_MODE_NETWORK_ON
 0x6

	)

671 
	#AR_CFG_LED_ASSOC_CTL
 0x00000c00

	)

672 
	#AR_CFG_LED_ASSOC_CTL_S
 10

	)

673 
	#AR_CFG_LED_ASSOC_NONE
 0x0

	)

674 
	#AR_CFG_LED_ASSOC_ACTIVE
 0x1

	)

675 
	#AR_CFG_LED_ASSOC_PENDING
 0x2

	)

677 
	#AR_CFG_LED_BLINK_SLOW
 0x00000008

	)

678 
	#AR_CFG_LED_BLINK_SLOW_S
 3

	)

680 
	#AR_CFG_LED_BLINK_THRESH_SEL
 0x00000070

	)

681 
	#AR_CFG_LED_BLINK_THRESH_SEL_S
 4

	)

683 
	#AR_MAC_SLEEP
 0x1f00

	)

684 
	#AR_MAC_SLEEP_MAC_AWAKE
 0x00000000

	)

685 
	#AR_MAC_SLEEP_MAC_ASLEEP
 0x00000001

	)

687 
	#AR_RC
 0x4000

	)

688 
	#AR_RC_AHB
 0x00000001

	)

689 
	#AR_RC_APB
 0x00000002

	)

690 
	#AR_RC_HOSTIF
 0x00000100

	)

692 
	#AR_WA
 (
	`AR_SREV_9340
(
ah
Ë? 0x40c4 : 0x4004)

	)

693 
	#AR_WA_BIT6
 (1 << 6)

	)

694 
	#AR_WA_BIT7
 (1 << 7)

	)

695 
	#AR_WA_BIT23
 (1 << 23)

	)

696 
	#AR_WA_D3_L1_DISABLE
 (1 << 14)

	)

697 
	#AR_WA_UNTIE_RESET_EN
 (1 << 15Ë

	)

699 
	#AR_WA_D3_TO_L1_DISABLE_REAL
 (1 << 16)

	)

700 
	#AR_WA_ASPM_TIMER_BASED_DISABLE
 (1 << 17)

	)

701 
	#AR_WA_RESET_EN
 (1 << 18Ë

	)

703 
	#AR_WA_ANALOG_SHIFT
 (1 << 20)

	)

704 
	#AR_WA_POR_SHORT
 (1 << 21Ë

	)

705 
	#AR_WA_BIT22
 (1 << 22)

	)

706 
	#AR9285_WA_DEFAULT
 0x004a050b

	)

707 
	#AR9280_WA_DEFAULT
 0x0040073b

	)

708 
	#AR_WA_DEFAULT
 0x0000073f

	)

711 
	#AR_PM_STATE
 0x4008

	)

712 
	#AR_PM_STATE_PME_D3COLD_VAUX
 0x00100000

	)

714 
	#AR_HOST_TIMEOUT
 (
	`AR_SREV_9340
(
ah
Ë? 0x4008 : 0x4018)

	)

715 
	#AR_HOST_TIMEOUT_APB_CNTR
 0x0000FFFF

	)

716 
	#AR_HOST_TIMEOUT_APB_CNTR_S
 0

	)

717 
	#AR_HOST_TIMEOUT_LCL_CNTR
 0xFFFF0000

	)

718 
	#AR_HOST_TIMEOUT_LCL_CNTR_S
 16

	)

720 
	#AR_EEPROM
 0x401c

	)

721 
	#AR_EEPROM_ABSENT
 0x00000100

	)

722 
	#AR_EEPROM_CORRUPT
 0x00000200

	)

723 
	#AR_EEPROM_PROT_MASK
 0x03FFFC00

	)

724 
	#AR_EEPROM_PROT_MASK_S
 10

	)

726 
	#EEPROM_PROTECT_RP_0_31
 0x0001

	)

727 
	#EEPROM_PROTECT_WP_0_31
 0x0002

	)

728 
	#EEPROM_PROTECT_RP_32_63
 0x0004

	)

729 
	#EEPROM_PROTECT_WP_32_63
 0x0008

	)

730 
	#EEPROM_PROTECT_RP_64_127
 0x0010

	)

731 
	#EEPROM_PROTECT_WP_64_127
 0x0020

	)

732 
	#EEPROM_PROTECT_RP_128_191
 0x0040

	)

733 
	#EEPROM_PROTECT_WP_128_191
 0x0080

	)

734 
	#EEPROM_PROTECT_RP_192_255
 0x0100

	)

735 
	#EEPROM_PROTECT_WP_192_255
 0x0200

	)

736 
	#EEPROM_PROTECT_RP_256_511
 0x0400

	)

737 
	#EEPROM_PROTECT_WP_256_511
 0x0800

	)

738 
	#EEPROM_PROTECT_RP_512_1023
 0x1000

	)

739 
	#EEPROM_PROTECT_WP_512_1023
 0x2000

	)

740 
	#EEPROM_PROTECT_RP_1024_2047
 0x4000

	)

741 
	#EEPROM_PROTECT_WP_1024_2047
 0x8000

	)

743 
	#AR_SREV
 \

744 ((
	`AR_SREV_9100
(
ah
)Ë? 0x0600 : (
	`AR_SREV_9340
(ah) \

745 ? 0x400¯: 0x4020))

	)

747 
	#AR_SREV_ID
 \

748 ((
	`AR_SREV_9100
(
ah
)Ë? 0x00000FFF : 0x000000FF)

	)

749 
	#AR_SREV_VERSION
 0x000000F0

	)

750 
	#AR_SREV_VERSION_S
 4

	)

751 
	#AR_SREV_REVISION
 0x00000007

	)

753 
	#AR_SREV_ID2
 0xFFFFFFFF

	)

754 
	#AR_SREV_VERSION2
 0xFFFC0000

	)

755 
	#AR_SREV_VERSION2_S
 18

	)

756 
	#AR_SREV_TYPE2
 0x0003F000

	)

757 
	#AR_SREV_TYPE2_S
 12

	)

758 
	#AR_SREV_TYPE2_CHAIN
 0x00001000

	)

759 
	#AR_SREV_TYPE2_HOST_MODE
 0x00002000

	)

760 
	#AR_SREV_REVISION2
 0x00000F00

	)

761 
	#AR_SREV_REVISION2_S
 8

	)

763 
	#AR_SREV_VERSION_5416_PCI
 0xD

	)

764 
	#AR_SREV_VERSION_5416_PCIE
 0xC

	)

765 
	#AR_SREV_REVISION_5416_10
 0

	)

766 
	#AR_SREV_REVISION_5416_20
 1

	)

767 
	#AR_SREV_REVISION_5416_22
 2

	)

768 
	#AR_SREV_VERSION_9100
 0x14

	)

769 
	#AR_SREV_VERSION_9160
 0x40

	)

770 
	#AR_SREV_REVISION_9160_10
 0

	)

771 
	#AR_SREV_REVISION_9160_11
 1

	)

772 
	#AR_SREV_VERSION_9280
 0x80

	)

773 
	#AR_SREV_REVISION_9280_10
 0

	)

774 
	#AR_SREV_REVISION_9280_20
 1

	)

775 
	#AR_SREV_REVISION_9280_21
 2

	)

776 
	#AR_SREV_VERSION_9285
 0xC0

	)

777 
	#AR_SREV_REVISION_9285_10
 0

	)

778 
	#AR_SREV_REVISION_9285_11
 1

	)

779 
	#AR_SREV_REVISION_9285_12
 2

	)

780 
	#AR_SREV_VERSION_9287
 0x180

	)

781 
	#AR_SREV_REVISION_9287_10
 0

	)

782 
	#AR_SREV_REVISION_9287_11
 1

	)

783 
	#AR_SREV_REVISION_9287_12
 2

	)

784 
	#AR_SREV_REVISION_9287_13
 3

	)

785 
	#AR_SREV_VERSION_9271
 0x140

	)

786 
	#AR_SREV_REVISION_9271_10
 0

	)

787 
	#AR_SREV_REVISION_9271_11
 1

	)

788 
	#AR_SREV_VERSION_9300
 0x1c0

	)

789 
	#AR_SREV_REVISION_9300_20
 2

	)

790 
	#AR_SREV_REVISION_9300_22
 3

	)

791 
	#AR_SREV_VERSION_9330
 0x200

	)

792 
	#AR_SREV_REVISION_9330_10
 0

	)

793 
	#AR_SREV_REVISION_9330_11
 1

	)

794 
	#AR_SREV_REVISION_9330_12
 2

	)

795 
	#AR_SREV_VERSION_9485
 0x240

	)

796 
	#AR_SREV_REVISION_9485_10
 0

	)

797 
	#AR_SREV_REVISION_9485_11
 1

	)

798 
	#AR_SREV_VERSION_9340
 0x300

	)

799 
	#AR_SREV_REVISION_9340_10
 0

	)

800 
	#AR_SREV_REVISION_9340_11
 1

	)

801 
	#AR_SREV_REVISION_9340_12
 2

	)

802 
	#AR_SREV_REVISION_9340_13
 3

	)

803 
	#AR_SREV_VERSION_9580
 0x1C0

	)

804 
	#AR_SREV_REVISION_9580_10
 4

	)

805 
	#AR_SREV_VERSION_9462
 0x280

	)

806 
	#AR_SREV_REVISION_9462_20
 2

	)

807 
	#AR_SREV_REVISION_9462_21
 3

	)

808 
	#AR_SREV_VERSION_9565
 0x2C0

	)

809 
	#AR_SREV_REVISION_9565_10
 0

	)

810 
	#AR_SREV_REVISION_9565_101
 1

	)

811 
	#AR_SREV_REVISION_9565_11
 2

	)

812 
	#AR_SREV_VERSION_9550
 0x400

	)

813 
	#AR_SREV_VERSION_9531
 0x500

	)

814 
	#AR_SREV_REVISION_9531_10
 0

	)

815 
	#AR_SREV_REVISION_9531_11
 1

	)

816 
	#AR_SREV_REVISION_9531_20
 2

	)

817 
	#AR_SREV_VERSION_9561
 0x600

	)

819 
	#AR_SREV_5416
(
_ah
) \

820 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_5416_PCI
) || \

821 ((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_5416_PCIE
))

	)

822 
	#AR_SREV_5416_22_OR_LATER
(
_ah
) \

823 (((
	`AR_SREV_5416
(
_ah
)) && \

824 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_5416_22
)) || \

825 ((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9100
))

	)

827 
	#AR_SREV_9100
(
ah
) \

828 ((
ah
->
hw_vîsi⁄
.
macVîsi⁄
Ë=
AR_SREV_VERSION_9100
)

	)

829 
	#AR_SREV_9100_OR_LATER
(
_ah
) \

830 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9100
))

	)

832 
	#AR_SREV_9160
(
_ah
) \

833 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9160
))

	)

834 
	#AR_SREV_9160_10_OR_LATER
(
_ah
) \

835 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9160
))

	)

836 
	#AR_SREV_9160_11
(
_ah
) \

837 (
	`AR_SREV_9160
(
_ah
) && \

838 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9160_11
))

	)

839 
	#AR_SREV_9280
(
_ah
) \

840 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9280
))

	)

841 
	#AR_SREV_9280_20_OR_LATER
(
_ah
) \

842 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9280
))

	)

843 
	#AR_SREV_9280_20
(
_ah
) \

844 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9280
))

	)

846 
	#AR_SREV_9285
(
_ah
) \

847 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9285
))

	)

848 
	#AR_SREV_9285_12_OR_LATER
(
_ah
) \

849 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9285
))

	)

851 
	#AR_SREV_9287
(
_ah
) \

852 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9287
))

	)

853 
	#AR_SREV_9287_11_OR_LATER
(
_ah
) \

854 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9287
))

	)

855 
	#AR_SREV_9287_11
(
_ah
) \

856 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9287
) && \

857 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9287_11
))

	)

858 
	#AR_SREV_9287_12
(
_ah
) \

859 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9287
) && \

860 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9287_12
))

	)

861 
	#AR_SREV_9287_12_OR_LATER
(
_ah
) \

862 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 > 
AR_SREV_VERSION_9287
) || \

863 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9287
) && \

864 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9287_12
)))

	)

865 
	#AR_SREV_9287_13_OR_LATER
(
_ah
) \

866 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 > 
AR_SREV_VERSION_9287
) || \

867 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9287
) && \

868 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9287_13
)))

	)

870 
	#AR_SREV_9271
(
_ah
) \

871 (((
_ah
))->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9271
)

	)

872 
	#AR_SREV_9271_10
(
_ah
) \

873 (
	`AR_SREV_9271
(
_ah
) && \

874 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9271_10
))

	)

875 
	#AR_SREV_9271_11
(
_ah
) \

876 (
	`AR_SREV_9271
(
_ah
) && \

877 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9271_11
))

	)

879 
	#AR_SREV_9300
(
_ah
) \

880 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9300
))

	)

881 
	#AR_SREV_9300_20_OR_LATER
(
_ah
) \

882 ((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9300
)

	)

883 
	#AR_SREV_9300_22
(
_ah
) \

884 (
	`AR_SREV_9300
(
ah
) && \

885 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9300_22
))

	)

887 
	#AR_SREV_9330
(
_ah
) \

888 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9330
))

	)

889 
	#AR_SREV_9330_11
(
_ah
) \

890 (
	`AR_SREV_9330
((
_ah
)) && \

891 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9330_11
))

	)

892 
	#AR_SREV_9330_12
(
_ah
) \

893 (
	`AR_SREV_9330
((
_ah
)) && \

894 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9330_12
))

	)

896 #ifde‡
CONFIG_ATH9K_PCOEM


897 
	#AR_SREV_9462
(
_ah
) \

898 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9462
))

	)

899 
	#AR_SREV_9485
(
_ah
) \

900 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9485
))

	)

901 
	#AR_SREV_9565
(
_ah
) \

902 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9565
))

	)

903 
	#AR_SREV_9003_PCOEM
(
_ah
) \

904 (
	`AR_SREV_9462
(
_ah
Ë|| 
	`AR_SREV_9485
(_ahË|| 
	`AR_SREV_9565
(_ah))

	)

906 
	#AR_SREV_9462
(
_ah
Ë0

	)

907 
	#AR_SREV_9485
(
_ah
Ë0

	)

908 
	#AR_SREV_9565
(
_ah
Ë0

	)

909 
	#AR_SREV_9003_PCOEM
(
_ah
Ë0

	)

912 
	#AR_SREV_9485_11_OR_LATER
(
_ah
) \

913 (
	`AR_SREV_9485
(
_ah
) && \

914 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9485_11
))

	)

915 
	#AR_SREV_9485_OR_LATER
(
_ah
) \

916 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9485
))

	)

918 
	#AR_SREV_9340
(
_ah
) \

919 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9340
))

	)

921 
	#AR_SREV_9340_13
(
_ah
) \

922 (
	`AR_SREV_9340
((
_ah
)) && \

923 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9340_13
))

	)

925 
	#AR_SREV_9340_13_OR_LATER
(
_ah
) \

926 (
	`AR_SREV_9340
((
_ah
)) && \

927 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9340_13
))

	)

929 
	#AR_SREV_9285E_20
(
_ah
) \

930 (
	`AR_SREV_9285_12_OR_LATER
(
_ah
) && \

931 ((
	`REG_READ
(
_ah
, 
AR_AN_SYNTH9
Ë& 0x7Ë=0x1))

	)

933 
	#AR_SREV_9462_20
(
_ah
) \

934 (
	`AR_SREV_9462
(
_ah
) && \

935 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9462_20
))

	)

936 
	#AR_SREV_9462_21
(
_ah
) \

937 (
	`AR_SREV_9462
(
_ah
) && \

938 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9462_21
))

	)

939 
	#AR_SREV_9462_20_OR_LATER
(
_ah
) \

940 (
	`AR_SREV_9462
(
_ah
) && \

941 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9462_20
))

	)

942 
	#AR_SREV_9462_21_OR_LATER
(
_ah
) \

943 (
	`AR_SREV_9462
(
_ah
) && \

944 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9462_21
))

	)

946 
	#AR_SREV_9565_10
(
_ah
) \

947 (
	`AR_SREV_9565
(
_ah
) && \

948 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9565_10
))

	)

949 
	#AR_SREV_9565_101
(
_ah
) \

950 (
	`AR_SREV_9565
(
_ah
) && \

951 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9565_101
))

	)

952 
	#AR_SREV_9565_11
(
_ah
) \

953 (
	`AR_SREV_9565
(
_ah
) && \

954 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9565_11
))

	)

955 
	#AR_SREV_9565_11_OR_LATER
(
_ah
) \

956 (
	`AR_SREV_9565
(
_ah
) && \

957 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9565_11
))

	)

959 
	#AR_SREV_9550
(
_ah
) \

960 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9550
))

	)

961 
	#AR_SREV_9550_OR_LATER
(
_ah
) \

962 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 >
AR_SREV_VERSION_9550
))

	)

964 
	#AR_SREV_9580
(
_ah
) \

965 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9580
) && \

966 ((
_ah
)->
hw_vîsi⁄
.
macRev
 >
AR_SREV_REVISION_9580_10
))

	)

967 
	#AR_SREV_9580_10
(
_ah
) \

968 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9580
) && \

969 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9580_10
))

	)

971 
	#AR_SREV_9531
(
_ah
) \

972 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9531
))

	)

973 
	#AR_SREV_9531_10
(
_ah
) \

974 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9531
) && \

975 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9531_10
))

	)

976 
	#AR_SREV_9531_11
(
_ah
) \

977 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9531
) && \

978 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9531_11
))

	)

979 
	#AR_SREV_9531_20
(
_ah
) \

980 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9531
) && \

981 ((
_ah
)->
hw_vîsi⁄
.
macRev
 =
AR_SREV_REVISION_9531_20
))

	)

983 
	#AR_SREV_9561
(
_ah
) \

984 (((
_ah
)->
hw_vîsi⁄
.
macVîsi⁄
 =
AR_SREV_VERSION_9561
))

	)

987 
	#AR_SREV_9580_10_OR_LATER
(
_ah
) \

988 (
	`AR_SREV_9580
(
_ah
))

	)

990 
	e©h_usb_dev
 {

991 
	mAR9280_USB
 = 1,

992 
	mAR9287_USB
 = 2,

993 
	mSTORAGE_DEVICE
 = 3,

996 
	#AR_DEVID_7010
(
_ah
) \

997 (((
_ah
)->
hw_vîsi⁄
.
usbdev
 =
AR9280_USB
) || \

998 ((
_ah
)->
hw_vîsi⁄
.
usbdev
 =
AR9287_USB
))

	)

1000 
	#AR_RADIO_SREV_MAJOR
 0xf0

	)

1001 
	#AR_RAD5133_SREV_MAJOR
 0xc0

	)

1002 
	#AR_RAD2133_SREV_MAJOR
 0xd0

	)

1003 
	#AR_RAD5122_SREV_MAJOR
 0xe0

	)

1004 
	#AR_RAD2122_SREV_MAJOR
 0xf0

	)

1006 
	#AR_AHB_MODE
 0x4024

	)

1007 
	#AR_AHB_EXACT_WR_EN
 0x00000000

	)

1008 
	#AR_AHB_BUF_WR_EN
 0x00000001

	)

1009 
	#AR_AHB_EXACT_RD_EN
 0x00000000

	)

1010 
	#AR_AHB_CACHELINE_RD_EN
 0x00000002

	)

1011 
	#AR_AHB_PREFETCH_RD_EN
 0x00000004

	)

1012 
	#AR_AHB_PAGE_SIZE_1K
 0x00000000

	)

1013 
	#AR_AHB_PAGE_SIZE_2K
 0x00000008

	)

1014 
	#AR_AHB_PAGE_SIZE_4K
 0x00000010

	)

1015 
	#AR_AHB_CUSTOM_BURST_EN
 0x000000C0

	)

1016 
	#AR_AHB_CUSTOM_BURST_EN_S
 6

	)

1017 
	#AR_AHB_CUSTOM_BURST_ASYNC_FIFO_VAL
 3

	)

1019 
	#AR_INTR_RTC_IRQ
 0x00000001

	)

1020 
	#AR_INTR_MAC_IRQ
 0x00000002

	)

1021 
	#AR_INTR_EEP_PROT_ACCESS
 0x00000004

	)

1022 
	#AR_INTR_MAC_AWAKE
 0x00020000

	)

1023 
	#AR_INTR_MAC_ASLEEP
 0x00040000

	)

1024 
	#AR_INTR_SPURIOUS
 0xFFFFFFFF

	)

1027 
	#AR_INTR_SYNC_CAUSE
 (
	`AR_SREV_9340
(
ah
Ë? 0x4010 : 0x4028)

	)

1028 
	#AR_INTR_SYNC_CAUSE_CLR
 (
	`AR_SREV_9340
(
ah
Ë? 0x4010 : 0x4028)

	)

1031 
	#AR_INTR_SYNC_ENABLE
 (
	`AR_SREV_9340
(
ah
Ë? 0x4014 : 0x402c)

	)

1032 
	#AR_INTR_SYNC_ENABLE_GPIO
 0xFFFC0000

	)

1033 
	#AR_INTR_SYNC_ENABLE_GPIO_S
 18

	)

1036 
	mAR_INTR_SYNC_RTC_IRQ
 = 0x00000001,

1037 
	mAR_INTR_SYNC_MAC_IRQ
 = 0x00000002,

1038 
	mAR_INTR_SYNC_EEPROM_ILLEGAL_ACCESS
 = 0x00000004,

1039 
	mAR_INTR_SYNC_APB_TIMEOUT
 = 0x00000008,

1040 
	mAR_INTR_SYNC_PCI_MODE_CONFLICT
 = 0x00000010,

1041 
	mAR_INTR_SYNC_HOST1_FATAL
 = 0x00000020,

1042 
	mAR_INTR_SYNC_HOST1_PERR
 = 0x00000040,

1043 
	mAR_INTR_SYNC_TRCV_FIFO_PERR
 = 0x00000080,

1044 
	mAR_INTR_SYNC_RADM_CPL_EP
 = 0x00000100,

1045 
	mAR_INTR_SYNC_RADM_CPL_DLLP_ABORT
 = 0x00000200,

1046 
	mAR_INTR_SYNC_RADM_CPL_TLP_ABORT
 = 0x00000400,

1047 
	mAR_INTR_SYNC_RADM_CPL_ECRC_ERR
 = 0x00000800,

1048 
	mAR_INTR_SYNC_RADM_CPL_TIMEOUT
 = 0x00001000,

1049 
	mAR_INTR_SYNC_LOCAL_TIMEOUT
 = 0x00002000,

1050 
	mAR_INTR_SYNC_PM_ACCESS
 = 0x00004000,

1051 
	mAR_INTR_SYNC_MAC_AWAKE
 = 0x00008000,

1052 
	mAR_INTR_SYNC_MAC_ASLEEP
 = 0x00010000,

1053 
	mAR_INTR_SYNC_MAC_SLEEP_ACCESS
 = 0x00020000,

1054 
	mAR_INTR_SYNC_ALL
 = 0x0003FFFF,

1057 
	mAR_INTR_SYNC_DEFAULT
 = (
AR_INTR_SYNC_HOST1_FATAL
 |

1058 
AR_INTR_SYNC_HOST1_PERR
 |

1059 
AR_INTR_SYNC_RADM_CPL_EP
 |

1060 
AR_INTR_SYNC_RADM_CPL_DLLP_ABORT
 |

1061 
AR_INTR_SYNC_RADM_CPL_TLP_ABORT
 |

1062 
AR_INTR_SYNC_RADM_CPL_ECRC_ERR
 |

1063 
AR_INTR_SYNC_RADM_CPL_TIMEOUT
 |

1064 
AR_INTR_SYNC_LOCAL_TIMEOUT
 |

1065 
AR_INTR_SYNC_MAC_SLEEP_ACCESS
),

1067 
	mAR9340_INTR_SYNC_LOCAL_TIMEOUT
 = 0x00000010,

1069 
	mAR_INTR_SYNC_SPURIOUS
 = 0xFFFFFFFF,

1073 
	#AR_INTR_ASYNC_MASK
 (
	`AR_SREV_9340
(
ah
Ë? 0x4018 : 0x4030)

	)

1074 
	#AR_INTR_ASYNC_MASK_GPIO
 0xFFFC0000

	)

1075 
	#AR_INTR_ASYNC_MASK_GPIO_S
 18

	)

1076 
	#AR_INTR_ASYNC_MASK_MCI
 0x00000080

	)

1077 
	#AR_INTR_ASYNC_MASK_MCI_S
 7

	)

1079 
	#AR_INTR_SYNC_MASK
 (
	`AR_SREV_9340
(
ah
Ë? 0x401¯: 0x4034)

	)

1080 
	#AR_INTR_SYNC_MASK_GPIO
 0xFFFC0000

	)

1081 
	#AR_INTR_SYNC_MASK_GPIO_S
 18

	)

1083 
	#AR_INTR_ASYNC_CAUSE_CLR
 (
	`AR_SREV_9340
(
ah
Ë? 0x4020 : 0x4038)

	)

1084 
	#AR_INTR_ASYNC_CAUSE
 (
	`AR_SREV_9340
(
ah
Ë? 0x4020 : 0x4038)

	)

1085 
	#AR_INTR_ASYNC_CAUSE_MCI
 0x00000080

	)

1086 
	#AR_INTR_ASYNC_USED
 (
AR_INTR_MAC_IRQ
 | \

1087 
AR_INTR_ASYNC_CAUSE_MCI
)

	)

1090 
	#AR_INTR_ASYNC_ENABLE_MCI
 0x00000080

	)

1091 
	#AR_INTR_ASYNC_ENABLE_MCI_S
 7

	)

1094 
	#AR_INTR_ASYNC_ENABLE
 (
	`AR_SREV_9340
(
ah
Ë? 0x4024 : 0x403c)

	)

1095 
	#AR_INTR_ASYNC_ENABLE_GPIO
 0xFFFC0000

	)

1096 
	#AR_INTR_ASYNC_ENABLE_GPIO_S
 18

	)

1098 
	#AR_PCIE_SERDES
 0x4040

	)

1099 
	#AR_PCIE_SERDES2
 0x4044

	)

1100 
	#AR_PCIE_PM_CTRL
 (
	`AR_SREV_9340
(
ah
Ë? 0x4004 : 0x4014)

	)

1101 
	#AR_PCIE_PM_CTRL_ENA
 0x00080000

	)

1103 
	#AR_PCIE_PHY_REG3
 0x18c08

	)

1105 
	#AR_NUM_GPIO
 14

	)

1106 
	#AR928X_NUM_GPIO
 10

	)

1107 
	#AR9285_NUM_GPIO
 12

	)

1108 
	#AR9287_NUM_GPIO
 11

	)

1109 
	#AR9271_NUM_GPIO
 16

	)

1110 
	#AR9300_NUM_GPIO
 17

	)

1111 
	#AR7010_NUM_GPIO
 16

	)

1113 
	#AR_GPIO_IN_OUT
 (
	`AR_SREV_9340
(
ah
Ë? 0x4028 : 0x4048)

	)

1114 
	#AR_GPIO_IN_VAL
 0x0FFFC000

	)

1115 
	#AR_GPIO_IN_VAL_S
 14

	)

1116 
	#AR928X_GPIO_IN_VAL
 0x000FFC00

	)

1117 
	#AR928X_GPIO_IN_VAL_S
 10

	)

1118 
	#AR9285_GPIO_IN_VAL
 0x00FFF000

	)

1119 
	#AR9285_GPIO_IN_VAL_S
 12

	)

1120 
	#AR9287_GPIO_IN_VAL
 0x003FF800

	)

1121 
	#AR9287_GPIO_IN_VAL_S
 11

	)

1122 
	#AR9271_GPIO_IN_VAL
 0xFFFF0000

	)

1123 
	#AR9271_GPIO_IN_VAL_S
 16

	)

1124 
	#AR7010_GPIO_IN_VAL
 0x0000FFFF

	)

1125 
	#AR7010_GPIO_IN_VAL_S
 0

	)

1127 
	#AR_GPIO_IN
 (
	`AR_SREV_9340
(
ah
Ë? 0x402¯: 0x404c)

	)

1128 
	#AR9300_GPIO_IN_VAL
 0x0001FFFF

	)

1129 
	#AR9300_GPIO_IN_VAL_S
 0

	)

1131 
	#AR_GPIO_OE_OUT
 (
	`AR_SREV_9340
(
ah
) ? 0x4030 : \

1132 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4050 : 0x404c))

	)

1133 
	#AR_GPIO_OE_OUT_MASK
 (
	`AR_SREV_9550_OR_LATER
(
ah
) ? \

1134 0x0000000F : 0xFFFFFFFF)

	)

1135 
	#AR_GPIO_OE_OUT_DRV
 0x3

	)

1136 
	#AR_GPIO_OE_OUT_DRV_NO
 0x0

	)

1137 
	#AR_GPIO_OE_OUT_DRV_LOW
 0x1

	)

1138 
	#AR_GPIO_OE_OUT_DRV_HI
 0x2

	)

1139 
	#AR_GPIO_OE_OUT_DRV_ALL
 0x3

	)

1141 
	#AR7010_GPIO_OE
 0x52000

	)

1142 
	#AR7010_GPIO_OE_MASK
 0x1

	)

1143 
	#AR7010_GPIO_OE_AS_OUTPUT
 0x0

	)

1144 
	#AR7010_GPIO_OE_AS_INPUT
 0x1

	)

1145 
	#AR7010_GPIO_IN
 0x52004

	)

1146 
	#AR7010_GPIO_OUT
 0x52008

	)

1147 
	#AR7010_GPIO_SET
 0x5200C

	)

1148 
	#AR7010_GPIO_CLEAR
 0x52010

	)

1149 
	#AR7010_GPIO_INT
 0x52014

	)

1150 
	#AR7010_GPIO_INT_TYPE
 0x52018

	)

1151 
	#AR7010_GPIO_INT_POLARITY
 0x5201C

	)

1152 
	#AR7010_GPIO_PENDING
 0x52020

	)

1153 
	#AR7010_GPIO_INT_MASK
 0x52024

	)

1154 
	#AR7010_GPIO_FUNCTION
 0x52028

	)

1156 
	#AR_GPIO_INTR_POL
 (
	`AR_SREV_9340
(
ah
) ? 0x4038 : \

1157 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4058 : 0x4050))

	)

1158 
	#AR_GPIO_INTR_POL_VAL
 0x0001FFFF

	)

1159 
	#AR_GPIO_INTR_POL_VAL_S
 0

	)

1161 
	#AR_GPIO_INPUT_EN_VAL
 (
	`AR_SREV_9340
(
ah
) ? 0x403c : \

1162 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x405¯: 0x4054))

	)

1163 
	#AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_DEF
 0x00000004

	)

1164 
	#AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_S
 2

	)

1165 
	#AR_GPIO_INPUT_EN_VAL_BT_FREQUENCY_DEF
 0x00000008

	)

1166 
	#AR_GPIO_INPUT_EN_VAL_BT_FREQUENCY_S
 3

	)

1167 
	#AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_DEF
 0x00000010

	)

1168 
	#AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_S
 4

	)

1169 
	#AR_GPIO_INPUT_EN_VAL_RFSILENT_DEF
 0x00000080

	)

1170 
	#AR_GPIO_INPUT_EN_VAL_RFSILENT_DEF_S
 7

	)

1171 
	#AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_BB
 0x00000400

	)

1172 
	#AR_GPIO_INPUT_EN_VAL_BT_PRIORITY_BB_S
 10

	)

1173 
	#AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_BB
 0x00001000

	)

1174 
	#AR_GPIO_INPUT_EN_VAL_BT_ACTIVE_BB_S
 12

	)

1175 
	#AR_GPIO_INPUT_EN_VAL_RFSILENT_BB
 0x00008000

	)

1176 
	#AR_GPIO_INPUT_EN_VAL_RFSILENT_BB_S
 15

	)

1177 
	#AR_GPIO_RTC_RESET_OVERRIDE_ENABLE
 0x00010000

	)

1178 
	#AR_GPIO_JTAG_DISABLE
 0x00020000

	)

1180 
	#AR_GPIO_INPUT_MUX1
 (
	`AR_SREV_9340
(
ah
) ? 0x4040 : \

1181 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4060 : 0x4058))

	)

1182 
	#AR_GPIO_INPUT_MUX1_BT_ACTIVE
 0x000f0000

	)

1183 
	#AR_GPIO_INPUT_MUX1_BT_ACTIVE_S
 16

	)

1184 
	#AR_GPIO_INPUT_MUX1_BT_PRIORITY
 0x00000f00

	)

1185 
	#AR_GPIO_INPUT_MUX1_BT_PRIORITY_S
 8

	)

1187 
	#AR_GPIO_INPUT_MUX2
 (
	`AR_SREV_9340
(
ah
) ? 0x4044 : \

1188 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4064 : 0x405c))

	)

1189 
	#AR_GPIO_INPUT_MUX2_CLK25
 0x0000000f

	)

1190 
	#AR_GPIO_INPUT_MUX2_CLK25_S
 0

	)

1191 
	#AR_GPIO_INPUT_MUX2_RFSILENT
 0x000000f0

	)

1192 
	#AR_GPIO_INPUT_MUX2_RFSILENT_S
 4

	)

1193 
	#AR_GPIO_INPUT_MUX2_RTC_RESET
 0x00000f00

	)

1194 
	#AR_GPIO_INPUT_MUX2_RTC_RESET_S
 8

	)

1196 
	#AR_GPIO_OUTPUT_MUX1
 (
	`AR_SREV_9340
(
ah
) ? 0x4048 : \

1197 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4068 : 0x4060))

	)

1198 
	#AR_GPIO_OUTPUT_MUX2
 (
	`AR_SREV_9340
(
ah
) ? 0x404c : \

1199 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x406¯: 0x4064))

	)

1200 
	#AR_GPIO_OUTPUT_MUX3
 (
	`AR_SREV_9340
(
ah
) ? 0x4050 : \

1201 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4070 : 0x4068))

	)

1203 
	#AR_INPUT_STATE
 (
	`AR_SREV_9340
(
ah
) ? 0x4054 : \

1204 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4074 : 0x406c))

	)

1206 
	#AR_EEPROM_STATUS_DATA
 (
	`AR_SREV_9340
(
ah
) ? 0x40c8 : \

1207 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4084 : 0x407c))

	)

1208 
	#AR_EEPROM_STATUS_DATA_VAL
 0x0000ffff

	)

1209 
	#AR_EEPROM_STATUS_DATA_VAL_S
 0

	)

1210 
	#AR_EEPROM_STATUS_DATA_BUSY
 0x00010000

	)

1211 
	#AR_EEPROM_STATUS_DATA_BUSY_ACCESS
 0x00020000

	)

1212 
	#AR_EEPROM_STATUS_DATA_PROT_ACCESS
 0x00040000

	)

1213 
	#AR_EEPROM_STATUS_DATA_ABSENT_ACCESS
 0x00080000

	)

1215 
	#AR_OBS
 (
	`AR_SREV_9340
(
ah
) ? 0x405c : \

1216 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4088 : 0x4080))

	)

1218 
	#AR_GPIO_PDPU
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x4090 : 0x4088)

	)

1220 
	#AR_PCIE_MSI
 (
	`AR_SREV_9340
(
ah
) ? 0x40d8 : \

1221 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 0x40a4 : 0x4094))

	)

1222 
	#AR_PCIE_MSI_ENABLE
 0x00000001

	)

1224 
	#AR_INTR_PRIO_SYNC_ENABLE
 (
	`AR_SREV_9340
(
ah
Ë? 0x4088 : 0x40c4)

	)

1225 
	#AR_INTR_PRIO_ASYNC_MASK
 (
	`AR_SREV_9340
(
ah
Ë? 0x408¯: 0x40c8)

	)

1226 
	#AR_INTR_PRIO_SYNC_MASK
 (
	`AR_SREV_9340
(
ah
Ë? 0x4090 : 0x40cc)

	)

1227 
	#AR_INTR_PRIO_ASYNC_ENABLE
 (
	`AR_SREV_9340
(
ah
Ë? 0x4094 : 0x40d4)

	)

1228 
	#AR_ENT_OTP
 0x40d8

	)

1229 
	#AR_ENT_OTP_CHAIN2_DISABLE
 0x00020000

	)

1230 
	#AR_ENT_OTP_49GHZ_DISABLE
 0x00100000

	)

1231 
	#AR_ENT_OTP_MIN_PKT_SIZE_DISABLE
 0x00800000

	)

1233 
	#AR_CH0_BB_DPLL1
 0x16180

	)

1234 
	#AR_CH0_BB_DPLL1_REFDIV
 0xF8000000

	)

1235 
	#AR_CH0_BB_DPLL1_REFDIV_S
 27

	)

1236 
	#AR_CH0_BB_DPLL1_NINI
 0x07FC0000

	)

1237 
	#AR_CH0_BB_DPLL1_NINI_S
 18

	)

1238 
	#AR_CH0_BB_DPLL1_NFRAC
 0x0003FFFF

	)

1239 
	#AR_CH0_BB_DPLL1_NFRAC_S
 0

	)

1241 
	#AR_CH0_BB_DPLL2
 0x16184

	)

1242 
	#AR_CH0_BB_DPLL2_LOCAL_PLL
 0x40000000

	)

1243 
	#AR_CH0_BB_DPLL2_LOCAL_PLL_S
 30

	)

1244 
	#AR_CH0_DPLL2_KI
 0x3C000000

	)

1245 
	#AR_CH0_DPLL2_KI_S
 26

	)

1246 
	#AR_CH0_DPLL2_KD
 0x03F80000

	)

1247 
	#AR_CH0_DPLL2_KD_S
 19

	)

1248 
	#AR_CH0_BB_DPLL2_EN_NEGTRIG
 0x00040000

	)

1249 
	#AR_CH0_BB_DPLL2_EN_NEGTRIG_S
 18

	)

1250 
	#AR_CH0_BB_DPLL2_PLL_PWD
 0x00010000

	)

1251 
	#AR_CH0_BB_DPLL2_PLL_PWD_S
 16

	)

1252 
	#AR_CH0_BB_DPLL2_OUTDIV
 0x0000E000

	)

1253 
	#AR_CH0_BB_DPLL2_OUTDIV_S
 13

	)

1255 
	#AR_CH0_BB_DPLL3
 0x16188

	)

1256 
	#AR_CH0_BB_DPLL3_PHASE_SHIFT
 0x3F800000

	)

1257 
	#AR_CH0_BB_DPLL3_PHASE_SHIFT_S
 23

	)

1259 
	#AR_CH0_DDR_DPLL2
 0x16244

	)

1260 
	#AR_CH0_DDR_DPLL3
 0x16248

	)

1261 
	#AR_CH0_DPLL3_PHASE_SHIFT
 0x3F800000

	)

1262 
	#AR_CH0_DPLL3_PHASE_SHIFT_S
 23

	)

1263 
	#AR_PHY_CCA_NOM_VAL_2GHZ
 -118

	)

1265 
	#AR_RTC_9300_SOC_PLL_DIV_INT
 0x0000003f

	)

1266 
	#AR_RTC_9300_SOC_PLL_DIV_INT_S
 0

	)

1267 
	#AR_RTC_9300_SOC_PLL_DIV_FRAC
 0x000fffc0

	)

1268 
	#AR_RTC_9300_SOC_PLL_DIV_FRAC_S
 6

	)

1269 
	#AR_RTC_9300_SOC_PLL_REFDIV
 0x01f00000

	)

1270 
	#AR_RTC_9300_SOC_PLL_REFDIV_S
 20

	)

1271 
	#AR_RTC_9300_SOC_PLL_CLKSEL
 0x06000000

	)

1272 
	#AR_RTC_9300_SOC_PLL_CLKSEL_S
 25

	)

1273 
	#AR_RTC_9300_SOC_PLL_BYPASS
 0x08000000

	)

1275 
	#AR_RTC_9300_PLL_DIV
 0x000003ff

	)

1276 
	#AR_RTC_9300_PLL_DIV_S
 0

	)

1277 
	#AR_RTC_9300_PLL_REFDIV
 0x00003C00

	)

1278 
	#AR_RTC_9300_PLL_REFDIV_S
 10

	)

1279 
	#AR_RTC_9300_PLL_CLKSEL
 0x0000C000

	)

1280 
	#AR_RTC_9300_PLL_CLKSEL_S
 14

	)

1281 
	#AR_RTC_9300_PLL_BYPASS
 0x00010000

	)

1283 
	#AR_RTC_9160_PLL_DIV
 0x000003ff

	)

1284 
	#AR_RTC_9160_PLL_DIV_S
 0

	)

1285 
	#AR_RTC_9160_PLL_REFDIV
 0x00003C00

	)

1286 
	#AR_RTC_9160_PLL_REFDIV_S
 10

	)

1287 
	#AR_RTC_9160_PLL_CLKSEL
 0x0000C000

	)

1288 
	#AR_RTC_9160_PLL_CLKSEL_S
 14

	)

1290 
	#AR_RTC_BASE
 0x00020000

	)

1291 
	#AR_RTC_RC
 \

1292 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0000Ë: 0x7000)

	)

1293 
	#AR_RTC_RC_M
 0x00000003

	)

1294 
	#AR_RTC_RC_MAC_WARM
 0x00000001

	)

1295 
	#AR_RTC_RC_MAC_COLD
 0x00000002

	)

1296 
	#AR_RTC_RC_COLD_RESET
 0x00000004

	)

1297 
	#AR_RTC_RC_WARM_RESET
 0x00000008

	)

1300 
	#AR_RTC_XTAL_CONTROL
 0x7004

	)

1303 
	#AR_RTC_REG_CONTROL0
 0x7008

	)

1306 
	#AR_RTC_REG_CONTROL1
 0x700c

	)

1307 
	#AR_RTC_REG_CONTROL1_SWREG_PROGRAM
 0x00000001

	)

1309 
	#AR_RTC_PLL_CONTROL
 \

1310 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0014Ë: 0x7014)

	)

1312 
	#AR_RTC_PLL_CONTROL2
 0x703c

	)

1314 
	#AR_RTC_PLL_DIV
 0x0000001f

	)

1315 
	#AR_RTC_PLL_DIV_S
 0

	)

1316 
	#AR_RTC_PLL_DIV2
 0x00000020

	)

1317 
	#AR_RTC_PLL_REFDIV_5
 0x000000c0

	)

1318 
	#AR_RTC_PLL_CLKSEL
 0x00000300

	)

1319 
	#AR_RTC_PLL_CLKSEL_S
 8

	)

1320 
	#AR_RTC_PLL_BYPASS
 0x00010000

	)

1321 
	#AR_RTC_PLL_NOPWD
 0x00040000

	)

1322 
	#AR_RTC_PLL_NOPWD_S
 18

	)

1324 
	#PLL3
 0x16188

	)

1325 
	#PLL3_DO_MEAS_MASK
 0x40000000

	)

1326 
	#PLL4
 0x1618c

	)

1327 
	#PLL4_MEAS_DONE
 0x8

	)

1328 
	#SQSUM_DVC_MASK
 0x007ffff8

	)

1330 
	#AR_RTC_RESET
 \

1331 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0040Ë: 0x7040)

	)

1332 
	#AR_RTC_RESET_EN
 (0x00000001)

	)

1334 
	#AR_RTC_STATUS
 \

1335 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0044Ë: 0x7044)

	)

1337 
	#AR_RTC_STATUS_M
 \

1338 ((
	`AR_SREV_9100
(
ah
)Ë? 0x0000003‡: 0x0000000f)

	)

1340 
	#AR_RTC_PM_STATUS_M
 0x0000000f

	)

1342 
	#AR_RTC_STATUS_SHUTDOWN
 0x00000001

	)

1343 
	#AR_RTC_STATUS_ON
 0x00000002

	)

1344 
	#AR_RTC_STATUS_SLEEP
 0x00000004

	)

1345 
	#AR_RTC_STATUS_WAKEUP
 0x00000008

	)

1347 
	#AR_RTC_SLEEP_CLK
 \

1348 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0048Ë: 0x7048)

	)

1349 
	#AR_RTC_FORCE_DERIVED_CLK
 0x2

	)

1350 
	#AR_RTC_FORCE_SWREG_PRD
 0x00000004

	)

1352 
	#AR_RTC_FORCE_WAKE
 \

1353 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x004cË: 0x704c)

	)

1354 
	#AR_RTC_FORCE_WAKE_EN
 0x00000001

	)

1355 
	#AR_RTC_FORCE_WAKE_ON_INT
 0x00000002

	)

1358 
	#AR_RTC_INTR_CAUSE
 \

1359 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0050Ë: 0x7050)

	)

1361 
	#AR_RTC_INTR_ENABLE
 \

1362 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0054Ë: 0x7054)

	)

1364 
	#AR_RTC_INTR_MASK
 \

1365 ((
	`AR_SREV_9100
(
ah
)Ë? (
AR_RTC_BASE
 + 0x0058Ë: 0x7058)

	)

1367 
	#AR_RTC_KEEP_AWAKE
 0x7034

	)

1371 
	#AR_RTC_DERIVED_CLK
 \

1372 (
	`AR_SREV_9100
(
ah
Ë? (
AR_RTC_BASE
 + 0x0038Ë: 0x7038)

	)

1373 
	#AR_RTC_DERIVED_CLK_PERIOD
 0x0000ff„

	)

1374 
	#AR_RTC_DERIVED_CLK_PERIOD_S
 1

	)

1376 
	#AR_SEQ_MASK
 0x8060

	)

1378 
	#AR_AN_RF2G1_CH0
 0x7810

	)

1379 
	#AR_AN_RF2G1_CH0_OB
 0x03800000

	)

1380 
	#AR_AN_RF2G1_CH0_OB_S
 23

	)

1381 
	#AR_AN_RF2G1_CH0_DB
 0x1C000000

	)

1382 
	#AR_AN_RF2G1_CH0_DB_S
 26

	)

1384 
	#AR_AN_RF5G1_CH0
 0x7818

	)

1385 
	#AR_AN_RF5G1_CH0_OB5
 0x00070000

	)

1386 
	#AR_AN_RF5G1_CH0_OB5_S
 16

	)

1387 
	#AR_AN_RF5G1_CH0_DB5
 0x00380000

	)

1388 
	#AR_AN_RF5G1_CH0_DB5_S
 19

	)

1390 
	#AR_AN_RF2G1_CH1
 0x7834

	)

1391 
	#AR_AN_RF2G1_CH1_OB
 0x03800000

	)

1392 
	#AR_AN_RF2G1_CH1_OB_S
 23

	)

1393 
	#AR_AN_RF2G1_CH1_DB
 0x1C000000

	)

1394 
	#AR_AN_RF2G1_CH1_DB_S
 26

	)

1396 
	#AR_AN_RF5G1_CH1
 0x783C

	)

1397 
	#AR_AN_RF5G1_CH1_OB5
 0x00070000

	)

1398 
	#AR_AN_RF5G1_CH1_OB5_S
 16

	)

1399 
	#AR_AN_RF5G1_CH1_DB5
 0x00380000

	)

1400 
	#AR_AN_RF5G1_CH1_DB5_S
 19

	)

1402 
	#AR_AN_TOP1
 0x7890

	)

1403 
	#AR_AN_TOP1_DACIPMODE
 0x00040000

	)

1404 
	#AR_AN_TOP1_DACIPMODE_S
 18

	)

1406 
	#AR_AN_TOP2
 0x7894

	)

1407 
	#AR_AN_TOP2_XPABIAS_LVL
 0xC0000000

	)

1408 
	#AR_AN_TOP2_XPABIAS_LVL_S
 30

	)

1409 
	#AR_AN_TOP2_LOCALBIAS
 0x00200000

	)

1410 
	#AR_AN_TOP2_LOCALBIAS_S
 21

	)

1411 
	#AR_AN_TOP2_PWDCLKIND
 0x00400000

	)

1412 
	#AR_AN_TOP2_PWDCLKIND_S
 22

	)

1414 
	#AR_AN_SYNTH9
 0x7868

	)

1415 
	#AR_AN_SYNTH9_REFDIVA
 0xf8000000

	)

1416 
	#AR_AN_SYNTH9_REFDIVA_S
 27

	)

1418 
	#AR9285_AN_RF2G1
 0x7820

	)

1419 
	#AR9285_AN_RF2G1_ENPACAL
 0x00000800

	)

1420 
	#AR9285_AN_RF2G1_ENPACAL_S
 11

	)

1421 
	#AR9285_AN_RF2G1_PDPADRV1
 0x02000000

	)

1422 
	#AR9285_AN_RF2G1_PDPADRV1_S
 25

	)

1423 
	#AR9285_AN_RF2G1_PDPADRV2
 0x01000000

	)

1424 
	#AR9285_AN_RF2G1_PDPADRV2_S
 24

	)

1425 
	#AR9285_AN_RF2G1_PDPAOUT
 0x00800000

	)

1426 
	#AR9285_AN_RF2G1_PDPAOUT_S
 23

	)

1429 
	#AR9285_AN_RF2G2
 0x7824

	)

1430 
	#AR9285_AN_RF2G2_OFFCAL
 0x00001000

	)

1431 
	#AR9285_AN_RF2G2_OFFCAL_S
 12

	)

1433 
	#AR9285_AN_RF2G3
 0x7828

	)

1434 
	#AR9285_AN_RF2G3_PDVCCOMP
 0x02000000

	)

1435 
	#AR9285_AN_RF2G3_PDVCCOMP_S
 25

	)

1436 
	#AR9285_AN_RF2G3_OB_0
 0x00E00000

	)

1437 
	#AR9285_AN_RF2G3_OB_0_S
 21

	)

1438 
	#AR9285_AN_RF2G3_OB_1
 0x001C0000

	)

1439 
	#AR9285_AN_RF2G3_OB_1_S
 18

	)

1440 
	#AR9285_AN_RF2G3_OB_2
 0x00038000

	)

1441 
	#AR9285_AN_RF2G3_OB_2_S
 15

	)

1442 
	#AR9285_AN_RF2G3_OB_3
 0x00007000

	)

1443 
	#AR9285_AN_RF2G3_OB_3_S
 12

	)

1444 
	#AR9285_AN_RF2G3_OB_4
 0x00000E00

	)

1445 
	#AR9285_AN_RF2G3_OB_4_S
 9

	)

1447 
	#AR9285_AN_RF2G3_DB1_0
 0x000001C0

	)

1448 
	#AR9285_AN_RF2G3_DB1_0_S
 6

	)

1449 
	#AR9285_AN_RF2G3_DB1_1
 0x00000038

	)

1450 
	#AR9285_AN_RF2G3_DB1_1_S
 3

	)

1451 
	#AR9285_AN_RF2G3_DB1_2
 0x00000007

	)

1452 
	#AR9285_AN_RF2G3_DB1_2_S
 0

	)

1453 
	#AR9285_AN_RF2G4
 0x782C

	)

1454 
	#AR9285_AN_RF2G4_DB1_3
 0xE0000000

	)

1455 
	#AR9285_AN_RF2G4_DB1_3_S
 29

	)

1456 
	#AR9285_AN_RF2G4_DB1_4
 0x1C000000

	)

1457 
	#AR9285_AN_RF2G4_DB1_4_S
 26

	)

1459 
	#AR9285_AN_RF2G4_DB2_0
 0x03800000

	)

1460 
	#AR9285_AN_RF2G4_DB2_0_S
 23

	)

1461 
	#AR9285_AN_RF2G4_DB2_1
 0x00700000

	)

1462 
	#AR9285_AN_RF2G4_DB2_1_S
 20

	)

1463 
	#AR9285_AN_RF2G4_DB2_2
 0x000E0000

	)

1464 
	#AR9285_AN_RF2G4_DB2_2_S
 17

	)

1465 
	#AR9285_AN_RF2G4_DB2_3
 0x0001C000

	)

1466 
	#AR9285_AN_RF2G4_DB2_3_S
 14

	)

1467 
	#AR9285_AN_RF2G4_DB2_4
 0x00003800

	)

1468 
	#AR9285_AN_RF2G4_DB2_4_S
 11

	)

1470 
	#AR9285_RF2G5
 0x7830

	)

1471 
	#AR9285_RF2G5_IC50TX
 0xfffff8ff

	)

1472 
	#AR9285_RF2G5_IC50TX_SET
 0x00000400

	)

1473 
	#AR9285_RF2G5_IC50TX_XE_SET
 0x00000500

	)

1474 
	#AR9285_RF2G5_IC50TX_CLEAR
 0x00000700

	)

1475 
	#AR9285_RF2G5_IC50TX_CLEAR_S
 8

	)

1478 
	#AR9271_AN_RF2G3_OB_cck
 0x001C0000

	)

1479 
	#AR9271_AN_RF2G3_OB_cck_S
 18

	)

1480 
	#AR9271_AN_RF2G3_OB_psk
 0x00038000

	)

1481 
	#AR9271_AN_RF2G3_OB_psk_S
 15

	)

1482 
	#AR9271_AN_RF2G3_OB_qam
 0x00007000

	)

1483 
	#AR9271_AN_RF2G3_OB_qam_S
 12

	)

1485 
	#AR9271_AN_RF2G3_DB_1
 0x00E00000

	)

1486 
	#AR9271_AN_RF2G3_DB_1_S
 21

	)

1488 
	#AR9271_AN_RF2G3_CCOMP
 0xFFF

	)

1489 
	#AR9271_AN_RF2G3_CCOMP_S
 0

	)

1491 
	#AR9271_AN_RF2G4_DB_2
 0xE0000000

	)

1492 
	#AR9271_AN_RF2G4_DB_2_S
 29

	)

1494 
	#AR9285_AN_RF2G6
 0x7834

	)

1495 
	#AR9285_AN_RF2G6_CCOMP
 0x00007800

	)

1496 
	#AR9285_AN_RF2G6_CCOMP_S
 11

	)

1497 
	#AR9285_AN_RF2G6_OFFS
 0x03f00000

	)

1498 
	#AR9285_AN_RF2G6_OFFS_S
 20

	)

1500 
	#AR9271_AN_RF2G6_OFFS
 0x07f00000

	)

1501 
	#AR9271_AN_RF2G6_OFFS_S
 20

	)

1503 
	#AR9285_AN_RF2G7
 0x7838

	)

1504 
	#AR9285_AN_RF2G7_PWDDB
 0x00000002

	)

1505 
	#AR9285_AN_RF2G7_PWDDB_S
 1

	)

1506 
	#AR9285_AN_RF2G7_PADRVGN2TAB0
 0xE0000000

	)

1507 
	#AR9285_AN_RF2G7_PADRVGN2TAB0_S
 29

	)

1509 
	#AR9285_AN_RF2G8
 0x783C

	)

1510 
	#AR9285_AN_RF2G8_PADRVGN2TAB0
 0x0001C000

	)

1511 
	#AR9285_AN_RF2G8_PADRVGN2TAB0_S
 14

	)

1514 
	#AR9285_AN_RF2G9
 0x7840

	)

1515 
	#AR9285_AN_RXTXBB1
 0x7854

	)

1516 
	#AR9285_AN_RXTXBB1_PDRXTXBB1
 0x00000020

	)

1517 
	#AR9285_AN_RXTXBB1_PDRXTXBB1_S
 5

	)

1518 
	#AR9285_AN_RXTXBB1_PDV2I
 0x00000080

	)

1519 
	#AR9285_AN_RXTXBB1_PDV2I_S
 7

	)

1520 
	#AR9285_AN_RXTXBB1_PDDACIF
 0x00000100

	)

1521 
	#AR9285_AN_RXTXBB1_PDDACIF_S
 8

	)

1522 
	#AR9285_AN_RXTXBB1_SPARE9
 0x00000001

	)

1523 
	#AR9285_AN_RXTXBB1_SPARE9_S
 0

	)

1525 
	#AR9285_AN_TOP2
 0x7868

	)

1527 
	#AR9285_AN_TOP3
 0x786c

	)

1528 
	#AR9285_AN_TOP3_XPABIAS_LVL
 0x0000000C

	)

1529 
	#AR9285_AN_TOP3_XPABIAS_LVL_S
 2

	)

1530 
	#AR9285_AN_TOP3_PWDDAC
 0x00800000

	)

1531 
	#AR9285_AN_TOP3_PWDDAC_S
 23

	)

1533 
	#AR9285_AN_TOP4
 0x7870

	)

1534 
	#AR9285_AN_TOP4_DEFAULT
 0x10142c00

	)

1536 
	#AR9287_AN_RF2G3_CH0
 0x7808

	)

1537 
	#AR9287_AN_RF2G3_CH1
 0x785c

	)

1538 
	#AR9287_AN_RF2G3_DB1
 0xE0000000

	)

1539 
	#AR9287_AN_RF2G3_DB1_S
 29

	)

1540 
	#AR9287_AN_RF2G3_DB2
 0x1C000000

	)

1541 
	#AR9287_AN_RF2G3_DB2_S
 26

	)

1542 
	#AR9287_AN_RF2G3_OB_CCK
 0x03800000

	)

1543 
	#AR9287_AN_RF2G3_OB_CCK_S
 23

	)

1544 
	#AR9287_AN_RF2G3_OB_PSK
 0x00700000

	)

1545 
	#AR9287_AN_RF2G3_OB_PSK_S
 20

	)

1546 
	#AR9287_AN_RF2G3_OB_QAM
 0x000E0000

	)

1547 
	#AR9287_AN_RF2G3_OB_QAM_S
 17

	)

1548 
	#AR9287_AN_RF2G3_OB_PAL_OFF
 0x0001C000

	)

1549 
	#AR9287_AN_RF2G3_OB_PAL_OFF_S
 14

	)

1551 
	#AR9287_AN_TXPC0
 0x7898

	)

1552 
	#AR9287_AN_TXPC0_TXPCMODE
 0x0000C000

	)

1553 
	#AR9287_AN_TXPC0_TXPCMODE_S
 14

	)

1554 
	#AR9287_AN_TXPC0_TXPCMODE_NORMAL
 0

	)

1555 
	#AR9287_AN_TXPC0_TXPCMODE_TEST
 1

	)

1556 
	#AR9287_AN_TXPC0_TXPCMODE_TEMPSENSE
 2

	)

1557 
	#AR9287_AN_TXPC0_TXPCMODE_ATBTEST
 3

	)

1559 
	#AR9287_AN_TOP2
 0x78b4

	)

1560 
	#AR9287_AN_TOP2_XPABIAS_LVL
 0xC0000000

	)

1561 
	#AR9287_AN_TOP2_XPABIAS_LVL_S
 30

	)

1564 
	#AR9271_RESET_POWER_DOWN_CONTROL
 0x50044

	)

1565 
	#AR9271_RADIO_RF_RST
 0x20

	)

1566 
	#AR9271_GATE_MAC_CTL
 0x4000

	)

1568 
	#AR_STA_ID1_STA_AP
 0x00010000

	)

1569 
	#AR_STA_ID1_ADHOC
 0x00020000

	)

1570 
	#AR_STA_ID1_PWR_SAV
 0x00040000

	)

1571 
	#AR_STA_ID1_KSRCHDIS
 0x00080000

	)

1572 
	#AR_STA_ID1_PCF
 0x00100000

	)

1573 
	#AR_STA_ID1_USE_DEFANT
 0x00200000

	)

1574 
	#AR_STA_ID1_DEFANT_UPDATE
 0x00400000

	)

1575 
	#AR_STA_ID1_AR9100_BA_FIX
 0x00400000

	)

1576 
	#AR_STA_ID1_RTS_USE_DEF
 0x00800000

	)

1577 
	#AR_STA_ID1_ACKCTS_6MB
 0x01000000

	)

1578 
	#AR_STA_ID1_BASE_RATE_11B
 0x02000000

	)

1579 
	#AR_STA_ID1_SECTOR_SELF_GEN
 0x04000000

	)

1580 
	#AR_STA_ID1_CRPT_MIC_ENABLE
 0x08000000

	)

1581 
	#AR_STA_ID1_KSRCH_MODE
 0x10000000

	)

1582 
	#AR_STA_ID1_PRESERVE_SEQNUM
 0x20000000

	)

1583 
	#AR_STA_ID1_CBCIV_ENDIAN
 0x40000000

	)

1584 
	#AR_STA_ID1_MCAST_KSRCH
 0x80000000

	)

1586 
	#AR_BSS_ID0
 0x8008

	)

1587 
	#AR_BSS_ID1
 0x800C

	)

1588 
	#AR_BSS_ID1_U16
 0x0000FFFF

	)

1589 
	#AR_BSS_ID1_AID
 0x07FF0000

	)

1590 
	#AR_BSS_ID1_AID_S
 16

	)

1592 
	#AR_BCN_RSSI_AVE
 0x8010

	)

1593 
	#AR_BCN_RSSI_AVE_MASK
 0x00000FFF

	)

1595 
	#AR_TIME_OUT
 0x8014

	)

1596 
	#AR_TIME_OUT_ACK
 0x00003FFF

	)

1597 
	#AR_TIME_OUT_ACK_S
 0

	)

1598 
	#AR_TIME_OUT_CTS
 0x3FFF0000

	)

1599 
	#AR_TIME_OUT_CTS_S
 16

	)

1601 
	#AR_RSSI_THR
 0x8018

	)

1602 
	#AR_RSSI_THR_MASK
 0x000000FF

	)

1603 
	#AR_RSSI_THR_BM_THR
 0x0000FF00

	)

1604 
	#AR_RSSI_THR_BM_THR_S
 8

	)

1605 
	#AR_RSSI_BCN_WEIGHT
 0x1F000000

	)

1606 
	#AR_RSSI_BCN_WEIGHT_S
 24

	)

1607 
	#AR_RSSI_BCN_RSSI_RST
 0x20000000

	)

1609 
	#AR_USEC
 0x801c

	)

1610 
	#AR_USEC_USEC
 0x0000007F

	)

1611 
	#AR_USEC_TX_LAT
 0x007FC000

	)

1612 
	#AR_USEC_TX_LAT_S
 14

	)

1613 
	#AR_USEC_RX_LAT
 0x1F800000

	)

1614 
	#AR_USEC_RX_LAT_S
 23

	)

1615 
	#AR_USEC_ASYNC_FIFO
 0x12E00074

	)

1617 
	#AR_RESET_TSF
 0x8020

	)

1618 
	#AR_RESET_TSF_ONCE
 0x01000000

	)

1619 
	#AR_RESET_TSF2_ONCE
 0x02000000

	)

1621 
	#AR_MAX_CFP_DUR
 0x8038

	)

1622 
	#AR_CFP_VAL
 0x0000FFFF

	)

1624 
	#AR_RX_FILTER
 0x803C

	)

1626 
	#AR_MCAST_FIL0
 0x8040

	)

1627 
	#AR_MCAST_FIL1
 0x8044

	)

1638 
	#AR_DIAG_SW
 0x8048

	)

1639 
	#AR_DIAG_CACHE_ACK
 0x00000001

	)

1640 
	#AR_DIAG_ACK_DIS
 0x00000002

	)

1641 
	#AR_DIAG_CTS_DIS
 0x00000004

	)

1642 
	#AR_DIAG_ENCRYPT_DIS
 0x00000008

	)

1643 
	#AR_DIAG_DECRYPT_DIS
 0x00000010

	)

1644 
	#AR_DIAG_RX_DIS
 0x00000020

	)

1645 
	#AR_DIAG_LOOP_BACK
 0x00000040

	)

1646 
	#AR_DIAG_CORR_FCS
 0x00000080

	)

1647 
	#AR_DIAG_CHAN_INFO
 0x00000100

	)

1648 
	#AR_DIAG_SCRAM_SEED
 0x0001FE00

	)

1649 
	#AR_DIAG_SCRAM_SEED_S
 8

	)

1650 
	#AR_DIAG_FRAME_NV0
 0x00020000

	)

1651 
	#AR_DIAG_OBS_PT_SEL1
 0x000C0000

	)

1652 
	#AR_DIAG_OBS_PT_SEL1_S
 18

	)

1653 
	#AR_DIAG_OBS_PT_SEL2
 0x08000000

	)

1654 
	#AR_DIAG_OBS_PT_SEL2_S
 27

	)

1655 
	#AR_DIAG_FORCE_RX_CLEAR
 0x00100000

	)

1656 
	#AR_DIAG_IGNORE_VIRT_CS
 0x00200000

	)

1657 
	#AR_DIAG_FORCE_CH_IDLE_HIGH
 0x00400000

	)

1658 
	#AR_DIAG_EIFS_CTRL_ENA
 0x00800000

	)

1659 
	#AR_DIAG_DUAL_CHAIN_INFO
 0x01000000

	)

1660 
	#AR_DIAG_RX_ABORT
 0x02000000

	)

1661 
	#AR_DIAG_SATURATE_CYCLE_CNT
 0x04000000

	)

1662 
	#AR_DIAG_OBS_PT_SEL2
 0x08000000

	)

1663 
	#AR_DIAG_RX_CLEAR_CTL_LOW
 0x10000000

	)

1664 
	#AR_DIAG_RX_CLEAR_EXT_LOW
 0x20000000

	)

1666 
	#AR_TSF_L32
 0x804c

	)

1667 
	#AR_TSF_U32
 0x8050

	)

1669 
	#AR_TST_ADDAC
 0x8054

	)

1670 
	#AR_DEF_ANTENNA
 0x8058

	)

1672 
	#AR_AES_MUTE_MASK0
 0x805c

	)

1673 
	#AR_AES_MUTE_MASK0_FC
 0x0000FFFF

	)

1674 
	#AR_AES_MUTE_MASK0_QOS
 0xFFFF0000

	)

1675 
	#AR_AES_MUTE_MASK0_QOS_S
 16

	)

1677 
	#AR_AES_MUTE_MASK1
 0x8060

	)

1678 
	#AR_AES_MUTE_MASK1_SEQ
 0x0000FFFF

	)

1679 
	#AR_AES_MUTE_MASK1_FC_MGMT
 0xFFFF0000

	)

1680 
	#AR_AES_MUTE_MASK1_FC_MGMT_S
 16

	)

1682 
	#AR_GATED_CLKS
 0x8064

	)

1683 
	#AR_GATED_CLKS_TX
 0x00000002

	)

1684 
	#AR_GATED_CLKS_RX
 0x00000004

	)

1685 
	#AR_GATED_CLKS_REG
 0x00000008

	)

1687 
	#AR_OBS_BUS_CTRL
 0x8068

	)

1688 
	#AR_OBS_BUS_SEL_1
 0x00040000

	)

1689 
	#AR_OBS_BUS_SEL_2
 0x00080000

	)

1690 
	#AR_OBS_BUS_SEL_3
 0x000C0000

	)

1691 
	#AR_OBS_BUS_SEL_4
 0x08040000

	)

1692 
	#AR_OBS_BUS_SEL_5
 0x08080000

	)

1694 
	#AR_OBS_BUS_1
 0x806c

	)

1695 
	#AR_OBS_BUS_1_PCU
 0x00000001

	)

1696 
	#AR_OBS_BUS_1_RX_END
 0x00000002

	)

1697 
	#AR_OBS_BUS_1_RX_WEP
 0x00000004

	)

1698 
	#AR_OBS_BUS_1_RX_BEACON
 0x00000008

	)

1699 
	#AR_OBS_BUS_1_RX_FILTER
 0x00000010

	)

1700 
	#AR_OBS_BUS_1_TX_HCF
 0x00000020

	)

1701 
	#AR_OBS_BUS_1_QUIET_TIME
 0x00000040

	)

1702 
	#AR_OBS_BUS_1_CHAN_IDLE
 0x00000080

	)

1703 
	#AR_OBS_BUS_1_TX_HOLD
 0x00000100

	)

1704 
	#AR_OBS_BUS_1_TX_FRAME
 0x00000200

	)

1705 
	#AR_OBS_BUS_1_RX_FRAME
 0x00000400

	)

1706 
	#AR_OBS_BUS_1_RX_CLEAR
 0x00000800

	)

1707 
	#AR_OBS_BUS_1_WEP_STATE
 0x0003F000

	)

1708 
	#AR_OBS_BUS_1_WEP_STATE_S
 12

	)

1709 
	#AR_OBS_BUS_1_RX_STATE
 0x01F00000

	)

1710 
	#AR_OBS_BUS_1_RX_STATE_S
 20

	)

1711 
	#AR_OBS_BUS_1_TX_STATE
 0x7E000000

	)

1712 
	#AR_OBS_BUS_1_TX_STATE_S
 25

	)

1714 
	#AR_LAST_TSTP
 0x8080

	)

1715 
	#AR_NAV
 0x8084

	)

1716 
	#AR_RTS_OK
 0x8088

	)

1717 
	#AR_RTS_FAIL
 0x808c

	)

1718 
	#AR_ACK_FAIL
 0x8090

	)

1719 
	#AR_FCS_FAIL
 0x8094

	)

1720 
	#AR_BEACON_CNT
 0x8098

	)

1722 
	#AR_SLEEP1
 0x80d4

	)

1723 
	#AR_SLEEP1_ASSUME_DTIM
 0x00080000

	)

1724 
	#AR_SLEEP1_CAB_TIMEOUT
 0xFFE00000

	)

1725 
	#AR_SLEEP1_CAB_TIMEOUT_S
 21

	)

1727 
	#AR_SLEEP2
 0x80d8

	)

1728 
	#AR_SLEEP2_BEACON_TIMEOUT
 0xFFE00000

	)

1729 
	#AR_SLEEP2_BEACON_TIMEOUT_S
 21

	)

1731 
	#AR_TPC
 0x80e8

	)

1732 
	#AR_TPC_ACK
 0x0000003f

	)

1733 
	#AR_TPC_ACK_S
 0

	)

1734 
	#AR_TPC_CTS
 0x00003f00

	)

1735 
	#AR_TPC_CTS_S
 8

	)

1736 
	#AR_TPC_CHIRP
 0x003f0000

	)

1737 
	#AR_TPC_CHIRP_S
 16

	)

1738 
	#AR_TPC_RPT
 0x3f000000

	)

1739 
	#AR_TPC_RPT_S
 24

	)

1741 
	#AR_QUIET1
 0x80fc

	)

1742 
	#AR_QUIET1_NEXT_QUIET_S
 0

	)

1743 
	#AR_QUIET1_NEXT_QUIET_M
 0x0000ffff

	)

1744 
	#AR_QUIET1_QUIET_ENABLE
 0x00010000

	)

1745 
	#AR_QUIET1_QUIET_ACK_CTS_ENABLE
 0x00020000

	)

1746 
	#AR_QUIET1_QUIET_ACK_CTS_ENABLE_S
 17

	)

1747 
	#AR_QUIET2
 0x8100

	)

1748 
	#AR_QUIET2_QUIET_PERIOD_S
 0

	)

1749 
	#AR_QUIET2_QUIET_PERIOD_M
 0x0000ffff

	)

1750 
	#AR_QUIET2_QUIET_DUR_S
 16

	)

1751 
	#AR_QUIET2_QUIET_DUR
 0xffff0000

	)

1753 
	#AR_TSF_PARM
 0x8104

	)

1754 
	#AR_TSF_INCREMENT_M
 0x000000ff

	)

1755 
	#AR_TSF_INCREMENT_S
 0x00

	)

1757 
	#AR_QOS_NO_ACK
 0x8108

	)

1758 
	#AR_QOS_NO_ACK_TWO_BIT
 0x0000000f

	)

1759 
	#AR_QOS_NO_ACK_TWO_BIT_S
 0

	)

1760 
	#AR_QOS_NO_ACK_BIT_OFF
 0x00000070

	)

1761 
	#AR_QOS_NO_ACK_BIT_OFF_S
 4

	)

1762 
	#AR_QOS_NO_ACK_BYTE_OFF
 0x00000180

	)

1763 
	#AR_QOS_NO_ACK_BYTE_OFF_S
 7

	)

1765 
	#AR_PHY_ERR
 0x810c

	)

1767 
	#AR_PHY_ERR_DCHIRP
 0x00000008

	)

1768 
	#AR_PHY_ERR_RADAR
 0x00000020

	)

1769 
	#AR_PHY_ERR_OFDM_TIMING
 0x00020000

	)

1770 
	#AR_PHY_ERR_CCK_TIMING
 0x02000000

	)

1772 
	#AR_RXFIFO_CFG
 0x8114

	)

1775 
	#AR_MIC_QOS_CONTROL
 0x8118

	)

1776 
	#AR_MIC_QOS_SELECT
 0x811c

	)

1778 
	#AR_PCU_MISC
 0x8120

	)

1779 
	#AR_PCU_FORCE_BSSID_MATCH
 0x00000001

	)

1780 
	#AR_PCU_MIC_NEW_LOC_ENA
 0x00000004

	)

1781 
	#AR_PCU_TX_ADD_TSF
 0x00000008

	)

1782 
	#AR_PCU_CCK_SIFS_MODE
 0x00000010

	)

1783 
	#AR_PCU_RX_ANT_UPDT
 0x00000800

	)

1784 
	#AR_PCU_TXOP_TBTT_LIMIT_ENA
 0x00001000

	)

1785 
	#AR_PCU_MISS_BCN_IN_SLEEP
 0x00004000

	)

1786 
	#AR_PCU_BUG_12306_FIX_ENA
 0x00020000

	)

1787 
	#AR_PCU_FORCE_QUIET_COLL
 0x00040000

	)

1788 
	#AR_PCU_TBTT_PROTECT
 0x00200000

	)

1789 
	#AR_PCU_CLEAR_VMF
 0x01000000

	)

1790 
	#AR_PCU_CLEAR_BA_VALID
 0x04000000

	)

1791 
	#AR_PCU_ALWAYS_PERFORM_KEYSEARCH
 0x10000000

	)

1793 
	#AR_PCU_BT_ANT_PREVENT_RX
 0x00100000

	)

1794 
	#AR_PCU_BT_ANT_PREVENT_RX_S
 20

	)

1796 
	#AR_FILT_OFDM
 0x8124

	)

1797 
	#AR_FILT_OFDM_COUNT
 0x00FFFFFF

	)

1799 
	#AR_FILT_CCK
 0x8128

	)

1800 
	#AR_FILT_CCK_COUNT
 0x00FFFFFF

	)

1802 
	#AR_PHY_ERR_1
 0x812c

	)

1803 
	#AR_PHY_ERR_1_COUNT
 0x00FFFFFF

	)

1804 
	#AR_PHY_ERR_MASK_1
 0x8130

	)

1806 
	#AR_PHY_ERR_2
 0x8134

	)

1807 
	#AR_PHY_ERR_2_COUNT
 0x00FFFFFF

	)

1808 
	#AR_PHY_ERR_MASK_2
 0x8138

	)

1810 
	#AR_PHY_COUNTMAX
 (3 << 22)

	)

1811 
	#AR_MIBCNT_INTRMASK
 (3 << 22)

	)

1813 
	#AR_TSFOOR_THRESHOLD
 0x813c

	)

1814 
	#AR_TSFOOR_THRESHOLD_VAL
 0x0000FFFF

	)

1816 
	#AR_PHY_ERR_EIFS_MASK
 0x8144

	)

1818 
	#AR_PHY_ERR_3
 0x8168

	)

1819 
	#AR_PHY_ERR_3_COUNT
 0x00FFFFFF

	)

1820 
	#AR_PHY_ERR_MASK_3
 0x816c

	)

1822 
	#AR_BT_COEX_MODE
 0x8170

	)

1823 
	#AR_BT_TIME_EXTEND
 0x000000ff

	)

1824 
	#AR_BT_TIME_EXTEND_S
 0

	)

1825 
	#AR_BT_TXSTATE_EXTEND
 0x00000100

	)

1826 
	#AR_BT_TXSTATE_EXTEND_S
 8

	)

1827 
	#AR_BT_TX_FRAME_EXTEND
 0x00000200

	)

1828 
	#AR_BT_TX_FRAME_EXTEND_S
 9

	)

1829 
	#AR_BT_MODE
 0x00000c00

	)

1830 
	#AR_BT_MODE_S
 10

	)

1831 
	#AR_BT_QUIET
 0x00001000

	)

1832 
	#AR_BT_QUIET_S
 12

	)

1833 
	#AR_BT_QCU_THRESH
 0x0001e000

	)

1834 
	#AR_BT_QCU_THRESH_S
 13

	)

1835 
	#AR_BT_RX_CLEAR_POLARITY
 0x00020000

	)

1836 
	#AR_BT_RX_CLEAR_POLARITY_S
 17

	)

1837 
	#AR_BT_PRIORITY_TIME
 0x00fc0000

	)

1838 
	#AR_BT_PRIORITY_TIME_S
 18

	)

1839 
	#AR_BT_FIRST_SLOT_TIME
 0xff000000

	)

1840 
	#AR_BT_FIRST_SLOT_TIME_S
 24

	)

1842 
	#AR_BT_COEX_WEIGHT
 0x8174

	)

1843 
	#AR_BT_COEX_WGHT
 0xff55

	)

1844 
	#AR_STOMP_ALL_WLAN_WGHT
 0xfcfc

	)

1845 
	#AR_STOMP_LOW_WLAN_WGHT
 0xa8a8

	)

1846 
	#AR_STOMP_NONE_WLAN_WGHT
 0x0000

	)

1847 
	#AR_BTCOEX_BT_WGHT
 0x0000ffff

	)

1848 
	#AR_BTCOEX_BT_WGHT_S
 0

	)

1849 
	#AR_BTCOEX_WL_WGHT
 0xffff0000

	)

1850 
	#AR_BTCOEX_WL_WGHT_S
 16

	)

1852 
	#AR_BT_COEX_WL_WEIGHTS0
 0x8174

	)

1853 
	#AR_BT_COEX_WL_WEIGHTS1
 0x81c4

	)

1854 
	#AR_MCI_COEX_WL_WEIGHTS
(
_i
Ë(0x18b0 + (_ò<< 2))

	)

1855 
	#AR_BT_COEX_BT_WEIGHTS
(
_i
Ë(0x83a¯+ (_ò<< 2))

	)

1857 
	#AR9300_BT_WGHT
 0xcccc4444

	)

1859 
	#AR_BT_COEX_MODE2
 0x817c

	)

1860 
	#AR_BT_BCN_MISS_THRESH
 0x000000ff

	)

1861 
	#AR_BT_BCN_MISS_THRESH_S
 0

	)

1862 
	#AR_BT_BCN_MISS_CNT
 0x0000ff00

	)

1863 
	#AR_BT_BCN_MISS_CNT_S
 8

	)

1864 
	#AR_BT_HOLD_RX_CLEAR
 0x00010000

	)

1865 
	#AR_BT_HOLD_RX_CLEAR_S
 16

	)

1866 
	#AR_BT_DISABLE_BT_ANT
 0x00100000

	)

1867 
	#AR_BT_DISABLE_BT_ANT_S
 20

	)

1869 
	#AR_TXSIFS
 0x81d0

	)

1870 
	#AR_TXSIFS_TIME
 0x000000FF

	)

1871 
	#AR_TXSIFS_TX_LATENCY
 0x00000F00

	)

1872 
	#AR_TXSIFS_TX_LATENCY_S
 8

	)

1873 
	#AR_TXSIFS_ACK_SHIFT
 0x00007000

	)

1874 
	#AR_TXSIFS_ACK_SHIFT_S
 12

	)

1876 
	#AR_TXOP_X
 0x81ec

	)

1877 
	#AR_TXOP_X_VAL
 0x000000FF

	)

1880 
	#AR_TXOP_0_3
 0x81f0

	)

1881 
	#AR_TXOP_4_7
 0x81f4

	)

1882 
	#AR_TXOP_8_11
 0x81f8

	)

1883 
	#AR_TXOP_12_15
 0x81fc

	)

1885 
	#AR_NEXT_NDP2_TIMER
 0x8180

	)

1886 
	#AR_GEN_TIMER_BANK_1_LEN
 8

	)

1887 
	#AR_FIRST_NDP_TIMER
 7

	)

1888 
	#AR_NDP2_PERIOD
 0x81a0

	)

1889 
	#AR_NDP2_TIMER_MODE
 0x81c0

	)

1890 
	#AR_GEN_TIMERS2_MODE_ENABLE_MASK
 0x000000FF

	)

1892 
	#AR_GEN_TIMERS
(
_i
Ë(0x8200 + ((_iË<< 2))

	)

1893 
	#AR_NEXT_TBTT_TIMER
 
	`AR_GEN_TIMERS
(0)

	)

1894 
	#AR_NEXT_DMA_BEACON_ALERT
 
	`AR_GEN_TIMERS
(1)

	)

1895 
	#AR_NEXT_SWBA
 
	`AR_GEN_TIMERS
(2)

	)

1896 
	#AR_NEXT_CFP
 
	`AR_GEN_TIMERS
(2)

	)

1897 
	#AR_NEXT_HCF
 
	`AR_GEN_TIMERS
(3)

	)

1898 
	#AR_NEXT_TIM
 
	`AR_GEN_TIMERS
(4)

	)

1899 
	#AR_NEXT_DTIM
 
	`AR_GEN_TIMERS
(5)

	)

1900 
	#AR_NEXT_QUIET_TIMER
 
	`AR_GEN_TIMERS
(6)

	)

1901 
	#AR_NEXT_NDP_TIMER
 
	`AR_GEN_TIMERS
(7)

	)

1903 
	#AR_BEACON_PERIOD
 
	`AR_GEN_TIMERS
(8)

	)

1904 
	#AR_DMA_BEACON_PERIOD
 
	`AR_GEN_TIMERS
(9)

	)

1905 
	#AR_SWBA_PERIOD
 
	`AR_GEN_TIMERS
(10)

	)

1906 
	#AR_HCF_PERIOD
 
	`AR_GEN_TIMERS
(11)

	)

1907 
	#AR_TIM_PERIOD
 
	`AR_GEN_TIMERS
(12)

	)

1908 
	#AR_DTIM_PERIOD
 
	`AR_GEN_TIMERS
(13)

	)

1909 
	#AR_QUIET_PERIOD
 
	`AR_GEN_TIMERS
(14)

	)

1910 
	#AR_NDP_PERIOD
 
	`AR_GEN_TIMERS
(15)

	)

1912 
	#AR_TIMER_MODE
 0x8240

	)

1913 
	#AR_TBTT_TIMER_EN
 0x00000001

	)

1914 
	#AR_DBA_TIMER_EN
 0x00000002

	)

1915 
	#AR_SWBA_TIMER_EN
 0x00000004

	)

1916 
	#AR_HCF_TIMER_EN
 0x00000008

	)

1917 
	#AR_TIM_TIMER_EN
 0x00000010

	)

1918 
	#AR_DTIM_TIMER_EN
 0x00000020

	)

1919 
	#AR_QUIET_TIMER_EN
 0x00000040

	)

1920 
	#AR_NDP_TIMER_EN
 0x00000080

	)

1921 
	#AR_TIMER_OVERFLOW_INDEX
 0x00000700

	)

1922 
	#AR_TIMER_OVERFLOW_INDEX_S
 8

	)

1923 
	#AR_TIMER_THRESH
 0xFFFFF000

	)

1924 
	#AR_TIMER_THRESH_S
 12

	)

1926 
	#AR_SLP32_MODE
 0x8244

	)

1927 
	#AR_SLP32_HALF_CLK_LATENCY
 0x000FFFFF

	)

1928 
	#AR_SLP32_ENA
 0x00100000

	)

1929 
	#AR_SLP32_TSF_WRITE_STATUS
 0x00200000

	)

1931 
	#AR_SLP32_WAKE
 0x8248

	)

1932 
	#AR_SLP32_WAKE_XTL_TIME
 0x0000FFFF

	)

1934 
	#AR_SLP32_INC
 0x824c

	)

1935 
	#AR_SLP32_TST_INC
 0x000FFFFF

	)

1937 
	#AR_SLP_CNT
 0x8250

	)

1938 
	#AR_SLP_CYCLE_CNT
 0x8254

	)

1940 
	#AR_SLP_MIB_CTRL
 0x8258

	)

1941 
	#AR_SLP_MIB_CLEAR
 0x00000001

	)

1942 
	#AR_SLP_MIB_PENDING
 0x00000002

	)

1944 
	#AR_MAC_PCU_LOGIC_ANALYZER
 0x8264

	)

1945 
	#AR_MAC_PCU_LOGIC_ANALYZER_DISBUG20768
 0x20000000

	)

1948 
	#AR_2040_MODE
 0x8318

	)

1949 
	#AR_2040_JOINED_RX_CLEAR
 0x00000001

	)

1952 
	#AR_EXTRCCNT
 0x8328

	)

1954 
	#AR_SELFGEN_MASK
 0x832c

	)

1956 
	#AR_PCU_TXBUF_CTRL
 0x8340

	)

1957 
	#AR_PCU_TXBUF_CTRL_SIZE_MASK
 0x7FF

	)

1958 
	#AR_PCU_TXBUF_CTRL_USABLE_SIZE
 0x700

	)

1959 
	#AR_9285_PCU_TXBUF_CTRL_USABLE_SIZE
 0x380

	)

1960 
	#AR_9340_PCU_TXBUF_CTRL_USABLE_SIZE
 0x500

	)

1962 
	#AR_PCU_MISC_MODE2
 0x8344

	)

1963 
	#AR_PCU_MISC_MODE2_MGMT_CRYPTO_ENABLE
 0x00000002

	)

1964 
	#AR_PCU_MISC_MODE2_NO_CRYPTO_FOR_NON_DATA_PKT
 0x00000004

	)

1966 
	#AR_PCU_MISC_MODE2_RESERVED
 0x00000038

	)

1967 
	#AR_PCU_MISC_MODE2_ADHOC_MCAST_KEYID_ENABLE
 0x00000040

	)

1968 
	#AR_PCU_MISC_MODE2_CFP_IGNORE
 0x00000080

	)

1969 
	#AR_PCU_MISC_MODE2_MGMT_QOS
 0x0000FF00

	)

1970 
	#AR_PCU_MISC_MODE2_MGMT_QOS_S
 8

	)

1971 
	#AR_PCU_MISC_MODE2_ENABLE_LOAD_NAV_BEACON_DURATION
 0x00010000

	)

1972 
	#AR_PCU_MISC_MODE2_ENABLE_AGGWEP
 0x00020000

	)

1973 
	#AR_PCU_MISC_MODE2_HWWAR1
 0x00100000

	)

1974 
	#AR_PCU_MISC_MODE2_HWWAR2
 0x02000000

	)

1975 
	#AR_PCU_MISC_MODE2_RESERVED2
 0xFFFE0000

	)

1977 
	#AR_PCU_MISC_MODE3
 0x83d0

	)

1979 
	#AR_MAC_PCU_ASYNC_FIFO_REG3
 0x8358

	)

1980 
	#AR_MAC_PCU_ASYNC_FIFO_REG3_DATAPATH_SEL
 0x00000400

	)

1981 
	#AR_MAC_PCU_ASYNC_FIFO_REG3_SOFT_RESET
 0x80000000

	)

1982 
	#AR_MAC_PCU_GEN_TIMER_TSF_SEL
 0x83d8

	)

1984 
	#AR_DIRECT_CONNECT
 0x83a0

	)

1985 
	#AR_DC_AP_STA_EN
 0x00000001

	)

1986 
	#AR_DC_TSF2_ENABLE
 0x00000001

	)

1988 
	#AR_AES_MUTE_MASK0
 0x805c

	)

1989 
	#AR_AES_MUTE_MASK0_FC
 0x0000FFFF

	)

1990 
	#AR_AES_MUTE_MASK0_QOS
 0xFFFF0000

	)

1991 
	#AR_AES_MUTE_MASK0_QOS_S
 16

	)

1993 
	#AR_AES_MUTE_MASK1
 0x8060

	)

1994 
	#AR_AES_MUTE_MASK1_SEQ
 0x0000FFFF

	)

1995 
	#AR_AES_MUTE_MASK1_SEQ_S
 0

	)

1996 
	#AR_AES_MUTE_MASK1_FC_MGMT
 0xFFFF0000

	)

1997 
	#AR_AES_MUTE_MASK1_FC_MGMT_S
 16

	)

1999 
	#AR_RATE_DURATION_0
 0x8700

	)

2000 
	#AR_RATE_DURATION_31
 0x87CC

	)

2001 
	#AR_RATE_DURATION_32
 0x8780

	)

2002 
	#AR_RATE_DURATION
(
_n
Ë(
AR_RATE_DURATION_0
 + ((_n)<<2))

	)

2006 
	#AR_PMCTRL_AUX_PWR_DET
 0x10000000

	)

2007 
	#AR_PMCTRL_D3COLD_VAUX
 0x00800000

	)

2008 
	#AR_PMCTRL_HOST_PME_EN
 0x00400000

	)

2010 
	#AR_PMCTRL_WOW_PME_CLR
 0x00200000

	)

2011 
	#AR_PMCTRL_PWR_STATE_MASK
 0x0f000000

	)

2012 
	#AR_PMCTRL_PWR_STATE_D1D3
 0x0f000000

	)

2013 
	#AR_PMCTRL_PWR_STATE_D1D3_REAL
 0x0f000000

	)

2014 
	#AR_PMCTRL_PWR_STATE_D0
 0x08000000

	)

2015 
	#AR_PMCTRL_PWR_PM_CTRL_ENA
 0x00008000

	)

2017 
	#AR_WOW_BEACON_TIMO_MAX
 0xffffffff

	)

2019 
	#AR9271_CORE_CLOCK
 117

	)

2020 
	#AR9271_TARGET_BAUD_RATE
 19200

	)

2022 
	#AR_AGG_WEP_ENABLE_FIX
 0x00000008

	)

2023 
	#AR_ADHOC_MCAST_KEYID_ENABLE
 0x00000040

	)

2029 
	#AR_AGG_WEP_ENABLE
 0x00020000

	)

2035 
	#AR9300_SM_BASE
 0xa200

	)

2036 
	#AR9002_PHY_AGC_CONTROL
 0x9860

	)

2037 
	#AR9003_PHY_AGC_CONTROL
 
AR9300_SM_BASE
 + 0xc4

	)

2038 
	#AR_PHY_AGC_CONTROL
 (
	`AR_SREV_9300_20_OR_LATER
(
ah
Ë? 
AR9003_PHY_AGC_CONTROL
 : 
AR9002_PHY_AGC_CONTROL
)

	)

2039 
	#AR_PHY_AGC_CONTROL_CAL
 0x00000001

	)

2040 
	#AR_PHY_AGC_CONTROL_NF
 0x00000002

	)

2041 
	#AR_PHY_AGC_CONTROL_OFFSET_CAL
 0x00000800

	)

2042 
	#AR_PHY_AGC_CONTROL_ENABLE_NF
 0x00008000

	)

2043 
	#AR_PHY_AGC_CONTROL_FLTR_CAL
 0x00010000

	)

2044 
	#AR_PHY_AGC_CONTROL_NO_UPDATE_NF
 0x00020000

	)

2045 
	#AR_PHY_AGC_CONTROL_EXT_NF_PWR_MEAS
 0x00040000

	)

2046 
	#AR_PHY_AGC_CONTROL_CLC_SUCCESS
 0x00080000

	)

2047 
	#AR_PHY_AGC_CONTROL_PKDET_CAL
 0x00100000

	)

2048 
	#AR_PHY_AGC_CONTROL_YCOK_MAX
 0x000003c0

	)

2049 
	#AR_PHY_AGC_CONTROL_YCOK_MAX_S
 6

	)

	@reg_aic.h

17 #i‚de‡
REG_AIC_H


18 
	#REG_AIC_H


	)

20 
	#AR_SM_BASE
 0xa200

	)

21 
	#AR_SM1_BASE
 0xb200

	)

22 
	#AR_AGC_BASE
 0x9e00

	)

24 
	#AR_PHY_AIC_CTRL_0_B0
 (
AR_SM_BASE
 + 0x4b0)

	)

25 
	#AR_PHY_AIC_CTRL_1_B0
 (
AR_SM_BASE
 + 0x4b4)

	)

26 
	#AR_PHY_AIC_CTRL_2_B0
 (
AR_SM_BASE
 + 0x4b8)

	)

27 
	#AR_PHY_AIC_CTRL_3_B0
 (
AR_SM_BASE
 + 0x4bc)

	)

28 
	#AR_PHY_AIC_CTRL_4_B0
 (
AR_SM_BASE
 + 0x4c0)

	)

30 
	#AR_PHY_AIC_STAT_0_B0
 (
AR_SM_BASE
 + 0x4c4)

	)

31 
	#AR_PHY_AIC_STAT_1_B0
 (
AR_SM_BASE
 + 0x4c8)

	)

32 
	#AR_PHY_AIC_STAT_2_B0
 (
AR_SM_BASE
 + 0x4cc)

	)

34 
	#AR_PHY_AIC_CTRL_0_B1
 (
AR_SM1_BASE
 + 0x4b0)

	)

35 
	#AR_PHY_AIC_CTRL_1_B1
 (
AR_SM1_BASE
 + 0x4b4)

	)

36 
	#AR_PHY_AIC_CTRL_4_B1
 (
AR_SM1_BASE
 + 0x4c0)

	)

38 
	#AR_PHY_AIC_STAT_0_B1
 (
AR_SM1_BASE
 + 0x4c4)

	)

39 
	#AR_PHY_AIC_STAT_1_B1
 (
AR_SM1_BASE
 + 0x4c8)

	)

40 
	#AR_PHY_AIC_STAT_2_B1
 (
AR_SM1_BASE
 + 0x4cc)

	)

42 
	#AR_PHY_AIC_SRAM_ADDR_B0
 (
AR_SM_BASE
 + 0x5f0)

	)

43 
	#AR_PHY_AIC_SRAM_DATA_B0
 (
AR_SM_BASE
 + 0x5f4)

	)

45 
	#AR_PHY_AIC_SRAM_ADDR_B1
 (
AR_SM1_BASE
 + 0x5f0)

	)

46 
	#AR_PHY_AIC_SRAM_DATA_B1
 (
AR_SM1_BASE
 + 0x5f4)

	)

48 
	#AR_PHY_BT_COEX_4
 (
AR_AGC_BASE
 + 0x60)

	)

49 
	#AR_PHY_BT_COEX_5
 (
AR_AGC_BASE
 + 0x64)

	)

52 
	#AR_PHY_AIC_MON_ENABLE
 0x80000000

	)

53 
	#AR_PHY_AIC_MON_ENABLE_S
 31

	)

54 
	#AR_PHY_AIC_CAL_MAX_HOP_COUNT
 0x7F000000

	)

55 
	#AR_PHY_AIC_CAL_MAX_HOP_COUNT_S
 24

	)

56 
	#AR_PHY_AIC_CAL_MIN_VALID_COUNT
 0x00FE0000

	)

57 
	#AR_PHY_AIC_CAL_MIN_VALID_COUNT_S
 17

	)

58 
	#AR_PHY_AIC_F_WLAN
 0x0001FC00

	)

59 
	#AR_PHY_AIC_F_WLAN_S
 10

	)

60 
	#AR_PHY_AIC_CAL_CH_VALID_RESET
 0x00000200

	)

61 
	#AR_PHY_AIC_CAL_CH_VALID_RESET_S
 9

	)

62 
	#AR_PHY_AIC_CAL_ENABLE
 0x00000100

	)

63 
	#AR_PHY_AIC_CAL_ENABLE_S
 8

	)

64 
	#AR_PHY_AIC_BTTX_PWR_THR
 0x000000FE

	)

65 
	#AR_PHY_AIC_BTTX_PWR_THR_S
 1

	)

66 
	#AR_PHY_AIC_ENABLE
 0x00000001

	)

67 
	#AR_PHY_AIC_ENABLE_S
 0

	)

68 
	#AR_PHY_AIC_CAL_BT_REF_DELAY
 0x00F00000

	)

69 
	#AR_PHY_AIC_CAL_BT_REF_DELAY_S
 20

	)

70 
	#AR_PHY_AIC_BT_IDLE_CFG
 0x00080000

	)

71 
	#AR_PHY_AIC_BT_IDLE_CFG_S
 19

	)

72 
	#AR_PHY_AIC_STDBY_COND
 0x00060000

	)

73 
	#AR_PHY_AIC_STDBY_COND_S
 17

	)

74 
	#AR_PHY_AIC_STDBY_ROT_ATT_DB
 0x0001F800

	)

75 
	#AR_PHY_AIC_STDBY_ROT_ATT_DB_S
 11

	)

76 
	#AR_PHY_AIC_STDBY_COM_ATT_DB
 0x00000700

	)

77 
	#AR_PHY_AIC_STDBY_COM_ATT_DB_S
 8

	)

78 
	#AR_PHY_AIC_RSSI_MAX
 0x000000F0

	)

79 
	#AR_PHY_AIC_RSSI_MAX_S
 4

	)

80 
	#AR_PHY_AIC_RSSI_MIN
 0x0000000F

	)

81 
	#AR_PHY_AIC_RSSI_MIN_S
 0

	)

82 
	#AR_PHY_AIC_RADIO_DELAY
 0x7F000000

	)

83 
	#AR_PHY_AIC_RADIO_DELAY_S
 24

	)

84 
	#AR_PHY_AIC_CAL_STEP_SIZE_CORR
 0x00F00000

	)

85 
	#AR_PHY_AIC_CAL_STEP_SIZE_CORR_S
 20

	)

86 
	#AR_PHY_AIC_CAL_ROT_IDX_CORR
 0x000F8000

	)

87 
	#AR_PHY_AIC_CAL_ROT_IDX_CORR_S
 15

	)

88 
	#AR_PHY_AIC_CAL_CONV_CHECK_FACTOR
 0x00006000

	)

89 
	#AR_PHY_AIC_CAL_CONV_CHECK_FACTOR_S
 13

	)

90 
	#AR_PHY_AIC_ROT_IDX_COUNT_MAX
 0x00001C00

	)

91 
	#AR_PHY_AIC_ROT_IDX_COUNT_MAX_S
 10

	)

92 
	#AR_PHY_AIC_CAL_SYNTH_TOGGLE
 0x00000200

	)

93 
	#AR_PHY_AIC_CAL_SYNTH_TOGGLE_S
 9

	)

94 
	#AR_PHY_AIC_CAL_SYNTH_AFTER_BTRX
 0x00000100

	)

95 
	#AR_PHY_AIC_CAL_SYNTH_AFTER_BTRX_S
 8

	)

96 
	#AR_PHY_AIC_CAL_SYNTH_SETTLING
 0x000000FF

	)

97 
	#AR_PHY_AIC_CAL_SYNTH_SETTLING_S
 0

	)

98 
	#AR_PHY_AIC_MON_MAX_HOP_COUNT
 0x07F00000

	)

99 
	#AR_PHY_AIC_MON_MAX_HOP_COUNT_S
 20

	)

100 
	#AR_PHY_AIC_MON_MIN_STALE_COUNT
 0x000FE000

	)

101 
	#AR_PHY_AIC_MON_MIN_STALE_COUNT_S
 13

	)

102 
	#AR_PHY_AIC_MON_PWR_EST_LONG
 0x00001000

	)

103 
	#AR_PHY_AIC_MON_PWR_EST_LONG_S
 12

	)

104 
	#AR_PHY_AIC_MON_PD_TALLY_SCALING
 0x00000C00

	)

105 
	#AR_PHY_AIC_MON_PD_TALLY_SCALING_S
 10

	)

106 
	#AR_PHY_AIC_MON_PERF_THR
 0x000003E0

	)

107 
	#AR_PHY_AIC_MON_PERF_THR_S
 5

	)

108 
	#AR_PHY_AIC_CAL_TARGET_MAG_SETTING
 0x00000018

	)

109 
	#AR_PHY_AIC_CAL_TARGET_MAG_SETTING_S
 3

	)

110 
	#AR_PHY_AIC_CAL_PERF_CHECK_FACTOR
 0x00000006

	)

111 
	#AR_PHY_AIC_CAL_PERF_CHECK_FACTOR_S
 1

	)

112 
	#AR_PHY_AIC_CAL_PWR_EST_LONG
 0x00000001

	)

113 
	#AR_PHY_AIC_CAL_PWR_EST_LONG_S
 0

	)

114 
	#AR_PHY_AIC_MON_DONE
 0x80000000

	)

115 
	#AR_PHY_AIC_MON_DONE_S
 31

	)

116 
	#AR_PHY_AIC_MON_ACTIVE
 0x40000000

	)

117 
	#AR_PHY_AIC_MON_ACTIVE_S
 30

	)

118 
	#AR_PHY_AIC_MEAS_COUNT
 0x3F000000

	)

119 
	#AR_PHY_AIC_MEAS_COUNT_S
 24

	)

120 
	#AR_PHY_AIC_CAL_ANT_ISO_EST
 0x00FC0000

	)

121 
	#AR_PHY_AIC_CAL_ANT_ISO_EST_S
 18

	)

122 
	#AR_PHY_AIC_CAL_HOP_COUNT
 0x0003F800

	)

123 
	#AR_PHY_AIC_CAL_HOP_COUNT_S
 11

	)

124 
	#AR_PHY_AIC_CAL_VALID_COUNT
 0x000007F0

	)

125 
	#AR_PHY_AIC_CAL_VALID_COUNT_S
 4

	)

126 
	#AR_PHY_AIC_CAL_BT_TOO_WEAK_ERR
 0x00000008

	)

127 
	#AR_PHY_AIC_CAL_BT_TOO_WEAK_ERR_S
 3

	)

128 
	#AR_PHY_AIC_CAL_BT_TOO_STRONG_ERR
 0x00000004

	)

129 
	#AR_PHY_AIC_CAL_BT_TOO_STRONG_ERR_S
 2

	)

130 
	#AR_PHY_AIC_CAL_DONE
 0x00000002

	)

131 
	#AR_PHY_AIC_CAL_DONE_S
 1

	)

132 
	#AR_PHY_AIC_CAL_ACTIVE
 0x00000001

	)

133 
	#AR_PHY_AIC_CAL_ACTIVE_S
 0

	)

135 
	#AR_PHY_AIC_MEAS_MAG_MIN
 0xFFC00000

	)

136 
	#AR_PHY_AIC_MEAS_MAG_MIN_S
 22

	)

137 
	#AR_PHY_AIC_MON_STALE_COUNT
 0x003F8000

	)

138 
	#AR_PHY_AIC_MON_STALE_COUNT_S
 15

	)

139 
	#AR_PHY_AIC_MON_HOP_COUNT
 0x00007F00

	)

140 
	#AR_PHY_AIC_MON_HOP_COUNT_S
 8

	)

141 
	#AR_PHY_AIC_CAL_AIC_SM
 0x000000F8

	)

142 
	#AR_PHY_AIC_CAL_AIC_SM_S
 3

	)

143 
	#AR_PHY_AIC_SM
 0x00000007

	)

144 
	#AR_PHY_AIC_SM_S
 0

	)

145 
	#AR_PHY_AIC_SRAM_VALID
 0x00000001

	)

146 
	#AR_PHY_AIC_SRAM_VALID_S
 0

	)

147 
	#AR_PHY_AIC_SRAM_ROT_QUAD_ATT_DB
 0x0000007E

	)

148 
	#AR_PHY_AIC_SRAM_ROT_QUAD_ATT_DB_S
 1

	)

149 
	#AR_PHY_AIC_SRAM_VGA_QUAD_SIGN
 0x00000080

	)

150 
	#AR_PHY_AIC_SRAM_VGA_QUAD_SIGN_S
 7

	)

151 
	#AR_PHY_AIC_SRAM_ROT_DIR_ATT_DB
 0x00003F00

	)

152 
	#AR_PHY_AIC_SRAM_ROT_DIR_ATT_DB_S
 8

	)

153 
	#AR_PHY_AIC_SRAM_VGA_DIR_SIGN
 0x00004000

	)

154 
	#AR_PHY_AIC_SRAM_VGA_DIR_SIGN_S
 14

	)

155 
	#AR_PHY_AIC_SRAM_COM_ATT_6DB
 0x00038000

	)

156 
	#AR_PHY_AIC_SRAM_COM_ATT_6DB_S
 15

	)

157 
	#AR_PHY_AIC_CAL_ROT_ATT_DB_EST_ISO
 0x0000E000

	)

158 
	#AR_PHY_AIC_CAL_ROT_ATT_DB_EST_ISO_S
 13

	)

159 
	#AR_PHY_AIC_CAL_COM_ATT_DB_EST_ISO
 0x00001E00

	)

160 
	#AR_PHY_AIC_CAL_COM_ATT_DB_EST_ISO_S
 9

	)

161 
	#AR_PHY_AIC_CAL_ISO_EST_INIT_SETTING
 0x000001F8

	)

162 
	#AR_PHY_AIC_CAL_ISO_EST_INIT_SETTING_S
 3

	)

163 
	#AR_PHY_AIC_CAL_COM_ATT_DB_BACKOFF
 0x00000006

	)

164 
	#AR_PHY_AIC_CAL_COM_ATT_DB_BACKOFF_S
 1

	)

165 
	#AR_PHY_AIC_CAL_COM_ATT_DB_FIXED
 0x00000001

	)

166 
	#AR_PHY_AIC_CAL_COM_ATT_DB_FIXED_S
 0

	)

	@reg_mci.h

17 #i‚de‡
REG_MCI_H


18 
	#REG_MCI_H


	)

20 
	#AR_MCI_COMMAND0
 0x1800

	)

21 
	#AR_MCI_COMMAND0_HEADER
 0xFF

	)

22 
	#AR_MCI_COMMAND0_HEADER_S
 0

	)

23 
	#AR_MCI_COMMAND0_LEN
 0x1f00

	)

24 
	#AR_MCI_COMMAND0_LEN_S
 8

	)

25 
	#AR_MCI_COMMAND0_DISABLE_TIMESTAMP
 0x2000

	)

26 
	#AR_MCI_COMMAND0_DISABLE_TIMESTAMP_S
 13

	)

28 
	#AR_MCI_COMMAND1
 0x1804

	)

30 
	#AR_MCI_COMMAND2
 0x1808

	)

31 
	#AR_MCI_COMMAND2_RESET_TX
 0x01

	)

32 
	#AR_MCI_COMMAND2_RESET_TX_S
 0

	)

33 
	#AR_MCI_COMMAND2_RESET_RX
 0x02

	)

34 
	#AR_MCI_COMMAND2_RESET_RX_S
 1

	)

35 
	#AR_MCI_COMMAND2_RESET_RX_NUM_CYCLES
 0x3FC

	)

36 
	#AR_MCI_COMMAND2_RESET_RX_NUM_CYCLES_S
 2

	)

37 
	#AR_MCI_COMMAND2_RESET_REQ_WAKEUP
 0x400

	)

38 
	#AR_MCI_COMMAND2_RESET_REQ_WAKEUP_S
 10

	)

40 
	#AR_MCI_RX_CTRL
 0x180c

	)

42 
	#AR_MCI_TX_CTRL
 0x1810

	)

49 
	#AR_MCI_TX_CTRL_CLK_DIV
 0x03

	)

50 
	#AR_MCI_TX_CTRL_CLK_DIV_S
 0

	)

51 
	#AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE
 0x04

	)

52 
	#AR_MCI_TX_CTRL_DISABLE_LNA_UPDATE_S
 2

	)

53 
	#AR_MCI_TX_CTRL_GAIN_UPDATE_FREQ
 0xFFFFF8

	)

54 
	#AR_MCI_TX_CTRL_GAIN_UPDATE_FREQ_S
 3

	)

55 
	#AR_MCI_TX_CTRL_GAIN_UPDATE_NUM
 0xF000000

	)

56 
	#AR_MCI_TX_CTRL_GAIN_UPDATE_NUM_S
 24

	)

58 
	#AR_MCI_MSG_ATTRIBUTES_TABLE
 0x1814

	)

59 
	#AR_MCI_MSG_ATTRIBUTES_TABLE_CHECKSUM
 0xFFFF

	)

60 
	#AR_MCI_MSG_ATTRIBUTES_TABLE_CHECKSUM_S
 0

	)

61 
	#AR_MCI_MSG_ATTRIBUTES_TABLE_INVALID_HDR
 0xFFFF0000

	)

62 
	#AR_MCI_MSG_ATTRIBUTES_TABLE_INVALID_HDR_S
 16

	)

64 
	#AR_MCI_SCHD_TABLE_0
 0x1818

	)

65 
	#AR_MCI_SCHD_TABLE_1
 0x181c

	)

66 
	#AR_MCI_GPM_0
 0x1820

	)

67 
	#AR_MCI_GPM_1
 0x1824

	)

68 
	#AR_MCI_GPM_WRITE_PTR
 0xFFFF0000

	)

69 
	#AR_MCI_GPM_WRITE_PTR_S
 16

	)

70 
	#AR_MCI_GPM_BUF_LEN
 0x0000FFFF

	)

71 
	#AR_MCI_GPM_BUF_LEN_S
 0

	)

73 
	#AR_MCI_INTERRUPT_RAW
 0x1828

	)

75 
	#AR_MCI_INTERRUPT_EN
 0x182c

	)

76 
	#AR_MCI_INTERRUPT_SW_MSG_DONE
 0x00000001

	)

77 
	#AR_MCI_INTERRUPT_SW_MSG_DONE_S
 0

	)

78 
	#AR_MCI_INTERRUPT_CPU_INT_MSG
 0x00000002

	)

79 
	#AR_MCI_INTERRUPT_CPU_INT_MSG_S
 1

	)

80 
	#AR_MCI_INTERRUPT_RX_CKSUM_FAIL
 0x00000004

	)

81 
	#AR_MCI_INTERRUPT_RX_CKSUM_FAIL_S
 2

	)

82 
	#AR_MCI_INTERRUPT_RX_INVALID_HDR
 0x00000008

	)

83 
	#AR_MCI_INTERRUPT_RX_INVALID_HDR_S
 3

	)

84 
	#AR_MCI_INTERRUPT_RX_HW_MSG_FAIL
 0x00000010

	)

85 
	#AR_MCI_INTERRUPT_RX_HW_MSG_FAIL_S
 4

	)

86 
	#AR_MCI_INTERRUPT_RX_SW_MSG_FAIL
 0x00000020

	)

87 
	#AR_MCI_INTERRUPT_RX_SW_MSG_FAIL_S
 5

	)

88 
	#AR_MCI_INTERRUPT_TX_HW_MSG_FAIL
 0x00000080

	)

89 
	#AR_MCI_INTERRUPT_TX_HW_MSG_FAIL_S
 7

	)

90 
	#AR_MCI_INTERRUPT_TX_SW_MSG_FAIL
 0x00000100

	)

91 
	#AR_MCI_INTERRUPT_TX_SW_MSG_FAIL_S
 8

	)

92 
	#AR_MCI_INTERRUPT_RX_MSG
 0x00000200

	)

93 
	#AR_MCI_INTERRUPT_RX_MSG_S
 9

	)

94 
	#AR_MCI_INTERRUPT_REMOTE_SLEEP_UPDATE
 0x00000400

	)

95 
	#AR_MCI_INTERRUPT_REMOTE_SLEEP_UPDATE_S
 10

	)

96 
	#AR_MCI_INTERRUPT_BT_PRI
 0x07fff800

	)

97 
	#AR_MCI_INTERRUPT_BT_PRI_S
 11

	)

98 
	#AR_MCI_INTERRUPT_BT_PRI_THRESH
 0x08000000

	)

99 
	#AR_MCI_INTERRUPT_BT_PRI_THRESH_S
 27

	)

100 
	#AR_MCI_INTERRUPT_BT_FREQ
 0x10000000

	)

101 
	#AR_MCI_INTERRUPT_BT_FREQ_S
 28

	)

102 
	#AR_MCI_INTERRUPT_BT_STOMP
 0x20000000

	)

103 
	#AR_MCI_INTERRUPT_BT_STOMP_S
 29

	)

104 
	#AR_MCI_INTERRUPT_BB_AIC_IRQ
 0x40000000

	)

105 
	#AR_MCI_INTERRUPT_BB_AIC_IRQ_S
 30

	)

106 
	#AR_MCI_INTERRUPT_CONT_INFO_TIMEOUT
 0x80000000

	)

107 
	#AR_MCI_INTERRUPT_CONT_INFO_TIMEOUT_S
 31

	)

109 
	#AR_MCI_REMOTE_CPU_INT
 0x1830

	)

110 
	#AR_MCI_REMOTE_CPU_INT_EN
 0x1834

	)

111 
	#AR_MCI_INTERRUPT_RX_MSG_RAW
 0x1838

	)

112 
	#AR_MCI_INTERRUPT_RX_MSG_EN
 0x183c

	)

113 
	#AR_MCI_INTERRUPT_RX_MSG_REMOTE_RESET
 0x00000001

	)

114 
	#AR_MCI_INTERRUPT_RX_MSG_REMOTE_RESET_S
 0

	)

115 
	#AR_MCI_INTERRUPT_RX_MSG_LNA_CONTROL
 0x00000002

	)

116 
	#AR_MCI_INTERRUPT_RX_MSG_LNA_CONTROL_S
 1

	)

117 
	#AR_MCI_INTERRUPT_RX_MSG_CONT_NACK
 0x00000004

	)

118 
	#AR_MCI_INTERRUPT_RX_MSG_CONT_NACK_S
 2

	)

119 
	#AR_MCI_INTERRUPT_RX_MSG_CONT_INFO
 0x00000008

	)

120 
	#AR_MCI_INTERRUPT_RX_MSG_CONT_INFO_S
 3

	)

121 
	#AR_MCI_INTERRUPT_RX_MSG_CONT_RST
 0x00000010

	)

122 
	#AR_MCI_INTERRUPT_RX_MSG_CONT_RST_S
 4

	)

123 
	#AR_MCI_INTERRUPT_RX_MSG_SCHD_INFO
 0x00000020

	)

124 
	#AR_MCI_INTERRUPT_RX_MSG_SCHD_INFO_S
 5

	)

125 
	#AR_MCI_INTERRUPT_RX_MSG_CPU_INT
 0x00000040

	)

126 
	#AR_MCI_INTERRUPT_RX_MSG_CPU_INT_S
 6

	)

127 
	#AR_MCI_INTERRUPT_RX_MSG_GPM
 0x00000100

	)

128 
	#AR_MCI_INTERRUPT_RX_MSG_GPM_S
 8

	)

129 
	#AR_MCI_INTERRUPT_RX_MSG_LNA_INFO
 0x00000200

	)

130 
	#AR_MCI_INTERRUPT_RX_MSG_LNA_INFO_S
 9

	)

131 
	#AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING
 0x00000400

	)

132 
	#AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING_S
 10

	)

133 
	#AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
 0x00000800

	)

134 
	#AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING_S
 11

	)

135 
	#AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
 0x00001000

	)

136 
	#AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE_S
 12

	)

138 
	#AR_MCI_CPU_INT
 0x1840

	)

140 
	#AR_MCI_RX_STATUS
 0x1844

	)

141 
	#AR_MCI_RX_LAST_SCHD_MSG_INDEX
 0x00000F00

	)

142 
	#AR_MCI_RX_LAST_SCHD_MSG_INDEX_S
 8

	)

143 
	#AR_MCI_RX_REMOTE_SLEEP
 0x00001000

	)

144 
	#AR_MCI_RX_REMOTE_SLEEP_S
 12

	)

145 
	#AR_MCI_RX_MCI_CLK_REQ
 0x00002000

	)

146 
	#AR_MCI_RX_MCI_CLK_REQ_S
 13

	)

148 
	#AR_MCI_CONT_STATUS
 0x1848

	)

149 
	#AR_MCI_CONT_RSSI_POWER
 0x000000FF

	)

150 
	#AR_MCI_CONT_RSSI_POWER_S
 0

	)

151 
	#AR_MCI_CONT_PRIORITY
 0x0000FF00

	)

152 
	#AR_MCI_CONT_PRIORITY_S
 8

	)

153 
	#AR_MCI_CONT_TXRX
 0x00010000

	)

154 
	#AR_MCI_CONT_TXRX_S
 16

	)

156 
	#AR_MCI_BT_PRI0
 0x184c

	)

157 
	#AR_MCI_BT_PRI1
 0x1850

	)

158 
	#AR_MCI_BT_PRI2
 0x1854

	)

159 
	#AR_MCI_BT_PRI3
 0x1858

	)

160 
	#AR_MCI_BT_PRI
 0x185c

	)

161 
	#AR_MCI_WL_FREQ0
 0x1860

	)

162 
	#AR_MCI_WL_FREQ1
 0x1864

	)

163 
	#AR_MCI_WL_FREQ2
 0x1868

	)

164 
	#AR_MCI_GAIN
 0x186c

	)

165 
	#AR_MCI_WBTIMER1
 0x1870

	)

166 
	#AR_MCI_WBTIMER2
 0x1874

	)

167 
	#AR_MCI_WBTIMER3
 0x1878

	)

168 
	#AR_MCI_WBTIMER4
 0x187c

	)

169 
	#AR_MCI_MAXGAIN
 0x1880

	)

170 
	#AR_MCI_HW_SCHD_TBL_CTL
 0x1884

	)

171 
	#AR_MCI_HW_SCHD_TBL_D0
 0x1888

	)

172 
	#AR_MCI_HW_SCHD_TBL_D1
 0x188c

	)

173 
	#AR_MCI_HW_SCHD_TBL_D2
 0x1890

	)

174 
	#AR_MCI_HW_SCHD_TBL_D3
 0x1894

	)

175 
	#AR_MCI_TX_PAYLOAD0
 0x1898

	)

176 
	#AR_MCI_TX_PAYLOAD1
 0x189c

	)

177 
	#AR_MCI_TX_PAYLOAD2
 0x18a0

	)

178 
	#AR_MCI_TX_PAYLOAD3
 0x18a4

	)

179 
	#AR_BTCOEX_WBTIMER
 0x18a8

	)

181 
	#AR_BTCOEX_CTRL
 0x18ac

	)

182 
	#AR_BTCOEX_CTRL_AR9462_MODE
 0x00000001

	)

183 
	#AR_BTCOEX_CTRL_AR9462_MODE_S
 0

	)

184 
	#AR_BTCOEX_CTRL_WBTIMER_EN
 0x00000002

	)

185 
	#AR_BTCOEX_CTRL_WBTIMER_EN_S
 1

	)

186 
	#AR_BTCOEX_CTRL_MCI_MODE_EN
 0x00000004

	)

187 
	#AR_BTCOEX_CTRL_MCI_MODE_EN_S
 2

	)

188 
	#AR_BTCOEX_CTRL_LNA_SHARED
 0x00000008

	)

189 
	#AR_BTCOEX_CTRL_LNA_SHARED_S
 3

	)

190 
	#AR_BTCOEX_CTRL_PA_SHARED
 0x00000010

	)

191 
	#AR_BTCOEX_CTRL_PA_SHARED_S
 4

	)

192 
	#AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN
 0x00000020

	)

193 
	#AR_BTCOEX_CTRL_ONE_STEP_LOOK_AHEAD_EN_S
 5

	)

194 
	#AR_BTCOEX_CTRL_TIME_TO_NEXT_BT_THRESH_EN
 0x00000040

	)

195 
	#AR_BTCOEX_CTRL_TIME_TO_NEXT_BT_THRESH_EN_S
 6

	)

196 
	#AR_BTCOEX_CTRL_NUM_ANTENNAS
 0x00000180

	)

197 
	#AR_BTCOEX_CTRL_NUM_ANTENNAS_S
 7

	)

198 
	#AR_BTCOEX_CTRL_RX_CHAIN_MASK
 0x00000E00

	)

199 
	#AR_BTCOEX_CTRL_RX_CHAIN_MASK_S
 9

	)

200 
	#AR_BTCOEX_CTRL_AGGR_THRESH
 0x00007000

	)

201 
	#AR_BTCOEX_CTRL_AGGR_THRESH_S
 12

	)

202 
	#AR_BTCOEX_CTRL_1_CHAIN_BCN
 0x00080000

	)

203 
	#AR_BTCOEX_CTRL_1_CHAIN_BCN_S
 19

	)

204 
	#AR_BTCOEX_CTRL_1_CHAIN_ACK
 0x00100000

	)

205 
	#AR_BTCOEX_CTRL_1_CHAIN_ACK_S
 20

	)

206 
	#AR_BTCOEX_CTRL_WAIT_BA_MARGIN
 0x1FE00000

	)

207 
	#AR_BTCOEX_CTRL_WAIT_BA_MARGIN_S
 28

	)

208 
	#AR_BTCOEX_CTRL_REDUCE_TXPWR
 0x20000000

	)

209 
	#AR_BTCOEX_CTRL_REDUCE_TXPWR_S
 29

	)

210 
	#AR_BTCOEX_CTRL_SPDT_ENABLE_10
 0x40000000

	)

211 
	#AR_BTCOEX_CTRL_SPDT_ENABLE_10_S
 30

	)

212 
	#AR_BTCOEX_CTRL_SPDT_POLARITY
 0x80000000

	)

213 
	#AR_BTCOEX_CTRL_SPDT_POLARITY_S
 31

	)

215 
	#AR_BTCOEX_WL_WEIGHTS0
 0x18b0

	)

216 
	#AR_BTCOEX_WL_WEIGHTS1
 0x18b4

	)

217 
	#AR_BTCOEX_WL_WEIGHTS2
 0x18b8

	)

218 
	#AR_BTCOEX_WL_WEIGHTS3
 0x18bc

	)

220 
	#AR_BTCOEX_MAX_TXPWR
(
_x
Ë(0x18c0 + ((_xË<< 2))

	)

221 
	#AR_BTCOEX_WL_LNA
 0x1940

	)

222 
	#AR_BTCOEX_RFGAIN_CTRL
 0x1944

	)

223 
	#AR_BTCOEX_WL_LNA_TIMEOUT
 0x003FFFFF

	)

224 
	#AR_BTCOEX_WL_LNA_TIMEOUT_S
 0

	)

226 
	#AR_BTCOEX_CTRL2
 0x1948

	)

227 
	#AR_BTCOEX_CTRL2_TXPWR_THRESH
 0x0007F800

	)

228 
	#AR_BTCOEX_CTRL2_TXPWR_THRESH_S
 11

	)

229 
	#AR_BTCOEX_CTRL2_TX_CHAIN_MASK
 0x00380000

	)

230 
	#AR_BTCOEX_CTRL2_TX_CHAIN_MASK_S
 19

	)

231 
	#AR_BTCOEX_CTRL2_RX_DEWEIGHT
 0x00400000

	)

232 
	#AR_BTCOEX_CTRL2_RX_DEWEIGHT_S
 22

	)

233 
	#AR_BTCOEX_CTRL2_GPIO_OBS_SEL
 0x00800000

	)

234 
	#AR_BTCOEX_CTRL2_GPIO_OBS_SEL_S
 23

	)

235 
	#AR_BTCOEX_CTRL2_MAC_BB_OBS_SEL
 0x01000000

	)

236 
	#AR_BTCOEX_CTRL2_MAC_BB_OBS_SEL_S
 24

	)

237 
	#AR_BTCOEX_CTRL2_DESC_BASED_TXPWR_ENABLE
 0x02000000

	)

238 
	#AR_BTCOEX_CTRL2_DESC_BASED_TXPWR_ENABLE_S
 25

	)

240 
	#AR_BTCOEX_CTRL_SPDT_ENABLE
 0x00000001

	)

241 
	#AR_BTCOEX_CTRL_SPDT_ENABLE_S
 0

	)

242 
	#AR_BTCOEX_CTRL_BT_OWN_SPDT_CTRL
 0x00000002

	)

243 
	#AR_BTCOEX_CTRL_BT_OWN_SPDT_CTRL_S
 1

	)

244 
	#AR_BTCOEX_CTRL_USE_LATCHED_BT_ANT
 0x00000004

	)

245 
	#AR_BTCOEX_CTRL_USE_LATCHED_BT_ANT_S
 2

	)

246 
	#AR_GLB_WLAN_UART_INTF_EN
 0x00020000

	)

247 
	#AR_GLB_WLAN_UART_INTF_EN_S
 17

	)

248 
	#AR_GLB_DS_JTAG_DISABLE
 0x00040000

	)

249 
	#AR_GLB_DS_JTAG_DISABLE_S
 18

	)

251 
	#AR_BTCOEX_RC
 0x194c

	)

252 
	#AR_BTCOEX_MAX_RFGAIN
(
_x
Ë(0x1950 + ((_xË<< 2))

	)

253 
	#AR_BTCOEX_DBG
 0x1a50

	)

254 
	#AR_MCI_LAST_HW_MSG_HDR
 0x1a54

	)

255 
	#AR_MCI_LAST_HW_MSG_BDY
 0x1a58

	)

257 
	#AR_MCI_SCHD_TABLE_2
 0x1a5c

	)

258 
	#AR_MCI_SCHD_TABLE_2_MEM_BASED
 0x00000001

	)

259 
	#AR_MCI_SCHD_TABLE_2_MEM_BASED_S
 0

	)

260 
	#AR_MCI_SCHD_TABLE_2_HW_BASED
 0x00000002

	)

261 
	#AR_MCI_SCHD_TABLE_2_HW_BASED_S
 1

	)

263 
	#AR_BTCOEX_CTRL3
 0x1a60

	)

264 
	#AR_BTCOEX_CTRL3_CONT_INFO_TIMEOUT
 0x00000fff

	)

265 
	#AR_BTCOEX_CTRL3_CONT_INFO_TIMEOUT_S
 0

	)

267 
	#AR_GLB_SWREG_DISCONT_MODE
 0x2002c

	)

268 
	#AR_GLB_SWREG_DISCONT_EN_BT_WLAN
 0x3

	)

270 
	#AR_MCI_MISC
 0x1a74

	)

271 
	#AR_MCI_MISC_HW_FIX_EN
 0x00000001

	)

272 
	#AR_MCI_MISC_HW_FIX_EN_S
 0

	)

274 
	#AR_MCI_DBG_CNT_CTRL
 0x1a78

	)

275 
	#AR_MCI_DBG_CNT_CTRL_ENABLE
 0x00000001

	)

276 
	#AR_MCI_DBG_CNT_CTRL_ENABLE_S
 0

	)

277 
	#AR_MCI_DBG_CNT_CTRL_BT_LINKID
 0x000007f8

	)

278 
	#AR_MCI_DBG_CNT_CTRL_BT_LINKID_S
 3

	)

280 
	#MCI_STAT_ALL_BT_LINKID
 0xffff

	)

282 
	#AR_MCI_INTERRUPT_DEFAULT
 (
AR_MCI_INTERRUPT_SW_MSG_DONE
 | \

283 
AR_MCI_INTERRUPT_RX_INVALID_HDR
 | \

284 
AR_MCI_INTERRUPT_RX_HW_MSG_FAIL
 | \

285 
AR_MCI_INTERRUPT_RX_SW_MSG_FAIL
 | \

286 
AR_MCI_INTERRUPT_TX_HW_MSG_FAIL
 | \

287 
AR_MCI_INTERRUPT_TX_SW_MSG_FAIL
 | \

288 
AR_MCI_INTERRUPT_RX_MSG
 | \

289 
AR_MCI_INTERRUPT_REMOTE_SLEEP_UPDATE
 | \

290 
AR_MCI_INTERRUPT_CONT_INFO_TIMEOUT
)

	)

292 
	#AR_MCI_INTERRUPT_MSG_FAIL_MASK
 (
AR_MCI_INTERRUPT_RX_HW_MSG_FAIL
 | \

293 
AR_MCI_INTERRUPT_RX_SW_MSG_FAIL
 | \

294 
AR_MCI_INTERRUPT_TX_HW_MSG_FAIL
 | \

295 
AR_MCI_INTERRUPT_TX_SW_MSG_FAIL
)

	)

297 
	#AR_MCI_INTERRUPT_RX_HW_MSG_MASK
 (
AR_MCI_INTERRUPT_RX_MSG_SCHD_INFO
 | \

298 
AR_MCI_INTERRUPT_RX_MSG_LNA_CONTROL
 | \

299 
AR_MCI_INTERRUPT_RX_MSG_LNA_INFO
 | \

300 
AR_MCI_INTERRUPT_RX_MSG_CONT_NACK
 | \

301 
AR_MCI_INTERRUPT_RX_MSG_CONT_INFO
 | \

302 
AR_MCI_INTERRUPT_RX_MSG_CONT_RST
)

	)

304 
	#AR_MCI_INTERRUPT_RX_MSG_DEFAULT
 (
AR_MCI_INTERRUPT_RX_MSG_GPM
 | \

305 
AR_MCI_INTERRUPT_RX_MSG_REMOTE_RESET
 | \

306 
AR_MCI_INTERRUPT_RX_MSG_SYS_WAKING
 | \

307 
AR_MCI_INTERRUPT_RX_MSG_SYS_SLEEPING
 | \

308 
AR_MCI_INTERRUPT_RX_MSG_REQ_WAKE
)

	)

	@reg_wow.h

17 #i‚de‡
REG_WOW_H


18 
	#REG_WOW_H


	)

20 
	#AR_WOW_PATTERN
 0x825C

	)

21 
	#AR_WOW_COUNT
 0x8260

	)

22 
	#AR_WOW_BCN_EN
 0x8270

	)

23 
	#AR_WOW_BCN_TIMO
 0x8274

	)

24 
	#AR_WOW_KEEP_ALIVE_TIMO
 0x8278

	)

25 
	#AR_WOW_KEEP_ALIVE
 0x827c

	)

26 
	#AR_WOW_KEEP_ALIVE_DELAY
 0x8288

	)

27 
	#AR_WOW_PATTERN_MATCH
 0x828c

	)

54 
	#AR_WOW_LENGTH1
 0x8360

	)

55 
	#AR_WOW_LENGTH2
 0X8364

	)

56 
	#AR_WOW_LENGTH3
 0X8380

	)

57 
	#AR_WOW_LENGTH4
 0X8384

	)

59 
	#AR_WOW_PATTERN_MATCH_LT_256B
 0x8368

	)

60 
	#AR_MAC_PCU_WOW4
 0x8370

	)

62 
	#AR_SW_WOW_CONTROL
 0x20018

	)

63 
	#AR_SW_WOW_ENABLE
 0x1

	)

64 
	#AR_SWITCH_TO_REFCLK
 0x2

	)

65 
	#AR_RESET_CONTROL
 0x4

	)

66 
	#AR_RESET_VALUE_MASK
 0x8

	)

67 
	#AR_HW_WOW_DISABLE
 0x10

	)

68 
	#AR_CLR_MAC_INTERRUPT
 0x20

	)

69 
	#AR_CLR_KA_INTERRUPT
 0x40

	)

71 
	#AR_WOW_BACK_OFF_SHIFT
(
x
Ë((x & 0xfË<< 27Ë

	)

72 
	#AR_WOW_MAC_INTR_EN
 0x00040000

	)

73 
	#AR_WOW_MAGIC_EN
 0x00010000

	)

74 
	#AR_WOW_PATTERN_EN
(
x
Ë(x & 0xff)

	)

75 
	#AR_WOW_PAT_FOUND_SHIFT
 8

	)

76 
	#AR_WOW_PATTERN_FOUND
(
x
Ë(x & (0xf‡<< 
AR_WOW_PAT_FOUND_SHIFT
))

	)

77 
	#AR_WOW_PATTERN_FOUND_MASK
 ((0xffË<< 
AR_WOW_PAT_FOUND_SHIFT
)

	)

78 
	#AR_WOW_MAGIC_PAT_FOUND
 0x00020000

	)

79 
	#AR_WOW_MAC_INTR
 0x00080000

	)

80 
	#AR_WOW_KEEP_ALIVE_FAIL
 0x00100000

	)

81 
	#AR_WOW_BEACON_FAIL
 0x00200000

	)

83 
	#AR_WOW_STATUS
(
x
Ë(x & (
AR_WOW_PATTERN_FOUND_MASK
 | \

84 
AR_WOW_MAGIC_PAT_FOUND
 | \

85 
AR_WOW_KEEP_ALIVE_FAIL
 | \

86 
AR_WOW_BEACON_FAIL
))

	)

87 
	#AR_WOW_CLEAR_EVENTS
(
x
Ë(x & ~(
	`AR_WOW_PATTERN_EN
(0xff) | \

88 
AR_WOW_MAGIC_EN
 | \

89 
AR_WOW_MAC_INTR_EN
 | \

90 
AR_WOW_BEACON_FAIL
 | \

91 
AR_WOW_KEEP_ALIVE_FAIL
))

	)

93 
	#AR_WOW2_PATTERN_EN
(
x
Ë((x & 0xffË<< 0)

	)

94 
	#AR_WOW2_PATTERN_FOUND_SHIFT
 8

	)

95 
	#AR_WOW2_PATTERN_FOUND
(
x
Ë(x & (0xf‡<< 
AR_WOW2_PATTERN_FOUND_SHIFT
))

	)

96 
	#AR_WOW2_PATTERN_FOUND_MASK
 ((0xffË<< 
AR_WOW2_PATTERN_FOUND_SHIFT
)

	)

98 
	#AR_WOW_STATUS2
(
x
Ë(x & 
AR_WOW2_PATTERN_FOUND_MASK
)

	)

99 
	#AR_WOW_CLEAR_EVENTS2
(
x
Ë(x & ~(
	`AR_WOW2_PATTERN_EN
(0xff)))

	)

101 
	#AR_WOW_AIFS_CNT
(
x
Ë(x & 0xff)

	)

102 
	#AR_WOW_SLOT_CNT
(
x
Ë((x & 0xffË<< 8)

	)

103 
	#AR_WOW_KEEP_ALIVE_CNT
(
x
Ë((x & 0xffË<< 16)

	)

105 
	#AR_WOW_BEACON_FAIL_EN
 0x00000001

	)

106 
	#AR_WOW_BEACON_TIMO
 0x40000000

	)

107 
	#AR_WOW_KEEP_ALIVE_NEVER
 0xffffffff

	)

108 
	#AR_WOW_KEEP_ALIVE_AUTO_DIS
 0x00000001

	)

109 
	#AR_WOW_KEEP_ALIVE_FAIL_DIS
 0x00000002

	)

110 
	#AR_WOW_KEEP_ALIVE_DELAY_VALUE
 0x000003e8

	)

111 
	#AR_WOW_BMISSTHRESHOLD
 0x20

	)

112 
	#AR_WOW_PAT_END_OF_PKT
(
x
Ë(x & 0xf)

	)

113 
	#AR_WOW_PAT_OFF_MATCH
(
x
Ë((x & 0xfË<< 8)

	)

114 
	#AR_WOW_PAT_BACKOFF
 0x00000004

	)

115 
	#AR_WOW_CNT_AIFS_CNT
 0x00000022

	)

116 
	#AR_WOW_CNT_SLOT_CNT
 0x00000009

	)

117 
	#AR_WOW_CNT_KA_CNT
 0x00000008

	)

119 
	#AR_WOW_TRANSMIT_BUFFER
 0xe000

	)

120 
	#AR_WOW_TXBUF
(
i
Ë(
AR_WOW_TRANSMIT_BUFFER
 + ((iË<< 2))

	)

121 
	#AR_WOW_KA_DESC_WORD2
 0xe000

	)

122 
	#AR_WOW_TB_PATTERN
(
i
Ë(0xe100 + (ò<< 8))

	)

123 
	#AR_WOW_TB_MASK
(
i
Ë(0xec00 + (ò<< 5))

	)

124 
	#AR_WOW_PATTERN_SUPPORTED_LEGACY
 0xff

	)

125 
	#AR_WOW_PATTERN_SUPPORTED
 0xffff

	)

126 
	#AR_WOW_LENGTH_MAX
 0xff

	)

127 
	#AR_WOW_LEN1_SHIFT
(
_i
Ë((0x3 - ((_iË& 0x3)Ë<< 0x3)

	)

128 
	#AR_WOW_LENGTH1_MASK
(
_i
Ë(
AR_WOW_LENGTH_MAX
 << 
	`AR_WOW_LEN1_SHIFT
(_i))

	)

129 
	#AR_WOW_LEN2_SHIFT
(
_i
Ë((0x7 - ((_iË& 0x7)Ë<< 0x3)

	)

130 
	#AR_WOW_LENGTH2_MASK
(
_i
Ë(
AR_WOW_LENGTH_MAX
 << 
	`AR_WOW_LEN2_SHIFT
(_i))

	)

131 
	#AR_WOW_LEN3_SHIFT
(
_i
Ë((0xb - ((_iË& 0xb)Ë<< 0x3)

	)

132 
	#AR_WOW_LENGTH3_MASK
(
_i
Ë(
AR_WOW_LENGTH_MAX
 << 
	`AR_WOW_LEN3_SHIFT
(_i))

	)

133 
	#AR_WOW_LEN4_SHIFT
(
_i
Ë((0x‡- ((_iË& 0xf)Ë<< 0x3)

	)

134 
	#AR_WOW_LENGTH4_MASK
(
_i
Ë(
AR_WOW_LENGTH_MAX
 << 
	`AR_WOW_LEN4_SHIFT
(_i))

	)

	@tx99.c

17 
	~"©h9k.h
"

19 
	$©h9k_tx99_°›
(
©h_so·c
 *
sc
)

21 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

22 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

24 
	`©h_døö_Æl_txq
(
sc
);

25 
	`©h_°¨åecv
(
sc
);

27 
	`©h9k_hw_£t_öãºu±s
(
ah
);

28 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

30 
	`õì80211_wake_queues
(
sc
->
hw
);

32 
	`k‰ì_skb
(
sc
->
tx99_skb
);

33 
sc
->
tx99_skb
 = 
NULL
;

34 
sc
->
tx99_°©e
 = 
Ál£
;

36 
	`©h9k_hw_tx99_°›
(
sc
->
sc_ah
);

37 
	`©h_dbg
(
comm⁄
, 
XMIT
, "TX99 stopped\n");

38 
	}
}

40 
sk_buff
 *
	$©h9k_buûd_tx99_skb
(
©h_so·c
 *
sc
)

42 
u8
 
PN9D©a
[] = {0xff, 0x87, 0xb8, 0x59, 0xb7, 0xa1, 0xcc, 0x24,

50 
u32
 
Àn
 = 1200;

51 
õì80211_tx_øã
 *
øã
;

52 
õì80211_hw
 *
hw
 = 
sc
->hw;

53 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

54 
õì80211_hdr
 *
hdr
;

55 
õì80211_tx_öfo
 *
tx_öfo
;

56 
sk_buff
 *
skb
;

57 
©h_vif
 *
avp
;

59 i‡(!
sc
->
tx99_vif
)

60  
NULL
;

62 
avp
 = (
©h_vif
 *)
sc
->
tx99_vif
->
drv_¥iv
;

64 
skb
 = 
	`Æloc_skb
(
Àn
, 
GFP_KERNEL
);

65 i‡(!
skb
)

66  
NULL
;

68 
	`skb_put
(
skb
, 
Àn
);

70 
	`mem£t
(
skb
->
d©a
, 0, 
Àn
);

72 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

73 
hdr
->
‰ame_c⁄åﬁ
 = 
	`˝u_to_À16
(
IEEE80211_FTYPE_DATA
);

74 
hdr
->
duøti⁄_id
 = 0;

76 
	`mem˝y
(
hdr
->
addr1
, 
hw
->
wùhy
->
≥rm_addr
, 
ETH_ALEN
);

77 
	`mem˝y
(
hdr
->
addr2
, 
hw
->
wùhy
->
≥rm_addr
, 
ETH_ALEN
);

78 
	`mem˝y
(
hdr
->
addr3
, 
hw
->
wùhy
->
≥rm_addr
, 
ETH_ALEN
);

80 
hdr
->
£q_˘æ
 |
	`˝u_to_À16
(
avp
->
£q_no
);

82 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

83 
	`mem£t
(
tx_öfo
, 0, (*tx_info));

84 
øã
 = &
tx_öfo
->
c⁄åﬁ
.
øãs
[0];

85 
tx_öfo
->
b™d
 = 
sc
->
cur_ch™
->
ch™def
.
ch™
->band;

86 
tx_öfo
->
Êags
 = 
IEEE80211_TX_CTL_NO_ACK
;

87 
tx_öfo
->
c⁄åﬁ
.
vif
 = 
sc
->
tx99_vif
;

88 
øã
->
cou¡
 = 1;

89 i‡(
ah
->
curch™
 && 
	`IS_CHAN_HT
(ah->curchan)) {

90 
øã
->
Êags
 |
IEEE80211_TX_RC_MCS
;

91 i‡(
	`IS_CHAN_HT40
(
ah
->
curch™
))

92 
øã
->
Êags
 |
IEEE80211_TX_RC_40_MHZ_WIDTH
;

95 
	`mem˝y
(
skb
->
d©a
 + (*
hdr
), 
PN9D©a
, (PN9Data));

97  
skb
;

98 
	}
}

100 
	$©h9k_tx99_deöô
(
©h_so·c
 *
sc
)

102 
	`©h_ª£t
(
sc
, 
NULL
);

104 
	`©h9k_ps_wakeup
(
sc
);

105 
	`©h9k_tx99_°›
(
sc
);

106 
	`©h9k_ps_ª°‹e
(
sc
);

107 
	}
}

109 
	$©h9k_tx99_öô
(
©h_so·c
 *
sc
)

111 
õì80211_hw
 *
hw
 = 
sc
->hw;

112 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

113 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

114 
©h_tx_c⁄åﬁ
 
tx˘l
;

115 
r
;

117 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
)) {

118 
	`©h_îr
(
comm⁄
,

120  -
EINVAL
;

123 
sc
->
tx99_skb
 = 
	`©h9k_buûd_tx99_skb
(sc);

124 i‡(!
sc
->
tx99_skb
)

125  -
ENOMEM
;

127 
	`mem£t
(&
tx˘l
, 0, (txctl));

128 
tx˘l
.
txq
 = 
sc
->
tx
.
txq_m≠
[
IEEE80211_AC_VO
];

130 
	`©h_ª£t
(
sc
, 
NULL
);

132 
	`©h9k_ps_wakeup
(
sc
);

134 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

135 
	`©omic_£t
(&
ah
->
öå_ªf_˙t
, -1);

136 
	`©h_døö_Æl_txq
(
sc
);

137 
	`©h_°›ªcv
(
sc
);

139 
sc
->
tx99_°©e
 = 
åue
;

141 
	`õì80211_°›_queues
(
hw
);

143 i‡(
sc
->
tx99_powî
 =
MAX_RATE_POWER
 + 1)

144 
sc
->
tx99_powî
 = 
MAX_RATE_POWER
;

146 
	`©h9k_hw_tx99_£t_txpowî
(
ah
, 
sc
->
tx99_powî
);

147 
r
 = 
	`©h9k_tx99_£nd
(
sc
, sc->
tx99_skb
, &
tx˘l
);

148 i‡(
r
) {

149 
	`©h_dbg
(
comm⁄
, 
XMIT
, "FailedÅo xmit TX99 skb\n");

150  
r
;

153 
	`©h_dbg
(
comm⁄
, 
XMIT
, "TX99 xmit started using %d ( %ddBm)\n",

154 
sc
->
tx99_powî
,

155 
sc
->
tx99_powî
 / 2);

160 
	}
}

162 
ssize_t
 
	$ªad_fûe_tx99
(
fûe
 *fûe, 
__u£r
 *
u£r_buf
,

163 
size_t
 
cou¡
, 
loff_t
 *
µos
)

165 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

166 
buf
[3];

167 
Àn
;

169 
Àn
 = 
	`•rötf
(
buf
, "%d\n", 
sc
->
tx99_°©e
);

170  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

171 
	}
}

173 
ssize_t
 
	$wrôe_fûe_tx99
(
fûe
 *fûe, c⁄° 
__u£r
 *
u£r_buf
,

174 
size_t
 
cou¡
, 
loff_t
 *
µos
)

176 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

177 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

178 
buf
[32];

179 
boﬁ
 
°¨t
;

180 
ssize_t
 
Àn
;

181 
r
;

183 i‡(
sc
->
cur_ch™
->
nvifs
 > 1)

184  -
EOPNOTSUPP
;

186 
Àn
 = 
	`mö
(
cou¡
, (
buf
) - 1);

187 i‡(
	`c›y_‰om_u£r
(
buf
, 
u£r_buf
, 
Àn
))

188  -
EFAULT
;

190 i‡(
	`°πoboﬁ
(
buf
, &
°¨t
))

191  -
EINVAL
;

193 i‡(
°¨t
 =
sc
->
tx99_°©e
) {

194 i‡(!
°¨t
)

195  
cou¡
;

196 
	`©h_dbg
(
comm⁄
, 
XMIT
, "Resetting TX99\n");

197 
	`©h9k_tx99_deöô
(
sc
);

200 i‡(!
°¨t
) {

201 
	`©h9k_tx99_deöô
(
sc
);

202  
cou¡
;

205 
r
 = 
	`©h9k_tx99_öô
(
sc
);

206 i‡(
r
)

207  
r
;

209  
cou¡
;

210 
	}
}

212 c⁄° 
fûe_›î©i⁄s
 
	gf›s_tx99
 = {

213 .
ªad
 = 
ªad_fûe_tx99
,

214 .
	gwrôe
 = 
wrôe_fûe_tx99
,

215 .
	g›í
 = 
sim∂e_›í
,

216 .
	gow√r
 = 
THIS_MODULE
,

217 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

220 
ssize_t
 
	$ªad_fûe_tx99_powî
(
fûe
 *file,

221 
__u£r
 *
u£r_buf
,

222 
size_t
 
cou¡
, 
loff_t
 *
µos
)

224 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

225 
buf
[32];

226 
Àn
;

228 
Àn
 = 
	`•rötf
(
buf
, "%d (%d dBm)\n",

229 
sc
->
tx99_powî
,

230 
sc
->
tx99_powî
 / 2);

232  
	`sim∂e_ªad_‰om_buf„r
(
u£r_buf
, 
cou¡
, 
µos
, 
buf
, 
Àn
);

233 
	}
}

235 
ssize_t
 
	$wrôe_fûe_tx99_powî
(
fûe
 *file,

236 c⁄° 
__u£r
 *
u£r_buf
,

237 
size_t
 
cou¡
, 
loff_t
 *
µos
)

239 
©h_so·c
 *
sc
 = 
fûe
->
¥iv©e_d©a
;

240 
r
;

241 
u8
 
tx_powî
;

243 
r
 = 
	`k°πou8_‰om_u£r
(
u£r_buf
, 
cou¡
, 0, &
tx_powî
);

244 i‡(
r
)

245  
r
;

247 i‡(
tx_powî
 > 
MAX_RATE_POWER
)

248  -
EINVAL
;

250 
sc
->
tx99_powî
 = 
tx_powî
;

252 
	`©h9k_ps_wakeup
(
sc
);

253 
	`©h9k_hw_tx99_£t_txpowî
(
sc
->
sc_ah
, sc->
tx99_powî
);

254 
	`©h9k_ps_ª°‹e
(
sc
);

256  
cou¡
;

257 
	}
}

259 c⁄° 
fûe_›î©i⁄s
 
	gf›s_tx99_powî
 = {

260 .
ªad
 = 
ªad_fûe_tx99_powî
,

261 .
	gwrôe
 = 
wrôe_fûe_tx99_powî
,

262 .
	g›í
 = 
sim∂e_›í
,

263 .
	gow√r
 = 
THIS_MODULE
,

264 .
	gŒ£ek
 = 
deÁu…_Œ£ek
,

267 
	$©h9k_tx99_öô_debug
(
©h_so·c
 *
sc
)

269 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
sc
->
sc_ah
))

272 
	`debugfs_¸óã_fûe
("tx99", 
S_IRUSR
 | 
S_IWUSR
,

273 
sc
->
debug
.
debugfs_phy
, sc,

274 &
f›s_tx99
);

275 
	`debugfs_¸óã_fûe
("tx99_powî", 
S_IRUSR
 | 
S_IWUSR
,

276 
sc
->
debug
.
debugfs_phy
, sc,

277 &
f›s_tx99_powî
);

278 
	}
}

	@wmi.c

17 
	~"htc.h
"

19 c⁄° *
	$wmi_cmd_to_«me
(
wmi_cmd_id
 
wmi_cmd
)

21 
wmi_cmd
) {

22 
WMI_ECHO_CMDID
:

24 
WMI_ACCESS_MEMORY_CMDID
:

26 
WMI_GET_FW_VERSION
:

28 
WMI_DISABLE_INTR_CMDID
:

30 
WMI_ENABLE_INTR_CMDID
:

32 
WMI_ATH_INIT_CMDID
:

34 
WMI_ABORT_TXQ_CMDID
:

36 
WMI_STOP_TX_DMA_CMDID
:

38 
WMI_ABORT_TX_DMA_CMDID
:

40 
WMI_DRAIN_TXQ_CMDID
:

42 
WMI_DRAIN_TXQ_ALL_CMDID
:

44 
WMI_START_RECV_CMDID
:

46 
WMI_STOP_RECV_CMDID
:

48 
WMI_FLUSH_RECV_CMDID
:

50 
WMI_SET_MODE_CMDID
:

52 
WMI_NODE_CREATE_CMDID
:

54 
WMI_NODE_REMOVE_CMDID
:

56 
WMI_VAP_REMOVE_CMDID
:

58 
WMI_VAP_CREATE_CMDID
:

60 
WMI_REG_READ_CMDID
:

62 
WMI_REG_WRITE_CMDID
:

64 
WMI_REG_RMW_CMDID
:

66 
WMI_RC_STATE_CHANGE_CMDID
:

68 
WMI_RC_RATE_UPDATE_CMDID
:

70 
WMI_TARGET_IC_UPDATE_CMDID
:

72 
WMI_TX_AGGR_ENABLE_CMDID
:

74 
WMI_TGT_DETACH_CMDID
:

76 
WMI_NODE_UPDATE_CMDID
:

78 
WMI_INT_STATS_CMDID
:

80 
WMI_TX_STATS_CMDID
:

82 
WMI_RX_STATS_CMDID
:

84 
WMI_BITRATE_MASK_CMDID
:

89 
	}
}

91 
wmi
 *
	$©h9k_öô_wmi
(
©h9k_htc_¥iv
 *
¥iv
)

93 
wmi
 *wmi;

95 
wmi
 = 
	`kzÆloc
((wmi), 
GFP_KERNEL
);

96 i‡(!
wmi
)

97  
NULL
;

99 
wmi
->
drv_¥iv
 = 
¥iv
;

100 
wmi
->
°›≥d
 = 
Ál£
;

101 
	`skb_queue_hód_öô
(&
wmi
->
wmi_evít_queue
);

102 
	`•ö_lock_öô
(&
wmi
->
wmi_lock
);

103 
	`•ö_lock_öô
(&
wmi
->
evít_lock
);

104 
	`muãx_öô
(&
wmi
->
›_muãx
);

105 
	`muãx_öô
(&
wmi
->
mu…i_wrôe_muãx
);

106 
	`muãx_öô
(&
wmi
->
mu…i_rmw_muãx
);

107 
	`öô_com∂ëi⁄
(&
wmi
->
cmd_waô
);

108 
	`INIT_LIST_HEAD
(&
wmi
->
≥ndög_tx_evíts
);

109 
	`èskÀt_öô
(&
wmi
->
wmi_evít_èskÀt
, 
©h9k_wmi_evít_èskÀt
,

110 ()
wmi
);

112  
wmi
;

113 
	}
}

115 
	$©h9k_deöô_wmi
(
©h9k_htc_¥iv
 *
¥iv
)

117 
wmi
 *wmò
¥iv
->wmi;

119 
	`muãx_lock
(&
wmi
->
›_muãx
);

120 
wmi
->
°›≥d
 = 
åue
;

121 
	`muãx_u∆ock
(&
wmi
->
›_muãx
);

123 
	`k‰ì
(
¥iv
->
wmi
);

124 
	}
}

126 
	$©h9k_wmi_evít_døö
(
©h9k_htc_¥iv
 *
¥iv
)

128 
Êags
;

130 
	`èskÀt_kûl
(&
¥iv
->
wmi
->
wmi_evít_èskÀt
);

131 
	`•ö_lock_úqßve
(&
¥iv
->
wmi
->
wmi_lock
, 
Êags
);

132 
	`__skb_queue_purge
(&
¥iv
->
wmi
->
wmi_evít_queue
);

133 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
wmi
->
wmi_lock
, 
Êags
);

134 
	}
}

136 
	$©h9k_wmi_evít_èskÀt
(
d©a
)

138 
wmi
 *wmò(wmò*)
d©a
;

139 
©h9k_htc_¥iv
 *
¥iv
 = 
wmi
->
drv_¥iv
;

140 
wmi_cmd_hdr
 *
hdr
;

141 *
wmi_evít
;

142 
wmi_evít_swba
 *
swba
;

143 
sk_buff
 *
skb
 = 
NULL
;

144 
Êags
;

145 
u16
 
cmd_id
;

148 
	`•ö_lock_úqßve
(&
wmi
->
wmi_lock
, 
Êags
);

149 
skb
 = 
	`__skb_dequeue
(&
wmi
->
wmi_evít_queue
);

150 i‡(!
skb
) {

151 
	`•ö_u∆ock_úqª°‹e
(&
wmi
->
wmi_lock
, 
Êags
);

154 
	`•ö_u∆ock_úqª°‹e
(&
wmi
->
wmi_lock
, 
Êags
);

156 
hdr
 = (
wmi_cmd_hdr
 *Ë
skb
->
d©a
;

157 
cmd_id
 = 
	`be16_to_˝u
(
hdr
->
comm™d_id
);

158 
wmi_evít
 = 
	`skb_puŒ
(
skb
, (
wmi_cmd_hdr
));

160 
cmd_id
) {

161 
WMI_SWBA_EVENTID
:

162 
swba
 = (
wmi_evít_swba
 *Ë
wmi_evít
;

163 
	`©h9k_htc_swba
(
¥iv
, 
swba
);

165 
WMI_FATAL_EVENTID
:

166 
	`õì80211_queue_w‹k
(
wmi
->
drv_¥iv
->
hw
,

167 &
wmi
->
drv_¥iv
->
Áèl_w‹k
);

169 
WMI_TXSTATUS_EVENTID
:

170 
	`•ö_lock_bh
(&
¥iv
->
tx
.
tx_lock
);

171 i‡(
¥iv
->
tx
.
Êags
 & 
ATH9K_HTC_OP_TX_DRAIN
) {

172 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

175 
	`•ö_u∆ock_bh
(&
¥iv
->
tx
.
tx_lock
);

177 
	`©h9k_htc_tx°©us
(
¥iv
, 
wmi_evít
);

183 
	`k‰ì_skb
(
skb
);

185 
	}
}

187 
	$©h9k_Áèl_w‹k
(
w‹k_°ru˘
 *
w‹k
)

189 
©h9k_htc_¥iv
 *
¥iv
 = 
	`c⁄èöî_of
(
w‹k
, ath9k_htc_priv,

190 
Áèl_w‹k
);

191 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
¥iv
->
ah
);

193 
	`©h_dbg
(
comm⁄
, 
FATAL
, "FATAL EventÑeceived,Ñesetting device\n");

194 
	`©h9k_htc_ª£t
(
¥iv
);

195 
	}
}

197 
	$©h9k_wmi_r•_ˇŒback
(
wmi
 *wmi, 
sk_buff
 *
skb
)

199 
	`skb_puŒ
(
skb
, (
wmi_cmd_hdr
));

201 i‡(
wmi
->
cmd_r•_buf
 !
NULL
 && wmi->
cmd_r•_Àn
 != 0)

202 
	`mem˝y
(
wmi
->
cmd_r•_buf
, 
skb
->
d©a
, wmi->
cmd_r•_Àn
);

204 
	`com∂ëe
(&
wmi
->
cmd_waô
);

205 
	}
}

207 
	$©h9k_wmi_˘æ_rx
(*
¥iv
, 
sk_buff
 *
skb
,

208 
htc_ídpoöt_id
 
ïid
)

210 
wmi
 *wmò(wmò*Ë
¥iv
;

211 
wmi_cmd_hdr
 *
hdr
;

212 
u16
 
cmd_id
;

214 i‡(
	`u∆ikñy
(
wmi
->
°›≥d
))

215 
‰ì_skb
;

217 
hdr
 = (
wmi_cmd_hdr
 *Ë
skb
->
d©a
;

218 
cmd_id
 = 
	`be16_to_˝u
(
hdr
->
comm™d_id
);

220 i‡(
cmd_id
 & 0x1000) {

221 
	`•ö_lock
(&
wmi
->
wmi_lock
);

222 
	`__skb_queue_èû
(&
wmi
->
wmi_evít_queue
, 
skb
);

223 
	`•ö_u∆ock
(&
wmi
->
wmi_lock
);

224 
	`èskÀt_scheduÀ
(&
wmi
->
wmi_evít_èskÀt
);

229 
	`•ö_lock
(&
wmi
->
wmi_lock
);

230 i‡(
	`be16_to_˝u
(
hdr
->
£q_no
Ë!
wmi
->
œ°_£q_id
) {

231 
	`•ö_u∆ock
(&
wmi
->
wmi_lock
);

232 
‰ì_skb
;

234 
	`•ö_u∆ock
(&
wmi
->
wmi_lock
);

237 
	`©h9k_wmi_r•_ˇŒback
(
wmi
, 
skb
);

239 
‰ì_skb
:

240 
	`k‰ì_skb
(
skb
);

241 
	}
}

243 
	$©h9k_wmi_˘æ_tx
(*
¥iv
, 
sk_buff
 *
skb
,

244 
htc_ídpoöt_id
 
ïid
, 
boﬁ
 
txok
)

246 
	`k‰ì_skb
(
skb
);

247 
	}
}

249 
	$©h9k_wmi_c⁄√˘
(
htc_èrgë
 *
htc
, 
wmi
 *wmi,

250 
htc_ídpoöt_id
 *
wmi_˘æ_ïid
)

252 
htc_£rvi˚_c⁄ƒeq
 
c⁄√˘
;

253 
ªt
;

255 
wmi
->
htc
 = htc;

257 
	`mem£t
(&
c⁄√˘
, 0, (connect));

259 
c⁄√˘
.
ï_ˇŒbacks
.
¥iv
 = 
wmi
;

260 
c⁄√˘
.
ï_ˇŒbacks
.
tx
 = 
©h9k_wmi_˘æ_tx
;

261 
c⁄√˘
.
ï_ˇŒbacks
.
rx
 = 
©h9k_wmi_˘æ_rx
;

262 
c⁄√˘
.
£rvi˚_id
 = 
WMI_CONTROL_SVC
;

264 
ªt
 = 
	`htc_c⁄√˘_£rvi˚
(
htc
, &
c⁄√˘
, &
wmi
->
˘æ_ïid
);

265 i‡(
ªt
)

266  
ªt
;

268 *
wmi_˘æ_ïid
 = 
wmi
->
˘æ_ïid
;

271 
	}
}

273 
	$©h9k_wmi_cmd_issue
(
wmi
 *wmi,

274 
sk_buff
 *
skb
,

275 
wmi_cmd_id
 
cmd
, 
u16
 
Àn
)

277 
wmi_cmd_hdr
 *
hdr
;

278 
Êags
;

280 
hdr
 = (
wmi_cmd_hdr
 *Ë
	`skb_push
(
skb
, (wmi_cmd_hdr));

281 
hdr
->
comm™d_id
 = 
	`˝u_to_be16
(
cmd
);

282 
hdr
->
£q_no
 = 
	`˝u_to_be16
(++
wmi
->
tx_£q_id
);

284 
	`•ö_lock_úqßve
(&
wmi
->
wmi_lock
, 
Êags
);

285 
wmi
->
œ°_£q_id
 = wmi->
tx_£q_id
;

286 
	`•ö_u∆ock_úqª°‹e
(&
wmi
->
wmi_lock
, 
Êags
);

288  
	`htc_£nd_ïid
(
wmi
->
htc
, 
skb
, wmi->
˘æ_ïid
);

289 
	}
}

291 
	$©h9k_wmi_cmd
(
wmi
 *wmi, 
wmi_cmd_id
 
cmd_id
,

292 
u8
 *
cmd_buf
, 
u32
 
cmd_Àn
,

293 
u8
 *
r•_buf
, 
u32
 
r•_Àn
,

294 
u32
 
timeout
)

296 
©h_hw
 *
ah
 = 
wmi
->
drv_¥iv
->ah;

297 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

298 
u16
 
hódroom
 = (
htc_‰ame_hdr
) +

299 (
wmi_cmd_hdr
);

300 
sk_buff
 *
skb
;

301 
u8
 *
d©a
;

302 
time_À·
;

303 
ªt
 = 0;

305 i‡(
ah
->
ah_Êags
 & 
AH_UNPLUGGED
)

308 
skb
 = 
	`Æloc_skb
(
hódroom
 + 
cmd_Àn
, 
GFP_ATOMIC
);

309 i‡(!
skb
)

310  -
ENOMEM
;

312 
	`skb_ª£rve
(
skb
, 
hódroom
);

314 i‡(
cmd_Àn
 !0 && 
cmd_buf
 !
NULL
) {

315 
d©a
 = (
u8
 *Ë
	`skb_put
(
skb
, 
cmd_Àn
);

316 
	`mem˝y
(
d©a
, 
cmd_buf
, 
cmd_Àn
);

319 
	`muãx_lock
(&
wmi
->
›_muãx
);

322 i‡(
	`u∆ikñy
(
wmi
->
°›≥d
)) {

323 
ªt
 = -
EPROTO
;

324 
out
;

328 
wmi
->
cmd_r•_buf
 = 
r•_buf
;

329 
wmi
->
cmd_r•_Àn
 = 
r•_Àn
;

331 
ªt
 = 
	`©h9k_wmi_cmd_issue
(
wmi
, 
skb
, 
cmd_id
, 
cmd_Àn
);

332 i‡(
ªt
)

333 
out
;

335 
time_À·
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
wmi
->
cmd_waô
, 
timeout
);

336 i‡(!
time_À·
) {

337 
	`©h_dbg
(
comm⁄
, 
WMI
, "Timeout waiting for WMI command: %s\n",

338 
	`wmi_cmd_to_«me
(
cmd_id
));

339 
	`muãx_u∆ock
(&
wmi
->
›_muãx
);

340  -
ETIMEDOUT
;

343 
	`muãx_u∆ock
(&
wmi
->
›_muãx
);

347 
out
:

348 
	`©h_dbg
(
comm⁄
, 
WMI
, "WMI faûuª f‹: %s\n", 
	`wmi_cmd_to_«me
(
cmd_id
));

349 
	`muãx_u∆ock
(&
wmi
->
›_muãx
);

350 
	`k‰ì_skb
(
skb
);

352  
ªt
;

353 
	}
}

	@wmi.h

17 #i‚de‡
WMI_H


18 
	#WMI_H


	)

20 
	swmi_evít_txøã
 {

21 
__be32
 
	mtxøã
;

23 
u8
 
	mrssi_thªsh
;

24 
u8
 
	m≥r
;

25 } 
	mrc_°©s
;

26 } 
	g__∑cked
;

28 
	swmi_cmd_hdr
 {

29 
__be16
 
	mcomm™d_id
;

30 
__be16
 
	m£q_no
;

31 } 
	g__∑cked
;

33 
	swmi_fw_vîsi⁄
 {

34 
__be16
 
	mmaj‹
;

35 
__be16
 
	mmö‹
;

37 } 
	g__∑cked
;

39 
	swmi_evít_swba
 {

40 
__be64
 
	mtsf
;

41 
u8
 
	mbóc⁄_≥ndög
;

42 } 
	g__∑cked
;

49 
	#HTC_MAX_TX_STATUS
 12

	)

51 
	#ATH9K_HTC_TXSTAT_ACK
 
	`BIT
(0)

	)

52 
	#ATH9K_HTC_TXSTAT_FILT
 
	`BIT
(1)

	)

53 
	#ATH9K_HTC_TXSTAT_RTC_CTS
 
	`BIT
(2)

	)

54 
	#ATH9K_HTC_TXSTAT_MCS
 
	`BIT
(3)

	)

55 
	#ATH9K_HTC_TXSTAT_CW40
 
	`BIT
(4)

	)

56 
	#ATH9K_HTC_TXSTAT_SGI
 
	`BIT
(5)

	)

64 
	#ATH9K_HTC_TXSTAT_RATE
 0x0f

	)

65 
	#ATH9K_HTC_TXSTAT_RATE_S
 0

	)

67 
	#ATH9K_HTC_TXSTAT_EPID
 0xf0

	)

68 
	#ATH9K_HTC_TXSTAT_EPID_S
 4

	)

70 
	s__wmi_evít_tx°©us
 {

71 
u8
 
	mcookõ
;

72 
u8
 
	mts_øã
;

73 
u8
 
	mts_Êags
;

76 
	swmi_evít_tx°©us
 {

77 
u8
 
	m˙t
;

78 
__wmi_evít_tx°©us
 
	mtx°©us
[
HTC_MAX_TX_STATUS
];

79 } 
	g__∑cked
;

81 
	ewmi_cmd_id
 {

82 
	mWMI_ECHO_CMDID
 = 0x0001,

83 
	mWMI_ACCESS_MEMORY_CMDID
,

86 
	mWMI_GET_FW_VERSION
,

87 
	mWMI_DISABLE_INTR_CMDID
,

88 
	mWMI_ENABLE_INTR_CMDID
,

89 
	mWMI_ATH_INIT_CMDID
,

90 
	mWMI_ABORT_TXQ_CMDID
,

91 
	mWMI_STOP_TX_DMA_CMDID
,

92 
	mWMI_ABORT_TX_DMA_CMDID
,

93 
	mWMI_DRAIN_TXQ_CMDID
,

94 
	mWMI_DRAIN_TXQ_ALL_CMDID
,

95 
	mWMI_START_RECV_CMDID
,

96 
	mWMI_STOP_RECV_CMDID
,

97 
	mWMI_FLUSH_RECV_CMDID
,

98 
	mWMI_SET_MODE_CMDID
,

99 
	mWMI_NODE_CREATE_CMDID
,

100 
	mWMI_NODE_REMOVE_CMDID
,

101 
	mWMI_VAP_REMOVE_CMDID
,

102 
	mWMI_VAP_CREATE_CMDID
,

103 
	mWMI_REG_READ_CMDID
,

104 
	mWMI_REG_WRITE_CMDID
,

105 
	mWMI_RC_STATE_CHANGE_CMDID
,

106 
	mWMI_RC_RATE_UPDATE_CMDID
,

107 
	mWMI_TARGET_IC_UPDATE_CMDID
,

108 
	mWMI_TX_AGGR_ENABLE_CMDID
,

109 
	mWMI_TGT_DETACH_CMDID
,

110 
	mWMI_NODE_UPDATE_CMDID
,

111 
	mWMI_INT_STATS_CMDID
,

112 
	mWMI_TX_STATS_CMDID
,

113 
	mWMI_RX_STATS_CMDID
,

114 
	mWMI_BITRATE_MASK_CMDID
,

115 
	mWMI_REG_RMW_CMDID
,

118 
	ewmi_evít_id
 {

119 
	mWMI_TGT_RDY_EVENTID
 = 0x1001,

120 
	mWMI_SWBA_EVENTID
,

121 
	mWMI_FATAL_EVENTID
,

122 
	mWMI_TXTO_EVENTID
,

123 
	mWMI_BMISS_EVENTID
,

124 
	mWMI_DELBA_EVENTID
,

125 
	mWMI_TXSTATUS_EVENTID
,

128 
	#MAX_CMD_NUMBER
 62

	)

129 
	#MAX_RMW_CMD_NUMBER
 15

	)

131 
	sªgi°î_wrôe
 {

132 
__be32
 
	mªg
;

133 
__be32
 
	mvÆ
;

136 
	sªgi°î_rmw
 {

137 
__be32
 
	mªg
;

138 
__be32
 
	m£t
;

139 
__be32
 
	m˛r
;

140 } 
	g__∑cked
;

142 
	s©h9k_htc_tx_evít
 {

143 
	mcou¡
;

144 
__wmi_evít_tx°©us
 
	mtxs
;

145 
li°_hód
 
	mli°
;

148 
	swmi
 {

149 
©h9k_htc_¥iv
 *
	mdrv_¥iv
;

150 
htc_èrgë
 *
	mhtc
;

151 
htc_ídpoöt_id
 
	m˘æ_ïid
;

152 
muãx
 
	m›_muãx
;

153 
com∂ëi⁄
 
	mcmd_waô
;

154 
u16
 
	mœ°_£q_id
;

155 
sk_buff_hód
 
	mwmi_evít_queue
;

156 
èskÀt_°ru˘
 
	mwmi_evít_èskÀt
;

157 
u16
 
	mtx_£q_id
;

158 
u8
 *
	mcmd_r•_buf
;

159 
u32
 
	mcmd_r•_Àn
;

160 
boﬁ
 
	m°›≥d
;

162 
li°_hód
 
	m≥ndög_tx_evíts
;

163 
•ölock_t
 
	mevít_lock
;

165 
•ölock_t
 
	mwmi_lock
;

168 
©omic_t
 
	mmwrôe_˙t
;

169 
ªgi°î_wrôe
 
	mmu…i_wrôe
[
MAX_CMD_NUMBER
];

170 
u32
 
	mmu…i_wrôe_idx
;

171 
muãx
 
	mmu…i_wrôe_muãx
;

174 
©omic_t
 
	mm_rmw_˙t
;

175 
ªgi°î_rmw
 
	mmu…i_rmw
[
MAX_RMW_CMD_NUMBER
];

176 
u32
 
	mmu…i_rmw_idx
;

177 
muãx
 
	mmu…i_rmw_muãx
;

181 
wmi
 *
©h9k_öô_wmi
(
©h9k_htc_¥iv
 *
¥iv
);

182 
©h9k_deöô_wmi
(
©h9k_htc_¥iv
 *
¥iv
);

183 
©h9k_wmi_c⁄√˘
(
htc_èrgë
 *
htc
, 
wmi
 *wmi,

184 
htc_ídpoöt_id
 *
wmi_˘æ_ïid
);

185 
©h9k_wmi_cmd
(
wmi
 *wmi, 
wmi_cmd_id
 
cmd_id
,

186 
u8
 *
cmd_buf
, 
u32
 
cmd_Àn
,

187 
u8
 *
r•_buf
, 
u32
 
r•_Àn
,

188 
u32
 
timeout
);

189 
©h9k_wmi_evít_èskÀt
(
d©a
);

190 
©h9k_Áèl_w‹k
(
w‹k_°ru˘
 *
w‹k
);

191 
©h9k_wmi_evít_døö
(
©h9k_htc_¥iv
 *
¥iv
);

193 
	#WMI_CMD
(
_wmi_cmd
) \

195 
ªt
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
_wmi_cmd
, 
NULL
, 0, \

196 (
u8
 *Ë&
cmd_r•
, \

197 (
cmd_r•
), 
HZ
*2); \

198 } 0)

	)

200 
	#WMI_CMD_BUF
(
_wmi_cmd
, 
_buf
) \

202 
ªt
 = 
	`©h9k_wmi_cmd
(
¥iv
->
wmi
, 
_wmi_cmd
, \

203 (
u8
 *Ë
_buf
, (*_buf), \

204 &
cmd_r•
, (cmd_r•), 
HZ
*2); \

205 } 0)

	)

	@wow.c

17 
	~"©h9k.h
"

19 c⁄° 
wùhy_wowœn_suµ‹t
 
	g©h9k_wowœn_suµ‹t_Àgacy
 = {

20 .
Êags
 = 
WIPHY_WOWLAN_MAGIC_PKT
 | 
WIPHY_WOWLAN_DISCONNECT
,

21 .
	gn_∑âîns
 = 
MAX_NUM_USER_PATTERN
,

22 .
	g∑âîn_mö_Àn
 = 1,

23 .
	g∑âîn_max_Àn
 = 
MAX_PATTERN_SIZE
,

26 c⁄° 
wùhy_wowœn_suµ‹t
 
	g©h9k_wowœn_suµ‹t
 = {

27 .
Êags
 = 
WIPHY_WOWLAN_MAGIC_PKT
 | 
WIPHY_WOWLAN_DISCONNECT
,

28 .
	gn_∑âîns
 = 
MAX_NUM_PATTERN
 - 2,

29 .
	g∑âîn_mö_Àn
 = 1,

30 .
	g∑âîn_max_Àn
 = 
MAX_PATTERN_SIZE
,

33 
u8
 
	$©h9k_wow_m≠_åiggîs
(
©h_so·c
 *
sc
,

34 
cfg80211_wowœn
 *
wowœn
)

36 
u8
 
wow_åiggîs
 = 0;

38 i‡(
wowœn
->
disc⁄√˘
)

39 
wow_åiggîs
 |
AH_WOW_LINK_CHANGE
 |

40 
AH_WOW_BEACON_MISS
;

41 i‡(
wowœn
->
magic_pkt
)

42 
wow_åiggîs
 |
AH_WOW_MAGIC_PATTERN_EN
;

44 i‡(
wowœn
->
n_∑âîns
)

45 
wow_åiggîs
 |
AH_WOW_USER_PATTERN_EN
;

47  
wow_åiggîs
;

48 
	}
}

50 
	$©h9k_wow_add_dißssoc_dóuth_∑âîn
(
©h_so·c
 *
sc
)

52 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

53 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

54 
∑âîn_cou¡
 = 0;

55 
ªt
, 
i
, 
byã_˙t
 = 0;

56 
u8
 
dis_dóuth_∑âîn
[
MAX_PATTERN_SIZE
];

57 
u8
 
dis_dóuth_mask
[
MAX_PATTERN_SIZE
];

59 
	`mem£t
(
dis_dóuth_∑âîn
, 0, 
MAX_PATTERN_SIZE
);

60 
	`mem£t
(
dis_dóuth_mask
, 0, 
MAX_PATTERN_SIZE
);

91 
i
 = 0; i < 
MAX_PATTERN_MASK_SIZE
; i++)

92 
dis_dóuth_mask
[
i
] = 0xff;

95 
dis_dóuth_∑âîn
[
byã_˙t
] = 0xa0;

96 
byã_˙t
++;

99 
byã_˙t
 += 3;

105 
byã_˙t
 += 6;

108 
	`mem˝y
((
dis_dóuth_∑âîn
 + 
byã_˙t
), 
comm⁄
->
curbssid
, 
ETH_ALEN
);

110 
byã_˙t
 += 6;

113 
	`mem˝y
((
dis_dóuth_∑âîn
 + 
byã_˙t
), 
comm⁄
->
curbssid
, 
ETH_ALEN
);

116 
dis_dóuth_mask
[0] = 0xfe;

117 
dis_dóuth_mask
[1] = 0x03;

118 
dis_dóuth_mask
[2] = 0xc0;

120 
ªt
 = 
	`©h9k_hw_wow_≠∂y_∑âîn
(
ah
, 
dis_dóuth_∑âîn
, 
dis_dóuth_mask
,

121 
∑âîn_cou¡
, 
byã_˙t
);

122 i‡(
ªt
)

123 
exô
;

125 
∑âîn_cou¡
++;

130 
dis_dóuth_∑âîn
[0] = 0xC0;

132 
ªt
 = 
	`©h9k_hw_wow_≠∂y_∑âîn
(
ah
, 
dis_dóuth_∑âîn
, 
dis_dóuth_mask
,

133 
∑âîn_cou¡
, 
byã_˙t
);

134 
exô
:

135  
ªt
;

136 
	}
}

138 
	$©h9k_wow_add_∑âîn
(
©h_so·c
 *
sc
,

139 
cfg80211_wowœn
 *
wowœn
)

141 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

142 
cfg80211_pkt_∑âîn
 *
∑âîns
 = 
wowœn
->patterns;

143 
u8
 
wow_∑âîn
[
MAX_PATTERN_SIZE
];

144 
u8
 
wow_mask
[
MAX_PATTERN_SIZE
];

145 
mask_Àn
, 
ªt
 = 0;

146 
s8
 
i
 = 0;

148 
i
 = 0; i < 
wowœn
->
n_∑âîns
; i++) {

149 
mask_Àn
 = 
	`DIV_ROUND_UP
(
∑âîns
[
i
].
∑âîn_Àn
, 8);

150 
	`mem£t
(
wow_∑âîn
, 0, 
MAX_PATTERN_SIZE
);

151 
	`mem£t
(
wow_mask
, 0, 
MAX_PATTERN_SIZE
);

152 
	`mem˝y
(
wow_∑âîn
, 
∑âîns
[
i
].
∑âîn
,Ö©ã∫s[i].
∑âîn_Àn
);

153 
	`mem˝y
(
wow_mask
, 
∑âîns
[
i
].
mask
, 
mask_Àn
);

155 
ªt
 = 
	`©h9k_hw_wow_≠∂y_∑âîn
(
ah
,

156 
wow_∑âîn
,

157 
wow_mask
,

158 
i
 + 2,

159 
∑âîns
[
i
].
∑âîn_Àn
);

160 i‡(
ªt
)

164  
ªt
;

165 
	}
}

167 
	$©h9k_su•íd
(
õì80211_hw
 *
hw
,

168 
cfg80211_wowœn
 *
wowœn
)

170 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

171 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

172 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

173 
u8
 
åiggîs
;

174 
ªt
 = 0;

176 
	`©h9k_deöô_ch™√l_c⁄ãxt
(
sc
);

178 
	`muãx_lock
(&
sc
->
muãx
);

180 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
)) {

181 
	`©h_îr
(
comm⁄
, "DeviceÇotÖresent\n");

182 
ªt
 = -
ENODEV
;

183 
Áû_wow
;

186 i‡(
	`WARN_ON
(!
wowœn
)) {

187 
	`©h_îr
(
comm⁄
, "None ofÅhe WoWÅriggersÉnabled\n");

188 
ªt
 = -
EINVAL
;

189 
Áû_wow
;

192 i‡(
sc
->
cur_ch™
->
nvifs
 > 1) {

193 
	`©h_dbg
(
comm⁄
, 
WOW
, "WoW for multivif isÇot yet supported\n");

194 
ªt
 = 1;

195 
Áû_wow
;

198 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

199 i‡(
	`ã°_bô
(
ATH_OP_MULTI_CHANNEL
, &
comm⁄
->
›_Êags
)) {

200 
	`©h_dbg
(
comm⁄
, 
WOW
,

202 
ªt
 = 1;

203 
Áû_wow
;

207 i‡(!
	`ã°_bô
(
ATH_OP_PRIM_STA_VIF
, &
comm⁄
->
›_Êags
)) {

208 
	`©h_dbg
(
comm⁄
, 
WOW
, "None ofÅhe STA vifsáreássociated\n");

209 
ªt
 = 1;

210 
Áû_wow
;

213 
åiggîs
 = 
	`©h9k_wow_m≠_åiggîs
(
sc
, 
wowœn
);

214 i‡(!
åiggîs
) {

215 
	`©h_dbg
(
comm⁄
, 
WOW
, "No valid WoWÅriggers\n");

216 
ªt
 = 1;

217 
Áû_wow
;

220 
	`©h_ˇn˚l_w‹k
(
sc
);

221 
	`©h_°›_™i
(
sc
);

223 
	`©h9k_ps_wakeup
(
sc
);

225 
	`©h9k_°›_btc€x
(
sc
);

231 
ªt
 = 
	`©h9k_wow_add_dißssoc_dóuth_∑âîn
(
sc
);

232 i‡(
ªt
) {

233 
	`©h_îr
(
comm⁄
,

234 "U«bÀÅÿadd dißssoc/dóuthÖ©ã∫: %d\n", 
ªt
);

235 
Áû_wow
;

238 i‡(
åiggîs
 & 
AH_WOW_USER_PATTERN_EN
) {

239 
ªt
 = 
	`©h9k_wow_add_∑âîn
(
sc
, 
wowœn
);

240 i‡(
ªt
) {

241 
	`©h_îr
(
comm⁄
,

242 "U«bÀÅÿadd u£∏∑âîn: %d\n", 
ªt
);

243 
Áû_wow
;

247 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

253 
sc
->
wow_öå_bef‹e_¶ìp
 = 
ah
->
imask
;

254 
ah
->
imask
 &~
ATH9K_INT_GLOBAL
;

255 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

256 
ah
->
imask
 = 
ATH9K_INT_BMISS
 | 
ATH9K_INT_GLOBAL
;

257 
	`©h9k_hw_£t_öãºu±s
(
ah
);

258 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

260 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

266 
	`synchr⁄ize_úq
(
sc
->
úq
);

267 
	`èskÀt_kûl
(&
sc
->
öå_tq
);

269 
	`©h9k_hw_wow_íabÀ
(
ah
, 
åiggîs
);

271 
	`©h9k_ps_ª°‹e
(
sc
);

272 
	`©h_dbg
(
comm⁄
, 
WOW
, "Su•íd wôh WoWÅriggîs: 0x%x\n", 
åiggîs
);

274 
	`£t_bô
(
ATH_OP_WOW_ENABLED
, &
comm⁄
->
›_Êags
);

275 
Áû_wow
:

276 
	`muãx_u∆ock
(&
sc
->
muãx
);

277  
ªt
;

278 
	}
}

280 
	$©h9k_ªsume
(
õì80211_hw
 *
hw
)

282 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

283 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

284 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

285 
u8
 
°©us
;

287 
	`muãx_lock
(&
sc
->
muãx
);

289 
	`©h9k_ps_wakeup
(
sc
);

291 
	`•ö_lock_bh
(&
sc
->
sc_pcu_lock
);

293 
	`©h9k_hw_dißbÀ_öãºu±s
(
ah
);

294 
ah
->
imask
 = 
sc
->
wow_öå_bef‹e_¶ìp
;

295 
	`©h9k_hw_£t_öãºu±s
(
ah
);

296 
	`©h9k_hw_íabÀ_öãºu±s
(
ah
);

298 
	`•ö_u∆ock_bh
(&
sc
->
sc_pcu_lock
);

300 
°©us
 = 
	`©h9k_hw_wow_wakeup
(
ah
);

301 
	`©h_dbg
(
comm⁄
, 
WOW
, "Resumêwôh WoW sètus: 0x%x\n", 
°©us
);

303 
	`©h_ª°¨t_w‹k
(
sc
);

304 
	`©h9k_°¨t_btc€x
(
sc
);

306 
	`˛ór_bô
(
ATH_OP_WOW_ENABLED
, &
comm⁄
->
›_Êags
);

308 
	`©h9k_ps_ª°‹e
(
sc
);

309 
	`muãx_u∆ock
(&
sc
->
muãx
);

312 
	}
}

314 
	$©h9k_£t_wakeup
(
õì80211_hw
 *
hw
, 
boﬁ
 
íabÀd
)

316 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

317 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

319 
	`muãx_lock
(&
sc
->
muãx
);

320 
	`devi˚_£t_wakeup_íabÀ
(
sc
->
dev
, 
íabÀd
);

321 
	`muãx_u∆ock
(&
sc
->
muãx
);

323 
	`©h_dbg
(
comm⁄
, 
WOW
, "WoW wakeup source is %s\n",

324 (
íabÀd
) ? "enabled" : "disabled");

325 
	}
}

327 
	$©h9k_öô_wow
(
õì80211_hw
 *
hw
)

329 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

330 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

332 i‡((
sc
->
drivî_d©a
 & 
ATH9K_PCI_WOW
Ë|| sc->
f‹˚_wow
) {

333 i‡(
	`AR_SREV_9462_20_OR_LATER
(
ah
Ë|| 
	`AR_SREV_9565_11_OR_LATER
(ah))

334 
hw
->
wùhy
->
wowœn
 = &
©h9k_wowœn_suµ‹t
;

336 
hw
->
wùhy
->
wowœn
 = &
©h9k_wowœn_suµ‹t_Àgacy
;

338 
	`devi˚_öô_wakeup
(
sc
->
dev
, 1);

340 
	}
}

342 
	$©h9k_deöô_wow
(
õì80211_hw
 *
hw
)

344 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

346 i‡((
sc
->
drivî_d©a
 & 
ATH9K_PCI_WOW
Ë|| sc->
f‹˚_wow
)

347 
	`devi˚_öô_wakeup
(
sc
->
dev
, 0);

348 
	}
}

	@xmit.c

17 
	~<löux/dma-m≠pög.h
>

18 
	~"©h9k.h
"

19 
	~"¨9003_mac.h
"

21 
	#BITS_PER_BYTE
 8

	)

22 
	#OFDM_PLCP_BITS
 22

	)

23 
	#HT_RC_2_STREAMS
(
_rc
Ë((((_rcË& 0x78Ë>> 3Ë+ 1)

	)

24 
	#L_STF
 8

	)

25 
	#L_LTF
 8

	)

26 
	#L_SIG
 4

	)

27 
	#HT_SIG
 8

	)

28 
	#HT_STF
 4

	)

29 
	#HT_LTF
(
_ns
Ë(4 * (_ns))

	)

30 
	#SYMBOL_TIME
(
_ns
Ë((_nsË<< 2Ë

	)

31 
	#SYMBOL_TIME_HALFGI
(
_ns
Ë(((_nsË* 18 + 4Ë/ 5Ë

	)

32 
	#TIME_SYMBOLS
(
t
Ë(—Ë>> 2)

	)

33 
	#TIME_SYMBOLS_HALFGI
(
t
Ë((—Ë* 5 - 4Ë/ 18)

	)

34 
	#NUM_SYMBOLS_PER_USEC
(
_u£c
Ë(_u£¯>> 2)

	)

35 
	#NUM_SYMBOLS_PER_USEC_HALFGI
(
_u£c
Ë(((_u£c*5)-4)/18)

	)

38 
u16
 
	gbôs_≥r_symbﬁ
[][2] = {

50 
©h_tx_£nd_n‹mÆ
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

51 
©h_©x_tid
 *
tid
, 
sk_buff
 *
skb
);

52 
©h_tx_com∂ëe
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
,

53 
tx_Êags
, 
©h_txq
 *
txq
);

54 
©h_tx_com∂ëe_buf
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

55 
©h_txq
 *
txq
, 
li°_hód
 *
bf_q
,

56 
©h_tx_°©us
 *
ts
, 
txok
);

57 
©h_tx_txqaddbuf
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

58 
li°_hód
 *
hód
, 
boﬁ
 
öã∫Æ
);

59 
©h_tx_rc_°©us
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

60 
©h_tx_°©us
 *
ts
, 
n‰ames
, 
nbad
,

61 
txok
);

62 
©h_tx_upd©e_baw
(
©h_so·c
 *
sc
, 
©h_©x_tid
 *
tid
,

63 
£qno
);

64 
©h_buf
 *
©h_tx_£tup_buf„r
(
©h_so·c
 *
sc
,

65 
©h_txq
 *
txq
,

66 
©h_©x_tid
 *
tid
,

67 
sk_buff
 *
skb
);

70 
	mMCS_HT20
,

71 
	mMCS_HT20_SGI
,

72 
	mMCS_HT40
,

73 
	mMCS_HT40_SGI
,

80 
	$©h_txq_lock
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

81 
	`__acquúes
(&
txq
->
axq_lock
)

83 
	`•ö_lock_bh
(&
txq
->
axq_lock
);

84 
	}
}

86 
	$©h_txq_u∆ock
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

87 
	`__ªÀa£s
(&
txq
->
axq_lock
)

89 
	`•ö_u∆ock_bh
(&
txq
->
axq_lock
);

90 
	}
}

92 
	$©h_txq_u∆ock_com∂ëe
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

93 
	`__ªÀa£s
(&
txq
->
axq_lock
)

95 
sk_buff_hód
 
q
;

96 
sk_buff
 *
skb
;

98 
	`__skb_queue_hód_öô
(&
q
);

99 
	`skb_queue_•li˚_öô
(&
txq
->
com∂ëe_q
, &
q
);

100 
	`•ö_u∆ock_bh
(&
txq
->
axq_lock
);

102 (
skb
 = 
	`__skb_dequeue
(&
q
)))

103 
	`õì80211_tx_°©us
(
sc
->
hw
, 
skb
);

104 
	}
}

106 
	$©h_tx_queue_tid
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

107 
©h_©x_tid
 *
tid
)

109 
li°_hód
 *
li°
;

110 
©h_vif
 *
avp
 = (©h_vi‡*Ë
tid
->
™
->
vif
->
drv_¥iv
;

111 
©h_ch™˘x
 *
˘x
 = 
avp
->
ch™˘x
;

113 i‡(!
˘x
)

116 
li°
 = &
˘x
->
acq
[
	`TID_TO_WME_AC
(
tid
->
tidno
)];

117 i‡(
	`li°_em±y
(&
tid
->
li°
))

118 
	`li°_add_èû
(&
tid
->
li°
,Üist);

119 
	}
}

121 
©h_‰ame_öfo
 *
	$gë_‰ame_öfo
(
sk_buff
 *
skb
)

123 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

124 
	`BUILD_BUG_ON
((
©h_‰ame_öfo
) >

125 (
tx_öfo
->
øã_drivî_d©a
));

126  (
©h_‰ame_öfo
 *Ë&
tx_öfo
->
øã_drivî_d©a
[0];

127 
	}
}

129 
	$©h_£nd_b¨
(
©h_©x_tid
 *
tid
, 
u16
 
£qno
)

131 i‡(!
tid
->
™
->
°a
)

134 
	`õì80211_£nd_b¨
(
tid
->
™
->
vif
,Åid->™->
°a
->
addr
,Åid->
tidno
,

135 
£qno
 << 
IEEE80211_SEQ_SEQ_SHIFT
);

136 
	}
}

138 
	$©h_£t_øãs
(
õì80211_vif
 *
vif
, 
õì80211_°a
 *
°a
,

139 
©h_buf
 *
bf
)

141 
	`õì80211_gë_tx_øãs
(
vif
, 
°a
, 
bf
->
bf_mpdu
, bf->
øãs
,

142 
	`ARRAY_SIZE
(
bf
->
øãs
));

143 
	}
}

145 
	$©h_txq_skb_d⁄e
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

146 
sk_buff
 *
skb
)

148 
õì80211_tx_öfo
 *
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

149 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

150 
q
 = 
fi
->
txq
;

152 i‡(
q
 < 0)

155 
txq
 = 
sc
->
tx
.
txq_m≠
[
q
];

156 i‡(
	`WARN_ON
(--
txq
->
≥ndög_‰ames
 < 0))

157 
txq
->
≥ndög_‰ames
 = 0;

159 i‡(
txq
->
°›≥d
 &&

160 
txq
->
≥ndög_‰ames
 < 
sc
->
tx
.
txq_max_≥ndög
[
q
]) {

161 i‡(
	`©h9k_is_ch™˘x_íabÀd
())

162 
	`õì80211_wake_queue
(
sc
->
hw
, 
öfo
->
hw_queue
);

164 
	`õì80211_wake_queue
(
sc
->
hw
, 
q
);

165 
txq
->
°›≥d
 = 
Ál£
;

167 
	}
}

169 
©h_©x_tid
 *

170 
	$©h_gë_skb_tid
(
©h_so·c
 *
sc
, 
©h_node
 *
™
, 
sk_buff
 *
skb
)

172 
u8
 
tidno
 = 
skb
->
¥i‹ôy
 & 
IEEE80211_QOS_CTL_TID_MASK
;

173  
	`ATH_AN_2_TID
(
™
, 
tidno
);

174 
	}
}

176 
boﬁ
 
	$©h_tid_has_buf„ªd
(
©h_©x_tid
 *
tid
)

178  !
	`skb_queue_em±y
(&
tid
->
buf_q
Ë|| !skb_queue_em±y(&tid->
ªåy_q
);

179 
	}
}

181 
sk_buff
 *
	$©h_tid_dequeue
(
©h_©x_tid
 *
tid
)

183 
sk_buff
 *
skb
;

185 
skb
 = 
	`__skb_dequeue
(&
tid
->
ªåy_q
);

186 i‡(!
skb
)

187 
skb
 = 
	`__skb_dequeue
(&
tid
->
buf_q
);

189  
skb
;

190 
	}
}

198 
	$©h_tx_tid_ch™ge_°©e
(
©h_so·c
 *
sc
, 
©h_©x_tid
 *
tid
)

200 
©h_txq
 *
txq
 = 
tid
->txq;

201 
õì80211_tx_öfo
 *
tx_öfo
;

202 
sk_buff
 *
skb
, *
tskb
;

203 
©h_buf
 *
bf
;

204 
©h_‰ame_öfo
 *
fi
;

206 
	`skb_queue_wÆk_ß„
(&
tid
->
buf_q
, 
skb
, 
tskb
) {

207 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

208 
bf
 = 
fi
->bf;

210 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

211 
tx_öfo
->
Êags
 &~
IEEE80211_TX_CTL_AMPDU
;

213 i‡(
bf
)

216 
bf
 = 
	`©h_tx_£tup_buf„r
(
sc
, 
txq
, 
tid
, 
skb
);

217 i‡(!
bf
) {

218 
	`__skb_u∆ök
(
skb
, &
tid
->
buf_q
);

219 
	`©h_txq_skb_d⁄e
(
sc
, 
txq
, 
skb
);

220 
	`õì80211_‰ì_txskb
(
sc
->
hw
, 
skb
);

225 
	}
}

227 
	$©h_tx_Êush_tid
(
©h_so·c
 *
sc
, 
©h_©x_tid
 *
tid
)

229 
©h_txq
 *
txq
 = 
tid
->txq;

230 
sk_buff
 *
skb
;

231 
©h_buf
 *
bf
;

232 
li°_hód
 
bf_hód
;

233 
©h_tx_°©us
 
ts
;

234 
©h_‰ame_öfo
 *
fi
;

235 
boﬁ
 
£ndb¨
 = 
Ál£
;

237 
	`INIT_LIST_HEAD
(&
bf_hód
);

239 
	`mem£t
(&
ts
, 0, (ts));

241 (
skb
 = 
	`__skb_dequeue
(&
tid
->
ªåy_q
))) {

242 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

243 
bf
 = 
fi
->bf;

244 i‡(!
bf
) {

245 
	`©h_txq_skb_d⁄e
(
sc
, 
txq
, 
skb
);

246 
	`õì80211_‰ì_txskb
(
sc
->
hw
, 
skb
);

250 i‡(
fi
->
baw_åacked
) {

251 
	`©h_tx_upd©e_baw
(
sc
, 
tid
, 
bf
->
bf_°©e
.
£qno
);

252 
£ndb¨
 = 
åue
;

255 
	`li°_add_èû
(&
bf
->
li°
, &
bf_hód
);

256 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
, &
bf_hód
, &
ts
, 0);

259 i‡(
£ndb¨
) {

260 
	`©h_txq_u∆ock
(
sc
, 
txq
);

261 
	`©h_£nd_b¨
(
tid
,Åid->
£q_°¨t
);

262 
	`©h_txq_lock
(
sc
, 
txq
);

264 
	}
}

266 
	$©h_tx_upd©e_baw
(
©h_so·c
 *
sc
, 
©h_©x_tid
 *
tid
,

267 
£qno
)

269 
ödex
, 
cödex
;

271 
ödex
 = 
	`ATH_BA_INDEX
(
tid
->
£q_°¨t
, 
£qno
);

272 
cödex
 = (
tid
->
baw_hód
 + 
ödex
Ë& (
ATH_TID_MAX_BUFS
 - 1);

274 
	`__˛ór_bô
(
cödex
, 
tid
->
tx_buf
);

276 
tid
->
baw_hód
 !tid->
baw_èû
 && !
	`ã°_bô
—id->baw_hód,Åid->
tx_buf
)) {

277 
	`INCR
(
tid
->
£q_°¨t
, 
IEEE80211_SEQ_MAX
);

278 
	`INCR
(
tid
->
baw_hód
, 
ATH_TID_MAX_BUFS
);

279 i‡(
tid
->
b¨_ödex
 >= 0)

280 
tid
->
b¨_ödex
--;

282 
	}
}

284 
	$©h_tx_addto_baw
(
©h_so·c
 *
sc
, 
©h_©x_tid
 *
tid
,

285 
©h_buf
 *
bf
)

287 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
bf
->
bf_mpdu
);

288 
u16
 
£qno
 = 
bf
->
bf_°©e
.seqno;

289 
ödex
, 
cödex
;

291 
ödex
 = 
	`ATH_BA_INDEX
(
tid
->
£q_°¨t
, 
£qno
);

292 
cödex
 = (
tid
->
baw_hód
 + 
ödex
Ë& (
ATH_TID_MAX_BUFS
 - 1);

293 
	`__£t_bô
(
cödex
, 
tid
->
tx_buf
);

294 
fi
->
baw_åacked
 = 1;

296 i‡(
ödex
 >((
tid
->
baw_èû
 -Åid->
baw_hód
) &

297 (
ATH_TID_MAX_BUFS
 - 1))) {

298 
tid
->
baw_èû
 = 
cödex
;

299 
	`INCR
(
tid
->
baw_èû
, 
ATH_TID_MAX_BUFS
);

301 
	}
}

303 
	$©h_tid_døö
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

304 
©h_©x_tid
 *
tid
)

307 
sk_buff
 *
skb
;

308 
©h_buf
 *
bf
;

309 
li°_hód
 
bf_hód
;

310 
©h_tx_°©us
 
ts
;

311 
©h_‰ame_öfo
 *
fi
;

313 
	`mem£t
(&
ts
, 0, (ts));

314 
	`INIT_LIST_HEAD
(&
bf_hód
);

316 (
skb
 = 
	`©h_tid_dequeue
(
tid
))) {

317 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

318 
bf
 = 
fi
->bf;

320 i‡(!
bf
) {

321 
	`©h_tx_com∂ëe
(
sc
, 
skb
, 
ATH_TX_ERROR
, 
txq
);

325 
	`li°_add_èû
(&
bf
->
li°
, &
bf_hód
);

326 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
, &
bf_hód
, &
ts
, 0);

328 
	}
}

330 
	$©h_tx_£t_ªåy
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

331 
sk_buff
 *
skb
, 
cou¡
)

333 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

334 
©h_buf
 *
bf
 = 
fi
->bf;

335 
õì80211_hdr
 *
hdr
;

336 
¥ev
 = 
fi
->
ªåõs
;

338 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
a_ªåõs
);

339 
fi
->
ªåõs
 +
cou¡
;

341 i‡(
¥ev
 > 0)

344 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

345 
hdr
->
‰ame_c⁄åﬁ
 |
	`˝u_to_À16
(
IEEE80211_FCTL_RETRY
);

346 
	`dma_sync_sögÀ_f‹_devi˚
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

347 (*
hdr
), 
DMA_TO_DEVICE
);

348 
	}
}

350 
©h_buf
 *
	$©h_tx_gë_buf„r
(
©h_so·c
 *
sc
)

352 
©h_buf
 *
bf
 = 
NULL
;

354 
	`•ö_lock_bh
(&
sc
->
tx
.
txbuÊock
);

356 i‡(
	`u∆ikñy
(
	`li°_em±y
(&
sc
->
tx
.
txbuf
))) {

357 
	`•ö_u∆ock_bh
(&
sc
->
tx
.
txbuÊock
);

358  
NULL
;

361 
bf
 = 
	`li°_fú°_íåy
(&
sc
->
tx
.
txbuf
, 
©h_buf
, 
li°
);

362 
	`li°_dñ
(&
bf
->
li°
);

364 
	`•ö_u∆ock_bh
(&
sc
->
tx
.
txbuÊock
);

366  
bf
;

367 
	}
}

369 
	$©h_tx_ªtu∫_buf„r
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
)

371 
	`•ö_lock_bh
(&
sc
->
tx
.
txbuÊock
);

372 
	`li°_add_èû
(&
bf
->
li°
, &
sc
->
tx
.
txbuf
);

373 
	`•ö_u∆ock_bh
(&
sc
->
tx
.
txbuÊock
);

374 
	}
}

376 
©h_buf
* 
	$©h_˛⁄e_txbuf
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
)

378 
©h_buf
 *
tbf
;

380 
tbf
 = 
	`©h_tx_gë_buf„r
(
sc
);

381 i‡(
	`WARN_ON
(!
tbf
))

382  
NULL
;

384 
	`ATH_TXBUF_RESET
(
tbf
);

386 
tbf
->
bf_mpdu
 = 
bf
->bf_mpdu;

387 
tbf
->
bf_buf_addr
 = 
bf
->bf_buf_addr;

388 
	`mem˝y
(
tbf
->
bf_desc
, 
bf
->bf_desc, 
sc
->
sc_ah
->
ˇps
.
tx_desc_Àn
);

389 
tbf
->
bf_°©e
 = 
bf
->bf_state;

390 
tbf
->
bf_°©e
.
°Æe
 = 
Ál£
;

392  
tbf
;

393 
	}
}

395 
	$©h_tx_cou¡_‰ames
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

396 
©h_tx_°©us
 *
ts
, 
txok
,

397 *
n‰ames
, *
nbad
)

399 
©h_‰ame_öfo
 *
fi
;

400 
u16
 
£q_°
 = 0;

401 
u32
 
ba
[
WME_BA_BMP_SIZE
 >> 5];

402 
ba_ödex
;

403 
ißggr
 = 0;

405 *
nbad
 = 0;

406 *
n‰ames
 = 0;

408 
ißggr
 = 
	`bf_ißggr
(
bf
);

409 i‡(
ißggr
) {

410 
£q_°
 = 
ts
->
ts_£qnum
;

411 
	`mem˝y
(
ba
, &
ts
->
ba_low
, 
WME_BA_BMP_SIZE
 >> 3);

414 
bf
) {

415 
fi
 = 
	`gë_‰ame_öfo
(
bf
->
bf_mpdu
);

416 
ba_ödex
 = 
	`ATH_BA_INDEX
(
£q_°
, 
bf
->
bf_°©e
.
£qno
);

418 (*
n‰ames
)++;

419 i‡(!
txok
 || (
ißggr
 && !
	`ATH_BA_ISSET
(
ba
, 
ba_ödex
)))

420 (*
nbad
)++;

422 
bf
 = bf->
bf_√xt
;

424 
	}
}

427 
	$©h_tx_com∂ëe_aggr
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

428 
©h_buf
 *
bf
, 
li°_hód
 *
bf_q
,

429 
©h_tx_°©us
 *
ts
, 
txok
)

431 
©h_node
 *
™
 = 
NULL
;

432 
sk_buff
 *
skb
;

433 
õì80211_°a
 *
°a
;

434 
õì80211_hw
 *
hw
 = 
sc
->hw;

435 
õì80211_hdr
 *
hdr
;

436 
õì80211_tx_öfo
 *
tx_öfo
;

437 
©h_©x_tid
 *
tid
 = 
NULL
;

438 
©h_buf
 *
bf_√xt
, *
bf_œ°
 = 
bf
->
bf_œ°bf
;

439 
li°_hód
 
bf_hód
;

440 
sk_buff_hód
 
bf_≥ndög
;

441 
u16
 
£q_°
 = 0, 
acked_˙t
 = 0, 
txÁû_˙t
 = 0, 
£q_fú°
;

442 
u32
 
ba
[
WME_BA_BMP_SIZE
 >> 5];

443 
ißggr
, 
txÁû
, 
tx≥ndög
, 
£ndb¨
 = 0, 
√edª£t
 = 0, 
nbad
 = 0;

444 
boﬁ
 
rc_upd©e
 = 
åue
, 
isba
;

445 
õì80211_tx_øã
 
øãs
[4];

446 
©h_‰ame_öfo
 *
fi
;

447 
n‰ames
;

448 
boﬁ
 
Êush
 = !!(
ts
->
ts_°©us
 & 
ATH9K_TX_FLUSH
);

449 
i
, 
ªåõs
;

450 
b¨_ödex
 = -1;

452 
skb
 = 
bf
->
bf_mpdu
;

453 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

455 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

457 
	`mem˝y
(
øãs
, 
bf
->rates, (rates));

459 
ªåõs
 = 
ts
->
ts_l⁄gªåy
 + 1;

460 
i
 = 0; i < 
ts
->
ts_øãödex
; i++)

461 
ªåõs
 +
øãs
[
i
].
cou¡
;

463 
	`rcu_ªad_lock
();

465 
°a
 = 
	`õì80211_föd_°a_by_iÁddr
(
hw
, 
hdr
->
addr1
, hdr->
addr2
);

466 i‡(!
°a
) {

467 
	`rcu_ªad_u∆ock
();

469 
	`INIT_LIST_HEAD
(&
bf_hód
);

470 
bf
) {

471 
bf_√xt
 = 
bf
->bf_next;

473 i‡(!
bf
->
bf_°©e
.
°Æe
 || 
bf_√xt
 !
NULL
)

474 
	`li°_move_èû
(&
bf
->
li°
, &
bf_hód
);

476 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
, &
bf_hód
, 
ts
, 0);

478 
bf
 = 
bf_√xt
;

483 
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

484 
tid
 = 
	`©h_gë_skb_tid
(
sc
, 
™
, 
skb
);

485 
£q_fú°
 = 
tid
->
£q_°¨t
;

486 
isba
 = 
ts
->
ts_Êags
 & 
ATH9K_TX_BA
;

496 i‡(
isba
 && 
tid
->
tidno
 !
ts
->tid)

497 
txok
 = 
Ál£
;

499 
ißggr
 = 
	`bf_ißggr
(
bf
);

500 
	`mem£t
(
ba
, 0, 
WME_BA_BMP_SIZE
 >> 3);

502 i‡(
ißggr
 && 
txok
) {

503 i‡(
ts
->
ts_Êags
 & 
ATH9K_TX_BA
) {

504 
£q_°
 = 
ts
->
ts_£qnum
;

505 
	`mem˝y
(
ba
, &
ts
->
ba_low
, 
WME_BA_BMP_SIZE
 >> 3);

514 i‡(
sc
->
sc_ah
->
›mode
 =
NL80211_IFTYPE_STATION
)

515 
√edª£t
 = 1;

519 
	`__skb_queue_hód_öô
(&
bf_≥ndög
);

521 
	`©h_tx_cou¡_‰ames
(
sc
, 
bf
, 
ts
, 
txok
, &
n‰ames
, &
nbad
);

522 
bf
) {

523 
u16
 
£qno
 = 
bf
->
bf_°©e
.seqno;

525 
txÁû
 = 
tx≥ndög
 = 
£ndb¨
 = 0;

526 
bf_√xt
 = 
bf
->bf_next;

528 
skb
 = 
bf
->
bf_mpdu
;

529 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

530 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

532 i‡(!
	`BAW_WITHIN
(
tid
->
£q_°¨t
,Åid->
baw_size
, 
£qno
) ||

533 !
tid
->
a˘ive
) {

538 
txÁû
 = 1;

539 } i‡(
	`ATH_BA_ISSET
(
ba
, 
	`ATH_BA_INDEX
(
£q_°
, 
£qno
))) {

542 
acked_˙t
++;

543 } i‡(!
ißggr
 && 
txok
) {

545 
acked_˙t
++;

546 } i‡(
Êush
) {

547 
tx≥ndög
 = 1;

548 } i‡(
fi
->
ªåõs
 < 
ATH_MAX_SW_RETRIES
) {

549 i‡(
txok
 || !
™
->
¶ìpög
)

550 
	`©h_tx_£t_ªåy
(
sc
, 
txq
, 
bf
->
bf_mpdu
,

551 
ªåõs
);

553 
tx≥ndög
 = 1;

555 
txÁû
 = 1;

556 
txÁû_˙t
++;

557 
b¨_ödex
 = 
	`max_t
(, bar_index,

558 
	`ATH_BA_INDEX
(
£q_fú°
, 
£qno
));

565 
	`INIT_LIST_HEAD
(&
bf_hód
);

566 i‡(
bf_√xt
 !
NULL
 || !
bf_œ°
->
bf_°©e
.
°Æe
)

567 
	`li°_move_èû
(&
bf
->
li°
, &
bf_hód
);

569 i‡(!
tx≥ndög
) {

574 
	`©h_tx_upd©e_baw
(
sc
, 
tid
, 
£qno
);

576 i‡(
rc_upd©e
 && (
acked_˙t
 =1 || 
txÁû_˙t
 == 1)) {

577 
	`mem˝y
(
tx_öfo
->
c⁄åﬁ
.
øãs
,Ñates, (rates));

578 
	`©h_tx_rc_°©us
(
sc
, 
bf
, 
ts
, 
n‰ames
, 
nbad
, 
txok
);

579 
rc_upd©e
 = 
Ál£
;

580 i‡(
bf
 =bf->
bf_œ°bf
)

581 
	`©h_dy«ck_ßm∂e_tx_ts
(
sc
->
sc_ah
,

582 
bf
->
bf_mpdu
,

583 
ts
);

586 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
, &
bf_hód
, 
ts
,

587 !
txÁû
);

589 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_STATUS_EOSP
) {

590 
tx_öfo
->
Êags
 &~
IEEE80211_TX_STATUS_EOSP
;

591 
	`õì80211_°a_eo•
(
°a
);

594 i‡(
bf
->
bf_√xt
 =
NULL
 && 
bf_œ°
->
bf_°©e
.
°Æe
) {

595 
©h_buf
 *
tbf
;

597 
tbf
 = 
	`©h_˛⁄e_txbuf
(
sc
, 
bf_œ°
);

603 i‡(!
tbf
) {

604 
	`©h_tx_upd©e_baw
(
sc
, 
tid
, 
£qno
);

606 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
,

607 &
bf_hód
, 
ts
, 0);

608 
b¨_ödex
 = 
	`max_t
(, bar_index,

609 
	`ATH_BA_INDEX
(
£q_fú°
, 
£qno
));

613 
fi
->
bf
 = 
tbf
;

620 
	`__skb_queue_èû
(&
bf_≥ndög
, 
skb
);

623 
bf
 = 
bf_√xt
;

627 i‡(!
	`skb_queue_em±y
(&
bf_≥ndög
)) {

628 i‡(
™
->
¶ìpög
)

629 
	`õì80211_°a_£t_buf„ªd
(
°a
, 
tid
->
tidno
, 
åue
);

631 
	`skb_queue_•li˚_èû
(&
bf_≥ndög
, &
tid
->
ªåy_q
);

632 i‡(!
™
->
¶ìpög
) {

633 
	`©h_tx_queue_tid
(
sc
, 
txq
, 
tid
);

635 i‡(
ts
->
ts_°©us
 & (
ATH9K_TXERR_FILT
 | 
ATH9K_TXERR_XRETRY
))

636 
tid
->
˛ór_ps_fûãr
 = 
åue
;

640 i‡(
b¨_ödex
 >= 0) {

641 
u16
 
b¨_£q
 = 
	`ATH_BA_INDEX2SEQ
(
£q_fú°
, 
b¨_ödex
);

643 i‡(
	`BAW_WITHIN
(
tid
->
£q_°¨t
,Åid->
baw_size
, 
b¨_£q
))

644 
tid
->
b¨_ödex
 = 
	`ATH_BA_INDEX
—id->
£q_°¨t
, 
b¨_£q
);

646 
	`©h_txq_u∆ock
(
sc
, 
txq
);

647 
	`©h_£nd_b¨
(
tid
, 
	`ATH_BA_INDEX2SEQ
(
£q_fú°
, 
b¨_ödex
 + 1));

648 
	`©h_txq_lock
(
sc
, 
txq
);

651 
	`rcu_ªad_u∆ock
();

653 i‡(
√edª£t
)

654 
	`©h9k_queue_ª£t
(
sc
, 
RESET_TYPE_TX_ERROR
);

655 
	}
}

657 
boﬁ
 
	$bf_is_ampdu_nŸ_¥obög
(
©h_buf
 *
bf
)

659 
õì80211_tx_öfo
 *
öfo
 = 
	`IEEE80211_SKB_CB
(
bf
->
bf_mpdu
);

660  
	`bf_ißmpdu
(
bf
Ë&& !(
öfo
->
Êags
 & 
IEEE80211_TX_CTL_RATE_CTRL_PROBE
);

661 
	}
}

663 
	$©h_tx_¥o˚ss_buf„r
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

664 
©h_tx_°©us
 *
ts
, 
©h_buf
 *
bf
,

665 
li°_hód
 *
bf_hód
)

667 
õì80211_tx_öfo
 *
öfo
;

668 
boﬁ
 
txok
, 
Êush
;

670 
txok
 = !(
ts
->
ts_°©us
 & 
ATH9K_TXERR_MASK
);

671 
Êush
 = !!(
ts
->
ts_°©us
 & 
ATH9K_TX_FLUSH
);

672 
txq
->
axq_tx_ö¥ogªss
 = 
Ál£
;

674 
txq
->
axq_dïth
--;

675 i‡(
	`bf_is_ampdu_nŸ_¥obög
(
bf
))

676 
txq
->
axq_ampdu_dïth
--;

678 
ts
->
duøti⁄
 = 
	`©h9k_hw_gë_duøti⁄
(
sc
->
sc_ah
, 
bf
->
bf_desc
,

679 
ts
->
ts_øãödex
);

680 i‡(!
	`bf_ißmpdu
(
bf
)) {

681 i‡(!
Êush
) {

682 
öfo
 = 
	`IEEE80211_SKB_CB
(
bf
->
bf_mpdu
);

683 
	`mem˝y
(
öfo
->
c⁄åﬁ
.
øãs
, 
bf
->rates,

684 (
öfo
->
c⁄åﬁ
.
øãs
));

685 
	`©h_tx_rc_°©us
(
sc
, 
bf
, 
ts
, 1, 
txok
 ? 0 : 1,Åxok);

686 
	`©h_dy«ck_ßm∂e_tx_ts
(
sc
->
sc_ah
, 
bf
->
bf_mpdu
, 
ts
);

688 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
, 
bf_hód
, 
ts
, 
txok
);

690 
	`©h_tx_com∂ëe_aggr
(
sc
, 
txq
, 
bf
, 
bf_hód
, 
ts
, 
txok
);

692 i‡(!
Êush
)

693 
	`©h_txq_scheduÀ
(
sc
, 
txq
);

694 
	}
}

696 
boﬁ
 
	$©h_lookup_Àgacy
(
©h_buf
 *
bf
)

698 
sk_buff
 *
skb
;

699 
õì80211_tx_öfo
 *
tx_öfo
;

700 
õì80211_tx_øã
 *
øãs
;

701 
i
;

703 
skb
 = 
bf
->
bf_mpdu
;

704 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

705 
øãs
 = 
tx_öfo
->
c⁄åﬁ
.rates;

707 
i
 = 0; i < 4; i++) {

708 i‡(!
øãs
[
i
].
cou¡
 ||Ñ©es[i].
idx
 < 0)

711 i‡(!(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_MCS
))

712  
åue
;

715  
Ál£
;

716 
	}
}

718 
u32
 
	$©h_lookup_øã
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

719 
©h_©x_tid
 *
tid
)

721 
sk_buff
 *
skb
;

722 
õì80211_tx_öfo
 *
tx_öfo
;

723 
õì80211_tx_øã
 *
øãs
;

724 
u32
 
max_4ms_‰amñí
, 
‰mÀn
;

725 
u16
 
aggr_limô
, 
bt_aggr_limô
, 
Àgacy
 = 0;

726 
q
 = 
tid
->
txq
->
mac80211_qnum
;

727 
i
;

729 
skb
 = 
bf
->
bf_mpdu
;

730 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

731 
øãs
 = 
bf
->rates;

737 
max_4ms_‰amñí
 = 
ATH_AMPDU_LIMIT_MAX
;

739 
i
 = 0; i < 4; i++) {

740 
modeidx
;

742 i‡(!
øãs
[
i
].
cou¡
)

745 i‡(!(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_MCS
)) {

746 
Àgacy
 = 1;

750 i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_40_MHZ_WIDTH
)

751 
modeidx
 = 
MCS_HT40
;

753 
modeidx
 = 
MCS_HT20
;

755 i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_SHORT_GI
)

756 
modeidx
++;

758 
‰mÀn
 = 
sc
->
tx
.
max_aggr_‰amñí
[
q
][
modeidx
][
øãs
[
i
].
idx
];

759 
max_4ms_‰amñí
 = 
	`mö
(max_4ms_‰amñí, 
‰mÀn
);

767 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_RATE_CTRL_PROBE
 || 
Àgacy
)

770 
aggr_limô
 = 
	`mö
(
max_4ms_‰amñí
, (
u32
)
ATH_AMPDU_LIMIT_MAX
);

775 
bt_aggr_limô
 = 
	`©h9k_btc€x_aggr_limô
(
sc
, 
max_4ms_‰amñí
);

776 i‡(
bt_aggr_limô
)

777 
aggr_limô
 = 
bt_aggr_limô
;

779 i‡(
tid
->
™
->
maxampdu
)

780 
aggr_limô
 = 
	`mö
◊ggr_limô, 
tid
->
™
->
maxampdu
);

782  
aggr_limô
;

783 
	}
}

789 
	$©h_compuã_num_dñims
(
©h_so·c
 *
sc
, 
©h_©x_tid
 *
tid
,

790 
©h_buf
 *
bf
, 
u16
 
‰mÀn
,

791 
boﬁ
 
fú°_sub‰m
)

793 
	#FIRST_DESC_NDELIMS
 60

	)

794 
u32
 
nsymbôs
, 
nsymbﬁs
;

795 
u16
 
möÀn
;

796 
u8
 
Êags
, 
rix
;

797 
width
, 
°ªams
, 
hÆf_gi
, 
ndñim
, 
mödñim
;

798 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
bf
->
bf_mpdu
);

801 
ndñim
 = 
	`ATH_AGGR_GET_NDELIM
(
‰mÀn
);

809 i‡((
fi
->
keyix
 !
ATH9K_TXKEYIX_INVALID
) &&

810 !(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
))

811 
ndñim
 +
ATH_AGGR_ENCRYPTDELIM
;

817 i‡(
fú°_sub‰m
 && !
	`AR_SREV_9580_10_OR_LATER
(
sc
->
sc_ah
) &&

818 (
sc
->
sc_ah
->
ít_mode
 & 
AR_ENT_OTP_MIN_PKT_SIZE_DISABLE
))

819 
ndñim
 = 
	`max
“dñim, 
FIRST_DESC_NDELIMS
);

831 i‡(
tid
->
™
->
mpdudísôy
 == 0)

832  
ndñim
;

834 
rix
 = 
bf
->
øãs
[0].
idx
;

835 
Êags
 = 
bf
->
øãs
[0].flags;

836 
width
 = (
Êags
 & 
IEEE80211_TX_RC_40_MHZ_WIDTH
) ? 1 : 0;

837 
hÆf_gi
 = (
Êags
 & 
IEEE80211_TX_RC_SHORT_GI
) ? 1 : 0;

839 i‡(
hÆf_gi
)

840 
nsymbﬁs
 = 
	`NUM_SYMBOLS_PER_USEC_HALFGI
(
tid
->
™
->
mpdudísôy
);

842 
nsymbﬁs
 = 
	`NUM_SYMBOLS_PER_USEC
(
tid
->
™
->
mpdudísôy
);

844 i‡(
nsymbﬁs
 == 0)

845 
nsymbﬁs
 = 1;

847 
°ªams
 = 
	`HT_RC_2_STREAMS
(
rix
);

848 
nsymbôs
 = 
bôs_≥r_symbﬁ
[
rix
 % 8][
width
] * 
°ªams
;

849 
möÀn
 = (
nsymbﬁs
 * 
nsymbôs
Ë/ 
BITS_PER_BYTE
;

851 i‡(
‰mÀn
 < 
möÀn
) {

852 
mödñim
 = (
möÀn
 - 
‰mÀn
Ë/ 
ATH_AGGR_DELIM_SZ
;

853 
ndñim
 = 
	`max
(
mödñim
,Çdelim);

856  
ndñim
;

857 
	}
}

859 
©h_buf
 *

860 
	$©h_tx_gë_tid_sub‰ame
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

861 
©h_©x_tid
 *
tid
, 
sk_buff_hód
 **
q
)

863 
õì80211_tx_öfo
 *
tx_öfo
;

864 
©h_‰ame_öfo
 *
fi
;

865 
sk_buff
 *
skb
;

866 
©h_buf
 *
bf
;

867 
u16
 
£qno
;

870 *
q
 = &
tid
->
ªåy_q
;

871 i‡(
	`skb_queue_em±y
(*
q
))

872 *
q
 = &
tid
->
buf_q
;

874 
skb
 = 
	`skb_≥ek
(*
q
);

875 i‡(!
skb
)

878 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

879 
bf
 = 
fi
->bf;

880 i‡(!
fi
->
bf
)

881 
bf
 = 
	`©h_tx_£tup_buf„r
(
sc
, 
txq
, 
tid
, 
skb
);

883 
bf
->
bf_°©e
.
°Æe
 = 
Ál£
;

885 i‡(!
bf
) {

886 
	`__skb_u∆ök
(
skb
, *
q
);

887 
	`©h_txq_skb_d⁄e
(
sc
, 
txq
, 
skb
);

888 
	`õì80211_‰ì_txskb
(
sc
->
hw
, 
skb
);

892 
bf
->
bf_√xt
 = 
NULL
;

893 
bf
->
bf_œ°bf
 = bf;

895 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

896 
tx_öfo
->
Êags
 &~
IEEE80211_TX_CTL_CLEAR_PS_FILT
;

903 i‡(!
tid
->
a˘ive
)

904 
tx_öfo
->
Êags
 &~
IEEE80211_TX_CTL_AMPDU
;

906 i‡(!(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
)) {

907 
bf
->
bf_°©e
.
bf_ty≥
 = 0;

908  
bf
;

911 
bf
->
bf_°©e
.
bf_ty≥
 = 
BUF_AMPDU
 | 
BUF_AGGR
;

912 
£qno
 = 
bf
->
bf_°©e
.seqno;

915 i‡(!
	`BAW_WITHIN
(
tid
->
£q_°¨t
,Åid->
baw_size
, 
£qno
))

918 i‡(
tid
->
b¨_ödex
 > 
	`ATH_BA_INDEX
—id->
£q_°¨t
, 
£qno
)) {

919 
©h_tx_°©us
 
ts
 = {};

920 
li°_hód
 
bf_hód
;

922 
	`INIT_LIST_HEAD
(&
bf_hód
);

923 
	`li°_add
(&
bf
->
li°
, &
bf_hód
);

924 
	`__skb_u∆ök
(
skb
, *
q
);

925 
	`©h_tx_upd©e_baw
(
sc
, 
tid
, 
£qno
);

926 
	`©h_tx_com∂ëe_buf
(
sc
, 
bf
, 
txq
, &
bf_hód
, &
ts
, 0);

930  
bf
;

933  
NULL
;

934 
	}
}

936 
boﬁ


937 
	$©h_tx_f‹m_aggr
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

938 
©h_©x_tid
 *
tid
, 
li°_hód
 *
bf_q
,

939 
©h_buf
 *
bf_fú°
, 
sk_buff_hód
 *
tid_q
,

940 *
aggr_Àn
)

942 
	#PADBYTES
(
_Àn
Ë((4 - ((_ÀnË% 4)Ë% 4)

	)

943 
©h_buf
 *
bf
 = 
bf_fú°
, *
bf_¥ev
 = 
NULL
;

944 
n‰ames
 = 0, 
ndñim
;

945 
u16
 
aggr_limô
 = 0, 
Æ
 = 0, 
b∑d
 = 0,

946 
Æ_dñè
, 
h_baw
 = 
tid
->
baw_size
 / 2;

947 
õì80211_tx_öfo
 *
tx_öfo
;

948 
©h_‰ame_öfo
 *
fi
;

949 
sk_buff
 *
skb
;

950 
boﬁ
 
˛o£d
 = 
Ál£
;

952 
bf
 = 
bf_fú°
;

953 
aggr_limô
 = 
	`©h_lookup_øã
(
sc
, 
bf
, 
tid
);

956 
skb
 = 
bf
->
bf_mpdu
;

957 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

960 
Æ_dñè
 = 
ATH_AGGR_DELIM_SZ
 + 
fi
->
‰amñí
;

961 i‡(
n‰ames
) {

962 i‡(
aggr_limô
 < 
Æ
 + 
b∑d
 + 
Æ_dñè
 ||

963 
	`©h_lookup_Àgacy
(
bf
Ë|| 
n‰ames
 >
h_baw
)

966 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
bf
->
bf_mpdu
);

967 i‡((
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_RATE_CTRL_PROBE
) ||

968 !(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
))

973 
Æ
 +
b∑d
 + 
Æ_dñè
;

979 
ndñim
 = 
	`©h_compuã_num_dñims
(
sc
, 
tid
, 
bf_fú°
, 
fi
->
‰amñí
,

980 !
n‰ames
);

981 
b∑d
 = 
	`PADBYTES
(
Æ_dñè
Ë+ (
ndñim
 << 2);

983 
n‰ames
++;

984 
bf
->
bf_√xt
 = 
NULL
;

987 i‡(!
fi
->
baw_åacked
)

988 
	`©h_tx_addto_baw
(
sc
, 
tid
, 
bf
);

989 
bf
->
bf_°©e
.
ndñim
 =Çdelim;

991 
	`__skb_u∆ök
(
skb
, 
tid_q
);

992 
	`li°_add_èû
(&
bf
->
li°
, 
bf_q
);

993 i‡(
bf_¥ev
)

994 
bf_¥ev
->
bf_√xt
 = 
bf
;

996 
bf_¥ev
 = 
bf
;

998 
bf
 = 
	`©h_tx_gë_tid_sub‰ame
(
sc
, 
txq
, 
tid
, &
tid_q
);

999 i‡(!
bf
) {

1000 
˛o£d
 = 
åue
;

1003 } 
	`©h_tid_has_buf„ªd
(
tid
));

1005 
bf
 = 
bf_fú°
;

1006 
bf
->
bf_œ°bf
 = 
bf_¥ev
;

1008 i‡(
bf
 =
bf_¥ev
) {

1009 
Æ
 = 
	`gë_‰ame_öfo
(
bf
->
bf_mpdu
)->
‰amñí
;

1010 
bf
->
bf_°©e
.
bf_ty≥
 = 
BUF_AMPDU
;

1012 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
a_aggr
);

1015 *
aggr_Àn
 = 
Æ
;

1017  
˛o£d
;

1018 #unde‡
PADBYTES


1019 
	}
}

1027 
u32
 
	$©h_pkt_duøti⁄
(
©h_so·c
 *
sc
, 
u8
 
rix
, 
pkéí
,

1028 
width
, 
hÆf_gi
, 
boﬁ
 
sh‹tPªambÀ
)

1030 
u32
 
nbôs
, 
nsymbôs
, 
duøti⁄
, 
nsymbﬁs
;

1031 
°ªams
;

1034 
°ªams
 = 
	`HT_RC_2_STREAMS
(
rix
);

1035 
nbôs
 = (
pkéí
 << 3Ë+ 
OFDM_PLCP_BITS
;

1036 
nsymbôs
 = 
bôs_≥r_symbﬁ
[
rix
 % 8][
width
] * 
°ªams
;

1037 
nsymbﬁs
 = (
nbôs
 + 
nsymbôs
 - 1) /Çsymbits;

1039 i‡(!
hÆf_gi
)

1040 
duøti⁄
 = 
	`SYMBOL_TIME
(
nsymbﬁs
);

1042 
duøti⁄
 = 
	`SYMBOL_TIME_HALFGI
(
nsymbﬁs
);

1045 
duøti⁄
 +
L_STF
 + 
L_LTF
 + 
L_SIG
 + 
HT_SIG
 + 
HT_STF
 + 
	`HT_LTF
(
°ªams
);

1047  
duøti⁄
;

1048 
	}
}

1050 
	$©h_max_‰amñí
(
u£c
, 
mcs
, 
boﬁ
 
ht40
, boﬁ 
sgi
)

1052 
°ªams
 = 
	`HT_RC_2_STREAMS
(
mcs
);

1053 
symbﬁs
, 
bôs
;

1054 
byãs
 = 0;

1056 
u£c
 -
L_STF
 + 
L_LTF
 + 
L_SIG
 + 
HT_SIG
 + 
HT_STF
 + 
	`HT_LTF
(
°ªams
);

1057 
symbﬁs
 = 
sgi
 ? 
	`TIME_SYMBOLS_HALFGI
(
u£c
Ë: 
	`TIME_SYMBOLS
(usec);

1058 
bôs
 = 
symbﬁs
 * 
bôs_≥r_symbﬁ
[
mcs
 % 8][
ht40
] * 
°ªams
;

1059 
bôs
 -
OFDM_PLCP_BITS
;

1060 
byãs
 = 
bôs
 / 8;

1061 i‡(
byãs
 > 65532)

1062 
byãs
 = 65532;

1064  
byãs
;

1065 
	}
}

1067 
	$©h_upd©e_max_aggr_‰amñí
(
©h_so·c
 *
sc
, 
queue
, 
tx›
)

1069 
u16
 *
cur_ht20
, *
cur_ht20_sgi
, *
cur_ht40
, *
cur_ht40_sgi
;

1070 
mcs
;

1073 i‡(!
tx›
 ||Åxop > 4096)

1074 
tx›
 = 4096;

1076 
cur_ht20
 = 
sc
->
tx
.
max_aggr_‰amñí
[
queue
][
MCS_HT20
];

1077 
cur_ht20_sgi
 = 
sc
->
tx
.
max_aggr_‰amñí
[
queue
][
MCS_HT20_SGI
];

1078 
cur_ht40
 = 
sc
->
tx
.
max_aggr_‰amñí
[
queue
][
MCS_HT40
];

1079 
cur_ht40_sgi
 = 
sc
->
tx
.
max_aggr_‰amñí
[
queue
][
MCS_HT40_SGI
];

1080 
mcs
 = 0; mcs < 32; mcs++) {

1081 
cur_ht20
[
mcs
] = 
	`©h_max_‰amñí
(
tx›
, mcs, 
Ál£
, false);

1082 
cur_ht20_sgi
[
mcs
] = 
	`©h_max_‰amñí
(
tx›
, mcs, 
Ál£
, 
åue
);

1083 
cur_ht40
[
mcs
] = 
	`©h_max_‰amñí
(
tx›
, mcs, 
åue
, 
Ál£
);

1084 
cur_ht40_sgi
[
mcs
] = 
	`©h_max_‰amñí
(
tx›
, mcs, 
åue
,Årue);

1086 
	}
}

1088 
u8
 
	$©h_gë_øã_txpowî
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

1089 
u8
 
øãidx
, 
boﬁ
 
is_40
, boﬁ 
is_cck
)

1091 
u8
 
max_powî
;

1092 
sk_buff
 *
skb
;

1093 
©h_‰ame_öfo
 *
fi
;

1094 
õì80211_tx_öfo
 *
öfo
;

1095 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1097 i‡(
sc
->
tx99_°©e
 || !
ah
->
çc_íabÀd
)

1098  
MAX_RATE_POWER
;

1100 
skb
 = 
bf
->
bf_mpdu
;

1101 
fi
 = 
	`gë_‰ame_öfo
(
skb
);

1102 
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

1104 i‡(!
	`AR_SREV_9300_20_OR_LATER
(
ah
)) {

1105 
txpowî
 = 
fi
->
tx_powî
;

1107 i‡(
is_40
) {

1108 
u8
 
powî_ht40dñè
;

1109 
¨5416_ì¥om_def
 *
ìp
 = &
ah
->
ì¥om
.
def
;

1111 i‡(
AR5416_VER_MASK
 >
AR5416_EEP_MINOR_VER_2
) {

1112 
boﬁ
 
is_2ghz
;

1113 
modÆ_ìp_hódî
 *
pmodÆ
;

1115 
is_2ghz
 = 
öfo
->
b™d
 =
IEEE80211_BAND_2GHZ
;

1116 
pmodÆ
 = &
ìp
->
modÆHódî
[
is_2ghz
];

1117 
powî_ht40dñè
 = 
pmodÆ
->
ht40PowîIncF‹Pdadc
;

1119 
powî_ht40dñè
 = 2;

1121 
txpowî
 +
powî_ht40dñè
;

1124 i‡(
	`AR_SREV_9287
(
ah
Ë|| 
	`AR_SREV_9285
(ah) ||

1125 
	`AR_SREV_9271
(
ah
)) {

1126 
txpowî
 -2 * 
AR9287_PWR_TABLE_OFFSET_DB
;

1127 } i‡(
	`AR_SREV_9280_20_OR_LATER
(
ah
)) {

1128 
s8
 
powî_off£t
;

1130 
powî_off£t
 = 
ah
->
ìp_›s
->
	`gë_ì¥om
(ah,

1131 
EEP_PWR_TABLE_OFFSET
);

1132 
txpowî
 -2 * 
powî_off£t
;

1135 i‡(
OLC_FOR_AR9280_20_LATER
 && 
is_cck
)

1136 
txpowî
 -= 2;

1138 
txpowî
 = 
	`max
(txpower, 0);

1139 
max_powî
 = 
	`mö_t
(
u8
, 
ah
->
tx_powî
[
øãidx
], 
txpowî
);

1145 i‡(!
max_powî
 && !
	`AR_SREV_9280_20_OR_LATER
(
ah
))

1146 
max_powî
 = 1;

1147 } i‡(!
bf
->
bf_°©e
.
bfs_∑¥d
) {

1148 i‡(
øãidx
 < 8 && (
öfo
->
Êags
 & 
IEEE80211_TX_CTL_STBC
))

1149 
max_powî
 = 
	`mö_t
(
u8
, 
ah
->
tx_powî_°bc
[
øãidx
],

1150 
fi
->
tx_powî
);

1152 
max_powî
 = 
	`mö_t
(
u8
, 
ah
->
tx_powî
[
øãidx
],

1153 
fi
->
tx_powî
);

1155 
max_powî
 = 
ah
->
∑¥d_åaöög_powî
;

1158  
max_powî
;

1159 
	}
}

1161 
	$©h_buf_£t_øã
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

1162 
©h_tx_öfo
 *
öfo
, 
Àn
, 
boﬁ
 
πs
)

1164 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1165 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1166 
sk_buff
 *
skb
;

1167 
õì80211_tx_öfo
 *
tx_öfo
;

1168 
õì80211_tx_øã
 *
øãs
;

1169 c⁄° 
õì80211_øã
 *
øã
;

1170 
õì80211_hdr
 *
hdr
;

1171 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
bf
->
bf_mpdu
);

1172 
u32
 
πs_thªsh
 = 
sc
->
hw
->
wùhy
->
πs_thªshﬁd
;

1173 
i
;

1174 
u8
 
rix
 = 0;

1176 
skb
 = 
bf
->
bf_mpdu
;

1177 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

1178 
øãs
 = 
bf
->rates;

1179 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

1182 
öfo
->
dur_upd©e
 = !
	`õì80211_is_p•ﬁl
(
hdr
->
‰ame_c⁄åﬁ
);

1183 
öfo
->
πs˘s_øã
 = 
fi
->rtscts_rate;

1185 
i
 = 0; i < 
	`ARRAY_SIZE
(
bf
->
øãs
); i++) {

1186 
boﬁ
 
is_40
, 
is_sgi
, 
is_•
, 
is_cck
;

1187 
phy
;

1189 i‡(!
øãs
[
i
].
cou¡
 || (øãs[i].
idx
 < 0))

1192 
rix
 = 
øãs
[
i
].
idx
;

1193 
öfo
->
øãs
[
i
].
Trõs
 =Ñ©es[i].
cou¡
;

1198 i‡(
	`bf_ißmpdu
(
bf
Ë&& !
	`bf_ißggr
(bf) &&

1199 (
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_MCS
) &&

1200 
	`u∆ikñy
(
πs_thªsh
 !(
u32
) -1)) {

1201 i‡(!
πs_thªsh
 || (
Àn
 >Ñts_thresh))

1202 
πs
 = 
åue
;

1205 i‡(
πs
 || 
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_USE_RTS_CTS
) {

1206 
öfo
->
øãs
[
i
].
R©eFœgs
 |
ATH9K_RATESERIES_RTS_CTS
;

1207 
öfo
->
Êags
 |
ATH9K_TXDESC_RTSENA
;

1208 } i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_USE_CTS_PROTECT
) {

1209 
öfo
->
øãs
[
i
].
R©eFœgs
 |
ATH9K_RATESERIES_RTS_CTS
;

1210 
öfo
->
Êags
 |
ATH9K_TXDESC_CTSENA
;

1213 i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_40_MHZ_WIDTH
)

1214 
öfo
->
øãs
[
i
].
R©eFœgs
 |
ATH9K_RATESERIES_2040
;

1215 i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_SHORT_GI
)

1216 
öfo
->
øãs
[
i
].
R©eFœgs
 |
ATH9K_RATESERIES_HALFGI
;

1218 
is_sgi
 = !!(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_SHORT_GI
);

1219 
is_40
 = !!(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_40_MHZ_WIDTH
);

1220 
is_•
 = !!(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_USE_SHORT_PREAMBLE
);

1222 i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_MCS
) {

1224 
öfo
->
øãs
[
i
].
R©e
 = 
rix
 | 0x80;

1225 
öfo
->
øãs
[
i
].
ChSñ
 = 
	`©h_txchaömask_ªdu˘i⁄
(
sc
,

1226 
ah
->
txchaömask
, 
öfo
->
øãs
[
i
].
R©e
);

1227 
öfo
->
øãs
[
i
].
PktDuøti⁄
 = 
	`©h_pkt_duøti⁄
(
sc
, 
rix
, 
Àn
,

1228 
is_40
, 
is_sgi
, 
is_•
);

1229 i‡(
rix
 < 8 && (
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_STBC
))

1230 
öfo
->
øãs
[
i
].
R©eFœgs
 |
ATH9K_RATESERIES_STBC
;

1232 
öfo
->
txpowî
[
i
] = 
	`©h_gë_øã_txpowî
(
sc
, 
bf
, 
rix
,

1233 
is_40
, 
Ál£
);

1238 
øã
 = &
comm⁄
->
sb™ds
[
tx_öfo
->
b™d
].
bôøãs
[
øãs
[
i
].
idx
];

1239 i‡((
tx_öfo
->
b™d
 =
IEEE80211_BAND_2GHZ
) &&

1240 !(
øã
->
Êags
 & 
IEEE80211_RATE_ERP_G
))

1241 
phy
 = 
WLAN_RC_PHY_CCK
;

1243 
phy
 = 
WLAN_RC_PHY_OFDM
;

1245 
öfo
->
øãs
[
i
].
R©e
 = 
øã
->
hw_vÆue
;

1246 i‡(
øã
->
hw_vÆue_sh‹t
) {

1247 i‡(
øãs
[
i
].
Êags
 & 
IEEE80211_TX_RC_USE_SHORT_PREAMBLE
)

1248 
öfo
->
øãs
[
i
].
R©e
 |
øã
->
hw_vÆue_sh‹t
;

1250 
is_•
 = 
Ál£
;

1253 i‡(
bf
->
bf_°©e
.
bfs_∑¥d
)

1254 
öfo
->
øãs
[
i
].
ChSñ
 = 
ah
->
txchaömask
;

1256 
öfo
->
øãs
[
i
].
ChSñ
 = 
	`©h_txchaömask_ªdu˘i⁄
(
sc
,

1257 
ah
->
txchaömask
, 
öfo
->
øãs
[
i
].
R©e
);

1259 
öfo
->
øãs
[
i
].
PktDuøti⁄
 = 
	`©h9k_hw_compuãtxtime
(
sc
->
sc_ah
,

1260 
phy
, 
øã
->
bôøã
 * 100, 
Àn
, 
rix
, 
is_•
);

1262 
is_cck
 = 
	`IS_CCK_RATE
(
öfo
->
øãs
[
i
].
R©e
);

1263 
öfo
->
txpowî
[
i
] = 
	`©h_gë_øã_txpowî
(
sc
, 
bf
, 
rix
, 
Ál£
,

1264 
is_cck
);

1268 i‡(
	`bf_ißggr
(
bf
Ë&& (
Àn
 > 
sc
->
sc_ah
->
ˇps
.
πs_aggr_limô
))

1269 
öfo
->
Êags
 &~
ATH9K_TXDESC_RTSENA
;

1272 i‡(
öfo
->
Êags
 & 
ATH9K_TXDESC_RTSENA
)

1273 
öfo
->
Êags
 &~
ATH9K_TXDESC_CTSENA
;

1274 
	}
}

1276 
©h9k_pkt_ty≥
 
	$gë_hw_∑ckë_ty≥
(
sk_buff
 *
skb
)

1278 
õì80211_hdr
 *
hdr
;

1279 
©h9k_pkt_ty≥
 
hty≥
;

1280 
__À16
 
fc
;

1282 
hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

1283 
fc
 = 
hdr
->
‰ame_c⁄åﬁ
;

1285 i‡(
	`õì80211_is_bóc⁄
(
fc
))

1286 
hty≥
 = 
ATH9K_PKT_TYPE_BEACON
;

1287 i‡(
	`õì80211_is_¥obe_ª•
(
fc
))

1288 
hty≥
 = 
ATH9K_PKT_TYPE_PROBE_RESP
;

1289 i‡(
	`õì80211_is_©im
(
fc
))

1290 
hty≥
 = 
ATH9K_PKT_TYPE_ATIM
;

1291 i‡(
	`õì80211_is_p•ﬁl
(
fc
))

1292 
hty≥
 = 
ATH9K_PKT_TYPE_PSPOLL
;

1294 
hty≥
 = 
ATH9K_PKT_TYPE_NORMAL
;

1296  
hty≥
;

1297 
	}
}

1299 
	$©h_tx_fûl_desc
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

1300 
©h_txq
 *
txq
, 
Àn
)

1302 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1303 
©h_buf
 *
bf_fú°
 = 
NULL
;

1304 
©h_tx_öfo
 
öfo
;

1305 
u32
 
πs_thªsh
 = 
sc
->
hw
->
wùhy
->
πs_thªshﬁd
;

1306 
boﬁ
 
πs
 = 
Ál£
;

1308 
	`mem£t
(&
öfo
, 0, (info));

1309 
öfo
.
is_fú°
 = 
åue
;

1310 
öfo
.
is_œ°
 = 
åue
;

1311 
öfo
.
qcu
 = 
txq
->
axq_qnum
;

1313 
bf
) {

1314 
sk_buff
 *
skb
 = 
bf
->
bf_mpdu
;

1315 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

1316 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

1317 
boﬁ
 
aggr
 = !!(
bf
->
bf_°©e
.
bf_ty≥
 & 
BUF_AGGR
);

1319 
öfo
.
ty≥
 = 
	`gë_hw_∑ckë_ty≥
(
skb
);

1320 i‡(
bf
->
bf_√xt
)

1321 
öfo
.
lök
 = 
bf
->
bf_√xt
->
bf_daddr
;

1323 
öfo
.
lök
 = (
sc
->
tx99_°©e
Ë? 
bf
->
bf_daddr
 : 0;

1325 i‡(!
bf_fú°
) {

1326 
bf_fú°
 = 
bf
;

1328 i‡(!
sc
->
tx99_°©e
)

1329 
öfo
.
Êags
 = 
ATH9K_TXDESC_INTREQ
;

1330 i‡((
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_CLEAR_PS_FILT
) ||

1331 
txq
 =
sc
->
tx
.
u≠sdq
)

1332 
öfo
.
Êags
 |
ATH9K_TXDESC_CLRDMASK
;

1334 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_NO_ACK
)

1335 
öfo
.
Êags
 |
ATH9K_TXDESC_NOACK
;

1336 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_LDPC
)

1337 
öfo
.
Êags
 |
ATH9K_TXDESC_LDPC
;

1339 i‡(
bf
->
bf_°©e
.
bfs_∑¥d
)

1340 
öfo
.
Êags
 |(
u32
Ë
bf
->
bf_°©e
.
bfs_∑¥d
 <<

1341 
ATH9K_TXDESC_PAPRD_S
;

1350 i‡(
aggr
 && (
bf
 =
bf_fú°
) &&

1351 
	`u∆ikñy
(
πs_thªsh
 !(
u32
) -1)) {

1355 i‡(!
πs_thªsh
 || (
Àn
 >Ñts_thresh))

1356 
πs
 = 
åue
;

1359 i‡(!
aggr
)

1360 
Àn
 = 
fi
->
‰amñí
;

1362 
	`©h_buf_£t_øã
(
sc
, 
bf
, &
öfo
, 
Àn
, 
πs
);

1365 
öfo
.
buf_addr
[0] = 
bf
->
bf_buf_addr
;

1366 
öfo
.
buf_Àn
[0] = 
skb
->
Àn
;

1367 
öfo
.
pkt_Àn
 = 
fi
->
‰amñí
;

1368 
öfo
.
keyix
 = 
fi
->keyix;

1369 
öfo
.
keyty≥
 = 
fi
->keytype;

1371 i‡(
aggr
) {

1372 i‡(
bf
 =
bf_fú°
)

1373 
öfo
.
aggr
 = 
AGGR_BUF_FIRST
;

1374 i‡(
bf
 =
bf_fú°
->
bf_œ°bf
)

1375 
öfo
.
aggr
 = 
AGGR_BUF_LAST
;

1377 
öfo
.
aggr
 = 
AGGR_BUF_MIDDLE
;

1379 
öfo
.
ndñim
 = 
bf
->
bf_°©e
.ndelim;

1380 
öfo
.
aggr_Àn
 = 
Àn
;

1383 i‡(
bf
 =
bf_fú°
->
bf_œ°bf
)

1384 
bf_fú°
 = 
NULL
;

1386 
	`©h9k_hw_£t_txdesc
(
ah
, 
bf
->
bf_desc
, &
öfo
);

1387 
bf
 = bf->
bf_√xt
;

1389 
	}
}

1392 
	$©h_tx_f‹m_bur°
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

1393 
©h_©x_tid
 *
tid
, 
li°_hód
 *
bf_q
,

1394 
©h_buf
 *
bf_fú°
, 
sk_buff_hód
 *
tid_q
)

1396 
©h_buf
 *
bf
 = 
bf_fú°
, *
bf_¥ev
 = 
NULL
;

1397 
sk_buff
 *
skb
;

1398 
n‰ames
 = 0;

1401 
õì80211_tx_öfo
 *
tx_öfo
;

1402 
skb
 = 
bf
->
bf_mpdu
;

1404 
n‰ames
++;

1405 
	`__skb_u∆ök
(
skb
, 
tid_q
);

1406 
	`li°_add_èû
(&
bf
->
li°
, 
bf_q
);

1407 i‡(
bf_¥ev
)

1408 
bf_¥ev
->
bf_√xt
 = 
bf
;

1409 
bf_¥ev
 = 
bf
;

1411 i‡(
n‰ames
 >= 2)

1414 
bf
 = 
	`©h_tx_gë_tid_sub‰ame
(
sc
, 
txq
, 
tid
, &
tid_q
);

1415 i‡(!
bf
)

1418 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
bf
->
bf_mpdu
);

1419 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
)

1422 
	`©h_£t_øãs
(
tid
->
™
->
vif
,Åid->™->
°a
, 
bf
);

1424 
	}
}

1426 
boﬁ
 
	$©h_tx_sched_aggr
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

1427 
©h_©x_tid
 *
tid
, 
boﬁ
 *
°›
)

1429 
©h_buf
 *
bf
;

1430 
õì80211_tx_öfo
 *
tx_öfo
;

1431 
sk_buff_hód
 *
tid_q
;

1432 
li°_hód
 
bf_q
;

1433 
aggr_Àn
 = 0;

1434 
boﬁ
 
aggr
, 
œ°
 = 
åue
;

1436 i‡(!
	`©h_tid_has_buf„ªd
(
tid
))

1437  
Ál£
;

1439 
	`INIT_LIST_HEAD
(&
bf_q
);

1441 
bf
 = 
	`©h_tx_gë_tid_sub‰ame
(
sc
, 
txq
, 
tid
, &
tid_q
);

1442 i‡(!
bf
)

1443  
Ál£
;

1445 
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
bf
->
bf_mpdu
);

1446 
aggr
 = !!(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
);

1447 i‡((
aggr
 && 
txq
->
axq_ampdu_dïth
 >
ATH_AGGR_MIN_QDEPTH
) ||

1448 (!
aggr
 && 
txq
->
axq_dïth
 >
ATH_NON_AGGR_MIN_QDEPTH
)) {

1449 *
°›
 = 
åue
;

1450  
Ál£
;

1453 
	`©h_£t_øãs
(
tid
->
™
->
vif
,Åid->™->
°a
, 
bf
);

1454 i‡(
aggr
)

1455 
œ°
 = 
	`©h_tx_f‹m_aggr
(
sc
, 
txq
, 
tid
, &
bf_q
, 
bf
,

1456 
tid_q
, &
aggr_Àn
);

1458 
	`©h_tx_f‹m_bur°
(
sc
, 
txq
, 
tid
, &
bf_q
, 
bf
, 
tid_q
);

1460 i‡(
	`li°_em±y
(&
bf_q
))

1461  
Ál£
;

1463 i‡(
tid
->
˛ór_ps_fûãr
 ||Åid->
™
->
no_ps_fûãr
) {

1464 
tid
->
˛ór_ps_fûãr
 = 
Ál£
;

1465 
tx_öfo
->
Êags
 |
IEEE80211_TX_CTL_CLEAR_PS_FILT
;

1468 
	`©h_tx_fûl_desc
(
sc
, 
bf
, 
txq
, 
aggr_Àn
);

1469 
	`©h_tx_txqaddbuf
(
sc
, 
txq
, &
bf_q
, 
Ál£
);

1470  
åue
;

1471 
	}
}

1473 
	$©h_tx_aggr_°¨t
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
,

1474 
u16
 
tid
, u16 *
s¢
)

1476 
©h_©x_tid
 *
txtid
;

1477 
©h_txq
 *
txq
;

1478 
©h_node
 *
™
;

1479 
u8
 
dísôy
;

1481 
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

1482 
txtid
 = 
	`ATH_AN_2_TID
(
™
, 
tid
);

1483 
txq
 = 
txtid
->txq;

1485 
	`©h_txq_lock
(
sc
, 
txq
);

1491 i‡(
°a
->
ht_ˇp
.
ht_suµ‹ãd
) {

1492 
™
->
maxampdu
 = (1 << (
IEEE80211_HT_MAX_AMPDU_FACTOR
 +

1493 
°a
->
ht_ˇp
.
ampdu_Á˘‹
)) - 1;

1494 
dísôy
 = 
	`©h9k_∑r£_mpdudísôy
(
°a
->
ht_ˇp
.
ampdu_dísôy
);

1495 
™
->
mpdudísôy
 = 
dísôy
;

1499 
	`©h_tx_tid_ch™ge_°©e
(
sc
, 
txtid
);

1501 
txtid
->
a˘ive
 = 
åue
;

1502 *
s¢
 = 
txtid
->
£q_°¨t
 =Åxtid->
£q_√xt
;

1503 
txtid
->
b¨_ödex
 = -1;

1505 
	`mem£t
(
txtid
->
tx_buf
, 0, (txtid->tx_buf));

1506 
txtid
->
baw_hód
 =Åxtid->
baw_èû
 = 0;

1508 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

1511 
	}
}

1513 
	$©h_tx_aggr_°›
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
, 
u16
 
tid
)

1515 
©h_node
 *
™
 = (©h_nodê*)
°a
->
drv_¥iv
;

1516 
©h_©x_tid
 *
txtid
 = 
	`ATH_AN_2_TID
(
™
, 
tid
);

1517 
©h_txq
 *
txq
 = 
txtid
->txq;

1519 
	`©h_txq_lock
(
sc
, 
txq
);

1520 
txtid
->
a˘ive
 = 
Ál£
;

1521 
	`©h_tx_Êush_tid
(
sc
, 
txtid
);

1522 
	`©h_tx_tid_ch™ge_°©e
(
sc
, 
txtid
);

1523 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

1524 
	}
}

1526 
	$©h_tx_aggr_¶ìp
(
õì80211_°a
 *
°a
, 
©h_so·c
 *
sc
,

1527 
©h_node
 *
™
)

1529 
©h_©x_tid
 *
tid
;

1530 
©h_txq
 *
txq
;

1531 
boﬁ
 
buf„ªd
;

1532 
tidno
;

1534 
tidno
 = 0, 
tid
 = &
™
->tid[tidno];

1535 
tidno
 < 
IEEE80211_NUM_TIDS
;Åidno++, 
tid
++) {

1537 
txq
 = 
tid
->txq;

1539 
	`©h_txq_lock
(
sc
, 
txq
);

1541 i‡(
	`li°_em±y
(&
tid
->
li°
)) {

1542 
	`©h_txq_u∆ock
(
sc
, 
txq
);

1546 
buf„ªd
 = 
	`©h_tid_has_buf„ªd
(
tid
);

1548 
	`li°_dñ_öô
(&
tid
->
li°
);

1550 
	`©h_txq_u∆ock
(
sc
, 
txq
);

1552 
	`õì80211_°a_£t_buf„ªd
(
°a
, 
tidno
, 
buf„ªd
);

1554 
	}
}

1556 
	$©h_tx_aggr_wakeup
(
©h_so·c
 *
sc
, 
©h_node
 *
™
)

1558 
©h_©x_tid
 *
tid
;

1559 
©h_txq
 *
txq
;

1560 
tidno
;

1562 
tidno
 = 0, 
tid
 = &
™
->tid[tidno];

1563 
tidno
 < 
IEEE80211_NUM_TIDS
;Åidno++, 
tid
++) {

1565 
txq
 = 
tid
->txq;

1567 
	`©h_txq_lock
(
sc
, 
txq
);

1568 
tid
->
˛ór_ps_fûãr
 = 
åue
;

1570 i‡(
	`©h_tid_has_buf„ªd
(
tid
)) {

1571 
	`©h_tx_queue_tid
(
sc
, 
txq
, 
tid
);

1572 
	`©h_txq_scheduÀ
(
sc
, 
txq
);

1575 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

1577 
	}
}

1579 
	$©h_tx_aggr_ªsume
(
©h_so·c
 *
sc
, 
õì80211_°a
 *
°a
,

1580 
u16
 
tidno
)

1582 
©h_©x_tid
 *
tid
;

1583 
©h_node
 *
™
;

1584 
©h_txq
 *
txq
;

1586 
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

1587 
tid
 = 
	`ATH_AN_2_TID
(
™
, 
tidno
);

1588 
txq
 = 
tid
->txq;

1590 
	`©h_txq_lock
(
sc
, 
txq
);

1592 
tid
->
baw_size
 = 
IEEE80211_MIN_AMPDU_BUF
 << 
°a
->
ht_ˇp
.
ampdu_Á˘‹
;

1594 i‡(
	`©h_tid_has_buf„ªd
(
tid
)) {

1595 
	`©h_tx_queue_tid
(
sc
, 
txq
, 
tid
);

1596 
	`©h_txq_scheduÀ
(
sc
, 
txq
);

1599 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

1600 
	}
}

1602 
	$©h9k_ªÀa£_buf„ªd_‰ames
(
õì80211_hw
 *
hw
,

1603 
õì80211_°a
 *
°a
,

1604 
u16
 
tids
, 
n‰ames
,

1605 
õì80211_‰ame_ªÀa£_ty≥
 
ªas⁄
,

1606 
boﬁ
 
m‹e_d©a
)

1608 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

1609 
©h_node
 *
™
 = (©h_nodê*)
°a
->
drv_¥iv
;

1610 
©h_txq
 *
txq
 = 
sc
->
tx
.
u≠sdq
;

1611 
õì80211_tx_öfo
 *
öfo
;

1612 
li°_hód
 
bf_q
;

1613 
©h_buf
 *
bf_èû
 = 
NULL
, *
bf
;

1614 
sk_buff_hód
 *
tid_q
;

1615 
£¡
 = 0;

1616 
i
;

1618 
	`INIT_LIST_HEAD
(&
bf_q
);

1619 
i
 = 0; 
tids
 && 
n‰ames
; i++,Åids >>= 1) {

1620 
©h_©x_tid
 *
tid
;

1622 i‡(!(
tids
 & 1))

1625 
tid
 = 
	`ATH_AN_2_TID
(
™
, 
i
);

1627 
	`©h_txq_lock
(
sc
, 
tid
->
txq
);

1628 
n‰ames
 > 0) {

1629 
bf
 = 
	`©h_tx_gë_tid_sub‰ame
(
sc
, sc->
tx
.
u≠sdq
, 
tid
, &
tid_q
);

1630 i‡(!
bf
)

1633 
	`__skb_u∆ök
(
bf
->
bf_mpdu
, 
tid_q
);

1634 
	`li°_add_èû
(&
bf
->
li°
, &
bf_q
);

1635 
	`©h_£t_øãs
(
tid
->
™
->
vif
,Åid->™->
°a
, 
bf
);

1636 i‡(
	`bf_ißmpdu
(
bf
)) {

1637 
	`©h_tx_addto_baw
(
sc
, 
tid
, 
bf
);

1638 
bf
->
bf_°©e
.
bf_ty≥
 &~
BUF_AGGR
;

1640 i‡(
bf_èû
)

1641 
bf_èû
->
bf_√xt
 = 
bf
;

1643 
bf_èû
 = 
bf
;

1644 
n‰ames
--;

1645 
£¡
++;

1646 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
a_queued_hw
);

1648 i‡(
™
->
°a
 && !
	`©h_tid_has_buf„ªd
(
tid
))

1649 
	`õì80211_°a_£t_buf„ªd
(
™
->
°a
, 
i
, 
Ál£
);

1651 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
tid
->
txq
);

1654 i‡(
	`li°_em±y
(&
bf_q
))

1657 
öfo
 = 
	`IEEE80211_SKB_CB
(
bf_èû
->
bf_mpdu
);

1658 
öfo
->
Êags
 |
IEEE80211_TX_STATUS_EOSP
;

1660 
bf
 = 
	`li°_fú°_íåy
(&
bf_q
, 
©h_buf
, 
li°
);

1661 
	`©h_txq_lock
(
sc
, 
txq
);

1662 
	`©h_tx_fûl_desc
(
sc
, 
bf
, 
txq
, 0);

1663 
	`©h_tx_txqaddbuf
(
sc
, 
txq
, &
bf_q
, 
Ál£
);

1664 
	`©h_txq_u∆ock
(
sc
, 
txq
);

1665 
	}
}

1671 
©h_txq
 *
	$©h_txq_£tup
(
©h_so·c
 *
sc
, 
qty≥
, 
subty≥
)

1673 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1674 
©h9k_tx_queue_öfo
 
qi
;

1675 c⁄° 
subty≥_txq_to_hwq
[] = {

1676 [
IEEE80211_AC_BE
] = 
ATH_TXQ_AC_BE
,

1677 [
IEEE80211_AC_BK
] = 
ATH_TXQ_AC_BK
,

1678 [
IEEE80211_AC_VI
] = 
ATH_TXQ_AC_VI
,

1679 [
IEEE80211_AC_VO
] = 
ATH_TXQ_AC_VO
,

1681 
axq_qnum
, 
i
;

1683 
	`mem£t
(&
qi
, 0, (qi));

1684 
qi
.
tqi_subty≥
 = 
subty≥_txq_to_hwq
[
subty≥
];

1685 
qi
.
tqi_aifs
 = 
ATH9K_TXQ_USEDEFAULT
;

1686 
qi
.
tqi_cwmö
 = 
ATH9K_TXQ_USEDEFAULT
;

1687 
qi
.
tqi_cwmax
 = 
ATH9K_TXQ_USEDEFAULT
;

1688 
qi
.
tqi_physCompBuf
 = 0;

1705 i‡(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

1706 
qi
.
tqi_qÊags
 = 
TXQ_FLAG_TXINT_ENABLE
;

1708 i‡(
qty≥
 =
ATH9K_TX_QUEUE_UAPSD
)

1709 
qi
.
tqi_qÊags
 = 
TXQ_FLAG_TXDESCINT_ENABLE
;

1711 
qi
.
tqi_qÊags
 = 
TXQ_FLAG_TXEOLINT_ENABLE
 |

1712 
TXQ_FLAG_TXDESCINT_ENABLE
;

1714 
axq_qnum
 = 
	`©h9k_hw_£tu±xqueue
(
ah
, 
qty≥
, &
qi
);

1715 i‡(
axq_qnum
 == -1) {

1720  
NULL
;

1722 i‡(!
	`ATH_TXQ_SETUP
(
sc
, 
axq_qnum
)) {

1723 
©h_txq
 *
txq
 = &
sc
->
tx
.txq[
axq_qnum
];

1725 
txq
->
axq_qnum
 =áxq_qnum;

1726 
txq
->
mac80211_qnum
 = -1;

1727 
txq
->
axq_lök
 = 
NULL
;

1728 
	`__skb_queue_hód_öô
(&
txq
->
com∂ëe_q
);

1729 
	`INIT_LIST_HEAD
(&
txq
->
axq_q
);

1730 
	`•ö_lock_öô
(&
txq
->
axq_lock
);

1731 
txq
->
axq_dïth
 = 0;

1732 
txq
->
axq_ampdu_dïth
 = 0;

1733 
txq
->
axq_tx_ö¥ogªss
 = 
Ál£
;

1734 
sc
->
tx
.
txq£tup
 |1<<
axq_qnum
;

1736 
txq
->
txq_hódidx
 =Åxq->
txq_èûidx
 = 0;

1737 
i
 = 0; i < 
ATH_TXFIFO_DEPTH
; i++)

1738 
	`INIT_LIST_HEAD
(&
txq
->
txq_fifo
[
i
]);

1740  &
sc
->
tx
.
txq
[
axq_qnum
];

1741 
	}
}

1743 
	$©h_txq_upd©e
(
©h_so·c
 *
sc
, 
qnum
,

1744 
©h9k_tx_queue_öfo
 *
qöfo
)

1746 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1747 
îr‹
 = 0;

1748 
©h9k_tx_queue_öfo
 
qi
;

1750 
	`BUG_ON
(
sc
->
tx
.
txq
[
qnum
].
axq_qnum
 != qnum);

1752 
	`©h9k_hw_gë_txq_¥›s
(
ah
, 
qnum
, &
qi
);

1753 
qi
.
tqi_aifs
 = 
qöfo
->tqi_aifs;

1754 
qi
.
tqi_cwmö
 = 
qöfo
->tqi_cwmin;

1755 
qi
.
tqi_cwmax
 = 
qöfo
->tqi_cwmax;

1756 
qi
.
tqi_bur°Time
 = 
qöfo
->tqi_burstTime;

1757 
qi
.
tqi_ªadyTime
 = 
qöfo
->tqi_readyTime;

1759 i‡(!
	`©h9k_hw_£t_txq_¥›s
(
ah
, 
qnum
, &
qi
)) {

1760 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
),

1761 "U«bÀÅÿupd©êh¨dw¨êqueuê%u!\n", 
qnum
);

1762 
îr‹
 = -
EIO
;

1764 
	`©h9k_hw_ª£âxqueue
(
ah
, 
qnum
);

1767  
îr‹
;

1768 
	}
}

1770 
	$©h_ˇbq_upd©e
(
©h_so·c
 *
sc
)

1772 
©h9k_tx_queue_öfo
 
qi
;

1773 
©h_bóc⁄_c⁄fig
 *
cur_c⁄f
 = &
sc
->
cur_ch™
->
bóc⁄
;

1774 
qnum
 = 
sc
->
bóc⁄
.
ˇbq
->
axq_qnum
;

1776 
	`©h9k_hw_gë_txq_¥›s
(
sc
->
sc_ah
, 
qnum
, &
qi
);

1778 
qi
.
tqi_ªadyTime
 = (
	`TU_TO_USEC
(
cur_c⁄f
->
bóc⁄_öãrvÆ
) *

1779 
ATH_CABQ_READY_TIME
) / 100;

1780 
	`©h_txq_upd©e
(
sc
, 
qnum
, &
qi
);

1783 
	}
}

1785 
	$©h_døö_txq_li°
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

1786 
li°_hód
 *
li°
)

1788 
©h_buf
 *
bf
, *
œ°bf
;

1789 
li°_hód
 
bf_hód
;

1790 
©h_tx_°©us
 
ts
;

1792 
	`mem£t
(&
ts
, 0, (ts));

1793 
ts
.
ts_°©us
 = 
ATH9K_TX_FLUSH
;

1794 
	`INIT_LIST_HEAD
(&
bf_hód
);

1796 !
	`li°_em±y
(
li°
)) {

1797 
bf
 = 
	`li°_fú°_íåy
(
li°
, 
©h_buf
,Üist);

1799 i‡(
bf
->
bf_°©e
.
°Æe
) {

1800 
	`li°_dñ
(&
bf
->
li°
);

1802 
	`©h_tx_ªtu∫_buf„r
(
sc
, 
bf
);

1806 
œ°bf
 = 
bf
->
bf_œ°bf
;

1807 
	`li°_cut_posôi⁄
(&
bf_hód
, 
li°
, &
œ°bf
->list);

1808 
	`©h_tx_¥o˚ss_buf„r
(
sc
, 
txq
, &
ts
, 
bf
, &
bf_hód
);

1810 
	}
}

1818 
	$©h_døötxq
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

1820 
	`©h_txq_lock
(
sc
, 
txq
);

1822 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
) {

1823 
idx
 = 
txq
->
txq_èûidx
;

1825 !
	`li°_em±y
(&
txq
->
txq_fifo
[
idx
])) {

1826 
	`©h_døö_txq_li°
(
sc
, 
txq
, &txq->
txq_fifo
[
idx
]);

1828 
	`INCR
(
idx
, 
ATH_TXFIFO_DEPTH
);

1830 
txq
->
txq_èûidx
 = 
idx
;

1833 
txq
->
axq_lök
 = 
NULL
;

1834 
txq
->
axq_tx_ö¥ogªss
 = 
Ál£
;

1835 
	`©h_døö_txq_li°
(
sc
, 
txq
, &txq->
axq_q
);

1837 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

1838 
	}
}

1840 
boﬁ
 
	$©h_døö_Æl_txq
(
©h_so·c
 *
sc
)

1842 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1843 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1844 
©h_txq
 *
txq
;

1845 
i
;

1846 
u32
 
≈íd
 = 0;

1848 i‡(
	`ã°_bô
(
ATH_OP_INVALID
, &
comm⁄
->
›_Êags
))

1849  
åue
;

1851 
	`©h9k_hw_ab‹t_tx_dma
(
ah
);

1854 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++) {

1855 i‡(!
	`ATH_TXQ_SETUP
(
sc
, 
i
))

1858 i‡(!
sc
->
tx
.
txq
[
i
].
axq_dïth
)

1861 i‡(
	`©h9k_hw_numtx≥ndög
(
ah
, 
sc
->
tx
.
txq
[
i
].
axq_qnum
))

1862 
≈íd
 |
	`BIT
(
i
);

1865 i‡(
≈íd
) {

1866 
	`RESET_STAT_INC
(
sc
, 
RESET_TX_DMA_ERROR
);

1867 
	`©h_dbg
(
comm⁄
, 
RESET
,

1868 "FaûedÅÿ°› TX DMA, queues=0x%03x!\n", 
≈íd
);

1871 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++) {

1872 i‡(!
	`ATH_TXQ_SETUP
(
sc
, 
i
))

1880 
txq
 = &
sc
->
tx
.txq[
i
];

1881 
txq
->
°›≥d
 = 
Ál£
;

1882 
	`©h_døötxq
(
sc
, 
txq
);

1885  !
≈íd
;

1886 
	}
}

1888 
	$©h_tx_˛ónupq
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

1890 
	`©h9k_hw_ªÀa£txqueue
(
sc
->
sc_ah
, 
txq
->
axq_qnum
);

1891 
sc
->
tx
.
txq£tup
 &~(1<<
txq
->
axq_qnum
);

1892 
	}
}

1897 
	$©h_txq_scheduÀ
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

1899 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

1900 
©h_©x_tid
 *
tid
, *
œ°_tid
;

1901 
li°_hód
 *
tid_li°
;

1902 
boﬁ
 
£¡
 = 
Ál£
;

1904 i‡(
txq
->
mac80211_qnum
 < 0)

1907 i‡(
	`ã°_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
))

1910 
	`•ö_lock_bh
(&
sc
->
ch™_lock
);

1911 
tid_li°
 = &
sc
->
cur_ch™
->
acq
[
txq
->
mac80211_qnum
];

1913 i‡(
	`li°_em±y
(
tid_li°
)) {

1914 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1918 
	`rcu_ªad_lock
();

1920 
œ°_tid
 = 
	`li°_íåy
(
tid_li°
->
¥ev
, 
©h_©x_tid
, 
li°
);

1921 !
	`li°_em±y
(
tid_li°
)) {

1922 
boﬁ
 
°›
 = 
Ál£
;

1924 i‡(
sc
->
cur_ch™
->
°›≥d
)

1927 
tid
 = 
	`li°_fú°_íåy
(
tid_li°
, 
©h_©x_tid
, 
li°
);

1928 
	`li°_dñ_öô
(&
tid
->
li°
);

1930 i‡(
	`©h_tx_sched_aggr
(
sc
, 
txq
, 
tid
, &
°›
))

1931 
£¡
 = 
åue
;

1937 i‡(
	`©h_tid_has_buf„ªd
(
tid
))

1938 
	`©h_tx_queue_tid
(
sc
, 
txq
, 
tid
);

1940 i‡(
°›
)

1943 i‡(
tid
 =
œ°_tid
) {

1944 i‡(!
£¡
)

1947 
£¡
 = 
Ál£
;

1948 
œ°_tid
 = 
	`li°_íåy
(
tid_li°
->
¥ev
,

1949 
©h_©x_tid
, 
li°
);

1953 
	`rcu_ªad_u∆ock
();

1954 
	`•ö_u∆ock_bh
(&
sc
->
ch™_lock
);

1955 
	}
}

1957 
	$©h_txq_scheduÀ_Æl
(
©h_so·c
 *
sc
)

1959 
©h_txq
 *
txq
;

1960 
i
;

1962 
i
 = 0; i < 
IEEE80211_NUM_ACS
; i++) {

1963 
txq
 = 
sc
->
tx
.
txq_m≠
[
i
];

1965 
	`•ö_lock_bh
(&
txq
->
axq_lock
);

1966 
	`©h_txq_scheduÀ
(
sc
, 
txq
);

1967 
	`•ö_u∆ock_bh
(&
txq
->
axq_lock
);

1969 
	}
}

1979 
	$©h_tx_txqaddbuf
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

1980 
li°_hód
 *
hód
, 
boﬁ
 
öã∫Æ
)

1982 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

1983 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

1984 
©h_buf
 *
bf
, *
bf_œ°
;

1985 
boﬁ
 
puâxbuf
 = 
Ál£
;

1986 
boﬁ
 
edma
;

1993 i‡(
	`li°_em±y
(
hód
))

1996 
edma
 = !!(
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
);

1997 
bf
 = 
	`li°_fú°_íåy
(
hód
, 
©h_buf
, 
li°
);

1998 
bf_œ°
 = 
	`li°_íåy
(
hód
->
¥ev
, 
©h_buf
, 
li°
);

2000 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "qnum: %d,Åxq depth: %d\n",

2001 
txq
->
axq_qnum
,Åxq->
axq_dïth
);

2003 i‡(
edma
 && 
	`li°_em±y
(&
txq
->
txq_fifo
[txq->
txq_hódidx
])) {

2004 
	`li°_•li˚_èû_öô
(
hód
, &
txq
->
txq_fifo
[txq->
txq_hódidx
]);

2005 
	`INCR
(
txq
->
txq_hódidx
, 
ATH_TXFIFO_DEPTH
);

2006 
puâxbuf
 = 
åue
;

2008 
	`li°_•li˚_èû_öô
(
hód
, &
txq
->
axq_q
);

2010 i‡(
txq
->
axq_lök
) {

2011 
	`©h9k_hw_£t_desc_lök
(
ah
, 
txq
->
axq_lök
, 
bf
->
bf_daddr
);

2012 
	`©h_dbg
(
comm⁄
, 
XMIT
, "link[%u] (%p)=%llx (%p)\n",

2013 
txq
->
axq_qnum
,Åxq->
axq_lök
,

2014 
	`ôo64
(
bf
->
bf_daddr
), bf->
bf_desc
);

2015 } i‡(!
edma
)

2016 
puâxbuf
 = 
åue
;

2018 
txq
->
axq_lök
 = 
bf_œ°
->
bf_desc
;

2021 i‡(
puâxbuf
) {

2022 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
puâxbuf
);

2023 
	`©h9k_hw_puâxbuf
(
ah
, 
txq
->
axq_qnum
, 
bf
->
bf_daddr
);

2024 
	`©h_dbg
(
comm⁄
, 
XMIT
, "TXDP[%u] = %llx (%p)\n",

2025 
txq
->
axq_qnum
, 
	`ôo64
(
bf
->
bf_daddr
), bf->
bf_desc
);

2028 i‡(!
edma
 || 
sc
->
tx99_°©e
) {

2029 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
tx°¨t
);

2030 
	`©h9k_hw_tx°¨t
(
ah
, 
txq
->
axq_qnum
);

2033 i‡(!
öã∫Æ
) {

2034 
bf
) {

2035 
txq
->
axq_dïth
++;

2036 i‡(
	`bf_is_ampdu_nŸ_¥obög
(
bf
))

2037 
txq
->
axq_ampdu_dïth
++;

2039 
bf_œ°
 = 
bf
->
bf_œ°bf
;

2040 
bf
 = 
bf_œ°
->
bf_√xt
;

2041 
bf_œ°
->
bf_√xt
 = 
NULL
;

2044 
	}
}

2046 
	$©h_tx_£nd_n‹mÆ
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
,

2047 
©h_©x_tid
 *
tid
, 
sk_buff
 *
skb
)

2049 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2050 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

2051 
li°_hód
 
bf_hód
;

2052 
©h_buf
 *
bf
 = 
fi
->bf;

2054 
	`INIT_LIST_HEAD
(&
bf_hód
);

2055 
	`li°_add_èû
(&
bf
->
li°
, &
bf_hód
);

2056 
bf
->
bf_°©e
.
bf_ty≥
 = 0;

2057 i‡(
tid
 && (
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
)) {

2058 
bf
->
bf_°©e
.
bf_ty≥
 = 
BUF_AMPDU
;

2059 
	`©h_tx_addto_baw
(
sc
, 
tid
, 
bf
);

2062 
bf
->
bf_√xt
 = 
NULL
;

2063 
bf
->
bf_œ°bf
 = bf;

2064 
	`©h_tx_fûl_desc
(
sc
, 
bf
, 
txq
, 
fi
->
‰amñí
);

2065 
	`©h_tx_txqaddbuf
(
sc
, 
txq
, &
bf_hód
, 
Ál£
);

2066 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
queued
);

2067 
	}
}

2069 
	$£tup_‰ame_öfo
(
õì80211_hw
 *
hw
,

2070 
õì80211_°a
 *
°a
,

2071 
sk_buff
 *
skb
,

2072 
‰amñí
)

2074 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2075 
õì80211_key_c⁄f
 *
hw_key
 = 
tx_öfo
->
c⁄åﬁ
.hw_key;

2076 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*)
skb
->
d©a
;

2077 c⁄° 
õì80211_øã
 *
øã
;

2078 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

2079 
©h_node
 *
™
 = 
NULL
;

2080 
©h9k_key_ty≥
 
keyty≥
;

2081 
boﬁ
 
sh‹t_¥ómbÀ
 = 
Ál£
;

2082 
u8
 
txpowî
;

2089 i‡(
tx_öfo
->
c⁄åﬁ
.
vif
 &&

2090 
tx_öfo
->
c⁄åﬁ
.
vif
->
bss_c⁄f
.
u£_sh‹t_¥ómbÀ
)

2091 
sh‹t_¥ómbÀ
 = 
åue
;

2093 
øã
 = 
	`õì80211_gë_πs_˘s_øã
(
hw
, 
tx_öfo
);

2094 
keyty≥
 = 
	`©h9k_cmn_gë_hw_¸y±o_keyty≥
(
skb
);

2096 i‡(
°a
)

2097 
™
 = (
©h_node
 *Ë
°a
->
drv_¥iv
;

2099 i‡(
tx_öfo
->
c⁄åﬁ
.
vif
) {

2100 
õì80211_vif
 *
vif
 = 
tx_öfo
->
c⁄åﬁ
.vif;

2102 
txpowî
 = 2 * 
vif
->
bss_c⁄f
.txpower;

2104 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2106 
txpowî
 = 
sc
->
cur_ch™
->
cur_txpowî
;

2109 
	`mem£t
(
fi
, 0, (*fi));

2110 
fi
->
txq
 = -1;

2111 i‡(
hw_key
)

2112 
fi
->
keyix
 = 
hw_key
->
hw_key_idx
;

2113 i‡(
™
 && 
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
Ë&&án->
ps_key
 > 0)

2114 
fi
->
keyix
 = 
™
->
ps_key
;

2116 
fi
->
keyix
 = 
ATH9K_TXKEYIX_INVALID
;

2117 
fi
->
keyty≥
 = keytype;

2118 
fi
->
‰amñí
 = framelen;

2119 
fi
->
tx_powî
 = 
txpowî
;

2121 i‡(!
øã
)

2123 
fi
->
πs˘s_øã
 = 
øã
->
hw_vÆue
;

2124 i‡(
sh‹t_¥ómbÀ
)

2125 
fi
->
πs˘s_øã
 |
øã
->
hw_vÆue_sh‹t
;

2126 
	}
}

2128 
u8
 
	$©h_txchaömask_ªdu˘i⁄
(
©h_so·c
 *
sc
, 
u8
 
chaömask
, 
u32
 
øã
)

2130 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2131 
©h9k_ch™√l
 *
curch™
 = 
ah
->curchan;

2133 i‡((
ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_APM
Ë&& 
	`IS_CHAN_5GHZ
(
curch™
) &&

2134 (
chaömask
 =0x7Ë&& (
øã
 < 0x90))

2136 i‡(
	`AR_SREV_9462
(
ah
Ë&& 
	`©h9k_hw_btc€x_is_íabÀd
(ah) &&

2137 
	`IS_CCK_RATE
(
øã
))

2140  
chaömask
;

2141 
	}
}

2147 
©h_buf
 *
	$©h_tx_£tup_buf„r
(
©h_so·c
 *
sc
,

2148 
©h_txq
 *
txq
,

2149 
©h_©x_tid
 *
tid
,

2150 
sk_buff
 *
skb
)

2152 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2153 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

2154 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*)
skb
->
d©a
;

2155 
©h_buf
 *
bf
;

2156 
‰agno
;

2157 
u16
 
£qno
;

2159 
bf
 = 
	`©h_tx_gë_buf„r
(
sc
);

2160 i‡(!
bf
) {

2161 
	`©h_dbg
(
comm⁄
, 
XMIT
, "TX buffersáre full\n");

2162  
NULL
;

2165 
	`ATH_TXBUF_RESET
(
bf
);

2167 i‡(
tid
 && 
	`õì80211_is_d©a_¥e£¡
(
hdr
->
‰ame_c⁄åﬁ
)) {

2168 
‰agno
 = 
	`À16_to_˝u
(
hdr
->
£q_˘æ
Ë& 
IEEE80211_SCTL_FRAG
;

2169 
£qno
 = 
tid
->
£q_√xt
;

2170 
hdr
->
£q_˘æ
 = 
	`˝u_to_À16
(
tid
->
£q_√xt
 << 
IEEE80211_SEQ_SEQ_SHIFT
);

2172 i‡(
‰agno
)

2173 
hdr
->
£q_˘æ
 |
	`˝u_to_À16
(
‰agno
);

2175 i‡(!
	`õì80211_has_m‹e‰ags
(
hdr
->
‰ame_c⁄åﬁ
))

2176 
	`INCR
(
tid
->
£q_√xt
, 
IEEE80211_SEQ_MAX
);

2178 
bf
->
bf_°©e
.
£qno
 = seqno;

2181 
bf
->
bf_mpdu
 = 
skb
;

2183 
bf
->
bf_buf_addr
 = 
	`dma_m≠_sögÀ
(
sc
->
dev
, 
skb
->
d©a
,

2184 
skb
->
Àn
, 
DMA_TO_DEVICE
);

2185 i‡(
	`u∆ikñy
(
	`dma_m≠pög_îr‹
(
sc
->
dev
, 
bf
->
bf_buf_addr
))) {

2186 
bf
->
bf_mpdu
 = 
NULL
;

2187 
bf
->
bf_buf_addr
 = 0;

2188 
	`©h_îr
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
),

2190 
	`©h_tx_ªtu∫_buf„r
(
sc
, 
bf
);

2191  
NULL
;

2194 
fi
->
bf
 = bf;

2196  
bf
;

2197 
	}
}

2199 
	$©h_assign_£q
(
©h_comm⁄
 *
comm⁄
, 
sk_buff
 *
skb
)

2201 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*Ë
skb
->
d©a
;

2202 
õì80211_tx_öfo
 *
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2203 
õì80211_vif
 *
vif
 = 
öfo
->
c⁄åﬁ
.vif;

2204 
©h_vif
 *
avp
;

2206 i‡(!(
öfo
->
Êags
 & 
IEEE80211_TX_CTL_ASSIGN_SEQ
))

2209 i‡(!
vif
)

2212 
avp
 = (
©h_vif
 *)
vif
->
drv_¥iv
;

2214 i‡(
öfo
->
Êags
 & 
IEEE80211_TX_CTL_FIRST_FRAGMENT
)

2215 
avp
->
£q_no
 += 0x10;

2217 
hdr
->
£q_˘æ
 &
	`˝u_to_À16
(
IEEE80211_SCTL_FRAG
);

2218 
hdr
->
£q_˘æ
 |
	`˝u_to_À16
(
avp
->
£q_no
);

2219 
	}
}

2221 
	$©h_tx_¥ï¨e
(
õì80211_hw
 *
hw
, 
sk_buff
 *
skb
,

2222 
©h_tx_c⁄åﬁ
 *
tx˘l
)

2224 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*Ë
skb
->
d©a
;

2225 
õì80211_tx_öfo
 *
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2226 
õì80211_°a
 *
°a
 = 
tx˘l
->sta;

2227 
õì80211_vif
 *
vif
 = 
öfo
->
c⁄åﬁ
.vif;

2228 
©h_vif
 *
avp
;

2229 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2230 
‰mÀn
 = 
skb
->
Àn
 + 
FCS_LEN
;

2231 
∑dpos
, 
∑dsize
;

2234 i‡(
°a
)

2235 
tx˘l
->
™
 = (
©h_node
 *)
°a
->
drv_¥iv
;

2236 i‡(
vif
 && 
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
)) {

2237 
avp
 = (*)
vif
->
drv_¥iv
;

2238 
tx˘l
->
™
 = &
avp
->
mˇ°_node
;

2241 i‡(
öfo
->
c⁄åﬁ
.
hw_key
)

2242 
‰mÀn
 +
öfo
->
c⁄åﬁ
.
hw_key
->
icv_Àn
;

2244 
	`©h_assign_£q
(
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
), 
skb
);

2246 i‡((
vif
 && vif->
ty≥
 !
NL80211_IFTYPE_AP
 &&

2247 
vif
->
ty≥
 !
NL80211_IFTYPE_AP_VLAN
) ||

2248 !
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
))

2249 
öfo
->
Êags
 |
IEEE80211_TX_CTL_CLEAR_PS_FILT
;

2252 
∑dpos
 = 
	`õì80211_hdæí
(
hdr
->
‰ame_c⁄åﬁ
);

2253 
∑dsize
 = 
∑dpos
 & 3;

2254 i‡(
∑dsize
 && 
skb
->
Àn
 > 
∑dpos
) {

2255 i‡(
	`skb_hódroom
(
skb
Ë< 
∑dsize
)

2256  -
ENOMEM
;

2258 
	`skb_push
(
skb
, 
∑dsize
);

2259 
	`memmove
(
skb
->
d©a
, skb->d©®+ 
∑dsize
, 
∑dpos
);

2262 
	`£tup_‰ame_öfo
(
hw
, 
°a
, 
skb
, 
‰mÀn
);

2264 
	}
}

2268 
	$©h_tx_°¨t
(
õì80211_hw
 *
hw
, 
sk_buff
 *
skb
,

2269 
©h_tx_c⁄åﬁ
 *
tx˘l
)

2271 
õì80211_hdr
 *
hdr
;

2272 
õì80211_tx_öfo
 *
öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2273 
õì80211_°a
 *
°a
 = 
tx˘l
->sta;

2274 
õì80211_vif
 *
vif
 = 
öfo
->
c⁄åﬁ
.vif;

2275 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

2276 
©h_vif
 *
avp
 = 
NULL
;

2277 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2278 
©h_txq
 *
txq
 = 
tx˘l
->txq;

2279 
©h_©x_tid
 *
tid
 = 
NULL
;

2280 
©h_buf
 *
bf
;

2281 
boﬁ
 
queue
, 
skù_u≠sd
 = 
Ál£
, 
ps_ª•
;

2282 
q
, 
ªt
;

2284 i‡(
vif
)

2285 
avp
 = (*)
vif
->
drv_¥iv
;

2287 i‡(
öfo
->
Êags
 & 
IEEE80211_TX_CTL_TX_OFFCHAN
)

2288 
tx˘l
->
f‹˚_ch™√l
 = 
åue
;

2290 
ps_ª•
 = !!(
öfo
->
c⁄åﬁ
.
Êags
 & 
IEEE80211_TX_CTRL_PS_RESPONSE
);

2292 
ªt
 = 
	`©h_tx_¥ï¨e
(
hw
, 
skb
, 
tx˘l
);

2293 i‡(
ªt
)

2294  
ªt
;

2296 
hdr
 = (
õì80211_hdr
 *Ë
skb
->
d©a
;

2302 
q
 = 
	`skb_gë_queue_m≠pög
(
skb
);

2304 
	`©h_txq_lock
(
sc
, 
txq
);

2305 i‡(
txq
 =
sc
->
tx
.
txq_m≠
[
q
]) {

2306 
fi
->
txq
 = 
q
;

2307 i‡(++
txq
->
≥ndög_‰ames
 > 
sc
->
tx
.
txq_max_≥ndög
[
q
] &&

2308 !
txq
->
°›≥d
) {

2309 i‡(
	`©h9k_is_ch™˘x_íabÀd
())

2310 
	`õì80211_°›_queue
(
sc
->
hw
, 
öfo
->
hw_queue
);

2312 
	`õì80211_°›_queue
(
sc
->
hw
, 
q
);

2313 
txq
->
°›≥d
 = 
åue
;

2317 
queue
 = 
	`õì80211_is_d©a_¥e£¡
(
hdr
->
‰ame_c⁄åﬁ
);

2323 i‡(((
avp
 &&ávp->
ch™˘x
 !
sc
->
cur_ch™
) ||

2324 
sc
->
cur_ch™
->
°›≥d
Ë&& !
tx˘l
->
f‹˚_ch™√l
) {

2325 i‡(!
tx˘l
->
™
)

2326 
tx˘l
->
™
 = &
avp
->
mˇ°_node
;

2327 
queue
 = 
åue
;

2328 
skù_u≠sd
 = 
åue
;

2331 i‡(
tx˘l
->
™
 && 
queue
)

2332 
tid
 = 
	`©h_gë_skb_tid
(
sc
, 
tx˘l
->
™
, 
skb
);

2334 i‡(!
skù_u≠sd
 && 
ps_ª•
) {

2335 
	`©h_txq_u∆ock
(
sc
, 
txq
);

2336 
txq
 = 
sc
->
tx
.
u≠sdq
;

2337 
	`©h_txq_lock
(
sc
, 
txq
);

2338 } i‡(
tx˘l
->
™
 && 
queue
) {

2339 
	`WARN_ON
(
tid
->
txq
 !
tx˘l
->txq);

2341 i‡(
öfo
->
Êags
 & 
IEEE80211_TX_CTL_CLEAR_PS_FILT
)

2342 
tid
->
˛ór_ps_fûãr
 = 
åue
;

2348 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
a_queued_sw
);

2349 
	`__skb_queue_èû
(&
tid
->
buf_q
, 
skb
);

2350 i‡(!
tx˘l
->
™
->
¶ìpög
)

2351 
	`©h_tx_queue_tid
(
sc
, 
txq
, 
tid
);

2353 
	`©h_txq_scheduÀ
(
sc
, 
txq
);

2354 
out
;

2357 
bf
 = 
	`©h_tx_£tup_buf„r
(
sc
, 
txq
, 
tid
, 
skb
);

2358 i‡(!
bf
) {

2359 
	`©h_txq_skb_d⁄e
(
sc
, 
txq
, 
skb
);

2360 i‡(
tx˘l
->
∑¥d
)

2361 
	`dev_k‰ì_skb_™y
(
skb
);

2363 
	`õì80211_‰ì_txskb
(
sc
->
hw
, 
skb
);

2364 
out
;

2367 
bf
->
bf_°©e
.
bfs_∑¥d
 = 
tx˘l
->
∑¥d
;

2369 i‡(
tx˘l
->
∑¥d
)

2370 
bf
->
bf_°©e
.
bfs_∑¥d_time°amp
 = 
jiffõs
;

2372 
	`©h_£t_øãs
(
vif
, 
°a
, 
bf
);

2373 
	`©h_tx_£nd_n‹mÆ
(
sc
, 
txq
, 
tid
, 
skb
);

2375 
out
:

2376 
	`©h_txq_u∆ock
(
sc
, 
txq
);

2379 
	}
}

2381 
	$©h_tx_ˇbq
(
õì80211_hw
 *
hw
, 
õì80211_vif
 *
vif
,

2382 
sk_buff
 *
skb
)

2384 
©h_so·c
 *
sc
 = 
hw
->
¥iv
;

2385 
©h_tx_c⁄åﬁ
 
tx˘l
 = {

2386 .
txq
 = 
sc
->
bóc⁄
.
ˇbq


2388 
©h_tx_öfo
 
öfo
 = {};

2389 
õì80211_hdr
 *
hdr
;

2390 
©h_buf
 *
bf_èû
 = 
NULL
;

2391 
©h_buf
 *
bf
;

2392 
	`LIST_HEAD
(
bf_q
);

2393 
duøti⁄
 = 0;

2394 
max_duøti⁄
;

2396 
max_duøti⁄
 =

2397 
sc
->
cur_ch™
->
bóc⁄
.
bóc⁄_öãrvÆ
 * 1000 *

2398 
sc
->
cur_ch™
->
bóc⁄
.
dtim_≥riod
 / 
ATH_BCBUF
;

2401 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

2403 i‡(
	`©h_tx_¥ï¨e
(
hw
, 
skb
, &
tx˘l
))

2406 
bf
 = 
	`©h_tx_£tup_buf„r
(
sc
, 
tx˘l
.
txq
, 
NULL
, 
skb
);

2407 i‡(!
bf
)

2410 
bf
->
bf_œ°bf
 = bf;

2411 
	`©h_£t_øãs
(
vif
, 
NULL
, 
bf
);

2412 
	`©h_buf_£t_øã
(
sc
, 
bf
, &
öfo
, 
fi
->
‰amñí
, 
Ál£
);

2413 
duøti⁄
 +
öfo
.
øãs
[0].
PktDuøti⁄
;

2414 i‡(
bf_èû
)

2415 
bf_èû
->
bf_√xt
 = 
bf
;

2417 
	`li°_add_èû
(&
bf
->
li°
, &
bf_q
);

2418 
bf_èû
 = 
bf
;

2419 
skb
 = 
NULL
;

2421 i‡(
duøti⁄
 > 
max_duøti⁄
)

2424 
skb
 = 
	`õì80211_gë_buf„ªd_bc
(
hw
, 
vif
);

2425 } 
skb
);

2427 i‡(
skb
)

2428 
	`õì80211_‰ì_txskb
(
hw
, 
skb
);

2430 i‡(
	`li°_em±y
(&
bf_q
))

2433 
bf
 = 
	`li°_fú°_íåy
(&
bf_q
, 
©h_buf
, 
li°
);

2434 
hdr
 = (
õì80211_hdr
 *Ë
bf
->
bf_mpdu
->
d©a
;

2436 i‡(
hdr
->
‰ame_c⁄åﬁ
 & 
	`˝u_to_À16
(
IEEE80211_FCTL_MOREDATA
)) {

2437 
hdr
->
‰ame_c⁄åﬁ
 &~
	`˝u_to_À16
(
IEEE80211_FCTL_MOREDATA
);

2438 
	`dma_sync_sögÀ_f‹_devi˚
(
sc
->
dev
, 
bf
->
bf_buf_addr
,

2439 (*
hdr
), 
DMA_TO_DEVICE
);

2442 
	`©h_txq_lock
(
sc
, 
tx˘l
.
txq
);

2443 
	`©h_tx_fûl_desc
(
sc
, 
bf
, 
tx˘l
.
txq
, 0);

2444 
	`©h_tx_txqaddbuf
(
sc
, 
tx˘l
.
txq
, &
bf_q
, 
Ál£
);

2445 
	`TX_STAT_INC
(
tx˘l
.
txq
->
axq_qnum
, 
queued
);

2446 
	`©h_txq_u∆ock
(
sc
, 
tx˘l
.
txq
);

2447 
	}
}

2453 
	$©h_tx_com∂ëe
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
,

2454 
tx_Êags
, 
©h_txq
 *
txq
)

2456 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2457 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2458 
õì80211_hdr
 * 
hdr
 = (õì80211_hd∏*)
skb
->
d©a
;

2459 
∑dpos
, 
∑dsize
;

2460 
Êags
;

2462 
	`©h_dbg
(
comm⁄
, 
XMIT
, "TX com∂ëe: skb: %p\n", 
skb
);

2464 i‡(
sc
->
sc_ah
->
ˇld©a
)

2465 
	`£t_bô
(
PAPRD_PACKET_SENT
, &
sc
->
sc_ah
->
ˇld©a
->
ˇl_Êags
);

2467 i‡(!(
tx_Êags
 & 
ATH_TX_ERROR
)) {

2468 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_NO_ACK
)

2469 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_NOACK_TRANSMITTED
;

2471 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_ACK
;

2474 
∑dpos
 = 
	`õì80211_hdæí
(
hdr
->
‰ame_c⁄åﬁ
);

2475 
∑dsize
 = 
∑dpos
 & 3;

2476 i‡(
∑dsize
 && 
skb
->
Àn
>
∑dpos
+padsize) {

2481 
	`memmove
(
skb
->
d©a
 + 
∑dsize
, skb->d©a, 
∑dpos
);

2482 
	`skb_puŒ
(
skb
, 
∑dsize
);

2485 
	`•ö_lock_úqßve
(&
sc
->
sc_pm_lock
, 
Êags
);

2486 i‡((
sc
->
ps_Êags
 & 
PS_WAIT_FOR_TX_ACK
Ë&& !
txq
->
axq_dïth
) {

2487 
sc
->
ps_Êags
 &~
PS_WAIT_FOR_TX_ACK
;

2488 
	`©h_dbg
(
comm⁄
, 
PS
,

2490 
sc
->
ps_Êags
 & (
PS_WAIT_FOR_BEACON
 |

2491 
PS_WAIT_FOR_CAB
 |

2492 
PS_WAIT_FOR_PSPOLL_DATA
 |

2493 
PS_WAIT_FOR_TX_ACK
));

2495 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
sc_pm_lock
, 
Êags
);

2497 
	`__skb_queue_èû
(&
txq
->
com∂ëe_q
, 
skb
);

2498 
	`©h_txq_skb_d⁄e
(
sc
, 
txq
, 
skb
);

2499 
	}
}

2501 
	$©h_tx_com∂ëe_buf
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

2502 
©h_txq
 *
txq
, 
li°_hód
 *
bf_q
,

2503 
©h_tx_°©us
 *
ts
, 
txok
)

2505 
sk_buff
 *
skb
 = 
bf
->
bf_mpdu
;

2506 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2507 
Êags
;

2508 
tx_Êags
 = 0;

2510 i‡(!
txok
)

2511 
tx_Êags
 |
ATH_TX_ERROR
;

2513 i‡(
ts
->
ts_°©us
 & 
ATH9K_TXERR_FILT
)

2514 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_TX_FILTERED
;

2516 
	`dma_unm≠_sögÀ
(
sc
->
dev
, 
bf
->
bf_buf_addr
, 
skb
->
Àn
, 
DMA_TO_DEVICE
);

2517 
bf
->
bf_buf_addr
 = 0;

2518 i‡(
sc
->
tx99_°©e
)

2519 
skù_tx_com∂ëe
;

2521 i‡(
bf
->
bf_°©e
.
bfs_∑¥d
) {

2522 i‡(
	`time_a·î
(
jiffõs
,

2523 
bf
->
bf_°©e
.
bfs_∑¥d_time°amp
 +

2524 
	`m£cs_to_jiffõs
(
ATH_PAPRD_TIMEOUT
)))

2525 
	`dev_k‰ì_skb_™y
(
skb
);

2527 
	`com∂ëe
(&
sc
->
∑¥d_com∂ëe
);

2529 
	`©h_debug_°©_tx
(
sc
, 
bf
, 
ts
, 
txq
, 
tx_Êags
);

2530 
	`©h_tx_com∂ëe
(
sc
, 
skb
, 
tx_Êags
, 
txq
);

2532 
skù_tx_com∂ëe
:

2536 
bf
->
bf_mpdu
 = 
NULL
;

2541 
	`•ö_lock_úqßve
(&
sc
->
tx
.
txbuÊock
, 
Êags
);

2542 
	`li°_•li˚_èû_öô
(
bf_q
, &
sc
->
tx
.
txbuf
);

2543 
	`•ö_u∆ock_úqª°‹e
(&
sc
->
tx
.
txbuÊock
, 
Êags
);

2544 
	}
}

2546 
	$©h_tx_rc_°©us
(
©h_so·c
 *
sc
, 
©h_buf
 *
bf
,

2547 
©h_tx_°©us
 *
ts
, 
n‰ames
, 
nbad
,

2548 
txok
)

2550 
sk_buff
 *
skb
 = 
bf
->
bf_mpdu
;

2551 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*)
skb
->
d©a
;

2552 
õì80211_tx_öfo
 *
tx_öfo
 = 
	`IEEE80211_SKB_CB
(
skb
);

2553 
õì80211_hw
 *
hw
 = 
sc
->hw;

2554 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2555 
u8
 
i
, 
tx_øãödex
;

2557 i‡(
txok
)

2558 
tx_öfo
->
°©us
.
ack_sig«l
 = 
ts
->
ts_rssi
;

2560 
tx_øãödex
 = 
ts
->
ts_øãödex
;

2561 
	`WARN_ON
(
tx_øãödex
 >
hw
->
max_øãs
);

2563 i‡(
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_AMPDU
) {

2564 
tx_öfo
->
Êags
 |
IEEE80211_TX_STAT_AMPDU
;

2566 
	`BUG_ON
(
nbad
 > 
n‰ames
);

2568 
tx_öfo
->
°©us
.
ampdu_Àn
 = 
n‰ames
;

2569 
tx_öfo
->
°©us
.
ampdu_ack_Àn
 = 
n‰ames
 - 
nbad
;

2571 i‡((
ts
->
ts_°©us
 & 
ATH9K_TXERR_FILT
) == 0 &&

2572 (
tx_öfo
->
Êags
 & 
IEEE80211_TX_CTL_NO_ACK
) == 0) {

2585 i‡(
	`u∆ikñy
(
ts
->
ts_Êags
 & (
ATH9K_TX_DATA_UNDERRUN
 |

2586 
ATH9K_TX_DELIM_UNDERRUN
)) &&

2587 
	`õì80211_is_d©a
(
hdr
->
‰ame_c⁄åﬁ
) &&

2588 
ah
->
tx_åig_Àvñ
 >
sc
->
sc_ah
->
c⁄fig
.
max_txåig_Àvñ
)

2589 
tx_öfo
->
°©us
.
øãs
[
tx_øãödex
].
cou¡
 =

2590 
hw
->
max_øã_åõs
;

2593 
i
 = 
tx_øãödex
 + 1; i < 
hw
->
max_øãs
; i++) {

2594 
tx_öfo
->
°©us
.
øãs
[
i
].
cou¡
 = 0;

2595 
tx_öfo
->
°©us
.
øãs
[
i
].
idx
 = -1;

2598 
tx_öfo
->
°©us
.
øãs
[
tx_øãödex
].
cou¡
 = 
ts
->
ts_l⁄gªåy
 + 1;

2599 
	}
}

2601 
	$©h_tx_¥o˚ssq
(
©h_so·c
 *
sc
, 
©h_txq
 *
txq
)

2603 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2604 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
ah
);

2605 
©h_buf
 *
bf
, *
œ°bf
, *
bf_hñd
 = 
NULL
;

2606 
li°_hód
 
bf_hód
;

2607 
©h_desc
 *
ds
;

2608 
©h_tx_°©us
 
ts
;

2609 
°©us
;

2611 
	`©h_dbg
(
comm⁄
, 
QUEUE
, "tx queue %d (%x),Üink %p\n",

2612 
txq
->
axq_qnum
, 
	`©h9k_hw_gëtxbuf
(
sc
->
sc_ah
,Åxq->axq_qnum),

2613 
txq
->
axq_lök
);

2615 
	`©h_txq_lock
(
sc
, 
txq
);

2617 i‡(
	`ã°_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
))

2620 i‡(
	`li°_em±y
(&
txq
->
axq_q
)) {

2621 
txq
->
axq_lök
 = 
NULL
;

2622 
	`©h_txq_scheduÀ
(
sc
, 
txq
);

2625 
bf
 = 
	`li°_fú°_íåy
(&
txq
->
axq_q
, 
©h_buf
, 
li°
);

2635 
bf_hñd
 = 
NULL
;

2636 i‡(
bf
->
bf_°©e
.
°Æe
) {

2637 
bf_hñd
 = 
bf
;

2638 i‡(
	`li°_is_œ°
(&
bf_hñd
->
li°
, &
txq
->
axq_q
))

2641 
bf
 = 
	`li°_íåy
(
bf_hñd
->
li°
.
√xt
, 
©h_buf
,

2642 
li°
);

2645 
œ°bf
 = 
bf
->
bf_œ°bf
;

2646 
ds
 = 
œ°bf
->
bf_desc
;

2648 
	`mem£t
(&
ts
, 0, (ts));

2649 
°©us
 = 
	`©h9k_hw_tx¥ocdesc
(
ah
, 
ds
, &
ts
);

2650 i‡(
°©us
 =-
EINPROGRESS
)

2653 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
tx¥ocdesc
);

2660 
œ°bf
->
bf_°©e
.
°Æe
 = 
åue
;

2661 
	`INIT_LIST_HEAD
(&
bf_hód
);

2662 i‡(!
	`li°_is_söguœr
(&
œ°bf
->
li°
))

2663 
	`li°_cut_posôi⁄
(&
bf_hód
,

2664 &
txq
->
axq_q
, 
œ°bf
->
li°
.
¥ev
);

2666 i‡(
bf_hñd
) {

2667 
	`li°_dñ
(&
bf_hñd
->
li°
);

2668 
	`©h_tx_ªtu∫_buf„r
(
sc
, 
bf_hñd
);

2671 
	`©h_tx_¥o˚ss_buf„r
(
sc
, 
txq
, &
ts
, 
bf
, &
bf_hód
);

2673 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

2674 
	}
}

2676 
	$©h_tx_èskÀt
(
©h_so·c
 *
sc
)

2678 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2679 
u32
 
qcumask
 = ((1 << 
ATH9K_NUM_TX_QUEUES
Ë- 1Ë& 
ah
->
öå_txqs
;

2680 
i
;

2682 
i
 = 0; i < 
ATH9K_NUM_TX_QUEUES
; i++) {

2683 i‡(
	`ATH_TXQ_SETUP
(
sc
, 
i
Ë&& (
qcumask
 & (1 << i)))

2684 
	`©h_tx_¥o˚ssq
(
sc
, &sc->
tx
.
txq
[
i
]);

2686 
	}
}

2688 
	$©h_tx_edma_èskÀt
(
©h_so·c
 *
sc
)

2690 
©h_tx_°©us
 
ts
;

2691 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2692 
©h_hw
 *
ah
 = 
sc
->
sc_ah
;

2693 
©h_txq
 *
txq
;

2694 
©h_buf
 *
bf
, *
œ°bf
;

2695 
li°_hód
 
bf_hód
;

2696 
li°_hód
 *
fifo_li°
;

2697 
°©us
;

2700 i‡(
	`ã°_bô
(
ATH_OP_HW_RESET
, &
comm⁄
->
›_Êags
))

2703 
°©us
 = 
	`©h9k_hw_tx¥ocdesc
(
ah
, 
NULL
, (*)&
ts
);

2704 i‡(
°©us
 =-
EINPROGRESS
)

2706 i‡(
°©us
 =-
EIO
) {

2707 
	`©h_dbg
(
comm⁄
, 
XMIT
, "ErrorÖrocessingÅx status\n");

2712 i‡(
ts
.
qid
 =
sc
->
bóc⁄
.
bóc⁄q
) {

2713 
sc
->
bóc⁄
.
tx_¥o˚s£d
 = 
åue
;

2714 
sc
->
bóc⁄
.
tx_œ°
 = !(
ts
.
ts_°©us
 & 
ATH9K_TXERR_MASK
);

2716 i‡(
	`©h9k_is_ch™˘x_íabÀd
()) {

2717 
	`©h_ch™˘x_evít
(
sc
, 
NULL
,

2718 
ATH_CHANCTX_EVENT_BEACON_SENT
);

2721 
	`©h9k_cß_upd©e
(
sc
);

2725 
txq
 = &
sc
->
tx
.txq[
ts
.
qid
];

2727 
	`©h_txq_lock
(
sc
, 
txq
);

2729 
	`TX_STAT_INC
(
txq
->
axq_qnum
, 
tx¥ocdesc
);

2731 
fifo_li°
 = &
txq
->
txq_fifo
[txq->
txq_èûidx
];

2732 i‡(
	`li°_em±y
(
fifo_li°
)) {

2733 
	`©h_txq_u∆ock
(
sc
, 
txq
);

2737 
bf
 = 
	`li°_fú°_íåy
(
fifo_li°
, 
©h_buf
, 
li°
);

2738 i‡(
bf
->
bf_°©e
.
°Æe
) {

2739 
	`li°_dñ
(&
bf
->
li°
);

2740 
	`©h_tx_ªtu∫_buf„r
(
sc
, 
bf
);

2741 
bf
 = 
	`li°_fú°_íåy
(
fifo_li°
, 
©h_buf
, 
li°
);

2744 
œ°bf
 = 
bf
->
bf_œ°bf
;

2746 
	`INIT_LIST_HEAD
(&
bf_hód
);

2747 i‡(
	`li°_is_œ°
(&
œ°bf
->
li°
, 
fifo_li°
)) {

2748 
	`li°_•li˚_èû_öô
(
fifo_li°
, &
bf_hód
);

2749 
	`INCR
(
txq
->
txq_èûidx
, 
ATH_TXFIFO_DEPTH
);

2751 i‡(!
	`li°_em±y
(&
txq
->
axq_q
)) {

2752 
li°_hód
 
bf_q
;

2754 
	`INIT_LIST_HEAD
(&
bf_q
);

2755 
txq
->
axq_lök
 = 
NULL
;

2756 
	`li°_•li˚_èû_öô
(&
txq
->
axq_q
, &
bf_q
);

2757 
	`©h_tx_txqaddbuf
(
sc
, 
txq
, &
bf_q
, 
åue
);

2760 
œ°bf
->
bf_°©e
.
°Æe
 = 
åue
;

2761 i‡(
bf
 !
œ°bf
)

2762 
	`li°_cut_posôi⁄
(&
bf_hód
, 
fifo_li°
,

2763 
œ°bf
->
li°
.
¥ev
);

2766 
	`©h_tx_¥o˚ss_buf„r
(
sc
, 
txq
, &
ts
, 
bf
, &
bf_hód
);

2767 
	`©h_txq_u∆ock_com∂ëe
(
sc
, 
txq
);

2769 
	}
}

2775 
	$©h_tx°©us_£tup
(
©h_so·c
 *
sc
, 
size
)

2777 
©h_descdma
 *
dd
 = &
sc
->
txsdma
;

2778 
u8
 
txs_Àn
 = 
sc
->
sc_ah
->
ˇps
.txs_len;

2780 
dd
->
dd_desc_Àn
 = 
size
 * 
txs_Àn
;

2781 
dd
->
dd_desc
 = 
	`dmam_Æloc_cohîít
(
sc
->
dev
, dd->
dd_desc_Àn
,

2782 &
dd
->
dd_desc_∑ddr
, 
GFP_KERNEL
);

2783 i‡(!
dd
->
dd_desc
)

2784  -
ENOMEM
;

2787 
	}
}

2789 
	$©h_tx_edma_öô
(
©h_so·c
 *
sc
)

2791 
îr
;

2793 
îr
 = 
	`©h_tx°©us_£tup
(
sc
, 
ATH_TXSTATUS_RING_SIZE
);

2794 i‡(!
îr
)

2795 
	`©h9k_hw_£tup_°©u§ög
(
sc
->
sc_ah
, sc->
txsdma
.
dd_desc
,

2796 
sc
->
txsdma
.
dd_desc_∑ddr
,

2797 
ATH_TXSTATUS_RING_SIZE
);

2799  
îr
;

2800 
	}
}

2802 
	$©h_tx_öô
(
©h_so·c
 *
sc
, 
nbufs
)

2804 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2805 
îr‹
 = 0;

2807 
	`•ö_lock_öô
(&
sc
->
tx
.
txbuÊock
);

2809 
îr‹
 = 
	`©h_descdma_£tup
(
sc
, &sc->
tx
.
txdma
, &sc->tx.
txbuf
,

2810 "tx", 
nbufs
, 1, 1);

2811 i‡(
îr‹
 != 0) {

2812 
	`©h_îr
(
comm⁄
,

2813 "FaûedÅÿÆloˇãÅx des¸ùt‹s: %d\n", 
îr‹
);

2814  
îr‹
;

2817 
îr‹
 = 
	`©h_descdma_£tup
(
sc
, &sc->
bóc⁄
.
bdma
, &sc->bóc⁄.
bbuf
,

2818 "bóc⁄", 
ATH_BCBUF
, 1, 1);

2819 i‡(
îr‹
 != 0) {

2820 
	`©h_îr
(
comm⁄
,

2821 "FaûedÅÿÆloˇã bóc⁄ des¸ùt‹s: %d\n", 
îr‹
);

2822  
îr‹
;

2825 
	`INIT_DELAYED_WORK
(&
sc
->
tx_com∂ëe_w‹k
, 
©h_tx_com∂ëe_pﬁl_w‹k
);

2827 i‡(
sc
->
sc_ah
->
ˇps
.
hw_ˇps
 & 
ATH9K_HW_CAP_EDMA
)

2828 
îr‹
 = 
	`©h_tx_edma_öô
(
sc
);

2830  
îr‹
;

2831 
	}
}

2833 
	$©h_tx_node_öô
(
©h_so·c
 *
sc
, 
©h_node
 *
™
)

2835 
©h_©x_tid
 *
tid
;

2836 
tidno
, 
a˙o
;

2838 
tidno
 = 0, 
tid
 = &
™
->tid[tidno];

2839 
tidno
 < 
IEEE80211_NUM_TIDS
;

2840 
tidno
++, 
tid
++) {

2841 
tid
->
™
 =án;

2842 
tid
->
tidno
 =Åidno;

2843 
tid
->
£q_°¨t
 =Åid->
£q_√xt
 = 0;

2844 
tid
->
baw_size
 = 
WME_MAX_BA
;

2845 
tid
->
baw_hód
 =Åid->
baw_èû
 = 0;

2846 
tid
->
a˘ive
 = 
Ál£
;

2847 
tid
->
˛ór_ps_fûãr
 = 
åue
;

2848 
	`__skb_queue_hód_öô
(&
tid
->
buf_q
);

2849 
	`__skb_queue_hód_öô
(&
tid
->
ªåy_q
);

2850 
	`INIT_LIST_HEAD
(&
tid
->
li°
);

2851 
a˙o
 = 
	`TID_TO_WME_AC
(
tidno
);

2852 
tid
->
txq
 = 
sc
->
tx
.
txq_m≠
[
a˙o
];

2854 
	}
}

2856 
	$©h_tx_node_˛ónup
(
©h_so·c
 *
sc
, 
©h_node
 *
™
)

2858 
©h_©x_tid
 *
tid
;

2859 
©h_txq
 *
txq
;

2860 
tidno
;

2862 
tidno
 = 0, 
tid
 = &
™
->tid[tidno];

2863 
tidno
 < 
IEEE80211_NUM_TIDS
;Åidno++, 
tid
++) {

2865 
txq
 = 
tid
->txq;

2867 
	`©h_txq_lock
(
sc
, 
txq
);

2869 i‡(!
	`li°_em±y
(&
tid
->
li°
))

2870 
	`li°_dñ_öô
(&
tid
->
li°
);

2872 
	`©h_tid_døö
(
sc
, 
txq
, 
tid
);

2873 
tid
->
a˘ive
 = 
Ál£
;

2875 
	`©h_txq_u∆ock
(
sc
, 
txq
);

2877 
	}
}

2879 #ifde‡
CONFIG_ATH9K_TX99


2881 
	$©h9k_tx99_£nd
(
©h_so·c
 *
sc
, 
sk_buff
 *
skb
,

2882 
©h_tx_c⁄åﬁ
 *
tx˘l
)

2884 
õì80211_hdr
 *
hdr
 = (õì80211_hd∏*Ë
skb
->
d©a
;

2885 
©h_‰ame_öfo
 *
fi
 = 
	`gë_‰ame_öfo
(
skb
);

2886 
©h_comm⁄
 *
comm⁄
 = 
	`©h9k_hw_comm⁄
(
sc
->
sc_ah
);

2887 
©h_buf
 *
bf
;

2888 
∑dpos
, 
∑dsize
;

2890 
∑dpos
 = 
	`õì80211_hdæí
(
hdr
->
‰ame_c⁄åﬁ
);

2891 
∑dsize
 = 
∑dpos
 & 3;

2893 i‡(
∑dsize
 && 
skb
->
Àn
 > 
∑dpos
) {

2894 i‡(
	`skb_hódroom
(
skb
Ë< 
∑dsize
) {

2895 
	`©h_dbg
(
comm⁄
, 
XMIT
,

2897  -
EINVAL
;

2900 
	`skb_push
(
skb
, 
∑dsize
);

2901 
	`memmove
(
skb
->
d©a
, skb->d©®+ 
∑dsize
, 
∑dpos
);

2904 
fi
->
keyix
 = 
ATH9K_TXKEYIX_INVALID
;

2905 
fi
->
‰amñí
 = 
skb
->
Àn
 + 
FCS_LEN
;

2906 
fi
->
keyty≥
 = 
ATH9K_KEY_TYPE_CLEAR
;

2908 
bf
 = 
	`©h_tx_£tup_buf„r
(
sc
, 
tx˘l
->
txq
, 
NULL
, 
skb
);

2909 i‡(!
bf
) {

2910 
	`©h_dbg
(
comm⁄
, 
XMIT
, "tx99 buffer setup failed\n");

2911  -
EINVAL
;

2914 
	`©h_£t_øãs
(
sc
->
tx99_vif
, 
NULL
, 
bf
);

2916 
	`©h9k_hw_£t_desc_lök
(
sc
->
sc_ah
, 
bf
->
bf_desc
, bf->
bf_daddr
);

2917 
	`©h9k_hw_tx99_°¨t
(
sc
->
sc_ah
, 
tx˘l
->
txq
->
axq_qnum
);

2919 
	`©h_tx_£nd_n‹mÆ
(
sc
, 
tx˘l
->
txq
, 
NULL
, 
skb
);

2922 
	}
}

	@../ath.h

17 #i‚de‡
ATH_H


18 
	#ATH_H


	)

20 
	~<löux/ëhîdevi˚.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<löux/•ölock.h
>

24 
	~<√t/mac80211.h
>

34 
	#ATH_KEYMAX
 128

	)

36 c⁄° 
u8
 
	g©h_bˇ°_mac
[
ETH_ALEN
] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

38 
	s©h_™i
 {

39 
boﬁ
 
	mˇld⁄e
;

40 
	ml⁄gˇl_timî
;

41 
	msh‹tˇl_timî
;

42 
	mª£tˇl_timî
;

43 
	mcheck™i_timî
;

44 
timî_li°
 
	mtimî
;

47 
	s©h_cy˛e_cou¡îs
 {

48 
u32
 
	mcy˛es
;

49 
u32
 
	mrx_busy
;

50 
u32
 
	mrx_‰ame
;

51 
u32
 
	mtx_‰ame
;

54 
	e©h_devi˚_°©e
 {

55 
	mATH_HW_UNAVAILABLE
,

56 
	mATH_HW_INITIALIZED
,

59 
	e©h_›_Êags
 {

60 
	mATH_OP_INVALID
,

61 
	mATH_OP_BEACONS
,

62 
	mATH_OP_ANI_RUN
,

63 
	mATH_OP_PRIM_STA_VIF
,

64 
	mATH_OP_HW_RESET
,

65 
	mATH_OP_SCANNING
,

66 
	mATH_OP_MULTI_CHANNEL
,

67 
	mATH_OP_WOW_ENABLED
,

70 
	e©h_bus_ty≥
 {

71 
	mATH_PCI
,

72 
	mATH_AHB
,

73 
	mATH_USB
,

76 
	sªg_dmn_∑ú_m≠pög
 {

77 
u16
 
	mªg_domaö
;

78 
u16
 
	mªg_5ghz_˘l
;

79 
u16
 
	mªg_2ghz_˘l
;

82 
	s©h_ªguœt‹y
 {

83 
	mÆpha2
[2];

84 
∆80211_dfs_ªgi⁄s
 
	mªgi⁄
;

85 
u16
 
	mcou¡ry_code
;

86 
u16
 
	mmax_powî_Àvñ
;

87 
u16
 
	mcuºít_rd
;

88 
öt16_t
 
	mpowî_limô
;

89 
ªg_dmn_∑ú_m≠pög
 *
	mªg∑ú
;

92 
	e©h_¸y±_ˇps
 {

93 
	mATH_CRYPT_CAP_CIPHER_AESCCM
 = 
BIT
(0),

94 
	mATH_CRYPT_CAP_MIC_COMBINED
 = 
BIT
(1),

97 
	s©h_keyvÆ
 {

98 
u8
 
	mkv_ty≥
;

99 
u8
 
	mkv_∑d
;

100 
u16
 
	mkv_Àn
;

101 
u8
 
	mkv_vÆ
[16];

102 
u8
 
	mkv_mic
[8];

103 
u8
 
	mkv_txmic
[8];

108 
	e©h_cùhî
 {

109 
	mATH_CIPHER_WEP
 = 0,

110 
	mATH_CIPHER_AES_OCB
 = 1,

111 
	mATH_CIPHER_AES_CCM
 = 2,

112 
	mATH_CIPHER_CKIP
 = 3,

113 
	mATH_CIPHER_TKIP
 = 4,

114 
	mATH_CIPHER_CLR
 = 5,

115 
	mATH_CIPHER_MIC
 = 127

127 
	s©h_›s
 {

128 (*
	mªad
)(*, 
u32
 
	mªg_off£t
);

129 (*
	mmu…i_ªad
)(*, 
u32
 *
	maddr
, u32 *
	mvÆ
, 
u16
 
	mcou¡
);

130 (*
	mwrôe
)(*, 
u32
 
	mvÆ
, u32 
	mªg_off£t
);

131 (*
	míabÀ_wrôe_buf„r
)(*);

132 (*
	mwrôe_Êush
) (*);

133 
u32
 (*
rmw
)(*, u32 
	mªg_off£t
, u32 
	m£t
, u32 
	m˛r
);

134 (*
	míabÀ_rmw_buf„r
)(*);

135 (*
	mrmw_Êush
) (*);

139 
	g©h_comm⁄
;

140 
	g©h_bus_›s
;

142 
	s©h_ps_›s
 {

143 (*
	mwakeup
)(
©h_comm⁄
 *
	mcomm⁄
);

144 (*
	mª°‹e
)(
©h_comm⁄
 *
	mcomm⁄
);

147 
	s©h_comm⁄
 {

148 *
	mah
;

149 *
	m¥iv
;

150 
õì80211_hw
 *
	mhw
;

151 
	mdebug_mask
;

152 
©h_devi˚_°©e
 
	m°©e
;

153 
	m›_Êags
;

155 
©h_™i
 
	m™i
;

157 
u16
 
	mˇchñsz
;

158 
u16
 
	mcuøid
;

159 
u8
 
	mmaˇddr
[
ETH_ALEN
];

160 
u8
 
	mcurbssid
[
ETH_ALEN
] 
__Æig√d
(2);

161 
u8
 
	mbssidmask
[
ETH_ALEN
];

163 
u32
 
	mrx_bufsize
;

165 
u32
 
	mkeymax
;

166 
DECLARE_BITMAP
(
keym≠
, 
ATH_KEYMAX
);

167 
DECLARE_BITMAP
(
tkù_keym≠
, 
ATH_KEYMAX
);

168 
DECLARE_BITMAP
(
ccmp_keym≠
, 
ATH_KEYMAX
);

169 
©h_¸y±_ˇps
 
	m¸y±_ˇps
;

171 
	m˛ockøã
;

173 
•ölock_t
 
	mcc_lock
;

174 
©h_cy˛e_cou¡îs
 
	mcc_™i
;

175 
©h_cy˛e_cou¡îs
 
	mcc_survey
;

177 
©h_ªguœt‹y
 
	mªguœt‹y
;

178 
©h_ªguœt‹y
 
	mªg_w‹ld_c›y
;

179 c⁄° 
©h_›s
 *
	m›s
;

180 c⁄° 
©h_bus_›s
 *
	mbus_›s
;

181 c⁄° 
©h_ps_›s
 *
	mps_›s
;

183 
boﬁ
 
	mbtc€x_íabÀd
;

184 
boﬁ
 
	mdißbÀ_™i
;

185 
boﬁ
 
	mbt_™t_divîsôy
;

187 
	mœ°_rssi
;

188 
õì80211_suµ‹ãd_b™d
 
	msb™ds
[
IEEE80211_NUM_BANDS
];

191 
ölöe
 c⁄° 
©h_ps_›s
 *
	$©h_ps_›s
(
©h_comm⁄
 *
comm⁄
)

193  
comm⁄
->
ps_›s
;

194 
	}
}

196 
sk_buff
 *
©h_rxbuf_Æloc
(
©h_comm⁄
 *
comm⁄
,

197 
u32
 
Àn
,

198 
gÂ_t
 
gÂ_mask
);

199 
boﬁ
 
©h_is_mybóc⁄
(
©h_comm⁄
 *
comm⁄
, 
õì80211_hdr
 *
hdr
);

201 
©h_hw_£tbssidmask
(
©h_comm⁄
 *
comm⁄
);

202 
©h_key_dñëe
(
©h_comm⁄
 *
comm⁄
, 
õì80211_key_c⁄f
 *
key
);

203 
©h_key_c⁄fig
(
©h_comm⁄
 *
comm⁄
,

204 
õì80211_vif
 *
vif
,

205 
õì80211_°a
 *
°a
,

206 
õì80211_key_c⁄f
 *
key
);

207 
boﬁ
 
©h_hw_keyª£t
(
©h_comm⁄
 *
comm⁄
, 
u16
 
íåy
);

208 
©h_hw_cy˛e_cou¡îs_upd©e
(
©h_comm⁄
 *
comm⁄
);

209 
öt32_t
 
©h_hw_gë_li°í_time
(
©h_comm⁄
 *
comm⁄
);

211 
	$__¥ötf
(3, 4)

212 
	`©h_¥ötk
(c⁄° *
Àvñ
, c⁄° 
©h_comm⁄
 *
comm⁄
,

213 c⁄° *
fmt
, ...);

215 
	#©h_emîg
(
comm⁄
, 
fmt
, ...) \

216 
	`©h_¥ötk
(
KERN_EMERG
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

217 
	#©h_Æît
(
comm⁄
, 
fmt
, ...) \

218 
	`©h_¥ötk
(
KERN_ALERT
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

219 
	#©h_¸ô
(
comm⁄
, 
fmt
, ...) \

220 
	`©h_¥ötk
(
KERN_CRIT
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

221 
	#©h_îr
(
comm⁄
, 
fmt
, ...) \

222 
	`©h_¥ötk
(
KERN_ERR
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

223 
	#©h_w¨n
(
comm⁄
, 
fmt
, ...) \

224 
	`©h_¥ötk
(
KERN_WARNING
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

225 
	#©h_nŸi˚
(
comm⁄
, 
fmt
, ...) \

226 
	`©h_¥ötk
(
KERN_NOTICE
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

227 
	#©h_öfo
(
comm⁄
, 
fmt
, ...) \

228 
	`©h_¥ötk
(
KERN_INFO
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
)

	)

263 
	eATH_DEBUG
 {

264 
ATH_DBG_RESET
 = 0x00000001,

265 
ATH_DBG_QUEUE
 = 0x00000002,

266 
ATH_DBG_EEPROM
 = 0x00000004,

267 
ATH_DBG_CALIBRATE
 = 0x00000008,

268 
ATH_DBG_INTERRUPT
 = 0x00000010,

269 
ATH_DBG_REGULATORY
 = 0x00000020,

270 
ATH_DBG_ANI
 = 0x00000040,

271 
ATH_DBG_XMIT
 = 0x00000080,

272 
ATH_DBG_BEACON
 = 0x00000100,

273 
ATH_DBG_CONFIG
 = 0x00000200,

274 
ATH_DBG_FATAL
 = 0x00000400,

275 
ATH_DBG_PS
 = 0x00000800,

276 
ATH_DBG_BTCOEX
 = 0x00001000,

277 
ATH_DBG_WMI
 = 0x00002000,

278 
ATH_DBG_BSTUCK
 = 0x00004000,

279 
ATH_DBG_MCI
 = 0x00008000,

280 
ATH_DBG_DFS
 = 0x00010000,

281 
ATH_DBG_WOW
 = 0x00020000,

282 
ATH_DBG_CHAN_CTX
 = 0x00040000,

283 
ATH_DBG_DYNACK
 = 0x00080000,

284 
ATH_DBG_SPECTRAL_SCAN
 = 0x00100000,

285 
ATH_DBG_ANY
 = 0xffffffff

288 
	#ATH_DBG_DEFAULT
 (
ATH_DBG_FATAL
)

	)

289 
	#ATH_DBG_MAX_LEN
 512

	)

291 #ifde‡
CONFIG_ATH_DEBUG


293 
	#©h_dbg
(
comm⁄
, 
dbg_mask
, 
fmt
, ...) \

295 i‡((
comm⁄
)->
debug_mask
 & 
ATH_DBG_
##
dbg_mask
) \

296 
	`©h_¥ötk
(
KERN_DEBUG
, 
comm⁄
, 
fmt
, ##
__VA_ARGS__
); \

297 
	}
} 0)

	)

299 
	#ATH_DBG_WARN
(
foo
, 
¨g
...Ë
	`WARN
(foo,árg)

	)

300 
	#ATH_DBG_WARN_ON_ONCE
(
foo
Ë
	`WARN_ON_ONCE
(foo)

	)

304 
ölöe
 
__©åibuã__
 ((
	$f‹m©
 (
¥ötf
, 3, 4)))

305 
	$_©h_dbg
(
©h_comm⁄
 *
comm⁄
, 
ATH_DEBUG
 
dbg_mask
,

306 c⁄° *
fmt
, ...)

308 
	}
}

309 
	#©h_dbg
(
comm⁄
, 
dbg_mask
, 
fmt
, ...) \

310 
	`_©h_dbg
(
comm⁄
, 
ATH_DBG_
##
dbg_mask
, 
fmt
, ##
__VA_ARGS__
)

	)

312 
	#ATH_DBG_WARN
(
foo
, 
¨g
...Ëdÿ{} 0)

	)

313 
	#ATH_DBG_WARN_ON_ONCE
(
foo
) ({ \

314 
__ªt_w¨n_⁄˚
 = !!(
foo
); \

315 
	`u∆ikñy
(
__ªt_w¨n_⁄˚
); \

316 })

	)

321 #ifde‡
CONFIG_ATH_DEBUG


322 c⁄° *
©h_›mode_to_°rög
(
∆80211_i·y≥
 
›mode
);

324 
ölöe
 c⁄° *
	$©h_›mode_to_°rög
(
∆80211_i·y≥
 
›mode
)

327 
	}
}

	@../dfs_pattern_detector.h

17 #i‚de‡
DFS_PATTERN_DETECTOR_H


18 
	#DFS_PATTERN_DETECTOR_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<löux/li°.h
>

22 
	~<löux/∆80211.h
>

27 
	#PRI_TOLERANCE
 16

	)

32 
	s©h_dfs_poﬁ_°©s
 {

33 
u32
 
	mpoﬁ_ª„ªn˚
;

34 
u32
 
	mpul£_Æloˇãd
;

35 
u32
 
	mpul£_Æloc_îr‹
;

36 
u32
 
	mpul£_u£d
;

37 
u32
 
	mp£q_Æloˇãd
;

38 
u32
 
	mp£q_Æloc_îr‹
;

39 
u32
 
	mp£q_u£d
;

50 
	spul£_evít
 {

51 
u64
 
	mts
;

52 
u16
 
	m‰eq
;

53 
u8
 
	mwidth
;

54 
u8
 
	mrssi
;

55 
boﬁ
 
	mchúp
;

71 
	sød¨_dëe˘‹_•ecs
 {

72 
u8
 
	mty≥_id
;

73 
u8
 
	mwidth_mö
;

74 
u8
 
	mwidth_max
;

75 
u16
 
	m¥i_mö
;

76 
u16
 
	m¥i_max
;

77 
u8
 
	mnum_¥i
;

78 
u8
 
	mµb
;

79 
u8
 
	mµb_thªsh
;

80 
u8
 
	mmax_¥i_tﬁî™˚
;

81 
boﬁ
 
	mchúp
;

95 
	sdfs_∑âîn_dëe˘‹
 {

96 (*
	mexô
)(
dfs_∑âîn_dëe˘‹
 *
	mdpd
);

97 
boﬁ
 (*
£t_dfs_domaö
)(
dfs_∑âîn_dëe˘‹
 *
	mdpd
,

98 
∆80211_dfs_ªgi⁄s
 
	mªgi⁄
);

99 
boﬁ
 (*
add_pul£
)(
dfs_∑âîn_dëe˘‹
 *
	mdpd
,

100 
pul£_evít
 *
	m≥
);

102 
©h_dfs_poﬁ_°©s
 (*
gë_°©s
)(
dfs_∑âîn_dëe˘‹
 *
	mdpd
);

103 
∆80211_dfs_ªgi⁄s
 
	mªgi⁄
;

104 
u8
 
	mnum_ød¨_ty≥s
;

105 
u64
 
	mœ°_pul£_ts
;

107 
©h_comm⁄
 *
	mcomm⁄
;

109 c⁄° 
ød¨_dëe˘‹_•ecs
 *
	mød¨_•ec
;

110 
li°_hód
 
	mch™√l_dëe˘‹s
;

118 
dfs_∑âîn_dëe˘‹
 *

119 
dfs_∑âîn_dëe˘‹_öô
(
©h_comm⁄
 *
comm⁄
,

120 
∆80211_dfs_ªgi⁄s
 
ªgi⁄
);

	@../reg.h

17 #i‚de‡
ATH_REGISTERS_H


18 
	#ATH_REGISTERS_H


	)

20 
	#AR_MIBC
 0x0040

	)

21 
	#AR_MIBC_COW
 0x00000001

	)

22 
	#AR_MIBC_FMC
 0x00000002

	)

23 
	#AR_MIBC_CMC
 0x00000004

	)

24 
	#AR_MIBC_MCS
 0x00000008

	)

26 
	#AR_STA_ID0
 0x8000

	)

27 
	#AR_STA_ID1
 0x8004

	)

28 
	#AR_STA_ID1_SADH_MASK
 0x0000ffff

	)

34 
	#AR_BSSMSKL
 0x80e0

	)

35 
	#AR_BSSMSKU
 0x80e4

	)

37 
	#AR_TFCNT
 0x80ec

	)

38 
	#AR_RFCNT
 0x80f0

	)

39 
	#AR_RCCNT
 0x80f4

	)

40 
	#AR_CCCNT
 0x80f8

	)

42 
	#AR_KEYTABLE_0
 0x8800

	)

43 
	#AR_KEYTABLE
(
_n
Ë(
AR_KEYTABLE_0
 + ((_n)*32))

	)

44 
	#AR_KEY_CACHE_SIZE
 128

	)

45 
	#AR_RSVD_KEYTABLE_ENTRIES
 4

	)

46 
	#AR_KEY_TYPE
 0x00000007

	)

47 
	#AR_KEYTABLE_TYPE_40
 0x00000000

	)

48 
	#AR_KEYTABLE_TYPE_104
 0x00000001

	)

49 
	#AR_KEYTABLE_TYPE_128
 0x00000003

	)

50 
	#AR_KEYTABLE_TYPE_TKIP
 0x00000004

	)

51 
	#AR_KEYTABLE_TYPE_AES
 0x00000005

	)

52 
	#AR_KEYTABLE_TYPE_CCM
 0x00000006

	)

53 
	#AR_KEYTABLE_TYPE_CLR
 0x00000007

	)

54 
	#AR_KEYTABLE_ANT
 0x00000008

	)

55 
	#AR_KEYTABLE_VALID
 0x00008000

	)

56 
	#AR_KEYTABLE_KEY0
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 0)

	)

57 
	#AR_KEYTABLE_KEY1
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 4)

	)

58 
	#AR_KEYTABLE_KEY2
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 8)

	)

59 
	#AR_KEYTABLE_KEY3
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 12)

	)

60 
	#AR_KEYTABLE_KEY4
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 16)

	)

61 
	#AR_KEYTABLE_TYPE
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 20)

	)

62 
	#AR_KEYTABLE_MAC0
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 24)

	)

63 
	#AR_KEYTABLE_MAC1
(
_n
Ë(
	`AR_KEYTABLE
(_nË+ 28)

	)

	@../regd.h

17 #i‚de‡
REGD_H


18 
	#REGD_H


	)

20 
	~<löux/∆80211.h
>

21 
	~<√t/cfg80211.h
>

23 
	~"©h.h
"

25 
	e˘l_group
 {

26 
	mCTL_FCC
 = 0x10,

27 
	mCTL_MKK
 = 0x40,

28 
	mCTL_ETSI
 = 0x30,

31 
	#NO_CTL
 0xff

	)

32 
	#SD_NO_CTL
 0xE0

	)

33 
	#NO_CTL
 0xff

	)

34 
	#CTL_11A
 0

	)

35 
	#CTL_11B
 1

	)

36 
	#CTL_11G
 2

	)

37 
	#CTL_2GHT20
 5

	)

38 
	#CTL_5GHT20
 6

	)

39 
	#CTL_2GHT40
 7

	)

40 
	#CTL_5GHT40
 8

	)

42 
	#CTRY_DEBUG
 0x1ff

	)

43 
	#CTRY_DEFAULT
 0

	)

45 
	#COUNTRY_ERD_FLAG
 0x8000

	)

46 
	#WORLDWIDE_ROAMING_FLAG
 0x4000

	)

48 
	#MULTI_DOMAIN_MASK
 0xFF00

	)

50 
	#WORLD_SKU_MASK
 0x00F0

	)

51 
	#WORLD_SKU_PREFIX
 0x0060

	)

53 
	#CHANNEL_HALF_BW
 10

	)

54 
	#CHANNEL_QUARTER_BW
 5

	)

56 
	scou¡ry_code_to_íum_rd
 {

57 
u16
 
	mcou¡ryCode
;

58 
u16
 
	mªgDmnEnum
;

59 c⁄° *
	misoName
;

62 
	eCou¡ryCode
 {

63 
	mCTRY_ALBANIA
 = 8,

64 
	mCTRY_ALGERIA
 = 12,

65 
	mCTRY_ARGENTINA
 = 32,

66 
	mCTRY_ARMENIA
 = 51,

67 
	mCTRY_ARUBA
 = 533,

68 
	mCTRY_AUSTRALIA
 = 36,

69 
	mCTRY_AUSTRIA
 = 40,

70 
	mCTRY_AZERBAIJAN
 = 31,

71 
	mCTRY_BAHRAIN
 = 48,

72 
	mCTRY_BANGLADESH
 = 50,

73 
	mCTRY_BARBADOS
 = 52,

74 
	mCTRY_BELARUS
 = 112,

75 
	mCTRY_BELGIUM
 = 56,

76 
	mCTRY_BELIZE
 = 84,

77 
	mCTRY_BOLIVIA
 = 68,

78 
	mCTRY_BOSNIA_HERZ
 = 70,

79 
	mCTRY_BRAZIL
 = 76,

80 
	mCTRY_BRUNEI_DARUSSALAM
 = 96,

81 
	mCTRY_BULGARIA
 = 100,

82 
	mCTRY_CAMBODIA
 = 116,

83 
	mCTRY_CANADA
 = 124,

84 
	mCTRY_CHILE
 = 152,

85 
	mCTRY_CHINA
 = 156,

86 
	mCTRY_COLOMBIA
 = 170,

87 
	mCTRY_COSTA_RICA
 = 188,

88 
	mCTRY_CROATIA
 = 191,

89 
	mCTRY_CYPRUS
 = 196,

90 
	mCTRY_CZECH
 = 203,

91 
	mCTRY_DENMARK
 = 208,

92 
	mCTRY_DOMINICAN_REPUBLIC
 = 214,

93 
	mCTRY_ECUADOR
 = 218,

94 
	mCTRY_EGYPT
 = 818,

95 
	mCTRY_EL_SALVADOR
 = 222,

96 
	mCTRY_ESTONIA
 = 233,

97 
	mCTRY_FAEROE_ISLANDS
 = 234,

98 
	mCTRY_FINLAND
 = 246,

99 
	mCTRY_FRANCE
 = 250,

100 
	mCTRY_GEORGIA
 = 268,

101 
	mCTRY_GERMANY
 = 276,

102 
	mCTRY_GREECE
 = 300,

103 
	mCTRY_GREENLAND
 = 304,

104 
	mCTRY_GRENADA
 = 308,

105 
	mCTRY_GUAM
 = 316,

106 
	mCTRY_GUATEMALA
 = 320,

107 
	mCTRY_HAITI
 = 332,

108 
	mCTRY_HONDURAS
 = 340,

109 
	mCTRY_HONG_KONG
 = 344,

110 
	mCTRY_HUNGARY
 = 348,

111 
	mCTRY_ICELAND
 = 352,

112 
	mCTRY_INDIA
 = 356,

113 
	mCTRY_INDONESIA
 = 360,

114 
	mCTRY_IRAN
 = 364,

115 
	mCTRY_IRAQ
 = 368,

116 
	mCTRY_IRELAND
 = 372,

117 
	mCTRY_ISRAEL
 = 376,

118 
	mCTRY_ITALY
 = 380,

119 
	mCTRY_JAMAICA
 = 388,

120 
	mCTRY_JAPAN
 = 392,

121 
	mCTRY_JORDAN
 = 400,

122 
	mCTRY_KAZAKHSTAN
 = 398,

123 
	mCTRY_KENYA
 = 404,

124 
	mCTRY_KOREA_NORTH
 = 408,

125 
	mCTRY_KOREA_ROC
 = 410,

126 
	mCTRY_KOREA_ROC2
 = 411,

127 
	mCTRY_KOREA_ROC3
 = 412,

128 
	mCTRY_KUWAIT
 = 414,

129 
	mCTRY_LATVIA
 = 428,

130 
	mCTRY_LEBANON
 = 422,

131 
	mCTRY_LIBYA
 = 434,

132 
	mCTRY_LIECHTENSTEIN
 = 438,

133 
	mCTRY_LITHUANIA
 = 440,

134 
	mCTRY_LUXEMBOURG
 = 442,

135 
	mCTRY_MACAU
 = 446,

136 
	mCTRY_MACEDONIA
 = 807,

137 
	mCTRY_MALAYSIA
 = 458,

138 
	mCTRY_MALTA
 = 470,

139 
	mCTRY_MEXICO
 = 484,

140 
	mCTRY_MONACO
 = 492,

141 
	mCTRY_MOROCCO
 = 504,

142 
	mCTRY_NEPAL
 = 524,

143 
	mCTRY_NETHERLANDS
 = 528,

144 
	mCTRY_NETHERLANDS_ANTILLES
 = 530,

145 
	mCTRY_NEW_ZEALAND
 = 554,

146 
	mCTRY_NICARAGUA
 = 558,

147 
	mCTRY_NORWAY
 = 578,

148 
	mCTRY_OMAN
 = 512,

149 
	mCTRY_PAKISTAN
 = 586,

150 
	mCTRY_PANAMA
 = 591,

151 
	mCTRY_PAPUA_NEW_GUINEA
 = 598,

152 
	mCTRY_PARAGUAY
 = 600,

153 
	mCTRY_PERU
 = 604,

154 
	mCTRY_PHILIPPINES
 = 608,

155 
	mCTRY_POLAND
 = 616,

156 
	mCTRY_PORTUGAL
 = 620,

157 
	mCTRY_PUERTO_RICO
 = 630,

158 
	mCTRY_QATAR
 = 634,

159 
	mCTRY_ROMANIA
 = 642,

160 
	mCTRY_RUSSIA
 = 643,

161 
	mCTRY_SAUDI_ARABIA
 = 682,

162 
	mCTRY_SERBIA_MONTENEGRO
 = 891,

163 
	mCTRY_SINGAPORE
 = 702,

164 
	mCTRY_SLOVAKIA
 = 703,

165 
	mCTRY_SLOVENIA
 = 705,

166 
	mCTRY_SOUTH_AFRICA
 = 710,

167 
	mCTRY_SPAIN
 = 724,

168 
	mCTRY_SRI_LANKA
 = 144,

169 
	mCTRY_SWEDEN
 = 752,

170 
	mCTRY_SWITZERLAND
 = 756,

171 
	mCTRY_SYRIA
 = 760,

172 
	mCTRY_TAIWAN
 = 158,

173 
	mCTRY_THAILAND
 = 764,

174 
	mCTRY_TRINIDAD_Y_TOBAGO
 = 780,

175 
	mCTRY_TUNISIA
 = 788,

176 
	mCTRY_TURKEY
 = 792,

177 
	mCTRY_UAE
 = 784,

178 
	mCTRY_UKRAINE
 = 804,

179 
	mCTRY_UNITED_KINGDOM
 = 826,

180 
	mCTRY_UNITED_STATES
 = 840,

181 
	mCTRY_UNITED_STATES_FCC49
 = 842,

182 
	mCTRY_URUGUAY
 = 858,

183 
	mCTRY_UZBEKISTAN
 = 860,

184 
	mCTRY_VENEZUELA
 = 862,

185 
	mCTRY_VIET_NAM
 = 704,

186 
	mCTRY_YEMEN
 = 887,

187 
	mCTRY_ZIMBABWE
 = 716,

188 
	mCTRY_JAPAN1
 = 393,

189 
	mCTRY_JAPAN2
 = 394,

190 
	mCTRY_JAPAN3
 = 395,

191 
	mCTRY_JAPAN4
 = 396,

192 
	mCTRY_JAPAN5
 = 397,

193 
	mCTRY_JAPAN6
 = 4006,

194 
	mCTRY_JAPAN7
 = 4007,

195 
	mCTRY_JAPAN8
 = 4008,

196 
	mCTRY_JAPAN9
 = 4009,

197 
	mCTRY_JAPAN10
 = 4010,

198 
	mCTRY_JAPAN11
 = 4011,

199 
	mCTRY_JAPAN12
 = 4012,

200 
	mCTRY_JAPAN13
 = 4013,

201 
	mCTRY_JAPAN14
 = 4014,

202 
	mCTRY_JAPAN15
 = 4015,

203 
	mCTRY_JAPAN16
 = 4016,

204 
	mCTRY_JAPAN17
 = 4017,

205 
	mCTRY_JAPAN18
 = 4018,

206 
	mCTRY_JAPAN19
 = 4019,

207 
	mCTRY_JAPAN20
 = 4020,

208 
	mCTRY_JAPAN21
 = 4021,

209 
	mCTRY_JAPAN22
 = 4022,

210 
	mCTRY_JAPAN23
 = 4023,

211 
	mCTRY_JAPAN24
 = 4024,

212 
	mCTRY_JAPAN25
 = 4025,

213 
	mCTRY_JAPAN26
 = 4026,

214 
	mCTRY_JAPAN27
 = 4027,

215 
	mCTRY_JAPAN28
 = 4028,

216 
	mCTRY_JAPAN29
 = 4029,

217 
	mCTRY_JAPAN30
 = 4030,

218 
	mCTRY_JAPAN31
 = 4031,

219 
	mCTRY_JAPAN32
 = 4032,

220 
	mCTRY_JAPAN33
 = 4033,

221 
	mCTRY_JAPAN34
 = 4034,

222 
	mCTRY_JAPAN35
 = 4035,

223 
	mCTRY_JAPAN36
 = 4036,

224 
	mCTRY_JAPAN37
 = 4037,

225 
	mCTRY_JAPAN38
 = 4038,

226 
	mCTRY_JAPAN39
 = 4039,

227 
	mCTRY_JAPAN40
 = 4040,

228 
	mCTRY_JAPAN41
 = 4041,

229 
	mCTRY_JAPAN42
 = 4042,

230 
	mCTRY_JAPAN43
 = 4043,

231 
	mCTRY_JAPAN44
 = 4044,

232 
	mCTRY_JAPAN45
 = 4045,

233 
	mCTRY_JAPAN46
 = 4046,

234 
	mCTRY_JAPAN47
 = 4047,

235 
	mCTRY_JAPAN48
 = 4048,

236 
	mCTRY_JAPAN49
 = 4049,

237 
	mCTRY_JAPAN50
 = 4050,

238 
	mCTRY_JAPAN51
 = 4051,

239 
	mCTRY_JAPAN52
 = 4052,

240 
	mCTRY_JAPAN53
 = 4053,

241 
	mCTRY_JAPAN54
 = 4054,

242 
	mCTRY_JAPAN55
 = 4055,

243 
	mCTRY_JAPAN56
 = 4056,

244 
	mCTRY_JAPAN57
 = 4057,

245 
	mCTRY_JAPAN58
 = 4058,

246 
	mCTRY_JAPAN59
 = 4059,

247 
	mCTRY_AUSTRALIA2
 = 5000,

248 
	mCTRY_CANADA2
 = 5001,

249 
	mCTRY_BELGIUM2
 = 5002

252 
boﬁ
 
©h_is_w‹ld_ªgd
(
©h_ªguœt‹y
 *
ªg
);

253 
boﬁ
 
©h_is_49ghz_Ælowed
(
u16
 
ªdomaö
);

254 
©h_ªgd_öô
(
©h_ªguœt‹y
 *
ªg
, 
wùhy
 *wiphy,

255 (*
ªg_nŸifõr
)(
wùhy
 *wiphy,

256 
ªguœt‹y_ªque°
 *
ªque°
));

257 
u32
 
	`©h_ªgd_gë_b™d_˘l
(
©h_ªguœt‹y
 *
ªg
,

258 
õì80211_b™d
 
b™d
);

259 
	`©h_ªg_nŸifõr_≠∂y
(
wùhy
 *wiphy,

260 
ªguœt‹y_ªque°
 *
ªque°
,

261 
©h_ªguœt‹y
 *
ªg
);

	@../spectral_common.h

17 #i‚de‡
SPECTRAL_COMMON_H


18 
	#SPECTRAL_COMMON_H


	)

20 
	#SPECTRAL_HT20_NUM_BINS
 56

	)

21 
	#SPECTRAL_HT20_40_NUM_BINS
 128

	)

26 
	#SPECTRAL_ATH10K_MAX_NUM_BINS
 256

	)

36 
	e©h_f·_ßm∂e_ty≥
 {

37 
	mATH_FFT_SAMPLE_HT20
 = 1,

38 
	mATH_FFT_SAMPLE_HT20_40
,

39 
	mATH_FFT_SAMPLE_ATH10K
,

42 
	sf·_ßm∂e_év
 {

43 
u8
 
	mty≥
;

44 
__be16
 
	mÀngth
;

46 } 
	g__∑cked
;

48 
	sf·_ßm∂e_ht20
 {

49 
f·_ßm∂e_év
 
	mév
;

51 
u8
 
	mmax_exp
;

53 
__be16
 
	m‰eq
;

54 
s8
 
	mrssi
;

55 
s8
 
	mnoi£
;

57 
__be16
 
	mmax_magnôude
;

58 
u8
 
	mmax_ödex
;

59 
u8
 
	mbôm≠_weight
;

61 
__be64
 
	mtsf
;

63 
u8
 
	md©a
[
SPECTRAL_HT20_NUM_BINS
];

64 } 
	g__∑cked
;

66 
	sf·_ßm∂e_ht20_40
 {

67 
f·_ßm∂e_év
 
	mév
;

69 
u8
 
	mch™√l_ty≥
;

70 
__be16
 
	m‰eq
;

72 
s8
 
	mlowî_rssi
;

73 
s8
 
	muµî_rssi
;

75 
__be64
 
	mtsf
;

77 
s8
 
	mlowî_noi£
;

78 
s8
 
	muµî_noi£
;

80 
__be16
 
	mlowî_max_magnôude
;

81 
__be16
 
	muµî_max_magnôude
;

83 
u8
 
	mlowî_max_ödex
;

84 
u8
 
	muµî_max_ödex
;

86 
u8
 
	mlowî_bôm≠_weight
;

87 
u8
 
	muµî_bôm≠_weight
;

89 
u8
 
	mmax_exp
;

91 
u8
 
	md©a
[
SPECTRAL_HT20_40_NUM_BINS
];

92 } 
	g__∑cked
;

94 
	sf·_ßm∂e_©h10k
 {

95 
f·_ßm∂e_év
 
	mév
;

96 
u8
 
	mch™_width_mhz
;

97 
__be16
 
	m‰eq1
;

98 
__be16
 
	m‰eq2
;

99 
__be16
 
	mnoi£
;

100 
__be16
 
	mmax_magnôude
;

101 
__be16
 
	mtŸÆ_gaö_db
;

102 
__be16
 
	mba£_pwr_db
;

103 
__be64
 
	mtsf
;

104 
s8
 
	mmax_ödex
;

105 
u8
 
	mrssi
;

106 
u8
 
	mªÕwr_db
;

107 
u8
 
	mavgpwr_db
;

108 
u8
 
	mmax_exp
;

110 
u8
 
	md©a
[0];

111 } 
	g__∑cked
;

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_TSN
 0x22F0

	)

46 
	#ETH_P_IP
 0x0800

	)

47 
	#ETH_P_X25
 0x0805

	)

48 
	#ETH_P_ARP
 0x0806

	)

49 
	#ETH_P_BPQ
 0x08FF

	)

50 
	#ETH_P_IEEEPUP
 0x0a00

	)

51 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

52 
	#ETH_P_BATMAN
 0x4305

	)

53 
	#ETH_P_DEC
 0x6000

	)

54 
	#ETH_P_DNA_DL
 0x6001

	)

55 
	#ETH_P_DNA_RC
 0x6002

	)

56 
	#ETH_P_DNA_RT
 0x6003

	)

57 
	#ETH_P_LAT
 0x6004

	)

58 
	#ETH_P_DIAG
 0x6005

	)

59 
	#ETH_P_CUST
 0x6006

	)

60 
	#ETH_P_SCA
 0x6007

	)

61 
	#ETH_P_TEB
 0x6558

	)

62 
	#ETH_P_RARP
 0x8035

	)

63 
	#ETH_P_ATALK
 0x809B

	)

64 
	#ETH_P_AARP
 0x80F3

	)

65 
	#ETH_P_8021Q
 0x8100

	)

66 
	#ETH_P_IPX
 0x8137

	)

67 
	#ETH_P_IPV6
 0x86DD

	)

68 
	#ETH_P_PAUSE
 0x8808

	)

69 
	#ETH_P_SLOW
 0x8809

	)

70 
	#ETH_P_WCCP
 0x883E

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_PPP_DISC
 0x8863

	)

76 
	#ETH_P_PPP_SES
 0x8864

	)

77 
	#ETH_P_LINK_CTL
 0x886¯

	)

78 
	#ETH_P_ATMFATE
 0x8884

	)

81 
	#ETH_P_PAE
 0x888E

	)

82 
	#ETH_P_AOE
 0x88A2

	)

83 
	#ETH_P_8021AD
 0x88A8

	)

84 
	#ETH_P_802_EX1
 0x88B5

	)

85 
	#ETH_P_TIPC
 0x88CA

	)

86 
	#ETH_P_8021AH
 0x88E7

	)

87 
	#ETH_P_MVRP
 0x88F5

	)

88 
	#ETH_P_1588
 0x88F7

	)

89 
	#ETH_P_PRP
 0x88FB

	)

90 
	#ETH_P_FCOE
 0x8906

	)

91 
	#ETH_P_TDLS
 0x890D

	)

92 
	#ETH_P_FIP
 0x8914

	)

93 
	#ETH_P_80221
 0x8917

	)

94 
	#ETH_P_LOOPBACK
 0x9000

	)

95 
	#ETH_P_QINQ1
 0x9100

	)

96 
	#ETH_P_QINQ2
 0x9200

	)

97 
	#ETH_P_QINQ3
 0x9300

	)

98 
	#ETH_P_EDSA
 0xDADA

	)

99 
	#ETH_P_AF_IUCV
 0xFBFB

	)

101 
	#ETH_P_802_3_MIN
 0x0600

	)

108 
	#ETH_P_802_3
 0x0001

	)

109 
	#ETH_P_AX25
 0x0002

	)

110 
	#ETH_P_ALL
 0x0003

	)

111 
	#ETH_P_802_2
 0x0004

	)

112 
	#ETH_P_SNAP
 0x0005

	)

113 
	#ETH_P_DDCMP
 0x0006

	)

114 
	#ETH_P_WAN_PPP
 0x0007

	)

115 
	#ETH_P_PPP_MP
 0x0008

	)

116 
	#ETH_P_LOCALTALK
 0x0009

	)

117 
	#ETH_P_CAN
 0x000C

	)

118 
	#ETH_P_CANFD
 0x000D

	)

119 
	#ETH_P_PPPTALK
 0x0010

	)

120 
	#ETH_P_TR_802_2
 0x0011

	)

121 
	#ETH_P_MOBITEX
 0x0015

	)

122 
	#ETH_P_CONTROL
 0x0016

	)

123 
	#ETH_P_IRDA
 0x0017

	)

124 
	#ETH_P_ECONET
 0x0018

	)

125 
	#ETH_P_HDLC
 0x0019

	)

126 
	#ETH_P_ARCNET
 0x001A

	)

127 
	#ETH_P_DSA
 0x001B

	)

128 
	#ETH_P_TRAILER
 0x001C

	)

129 
	#ETH_P_PHONET
 0x00F5

	)

130 
	#ETH_P_IEEE802154
 0x00F6

	)

131 
	#ETH_P_CAIF
 0x00F7

	)

132 
	#ETH_P_XDSA
 0x00F8

	)

138 
	sëhhdr
 {

139 
	mh_de°
[
ETH_ALEN
];

140 
	mh_sour˚
[
ETH_ALEN
];

141 
__be16
 
	mh_¥Ÿo
;

142 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

41 
	#NET_NAME_UNKNOWN
 0

	)

42 
	#NET_NAME_ENUM
 1

	)

43 
	#NET_NAME_PREDICTABLE
 2

	)

44 
	#NET_NAME_USER
 3

	)

45 
	#NET_NAME_RENAMED
 4

	)

49 
	mIF_PORT_UNKNOWN
 = 0,

50 
	mIF_PORT_10BASE2
,

51 
	mIF_PORT_10BASET
,

52 
	mIF_PORT_AUI
,

53 
	mIF_PORT_100BASET
,

54 
	mIF_PORT_100BASETX
,

55 
	mIF_PORT_100BASEFX


59 
	#NET_ADDR_PERM
 0

	)

60 
	#NET_ADDR_RANDOM
 1

	)

61 
	#NET_ADDR_STOLEN
 2

	)

62 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/nl80211.h

1 #i‚de‡
__LINUX_NL80211_H


2 
	#__LINUX_NL80211_H


	)

42 
	~<löux/ty≥s.h
>

44 
	#NL80211_GENL_NAME
 "∆80211"

	)

46 
	#NL80211_MULTICAST_GROUP_CONFIG
 "c⁄fig"

	)

47 
	#NL80211_MULTICAST_GROUP_SCAN
 "sˇn"

	)

48 
	#NL80211_MULTICAST_GROUP_REG
 "ªguœt‹y"

	)

49 
	#NL80211_MULTICAST_GROUP_MLME
 "mlme"

	)

50 
	#NL80211_MULTICAST_GROUP_VENDOR
 "víd‹"

	)

51 
	#NL80211_MULTICAST_GROUP_TESTMODE
 "ã°mode"

	)

826 
	e∆80211_comm™ds
 {

828 
	mNL80211_CMD_UNSPEC
,

830 
	mNL80211_CMD_GET_WIPHY
,

831 
	mNL80211_CMD_SET_WIPHY
,

832 
	mNL80211_CMD_NEW_WIPHY
,

833 
	mNL80211_CMD_DEL_WIPHY
,

835 
	mNL80211_CMD_GET_INTERFACE
,

836 
	mNL80211_CMD_SET_INTERFACE
,

837 
	mNL80211_CMD_NEW_INTERFACE
,

838 
	mNL80211_CMD_DEL_INTERFACE
,

840 
	mNL80211_CMD_GET_KEY
,

841 
	mNL80211_CMD_SET_KEY
,

842 
	mNL80211_CMD_NEW_KEY
,

843 
	mNL80211_CMD_DEL_KEY
,

845 
	mNL80211_CMD_GET_BEACON
,

846 
	mNL80211_CMD_SET_BEACON
,

847 
	mNL80211_CMD_START_AP
,

848 
	mNL80211_CMD_NEW_BEACON
 = 
NL80211_CMD_START_AP
,

849 
	mNL80211_CMD_STOP_AP
,

850 
	mNL80211_CMD_DEL_BEACON
 = 
NL80211_CMD_STOP_AP
,

852 
	mNL80211_CMD_GET_STATION
,

853 
	mNL80211_CMD_SET_STATION
,

854 
	mNL80211_CMD_NEW_STATION
,

855 
	mNL80211_CMD_DEL_STATION
,

857 
	mNL80211_CMD_GET_MPATH
,

858 
	mNL80211_CMD_SET_MPATH
,

859 
	mNL80211_CMD_NEW_MPATH
,

860 
	mNL80211_CMD_DEL_MPATH
,

862 
	mNL80211_CMD_SET_BSS
,

864 
	mNL80211_CMD_SET_REG
,

865 
	mNL80211_CMD_REQ_SET_REG
,

867 
	mNL80211_CMD_GET_MESH_CONFIG
,

868 
	mNL80211_CMD_SET_MESH_CONFIG
,

870 
	mNL80211_CMD_SET_MGMT_EXTRA_IE
 ,

872 
	mNL80211_CMD_GET_REG
,

874 
	mNL80211_CMD_GET_SCAN
,

875 
	mNL80211_CMD_TRIGGER_SCAN
,

876 
	mNL80211_CMD_NEW_SCAN_RESULTS
,

877 
	mNL80211_CMD_SCAN_ABORTED
,

879 
	mNL80211_CMD_REG_CHANGE
,

881 
	mNL80211_CMD_AUTHENTICATE
,

882 
	mNL80211_CMD_ASSOCIATE
,

883 
	mNL80211_CMD_DEAUTHENTICATE
,

884 
	mNL80211_CMD_DISASSOCIATE
,

886 
	mNL80211_CMD_MICHAEL_MIC_FAILURE
,

888 
	mNL80211_CMD_REG_BEACON_HINT
,

890 
	mNL80211_CMD_JOIN_IBSS
,

891 
	mNL80211_CMD_LEAVE_IBSS
,

893 
	mNL80211_CMD_TESTMODE
,

895 
	mNL80211_CMD_CONNECT
,

896 
	mNL80211_CMD_ROAM
,

897 
	mNL80211_CMD_DISCONNECT
,

899 
	mNL80211_CMD_SET_WIPHY_NETNS
,

901 
	mNL80211_CMD_GET_SURVEY
,

902 
	mNL80211_CMD_NEW_SURVEY_RESULTS
,

904 
	mNL80211_CMD_SET_PMKSA
,

905 
	mNL80211_CMD_DEL_PMKSA
,

906 
	mNL80211_CMD_FLUSH_PMKSA
,

908 
	mNL80211_CMD_REMAIN_ON_CHANNEL
,

909 
	mNL80211_CMD_CANCEL_REMAIN_ON_CHANNEL
,

911 
	mNL80211_CMD_SET_TX_BITRATE_MASK
,

913 
	mNL80211_CMD_REGISTER_FRAME
,

914 
	mNL80211_CMD_REGISTER_ACTION
 = 
NL80211_CMD_REGISTER_FRAME
,

915 
	mNL80211_CMD_FRAME
,

916 
	mNL80211_CMD_ACTION
 = 
NL80211_CMD_FRAME
,

917 
	mNL80211_CMD_FRAME_TX_STATUS
,

918 
	mNL80211_CMD_ACTION_TX_STATUS
 = 
NL80211_CMD_FRAME_TX_STATUS
,

920 
	mNL80211_CMD_SET_POWER_SAVE
,

921 
	mNL80211_CMD_GET_POWER_SAVE
,

923 
	mNL80211_CMD_SET_CQM
,

924 
	mNL80211_CMD_NOTIFY_CQM
,

926 
	mNL80211_CMD_SET_CHANNEL
,

927 
	mNL80211_CMD_SET_WDS_PEER
,

929 
	mNL80211_CMD_FRAME_WAIT_CANCEL
,

931 
	mNL80211_CMD_JOIN_MESH
,

932 
	mNL80211_CMD_LEAVE_MESH
,

934 
	mNL80211_CMD_UNPROT_DEAUTHENTICATE
,

935 
	mNL80211_CMD_UNPROT_DISASSOCIATE
,

937 
	mNL80211_CMD_NEW_PEER_CANDIDATE
,

939 
	mNL80211_CMD_GET_WOWLAN
,

940 
	mNL80211_CMD_SET_WOWLAN
,

942 
	mNL80211_CMD_START_SCHED_SCAN
,

943 
	mNL80211_CMD_STOP_SCHED_SCAN
,

944 
	mNL80211_CMD_SCHED_SCAN_RESULTS
,

945 
	mNL80211_CMD_SCHED_SCAN_STOPPED
,

947 
	mNL80211_CMD_SET_REKEY_OFFLOAD
,

949 
	mNL80211_CMD_PMKSA_CANDIDATE
,

951 
	mNL80211_CMD_TDLS_OPER
,

952 
	mNL80211_CMD_TDLS_MGMT
,

954 
	mNL80211_CMD_UNEXPECTED_FRAME
,

956 
	mNL80211_CMD_PROBE_CLIENT
,

958 
	mNL80211_CMD_REGISTER_BEACONS
,

960 
	mNL80211_CMD_UNEXPECTED_4ADDR_FRAME
,

962 
	mNL80211_CMD_SET_NOACK_MAP
,

964 
	mNL80211_CMD_CH_SWITCH_NOTIFY
,

966 
	mNL80211_CMD_START_P2P_DEVICE
,

967 
	mNL80211_CMD_STOP_P2P_DEVICE
,

969 
	mNL80211_CMD_CONN_FAILED
,

971 
	mNL80211_CMD_SET_MCAST_RATE
,

973 
	mNL80211_CMD_SET_MAC_ACL
,

975 
	mNL80211_CMD_RADAR_DETECT
,

977 
	mNL80211_CMD_GET_PROTOCOL_FEATURES
,

979 
	mNL80211_CMD_UPDATE_FT_IES
,

980 
	mNL80211_CMD_FT_EVENT
,

982 
	mNL80211_CMD_CRIT_PROTOCOL_START
,

983 
	mNL80211_CMD_CRIT_PROTOCOL_STOP
,

985 
	mNL80211_CMD_GET_COALESCE
,

986 
	mNL80211_CMD_SET_COALESCE
,

988 
	mNL80211_CMD_CHANNEL_SWITCH
,

990 
	mNL80211_CMD_VENDOR
,

992 
	mNL80211_CMD_SET_QOS_MAP
,

994 
	mNL80211_CMD_ADD_TX_TS
,

995 
	mNL80211_CMD_DEL_TX_TS
,

997 
	mNL80211_CMD_GET_MPP
,

999 
	mNL80211_CMD_JOIN_OCB
,

1000 
	mNL80211_CMD_LEAVE_OCB
,

1002 
	mNL80211_CMD_CH_SWITCH_STARTED_NOTIFY
,

1004 
	mNL80211_CMD_TDLS_CHANNEL_SWITCH
,

1005 
	mNL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH
,

1007 
	mNL80211_CMD_WIPHY_REG_CHANGE
,

1012 
	m__NL80211_CMD_AFTER_LAST
,

1013 
	mNL80211_CMD_MAX
 = 
__NL80211_CMD_AFTER_LAST
 - 1

1020 
	#NL80211_CMD_SET_BSS
 
NL80211_CMD_SET_BSS


	)

1021 
	#NL80211_CMD_SET_MGMT_EXTRA_IE
 
NL80211_CMD_SET_MGMT_EXTRA_IE


	)

1022 
	#NL80211_CMD_REG_CHANGE
 
NL80211_CMD_REG_CHANGE


	)

1023 
	#NL80211_CMD_AUTHENTICATE
 
NL80211_CMD_AUTHENTICATE


	)

1024 
	#NL80211_CMD_ASSOCIATE
 
NL80211_CMD_ASSOCIATE


	)

1025 
	#NL80211_CMD_DEAUTHENTICATE
 
NL80211_CMD_DEAUTHENTICATE


	)

1026 
	#NL80211_CMD_DISASSOCIATE
 
NL80211_CMD_DISASSOCIATE


	)

1027 
	#NL80211_CMD_REG_BEACON_HINT
 
NL80211_CMD_REG_BEACON_HINT


	)

1029 
	#NL80211_ATTR_FEATURE_FLAGS
 
NL80211_ATTR_FEATURE_FLAGS


	)

1032 
	#NL80211_CMD_GET_MESH_PARAMS
 
NL80211_CMD_GET_MESH_CONFIG


	)

1033 
	#NL80211_CMD_SET_MESH_PARAMS
 
NL80211_CMD_SET_MESH_CONFIG


	)

1034 
	#NL80211_MESH_SETUP_VENDOR_PATH_SEL_IE
 
NL80211_MESH_SETUP_IE


	)

1790 
	e∆80211_©ås
 {

1792 
	mNL80211_ATTR_UNSPEC
,

1794 
	mNL80211_ATTR_WIPHY
,

1795 
	mNL80211_ATTR_WIPHY_NAME
,

1797 
	mNL80211_ATTR_IFINDEX
,

1798 
	mNL80211_ATTR_IFNAME
,

1799 
	mNL80211_ATTR_IFTYPE
,

1801 
	mNL80211_ATTR_MAC
,

1803 
	mNL80211_ATTR_KEY_DATA
,

1804 
	mNL80211_ATTR_KEY_IDX
,

1805 
	mNL80211_ATTR_KEY_CIPHER
,

1806 
	mNL80211_ATTR_KEY_SEQ
,

1807 
	mNL80211_ATTR_KEY_DEFAULT
,

1809 
	mNL80211_ATTR_BEACON_INTERVAL
,

1810 
	mNL80211_ATTR_DTIM_PERIOD
,

1811 
	mNL80211_ATTR_BEACON_HEAD
,

1812 
	mNL80211_ATTR_BEACON_TAIL
,

1814 
	mNL80211_ATTR_STA_AID
,

1815 
	mNL80211_ATTR_STA_FLAGS
,

1816 
	mNL80211_ATTR_STA_LISTEN_INTERVAL
,

1817 
	mNL80211_ATTR_STA_SUPPORTED_RATES
,

1818 
	mNL80211_ATTR_STA_VLAN
,

1819 
	mNL80211_ATTR_STA_INFO
,

1821 
	mNL80211_ATTR_WIPHY_BANDS
,

1823 
	mNL80211_ATTR_MNTR_FLAGS
,

1825 
	mNL80211_ATTR_MESH_ID
,

1826 
	mNL80211_ATTR_STA_PLINK_ACTION
,

1827 
	mNL80211_ATTR_MPATH_NEXT_HOP
,

1828 
	mNL80211_ATTR_MPATH_INFO
,

1830 
	mNL80211_ATTR_BSS_CTS_PROT
,

1831 
	mNL80211_ATTR_BSS_SHORT_PREAMBLE
,

1832 
	mNL80211_ATTR_BSS_SHORT_SLOT_TIME
,

1834 
	mNL80211_ATTR_HT_CAPABILITY
,

1836 
	mNL80211_ATTR_SUPPORTED_IFTYPES
,

1838 
	mNL80211_ATTR_REG_ALPHA2
,

1839 
	mNL80211_ATTR_REG_RULES
,

1841 
	mNL80211_ATTR_MESH_CONFIG
,

1843 
	mNL80211_ATTR_BSS_BASIC_RATES
,

1845 
	mNL80211_ATTR_WIPHY_TXQ_PARAMS
,

1846 
	mNL80211_ATTR_WIPHY_FREQ
,

1847 
	mNL80211_ATTR_WIPHY_CHANNEL_TYPE
,

1849 
	mNL80211_ATTR_KEY_DEFAULT_MGMT
,

1851 
	mNL80211_ATTR_MGMT_SUBTYPE
,

1852 
	mNL80211_ATTR_IE
,

1854 
	mNL80211_ATTR_MAX_NUM_SCAN_SSIDS
,

1856 
	mNL80211_ATTR_SCAN_FREQUENCIES
,

1857 
	mNL80211_ATTR_SCAN_SSIDS
,

1858 
	mNL80211_ATTR_GENERATION
,

1859 
	mNL80211_ATTR_BSS
,

1861 
	mNL80211_ATTR_REG_INITIATOR
,

1862 
	mNL80211_ATTR_REG_TYPE
,

1864 
	mNL80211_ATTR_SUPPORTED_COMMANDS
,

1866 
	mNL80211_ATTR_FRAME
,

1867 
	mNL80211_ATTR_SSID
,

1868 
	mNL80211_ATTR_AUTH_TYPE
,

1869 
	mNL80211_ATTR_REASON_CODE
,

1871 
	mNL80211_ATTR_KEY_TYPE
,

1873 
	mNL80211_ATTR_MAX_SCAN_IE_LEN
,

1874 
	mNL80211_ATTR_CIPHER_SUITES
,

1876 
	mNL80211_ATTR_FREQ_BEFORE
,

1877 
	mNL80211_ATTR_FREQ_AFTER
,

1879 
	mNL80211_ATTR_FREQ_FIXED
,

1882 
	mNL80211_ATTR_WIPHY_RETRY_SHORT
,

1883 
	mNL80211_ATTR_WIPHY_RETRY_LONG
,

1884 
	mNL80211_ATTR_WIPHY_FRAG_THRESHOLD
,

1885 
	mNL80211_ATTR_WIPHY_RTS_THRESHOLD
,

1887 
	mNL80211_ATTR_TIMED_OUT
,

1889 
	mNL80211_ATTR_USE_MFP
,

1891 
	mNL80211_ATTR_STA_FLAGS2
,

1893 
	mNL80211_ATTR_CONTROL_PORT
,

1895 
	mNL80211_ATTR_TESTDATA
,

1897 
	mNL80211_ATTR_PRIVACY
,

1899 
	mNL80211_ATTR_DISCONNECTED_BY_AP
,

1900 
	mNL80211_ATTR_STATUS_CODE
,

1902 
	mNL80211_ATTR_CIPHER_SUITES_PAIRWISE
,

1903 
	mNL80211_ATTR_CIPHER_SUITE_GROUP
,

1904 
	mNL80211_ATTR_WPA_VERSIONS
,

1905 
	mNL80211_ATTR_AKM_SUITES
,

1907 
	mNL80211_ATTR_REQ_IE
,

1908 
	mNL80211_ATTR_RESP_IE
,

1910 
	mNL80211_ATTR_PREV_BSSID
,

1912 
	mNL80211_ATTR_KEY
,

1913 
	mNL80211_ATTR_KEYS
,

1915 
	mNL80211_ATTR_PID
,

1917 
	mNL80211_ATTR_4ADDR
,

1919 
	mNL80211_ATTR_SURVEY_INFO
,

1921 
	mNL80211_ATTR_PMKID
,

1922 
	mNL80211_ATTR_MAX_NUM_PMKIDS
,

1924 
	mNL80211_ATTR_DURATION
,

1926 
	mNL80211_ATTR_COOKIE
,

1928 
	mNL80211_ATTR_WIPHY_COVERAGE_CLASS
,

1930 
	mNL80211_ATTR_TX_RATES
,

1932 
	mNL80211_ATTR_FRAME_MATCH
,

1934 
	mNL80211_ATTR_ACK
,

1936 
	mNL80211_ATTR_PS_STATE
,

1938 
	mNL80211_ATTR_CQM
,

1940 
	mNL80211_ATTR_LOCAL_STATE_CHANGE
,

1942 
	mNL80211_ATTR_AP_ISOLATE
,

1944 
	mNL80211_ATTR_WIPHY_TX_POWER_SETTING
,

1945 
	mNL80211_ATTR_WIPHY_TX_POWER_LEVEL
,

1947 
	mNL80211_ATTR_TX_FRAME_TYPES
,

1948 
	mNL80211_ATTR_RX_FRAME_TYPES
,

1949 
	mNL80211_ATTR_FRAME_TYPE
,

1951 
	mNL80211_ATTR_CONTROL_PORT_ETHERTYPE
,

1952 
	mNL80211_ATTR_CONTROL_PORT_NO_ENCRYPT
,

1954 
	mNL80211_ATTR_SUPPORT_IBSS_RSN
,

1956 
	mNL80211_ATTR_WIPHY_ANTENNA_TX
,

1957 
	mNL80211_ATTR_WIPHY_ANTENNA_RX
,

1959 
	mNL80211_ATTR_MCAST_RATE
,

1961 
	mNL80211_ATTR_OFFCHANNEL_TX_OK
,

1963 
	mNL80211_ATTR_BSS_HT_OPMODE
,

1965 
	mNL80211_ATTR_KEY_DEFAULT_TYPES
,

1967 
	mNL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION
,

1969 
	mNL80211_ATTR_MESH_SETUP
,

1971 
	mNL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX
,

1972 
	mNL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX
,

1974 
	mNL80211_ATTR_SUPPORT_MESH_AUTH
,

1975 
	mNL80211_ATTR_STA_PLINK_STATE
,

1977 
	mNL80211_ATTR_WOWLAN_TRIGGERS
,

1978 
	mNL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED
,

1980 
	mNL80211_ATTR_SCHED_SCAN_INTERVAL
,

1982 
	mNL80211_ATTR_INTERFACE_COMBINATIONS
,

1983 
	mNL80211_ATTR_SOFTWARE_IFTYPES
,

1985 
	mNL80211_ATTR_REKEY_DATA
,

1987 
	mNL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS
,

1988 
	mNL80211_ATTR_MAX_SCHED_SCAN_IE_LEN
,

1990 
	mNL80211_ATTR_SCAN_SUPP_RATES
,

1992 
	mNL80211_ATTR_HIDDEN_SSID
,

1994 
	mNL80211_ATTR_IE_PROBE_RESP
,

1995 
	mNL80211_ATTR_IE_ASSOC_RESP
,

1997 
	mNL80211_ATTR_STA_WME
,

1998 
	mNL80211_ATTR_SUPPORT_AP_UAPSD
,

2000 
	mNL80211_ATTR_ROAM_SUPPORT
,

2002 
	mNL80211_ATTR_SCHED_SCAN_MATCH
,

2003 
	mNL80211_ATTR_MAX_MATCH_SETS
,

2005 
	mNL80211_ATTR_PMKSA_CANDIDATE
,

2007 
	mNL80211_ATTR_TX_NO_CCK_RATE
,

2009 
	mNL80211_ATTR_TDLS_ACTION
,

2010 
	mNL80211_ATTR_TDLS_DIALOG_TOKEN
,

2011 
	mNL80211_ATTR_TDLS_OPERATION
,

2012 
	mNL80211_ATTR_TDLS_SUPPORT
,

2013 
	mNL80211_ATTR_TDLS_EXTERNAL_SETUP
,

2015 
	mNL80211_ATTR_DEVICE_AP_SME
,

2017 
	mNL80211_ATTR_DONT_WAIT_FOR_ACK
,

2019 
	mNL80211_ATTR_FEATURE_FLAGS
,

2021 
	mNL80211_ATTR_PROBE_RESP_OFFLOAD
,

2023 
	mNL80211_ATTR_PROBE_RESP
,

2025 
	mNL80211_ATTR_DFS_REGION
,

2027 
	mNL80211_ATTR_DISABLE_HT
,

2028 
	mNL80211_ATTR_HT_CAPABILITY_MASK
,

2030 
	mNL80211_ATTR_NOACK_MAP
,

2032 
	mNL80211_ATTR_INACTIVITY_TIMEOUT
,

2034 
	mNL80211_ATTR_RX_SIGNAL_DBM
,

2036 
	mNL80211_ATTR_BG_SCAN_PERIOD
,

2038 
	mNL80211_ATTR_WDEV
,

2040 
	mNL80211_ATTR_USER_REG_HINT_TYPE
,

2042 
	mNL80211_ATTR_CONN_FAILED_REASON
,

2044 
	mNL80211_ATTR_SAE_DATA
,

2046 
	mNL80211_ATTR_VHT_CAPABILITY
,

2048 
	mNL80211_ATTR_SCAN_FLAGS
,

2050 
	mNL80211_ATTR_CHANNEL_WIDTH
,

2051 
	mNL80211_ATTR_CENTER_FREQ1
,

2052 
	mNL80211_ATTR_CENTER_FREQ2
,

2054 
	mNL80211_ATTR_P2P_CTWINDOW
,

2055 
	mNL80211_ATTR_P2P_OPPPS
,

2057 
	mNL80211_ATTR_LOCAL_MESH_POWER_MODE
,

2059 
	mNL80211_ATTR_ACL_POLICY
,

2061 
	mNL80211_ATTR_MAC_ADDRS
,

2063 
	mNL80211_ATTR_MAC_ACL_MAX
,

2065 
	mNL80211_ATTR_RADAR_EVENT
,

2067 
	mNL80211_ATTR_EXT_CAPA
,

2068 
	mNL80211_ATTR_EXT_CAPA_MASK
,

2070 
	mNL80211_ATTR_STA_CAPABILITY
,

2071 
	mNL80211_ATTR_STA_EXT_CAPABILITY
,

2073 
	mNL80211_ATTR_PROTOCOL_FEATURES
,

2074 
	mNL80211_ATTR_SPLIT_WIPHY_DUMP
,

2076 
	mNL80211_ATTR_DISABLE_VHT
,

2077 
	mNL80211_ATTR_VHT_CAPABILITY_MASK
,

2079 
	mNL80211_ATTR_MDID
,

2080 
	mNL80211_ATTR_IE_RIC
,

2082 
	mNL80211_ATTR_CRIT_PROT_ID
,

2083 
	mNL80211_ATTR_MAX_CRIT_PROT_DURATION
,

2085 
	mNL80211_ATTR_PEER_AID
,

2087 
	mNL80211_ATTR_COALESCE_RULE
,

2089 
	mNL80211_ATTR_CH_SWITCH_COUNT
,

2090 
	mNL80211_ATTR_CH_SWITCH_BLOCK_TX
,

2091 
	mNL80211_ATTR_CSA_IES
,

2092 
	mNL80211_ATTR_CSA_C_OFF_BEACON
,

2093 
	mNL80211_ATTR_CSA_C_OFF_PRESP
,

2095 
	mNL80211_ATTR_RXMGMT_FLAGS
,

2097 
	mNL80211_ATTR_STA_SUPPORTED_CHANNELS
,

2099 
	mNL80211_ATTR_STA_SUPPORTED_OPER_CLASSES
,

2101 
	mNL80211_ATTR_HANDLE_DFS
,

2103 
	mNL80211_ATTR_SUPPORT_5_MHZ
,

2104 
	mNL80211_ATTR_SUPPORT_10_MHZ
,

2106 
	mNL80211_ATTR_OPMODE_NOTIF
,

2108 
	mNL80211_ATTR_VENDOR_ID
,

2109 
	mNL80211_ATTR_VENDOR_SUBCMD
,

2110 
	mNL80211_ATTR_VENDOR_DATA
,

2111 
	mNL80211_ATTR_VENDOR_EVENTS
,

2113 
	mNL80211_ATTR_QOS_MAP
,

2115 
	mNL80211_ATTR_MAC_HINT
,

2116 
	mNL80211_ATTR_WIPHY_FREQ_HINT
,

2118 
	mNL80211_ATTR_MAX_AP_ASSOC_STA
,

2120 
	mNL80211_ATTR_TDLS_PEER_CAPABILITY
,

2122 
	mNL80211_ATTR_SOCKET_OWNER
,

2124 
	mNL80211_ATTR_CSA_C_OFFSETS_TX
,

2125 
	mNL80211_ATTR_MAX_CSA_COUNTERS
,

2127 
	mNL80211_ATTR_TDLS_INITIATOR
,

2129 
	mNL80211_ATTR_USE_RRM
,

2131 
	mNL80211_ATTR_WIPHY_DYN_ACK
,

2133 
	mNL80211_ATTR_TSID
,

2134 
	mNL80211_ATTR_USER_PRIO
,

2135 
	mNL80211_ATTR_ADMITTED_TIME
,

2137 
	mNL80211_ATTR_SMPS_MODE
,

2139 
	mNL80211_ATTR_OPER_CLASS
,

2141 
	mNL80211_ATTR_MAC_MASK
,

2143 
	mNL80211_ATTR_WIPHY_SELF_MANAGED_REG
,

2145 
	mNL80211_ATTR_EXT_FEATURES
,

2147 
	mNL80211_ATTR_SURVEY_RADIO_STATS
,

2149 
	mNL80211_ATTR_NETNS_FD
,

2151 
	mNL80211_ATTR_SCHED_SCAN_DELAY
,

2153 
	mNL80211_ATTR_REG_INDOOR
,

2155 
	mNL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS
,

2156 
	mNL80211_ATTR_MAX_SCAN_PLAN_INTERVAL
,

2157 
	mNL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS
,

2158 
	mNL80211_ATTR_SCHED_SCAN_PLANS
,

2162 
	m__NL80211_ATTR_AFTER_LAST
,

2163 
	mNUM_NL80211_ATTR
 = 
__NL80211_ATTR_AFTER_LAST
,

2164 
	mNL80211_ATTR_MAX
 = 
__NL80211_ATTR_AFTER_LAST
 - 1

2168 
	#NL80211_ATTR_SCAN_GENERATION
 
NL80211_ATTR_GENERATION


	)

2169 
	#NL80211_ATTR_MESH_PARAMS
 
NL80211_ATTR_MESH_CONFIG


	)

2170 
	#NL80211_ATTR_IFACE_SOCKET_OWNER
 
NL80211_ATTR_SOCKET_OWNER


	)

2176 
	#NL80211_CMD_CONNECT
 
NL80211_CMD_CONNECT


	)

2177 
	#NL80211_ATTR_HT_CAPABILITY
 
NL80211_ATTR_HT_CAPABILITY


	)

2178 
	#NL80211_ATTR_BSS_BASIC_RATES
 
NL80211_ATTR_BSS_BASIC_RATES


	)

2179 
	#NL80211_ATTR_WIPHY_TXQ_PARAMS
 
NL80211_ATTR_WIPHY_TXQ_PARAMS


	)

2180 
	#NL80211_ATTR_WIPHY_FREQ
 
NL80211_ATTR_WIPHY_FREQ


	)

2181 
	#NL80211_ATTR_WIPHY_CHANNEL_TYPE
 
NL80211_ATTR_WIPHY_CHANNEL_TYPE


	)

2182 
	#NL80211_ATTR_MGMT_SUBTYPE
 
NL80211_ATTR_MGMT_SUBTYPE


	)

2183 
	#NL80211_ATTR_IE
 
NL80211_ATTR_IE


	)

2184 
	#NL80211_ATTR_REG_INITIATOR
 
NL80211_ATTR_REG_INITIATOR


	)

2185 
	#NL80211_ATTR_REG_TYPE
 
NL80211_ATTR_REG_TYPE


	)

2186 
	#NL80211_ATTR_FRAME
 
NL80211_ATTR_FRAME


	)

2187 
	#NL80211_ATTR_SSID
 
NL80211_ATTR_SSID


	)

2188 
	#NL80211_ATTR_AUTH_TYPE
 
NL80211_ATTR_AUTH_TYPE


	)

2189 
	#NL80211_ATTR_REASON_CODE
 
NL80211_ATTR_REASON_CODE


	)

2190 
	#NL80211_ATTR_CIPHER_SUITES_PAIRWISE
 
NL80211_ATTR_CIPHER_SUITES_PAIRWISE


	)

2191 
	#NL80211_ATTR_CIPHER_SUITE_GROUP
 
NL80211_ATTR_CIPHER_SUITE_GROUP


	)

2192 
	#NL80211_ATTR_WPA_VERSIONS
 
NL80211_ATTR_WPA_VERSIONS


	)

2193 
	#NL80211_ATTR_AKM_SUITES
 
NL80211_ATTR_AKM_SUITES


	)

2194 
	#NL80211_ATTR_KEY
 
NL80211_ATTR_KEY


	)

2195 
	#NL80211_ATTR_KEYS
 
NL80211_ATTR_KEYS


	)

2196 
	#NL80211_ATTR_FEATURE_FLAGS
 
NL80211_ATTR_FEATURE_FLAGS


	)

2198 
	#NL80211_MAX_SUPP_RATES
 32

	)

2199 
	#NL80211_MAX_SUPP_HT_RATES
 77

	)

2200 
	#NL80211_MAX_SUPP_REG_RULES
 64

	)

2201 
	#NL80211_TKIP_DATA_OFFSET_ENCR_KEY
 0

	)

2202 
	#NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY
 16

	)

2203 
	#NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY
 24

	)

2204 
	#NL80211_HT_CAPABILITY_LEN
 26

	)

2205 
	#NL80211_VHT_CAPABILITY_LEN
 12

	)

2207 
	#NL80211_MAX_NR_CIPHER_SUITES
 5

	)

2208 
	#NL80211_MAX_NR_AKM_SUITES
 2

	)

2210 
	#NL80211_MIN_REMAIN_ON_CHANNEL_TIME
 10

	)

2213 
	#NL80211_SCAN_RSSI_THOLD_OFF
 -300

	)

2215 
	#NL80211_CQM_TXE_MAX_INTVL
 1800

	)

2245 
	e∆80211_i·y≥
 {

2246 
	mNL80211_IFTYPE_UNSPECIFIED
,

2247 
	mNL80211_IFTYPE_ADHOC
,

2248 
	mNL80211_IFTYPE_STATION
,

2249 
	mNL80211_IFTYPE_AP
,

2250 
	mNL80211_IFTYPE_AP_VLAN
,

2251 
	mNL80211_IFTYPE_WDS
,

2252 
	mNL80211_IFTYPE_MONITOR
,

2253 
	mNL80211_IFTYPE_MESH_POINT
,

2254 
	mNL80211_IFTYPE_P2P_CLIENT
,

2255 
	mNL80211_IFTYPE_P2P_GO
,

2256 
	mNL80211_IFTYPE_P2P_DEVICE
,

2257 
	mNL80211_IFTYPE_OCB
,

2260 
	mNUM_NL80211_IFTYPES
,

2261 
	mNL80211_IFTYPE_MAX
 = 
NUM_NL80211_IFTYPES
 - 1

2288 
	e∆80211_°a_Êags
 {

2289 
	m__NL80211_STA_FLAG_INVALID
,

2290 
	mNL80211_STA_FLAG_AUTHORIZED
,

2291 
	mNL80211_STA_FLAG_SHORT_PREAMBLE
,

2292 
	mNL80211_STA_FLAG_WME
,

2293 
	mNL80211_STA_FLAG_MFP
,

2294 
	mNL80211_STA_FLAG_AUTHENTICATED
,

2295 
	mNL80211_STA_FLAG_TDLS_PEER
,

2296 
	mNL80211_STA_FLAG_ASSOCIATED
,

2299 
	m__NL80211_STA_FLAG_AFTER_LAST
,

2300 
	mNL80211_STA_FLAG_MAX
 = 
__NL80211_STA_FLAG_AFTER_LAST
 - 1

2303 
	#NL80211_STA_FLAG_MAX_OLD_API
 
NL80211_STA_FLAG_TDLS_PEER


	)

2312 
	s∆80211_°a_Êag_upd©e
 {

2313 
__u32
 
	mmask
;

2314 
__u32
 
	m£t
;

2315 } 
__©åibuã__
((
∑cked
));

2351 
	e∆80211_øã_öfo
 {

2352 
	m__NL80211_RATE_INFO_INVALID
,

2353 
	mNL80211_RATE_INFO_BITRATE
,

2354 
	mNL80211_RATE_INFO_MCS
,

2355 
	mNL80211_RATE_INFO_40_MHZ_WIDTH
,

2356 
	mNL80211_RATE_INFO_SHORT_GI
,

2357 
	mNL80211_RATE_INFO_BITRATE32
,

2358 
	mNL80211_RATE_INFO_VHT_MCS
,

2359 
	mNL80211_RATE_INFO_VHT_NSS
,

2360 
	mNL80211_RATE_INFO_80_MHZ_WIDTH
,

2361 
	mNL80211_RATE_INFO_80P80_MHZ_WIDTH
,

2362 
	mNL80211_RATE_INFO_160_MHZ_WIDTH
,

2363 
	mNL80211_RATE_INFO_10_MHZ_WIDTH
,

2364 
	mNL80211_RATE_INFO_5_MHZ_WIDTH
,

2367 
	m__NL80211_RATE_INFO_AFTER_LAST
,

2368 
	mNL80211_RATE_INFO_MAX
 = 
__NL80211_RATE_INFO_AFTER_LAST
 - 1

2388 
	e∆80211_°a_bss_∑øm
 {

2389 
	m__NL80211_STA_BSS_PARAM_INVALID
,

2390 
	mNL80211_STA_BSS_PARAM_CTS_PROT
,

2391 
	mNL80211_STA_BSS_PARAM_SHORT_PREAMBLE
,

2392 
	mNL80211_STA_BSS_PARAM_SHORT_SLOT_TIME
,

2393 
	mNL80211_STA_BSS_PARAM_DTIM_PERIOD
,

2394 
	mNL80211_STA_BSS_PARAM_BEACON_INTERVAL
,

2397 
	m__NL80211_STA_BSS_PARAM_AFTER_LAST
,

2398 
	mNL80211_STA_BSS_PARAM_MAX
 = 
__NL80211_STA_BSS_PARAM_AFTER_LAST
 - 1

2463 
	e∆80211_°a_öfo
 {

2464 
	m__NL80211_STA_INFO_INVALID
,

2465 
	mNL80211_STA_INFO_INACTIVE_TIME
,

2466 
	mNL80211_STA_INFO_RX_BYTES
,

2467 
	mNL80211_STA_INFO_TX_BYTES
,

2468 
	mNL80211_STA_INFO_LLID
,

2469 
	mNL80211_STA_INFO_PLID
,

2470 
	mNL80211_STA_INFO_PLINK_STATE
,

2471 
	mNL80211_STA_INFO_SIGNAL
,

2472 
	mNL80211_STA_INFO_TX_BITRATE
,

2473 
	mNL80211_STA_INFO_RX_PACKETS
,

2474 
	mNL80211_STA_INFO_TX_PACKETS
,

2475 
	mNL80211_STA_INFO_TX_RETRIES
,

2476 
	mNL80211_STA_INFO_TX_FAILED
,

2477 
	mNL80211_STA_INFO_SIGNAL_AVG
,

2478 
	mNL80211_STA_INFO_RX_BITRATE
,

2479 
	mNL80211_STA_INFO_BSS_PARAM
,

2480 
	mNL80211_STA_INFO_CONNECTED_TIME
,

2481 
	mNL80211_STA_INFO_STA_FLAGS
,

2482 
	mNL80211_STA_INFO_BEACON_LOSS
,

2483 
	mNL80211_STA_INFO_T_OFFSET
,

2484 
	mNL80211_STA_INFO_LOCAL_PM
,

2485 
	mNL80211_STA_INFO_PEER_PM
,

2486 
	mNL80211_STA_INFO_NONPEER_PM
,

2487 
	mNL80211_STA_INFO_RX_BYTES64
,

2488 
	mNL80211_STA_INFO_TX_BYTES64
,

2489 
	mNL80211_STA_INFO_CHAIN_SIGNAL
,

2490 
	mNL80211_STA_INFO_CHAIN_SIGNAL_AVG
,

2491 
	mNL80211_STA_INFO_EXPECTED_THROUGHPUT
,

2492 
	mNL80211_STA_INFO_RX_DROP_MISC
,

2493 
	mNL80211_STA_INFO_BEACON_RX
,

2494 
	mNL80211_STA_INFO_BEACON_SIGNAL_AVG
,

2495 
	mNL80211_STA_INFO_TID_STATS
,

2498 
	m__NL80211_STA_INFO_AFTER_LAST
,

2499 
	mNL80211_STA_INFO_MAX
 = 
__NL80211_STA_INFO_AFTER_LAST
 - 1

2515 
	e∆80211_tid_°©s
 {

2516 
	m__NL80211_TID_STATS_INVALID
,

2517 
	mNL80211_TID_STATS_RX_MSDU
,

2518 
	mNL80211_TID_STATS_TX_MSDU
,

2519 
	mNL80211_TID_STATS_TX_MSDU_RETRIES
,

2520 
	mNL80211_TID_STATS_TX_MSDU_FAILED
,

2523 
	mNUM_NL80211_TID_STATS
,

2524 
	mNL80211_TID_STATS_MAX
 = 
NUM_NL80211_TID_STATS
 - 1

2536 
	e∆80211_m∑th_Êags
 {

2537 
	mNL80211_MPATH_FLAG_ACTIVE
 = 1<<0,

2538 
	mNL80211_MPATH_FLAG_RESOLVING
 = 1<<1,

2539 
	mNL80211_MPATH_FLAG_SN_VALID
 = 1<<2,

2540 
	mNL80211_MPATH_FLAG_FIXED
 = 1<<3,

2541 
	mNL80211_MPATH_FLAG_RESOLVED
 = 1<<4,

2563 
	e∆80211_m∑th_öfo
 {

2564 
	m__NL80211_MPATH_INFO_INVALID
,

2565 
	mNL80211_MPATH_INFO_FRAME_QLEN
,

2566 
	mNL80211_MPATH_INFO_SN
,

2567 
	mNL80211_MPATH_INFO_METRIC
,

2568 
	mNL80211_MPATH_INFO_EXPTIME
,

2569 
	mNL80211_MPATH_INFO_FLAGS
,

2570 
	mNL80211_MPATH_INFO_DISCOVERY_TIMEOUT
,

2571 
	mNL80211_MPATH_INFO_DISCOVERY_RETRIES
,

2574 
	m__NL80211_MPATH_INFO_AFTER_LAST
,

2575 
	mNL80211_MPATH_INFO_MAX
 = 
__NL80211_MPATH_INFO_AFTER_LAST
 - 1

2596 
	e∆80211_b™d_©å
 {

2597 
	m__NL80211_BAND_ATTR_INVALID
,

2598 
	mNL80211_BAND_ATTR_FREQS
,

2599 
	mNL80211_BAND_ATTR_RATES
,

2601 
	mNL80211_BAND_ATTR_HT_MCS_SET
,

2602 
	mNL80211_BAND_ATTR_HT_CAPA
,

2603 
	mNL80211_BAND_ATTR_HT_AMPDU_FACTOR
,

2604 
	mNL80211_BAND_ATTR_HT_AMPDU_DENSITY
,

2606 
	mNL80211_BAND_ATTR_VHT_MCS_SET
,

2607 
	mNL80211_BAND_ATTR_VHT_CAPA
,

2610 
	m__NL80211_BAND_ATTR_AFTER_LAST
,

2611 
	mNL80211_BAND_ATTR_MAX
 = 
__NL80211_BAND_ATTR_AFTER_LAST
 - 1

2614 
	#NL80211_BAND_ATTR_HT_CAPA
 
NL80211_BAND_ATTR_HT_CAPA


	)

2674 
	e∆80211_‰equícy_©å
 {

2675 
	m__NL80211_FREQUENCY_ATTR_INVALID
,

2676 
	mNL80211_FREQUENCY_ATTR_FREQ
,

2677 
	mNL80211_FREQUENCY_ATTR_DISABLED
,

2678 
	mNL80211_FREQUENCY_ATTR_NO_IR
,

2679 
	m__NL80211_FREQUENCY_ATTR_NO_IBSS
,

2680 
	mNL80211_FREQUENCY_ATTR_RADAR
,

2681 
	mNL80211_FREQUENCY_ATTR_MAX_TX_POWER
,

2682 
	mNL80211_FREQUENCY_ATTR_DFS_STATE
,

2683 
	mNL80211_FREQUENCY_ATTR_DFS_TIME
,

2684 
	mNL80211_FREQUENCY_ATTR_NO_HT40_MINUS
,

2685 
	mNL80211_FREQUENCY_ATTR_NO_HT40_PLUS
,

2686 
	mNL80211_FREQUENCY_ATTR_NO_80MHZ
,

2687 
	mNL80211_FREQUENCY_ATTR_NO_160MHZ
,

2688 
	mNL80211_FREQUENCY_ATTR_DFS_CAC_TIME
,

2689 
	mNL80211_FREQUENCY_ATTR_INDOOR_ONLY
,

2690 
	mNL80211_FREQUENCY_ATTR_IR_CONCURRENT
,

2691 
	mNL80211_FREQUENCY_ATTR_NO_20MHZ
,

2692 
	mNL80211_FREQUENCY_ATTR_NO_10MHZ
,

2695 
	m__NL80211_FREQUENCY_ATTR_AFTER_LAST
,

2696 
	mNL80211_FREQUENCY_ATTR_MAX
 = 
__NL80211_FREQUENCY_ATTR_AFTER_LAST
 - 1

2699 
	#NL80211_FREQUENCY_ATTR_MAX_TX_POWER
 
NL80211_FREQUENCY_ATTR_MAX_TX_POWER


	)

2700 
	#NL80211_FREQUENCY_ATTR_PASSIVE_SCAN
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

2701 
	#NL80211_FREQUENCY_ATTR_NO_IBSS
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

2702 
	#NL80211_FREQUENCY_ATTR_NO_IR
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

2703 
	#NL80211_FREQUENCY_ATTR_GO_CONCURRENT
 \

2704 
NL80211_FREQUENCY_ATTR_IR_CONCURRENT


	)

2716 
	e∆80211_bôøã_©å
 {

2717 
	m__NL80211_BITRATE_ATTR_INVALID
,

2718 
	mNL80211_BITRATE_ATTR_RATE
,

2719 
	mNL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE
,

2722 
	m__NL80211_BITRATE_ATTR_AFTER_LAST
,

2723 
	mNL80211_BITRATE_ATTR_MAX
 = 
__NL80211_BITRATE_ATTR_AFTER_LAST
 - 1

2742 
	e∆80211_ªg_öôüt‹
 {

2743 
	mNL80211_REGDOM_SET_BY_CORE
,

2744 
	mNL80211_REGDOM_SET_BY_USER
,

2745 
	mNL80211_REGDOM_SET_BY_DRIVER
,

2746 
	mNL80211_REGDOM_SET_BY_COUNTRY_IE
,

2765 
	e∆80211_ªg_ty≥
 {

2766 
	mNL80211_REGDOM_TYPE_COUNTRY
,

2767 
	mNL80211_REGDOM_TYPE_WORLD
,

2768 
	mNL80211_REGDOM_TYPE_CUSTOM_WORLD
,

2769 
	mNL80211_REGDOM_TYPE_INTERSECTION
,

2797 
	e∆80211_ªg_ruÀ_©å
 {

2798 
	m__NL80211_REG_RULE_ATTR_INVALID
,

2799 
	mNL80211_ATTR_REG_RULE_FLAGS
,

2801 
	mNL80211_ATTR_FREQ_RANGE_START
,

2802 
	mNL80211_ATTR_FREQ_RANGE_END
,

2803 
	mNL80211_ATTR_FREQ_RANGE_MAX_BW
,

2805 
	mNL80211_ATTR_POWER_RULE_MAX_ANT_GAIN
,

2806 
	mNL80211_ATTR_POWER_RULE_MAX_EIRP
,

2808 
	mNL80211_ATTR_DFS_CAC_TIME
,

2811 
	m__NL80211_REG_RULE_ATTR_AFTER_LAST
,

2812 
	mNL80211_REG_RULE_ATTR_MAX
 = 
__NL80211_REG_RULE_ATTR_AFTER_LAST
 - 1

2832 
	e∆80211_sched_sˇn_m©ch_©å
 {

2833 
	m__NL80211_SCHED_SCAN_MATCH_ATTR_INVALID
,

2835 
	mNL80211_SCHED_SCAN_MATCH_ATTR_SSID
,

2836 
	mNL80211_SCHED_SCAN_MATCH_ATTR_RSSI
,

2839 
	m__NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST
,

2840 
	mNL80211_SCHED_SCAN_MATCH_ATTR_MAX
 =

2841 
__NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST
 - 1

2845 
	#NL80211_ATTR_SCHED_SCAN_MATCH_SSID
 
NL80211_SCHED_SCAN_MATCH_ATTR_SSID


	)

2869 
	e∆80211_ªg_ruÀ_Êags
 {

2870 
	mNL80211_RRF_NO_OFDM
 = 1<<0,

2871 
	mNL80211_RRF_NO_CCK
 = 1<<1,

2872 
	mNL80211_RRF_NO_INDOOR
 = 1<<2,

2873 
	mNL80211_RRF_NO_OUTDOOR
 = 1<<3,

2874 
	mNL80211_RRF_DFS
 = 1<<4,

2875 
	mNL80211_RRF_PTP_ONLY
 = 1<<5,

2876 
	mNL80211_RRF_PTMP_ONLY
 = 1<<6,

2877 
	mNL80211_RRF_NO_IR
 = 1<<7,

2878 
	m__NL80211_RRF_NO_IBSS
 = 1<<8,

2879 
	mNL80211_RRF_AUTO_BW
 = 1<<11,

2880 
	mNL80211_RRF_IR_CONCURRENT
 = 1<<12,

2881 
	mNL80211_RRF_NO_HT40MINUS
 = 1<<13,

2882 
	mNL80211_RRF_NO_HT40PLUS
 = 1<<14,

2883 
	mNL80211_RRF_NO_80MHZ
 = 1<<15,

2884 
	mNL80211_RRF_NO_160MHZ
 = 1<<16,

2887 
	#NL80211_RRF_PASSIVE_SCAN
 
NL80211_RRF_NO_IR


	)

2888 
	#NL80211_RRF_NO_IBSS
 
NL80211_RRF_NO_IR


	)

2889 
	#NL80211_RRF_NO_IR
 
NL80211_RRF_NO_IR


	)

2890 
	#NL80211_RRF_NO_HT40
 (
NL80211_RRF_NO_HT40MINUS
 |\

2891 
NL80211_RRF_NO_HT40PLUS
)

	)

2892 
	#NL80211_RRF_GO_CONCURRENT
 
NL80211_RRF_IR_CONCURRENT


	)

2895 
	#NL80211_RRF_NO_IR_ALL
 (
NL80211_RRF_NO_IR
 | 
__NL80211_RRF_NO_IBSS
)

	)

2905 
	e∆80211_dfs_ªgi⁄s
 {

2906 
	mNL80211_DFS_UNSET
 = 0,

2907 
	mNL80211_DFS_FCC
 = 1,

2908 
	mNL80211_DFS_ETSI
 = 2,

2909 
	mNL80211_DFS_JP
 = 3,

2929 
	e∆80211_u£r_ªg_höt_ty≥
 {

2930 
	mNL80211_USER_REG_HINT_USER
 = 0,

2931 
	mNL80211_USER_REG_HINT_CELL_BASE
 = 1,

2932 
	mNL80211_USER_REG_HINT_INDOOR
 = 2,

2961 
	e∆80211_survey_öfo
 {

2962 
	m__NL80211_SURVEY_INFO_INVALID
,

2963 
	mNL80211_SURVEY_INFO_FREQUENCY
,

2964 
	mNL80211_SURVEY_INFO_NOISE
,

2965 
	mNL80211_SURVEY_INFO_IN_USE
,

2966 
	mNL80211_SURVEY_INFO_TIME
,

2967 
	mNL80211_SURVEY_INFO_TIME_BUSY
,

2968 
	mNL80211_SURVEY_INFO_TIME_EXT_BUSY
,

2969 
	mNL80211_SURVEY_INFO_TIME_RX
,

2970 
	mNL80211_SURVEY_INFO_TIME_TX
,

2971 
	mNL80211_SURVEY_INFO_TIME_SCAN
,

2974 
	m__NL80211_SURVEY_INFO_AFTER_LAST
,

2975 
	mNL80211_SURVEY_INFO_MAX
 = 
__NL80211_SURVEY_INFO_AFTER_LAST
 - 1

2979 
	#NL80211_SURVEY_INFO_CHANNEL_TIME
 
NL80211_SURVEY_INFO_TIME


	)

2980 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY
 
NL80211_SURVEY_INFO_TIME_BUSY


	)

2981 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY
 
NL80211_SURVEY_INFO_TIME_EXT_BUSY


	)

2982 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_RX
 
NL80211_SURVEY_INFO_TIME_RX


	)

2983 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_TX
 
NL80211_SURVEY_INFO_TIME_TX


	)

3004 
	e∆80211_m¡r_Êags
 {

3005 
	m__NL80211_MNTR_FLAG_INVALID
,

3006 
	mNL80211_MNTR_FLAG_FCSFAIL
,

3007 
	mNL80211_MNTR_FLAG_PLCPFAIL
,

3008 
	mNL80211_MNTR_FLAG_CONTROL
,

3009 
	mNL80211_MNTR_FLAG_OTHER_BSS
,

3010 
	mNL80211_MNTR_FLAG_COOK_FRAMES
,

3011 
	mNL80211_MNTR_FLAG_ACTIVE
,

3014 
	m__NL80211_MNTR_FLAG_AFTER_LAST
,

3015 
	mNL80211_MNTR_FLAG_MAX
 = 
__NL80211_MNTR_FLAG_AFTER_LAST
 - 1

3036 
	e∆80211_mesh_powî_mode
 {

3037 
	mNL80211_MESH_POWER_UNKNOWN
,

3038 
	mNL80211_MESH_POWER_ACTIVE
,

3039 
	mNL80211_MESH_POWER_LIGHT_SLEEP
,

3040 
	mNL80211_MESH_POWER_DEEP_SLEEP
,

3042 
	m__NL80211_MESH_POWER_AFTER_LAST
,

3043 
	mNL80211_MESH_POWER_MAX
 = 
__NL80211_MESH_POWER_AFTER_LAST
 - 1

3154 
	e∆80211_meshc⁄f_∑øms
 {

3155 
	m__NL80211_MESHCONF_INVALID
,

3156 
	mNL80211_MESHCONF_RETRY_TIMEOUT
,

3157 
	mNL80211_MESHCONF_CONFIRM_TIMEOUT
,

3158 
	mNL80211_MESHCONF_HOLDING_TIMEOUT
,

3159 
	mNL80211_MESHCONF_MAX_PEER_LINKS
,

3160 
	mNL80211_MESHCONF_MAX_RETRIES
,

3161 
	mNL80211_MESHCONF_TTL
,

3162 
	mNL80211_MESHCONF_AUTO_OPEN_PLINKS
,

3163 
	mNL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES
,

3164 
	mNL80211_MESHCONF_PATH_REFRESH_TIME
,

3165 
	mNL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT
,

3166 
	mNL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT
,

3167 
	mNL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL
,

3168 
	mNL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME
,

3169 
	mNL80211_MESHCONF_HWMP_ROOTMODE
,

3170 
	mNL80211_MESHCONF_ELEMENT_TTL
,

3171 
	mNL80211_MESHCONF_HWMP_RANN_INTERVAL
,

3172 
	mNL80211_MESHCONF_GATE_ANNOUNCEMENTS
,

3173 
	mNL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL
,

3174 
	mNL80211_MESHCONF_FORWARDING
,

3175 
	mNL80211_MESHCONF_RSSI_THRESHOLD
,

3176 
	mNL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR
,

3177 
	mNL80211_MESHCONF_HT_OPMODE
,

3178 
	mNL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT
,

3179 
	mNL80211_MESHCONF_HWMP_ROOT_INTERVAL
,

3180 
	mNL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL
,

3181 
	mNL80211_MESHCONF_POWER_MODE
,

3182 
	mNL80211_MESHCONF_AWAKE_WINDOW
,

3183 
	mNL80211_MESHCONF_PLINK_TIMEOUT
,

3186 
	m__NL80211_MESHCONF_ATTR_AFTER_LAST
,

3187 
	mNL80211_MESHCONF_ATTR_MAX
 = 
__NL80211_MESHCONF_ATTR_AFTER_LAST
 - 1

3239 
	e∆80211_mesh_£tup_∑øms
 {

3240 
	m__NL80211_MESH_SETUP_INVALID
,

3241 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL
,

3242 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_METRIC
,

3243 
	mNL80211_MESH_SETUP_IE
,

3244 
	mNL80211_MESH_SETUP_USERSPACE_AUTH
,

3245 
	mNL80211_MESH_SETUP_USERSPACE_AMPE
,

3246 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_SYNC
,

3247 
	mNL80211_MESH_SETUP_USERSPACE_MPM
,

3248 
	mNL80211_MESH_SETUP_AUTH_PROTOCOL
,

3251 
	m__NL80211_MESH_SETUP_ATTR_AFTER_LAST
,

3252 
	mNL80211_MESH_SETUP_ATTR_MAX
 = 
__NL80211_MESH_SETUP_ATTR_AFTER_LAST
 - 1

3269 
	e∆80211_txq_©å
 {

3270 
	m__NL80211_TXQ_ATTR_INVALID
,

3271 
	mNL80211_TXQ_ATTR_AC
,

3272 
	mNL80211_TXQ_ATTR_TXOP
,

3273 
	mNL80211_TXQ_ATTR_CWMIN
,

3274 
	mNL80211_TXQ_ATTR_CWMAX
,

3275 
	mNL80211_TXQ_ATTR_AIFS
,

3278 
	m__NL80211_TXQ_ATTR_AFTER_LAST
,

3279 
	mNL80211_TXQ_ATTR_MAX
 = 
__NL80211_TXQ_ATTR_AFTER_LAST
 - 1

3282 
	e∆80211_ac
 {

3283 
	mNL80211_AC_VO
,

3284 
	mNL80211_AC_VI
,

3285 
	mNL80211_AC_BE
,

3286 
	mNL80211_AC_BK
,

3287 
	mNL80211_NUM_ACS


3291 
	#NL80211_TXQ_ATTR_QUEUE
 
NL80211_TXQ_ATTR_AC


	)

3292 
	#NL80211_TXQ_Q_VO
 
NL80211_AC_VO


	)

3293 
	#NL80211_TXQ_Q_VI
 
NL80211_AC_VI


	)

3294 
	#NL80211_TXQ_Q_BE
 
NL80211_AC_BE


	)

3295 
	#NL80211_TXQ_Q_BK
 
NL80211_AC_BK


	)

3306 
	e∆80211_ch™√l_ty≥
 {

3307 
	mNL80211_CHAN_NO_HT
,

3308 
	mNL80211_CHAN_HT20
,

3309 
	mNL80211_CHAN_HT40MINUS
,

3310 
	mNL80211_CHAN_HT40PLUS


3332 
	e∆80211_ch™_width
 {

3333 
	mNL80211_CHAN_WIDTH_20_NOHT
,

3334 
	mNL80211_CHAN_WIDTH_20
,

3335 
	mNL80211_CHAN_WIDTH_40
,

3336 
	mNL80211_CHAN_WIDTH_80
,

3337 
	mNL80211_CHAN_WIDTH_80P80
,

3338 
	mNL80211_CHAN_WIDTH_160
,

3339 
	mNL80211_CHAN_WIDTH_5
,

3340 
	mNL80211_CHAN_WIDTH_10
,

3352 
	e∆80211_bss_sˇn_width
 {

3353 
	mNL80211_BSS_CHAN_WIDTH_20
,

3354 
	mNL80211_BSS_CHAN_WIDTH_10
,

3355 
	mNL80211_BSS_CHAN_WIDTH_5
,

3400 
	e∆80211_bss
 {

3401 
	m__NL80211_BSS_INVALID
,

3402 
	mNL80211_BSS_BSSID
,

3403 
	mNL80211_BSS_FREQUENCY
,

3404 
	mNL80211_BSS_TSF
,

3405 
	mNL80211_BSS_BEACON_INTERVAL
,

3406 
	mNL80211_BSS_CAPABILITY
,

3407 
	mNL80211_BSS_INFORMATION_ELEMENTS
,

3408 
	mNL80211_BSS_SIGNAL_MBM
,

3409 
	mNL80211_BSS_SIGNAL_UNSPEC
,

3410 
	mNL80211_BSS_STATUS
,

3411 
	mNL80211_BSS_SEEN_MS_AGO
,

3412 
	mNL80211_BSS_BEACON_IES
,

3413 
	mNL80211_BSS_CHAN_WIDTH
,

3414 
	mNL80211_BSS_BEACON_TSF
,

3415 
	mNL80211_BSS_PRESP_DATA
,

3416 
	mNL80211_BSS_LAST_SEEN_BOOTTIME
,

3419 
	m__NL80211_BSS_AFTER_LAST
,

3420 
	mNL80211_BSS_MAX
 = 
__NL80211_BSS_AFTER_LAST
 - 1

3435 
	e∆80211_bss_°©us
 {

3436 
	mNL80211_BSS_STATUS_AUTHENTICATED
,

3437 
	mNL80211_BSS_STATUS_ASSOCIATED
,

3438 
	mNL80211_BSS_STATUS_IBSS_JOINED
,

3455 
	e∆80211_auth_ty≥
 {

3456 
	mNL80211_AUTHTYPE_OPEN_SYSTEM
,

3457 
	mNL80211_AUTHTYPE_SHARED_KEY
,

3458 
	mNL80211_AUTHTYPE_FT
,

3459 
	mNL80211_AUTHTYPE_NETWORK_EAP
,

3460 
	mNL80211_AUTHTYPE_SAE
,

3463 
	m__NL80211_AUTHTYPE_NUM
,

3464 
	mNL80211_AUTHTYPE_MAX
 = 
__NL80211_AUTHTYPE_NUM
 - 1,

3465 
	mNL80211_AUTHTYPE_AUTOMATIC


3475 
	e∆80211_key_ty≥
 {

3476 
	mNL80211_KEYTYPE_GROUP
,

3477 
	mNL80211_KEYTYPE_PAIRWISE
,

3478 
	mNL80211_KEYTYPE_PEERKEY
,

3480 
	mNUM_NL80211_KEYTYPES


3488 
	e∆80211_mÂ
 {

3489 
	mNL80211_MFP_NO
,

3490 
	mNL80211_MFP_REQUIRED
,

3493 
	e∆80211_w∑_vîsi⁄s
 {

3494 
	mNL80211_WPA_VERSION_1
 = 1 << 0,

3495 
	mNL80211_WPA_VERSION_2
 = 1 << 1,

3507 
	e∆80211_key_deÁu…_ty≥s
 {

3508 
	m__NL80211_KEY_DEFAULT_TYPE_INVALID
,

3509 
	mNL80211_KEY_DEFAULT_TYPE_UNICAST
,

3510 
	mNL80211_KEY_DEFAULT_TYPE_MULTICAST
,

3512 
	mNUM_NL80211_KEY_DEFAULT_TYPES


3537 
	e∆80211_key_©åibuãs
 {

3538 
	m__NL80211_KEY_INVALID
,

3539 
	mNL80211_KEY_DATA
,

3540 
	mNL80211_KEY_IDX
,

3541 
	mNL80211_KEY_CIPHER
,

3542 
	mNL80211_KEY_SEQ
,

3543 
	mNL80211_KEY_DEFAULT
,

3544 
	mNL80211_KEY_DEFAULT_MGMT
,

3545 
	mNL80211_KEY_TYPE
,

3546 
	mNL80211_KEY_DEFAULT_TYPES
,

3549 
	m__NL80211_KEY_AFTER_LAST
,

3550 
	mNL80211_KEY_MAX
 = 
__NL80211_KEY_AFTER_LAST
 - 1

3568 
	e∆80211_tx_øã_©åibuãs
 {

3569 
	m__NL80211_TXRATE_INVALID
,

3570 
	mNL80211_TXRATE_LEGACY
,

3571 
	mNL80211_TXRATE_HT
,

3572 
	mNL80211_TXRATE_VHT
,

3573 
	mNL80211_TXRATE_GI
,

3576 
	m__NL80211_TXRATE_AFTER_LAST
,

3577 
	mNL80211_TXRATE_MAX
 = 
__NL80211_TXRATE_AFTER_LAST
 - 1

3580 
	#NL80211_TXRATE_MCS
 
NL80211_TXRATE_HT


	)

3581 
	#NL80211_VHT_NSS_MAX
 8

	)

3587 
	s∆80211_txøã_vht
 {

3588 
__u16
 
	mmcs
[
NL80211_VHT_NSS_MAX
];

3591 
	e∆80211_txøã_gi
 {

3592 
	mNL80211_TXRATE_DEFAULT_GI
,

3593 
	mNL80211_TXRATE_FORCE_SGI
,

3594 
	mNL80211_TXRATE_FORCE_LGI
,

3603 
	e∆80211_b™d
 {

3604 
	mNL80211_BAND_2GHZ
,

3605 
	mNL80211_BAND_5GHZ
,

3606 
	mNL80211_BAND_60GHZ
,

3614 
	e∆80211_ps_°©e
 {

3615 
	mNL80211_PS_DISABLED
,

3616 
	mNL80211_PS_ENABLED
,

3647 
	e∆80211_©å_cqm
 {

3648 
	m__NL80211_ATTR_CQM_INVALID
,

3649 
	mNL80211_ATTR_CQM_RSSI_THOLD
,

3650 
	mNL80211_ATTR_CQM_RSSI_HYST
,

3651 
	mNL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT
,

3652 
	mNL80211_ATTR_CQM_PKT_LOSS_EVENT
,

3653 
	mNL80211_ATTR_CQM_TXE_RATE
,

3654 
	mNL80211_ATTR_CQM_TXE_PKTS
,

3655 
	mNL80211_ATTR_CQM_TXE_INTVL
,

3656 
	mNL80211_ATTR_CQM_BEACON_LOSS_EVENT
,

3659 
	m__NL80211_ATTR_CQM_AFTER_LAST
,

3660 
	mNL80211_ATTR_CQM_MAX
 = 
__NL80211_ATTR_CQM_AFTER_LAST
 - 1

3671 
	e∆80211_cqm_rssi_thªshﬁd_evít
 {

3672 
	mNL80211_CQM_RSSI_THRESHOLD_EVENT_LOW
,

3673 
	mNL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH
,

3674 
	mNL80211_CQM_RSSI_BEACON_LOSS_EVENT
,

3684 
	e∆80211_tx_powî_£âög
 {

3685 
	mNL80211_TX_POWER_AUTOMATIC
,

3686 
	mNL80211_TX_POWER_LIMITED
,

3687 
	mNL80211_TX_POWER_FIXED
,

3711 
	e∆80211_∑ckë_∑âîn_©å
 {

3712 
	m__NL80211_PKTPAT_INVALID
,

3713 
	mNL80211_PKTPAT_MASK
,

3714 
	mNL80211_PKTPAT_PATTERN
,

3715 
	mNL80211_PKTPAT_OFFSET
,

3717 
	mNUM_NL80211_PKTPAT
,

3718 
	mMAX_NL80211_PKTPAT
 = 
NUM_NL80211_PKTPAT
 - 1,

3734 
	s∆80211_∑âîn_suµ‹t
 {

3735 
__u32
 
	mmax_∑âîns
;

3736 
__u32
 
	mmö_∑âîn_Àn
;

3737 
__u32
 
	mmax_∑âîn_Àn
;

3738 
__u32
 
	mmax_pkt_off£t
;

3739 } 
__©åibuã__
((
∑cked
));

3742 
	#__NL80211_WOWLAN_PKTPAT_INVALID
 
__NL80211_PKTPAT_INVALID


	)

3743 
	#NL80211_WOWLAN_PKTPAT_MASK
 
NL80211_PKTPAT_MASK


	)

3744 
	#NL80211_WOWLAN_PKTPAT_PATTERN
 
NL80211_PKTPAT_PATTERN


	)

3745 
	#NL80211_WOWLAN_PKTPAT_OFFSET
 
NL80211_PKTPAT_OFFSET


	)

3746 
	#NUM_NL80211_WOWLAN_PKTPAT
 
NUM_NL80211_PKTPAT


	)

3747 
	#MAX_NL80211_WOWLAN_PKTPAT
 
MAX_NL80211_PKTPAT


	)

3748 
	#∆80211_wowœn_∑âîn_suµ‹t
 
∆80211_∑âîn_suµ‹t


	)

3839 
	e∆80211_wowœn_åiggîs
 {

3840 
	m__NL80211_WOWLAN_TRIG_INVALID
,

3841 
	mNL80211_WOWLAN_TRIG_ANY
,

3842 
	mNL80211_WOWLAN_TRIG_DISCONNECT
,

3843 
	mNL80211_WOWLAN_TRIG_MAGIC_PKT
,

3844 
	mNL80211_WOWLAN_TRIG_PKT_PATTERN
,

3845 
	mNL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED
,

3846 
	mNL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE
,

3847 
	mNL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST
,

3848 
	mNL80211_WOWLAN_TRIG_4WAY_HANDSHAKE
,

3849 
	mNL80211_WOWLAN_TRIG_RFKILL_RELEASE
,

3850 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_80211
,

3851 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN
,

3852 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_8023
,

3853 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN
,

3854 
	mNL80211_WOWLAN_TRIG_TCP_CONNECTION
,

3855 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH
,

3856 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST
,

3857 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS
,

3858 
	mNL80211_WOWLAN_TRIG_NET_DETECT
,

3859 
	mNL80211_WOWLAN_TRIG_NET_DETECT_RESULTS
,

3862 
	mNUM_NL80211_WOWLAN_TRIG
,

3863 
	mMAX_NL80211_WOWLAN_TRIG
 = 
NUM_NL80211_WOWLAN_TRIG
 - 1

3899 
	s∆80211_wowœn_t˝_d©a_£q
 {

3900 
__u32
 
	m°¨t
, 
	moff£t
, 
	mÀn
;

3910 
	s∆80211_wowœn_t˝_d©a_tokí
 {

3911 
__u32
 
	moff£t
, 
	mÀn
;

3912 
__u8
 
	mtokí_°ªam
[];

3921 
	s∆80211_wowœn_t˝_d©a_tokí_„©uª
 {

3922 
__u32
 
	mmö_Àn
, 
	mmax_Àn
, 
	mbufsize
;

3957 
	e∆80211_wowœn_t˝_©ås
 {

3958 
	m__NL80211_WOWLAN_TCP_INVALID
,

3959 
	mNL80211_WOWLAN_TCP_SRC_IPV4
,

3960 
	mNL80211_WOWLAN_TCP_DST_IPV4
,

3961 
	mNL80211_WOWLAN_TCP_DST_MAC
,

3962 
	mNL80211_WOWLAN_TCP_SRC_PORT
,

3963 
	mNL80211_WOWLAN_TCP_DST_PORT
,

3964 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD
,

3965 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ
,

3966 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN
,

3967 
	mNL80211_WOWLAN_TCP_DATA_INTERVAL
,

3968 
	mNL80211_WOWLAN_TCP_WAKE_PAYLOAD
,

3969 
	mNL80211_WOWLAN_TCP_WAKE_MASK
,

3972 
	mNUM_NL80211_WOWLAN_TCP
,

3973 
	mMAX_NL80211_WOWLAN_TCP
 = 
NUM_NL80211_WOWLAN_TCP
 - 1

3985 
	s∆80211_cﬂÀs˚_ruÀ_suµ‹t
 {

3986 
__u32
 
	mmax_ruÀs
;

3987 
∆80211_∑âîn_suµ‹t
 
	m∑t
;

3988 
__u32
 
	mmax_dñay
;

3989 } 
__©åibuã__
((
∑cked
));

4002 
	e∆80211_©å_cﬂÀs˚_ruÀ
 {

4003 
	m__NL80211_COALESCE_RULE_INVALID
,

4004 
	mNL80211_ATTR_COALESCE_RULE_DELAY
,

4005 
	mNL80211_ATTR_COALESCE_RULE_CONDITION
,

4006 
	mNL80211_ATTR_COALESCE_RULE_PKT_PATTERN
,

4009 
	mNUM_NL80211_ATTR_COALESCE_RULE
,

4010 
	mNL80211_ATTR_COALESCE_RULE_MAX
 = 
NUM_NL80211_ATTR_COALESCE_RULE
 - 1

4020 
	e∆80211_cﬂÀs˚_c⁄dôi⁄
 {

4021 
	mNL80211_COALESCE_CONDITION_MATCH
,

4022 
	mNL80211_COALESCE_CONDITION_NO_MATCH


4035 
	e∆80211_iÁ˚_limô_©ås
 {

4036 
	mNL80211_IFACE_LIMIT_UNSPEC
,

4037 
	mNL80211_IFACE_LIMIT_MAX
,

4038 
	mNL80211_IFACE_LIMIT_TYPES
,

4041 
	mNUM_NL80211_IFACE_LIMIT
,

4042 
	mMAX_NL80211_IFACE_LIMIT
 = 
NUM_NL80211_IFACE_LIMIT
 - 1

4091 
	e∆80211_if_combö©i⁄_©ås
 {

4092 
	mNL80211_IFACE_COMB_UNSPEC
,

4093 
	mNL80211_IFACE_COMB_LIMITS
,

4094 
	mNL80211_IFACE_COMB_MAXNUM
,

4095 
	mNL80211_IFACE_COMB_STA_AP_BI_MATCH
,

4096 
	mNL80211_IFACE_COMB_NUM_CHANNELS
,

4097 
	mNL80211_IFACE_COMB_RADAR_DETECT_WIDTHS
,

4098 
	mNL80211_IFACE_COMB_RADAR_DETECT_REGIONS
,

4101 
	mNUM_NL80211_IFACE_COMB
,

4102 
	mMAX_NL80211_IFACE_COMB
 = 
NUM_NL80211_IFACE_COMB
 - 1

4124 
	e∆80211_∂ök_°©e
 {

4125 
	mNL80211_PLINK_LISTEN
,

4126 
	mNL80211_PLINK_OPN_SNT
,

4127 
	mNL80211_PLINK_OPN_RCVD
,

4128 
	mNL80211_PLINK_CNF_RCVD
,

4129 
	mNL80211_PLINK_ESTAB
,

4130 
	mNL80211_PLINK_HOLDING
,

4131 
	mNL80211_PLINK_BLOCKED
,

4134 
	mNUM_NL80211_PLINK_STATES
,

4135 
	mMAX_NL80211_PLINK_STATES
 = 
NUM_NL80211_PLINK_STATES
 - 1

4146 
	e∂ök_a˘i⁄s
 {

4147 
	mNL80211_PLINK_ACTION_NO_ACTION
,

4148 
	mNL80211_PLINK_ACTION_OPEN
,

4149 
	mNL80211_PLINK_ACTION_BLOCK
,

4151 
	mNUM_NL80211_PLINK_ACTIONS
,

4155 
	#NL80211_KCK_LEN
 16

	)

4156 
	#NL80211_KEK_LEN
 16

	)

4157 
	#NL80211_REPLAY_CTR_LEN
 8

	)

4168 
	e∆80211_ªkey_d©a
 {

4169 
	m__NL80211_REKEY_DATA_INVALID
,

4170 
	mNL80211_REKEY_DATA_KEK
,

4171 
	mNL80211_REKEY_DATA_KCK
,

4172 
	mNL80211_REKEY_DATA_REPLAY_CTR
,

4175 
	mNUM_NL80211_REKEY_DATA
,

4176 
	mMAX_NL80211_REKEY_DATA
 = 
NUM_NL80211_REKEY_DATA
 - 1

4188 
	e∆80211_hiddí_ssid
 {

4189 
	mNL80211_HIDDEN_SSID_NOT_IN_USE
,

4190 
	mNL80211_HIDDEN_SSID_ZERO_LEN
,

4191 
	mNL80211_HIDDEN_SSID_ZERO_CONTENTS


4204 
	e∆80211_°a_wme_©å
 {

4205 
	m__NL80211_STA_WME_INVALID
,

4206 
	mNL80211_STA_WME_UAPSD_QUEUES
,

4207 
	mNL80211_STA_WME_MAX_SP
,

4210 
	m__NL80211_STA_WME_AFTER_LAST
,

4211 
	mNL80211_STA_WME_MAX
 = 
__NL80211_STA_WME_AFTER_LAST
 - 1

4226 
	e∆80211_pmkß_ˇndid©e_©å
 {

4227 
	m__NL80211_PMKSA_CANDIDATE_INVALID
,

4228 
	mNL80211_PMKSA_CANDIDATE_INDEX
,

4229 
	mNL80211_PMKSA_CANDIDATE_BSSID
,

4230 
	mNL80211_PMKSA_CANDIDATE_PREAUTH
,

4233 
	mNUM_NL80211_PMKSA_CANDIDATE
,

4234 
	mMAX_NL80211_PMKSA_CANDIDATE
 = 
NUM_NL80211_PMKSA_CANDIDATE
 - 1

4245 
	e∆80211_tdls_›î©i⁄
 {

4246 
	mNL80211_TDLS_DISCOVERY_REQ
,

4247 
	mNL80211_TDLS_SETUP
,

4248 
	mNL80211_TDLS_TEARDOWN
,

4249 
	mNL80211_TDLS_ENABLE_LINK
,

4250 
	mNL80211_TDLS_DISABLE_LINK
,

4354 
	e∆80211_„©uª_Êags
 {

4355 
	mNL80211_FEATURE_SK_TX_STATUS
 = 1 << 0,

4356 
	mNL80211_FEATURE_HT_IBSS
 = 1 << 1,

4357 
	mNL80211_FEATURE_INACTIVITY_TIMER
 = 1 << 2,

4358 
	mNL80211_FEATURE_CELL_BASE_REG_HINTS
 = 1 << 3,

4359 
	mNL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL
 = 1 << 4,

4360 
	mNL80211_FEATURE_SAE
 = 1 << 5,

4361 
	mNL80211_FEATURE_LOW_PRIORITY_SCAN
 = 1 << 6,

4362 
	mNL80211_FEATURE_SCAN_FLUSH
 = 1 << 7,

4363 
	mNL80211_FEATURE_AP_SCAN
 = 1 << 8,

4364 
	mNL80211_FEATURE_VIF_TXPOWER
 = 1 << 9,

4365 
	mNL80211_FEATURE_NEED_OBSS_SCAN
 = 1 << 10,

4366 
	mNL80211_FEATURE_P2P_GO_CTWIN
 = 1 << 11,

4367 
	mNL80211_FEATURE_P2P_GO_OPPPS
 = 1 << 12,

4369 
	mNL80211_FEATURE_ADVERTISE_CHAN_LIMITS
 = 1 << 14,

4370 
	mNL80211_FEATURE_FULL_AP_CLIENT_STATE
 = 1 << 15,

4371 
	mNL80211_FEATURE_USERSPACE_MPM
 = 1 << 16,

4372 
	mNL80211_FEATURE_ACTIVE_MONITOR
 = 1 << 17,

4373 
	mNL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE
 = 1 << 18,

4374 
	mNL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES
 = 1 << 19,

4375 
	mNL80211_FEATURE_WFA_TPC_IE_IN_PROBES
 = 1 << 20,

4376 
	mNL80211_FEATURE_QUIET
 = 1 << 21,

4377 
	mNL80211_FEATURE_TX_POWER_INSERTION
 = 1 << 22,

4378 
	mNL80211_FEATURE_ACKTO_ESTIMATION
 = 1 << 23,

4379 
	mNL80211_FEATURE_STATIC_SMPS
 = 1 << 24,

4380 
	mNL80211_FEATURE_DYNAMIC_SMPS
 = 1 << 25,

4381 
	mNL80211_FEATURE_SUPPORTS_WMM_ADMISSION
 = 1 << 26,

4382 
	mNL80211_FEATURE_MAC_ON_CREATE
 = 1 << 27,

4383 
	mNL80211_FEATURE_TDLS_CHANNEL_SWITCH
 = 1 << 28,

4384 
	mNL80211_FEATURE_SCAN_RANDOM_MAC_ADDR
 = 1 << 29,

4385 
	mNL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR
 = 1 << 30,

4386 
	mNL80211_FEATURE_ND_RANDOM_MAC_ADDR
 = 1 << 31,

4396 
	e∆80211_ext_„©uª_ödex
 {

4397 
	mNL80211_EXT_FEATURE_VHT_IBSS
,

4400 
	mNUM_NL80211_EXT_FEATURES
,

4401 
	mMAX_NL80211_EXT_FEATURES
 = 
NUM_NL80211_EXT_FEATURES
 - 1

4418 
	e∆80211_¥obe_ª•_ofÊﬂd_suµ‹t_©å
 {

4419 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS
 = 1<<0,

4420 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2
 = 1<<1,

4421 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P
 = 1<<2,

4422 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U
 = 1<<3,

4431 
	e∆80211_c⁄√˘_Áûed_ªas⁄
 {

4432 
	mNL80211_CONN_FAIL_MAX_CLIENTS
,

4433 
	mNL80211_CONN_FAIL_BLOCKED_CLIENT
,

4460 
	e∆80211_sˇn_Êags
 {

4461 
	mNL80211_SCAN_FLAG_LOW_PRIORITY
 = 1<<0,

4462 
	mNL80211_SCAN_FLAG_FLUSH
 = 1<<1,

4463 
	mNL80211_SCAN_FLAG_AP
 = 1<<2,

4464 
	mNL80211_SCAN_FLAG_RANDOM_ADDR
 = 1<<3,

4480 
	e∆80211_a˛_pﬁicy
 {

4481 
	mNL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED
,

4482 
	mNL80211_ACL_POLICY_DENY_UNLESS_LISTED
,

4495 
	e∆80211_smps_mode
 {

4496 
	mNL80211_SMPS_OFF
,

4497 
	mNL80211_SMPS_STATIC
,

4498 
	mNL80211_SMPS_DYNAMIC
,

4500 
	m__NL80211_SMPS_AFTER_LAST
,

4501 
	mNL80211_SMPS_MAX
 = 
__NL80211_SMPS_AFTER_LAST
 - 1

4519 
	e∆80211_ød¨_evít
 {

4520 
	mNL80211_RADAR_DETECTED
,

4521 
	mNL80211_RADAR_CAC_FINISHED
,

4522 
	mNL80211_RADAR_CAC_ABORTED
,

4523 
	mNL80211_RADAR_NOP_FINISHED
,

4537 
	e∆80211_dfs_°©e
 {

4538 
	mNL80211_DFS_USABLE
,

4539 
	mNL80211_DFS_UNAVAILABLE
,

4540 
	mNL80211_DFS_AVAILABLE
,

4551 
	e∆80211_¥Ÿocﬁ_„©uªs
 {

4552 
	mNL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP
 = 1 << 0,

4564 
	e∆80211_¸ô_¥Ÿo_id
 {

4565 
	mNL80211_CRIT_PROTO_UNSPEC
,

4566 
	mNL80211_CRIT_PROTO_DHCP
,

4567 
	mNL80211_CRIT_PROTO_EAPOL
,

4568 
	mNL80211_CRIT_PROTO_APIPA
,

4570 
	mNUM_NL80211_CRIT_PROTO


4574 
	#NL80211_CRIT_PROTO_MAX_DURATION
 5000

	)

4583 
	e∆80211_rxmgmt_Êags
 {

4584 
	mNL80211_RXMGMT_FLAG_ANSWERED
 = 1 << 0,

4592 
	#NL80211_VENDOR_ID_IS_LINUX
 0x80000000

	)

4602 
	s∆80211_víd‹_cmd_öfo
 {

4603 
__u32
 
	mvíd‹_id
;

4604 
__u32
 
	msubcmd
;

4617 
	e∆80211_tdls_≥î_ˇ∑bûôy
 {

4618 
	mNL80211_TDLS_PEER_HT
 = 1<<0,

4619 
	mNL80211_TDLS_PEER_VHT
 = 1<<1,

4620 
	mNL80211_TDLS_PEER_WMM
 = 1<<2,

4636 
	e∆80211_sched_sˇn_∂™
 {

4637 
	m__NL80211_SCHED_SCAN_PLAN_INVALID
,

4638 
	mNL80211_SCHED_SCAN_PLAN_INTERVAL
,

4639 
	mNL80211_SCHED_SCAN_PLAN_ITERATIONS
,

4642 
	m__NL80211_SCHED_SCAN_PLAN_AFTER_LAST
,

4643 
	mNL80211_SCHED_SCAN_PLAN_MAX
 =

4644 
__NL80211_SCHED_SCAN_PLAN_AFTER_LAST
 - 1

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/random.h

7 #i‚de‡
_LINUX_RANDOM_H


8 
	#_LINUX_RANDOM_H


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/io˘l.h
>

12 
	~<löux/úqƒ.h
>

17 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

20 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

23 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

29 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

32 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

35 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

37 
	sønd_poﬁ_öfo
 {

38 
	míå›y_cou¡
;

39 
	mbuf_size
;

40 
__u32
 
	mbuf
[0];

49 
	#GRND_NONBLOCK
 0x0001

	)

50 
	#GRND_RANDOM
 0x0002

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/libc-com∑t.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/sockë.h
>

27 #i‡
__UAPI_DEF_IF_IFNAMSIZ


28 
	#IFNAMSIZ
 16

	)

30 
	#IFALIASZ
 256

	)

31 
	~<löux/hdlc/io˘l.h
>

34 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 != 0 && \

35 
	g__UAPI_DEF_IF_NET_DEVICE_FLAGS
 != 0

76 
	e√t_devi˚_Êags
 {

78 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


79 
IFF_UP
 = 1<<0,

80 
	mIFF_BROADCAST
 = 1<<1,

81 
	mIFF_DEBUG
 = 1<<2,

82 
	mIFF_LOOPBACK
 = 1<<3,

83 
	mIFF_POINTOPOINT
 = 1<<4,

84 
	mIFF_NOTRAILERS
 = 1<<5,

85 
	mIFF_RUNNING
 = 1<<6,

86 
	mIFF_NOARP
 = 1<<7,

87 
	mIFF_PROMISC
 = 1<<8,

88 
	mIFF_ALLMULTI
 = 1<<9,

89 
	mIFF_MASTER
 = 1<<10,

90 
	mIFF_SLAVE
 = 1<<11,

91 
	mIFF_MULTICAST
 = 1<<12,

92 
	mIFF_PORTSEL
 = 1<<13,

93 
	mIFF_AUTOMEDIA
 = 1<<14,

94 
	mIFF_DYNAMIC
 = 1<<15,

96 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


97 
	mIFF_LOWER_UP
 = 1<<16,

98 
	mIFF_DORMANT
 = 1<<17,

99 
	mIFF_ECHO
 = 1<<18,

105 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


106 
	#IFF_UP
 
IFF_UP


	)

107 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

108 
	#IFF_DEBUG
 
IFF_DEBUG


	)

109 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

110 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

111 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

112 
	#IFF_RUNNING
 
IFF_RUNNING


	)

113 
	#IFF_NOARP
 
IFF_NOARP


	)

114 
	#IFF_PROMISC
 
IFF_PROMISC


	)

115 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

116 
	#IFF_MASTER
 
IFF_MASTER


	)

117 
	#IFF_SLAVE
 
IFF_SLAVE


	)

118 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

119 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

120 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

121 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

124 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


125 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

126 
	#IFF_DORMANT
 
IFF_DORMANT


	)

127 
	#IFF_ECHO
 
IFF_ECHO


	)

130 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

131 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

133 
	#IF_GET_IFACE
 0x0001

	)

134 
	#IF_GET_PROTO
 0x0002

	)

137 
	#IF_IFACE_V35
 0x1000

	)

138 
	#IF_IFACE_V24
 0x1001

	)

139 
	#IF_IFACE_X21
 0x1002

	)

140 
	#IF_IFACE_T1
 0x1003

	)

141 
	#IF_IFACE_E1
 0x1004

	)

142 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

143 
	#IF_IFACE_X21D
 0x1006

	)

146 
	#IF_PROTO_HDLC
 0x2000

	)

147 
	#IF_PROTO_PPP
 0x2001

	)

148 
	#IF_PROTO_CISCO
 0x2002

	)

149 
	#IF_PROTO_FR
 0x2003

	)

150 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

151 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

152 
	#IF_PROTO_X25
 0x2006

	)

153 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

154 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

155 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

156 
	#IF_PROTO_FR_PVC
 0x200A

	)

157 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

158 
	#IF_PROTO_RAW
 0x200C

	)

162 
	mIF_OPER_UNKNOWN
,

163 
	mIF_OPER_NOTPRESENT
,

164 
	mIF_OPER_DOWN
,

165 
	mIF_OPER_LOWERLAYERDOWN
,

166 
	mIF_OPER_TESTING
,

167 
	mIF_OPER_DORMANT
,

168 
	mIF_OPER_UP
,

173 
	mIF_LINK_MODE_DEFAULT
,

174 
	mIF_LINK_MODE_DORMANT
,

188 #i‡
__UAPI_DEF_IF_IFMAP


189 
	sifm≠
 {

190 
	mmem_°¨t
;

191 
	mmem_íd
;

192 
	mba£_addr
;

193 
	múq
;

194 
	mdma
;

195 
	mp‹t
;

200 
	sif_£âögs
 {

201 
	mty≥
;

202 
	msize
;

205 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

206 
cisco_¥Ÿo
 *
	mcisco
;

207 
‰_¥Ÿo
 *
	m‰
;

208 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

209 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

212 
sync_£rül_£âögs
 *
	msync
;

213 
ã1_£âögs
 *
	mã1
;

214 } 
	mifs_ifsu
;

225 #i‡
__UAPI_DEF_IF_IFREQ


226 
	si‰eq
 {

227 
	#IFHWADDRLEN
 6

	)

230 
	mi‰n_«me
[
IFNAMSIZ
];

231 } 
	mi‰_i‰n
;

234 
sockaddr
 
	mi‰u_addr
;

235 
sockaddr
 
	mi‰u_d°addr
;

236 
sockaddr
 
	mi‰u_brﬂdaddr
;

237 
sockaddr
 
	mi‰u_√tmask
;

238 
sockaddr
 
	mi‰u_hwaddr
;

239 
	mi‰u_Êags
;

240 
	mi‰u_ivÆue
;

241 
	mi‰u_mtu
;

242 
ifm≠
 
	mi‰u_m≠
;

243 
	mi‰u_¶ave
[
IFNAMSIZ
];

244 
	mi‰u_√w«me
[
IFNAMSIZ
];

245 * 
	mi‰u_d©a
;

246 
if_£âögs
 
	mi‰u_£âögs
;

247 } 
	mi‰_i‰u
;

251 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

252 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

253 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

254 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

255 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

256 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

257 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

258 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

259 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

260 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

261 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

262 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

263 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

264 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

265 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

266 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

267 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

277 #i‡
__UAPI_DEF_IF_IFCONF


278 
	sifc⁄f
 {

279 
	mifc_Àn
;

281 *
	mifcu_buf
;

282 
i‰eq
 *
	mifcu_ªq
;

283 } 
	mifc_ifcu
;

287 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

288 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	mIFLA_CARRIER_CHANGES
,

148 
	mIFLA_PHYS_SWITCH_ID
,

149 
	mIFLA_LINK_NETNSID
,

150 
	mIFLA_PHYS_PORT_NAME
,

151 
	mIFLA_PROTO_DOWN
,

152 
	m__IFLA_MAX


156 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

159 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

160 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

163 
	mIFLA_INET_UNSPEC
,

164 
	mIFLA_INET_CONF
,

165 
	m__IFLA_INET_MAX
,

168 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

201 
	mIFLA_INET6_UNSPEC
,

202 
	mIFLA_INET6_FLAGS
,

203 
	mIFLA_INET6_CONF
,

204 
	mIFLA_INET6_STATS
,

205 
	mIFLA_INET6_MCAST
,

206 
	mIFLA_INET6_CACHEINFO
,

207 
	mIFLA_INET6_ICMP6STATS
,

208 
	mIFLA_INET6_TOKEN
,

209 
	mIFLA_INET6_ADDR_GEN_MODE
,

210 
	m__IFLA_INET6_MAX


213 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

215 
	eö6_addr_gí_mode
 {

216 
	mIN6_ADDR_GEN_MODE_EUI64
,

217 
	mIN6_ADDR_GEN_MODE_NONE
,

218 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

224 
	mIFLA_BR_UNSPEC
,

225 
	mIFLA_BR_FORWARD_DELAY
,

226 
	mIFLA_BR_HELLO_TIME
,

227 
	mIFLA_BR_MAX_AGE
,

228 
	mIFLA_BR_AGEING_TIME
,

229 
	mIFLA_BR_STP_STATE
,

230 
	mIFLA_BR_PRIORITY
,

231 
	mIFLA_BR_VLAN_FILTERING
,

232 
	mIFLA_BR_VLAN_PROTOCOL
,

233 
	mIFLA_BR_GROUP_FWD_MASK
,

234 
	mIFLA_BR_ROOT_ID
,

235 
	mIFLA_BR_BRIDGE_ID
,

236 
	mIFLA_BR_ROOT_PORT
,

237 
	mIFLA_BR_ROOT_PATH_COST
,

238 
	mIFLA_BR_TOPOLOGY_CHANGE
,

239 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

240 
	mIFLA_BR_HELLO_TIMER
,

241 
	mIFLA_BR_TCN_TIMER
,

242 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

243 
	mIFLA_BR_GC_TIMER
,

244 
	mIFLA_BR_GROUP_ADDR
,

245 
	mIFLA_BR_FDB_FLUSH
,

246 
	mIFLA_BR_MCAST_ROUTER
,

247 
	mIFLA_BR_MCAST_SNOOPING
,

248 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

249 
	mIFLA_BR_MCAST_QUERIER
,

250 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

251 
	mIFLA_BR_MCAST_HASH_MAX
,

252 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

253 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

254 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

255 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

256 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

257 
	mIFLA_BR_MCAST_QUERY_INTVL
,

258 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

259 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

260 
	mIFLA_BR_NF_CALL_IPTABLES
,

261 
	mIFLA_BR_NF_CALL_IP6TABLES
,

262 
	mIFLA_BR_NF_CALL_ARPTABLES
,

263 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

264 
	m__IFLA_BR_MAX
,

267 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

269 
	siÊa_bridge_id
 {

270 
__u8
 
	m¥io
[2];

271 
__u8
 
	maddr
[6];

275 
	mBRIDGE_MODE_UNSPEC
,

276 
	mBRIDGE_MODE_HAIRPIN
,

280 
	mIFLA_BRPORT_UNSPEC
,

281 
	mIFLA_BRPORT_STATE
,

282 
	mIFLA_BRPORT_PRIORITY
,

283 
	mIFLA_BRPORT_COST
,

284 
	mIFLA_BRPORT_MODE
,

285 
	mIFLA_BRPORT_GUARD
,

286 
	mIFLA_BRPORT_PROTECT
,

287 
	mIFLA_BRPORT_FAST_LEAVE
,

288 
	mIFLA_BRPORT_LEARNING
,

289 
	mIFLA_BRPORT_UNICAST_FLOOD
,

290 
	mIFLA_BRPORT_PROXYARP
,

291 
	mIFLA_BRPORT_LEARNING_SYNC
,

292 
	mIFLA_BRPORT_PROXYARP_WIFI
,

293 
	mIFLA_BRPORT_ROOT_ID
,

294 
	mIFLA_BRPORT_BRIDGE_ID
,

295 
	mIFLA_BRPORT_DESIGNATED_PORT
,

296 
	mIFLA_BRPORT_DESIGNATED_COST
,

297 
	mIFLA_BRPORT_ID
,

298 
	mIFLA_BRPORT_NO
,

299 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

300 
	mIFLA_BRPORT_CONFIG_PENDING
,

301 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

302 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

303 
	mIFLA_BRPORT_HOLD_TIMER
,

304 
	mIFLA_BRPORT_FLUSH
,

305 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

306 
	m__IFLA_BRPORT_MAX


308 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

310 
	siÊa_ˇcheöfo
 {

311 
__u32
 
	mmax_ªasm_Àn
;

312 
__u32
 
	mt°amp
;

313 
__u32
 
	mªachabÀ_time
;

314 
__u32
 
	mªå™s_time
;

318 
	mIFLA_INFO_UNSPEC
,

319 
	mIFLA_INFO_KIND
,

320 
	mIFLA_INFO_DATA
,

321 
	mIFLA_INFO_XSTATS
,

322 
	mIFLA_INFO_SLAVE_KIND
,

323 
	mIFLA_INFO_SLAVE_DATA
,

324 
	m__IFLA_INFO_MAX
,

327 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

332 
	mIFLA_VLAN_UNSPEC
,

333 
	mIFLA_VLAN_ID
,

334 
	mIFLA_VLAN_FLAGS
,

335 
	mIFLA_VLAN_EGRESS_QOS
,

336 
	mIFLA_VLAN_INGRESS_QOS
,

337 
	mIFLA_VLAN_PROTOCOL
,

338 
	m__IFLA_VLAN_MAX
,

341 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

343 
	siÊa_vœn_Êags
 {

344 
__u32
 
	mÊags
;

345 
__u32
 
	mmask
;

349 
	mIFLA_VLAN_QOS_UNSPEC
,

350 
	mIFLA_VLAN_QOS_MAPPING
,

351 
	m__IFLA_VLAN_QOS_MAX


354 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

356 
	siÊa_vœn_qos_m≠pög
 {

357 
__u32
 
	m‰om
;

358 
__u32
 
	mto
;

363 
	mIFLA_MACVLAN_UNSPEC
,

364 
	mIFLA_MACVLAN_MODE
,

365 
	mIFLA_MACVLAN_FLAGS
,

366 
	mIFLA_MACVLAN_MACADDR_MODE
,

367 
	mIFLA_MACVLAN_MACADDR
,

368 
	mIFLA_MACVLAN_MACADDR_DATA
,

369 
	mIFLA_MACVLAN_MACADDR_COUNT
,

370 
	m__IFLA_MACVLAN_MAX
,

373 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

375 
	emacvœn_mode
 {

376 
	mMACVLAN_MODE_PRIVATE
 = 1,

377 
	mMACVLAN_MODE_VEPA
 = 2,

378 
	mMACVLAN_MODE_BRIDGE
 = 4,

379 
	mMACVLAN_MODE_PASSTHRU
 = 8,

380 
	mMACVLAN_MODE_SOURCE
 = 16,

383 
	emacvœn_maˇddr_mode
 {

384 
	mMACVLAN_MACADDR_ADD
,

385 
	mMACVLAN_MACADDR_DEL
,

386 
	mMACVLAN_MACADDR_FLUSH
,

387 
	mMACVLAN_MACADDR_SET
,

390 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

394 
	mIFLA_VRF_UNSPEC
,

395 
	mIFLA_VRF_TABLE
,

396 
	m__IFLA_VRF_MAX


399 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

403 
	mIFLA_IPVLAN_UNSPEC
,

404 
	mIFLA_IPVLAN_MODE
,

405 
	m__IFLA_IPVLAN_MAX


408 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

410 
	eùvœn_mode
 {

411 
	mIPVLAN_MODE_L2
 = 0,

412 
	mIPVLAN_MODE_L3
,

413 
	mIPVLAN_MODE_MAX


418 
	mIFLA_VXLAN_UNSPEC
,

419 
	mIFLA_VXLAN_ID
,

420 
	mIFLA_VXLAN_GROUP
,

421 
	mIFLA_VXLAN_LINK
,

422 
	mIFLA_VXLAN_LOCAL
,

423 
	mIFLA_VXLAN_TTL
,

424 
	mIFLA_VXLAN_TOS
,

425 
	mIFLA_VXLAN_LEARNING
,

426 
	mIFLA_VXLAN_AGEING
,

427 
	mIFLA_VXLAN_LIMIT
,

428 
	mIFLA_VXLAN_PORT_RANGE
,

429 
	mIFLA_VXLAN_PROXY
,

430 
	mIFLA_VXLAN_RSC
,

431 
	mIFLA_VXLAN_L2MISS
,

432 
	mIFLA_VXLAN_L3MISS
,

433 
	mIFLA_VXLAN_PORT
,

434 
	mIFLA_VXLAN_GROUP6
,

435 
	mIFLA_VXLAN_LOCAL6
,

436 
	mIFLA_VXLAN_UDP_CSUM
,

437 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

438 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

439 
	mIFLA_VXLAN_REMCSUM_TX
,

440 
	mIFLA_VXLAN_REMCSUM_RX
,

441 
	mIFLA_VXLAN_GBP
,

442 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

443 
	mIFLA_VXLAN_COLLECT_METADATA
,

444 
	mIFLA_VXLAN_FAN_MAP
 = 33,

445 
	m__IFLA_VXLAN_MAX


447 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

449 
	siÊa_vxœn_p‹t_ønge
 {

450 
__be16
 
	mlow
;

451 
__be16
 
	mhigh
;

456 
	mIFLA_GENEVE_UNSPEC
,

457 
	mIFLA_GENEVE_ID
,

458 
	mIFLA_GENEVE_REMOTE
,

459 
	mIFLA_GENEVE_TTL
,

460 
	mIFLA_GENEVE_TOS
,

461 
	mIFLA_GENEVE_PORT
,

462 
	mIFLA_GENEVE_COLLECT_METADATA
,

463 
	mIFLA_GENEVE_REMOTE6
,

464 
	mIFLA_GENEVE_UDP_CSUM
,

465 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

466 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

467 
	m__IFLA_GENEVE_MAX


469 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

474 
	mIFLA_BOND_UNSPEC
,

475 
	mIFLA_BOND_MODE
,

476 
	mIFLA_BOND_ACTIVE_SLAVE
,

477 
	mIFLA_BOND_MIIMON
,

478 
	mIFLA_BOND_UPDELAY
,

479 
	mIFLA_BOND_DOWNDELAY
,

480 
	mIFLA_BOND_USE_CARRIER
,

481 
	mIFLA_BOND_ARP_INTERVAL
,

482 
	mIFLA_BOND_ARP_IP_TARGET
,

483 
	mIFLA_BOND_ARP_VALIDATE
,

484 
	mIFLA_BOND_ARP_ALL_TARGETS
,

485 
	mIFLA_BOND_PRIMARY
,

486 
	mIFLA_BOND_PRIMARY_RESELECT
,

487 
	mIFLA_BOND_FAIL_OVER_MAC
,

488 
	mIFLA_BOND_XMIT_HASH_POLICY
,

489 
	mIFLA_BOND_RESEND_IGMP
,

490 
	mIFLA_BOND_NUM_PEER_NOTIF
,

491 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

492 
	mIFLA_BOND_MIN_LINKS
,

493 
	mIFLA_BOND_LP_INTERVAL
,

494 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

495 
	mIFLA_BOND_AD_LACP_RATE
,

496 
	mIFLA_BOND_AD_SELECT
,

497 
	mIFLA_BOND_AD_INFO
,

498 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

499 
	mIFLA_BOND_AD_USER_PORT_KEY
,

500 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

501 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

502 
	m__IFLA_BOND_MAX
,

505 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

508 
	mIFLA_BOND_AD_INFO_UNSPEC
,

509 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

510 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

511 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

512 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

513 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

514 
	m__IFLA_BOND_AD_INFO_MAX
,

517 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

520 
	mIFLA_BOND_SLAVE_UNSPEC
,

521 
	mIFLA_BOND_SLAVE_STATE
,

522 
	mIFLA_BOND_SLAVE_MII_STATUS
,

523 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

524 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

525 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

526 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

527 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

528 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

529 
	m__IFLA_BOND_SLAVE_MAX
,

532 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

537 
	mIFLA_VF_INFO_UNSPEC
,

538 
	mIFLA_VF_INFO
,

539 
	m__IFLA_VF_INFO_MAX
,

542 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

545 
	mIFLA_VF_UNSPEC
,

546 
	mIFLA_VF_MAC
,

547 
	mIFLA_VF_VLAN
,

548 
	mIFLA_VF_TX_RATE
,

549 
	mIFLA_VF_SPOOFCHK
,

550 
	mIFLA_VF_LINK_STATE
,

551 
	mIFLA_VF_RATE
,

552 
	mIFLA_VF_RSS_QUERY_EN
,

555 
	mIFLA_VF_STATS
,

556 
	mIFLA_VF_TRUST
,

557 
	m__IFLA_VF_MAX
,

560 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

562 
	siÊa_vf_mac
 {

563 
__u32
 
	mvf
;

564 
__u8
 
	mmac
[32];

567 
	siÊa_vf_vœn
 {

568 
__u32
 
	mvf
;

569 
__u32
 
	mvœn
;

570 
__u32
 
	mqos
;

573 
	siÊa_vf_tx_øã
 {

574 
__u32
 
	mvf
;

575 
__u32
 
	møã
;

578 
	siÊa_vf_øã
 {

579 
__u32
 
	mvf
;

580 
__u32
 
	mmö_tx_øã
;

581 
__u32
 
	mmax_tx_øã
;

584 
	siÊa_vf_•oofchk
 {

585 
__u32
 
	mvf
;

586 
__u32
 
	m£âög
;

590 
	mIFLA_VF_LINK_STATE_AUTO
,

591 
	mIFLA_VF_LINK_STATE_ENABLE
,

592 
	mIFLA_VF_LINK_STATE_DISABLE
,

593 
	m__IFLA_VF_LINK_STATE_MAX
,

596 
	siÊa_vf_lök_°©e
 {

597 
__u32
 
	mvf
;

598 
__u32
 
	mlök_°©e
;

601 
	siÊa_vf_rss_quîy_í
 {

602 
__u32
 
	mvf
;

603 
__u32
 
	m£âög
;

607 
	mIFLA_VF_STATS_RX_PACKETS
,

608 
	mIFLA_VF_STATS_TX_PACKETS
,

609 
	mIFLA_VF_STATS_RX_BYTES
,

610 
	mIFLA_VF_STATS_TX_BYTES
,

611 
	mIFLA_VF_STATS_BROADCAST
,

612 
	mIFLA_VF_STATS_MULTICAST
,

613 
	m__IFLA_VF_STATS_MAX
,

616 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

618 
	siÊa_vf_åu°
 {

619 
__u32
 
	mvf
;

620 
__u32
 
	m£âög
;

639 
	mIFLA_VF_PORT_UNSPEC
,

640 
	mIFLA_VF_PORT
,

641 
	m__IFLA_VF_PORT_MAX
,

644 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

647 
	mIFLA_PORT_UNSPEC
,

648 
	mIFLA_PORT_VF
,

649 
	mIFLA_PORT_PROFILE
,

650 
	mIFLA_PORT_VSI_TYPE
,

651 
	mIFLA_PORT_INSTANCE_UUID
,

652 
	mIFLA_PORT_HOST_UUID
,

653 
	mIFLA_PORT_REQUEST
,

654 
	mIFLA_PORT_RESPONSE
,

655 
	m__IFLA_PORT_MAX
,

658 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

660 
	#PORT_PROFILE_MAX
 40

	)

661 
	#PORT_UUID_MAX
 16

	)

662 
	#PORT_SELF_VF
 -1

	)

665 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

666 
	mPORT_REQUEST_PREASSOCIATE_RR
,

667 
	mPORT_REQUEST_ASSOCIATE
,

668 
	mPORT_REQUEST_DISASSOCIATE
,

672 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

673 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

674 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

675 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

676 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

677 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

678 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

680 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

681 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

682 
	mPORT_PROFILE_RESPONSE_INVALID
,

683 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

684 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

685 
	mPORT_PROFILE_RESPONSE_ERROR
,

688 
	siÊa_p‹t_vsi
 {

689 
__u8
 
	mvsi_mgr_id
;

690 
__u8
 
	mvsi_ty≥_id
[3];

691 
__u8
 
	mvsi_ty≥_vîsi⁄
;

692 
__u8
 
	m∑d
[3];

699 
	mIFLA_IPOIB_UNSPEC
,

700 
	mIFLA_IPOIB_PKEY
,

701 
	mIFLA_IPOIB_MODE
,

702 
	mIFLA_IPOIB_UMCAST
,

703 
	m__IFLA_IPOIB_MAX


707 
	mIPOIB_MODE_DATAGRAM
 = 0,

708 
	mIPOIB_MODE_CONNECTED
 = 1,

711 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

717 
	mIFLA_HSR_UNSPEC
,

718 
	mIFLA_HSR_SLAVE1
,

719 
	mIFLA_HSR_SLAVE2
,

720 
	mIFLA_HSR_MULTICAST_SPEC
,

721 
	mIFLA_HSR_SUPERVISION_ADDR
,

722 
	mIFLA_HSR_SEQ_NR
,

723 
	m__IFLA_HSR_MAX
,

726 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

29 
	#PACKET_LOOPBACK
 5

	)

30 
	#PACKET_USER
 6

	)

31 
	#PACKET_KERNEL
 7

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_VNET_HDR
 15

	)

52 
	#PACKET_TX_TIMESTAMP
 16

	)

53 
	#PACKET_TIMESTAMP
 17

	)

54 
	#PACKET_FANOUT
 18

	)

55 
	#PACKET_TX_HAS_OFF
 19

	)

56 
	#PACKET_QDISC_BYPASS
 20

	)

57 
	#PACKET_ROLLOVER_STATS
 21

	)

58 
	#PACKET_FANOUT_DATA
 22

	)

60 
	#PACKET_FANOUT_HASH
 0

	)

61 
	#PACKET_FANOUT_LB
 1

	)

62 
	#PACKET_FANOUT_CPU
 2

	)

63 
	#PACKET_FANOUT_ROLLOVER
 3

	)

64 
	#PACKET_FANOUT_RND
 4

	)

65 
	#PACKET_FANOUT_QM
 5

	)

66 
	#PACKET_FANOUT_CBPF
 6

	)

67 
	#PACKET_FANOUT_EBPF
 7

	)

68 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

69 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

71 
	sçackë_°©s
 {

72 
	mç_∑ckës
;

73 
	mç_dr›s
;

76 
	sçackë_°©s_v3
 {

77 
	mç_∑ckës
;

78 
	mç_dr›s
;

79 
	mç_‰ìze_q_˙t
;

82 
	sçackë_rﬁlovî_°©s
 {

83 
__Æig√d_u64
 
	mç_Æl
;

84 
__Æig√d_u64
 
	mç_huge
;

85 
__Æig√d_u64
 
	mç_Áûed
;

88 
	uçackë_°©s_u
 {

89 
çackë_°©s
 
	m°©s1
;

90 
çackë_°©s_v3
 
	m°©s3
;

93 
	sçackë_auxd©a
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u16
 
	mç_vœn_tci
;

100 
__u16
 
	mç_vœn_çid
;

104 
	#TP_STATUS_KERNEL
 0

	)

105 
	#TP_STATUS_USER
 (1 << 0)

	)

106 
	#TP_STATUS_COPY
 (1 << 1)

	)

107 
	#TP_STATUS_LOSING
 (1 << 2)

	)

108 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

109 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

110 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

111 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

112 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

115 
	#TP_STATUS_AVAILABLE
 0

	)

116 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

117 
	#TP_STATUS_SENDING
 (1 << 1)

	)

118 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

121 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

122 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

123 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

126 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

128 
	sçackë_hdr
 {

129 
	mç_°©us
;

130 
	mç_Àn
;

131 
	mç_¢≠Àn
;

132 
	mç_mac
;

133 
	mç_√t
;

134 
	mç_£c
;

135 
	mç_u£c
;

138 
	#TPACKET_ALIGNMENT
 16

	)

139 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

140 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

142 
	sçackë2_hdr
 {

143 
__u32
 
	mç_°©us
;

144 
__u32
 
	mç_Àn
;

145 
__u32
 
	mç_¢≠Àn
;

146 
__u16
 
	mç_mac
;

147 
__u16
 
	mç_√t
;

148 
__u32
 
	mç_£c
;

149 
__u32
 
	mç_n£c
;

150 
__u16
 
	mç_vœn_tci
;

151 
__u16
 
	mç_vœn_çid
;

152 
__u8
 
	mç_∑ddög
[4];

155 
	sçackë_hdr_v¨ü¡1
 {

156 
__u32
 
	mç_rxhash
;

157 
__u32
 
	mç_vœn_tci
;

158 
__u16
 
	mç_vœn_çid
;

159 
__u16
 
	mç_∑ddög
;

162 
	sçackë3_hdr
 {

163 
__u32
 
	mç_√xt_off£t
;

164 
__u32
 
	mç_£c
;

165 
__u32
 
	mç_n£c
;

166 
__u32
 
	mç_¢≠Àn
;

167 
__u32
 
	mç_Àn
;

168 
__u32
 
	mç_°©us
;

169 
__u16
 
	mç_mac
;

170 
__u16
 
	mç_√t
;

173 
çackë_hdr_v¨ü¡1
 
	mhv1
;

175 
__u8
 
	mç_∑ddög
[8];

178 
	sçackë_bd_ts
 {

179 
	mts_£c
;

181 
	mts_u£c
;

182 
	mts_n£c
;

186 
	sçackë_hdr_v1
 {

187 
__u32
 
	mblock_°©us
;

188 
__u32
 
	mnum_pkts
;

189 
__u32
 
	moff£t_to_fú°_pkt
;

194 
__u32
 
	mblk_Àn
;

205 
__Æig√d_u64
 
	m£q_num
;

232 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

235 
	uçackë_bd_hódî_u
 {

236 
çackë_hdr_v1
 
	mbh1
;

239 
	sçackë_block_desc
 {

240 
__u32
 
	mvîsi⁄
;

241 
__u32
 
	moff£t_to_¥iv
;

242 
çackë_bd_hódî_u
 
	mhdr
;

245 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

246 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

248 
	eçackë_vîsi⁄s
 {

249 
	mTPACKET_V1
,

250 
	mTPACKET_V2
,

251 
	mTPACKET_V3


267 
	sçackë_ªq
 {

268 
	mç_block_size
;

269 
	mç_block_ƒ
;

270 
	mç_‰ame_size
;

271 
	mç_‰ame_ƒ
;

274 
	sçackë_ªq3
 {

275 
	mç_block_size
;

276 
	mç_block_ƒ
;

277 
	mç_‰ame_size
;

278 
	mç_‰ame_ƒ
;

279 
	mç_ªtúe_blk_tov
;

280 
	mç_sizeof_¥iv
;

281 
	mç_„©uª_ªq_w‹d
;

284 
	uçackë_ªq_u
 {

285 
çackë_ªq
 
	mªq
;

286 
çackë_ªq3
 
	mªq3
;

289 
	s∑ckë_mªq
 {

290 
	mmr_ifödex
;

291 
	mmr_ty≥
;

292 
	mmr_Æí
;

293 
	mmr_addªss
[8];

296 
	#PACKET_MR_MULTICAST
 0

	)

297 
	#PACKET_MR_PROMISC
 1

	)

298 
	#PACKET_MR_ALLMULTI
 2

	)

299 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/irqnr.h

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_STD_HEADER_SIZEOF
 64

	)

30 
	#PCI_VENDOR_ID
 0x00

	)

31 
	#PCI_DEVICE_ID
 0x02

	)

32 
	#PCI_COMMAND
 0x04

	)

33 
	#PCI_COMMAND_IO
 0x1

	)

34 
	#PCI_COMMAND_MEMORY
 0x2

	)

35 
	#PCI_COMMAND_MASTER
 0x4

	)

36 
	#PCI_COMMAND_SPECIAL
 0x8

	)

37 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

38 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

39 
	#PCI_COMMAND_PARITY
 0x40

	)

40 
	#PCI_COMMAND_WAIT
 0x80

	)

41 
	#PCI_COMMAND_SERR
 0x100

	)

42 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

43 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

45 
	#PCI_STATUS
 0x06

	)

46 
	#PCI_STATUS_INTERRUPT
 0x08

	)

47 
	#PCI_STATUS_CAP_LIST
 0x10

	)

48 
	#PCI_STATUS_66MHZ
 0x20

	)

49 
	#PCI_STATUS_UDF
 0x40

	)

50 
	#PCI_STATUS_FAST_BACK
 0x80

	)

51 
	#PCI_STATUS_PARITY
 0x100

	)

52 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

53 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

54 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

55 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

56 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

57 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

58 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

59 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

60 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

62 
	#PCI_CLASS_REVISION
 0x08

	)

63 
	#PCI_REVISION_ID
 0x08

	)

64 
	#PCI_CLASS_PROG
 0x09

	)

65 
	#PCI_CLASS_DEVICE
 0x0®

	)

67 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

68 
	#PCI_LATENCY_TIMER
 0x0d

	)

69 
	#PCI_HEADER_TYPE
 0x0ê

	)

70 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

71 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

72 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

74 
	#PCI_BIST
 0x0‡

	)

75 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

76 
	#PCI_BIST_START
 0x40

	)

77 
	#PCI_BIST_CAPABLE
 0x80

	)

85 
	#PCI_BASE_ADDRESS_0
 0x10

	)

86 
	#PCI_BASE_ADDRESS_1
 0x14

	)

87 
	#PCI_BASE_ADDRESS_2
 0x18

	)

88 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

89 
	#PCI_BASE_ADDRESS_4
 0x20

	)

90 
	#PCI_BASE_ADDRESS_5
 0x24

	)

91 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

93 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

97 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

98 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

99 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

100 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

104 
	#PCI_CARDBUS_CIS
 0x28

	)

105 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

106 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

107 
	#PCI_ROM_ADDRESS
 0x30

	)

108 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

109 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

111 
	#PCI_CAPABILITY_LIST
 0x34

	)

114 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

115 
	#PCI_INTERRUPT_PIN
 0x3d

	)

116 
	#PCI_MIN_GNT
 0x3ê

	)

117 
	#PCI_MAX_LAT
 0x3‡

	)

120 
	#PCI_PRIMARY_BUS
 0x18

	)

121 
	#PCI_SECONDARY_BUS
 0x19

	)

122 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

123 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

124 
	#PCI_IO_BASE
 0x1¯

	)

125 
	#PCI_IO_LIMIT
 0x1d

	)

126 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

127 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

128 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

129 
	#PCI_IO_RANGE_MASK
 (~0x0fULË

	)

130 
	#PCI_IO_1K_RANGE_MASK
 (~0x03ULË

	)

131 
	#PCI_SEC_STATUS
 0x1ê

	)

132 
	#PCI_MEMORY_BASE
 0x20

	)

133 
	#PCI_MEMORY_LIMIT
 0x22

	)

134 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

135 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

136 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

137 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

138 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

139 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

140 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

141 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

142 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

143 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

144 
	#PCI_IO_BASE_UPPER16
 0x30

	)

145 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

148 
	#PCI_ROM_ADDRESS1
 0x38

	)

150 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

151 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

152 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

153 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

154 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

155 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

156 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

157 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

160 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

162 
	#PCI_CB_SEC_STATUS
 0x16

	)

163 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

164 
	#PCI_CB_CARD_BUS
 0x19

	)

165 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

166 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

167 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

168 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

169 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

170 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

171 
	#PCI_CB_IO_BASE_0
 0x2c

	)

172 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

173 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

174 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

175 
	#PCI_CB_IO_BASE_1
 0x34

	)

176 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

177 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

178 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

179 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

181 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

182 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

183 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

184 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

185 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

186 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

187 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

188 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

189 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

190 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

191 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

192 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

193 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

194 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

199 
	#PCI_CAP_LIST_ID
 0

	)

200 
	#PCI_CAP_ID_PM
 0x01

	)

201 
	#PCI_CAP_ID_AGP
 0x02

	)

202 
	#PCI_CAP_ID_VPD
 0x03

	)

203 
	#PCI_CAP_ID_SLOTID
 0x04

	)

204 
	#PCI_CAP_ID_MSI
 0x05

	)

205 
	#PCI_CAP_ID_CHSWP
 0x06

	)

206 
	#PCI_CAP_ID_PCIX
 0x07

	)

207 
	#PCI_CAP_ID_HT
 0x08

	)

208 
	#PCI_CAP_ID_VNDR
 0x09

	)

209 
	#PCI_CAP_ID_DBG
 0x0A

	)

210 
	#PCI_CAP_ID_CCRC
 0x0B

	)

211 
	#PCI_CAP_ID_SHPC
 0x0C

	)

212 
	#PCI_CAP_ID_SSVID
 0x0D

	)

213 
	#PCI_CAP_ID_AGP3
 0x0E

	)

214 
	#PCI_CAP_ID_SECDEV
 0x0F

	)

215 
	#PCI_CAP_ID_EXP
 0x10

	)

216 
	#PCI_CAP_ID_MSIX
 0x11

	)

217 
	#PCI_CAP_ID_SATA
 0x12

	)

218 
	#PCI_CAP_ID_AF
 0x13

	)

219 
	#PCI_CAP_ID_EA
 0x14

	)

220 
	#PCI_CAP_ID_MAX
 
PCI_CAP_ID_EA


	)

221 
	#PCI_CAP_LIST_NEXT
 1

	)

222 
	#PCI_CAP_FLAGS
 2

	)

223 
	#PCI_CAP_SIZEOF
 4

	)

227 
	#PCI_PM_PMC
 2

	)

228 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

229 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

230 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

231 
	#PCI_PM_CAP_DSI
 0x0020

	)

232 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

233 
	#PCI_PM_CAP_D1
 0x0200

	)

234 
	#PCI_PM_CAP_D2
 0x0400

	)

235 
	#PCI_PM_CAP_PME
 0x0800

	)

236 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

237 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

238 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

239 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

240 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

241 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

242 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

243 
	#PCI_PM_CTRL
 4

	)

244 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

245 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

246 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

247 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

248 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

249 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

250 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

251 
	#PCI_PM_PPB_B2_B3
 0x40

	)

252 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

253 
	#PCI_PM_DATA_REGISTER
 7

	)

254 
	#PCI_PM_SIZEOF
 8

	)

258 
	#PCI_AGP_VERSION
 2

	)

259 
	#PCI_AGP_RFU
 3

	)

260 
	#PCI_AGP_STATUS
 4

	)

261 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

262 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

263 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

264 
	#PCI_AGP_STATUS_FW
 0x0010

	)

265 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

266 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

267 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

268 
	#PCI_AGP_COMMAND
 8

	)

269 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

270 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

271 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

272 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

273 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

274 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

275 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

276 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

277 
	#PCI_AGP_SIZEOF
 12

	)

281 
	#PCI_VPD_ADDR
 2

	)

282 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

283 
	#PCI_VPD_ADDR_F
 0x8000

	)

284 
	#PCI_VPD_DATA
 4

	)

285 
	#PCI_CAP_VPD_SIZEOF
 8

	)

289 
	#PCI_SID_ESR
 2

	)

290 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

291 
	#PCI_SID_ESR_FIC
 0x20

	)

292 
	#PCI_SID_CHASSIS_NR
 3

	)

296 
	#PCI_MSI_FLAGS
 2

	)

297 
	#PCI_MSI_FLAGS_ENABLE
 0x0001

	)

298 
	#PCI_MSI_FLAGS_QMASK
 0x000ê

	)

299 
	#PCI_MSI_FLAGS_QSIZE
 0x0070

	)

300 
	#PCI_MSI_FLAGS_64BIT
 0x0080

	)

301 
	#PCI_MSI_FLAGS_MASKBIT
 0x0100

	)

302 
	#PCI_MSI_RFU
 3

	)

303 
	#PCI_MSI_ADDRESS_LO
 4

	)

304 
	#PCI_MSI_ADDRESS_HI
 8

	)

305 
	#PCI_MSI_DATA_32
 8

	)

306 
	#PCI_MSI_MASK_32
 12

	)

307 
	#PCI_MSI_PENDING_32
 16

	)

308 
	#PCI_MSI_DATA_64
 12

	)

309 
	#PCI_MSI_MASK_64
 16

	)

310 
	#PCI_MSI_PENDING_64
 20

	)

313 
	#PCI_MSIX_FLAGS
 2

	)

314 
	#PCI_MSIX_FLAGS_QSIZE
 0x07FF

	)

315 
	#PCI_MSIX_FLAGS_MASKALL
 0x4000

	)

316 
	#PCI_MSIX_FLAGS_ENABLE
 0x8000

	)

317 
	#PCI_MSIX_TABLE
 4

	)

318 
	#PCI_MSIX_TABLE_BIR
 0x00000007

	)

319 
	#PCI_MSIX_TABLE_OFFSET
 0xfffffff8

	)

320 
	#PCI_MSIX_PBA
 8

	)

321 
	#PCI_MSIX_PBA_BIR
 0x00000007

	)

322 
	#PCI_MSIX_PBA_OFFSET
 0xfffffff8

	)

323 
	#PCI_MSIX_FLAGS_BIRMASK
 
PCI_MSIX_PBA_BIR


	)

324 
	#PCI_CAP_MSIX_SIZEOF
 12

	)

327 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

328 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

329 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

330 
	#PCI_MSIX_ENTRY_DATA
 8

	)

331 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

332 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 1

	)

336 
	#PCI_CHSWP_CSR
 2

	)

337 
	#PCI_CHSWP_DHA
 0x01

	)

338 
	#PCI_CHSWP_EIM
 0x02

	)

339 
	#PCI_CHSWP_PIE
 0x04

	)

340 
	#PCI_CHSWP_LOO
 0x08

	)

341 
	#PCI_CHSWP_PI
 0x30

	)

342 
	#PCI_CHSWP_EXT
 0x40

	)

343 
	#PCI_CHSWP_INS
 0x80

	)

347 
	#PCI_AF_LENGTH
 2

	)

348 
	#PCI_AF_CAP
 3

	)

349 
	#PCI_AF_CAP_TP
 0x01

	)

350 
	#PCI_AF_CAP_FLR
 0x02

	)

351 
	#PCI_AF_CTRL
 4

	)

352 
	#PCI_AF_CTRL_FLR
 0x01

	)

353 
	#PCI_AF_STATUS
 5

	)

354 
	#PCI_AF_STATUS_TP
 0x01

	)

355 
	#PCI_CAP_AF_SIZEOF
 6

	)

359 
	#PCI_EA_NUM_ENT
 2

	)

360 
	#PCI_EA_NUM_ENT_MASK
 0x3‡

	)

361 
	#PCI_EA_FIRST_ENT
 4

	)

362 
	#PCI_EA_FIRST_ENT_BRIDGE
 8

	)

363 
	#PCI_EA_ES
 0x00000007

	)

364 
	#PCI_EA_BEI
 0x000000f0

	)

366 
	#PCI_EA_BEI_BAR0
 0

	)

367 
	#PCI_EA_BEI_BAR5
 5

	)

368 
	#PCI_EA_BEI_BRIDGE
 6

	)

369 
	#PCI_EA_BEI_ENI
 7

	)

370 
	#PCI_EA_BEI_ROM
 8

	)

372 
	#PCI_EA_BEI_VF_BAR0
 9

	)

373 
	#PCI_EA_BEI_VF_BAR5
 14

	)

374 
	#PCI_EA_BEI_RESERVED
 15

	)

375 
	#PCI_EA_PP
 0x0000ff00

	)

376 
	#PCI_EA_SP
 0x00ff0000

	)

377 
	#PCI_EA_P_MEM
 0x00

	)

378 
	#PCI_EA_P_MEM_PREFETCH
 0x01

	)

379 
	#PCI_EA_P_IO
 0x02

	)

380 
	#PCI_EA_P_VF_MEM_PREFETCH
 0x03

	)

381 
	#PCI_EA_P_VF_MEM
 0x04

	)

382 
	#PCI_EA_P_BRIDGE_MEM
 0x05

	)

383 
	#PCI_EA_P_BRIDGE_MEM_PREFETCH
 0x06

	)

384 
	#PCI_EA_P_BRIDGE_IO
 0x07

	)

386 
	#PCI_EA_P_MEM_RESERVED
 0xfd

	)

387 
	#PCI_EA_P_IO_RESERVED
 0x„

	)

388 
	#PCI_EA_P_UNAVAILABLE
 0xf‡

	)

389 
	#PCI_EA_WRITABLE
 0x40000000

	)

390 
	#PCI_EA_ENABLE
 0x80000000

	)

391 
	#PCI_EA_BASE
 4

	)

392 
	#PCI_EA_MAX_OFFSET
 8

	)

394 
	#PCI_EA_IS_64
 0x00000002

	)

395 
	#PCI_EA_FIELD_MASK
 0xfffffff¯

	)

399 
	#PCI_X_CMD
 2

	)

400 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

401 
	#PCI_X_CMD_ERO
 0x0002

	)

402 
	#PCI_X_CMD_READ_512
 0x0000

	)

403 
	#PCI_X_CMD_READ_1K
 0x0004

	)

404 
	#PCI_X_CMD_READ_2K
 0x0008

	)

405 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

406 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

408 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

409 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

410 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

411 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

412 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

413 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

414 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

415 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

416 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

417 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

418 
	#PCI_X_STATUS
 4

	)

419 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

420 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

421 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

422 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

423 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

424 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

425 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

426 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

427 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

428 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

429 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

430 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

431 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

432 
	#PCI_X_ECC_CSR
 8

	)

433 
	#PCI_CAP_PCIX_SIZEOF_V0
 8

	)

434 
	#PCI_CAP_PCIX_SIZEOF_V1
 24

	)

435 
	#PCI_CAP_PCIX_SIZEOF_V2
 
PCI_CAP_PCIX_SIZEOF_V1


	)

439 
	#PCI_X_BRIDGE_SSTATUS
 2

	)

440 
	#PCI_X_SSTATUS_64BIT
 0x0001

	)

441 
	#PCI_X_SSTATUS_133MHZ
 0x0002

	)

442 
	#PCI_X_SSTATUS_FREQ
 0x03c0

	)

443 
	#PCI_X_SSTATUS_VERS
 0x3000

	)

444 
	#PCI_X_SSTATUS_V1
 0x1000

	)

445 
	#PCI_X_SSTATUS_V2
 0x2000

	)

446 
	#PCI_X_SSTATUS_266MHZ
 0x4000

	)

447 
	#PCI_X_SSTATUS_533MHZ
 0x8000

	)

448 
	#PCI_X_BRIDGE_STATUS
 4

	)

452 
	#PCI_SSVID_VENDOR_ID
 4

	)

453 
	#PCI_SSVID_DEVICE_ID
 6

	)

457 
	#PCI_EXP_FLAGS
 2

	)

458 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

459 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

460 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

461 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

462 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

463 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

464 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

465 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

466 
	#PCI_EXP_TYPE_PCIE_BRIDGE
 0x8

	)

467 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

468 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

469 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

470 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

471 
	#PCI_EXP_DEVCAP
 4

	)

472 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x00000007

	)

473 
	#PCI_EXP_DEVCAP_PHANTOM
 0x00000018

	)

474 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x00000020

	)

475 
	#PCI_EXP_DEVCAP_L0S
 0x000001c0

	)

476 
	#PCI_EXP_DEVCAP_L1
 0x00000e00

	)

477 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x00001000

	)

478 
	#PCI_EXP_DEVCAP_ATN_IND
 0x00002000

	)

479 
	#PCI_EXP_DEVCAP_PWR_IND
 0x00004000

	)

480 
	#PCI_EXP_DEVCAP_RBER
 0x00008000

	)

481 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x03fc0000

	)

482 
	#PCI_EXP_DEVCAP_PWR_SCL
 0x0c000000

	)

483 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

484 
	#PCI_EXP_DEVCTL
 8

	)

485 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

486 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

487 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

488 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

489 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

490 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

491 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

492 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

493 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

494 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

495 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

496 
	#PCI_EXP_DEVCTL_READRQ_128B
 0x0000

	)

497 
	#PCI_EXP_DEVCTL_READRQ_256B
 0x1000

	)

498 
	#PCI_EXP_DEVCTL_READRQ_512B
 0x2000

	)

499 
	#PCI_EXP_DEVCTL_READRQ_1024B
 0x3000

	)

500 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

501 
	#PCI_EXP_DEVSTA
 10

	)

502 
	#PCI_EXP_DEVSTA_CED
 0x0001

	)

503 
	#PCI_EXP_DEVSTA_NFED
 0x0002

	)

504 
	#PCI_EXP_DEVSTA_FED
 0x0004

	)

505 
	#PCI_EXP_DEVSTA_URD
 0x0008

	)

506 
	#PCI_EXP_DEVSTA_AUXPD
 0x0010

	)

507 
	#PCI_EXP_DEVSTA_TRPND
 0x0020

	)

508 
	#PCI_EXP_LNKCAP
 12

	)

509 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

510 
	#PCI_EXP_LNKCAP_SLS_2_5GB
 0x00000001

	)

511 
	#PCI_EXP_LNKCAP_SLS_5_0GB
 0x00000002

	)

512 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

513 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

514 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

515 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

516 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

517 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

518 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

519 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

520 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

521 
	#PCI_EXP_LNKCTL
 16

	)

522 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

523 
	#PCI_EXP_LNKCTL_ASPM_L0S
 0x0001

	)

524 
	#PCI_EXP_LNKCTL_ASPM_L1
 0x0002

	)

525 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

526 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

527 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

528 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

529 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

530 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x0100

	)

531 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

532 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

533 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

534 
	#PCI_EXP_LNKSTA
 18

	)

535 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

536 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x0001

	)

537 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x0002

	)

538 
	#PCI_EXP_LNKSTA_CLS_8_0GB
 0x0003

	)

539 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

540 
	#PCI_EXP_LNKSTA_NLW_X1
 0x0010

	)

541 
	#PCI_EXP_LNKSTA_NLW_X2
 0x0020

	)

542 
	#PCI_EXP_LNKSTA_NLW_X4
 0x0040

	)

543 
	#PCI_EXP_LNKSTA_NLW_X8
 0x0080

	)

544 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

545 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

546 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

547 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

548 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

549 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

550 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V1
 20

	)

551 
	#PCI_EXP_SLTCAP
 20

	)

552 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

553 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

554 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

555 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

556 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

557 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

558 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

559 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

560 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

561 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

562 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

563 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

564 
	#PCI_EXP_SLTCTL
 24

	)

565 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

566 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

567 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

568 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

569 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

570 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

571 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

572 
	#PCI_EXP_SLTCTL_ATTN_IND_ON
 0x0040

	)

573 
	#PCI_EXP_SLTCTL_ATTN_IND_BLINK
 0x0080

	)

574 
	#PCI_EXP_SLTCTL_ATTN_IND_OFF
 0x00c0

	)

575 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

576 
	#PCI_EXP_SLTCTL_PWR_IND_ON
 0x0100

	)

577 
	#PCI_EXP_SLTCTL_PWR_IND_BLINK
 0x0200

	)

578 
	#PCI_EXP_SLTCTL_PWR_IND_OFF
 0x0300

	)

579 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

580 
	#PCI_EXP_SLTCTL_PWR_ON
 0x0000

	)

581 
	#PCI_EXP_SLTCTL_PWR_OFF
 0x0400

	)

582 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

583 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

584 
	#PCI_EXP_SLTSTA
 26

	)

585 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

586 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

587 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

588 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

589 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

590 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

591 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

592 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

593 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

594 
	#PCI_EXP_RTCTL
 28

	)

595 
	#PCI_EXP_RTCTL_SECEE
 0x0001

	)

596 
	#PCI_EXP_RTCTL_SENFEE
 0x0002

	)

597 
	#PCI_EXP_RTCTL_SEFEE
 0x0004

	)

598 
	#PCI_EXP_RTCTL_PMEIE
 0x0008

	)

599 
	#PCI_EXP_RTCTL_CRSSVE
 0x0010

	)

600 
	#PCI_EXP_RTCAP
 30

	)

601 
	#PCI_EXP_RTCAP_CRSVIS
 0x0001

	)

602 
	#PCI_EXP_RTSTA
 32

	)

603 
	#PCI_EXP_RTSTA_PME
 0x00010000

	)

604 
	#PCI_EXP_RTSTA_PENDING
 0x00020000

	)

613 
	#PCI_EXP_DEVCAP2
 36

	)

614 
	#PCI_EXP_DEVCAP2_ARI
 0x00000020

	)

615 
	#PCI_EXP_DEVCAP2_LTR
 0x00000800

	)

616 
	#PCI_EXP_DEVCAP2_OBFF_MASK
 0x000c0000

	)

617 
	#PCI_EXP_DEVCAP2_OBFF_MSG
 0x00040000

	)

618 
	#PCI_EXP_DEVCAP2_OBFF_WAKE
 0x00080000

	)

619 
	#PCI_EXP_DEVCTL2
 40

	)

620 
	#PCI_EXP_DEVCTL2_COMP_TIMEOUT
 0x000‡

	)

621 
	#PCI_EXP_DEVCTL2_ARI
 0x0020

	)

622 
	#PCI_EXP_DEVCTL2_IDO_REQ_EN
 0x0100

	)

623 
	#PCI_EXP_DEVCTL2_IDO_CMP_EN
 0x0200

	)

624 
	#PCI_EXP_DEVCTL2_LTR_EN
 0x0400

	)

625 
	#PCI_EXP_DEVCTL2_OBFF_MSGA_EN
 0x2000

	)

626 
	#PCI_EXP_DEVCTL2_OBFF_MSGB_EN
 0x4000

	)

627 
	#PCI_EXP_DEVCTL2_OBFF_WAKE_EN
 0x6000

	)

628 
	#PCI_EXP_DEVSTA2
 42

	)

629 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V2
 44

	)

630 
	#PCI_EXP_LNKCAP2
 44

	)

631 
	#PCI_EXP_LNKCAP2_SLS_2_5GB
 0x00000002

	)

632 
	#PCI_EXP_LNKCAP2_SLS_5_0GB
 0x00000004

	)

633 
	#PCI_EXP_LNKCAP2_SLS_8_0GB
 0x00000008

	)

634 
	#PCI_EXP_LNKCAP2_CROSSLINK
 0x00000100

	)

635 
	#PCI_EXP_LNKCTL2
 48

	)

636 
	#PCI_EXP_LNKSTA2
 50

	)

637 
	#PCI_EXP_SLTCAP2
 52

	)

638 
	#PCI_EXP_SLTCTL2
 56

	)

639 
	#PCI_EXP_SLTSTA2
 58

	)

642 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

643 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

644 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

646 
	#PCI_EXT_CAP_ID_ERR
 0x01

	)

647 
	#PCI_EXT_CAP_ID_VC
 0x02

	)

648 
	#PCI_EXT_CAP_ID_DSN
 0x03

	)

649 
	#PCI_EXT_CAP_ID_PWR
 0x04

	)

650 
	#PCI_EXT_CAP_ID_RCLD
 0x05

	)

651 
	#PCI_EXT_CAP_ID_RCILC
 0x06

	)

652 
	#PCI_EXT_CAP_ID_RCEC
 0x07

	)

653 
	#PCI_EXT_CAP_ID_MFVC
 0x08

	)

654 
	#PCI_EXT_CAP_ID_VC9
 0x09

	)

655 
	#PCI_EXT_CAP_ID_RCRB
 0x0A

	)

656 
	#PCI_EXT_CAP_ID_VNDR
 0x0B

	)

657 
	#PCI_EXT_CAP_ID_CAC
 0x0C

	)

658 
	#PCI_EXT_CAP_ID_ACS
 0x0D

	)

659 
	#PCI_EXT_CAP_ID_ARI
 0x0E

	)

660 
	#PCI_EXT_CAP_ID_ATS
 0x0F

	)

661 
	#PCI_EXT_CAP_ID_SRIOV
 0x10

	)

662 
	#PCI_EXT_CAP_ID_MRIOV
 0x11

	)

663 
	#PCI_EXT_CAP_ID_MCAST
 0x12

	)

664 
	#PCI_EXT_CAP_ID_PRI
 0x13

	)

665 
	#PCI_EXT_CAP_ID_AMD_XXX
 0x14

	)

666 
	#PCI_EXT_CAP_ID_REBAR
 0x15

	)

667 
	#PCI_EXT_CAP_ID_DPA
 0x16

	)

668 
	#PCI_EXT_CAP_ID_TPH
 0x17

	)

669 
	#PCI_EXT_CAP_ID_LTR
 0x18

	)

670 
	#PCI_EXT_CAP_ID_SECPCI
 0x19

	)

671 
	#PCI_EXT_CAP_ID_PMUX
 0x1A

	)

672 
	#PCI_EXT_CAP_ID_PASID
 0x1B

	)

673 
	#PCI_EXT_CAP_ID_MAX
 
PCI_EXT_CAP_ID_PASID


	)

675 
	#PCI_EXT_CAP_DSN_SIZEOF
 12

	)

676 
	#PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF
 40

	)

679 
	#PCI_ERR_UNCOR_STATUS
 4

	)

680 
	#PCI_ERR_UNC_UND
 0x00000001

	)

681 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

682 
	#PCI_ERR_UNC_SURPDN
 0x00000020

	)

683 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

684 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

685 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

686 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

687 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

688 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

689 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

690 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

691 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

692 
	#PCI_ERR_UNC_ACSV
 0x00200000

	)

693 
	#PCI_ERR_UNC_INTN
 0x00400000

	)

694 
	#PCI_ERR_UNC_MCBTLP
 0x00800000

	)

695 
	#PCI_ERR_UNC_ATOMEG
 0x01000000

	)

696 
	#PCI_ERR_UNC_TLPPRE
 0x02000000

	)

697 
	#PCI_ERR_UNCOR_MASK
 8

	)

699 
	#PCI_ERR_UNCOR_SEVER
 12

	)

701 
	#PCI_ERR_COR_STATUS
 16

	)

702 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

703 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

704 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

705 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

706 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

707 
	#PCI_ERR_COR_ADV_NFAT
 0x00002000

	)

708 
	#PCI_ERR_COR_INTERNAL
 0x00004000

	)

709 
	#PCI_ERR_COR_LOG_OVER
 0x00008000

	)

710 
	#PCI_ERR_COR_MASK
 20

	)

712 
	#PCI_ERR_CAP
 24

	)

713 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

714 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

715 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

716 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

717 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

718 
	#PCI_ERR_HEADER_LOG
 28

	)

719 
	#PCI_ERR_ROOT_COMMAND
 44

	)

721 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

723 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

725 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

726 
	#PCI_ERR_ROOT_STATUS
 48

	)

727 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

729 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

731 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

733 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

734 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

735 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

736 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

737 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

740 
	#PCI_VC_PORT_CAP1
 4

	)

741 
	#PCI_VC_CAP1_EVCC
 0x00000007

	)

742 
	#PCI_VC_CAP1_LPEVCC
 0x00000070

	)

743 
	#PCI_VC_CAP1_ARB_SIZE
 0x00000c00

	)

744 
	#PCI_VC_PORT_CAP2
 8

	)

745 
	#PCI_VC_CAP2_32_PHASE
 0x00000002

	)

746 
	#PCI_VC_CAP2_64_PHASE
 0x00000004

	)

747 
	#PCI_VC_CAP2_128_PHASE
 0x00000008

	)

748 
	#PCI_VC_CAP2_ARB_OFF
 0xff000000

	)

749 
	#PCI_VC_PORT_CTRL
 12

	)

750 
	#PCI_VC_PORT_CTRL_LOAD_TABLE
 0x00000001

	)

751 
	#PCI_VC_PORT_STATUS
 14

	)

752 
	#PCI_VC_PORT_STATUS_TABLE
 0x00000001

	)

753 
	#PCI_VC_RES_CAP
 16

	)

754 
	#PCI_VC_RES_CAP_32_PHASE
 0x00000002

	)

755 
	#PCI_VC_RES_CAP_64_PHASE
 0x00000004

	)

756 
	#PCI_VC_RES_CAP_128_PHASE
 0x00000008

	)

757 
	#PCI_VC_RES_CAP_128_PHASE_TB
 0x00000010

	)

758 
	#PCI_VC_RES_CAP_256_PHASE
 0x00000020

	)

759 
	#PCI_VC_RES_CAP_ARB_OFF
 0xff000000

	)

760 
	#PCI_VC_RES_CTRL
 20

	)

761 
	#PCI_VC_RES_CTRL_LOAD_TABLE
 0x00010000

	)

762 
	#PCI_VC_RES_CTRL_ARB_SELECT
 0x000e0000

	)

763 
	#PCI_VC_RES_CTRL_ID
 0x07000000

	)

764 
	#PCI_VC_RES_CTRL_ENABLE
 0x80000000

	)

765 
	#PCI_VC_RES_STATUS
 26

	)

766 
	#PCI_VC_RES_STATUS_TABLE
 0x00000001

	)

767 
	#PCI_VC_RES_STATUS_NEGO
 0x00000002

	)

768 
	#PCI_CAP_VC_BASE_SIZEOF
 0x10

	)

769 
	#PCI_CAP_VC_PER_VC_SIZEOF
 0x0C

	)

772 
	#PCI_PWR_DSR
 4

	)

773 
	#PCI_PWR_DATA
 8

	)

774 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

775 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

776 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

777 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

778 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

779 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

780 
	#PCI_PWR_CAP
 12

	)

781 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

782 
	#PCI_EXT_CAP_PWR_SIZEOF
 16

	)

785 
	#PCI_VNDR_HEADER
 4

	)

786 
	#PCI_VNDR_HEADER_ID
(
x
Ë((xË& 0xffff)

	)

787 
	#PCI_VNDR_HEADER_REV
(
x
Ë(((xË>> 16Ë& 0xf)

	)

788 
	#PCI_VNDR_HEADER_LEN
(
x
Ë(((xË>> 20Ë& 0xfff)

	)

798 
	#HT_3BIT_CAP_MASK
 0xE0

	)

799 
	#HT_CAPTYPE_SLAVE
 0x00

	)

800 
	#HT_CAPTYPE_HOST
 0x20

	)

802 
	#HT_5BIT_CAP_MASK
 0xF8

	)

803 
	#HT_CAPTYPE_IRQ
 0x80

	)

804 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

805 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

806 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

807 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

808 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

809 
	#HT_MSI_FLAGS
 0x02

	)

810 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

811 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

812 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

813 
	#HT_MSI_ADDR_LO
 0x04

	)

814 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

815 
	#HT_MSI_ADDR_HI
 0x08

	)

816 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

817 
	#HT_CAPTYPE_VCSET
 0xB8

	)

818 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

819 
	#HT_CAPTYPE_GEN3
 0xD0

	)

820 
	#HT_CAPTYPE_PM
 0xE0

	)

821 
	#HT_CAP_SIZEOF_LONG
 28

	)

822 
	#HT_CAP_SIZEOF_SHORT
 24

	)

825 
	#PCI_ARI_CAP
 0x04

	)

826 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

827 
	#PCI_ARI_CAP_ACS
 0x0002

	)

828 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

829 
	#PCI_ARI_CTRL
 0x06

	)

830 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

831 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

832 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

833 
	#PCI_EXT_CAP_ARI_SIZEOF
 8

	)

836 
	#PCI_ATS_CAP
 0x04

	)

837 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

838 
	#PCI_ATS_MAX_QDEP
 32

	)

839 
	#PCI_ATS_CTRL
 0x06

	)

840 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

841 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

842 
	#PCI_ATS_MIN_STU
 12

	)

843 
	#PCI_EXT_CAP_ATS_SIZEOF
 8

	)

846 
	#PCI_PRI_CTRL
 0x04

	)

847 
	#PCI_PRI_CTRL_ENABLE
 0x01

	)

848 
	#PCI_PRI_CTRL_RESET
 0x02

	)

849 
	#PCI_PRI_STATUS
 0x06

	)

850 
	#PCI_PRI_STATUS_RF
 0x001

	)

851 
	#PCI_PRI_STATUS_UPRGI
 0x002

	)

852 
	#PCI_PRI_STATUS_STOPPED
 0x100

	)

853 
	#PCI_PRI_MAX_REQ
 0x08

	)

854 
	#PCI_PRI_ALLOC_REQ
 0x0¯

	)

855 
	#PCI_EXT_CAP_PRI_SIZEOF
 16

	)

858 
	#PCI_PASID_CAP
 0x04

	)

859 
	#PCI_PASID_CAP_EXEC
 0x02

	)

860 
	#PCI_PASID_CAP_PRIV
 0x04

	)

861 
	#PCI_PASID_CTRL
 0x06

	)

862 
	#PCI_PASID_CTRL_ENABLE
 0x01

	)

863 
	#PCI_PASID_CTRL_EXEC
 0x02

	)

864 
	#PCI_PASID_CTRL_PRIV
 0x04

	)

865 
	#PCI_EXT_CAP_PASID_SIZEOF
 8

	)

868 
	#PCI_SRIOV_CAP
 0x04

	)

869 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

870 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

871 
	#PCI_SRIOV_CTRL
 0x08

	)

872 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

873 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

874 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

875 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

876 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

877 
	#PCI_SRIOV_STATUS
 0x0®

	)

878 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

879 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

880 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

881 
	#PCI_SRIOV_NUM_VF
 0x10

	)

882 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

883 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

884 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

885 
	#PCI_SRIOV_VF_DID
 0x1®

	)

886 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

887 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

888 
	#PCI_SRIOV_BAR
 0x24

	)

889 
	#PCI_SRIOV_NUM_BARS
 6

	)

890 
	#PCI_SRIOV_VFM
 0x3¯

	)

891 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

892 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

893 
	#PCI_SRIOV_VFM_UA
 0x0

	)

894 
	#PCI_SRIOV_VFM_MI
 0x1

	)

895 
	#PCI_SRIOV_VFM_MO
 0x2

	)

896 
	#PCI_SRIOV_VFM_AV
 0x3

	)

897 
	#PCI_EXT_CAP_SRIOV_SIZEOF
 64

	)

899 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

900 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

901 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

902 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

903 
	#PCI_LTR_SCALE_SHIFT
 10

	)

904 
	#PCI_EXT_CAP_LTR_SIZEOF
 8

	)

907 
	#PCI_ACS_CAP
 0x04

	)

908 
	#PCI_ACS_SV
 0x01

	)

909 
	#PCI_ACS_TB
 0x02

	)

910 
	#PCI_ACS_RR
 0x04

	)

911 
	#PCI_ACS_CR
 0x08

	)

912 
	#PCI_ACS_UF
 0x10

	)

913 
	#PCI_ACS_EC
 0x20

	)

914 
	#PCI_ACS_DT
 0x40

	)

915 
	#PCI_ACS_EGRESS_BITS
 0x05

	)

916 
	#PCI_ACS_CTRL
 0x06

	)

917 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

919 
	#PCI_VSEC_HDR
 4

	)

920 
	#PCI_VSEC_HDR_LEN_SHIFT
 20

	)

923 
	#PCI_SATA_REGS
 4

	)

924 
	#PCI_SATA_REGS_MASK
 0xF

	)

925 
	#PCI_SATA_REGS_INLINE
 0xF

	)

926 
	#PCI_SATA_SIZEOF_SHORT
 8

	)

927 
	#PCI_SATA_SIZEOF_LONG
 16

	)

930 
	#PCI_REBAR_CTRL
 8

	)

931 
	#PCI_REBAR_CTRL_NBAR_MASK
 (7 << 5Ë

	)

932 
	#PCI_REBAR_CTRL_NBAR_SHIFT
 5

	)

935 
	#PCI_DPA_CAP
 4

	)

936 
	#PCI_DPA_CAP_SUBSTATE_MASK
 0x1F

	)

937 
	#PCI_DPA_BASE_SIZEOF
 16

	)

940 
	#PCI_TPH_CAP
 4

	)

941 
	#PCI_TPH_CAP_LOC_MASK
 0x600

	)

942 
	#PCI_TPH_LOC_NONE
 0x000

	)

943 
	#PCI_TPH_LOC_CAP
 0x200

	)

944 
	#PCI_TPH_LOC_MSIX
 0x400

	)

945 
	#PCI_TPH_CAP_ST_MASK
 0x07FF0000

	)

946 
	#PCI_TPH_CAP_ST_SHIFT
 16

	)

947 
	#PCI_TPH_BASE_SIZEOF
 12

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

60 
	#__UAPI_DEF_IF_IFCONF
 0

	)

61 
	#__UAPI_DEF_IF_IFMAP
 0

	)

62 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

63 
	#__UAPI_DEF_IF_IFREQ
 0

	)

65 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

67 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


68 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

77 
	#__UAPI_DEF_IF_IFCONF
 1

	)

78 
	#__UAPI_DEF_IF_IFMAP
 1

	)

79 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

80 
	#__UAPI_DEF_IF_IFREQ
 1

	)

82 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

84 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

89 #i‡
deföed
(
_NETINET_IN_H
)

93 
	#__UAPI_DEF_IN_ADDR
 0

	)

94 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

95 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

96 
	#__UAPI_DEF_IP_MREQ
 0

	)

97 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

98 
	#__UAPI_DEF_IN_CLASS
 0

	)

100 
	#__UAPI_DEF_IN6_ADDR
 0

	)

105 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

106 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

108 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

110 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

111 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

112 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

113 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

114 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

115 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

122 
	#__UAPI_DEF_IN_ADDR
 1

	)

123 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

124 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

125 
	#__UAPI_DEF_IP_MREQ
 1

	)

126 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

127 
	#__UAPI_DEF_IN_CLASS
 1

	)

129 
	#__UAPI_DEF_IN6_ADDR
 1

	)

132 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

133 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

134 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

135 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

136 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

137 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

138 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

143 #i‡
deföed
(
_SYS_XATTR_H
)

144 
	#__UAPI_DEF_XATTR
 0

	)

146 
	#__UAPI_DEF_XATTR
 1

	)

155 
	#__UAPI_DEF_IF_IFCONF
 1

	)

156 
	#__UAPI_DEF_IF_IFMAP
 1

	)

157 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

158 
	#__UAPI_DEF_IF_IFREQ
 1

	)

160 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

162 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

165 
	#__UAPI_DEF_IN_ADDR
 1

	)

166 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

167 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

168 
	#__UAPI_DEF_IP_MREQ
 1

	)

169 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

170 
	#__UAPI_DEF_IN_CLASS
 1

	)

173 
	#__UAPI_DEF_IN6_ADDR
 1

	)

174 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

175 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

176 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

177 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

178 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

179 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

180 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

183 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

57 
	#NLM_F_DUMP_FILTERED
 32

	)

60 
	#NLM_F_ROOT
 0x100

	)

61 
	#NLM_F_MATCH
 0x200

	)

62 
	#NLM_F_ATOMIC
 0x400

	)

63 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

66 
	#NLM_F_REPLACE
 0x100

	)

67 
	#NLM_F_EXCL
 0x200

	)

68 
	#NLM_F_CREATE
 0x400

	)

69 
	#NLM_F_APPEND
 0x800

	)

80 
	#NLMSG_ALIGNTO
 4U

	)

81 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

82 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

84 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

85 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

86 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

87 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

88 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

90 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

91 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

93 
	#NLMSG_NOOP
 0x1

	)

94 
	#NLMSG_ERROR
 0x2

	)

95 
	#NLMSG_DONE
 0x3

	)

96 
	#NLMSG_OVERRUN
 0x4

	)

98 
	#NLMSG_MIN_TYPE
 0x10

	)

100 
	s∆msgîr
 {

101 
	mîr‹
;

102 
∆msghdr
 
	mmsg
;

105 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

106 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

107 
	#NETLINK_PKTINFO
 3

	)

108 
	#NETLINK_BROADCAST_ERROR
 4

	)

109 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	#NETLINK_RX_RING
 6

	)

111 
	#NETLINK_TX_RING
 7

	)

112 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

114 
	#NETLINK_CAP_ACK
 10

	)

116 
	s∆_pktöfo
 {

117 
__u32
 
	mgroup
;

120 
	s∆_mm≠_ªq
 {

121 
	mnm_block_size
;

122 
	mnm_block_ƒ
;

123 
	mnm_‰ame_size
;

124 
	mnm_‰ame_ƒ
;

127 
	s∆_mm≠_hdr
 {

128 
	mnm_°©us
;

129 
	mnm_Àn
;

130 
__u32
 
	mnm_group
;

132 
__u32
 
	mnm_pid
;

133 
__u32
 
	mnm_uid
;

134 
__u32
 
	mnm_gid
;

137 
	e∆_mm≠_°©us
 {

138 
	mNL_MMAP_STATUS_UNUSED
,

139 
	mNL_MMAP_STATUS_RESERVED
,

140 
	mNL_MMAP_STATUS_VALID
,

141 
	mNL_MMAP_STATUS_COPY
,

142 
	mNL_MMAP_STATUS_SKIP
,

145 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

146 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

147 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

149 
	#NET_MAJOR
 36

	)

152 
	mNETLINK_UNCONNECTED
 = 0,

153 
	mNETLINK_CONNECTED
,

165 
	s∆©å
 {

166 
__u16
 
	m∆a_Àn
;

167 
__u16
 
	m∆a_ty≥
;

180 
	#NLA_F_NESTED
 (1 << 15)

	)

181 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

182 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

184 
	#NLA_ALIGNTO
 4

	)

185 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

186 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stddef.h

	@
1
.
1
/usr/include
138
2056
ahb.c
ani.c
ani.h
antenna.c
ar5008_initvals.h
ar5008_phy.c
ar9001_initvals.h
ar9002_calib.c
ar9002_hw.c
ar9002_initvals.h
ar9002_mac.c
ar9002_phy.c
ar9002_phy.h
ar9003_2p2_initvals.h
ar9003_aic.c
ar9003_aic.h
ar9003_buffalo_initvals.h
ar9003_calib.c
ar9003_eeprom.c
ar9003_eeprom.h
ar9003_hw.c
ar9003_mac.c
ar9003_mac.h
ar9003_mci.c
ar9003_mci.h
ar9003_paprd.c
ar9003_phy.c
ar9003_phy.h
ar9003_rtt.c
ar9003_rtt.h
ar9003_wow.c
ar9330_1p1_initvals.h
ar9330_1p2_initvals.h
ar9340_initvals.h
ar9462_2p0_initvals.h
ar9462_2p1_initvals.h
ar9485_initvals.h
ar953x_initvals.h
ar955x_1p0_initvals.h
ar9565_1p0_initvals.h
ar9565_1p1_initvals.h
ar956x_initvals.h
ar9580_1p0_initvals.h
ath9k.h
ath9k.mod.c
ath9k_common.mod.c
ath9k_htc.mod.c
ath9k_hw.mod.c
beacon.c
btcoex.c
btcoex.h
calib.c
calib.h
channel.c
common-beacon.c
common-beacon.h
common-debug.c
common-debug.h
common-init.c
common-init.h
common-spectral.c
common-spectral.h
common.c
common.h
debug.c
debug.h
debug_sta.c
dfs.c
dfs.h
dfs_debug.c
dfs_debug.h
dynack.c
dynack.h
eeprom.c
eeprom.h
eeprom_4k.c
eeprom_9287.c
eeprom_def.c
gpio.c
hif_usb.c
hif_usb.h
htc.h
htc_drv_beacon.c
htc_drv_debug.c
htc_drv_gpio.c
htc_drv_init.c
htc_drv_main.c
htc_drv_txrx.c
htc_hst.c
htc_hst.h
hw-ops.h
hw.c
hw.h
init.c
link.c
mac.c
mac.h
main.c
mci.c
mci.h
pci.c
phy.h
recv.c
reg.h
reg_aic.h
reg_mci.h
reg_wow.h
tx99.c
wmi.c
wmi.h
wow.c
xmit.c
../ath.h
../dfs_pattern_detector.h
../reg.h
../regd.h
../spectral_common.h
/usr/include/linux/if_ether.h
/usr/include/linux/kernel.h
/usr/include/linux/netdevice.h
/usr/include/linux/nl80211.h
/usr/include/linux/pci.h
/usr/include/linux/random.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/if.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/ioctl.h
/usr/include/linux/irqnr.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/libc-compat.h
/usr/include/linux/netlink.h
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
